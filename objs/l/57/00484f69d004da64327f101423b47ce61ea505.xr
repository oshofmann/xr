var __xr_tmp = [
"void <a class=\"id\" href=\"#set_perf_event_pending\">set_perf_event_pending</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#apic\">apic</a> || !<a class=\"id\" href=\"#x86_pmu_initialized\">x86_pmu_initialized</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_self\">send_IPI_self</a>(<a class=\"id\" href=\"#LOCAL_PENDING_VECTOR\">LOCAL_PENDING_VECTOR</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_events_lapic_init\">perf_events_lapic_init</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#apic\">apic</a> || !<a class=\"id\" href=\"#x86_pmu_initialized\">x86_pmu_initialized</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Always use NMI for PMU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTPC\">APIC_LVTPC</a>, <a class=\"id\" href=\"#APIC_DM_NMI\">APIC_DM_NMI</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#pmu_nmi_state\">pmu_nmi_state</a> {", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#marked\">marked</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handled\">handled</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#pmu_nmi_state\">pmu_nmi_state</a>, <a class=\"id\" href=\"#pmu_nmi\">pmu_nmi</a>);", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"<a class=\"id\" href=\"#perf_event_nmi_handler\">perf_event_nmi_handler</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#cmd\">cmd</a>, void *<a class=\"id\" href=\"#__args\">__args</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#die_args\">die_args</a> *<a class=\"id\" href=\"#args\">args</a> = <a class=\"id\" href=\"#__args\">__args</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#this_nmi\">this_nmi</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#handled\">handled</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#active_events\">active_events</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DIE_NMI\">DIE_NMI</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DIE_NMI_IPI\">DIE_NMI_IPI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DIE_NMIUNKNOWN\">DIE_NMIUNKNOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_nmi\">this_nmi</a> = <a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#irq_stat\">irq_stat</a>.<a class=\"id\" href=\"#__nmi_count\">__nmi_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this_nmi\">this_nmi</a> != <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#pmu_nmi\">pmu_nmi</a>).<a class=\"id\" href=\"#marked\">marked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* let the kernel handle the unknown nmi */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This one is a PMU back-to-back nmi. Two events</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * trigger 'simultaneously' raising two back-to-back</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NMIs. If the first NMI handles both, the latter</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will be empty and daze the CPU. So, we drop it to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * avoid false-positive 'unknown nmi' messages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTPC\">APIC_LVTPC</a>, <a class=\"id\" href=\"#APIC_DM_NMI\">APIC_DM_NMI</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handled\">handled</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#handle_irq\">handle_irq</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#handled\">handled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_nmi\">this_nmi</a> = <a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#irq_stat\">irq_stat</a>.<a class=\"id\" href=\"#__nmi_count\">__nmi_count</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#handled\">handled</a> &gt; 1) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the next nmi could be a back-to-back nmi */</span>", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#pmu_nmi\">pmu_nmi</a>).<a class=\"id\" href=\"#marked\">marked</a> == <a class=\"id\" href=\"#this_nmi\">this_nmi</a>) &&", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#pmu_nmi\">pmu_nmi</a>).<a class=\"id\" href=\"#handled\">handled</a> &gt; 1))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We could have two subsequent back-to-back nmis: The</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first handles more than one counter, the 2nd</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handles only one counter and the 3rd handles no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * counter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is the 2nd nmi because the previous was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handling more than one counter. We will mark the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * next (3rd) and then drop it if unhandled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#pmu_nmi\">pmu_nmi</a>).<a class=\"id\" href=\"#marked\">marked</a><span class=\"ts\"/>= <a class=\"id\" href=\"#this_nmi\">this_nmi</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#pmu_nmi\">pmu_nmi</a>).<a class=\"id\" href=\"#handled\">handled</a><span class=\"ts\"/>= <a class=\"id\" href=\"#handled\">handled</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#perf_event_nmi_notifier\">perf_event_nmi_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_event_nmi_handler\">perf_event_nmi_handler</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#priority\">priority</a><span class=\"ts\"/><span class=\"ts\"/>= 1", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> <a class=\"id\" href=\"#unconstrained\">unconstrained</a>;", 
"static struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> <a class=\"id\" href=\"#emptyconstraint\">emptyconstraint</a>;", 
"", 
"static struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> *", 
"<a class=\"id\" href=\"#x86_get_event_constraints\">x86_get_event_constraints</a>(struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>, struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#event_constraints\">event_constraints</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_event_constraint\">for_each_event_constraint</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#event_constraints\">event_constraints</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#config\">config</a> &amp; <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cmask\">cmask</a>) == <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#code\">code</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#unconstrained\">unconstrained</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"perf_event_amd.c\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"perf_event_p6.c\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"perf_event_p4.c\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"perf_event_intel_lbr.c\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"perf_event_intel_ds.c\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"perf_event_intel.c\"", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a>", 
"<a class=\"id\" href=\"#x86_pmu_notifier\">x86_pmu_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>, unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a> = (long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a> &amp; ~<a class=\"id\" href=\"#CPU_TASKS_FROZEN\">CPU_TASKS_FROZEN</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cpu_prepare\">cpu_prepare</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cpu_prepare\">cpu_prepare</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_STARTING\">CPU_STARTING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cpu_starting\">cpu_starting</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cpu_starting\">cpu_starting</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DYING\">CPU_DYING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cpu_dying\">cpu_dying</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cpu_dying\">cpu_dying</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED\">CPU_UP_CANCELED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cpu_dead\">cpu_dead</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cpu_dead\">cpu_dead</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pmu_check_apic\">pmu_check_apic</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#apic\">apic</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"no APIC, boot with the \\\"lapic\\\" boot parameter to force-enable it.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"no hardware sampling interrupt available.\\n\");", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_hw_perf_events\">init_hw_perf_events</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Performance Events: \");", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#intel_pmu_init\">intel_pmu_init</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#amd_pmu_init\">amd_pmu_init</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_cont\">pr_cont</a>(\"no PMU driver, software events only.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmu_check_apic\">pmu_check_apic</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_cont\">pr_cont</a>(\"%s PMU driver.\\n\", <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#quirks\">quirks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#quirks\">quirks</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a> &gt; <a class=\"id\" href=\"#X86_PMC_MAX_GENERIC\">X86_PMC_MAX_GENERIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"hw perf events %d > max(%d), clipping!\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>, <a class=\"id\" href=\"#X86_PMC_MAX_GENERIC\">X86_PMC_MAX_GENERIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a> = <a class=\"id\" href=\"#X86_PMC_MAX_GENERIC\">X86_PMC_MAX_GENERIC</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#intel_ctrl\">intel_ctrl</a> = (1 << <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>) - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_max_events\">perf_max_events</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters_fixed\">num_counters_fixed</a> &gt; <a class=\"id\" href=\"#X86_PMC_MAX_FIXED\">X86_PMC_MAX_FIXED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"hw perf events fixed %d > max(%d), clipping!\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters_fixed\">num_counters_fixed</a>, <a class=\"id\" href=\"#X86_PMC_MAX_FIXED\">X86_PMC_MAX_FIXED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters_fixed\">num_counters_fixed</a> = <a class=\"id\" href=\"#X86_PMC_MAX_FIXED\">X86_PMC_MAX_FIXED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#intel_ctrl\">intel_ctrl</a> |=", 
"<span class=\"ts\"/><span class=\"ts\"/>((1LL << <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters_fixed\">num_counters_fixed</a>)-1) << <a class=\"id\" href=\"#X86_PMC_IDX_FIXED\">X86_PMC_IDX_FIXED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_events_lapic_init\">perf_events_lapic_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_die_notifier\">register_die_notifier</a>(&amp;<a class=\"id\" href=\"#perf_event_nmi_notifier\">perf_event_nmi_notifier</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unconstrained\">unconstrained</a> = (struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__EVENT_CONSTRAINT\">__EVENT_CONSTRAINT</a>(0, (1ULL << <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>) - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   0, <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#event_constraints\">event_constraints</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_event_constraint\">for_each_event_constraint</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#event_constraints\">event_constraints</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cmask\">cmask</a> != <a class=\"id\" href=\"#X86_RAW_EVENT_MASK\">X86_RAW_EVENT_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#idxmsk64\">idxmsk64</a> |= (1ULL << <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#weight\">weight</a> += <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"... version:                %d\\n\",     <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#version\">version</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"... bit width:              %d\\n\",     <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cntval_bits\">cntval_bits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"... generic registers:      %d\\n\",     <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"... value mask:             %016Lx\\n\", <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#cntval_mask\">cntval_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"... max period:             %016Lx\\n\", <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#max_period\">max_period</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"... fixed-purpose events:   %d\\n\",     <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters_fixed\">num_counters_fixed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"... event mask:             %016Lx\\n\", <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#intel_ctrl\">intel_ctrl</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_cpu_notifier\">perf_cpu_notifier</a>(<a class=\"id\" href=\"#x86_pmu_notifier\">x86_pmu_notifier</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#x86_pmu_read\">x86_pmu_read</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_perf_event_update\">x86_perf_event_update</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Start group events scheduling transaction</span>", 
"<span class=\"comment\"> * Set the flag to make pmu::enable() not perform the</span>", 
"<span class=\"comment\"> * schedulability test, it will be performed at commit time</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#x86_pmu_start_txn\">x86_pmu_start_txn</a>(const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#pmu\">pmu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#group_flag\">group_flag</a> |= <a class=\"id\" href=\"#PERF_EVENT_TXN\">PERF_EVENT_TXN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_txn\">n_txn</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Stop group events scheduling transaction</span>", 
"<span class=\"comment\"> * Clear the flag and pmu::enable() will perform the</span>", 
"<span class=\"comment\"> * schedulability test.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#x86_pmu_cancel_txn\">x86_pmu_cancel_txn</a>(const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#pmu\">pmu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#group_flag\">group_flag</a> &= ~<a class=\"id\" href=\"#PERF_EVENT_TXN\">PERF_EVENT_TXN</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Truncate the collected events.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_added\">n_added</a> -= <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_txn\">n_txn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a> -= <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_txn\">n_txn</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Commit group events scheduling transaction</span>", 
"<span class=\"comment\"> * Perform the group schedulability test as a whole</span>", 
"<span class=\"comment\"> * Return 0 if success</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#x86_pmu_commit_txn\">x86_pmu_commit_txn</a>(const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#pmu\">pmu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#assign\">assign</a>[<a class=\"id\" href=\"#X86_PMC_IDX_MAX\">X86_PMC_IDX_MAX</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu_initialized\">x86_pmu_initialized</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#schedule_events\">schedule_events</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#assign\">assign</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * copy new assignment, now we know it is possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will be used by hw_perf_enable()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#assign\">assign</a>, <a class=\"id\" href=\"#assign\">assign</a>, <a class=\"id\" href=\"#n\">n</a>*sizeof(int));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#group_flag\">group_flag</a> &= ~<a class=\"id\" href=\"#PERF_EVENT_TXN\">PERF_EVENT_TXN</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#pmu\">pmu</a> <a class=\"id\" href=\"#pmu\">pmu</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enable\">enable</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_enable\">x86_pmu_enable</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disable\">disable</a><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_disable\">x86_pmu_disable</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_start\">x86_pmu_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_stop\">x86_pmu_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_read\">x86_pmu_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unthrottle\">unthrottle</a><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_unthrottle\">x86_pmu_unthrottle</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start_txn\">start_txn</a><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_start_txn\">x86_pmu_start_txn</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cancel_txn\">cancel_txn</a><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_cancel_txn\">x86_pmu_cancel_txn</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#commit_txn\">commit_txn</a><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_commit_txn\">x86_pmu_commit_txn</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * validate that we can schedule this event</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#validate_event\">validate_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#get_event_constraints\">get_event_constraints</a>(<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#c\">c</a> || !<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#weight\">weight</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#put_event_constraints\">put_event_constraints</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#put_event_constraints\">put_event_constraints</a>(<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * validate a single event group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * validation include:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- check events are compatible which each other</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- events do not compete for the same counter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- number of events &lt;= number of counters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * validation ensures the group can be loaded onto the</span>", 
"<span class=\"comment\"> * PMU if it was the only group available.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#validate_group\">validate_group</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#leader\">leader</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the event is not yet connected with its</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * siblings therefore we must first collect</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * existing siblings, then add the new event</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before we can simulate the scheduling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#collect_events\">collect_events</a>(<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>, <a class=\"id\" href=\"#leader\">leader</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#collect_events\">collect_events</a>(<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>-><a class=\"id\" href=\"#n_events\">n_events</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#schedule_events\">schedule_events</a>(<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fake_cpuc\">fake_cpuc</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#hw_perf_event_init\">hw_perf_event_init</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_perf_event_init\">__hw_perf_event_init</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we temporarily connect event to its pmu</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * such that validate_group() can classify</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it as an x86 event using is_x86_event()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a> = &amp;<a class=\"id\" href=\"#pmu\">pmu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> != <a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#validate_group\">validate_group</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#validate_event\">validate_event</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#destroy\">destroy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#pmu\">pmu</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * callchain support</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#callchain_store\">callchain_store</a>(struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ip\">ip</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#nr\">nr</a> &lt; <a class=\"id\" href=\"#PERF_MAX_STACK_DEPTH\">PERF_MAX_STACK_DEPTH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ip\">ip</a>[<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#nr\">nr</a>++] = <a class=\"id\" href=\"#ip\">ip</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a>, <a class=\"id\" href=\"#pmc_irq_entry\">pmc_irq_entry</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a>, <a class=\"id\" href=\"#pmc_nmi_entry\">pmc_nmi_entry</a>);", 
"", 
"", 
"static void", 
"<a class=\"id\" href=\"#backtrace_warning_symbol\">backtrace_warning_symbol</a>(void *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#msg\">msg</a>, unsigned long <a class=\"id\" href=\"#symbol\">symbol</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Ignore warnings */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#backtrace_warning\">backtrace_warning</a>(void *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Ignore warnings */</span>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#backtrace_stack\">backtrace_stack</a>(void *<a class=\"id\" href=\"#data\">data</a>, char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#backtrace_address\">backtrace_address</a>(void *<a class=\"id\" href=\"#data\">data</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#reliable\">reliable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> *<a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#callchain_store\">callchain_store</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#stacktrace_ops\">stacktrace_ops</a> <a class=\"id\" href=\"#backtrace_ops\">backtrace_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#warning\">warning</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#backtrace_warning\">backtrace_warning</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#warning_symbol\">warning_symbol</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#backtrace_warning_symbol\">backtrace_warning_symbol</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stack\">stack</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#backtrace_stack\">backtrace_stack</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#address\">address</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#backtrace_address\">backtrace_address</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#walk_stack\">walk_stack</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#print_context_stack_bp\">print_context_stack_bp</a>,", 
"};", 
"", 
"static void", 
"<a class=\"id\" href=\"#perf_callchain_kernel\">perf_callchain_kernel</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#callchain_store\">callchain_store</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#PERF_CONTEXT_KERNEL\">PERF_CONTEXT_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#callchain_store\">callchain_store</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_trace\">dump_trace</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bp\">bp</a>, &amp;<a class=\"id\" href=\"#backtrace_ops\">backtrace_ops</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#perf_callchain_user32\">perf_callchain_user32</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* 32-bit process in 64-bit kernel. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stack_frame_ia32\">stack_frame_ia32</a> <a class=\"id\" href=\"#frame\">frame</a>;", 
"<span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#fp\">fp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#compat_ptr\">compat_ptr</a>(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#nr\">nr</a> &lt; <a class=\"id\" href=\"#PERF_MAX_STACK_DEPTH\">PERF_MAX_STACK_DEPTH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>.<a class=\"id\" href=\"#next_frame\">next_frame</a>     = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>.<a class=\"id\" href=\"#return_address\">return_address</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#copy_from_user_nmi\">copy_from_user_nmi</a>(&amp;<a class=\"id\" href=\"#frame\">frame</a>, <a class=\"id\" href=\"#fp\">fp</a>, sizeof(<a class=\"id\" href=\"#frame\">frame</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bytes\">bytes</a> != sizeof(<a class=\"id\" href=\"#frame\">frame</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fp\">fp</a> &lt; <a class=\"id\" href=\"#compat_ptr\">compat_ptr</a>(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#callchain_store\">callchain_store</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#frame\">frame</a>.<a class=\"id\" href=\"#return_address\">return_address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#compat_ptr\">compat_ptr</a>(<a class=\"id\" href=\"#frame\">frame</a>.<a class=\"id\" href=\"#next_frame\">next_frame</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#perf_callchain_user32\">perf_callchain_user32</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"    return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void", 
"<a class=\"id\" href=\"#perf_callchain_user\">perf_callchain_user</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stack_frame\">stack_frame</a> <a class=\"id\" href=\"#frame\">frame</a>;", 
"<span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#fp\">fp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bp\">bp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#callchain_store\">callchain_store</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#PERF_CONTEXT_USER\">PERF_CONTEXT_USER</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#callchain_store\">callchain_store</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_callchain_user32\">perf_callchain_user32</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#nr\">nr</a> &lt; <a class=\"id\" href=\"#PERF_MAX_STACK_DEPTH\">PERF_MAX_STACK_DEPTH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>.<a class=\"id\" href=\"#next_frame\">next_frame</a><span class=\"ts\"/>     = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frame\">frame</a>.<a class=\"id\" href=\"#return_address\">return_address</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#copy_from_user_nmi\">copy_from_user_nmi</a>(&amp;<a class=\"id\" href=\"#frame\">frame</a>, <a class=\"id\" href=\"#fp\">fp</a>, sizeof(<a class=\"id\" href=\"#frame\">frame</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bytes\">bytes</a> != sizeof(<a class=\"id\" href=\"#frame\">frame</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((unsigned long)<a class=\"id\" href=\"#fp\">fp</a> &lt; <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#callchain_store\">callchain_store</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#frame\">frame</a>.<a class=\"id\" href=\"#return_address\">return_address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#frame\">frame</a>.<a class=\"id\" href=\"#next_frame\">next_frame</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#perf_do_callchain\">perf_do_callchain</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_user\">is_user</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#regs\">regs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#is_user\">is_user</a> = <a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_user\">is_user</a> && <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_user\">is_user</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_callchain_kernel\">perf_callchain_kernel</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_callchain_user\">perf_callchain_user</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> *<a class=\"id\" href=\"#perf_callchain\">perf_callchain</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a> && <a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a>-><a class=\"id\" href=\"#is_in_guest\">is_in_guest</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: We don't support guest os callchain now */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_nmi\">in_nmi</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#pmc_nmi_entry\">pmc_nmi_entry</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#pmc_irq_entry\">pmc_irq_entry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_do_callchain\">perf_do_callchain</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#entry\">entry</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#perf_instruction_pointer\">perf_instruction_pointer</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ip\">ip</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a> && <a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a>-><a class=\"id\" href=\"#is_in_guest\">is_in_guest</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a>-><a class=\"id\" href=\"#get_guest_ip\">get_guest_ip</a>();", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#instruction_pointer\">instruction_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ip\">ip</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#perf_misc_flags\">perf_misc_flags</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#misc\">misc</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a> && <a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a>-><a class=\"id\" href=\"#is_in_guest\">is_in_guest</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a>-><a class=\"id\" href=\"#is_user_mode\">is_user_mode</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#misc\">misc</a> |= <a class=\"id\" href=\"#PERF_RECORD_MISC_GUEST_USER\">PERF_RECORD_MISC_GUEST_USER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#misc\">misc</a> |= <a class=\"id\" href=\"#PERF_RECORD_MISC_GUEST_KERNEL\">PERF_RECORD_MISC_GUEST_KERNEL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#misc\">misc</a> |= <a class=\"id\" href=\"#PERF_RECORD_MISC_USER\">PERF_RECORD_MISC_USER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#misc\">misc</a> |= <a class=\"id\" href=\"#PERF_RECORD_MISC_KERNEL\">PERF_RECORD_MISC_KERNEL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PERF_EFLAGS_EXACT\">PERF_EFLAGS_EXACT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#misc\">misc</a> |= <a class=\"id\" href=\"#PERF_RECORD_MISC_EXACT_IP\">PERF_RECORD_MISC_EXACT_IP</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#misc\">misc</a>;", 
"}", 
];
xr_frag_insert('l/57/00484f69d004da64327f101423b47ce61ea505.xr', __xr_tmp);
