var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sched_clock for unstable cpu clocks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008 Red Hat, Inc., Peter Zijlstra &lt;pzijlstr@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Updates and enhancements:</span>", 
"<span class=\"comment\"> *    Copyright (C) 2008 Red Hat, Inc. Steven Rostedt &lt;srostedt@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on code by:</span>", 
"<span class=\"comment\"> *   Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *   Guillaume Chazarain &lt;guichaz@gmail.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * What:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cpu_clock(i) provides a fast (execution time) high resolution</span>", 
"<span class=\"comment\"> * clock with bounded drift between CPUs. The value of cpu_clock(i)</span>", 
"<span class=\"comment\"> * is monotonic for constant i. The timestamp returned is in nanoseconds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ######################### BIG FAT WARNING ##########################</span>", 
"<span class=\"comment\"> * # when comparing cpu_clock(i) to cpu_clock(j) for i != j, time can #</span>", 
"<span class=\"comment\"> * # go backwards !!                                                  #</span>", 
"<span class=\"comment\"> * ####################################################################</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is no strict promise about the base, although it tends to start</span>", 
"<span class=\"comment\"> * at 0 on boot (but people really shouldn't rely on that).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cpu_clock(i)       -- can be used from any context, including NMI.</span>", 
"<span class=\"comment\"> * sched_clock_cpu(i) -- must be used with local IRQs disabled (implied by NMI)</span>", 
"<span class=\"comment\"> * local_clock()      -- is cpu_clock() on the current cpu.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * How:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The implementation either uses sched_clock() when</span>", 
"<span class=\"comment\"> * !CONFIG_HAVE_UNSTABLE_SCHED_CLOCK, which means in that case the</span>", 
"<span class=\"comment\"> * sched_clock() is assumed to provide these properties (mostly it means</span>", 
"<span class=\"comment\"> * the architecture provides a globally synchronized highres time source).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Otherwise it tries to create a semi stable clock from a mixture of other</span>", 
"<span class=\"comment\"> * clocks, including:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - GTOD (clock monotomic)</span>", 
"<span class=\"comment\"> *  - sched_clock()</span>", 
"<span class=\"comment\"> *  - explicit idle events</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use GTOD as base and use sched_clock() deltas to improve resolution. The</span>", 
"<span class=\"comment\"> * deltas are filtered to provide monotonicity and keeping it within an</span>", 
"<span class=\"comment\"> * expected window.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Furthermore, explicit sleep and wakeup hooks allow us to account for time</span>", 
"<span class=\"comment\"> * that is otherwise invisible (TSC gets stopped).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The !IRQ-safetly of sched_clock() and sched_clock_cpu() comes from things</span>", 
"<span class=\"comment\"> * like cpufreq interrupts that can change the base clock (TSC) multiplier</span>", 
"<span class=\"comment\"> * and cause funny jumps in time -- although the filtering provided by</span>", 
"<span class=\"comment\"> * sched_clock_cpu() should mitigate serious artifacts we cannot rely on it</span>", 
"<span class=\"comment\"> * in general since for !CONFIG_HAVE_UNSTABLE_SCHED_CLOCK we fully rely on</span>", 
"<span class=\"comment\"> * sched_clock().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ktime\">ktime</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scheduler clock - returns current time in nanosec units.</span>", 
"<span class=\"comment\"> * This is default implementation.</span>", 
"<span class=\"comment\"> * Architectures and sub-architectures can override this.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long long <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#sched_clock\">sched_clock</a>(void)", 
"{", 
"<span class=\"ts\"/>return (unsigned long long)(<a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#INITIAL_JIFFIES\">INITIAL_JIFFIES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>* (<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sched_clock\">sched_clock</a>);", 
"", 
"static <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> int <a class=\"id\" href=\"#sched_clock_running\">sched_clock_running</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_UNSTABLE_SCHED_CLOCK\">CONFIG_HAVE_UNSTABLE_SCHED_CLOCK</a>", 
"<a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> int <a class=\"id\" href=\"#sched_clock_stable\">sched_clock_stable</a>;", 
"", 
"struct <a class=\"id\" href=\"#sched_clock_data\">sched_clock_data</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_raw\">tick_raw</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_gtod\">tick_gtod</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clock\">clock</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU_SHARED_ALIGNED\">DEFINE_PER_CPU_SHARED_ALIGNED</a>(struct <a class=\"id\" href=\"#sched_clock_data\">sched_clock_data</a>, <a class=\"id\" href=\"#sched_clock_data\">sched_clock_data</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sched_clock_data\">sched_clock_data</a> *<a class=\"id\" href=\"#this_scd\">this_scd</a>(void)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#sched_clock_data\">sched_clock_data</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sched_clock_data\">sched_clock_data</a> *<a class=\"id\" href=\"#cpu_sdc\">cpu_sdc</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#sched_clock_data\">sched_clock_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#sched_clock_init\">sched_clock_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ktime_now\">ktime_now</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#ktime_get\">ktime_get</a>());", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_clock_data\">sched_clock_data</a> *<a class=\"id\" href=\"#scd\">scd</a> = <a class=\"id\" href=\"#cpu_sdc\">cpu_sdc</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scd\">scd</a>-><a class=\"id\" href=\"#tick_raw\">tick_raw</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scd\">scd</a>-><a class=\"id\" href=\"#tick_gtod\">tick_gtod</a> = <a class=\"id\" href=\"#ktime_now\">ktime_now</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scd\">scd</a>-><a class=\"id\" href=\"#clock\">clock</a> = <a class=\"id\" href=\"#ktime_now\">ktime_now</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_running\">sched_clock_running</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * min, max except they take wrapping into account</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#wrap_min\">wrap_min</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#y\">y</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#x\">x</a> - <a class=\"id\" href=\"#y\">y</a>) &lt; 0 ? <a class=\"id\" href=\"#x\">x</a> : <a class=\"id\" href=\"#y\">y</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#wrap_max\">wrap_max</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#y\">y</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#x\">x</a> - <a class=\"id\" href=\"#y\">y</a>) &gt; 0 ? <a class=\"id\" href=\"#x\">x</a> : <a class=\"id\" href=\"#y\">y</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * update the percpu scd from the raw @now value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - filter out backward motion</span>", 
"<span class=\"comment\"> *  - use the GTOD tick value to create a window to filter crazy TSC values</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sched_clock_local\">sched_clock_local</a>(struct <a class=\"id\" href=\"#sched_clock_data\">sched_clock_data</a> *<a class=\"id\" href=\"#scd\">scd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#clock\">clock</a>, <a class=\"id\" href=\"#old_clock\">old_clock</a>, <a class=\"id\" href=\"#min_clock\">min_clock</a>, <a class=\"id\" href=\"#max_clock\">max_clock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#sched_clock\">sched_clock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#scd\">scd</a>-><a class=\"id\" href=\"#tick_raw\">tick_raw</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#delta\">delta</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_clock\">old_clock</a> = <a class=\"id\" href=\"#scd\">scd</a>-><a class=\"id\" href=\"#clock\">clock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scd-&gt;clock = clamp(scd-&gt;tick_gtod + delta,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>      max(scd-&gt;tick_gtod, scd-&gt;clock),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>      scd-&gt;tick_gtod + TICK_NSEC);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clock\">clock</a> = <a class=\"id\" href=\"#scd\">scd</a>-><a class=\"id\" href=\"#tick_gtod\">tick_gtod</a> + <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_clock\">min_clock</a> = <a class=\"id\" href=\"#wrap_max\">wrap_max</a>(<a class=\"id\" href=\"#scd\">scd</a>-><a class=\"id\" href=\"#tick_gtod\">tick_gtod</a>, <a class=\"id\" href=\"#old_clock\">old_clock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_clock\">max_clock</a> = <a class=\"id\" href=\"#wrap_max\">wrap_max</a>(<a class=\"id\" href=\"#old_clock\">old_clock</a>, <a class=\"id\" href=\"#scd\">scd</a>-><a class=\"id\" href=\"#tick_gtod\">tick_gtod</a> + <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clock\">clock</a> = <a class=\"id\" href=\"#wrap_max\">wrap_max</a>(<a class=\"id\" href=\"#clock\">clock</a>, <a class=\"id\" href=\"#min_clock\">min_clock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clock\">clock</a> = <a class=\"id\" href=\"#wrap_min\">wrap_min</a>(<a class=\"id\" href=\"#clock\">clock</a>, <a class=\"id\" href=\"#max_clock\">max_clock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmpxchg64\">cmpxchg64</a>(&amp;<a class=\"id\" href=\"#scd\">scd</a>-><a class=\"id\" href=\"#clock\">clock</a>, <a class=\"id\" href=\"#old_clock\">old_clock</a>, <a class=\"id\" href=\"#clock\">clock</a>) != <a class=\"id\" href=\"#old_clock\">old_clock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#clock\">clock</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sched_clock_remote\">sched_clock_remote</a>(struct <a class=\"id\" href=\"#sched_clock_data\">sched_clock_data</a> *<a class=\"id\" href=\"#scd\">scd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_clock_data\">sched_clock_data</a> *<a class=\"id\" href=\"#my_scd\">my_scd</a> = <a class=\"id\" href=\"#this_scd\">this_scd</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#this_clock\">this_clock</a>, <a class=\"id\" href=\"#remote_clock\">remote_clock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#old_val\">old_val</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_local\">sched_clock_local</a>(<a class=\"id\" href=\"#my_scd\">my_scd</a>);", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_clock\">this_clock</a> = <a class=\"id\" href=\"#my_scd\">my_scd</a>-><a class=\"id\" href=\"#clock\">clock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remote_clock\">remote_clock</a> = <a class=\"id\" href=\"#scd\">scd</a>-><a class=\"id\" href=\"#clock\">clock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use the opportunity that we have both locks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * taken to couple the two clocks: we take the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * larger time as the latest time for both</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * runqueues. (this creates monotonic movement)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>((<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#remote_clock\">remote_clock</a> - <a class=\"id\" href=\"#this_clock\">this_clock</a>) &lt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#scd\">scd</a>-><a class=\"id\" href=\"#clock\">clock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_val\">old_val</a> = <a class=\"id\" href=\"#remote_clock\">remote_clock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#this_clock\">this_clock</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Should be rare, but possible:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#my_scd\">my_scd</a>-><a class=\"id\" href=\"#clock\">clock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_val\">old_val</a> = <a class=\"id\" href=\"#this_clock\">this_clock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#remote_clock\">remote_clock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmpxchg64\">cmpxchg64</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#old_val\">old_val</a>, <a class=\"id\" href=\"#val\">val</a>) != <a class=\"id\" href=\"#old_val\">old_val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Similar to cpu_clock(), but requires local IRQs to be disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See cpu_clock().</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sched_clock_cpu\">sched_clock_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
];
xr_frag_insert('l/57/53e9e0c5f11c6ce3ddae7708d302fe765c1fd0.xr', __xr_tmp);
