var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hdr_delta\">hdr_delta</a> = <a class=\"id\" href=\"#cipso_v4_delopt\">cipso_v4_delopt</a>(&amp;<a class=\"id\" href=\"#sk_inet\">sk_inet</a>-><a class=\"id\" href=\"#opt\">opt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk_inet\">sk_inet</a>-><a class=\"id\" href=\"#is_icsk\">is_icsk</a> && <a class=\"id\" href=\"#hdr_delta\">hdr_delta</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#sk_conn\">sk_conn</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_conn\">sk_conn</a>-><a class=\"id\" href=\"#icsk_ext_hdr_len\">icsk_ext_hdr_len</a> -= <a class=\"id\" href=\"#hdr_delta\">hdr_delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_conn\">sk_conn</a>-><a class=\"id\" href=\"#icsk_sync_mss\">icsk_sync_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#sk_conn\">sk_conn</a>-><a class=\"id\" href=\"#icsk_pmtu_cookie\">icsk_pmtu_cookie</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cipso_v4_req_delattr - Delete the CIPSO option from a request socket</span>", 
"<span class=\"comment\"> * @reg: the request socket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Removes the CIPSO option from a request socket, if present.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cipso_v4_req_delattr\">cipso_v4_req_delattr</a>(struct <a class=\"id\" href=\"#request_sock\">request_sock</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_options\">ip_options</a> *<a class=\"id\" href=\"#opt\">opt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_request_sock\">inet_request_sock</a> *<a class=\"id\" href=\"#req_inet\">req_inet</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req_inet\">req_inet</a> = <a class=\"id\" href=\"#inet_rsk\">inet_rsk</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opt\">opt</a> = <a class=\"id\" href=\"#req_inet\">req_inet</a>-><a class=\"id\" href=\"#opt\">opt</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opt\">opt</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#cipso\">cipso</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cipso_v4_delopt\">cipso_v4_delopt</a>(&amp;<a class=\"id\" href=\"#req_inet\">req_inet</a>-><a class=\"id\" href=\"#opt\">opt</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cipso_v4_getattr - Helper function for the cipso_v4_*_getattr functions</span>", 
"<span class=\"comment\"> * @cipso: the CIPSO v4 option</span>", 
"<span class=\"comment\"> * @secattr: the security attributes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Inspect @cipso and return the security attributes in @secattr.  Returns zero</span>", 
"<span class=\"comment\"> * on success and negative values on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cipso_v4_getattr\">cipso_v4_getattr</a>(const unsigned char *<a class=\"id\" href=\"#cipso\">cipso</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#netlbl_lsm_secattr\">netlbl_lsm_secattr</a> *<a class=\"id\" href=\"#secattr\">secattr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#ENOMSG\">ENOMSG</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#doi\">doi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cipso_v4_doi\">cipso_v4_doi</a> *<a class=\"id\" href=\"#doi_def\">doi_def</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cipso_v4_cache_check\">cipso_v4_cache_check</a>(<a class=\"id\" href=\"#cipso\">cipso</a>, <a class=\"id\" href=\"#cipso\">cipso</a>[1], <a class=\"id\" href=\"#secattr\">secattr</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#doi\">doi</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#cipso\">cipso</a>[2]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#doi_def\">doi_def</a> = <a class=\"id\" href=\"#cipso_v4_doi_search\">cipso_v4_doi_search</a>(<a class=\"id\" href=\"#doi\">doi</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#doi_def\">doi_def</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#getattr_return\">getattr_return</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX - This code assumes only one tag per CIPSO option which isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * really a good assumption to make but since we only support the MAC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tags right now it is a safe assumption. */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cipso\">cipso</a>[6]) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CIPSO_V4_TAG_RBITMAP\">CIPSO_V4_TAG_RBITMAP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#cipso_v4_parsetag_rbm\">cipso_v4_parsetag_rbm</a>(<a class=\"id\" href=\"#doi_def\">doi_def</a>, &amp;<a class=\"id\" href=\"#cipso\">cipso</a>[6], <a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CIPSO_V4_TAG_ENUM\">CIPSO_V4_TAG_ENUM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#cipso_v4_parsetag_enum\">cipso_v4_parsetag_enum</a>(<a class=\"id\" href=\"#doi_def\">doi_def</a>, &amp;<a class=\"id\" href=\"#cipso\">cipso</a>[6], <a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CIPSO_V4_TAG_RANGE\">CIPSO_V4_TAG_RANGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#cipso_v4_parsetag_rng\">cipso_v4_parsetag_rng</a>(<a class=\"id\" href=\"#doi_def\">doi_def</a>, &amp;<a class=\"id\" href=\"#cipso\">cipso</a>[6], <a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CIPSO_V4_TAG_LOCAL\">CIPSO_V4_TAG_LOCAL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#cipso_v4_parsetag_loc\">cipso_v4_parsetag_loc</a>(<a class=\"id\" href=\"#doi_def\">doi_def</a>, &amp;<a class=\"id\" href=\"#cipso\">cipso</a>[6], <a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_val\">ret_val</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#secattr\">secattr</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#NETLBL_NLTYPE_CIPSOV4\">NETLBL_NLTYPE_CIPSOV4</a>;", 
"", 
"<a class=\"id\" href=\"#getattr_return\">getattr_return</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cipso_v4_sock_getattr - Get the security attributes from a sock</span>", 
"<span class=\"comment\"> * @sk: the sock</span>", 
"<span class=\"comment\"> * @secattr: the security attributes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Query @sk to see if there is a CIPSO option attached to the sock and if</span>", 
"<span class=\"comment\"> * there is return the CIPSO security attributes in @secattr.  This function</span>", 
"<span class=\"comment\"> * requires that @sk be locked, or privately held, but it does not do any</span>", 
"<span class=\"comment\"> * locking itself.  Returns zero on success and negative values on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cipso_v4_sock_getattr\">cipso_v4_sock_getattr</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#netlbl_lsm_secattr\">netlbl_lsm_secattr</a> *<a class=\"id\" href=\"#secattr\">secattr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_options\">ip_options</a> *<a class=\"id\" href=\"#opt\">opt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opt\">opt</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#opt\">opt</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opt\">opt</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#cipso\">cipso</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMSG\">ENOMSG</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cipso_v4_getattr\">cipso_v4_getattr</a>(<a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#__data\">__data</a> + <a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#cipso\">cipso</a> - sizeof(struct <a class=\"id\" href=\"#iphdr\">iphdr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#secattr\">secattr</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cipso_v4_skbuff_setattr - Set the CIPSO option on a packet</span>", 
"<span class=\"comment\"> * @skb: the packet</span>", 
"<span class=\"comment\"> * @secattr: the security attributes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Set the CIPSO option on the given packet based on the security attributes.</span>", 
"<span class=\"comment\"> * Returns a pointer to the IP header on success and NULL on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cipso_v4_skbuff_setattr\">cipso_v4_skbuff_setattr</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#cipso_v4_doi\">cipso_v4_doi</a> *<a class=\"id\" href=\"#doi_def\">doi_def</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#netlbl_lsm_secattr\">netlbl_lsm_secattr</a> *<a class=\"id\" href=\"#secattr\">secattr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_options\">ip_options</a> *<a class=\"id\" href=\"#opt\">opt</a> = &amp;<a class=\"id\" href=\"#IPCB\">IPCB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#opt\">opt</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#CIPSO_V4_OPT_LEN_MAX\">CIPSO_V4_OPT_LEN_MAX</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#buf_len\">buf_len</a> = <a class=\"id\" href=\"#CIPSO_V4_OPT_LEN_MAX\">CIPSO_V4_OPT_LEN_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#opt_len\">opt_len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len_delta\">len_delta</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#cipso_v4_genopt\">cipso_v4_genopt</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buf_len\">buf_len</a>, <a class=\"id\" href=\"#doi_def\">doi_def</a>, <a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_val\">ret_val</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf_len\">buf_len</a> = <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opt_len\">opt_len</a> = (<a class=\"id\" href=\"#buf_len\">buf_len</a> + 3) &amp; ~3;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we overwrite any existing options to ensure that we have enough</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * room for the CIPSO option, the reason is that we _need_ to guarantee</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that the security label is applied to the packet - we do the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thing when using the socket options and it hasn't caused a problem,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if we need to we can always revisit this choice later */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len_delta\">len_delta</a> = <a class=\"id\" href=\"#opt_len\">opt_len</a> - <a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#optlen\">optlen</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* if we don't ensure enough headroom we could panic on the skb_push()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call below so make sure we have enough, we are also \"mangling\" the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * packet so we should probably do a copy-on-write call anyway */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#skb_cow\">skb_cow</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>) + <a class=\"id\" href=\"#len_delta\">len_delta</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_val\">ret_val</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len_delta\">len_delta</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we assume that the header + opt-&gt;optlen have already been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * \"pushed\" in ip_options_build() or similar */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len_delta\">len_delta</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>((char *)<a class=\"id\" href=\"#iph\">iph</a> - <a class=\"id\" href=\"#len_delta\">len_delta</a>, <a class=\"id\" href=\"#iph\">iph</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#ihl\">ihl</a> << 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_network_header\">skb_reset_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#len_delta\">len_delta</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#iph\">iph</a> + 1, <a class=\"id\" href=\"#IPOPT_NOP\">IPOPT_NOP</a>, <a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#optlen\">optlen</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#optlen\">optlen</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#opt\">opt</a>, 0, sizeof(*<a class=\"id\" href=\"#opt\">opt</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#optlen\">optlen</a> = <a class=\"id\" href=\"#opt_len\">opt_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#cipso\">cipso</a> = sizeof(struct <a class=\"id\" href=\"#iphdr\">iphdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#is_changed\">is_changed</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we have to do the following because we are being called from a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * netfilter hook which means the packet already has had the header</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fields populated and the checksum calculated - yes this means we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are doing more work than needed but we do it to keep the core</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stack clean and tidy */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#iph\">iph</a> + 1, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buf_len\">buf_len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opt_len\">opt_len</a> &gt; <a class=\"id\" href=\"#buf_len\">buf_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>((char *)(<a class=\"id\" href=\"#iph\">iph</a> + 1) + <a class=\"id\" href=\"#buf_len\">buf_len</a>, 0, <a class=\"id\" href=\"#opt_len\">opt_len</a> - <a class=\"id\" href=\"#buf_len\">buf_len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len_delta\">len_delta</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#ihl\">ihl</a> = 5 + (<a class=\"id\" href=\"#opt_len\">opt_len</a> >> 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#tot_len\">tot_len</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip_send_check\">ip_send_check</a>(<a class=\"id\" href=\"#iph\">iph</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cipso_v4_skbuff_delattr - Delete any CIPSO options from a packet</span>", 
"<span class=\"comment\"> * @skb: the packet</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Removes any and all CIPSO options from the given packet.  Returns zero on</span>", 
"<span class=\"comment\"> * success, negative values on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cipso_v4_skbuff_delattr\">cipso_v4_skbuff_delattr</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_options\">ip_options</a> *<a class=\"id\" href=\"#opt\">opt</a> = &amp;<a class=\"id\" href=\"#IPCB\">IPCB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#opt\">opt</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#cipso_ptr\">cipso_ptr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#cipso\">cipso</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* since we are changing the packet we should make a copy */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#skb_cow\">skb_cow</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_val\">ret_val</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the easiest thing to do is just replace the cipso option with noop</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * options since we don't change the size of the packet, although we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * still need to recalculate the checksum */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cipso_ptr\">cipso_ptr</a> = (unsigned char *)<a class=\"id\" href=\"#iph\">iph</a> + <a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#cipso\">cipso</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#cipso_ptr\">cipso_ptr</a>, <a class=\"id\" href=\"#IPOPT_NOOP\">IPOPT_NOOP</a>, <a class=\"id\" href=\"#cipso_ptr\">cipso_ptr</a>[1]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#cipso\">cipso</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#is_changed\">is_changed</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip_send_check\">ip_send_check</a>(<a class=\"id\" href=\"#iph\">iph</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cipso_v4_skbuff_getattr - Get the security attributes from the CIPSO option</span>", 
"<span class=\"comment\"> * @skb: the packet</span>", 
"<span class=\"comment\"> * @secattr: the security attributes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Parse the given packet's CIPSO option and return the security attributes.</span>", 
"<span class=\"comment\"> * Returns zero on success and negative values on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cipso_v4_skbuff_getattr\">cipso_v4_skbuff_getattr</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#netlbl_lsm_secattr\">netlbl_lsm_secattr</a> *<a class=\"id\" href=\"#secattr\">secattr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cipso_v4_getattr\">cipso_v4_getattr</a>(<a class=\"id\" href=\"#CIPSO_V4_OPTPTR\">CIPSO_V4_OPTPTR</a>(<a class=\"id\" href=\"#skb\">skb</a>), <a class=\"id\" href=\"#secattr\">secattr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup Functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cipso_v4_init - Initialize the CIPSO module</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Initialize the CIPSO module and prepare it for use.  Returns zero on success</span>", 
"<span class=\"comment\"> * and negative values on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cipso_v4_init\">cipso_v4_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#cipso_v4_cache_init\">cipso_v4_cache_init</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_val\">ret_val</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Failed to initialize the CIPSO/IPv4 cache (%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ret_val\">ret_val</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#cipso_v4_init\">cipso_v4_init</a>);", 
];
xr_frag_insert('l/57/6f2015e3aad4c22259ace2f16a7056c3fd4251.xr', __xr_tmp);
