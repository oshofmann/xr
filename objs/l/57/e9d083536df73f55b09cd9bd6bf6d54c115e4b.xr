var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/fs/jbd/transaction.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written by Stephen C. Tweedie &lt;sct@redhat.com&gt;, 1998</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 1998 Red Hat corp --- All Rights Reserved</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is part of the Linux kernel and is made available under</span>", 
"<span class=\"comment\"> * the terms of the GNU General Public License, version 2, or at your</span>", 
"<span class=\"comment\"> * option, any later version, incorporated herein by reference.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Generic filesystem transaction handling code; part of the ext2fs</span>", 
"<span class=\"comment\"> * journaling system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file manages transactions (compound commits managed by the</span>", 
"<span class=\"comment\"> * journaling code) and handles (individual atomic operations by the</span>", 
"<span class=\"comment\"> * filesystem).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jbd\">jbd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hrtimer\">hrtimer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static void <a class=\"id\" href=\"#__journal_temp_unlink_buffer\">__journal_temp_unlink_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * get_transaction: obtain a new transaction_t object.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Simply allocate and initialise a new transaction.  Create it in</span>", 
"<span class=\"comment\"> * RUNNING state and add it to the current journal (which should not</span>", 
"<span class=\"comment\"> * have an existing running transaction: we only make a new transaction</span>", 
"<span class=\"comment\"> * once we have started to commit the old one).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Preconditions:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The journal MUST be locked.  We don't perform atomic mallocs on the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>new transaction<span class=\"ts\"/>and we can't block without protecting against other</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>processes trying to touch the journal while it is in transition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under j_state_lock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#transaction_t\">transaction_t</a> *", 
"<a class=\"id\" href=\"#get_transaction\">get_transaction</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a> = <a class=\"id\" href=\"#journal\">journal</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_state\">t_state</a> = <a class=\"id\" href=\"#T_RUNNING\">T_RUNNING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_start_time\">t_start_time</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_transaction_sequence\">j_transaction_sequence</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_expires\">t_expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_commit_interval\">j_commit_interval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up the commit timer for the new transaction. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_commit_timer\">j_commit_timer</a>.<a class=\"id\" href=\"#expires\">expires</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#round_jiffies_up\">round_jiffies_up</a>(<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_expires\">t_expires</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer\">add_timer</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_commit_timer\">j_commit_timer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle management.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A handle_t is an object which represents a single atomic update to a</span>", 
"<span class=\"comment\"> * filesystem, and which tracks all of the modifications which form part</span>", 
"<span class=\"comment\"> * of that one update.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * start_this_handle: Given a handle, deal with any locking or stalling</span>", 
"<span class=\"comment\"> * needed to make sure that there is enough journal space for the handle</span>", 
"<span class=\"comment\"> * to begin.  Attach the handle to a transaction and set up the</span>", 
"<span class=\"comment\"> * transaction's buffer credits.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#start_this_handle\">start_this_handle</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#needed\">needed</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nblocks\">nblocks</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#new_transaction\">new_transaction</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nblocks\">nblocks</a> &gt; <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_max_transaction_buffers\">j_max_transaction_buffers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"JBD: %s wants too many credits (%d > %d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#nblocks\">nblocks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_max_transaction_buffers\">j_max_transaction_buffers</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#alloc_transaction\">alloc_transaction</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_transaction\">new_transaction</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#new_transaction\">new_transaction</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>|<a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_transaction\">new_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(3, \"New handle %p going live.\\n\", <a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to hold j_state_lock until t_updates has been incremented,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for proper journal barrier handling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<a class=\"id\" href=\"#repeat_locked\">repeat_locked</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_journal_aborted\">is_journal_aborted</a>(<a class=\"id\" href=\"#journal\">journal</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_errno\">j_errno</a> != 0 && !(<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_flags\">j_flags</a> &amp; <a class=\"id\" href=\"#JFS_ACK_ERR\">JFS_ACK_ERR</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait on the journal's transaction barrier if necessary */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_barrier_count\">j_barrier_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_event\">wait_event</a>(<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_transaction_locked\">j_wait_transaction_locked</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_barrier_count\">j_barrier_count</a> == 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_transaction\">new_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#alloc_transaction\">alloc_transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_transaction\">get_transaction</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#new_transaction\">new_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_transaction\">new_transaction</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the current transaction is locked down for commit, wait for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock to be released.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_state\">t_state</a> == <a class=\"id\" href=\"#T_LOCKED\">T_LOCKED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_transaction_locked\">j_wait_transaction_locked</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_transaction_locked\">j_wait_transaction_locked</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there is not enough space left in the log to write all potential</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffers requested by this operation, we need to stall pending a log</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * checkpoint to free some more log space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_outstanding_credits\">t_outstanding_credits</a> + <a class=\"id\" href=\"#nblocks\">nblocks</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needed\">needed</a> &gt; <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_max_transaction_buffers\">j_max_transaction_buffers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the current transaction is already too large, then start</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to commit it: we can then go back and attach this handle to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a new transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(2, \"Handle %p starting new commit...\\n\", <a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_transaction_locked\">j_wait_transaction_locked</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__log_start_commit\">__log_start_commit</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_transaction_locked\">j_wait_transaction_locked</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The commit code assumes that it can get enough log space</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * without forcing a checkpoint.  This is *critical* for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * correctness: a checkpoint of a buffer which is also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * associated with a committing transaction creates a deadlock,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so commit simply cannot force through checkpoints.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must therefore ensure the necessary space in the journal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * *before* starting to dirty potentially checkpointed buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the new transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The worst part is, any transaction currently committing can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reduce the free space arbitrarily.  Be careful to account for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * those buffers when checkpointing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @@@ AKPM: This seems rather over-defensive.  We're giving commit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a _lot_ of headroom: 1/4 of the journal plus the size of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the committing transaction.  Really, we only need to give it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * committing_transaction-&gt;t_outstanding_credits plus \"enough\" for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the log control blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also, this test is inconsitent with the matching one in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * journal_extend().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__log_space_left\">__log_space_left</a>(<a class=\"id\" href=\"#journal\">journal</a>) &lt; <a class=\"id\" href=\"#jbd_space_needed\">jbd_space_needed</a>(<a class=\"id\" href=\"#journal\">journal</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(2, \"Handle %p waiting for checkpoint...\\n\", <a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__log_wait_for_space\">__log_wait_for_space</a>(<a class=\"id\" href=\"#journal\">journal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat_locked\">repeat_locked</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* OK, account for the buffers that this operation expects to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use and add the handle to the running transaction. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_outstanding_credits\">t_outstanding_credits</a> += <a class=\"id\" href=\"#nblocks\">nblocks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_updates\">t_updates</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_count\">t_handle_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(4, \"Handle %p given %d credits (total %d, free %d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#nblocks\">nblocks</a>, <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_outstanding_credits\">t_outstanding_credits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__log_space_left\">__log_space_left</a>(<a class=\"id\" href=\"#journal\">journal</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_acquire\">lock_map_acquire</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_lockdep_map\">h_lockdep_map</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#new_transaction\">new_transaction</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It's usually NULL */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new_transaction\">new_transaction</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#jbd_handle_key\">jbd_handle_key</a>;", 
"", 
"<span class=\"comment\">/* Allocate a new handle.  This should probably be in a slab... */</span>", 
"static <a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#new_handle\">new_handle</a>(int <a class=\"id\" href=\"#nblocks\">nblocks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#jbd_alloc_handle\">jbd_alloc_handle</a>(<a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#handle\">handle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#handle\">handle</a>, 0, sizeof(*<a class=\"id\" href=\"#handle\">handle</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a> = <a class=\"id\" href=\"#nblocks\">nblocks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_ref\">h_ref</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_lockdep_map\">h_lockdep_map</a>, \"jbd_handle\", &amp;<a class=\"id\" href=\"#jbd_handle_key\">jbd_handle_key</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#handle\">handle</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * handle_t *journal_start() - Obtain a new handle.</span>", 
"<span class=\"comment\"> * @journal: Journal to start transaction on.</span>", 
"<span class=\"comment\"> * @nblocks: number of block buffer we might modify</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We make sure that the transaction can guarantee at least nblocks of</span>", 
"<span class=\"comment\"> * modified buffers in the log.  We block until the log can guarantee</span>", 
"<span class=\"comment\"> * that much space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is visible to journal users (like ext3fs), so is not</span>", 
"<span class=\"comment\"> * called with the journal already locked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return a pointer to a newly allocated handle, or NULL on failure</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#journal_start\">journal_start</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, int <a class=\"id\" href=\"#nblocks\">nblocks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#journal_current_handle\">journal_current_handle</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#journal\">journal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EROFS\">EROFS</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a> == <a class=\"id\" href=\"#journal\">journal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_ref\">h_ref</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#new_handle\">new_handle</a>(<a class=\"id\" href=\"#nblocks\">nblocks</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#handle\">handle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#journal_info\">journal_info</a> = <a class=\"id\" href=\"#handle\">handle</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#start_this_handle\">start_this_handle</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_free_handle\">jbd_free_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#journal_info\">journal_info</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#handle\">handle</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int journal_extend() - extend buffer credits.</span>", 
"<span class=\"comment\"> * @handle:  handle to 'extend'</span>", 
"<span class=\"comment\"> * @nblocks: nr blocks to try to extend by.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Some transactions, such as large extends and truncates, can be done</span>", 
"<span class=\"comment\"> * atomically all at once or in several stages.  The operation requests</span>", 
"<span class=\"comment\"> * a credit for a number of buffer modications in advance, but can</span>", 
"<span class=\"comment\"> * extend its credit if it needs more.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * journal_extend tries to give the running handle more buffer credits.</span>", 
"<span class=\"comment\"> * It does not guarantee that allocation - this is a best-effort only.</span>", 
"<span class=\"comment\"> * The calling process MUST be able to deal cleanly with a failure to</span>", 
"<span class=\"comment\"> * extend here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 on success, non-zero on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * return code &lt; 0 implies an error</span>", 
"<span class=\"comment\"> * return code &gt; 0 implies normal transaction-full status.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#journal_extend\">journal_extend</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, int <a class=\"id\" href=\"#nblocks\">nblocks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#wanted\">wanted</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't extend a locked-down transaction! */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>-><a class=\"id\" href=\"#t_state\">t_state</a> != <a class=\"id\" href=\"#T_RUNNING\">T_RUNNING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(3, \"denied handle %p %d blocks: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"transaction not running\\n\", <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#nblocks\">nblocks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_out\">error_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wanted\">wanted</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_outstanding_credits\">t_outstanding_credits</a> + <a class=\"id\" href=\"#nblocks\">nblocks</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wanted\">wanted</a> &gt; <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_max_transaction_buffers\">j_max_transaction_buffers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(3, \"denied handle %p %d blocks: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"transaction too large\\n\", <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#nblocks\">nblocks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wanted\">wanted</a> &gt; <a class=\"id\" href=\"#__log_space_left\">__log_space_left</a>(<a class=\"id\" href=\"#journal\">journal</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(3, \"denied handle %p %d blocks: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"insufficient log space\\n\", <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#nblocks\">nblocks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a> += <a class=\"id\" href=\"#nblocks\">nblocks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_outstanding_credits\">t_outstanding_credits</a> += <a class=\"id\" href=\"#nblocks\">nblocks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(3, \"extended handle %p by %d\\n\", <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#nblocks\">nblocks</a>);", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"<a class=\"id\" href=\"#error_out\">error_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int journal_restart() - restart a handle.</span>", 
"<span class=\"comment\"> * @handle:  handle to restart</span>", 
"<span class=\"comment\"> * @nblocks: nr credits requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Restart a handle for a multi-transaction filesystem</span>", 
"<span class=\"comment\"> * operation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the journal_extend() call above fails to grant new buffer credits</span>", 
"<span class=\"comment\"> * to a running handle, a call to journal_restart will commit the</span>", 
"<span class=\"comment\"> * handle's transaction so far and reattach the handle to a new</span>", 
"<span class=\"comment\"> * transaction capabable of guaranteeing the requested number of</span>", 
"<span class=\"comment\"> * credits.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#journal_restart\">journal_restart</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, int <a class=\"id\" href=\"#nblocks\">nblocks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we've had an abort of any type, don't even think about</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * actually doing the restart! */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First unlink the handle from its current transaction, and start the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * commit on that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_updates\">t_updates</a> &gt; 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#journal_current_handle\">journal_current_handle</a>() == <a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_outstanding_credits\">t_outstanding_credits</a> -= <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_updates\">t_updates</a>--;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_updates\">t_updates</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_updates\">j_wait_updates</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(2, \"restarting handle %p\\n\", <a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__log_start_commit\">__log_start_commit</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_release\">lock_map_release</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_lockdep_map\">h_lockdep_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a> = <a class=\"id\" href=\"#nblocks\">nblocks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#start_this_handle\">start_this_handle</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * void journal_lock_updates () - establish a transaction barrier.</span>", 
"<span class=\"comment\"> * @journal:  Journal to establish a barrier on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This locks out any further updates from being started, and blocks</span>", 
"<span class=\"comment\"> * until all existing updates have completed, returning only once the</span>", 
"<span class=\"comment\"> * journal is in a quiescent state with no updates running.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The journal lock should not be held on entry.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#journal_lock_updates\">journal_lock_updates</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_barrier_count\">j_barrier_count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait until there are no running updates */</span>", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#transaction\">transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_updates\">t_updates</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_updates\">j_wait_updates</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_updates\">j_wait_updates</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have now established a barrier against other normal updates, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we also need to barrier against other journal_lock_updates() calls</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to make sure that we serialise special journal-locked operations</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_barrier\">j_barrier</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * void journal_unlock_updates (journal_t* journal) - release barrier</span>", 
"<span class=\"comment\"> * @journal:  Journal to release the barrier on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Release a transaction barrier obtained with journal_lock_updates().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Should be called without the journal lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#journal_unlock_updates\">journal_unlock_updates</a> (<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_barrier_count\">j_barrier_count</a> != 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_barrier\">j_barrier</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/>--<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_barrier_count\">j_barrier_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_transaction_locked\">j_wait_transaction_locked</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#warn_dirty_buffer\">warn_dirty_buffer</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/>       \"JBD: Spotted dirty metadata buffer (dev = %s, blocknr = %llu). \"", 
"<span class=\"ts\"/>       \"There's a risk of filesystem corruption in case of system \"", 
"<span class=\"ts\"/>       \"crash.\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>, <a class=\"id\" href=\"#b\">b</a>), (unsigned long long)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the buffer is already part of the current transaction, then there</span>", 
"<span class=\"comment\"> * is nothing we need to do.  If it is already part of a prior</span>", 
"<span class=\"comment\"> * transaction which we are still committing to disk, then we need to</span>", 
"<span class=\"comment\"> * make sure that we do not overwrite the old copy: we do copy-out to</span>", 
"<span class=\"comment\"> * preserve the copy going to disk.  We also account the buffer against</span>", 
"<span class=\"comment\"> * the handle's metadata buffer credits (unless the buffer is already</span>", 
"<span class=\"comment\"> * part of the transaction, that is).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#do_get_write_access\">do_get_write_access</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#force_copy\">force_copy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#frozen_buffer\">frozen_buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_copy\">need_copy</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(5, \"buffer_head %p, force_copy %d\\n\", <a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#force_copy\">force_copy</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"entry\");", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* @@@ Need to check for errors here at some point. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We now hold the buffer lock so it is safe to query the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state.  Is the buffer dirty?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If so, there are two possibilities.  The buffer may be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * non-journaled, and undergoing a quite legitimate writeback.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, it is journaled, and we don't expect dirty buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in that state (the buffers should be marked JBD_Dirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * instead.)  So either the IO is being done under our own</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * control and this is a bug, or it's a third party IO such as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dump(8) (which may leave the buffer scheduled for read ---</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ie. locked but not dirty) or tune2fs (which may actually have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the buffer dirtied, ugh.)  */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * First question: is this buffer already part of the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * transaction or the existing committing transaction?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_dirty_buffer\">warn_dirty_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In any case we need to clean the dirty flag and we must</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do it under the buffer lock to be sure we don't race</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with running write-out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"Journalling dirty buffer\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_jbddirty\">set_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The buffer is already part of this transaction if b_transaction or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * b_next_transaction points to it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this is the first time this transaction is touching this buffer,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reset the modified flag</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there is already a copy-out version of this buffer, then we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to make another one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_frozen_data\">b_frozen_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"has frozen data\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is there data here we need to preserve? */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> && <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> != <a class=\"id\" href=\"#transaction\">transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"owned by older transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There is one case we have to be very careful about.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the committing transaction is currently writing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this buffer out to disk and has NOT made a copy-out,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then we cannot modify the buffer contents at all</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * right now.  The essence of copy-out is that it is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * extra copy, not the primary copy, which gets</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * journaled.  If the primary copy is already going to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * disk then we cannot do copy-out here. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#BJ_Shadow\">BJ_Shadow</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT_BIT\">DEFINE_WAIT_BIT</a>(<a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a>, <a class=\"id\" href=\"#BH_Unshadow\">BH_Unshadow</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wqh\">wqh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wqh\">wqh</a> = <a class=\"id\" href=\"#bit_waitqueue\">bit_waitqueue</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a>, <a class=\"id\" href=\"#BH_Unshadow\">BH_Unshadow</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"on shadow: sleep\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* commit wakes up all shadow buffers after IO */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for ( ; ; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(<a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> != <a class=\"id\" href=\"#BJ_Shadow\">BJ_Shadow</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(<a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Only do the copy if the currently-owning transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * still needs it.  If it is on the Forget list, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * committing transaction is past that stage.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * buffer had better remain locked during the kmalloc,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but that should be true --- we hold the journal lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * still and the buffer is already on the BUF_JOURNAL</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * list so won't be flushed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Subtle point, though: if this is a get_undo_access,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then we will be relying on the frozen_data to contain</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the new value of the committed_data record after the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * transaction, so we HAVE to force the frozen_data copy</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in that case. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> != <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a> || <a class=\"id\" href=\"#force_copy\">force_copy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"generate frozen data\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#frozen_buffer\">frozen_buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"allocate memory for buffer\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frozen_buffer\">frozen_buffer</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_alloc\">jbd_alloc</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>)-><a class=\"id\" href=\"#b_size\">b_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#frozen_buffer\">frozen_buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"%s: OOM for frozen_buffer\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"oom!\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_frozen_data\">b_frozen_data</a> = <a class=\"id\" href=\"#frozen_buffer\">frozen_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frozen_buffer\">frozen_buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_copy\">need_copy</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Finally, if the buffer is not journaled right now, we need to make</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sure it doesn't get written to disk before the caller actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * commits the new data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"no transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, !<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"file as BJ_Reserved\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_file_buffer\">__journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>, <a class=\"id\" href=\"#BJ_Reserved\">BJ_Reserved</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_copy\">need_copy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#source\">source</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_EXPECT_JH\">J_EXPECT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Possible IO failure.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>)-><a class=\"id\" href=\"#b_page\">b_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = ((unsigned long) <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>)-><a class=\"id\" href=\"#b_data\">b_data</a>) &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#source\">source</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_frozen_data\">b_frozen_data</a>, <a class=\"id\" href=\"#source\">source</a>+<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>)-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#source\">source</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are about to journal a buffer, then any revoke pending on it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no longer valid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_cancel_revoke\">journal_cancel_revoke</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#frozen_buffer\">frozen_buffer</a>))<span class=\"ts\"/><span class=\"comment\">/* It's usually NULL */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_free\">jbd_free</a>(<a class=\"id\" href=\"#frozen_buffer\">frozen_buffer</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"exit\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int journal_get_write_access() - notify intent to modify a buffer for metadata (not data) update.</span>", 
"<span class=\"comment\"> * @handle: transaction to add buffer modifications to</span>", 
"<span class=\"comment\"> * @bh:     bh to be used for metadata writes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns an error code or 0 on success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In full data journalling mode the buffer may be of type BJ_AsyncData,</span>", 
"<span class=\"comment\"> * because we're write()ing a buffer which is also part of a shared mapping.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#journal_get_write_access\">journal_get_write_access</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#journal_add_journal_head\">journal_add_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We do not want to get caught playing with fields which the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * log thread also manipulates.  Make sure that the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completes any outstanding IO before proceeding. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#do_get_write_access\">do_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#jh\">jh</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_put_journal_head\">journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When the user wants to journal a newly created buffer_head</span>", 
"<span class=\"comment\"> * (ie. getblk() returned a new buffer and we are going to populate it</span>", 
"<span class=\"comment\"> * manually rather than reading off disk), then we need to keep the</span>", 
"<span class=\"comment\"> * buffer_head locked until it has been completely filled with new</span>", 
"<span class=\"comment\"> * data.  In this case, we should be able to make the assertion that</span>", 
"<span class=\"comment\"> * the bh is not already part of an existing transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The buffer should already be locked by the caller by this point.</span>", 
"<span class=\"comment\"> * There is no lock ranking violation: it was a newly created,</span>", 
"<span class=\"comment\"> * unlocked buffer beforehand. */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int journal_get_create_access () - notify intent to use newly created bh</span>", 
"<span class=\"comment\"> * @handle: transaction to new buffer to</span>", 
"<span class=\"comment\"> * @bh: new buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call this if you create a new bh.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#journal_get_create_access\">journal_get_create_access</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#journal_add_journal_head\">journal_add_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(5, \"journal_head %p\\n\", <a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"entry\");", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The buffer may already belong to this transaction due to pre-zeroing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the filesystem's new_block code.  It may also be on the previous,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * committing transaction's lists, but it HAS to be in Forget state in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that case: the transaction must have deleted the buffer for it to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reused here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#buffer_locked\">buffer_locked</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>)));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Previous journal_forget() could have left the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with jbddirty bit set because it was being committed. When</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the commit finished, we've filed the buffer for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * checkpointing and marked it dirty. Now we are reallocating</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the buffer so the transaction freeing it must have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * committed and so it's safe to clear the dirty bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* first access by this transaction */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"file as BJ_Reserved\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_file_buffer\">__journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>, <a class=\"id\" href=\"#BJ_Reserved\">BJ_Reserved</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* first access by this transaction */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"set next transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * akpm: I added this.  ext3_alloc_branch can pick up new indirect</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * blocks which contain freed but then revoked metadata.  We need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to cancel the revoke in case we end up freeing it yet again</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and the reallocating as data - this would cause a second revoke,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which hits an assertion error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"cancelling revoke\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_cancel_revoke\">journal_cancel_revoke</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_put_journal_head\">journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int journal_get_undo_access() - Notify intent to modify metadata with non-rewindable consequences</span>", 
"<span class=\"comment\"> * @handle: transaction</span>", 
"<span class=\"comment\"> * @bh: buffer to undo</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sometimes there is a need to distinguish between metadata which has</span>", 
"<span class=\"comment\"> * been committed to disk and that which has not.  The ext3fs code uses</span>", 
"<span class=\"comment\"> * this for freeing and allocating space, we have to make sure that we</span>", 
"<span class=\"comment\"> * do not reuse freed space until the deallocation has been committed,</span>", 
"<span class=\"comment\"> * since if we overwrote that space we would make the delete</span>", 
"<span class=\"comment\"> * un-rewindable in case of a crash.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To deal with that, journal_get_undo_access requests write access to a</span>", 
"<span class=\"comment\"> * buffer for parts of non-rewindable operations such as delete</span>", 
"<span class=\"comment\"> * operations on the bitmaps.  The journaling code must keep a copy of</span>", 
"<span class=\"comment\"> * the buffer's contents prior to the undo_access call until such time</span>", 
"<span class=\"comment\"> * as we know that the buffer has definitely been committed to disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We never need to know which transaction the committed data is part</span>", 
"<span class=\"comment\"> * of, buffers touched here are guaranteed to be dirtied later and so</span>", 
"<span class=\"comment\"> * will be committed to a new transaction in due course, at which point</span>", 
"<span class=\"comment\"> * we can discard the old committed data pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns error number or 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#journal_get_undo_access\">journal_get_undo_access</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#journal_add_journal_head\">journal_add_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#committed_data\">committed_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"entry\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do this first --- it can drop the journal lock, so we want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make sure that obtaining the committed_data is done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * atomically wrt. completion of any outstanding commits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_get_write_access\">do_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#jh\">jh</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#committed_data\">committed_data</a> = <a class=\"id\" href=\"#jbd_alloc\">jbd_alloc</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>)-><a class=\"id\" href=\"#b_size\">b_size</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#committed_data\">committed_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"%s: No memory for committed data\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Copy out the current buffer contents into the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * preserved, committed copy. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"generate b_committed data\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#committed_data\">committed_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a> = <a class=\"id\" href=\"#committed_data\">committed_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#committed_data\">committed_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_put_journal_head\">journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#committed_data\">committed_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_free\">jbd_free</a>(<a class=\"id\" href=\"#committed_data\">committed_data</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int journal_dirty_data() - mark a buffer as containing dirty data to be flushed</span>", 
"<span class=\"comment\"> * @handle: transaction</span>", 
"<span class=\"comment\"> * @bh: bufferhead to mark</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Mark a buffer as containing dirty data which needs to be flushed before</span>", 
"<span class=\"comment\"> * we can commit the current transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The buffer is placed on the transaction's data list and is marked as</span>", 
"<span class=\"comment\"> * belonging to the transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns error number or 0 on success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * journal_dirty_data() can be called via page_launder-&gt;ext3_writepage</span>", 
"<span class=\"comment\"> * by kswapd.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#journal_dirty_data\">journal_dirty_data</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_brelse\">need_brelse</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#journal_add_journal_head\">journal_add_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"entry\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The buffer could *already* be dirty.  Writeout can start</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at any time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(4, \"jh: %p, tid:%d\\n\", <a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * What if the buffer is already part of a running transaction?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There are two cases:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) It is part of the current running transaction.  Refile it,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    just in case we have allocated it as metadata, deallocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    it, then reallocated it as data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) It is part of the previous, still-committing transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    If all we want to do is to guarantee that the buffer will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    written to disk before this new transaction commits, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    being sure that the *previous* transaction has this same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    property is sufficient for us!  Just leave it on its old</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In case (2), the buffer must not already exist as metadata</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * --- that would violate write ordering (a transaction is free</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to write its data at any point, even before the previous</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * committing transaction has committed).  The caller must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * never, ever allow this to happen: there's nothing we can do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * about it in this layer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now that we have bh_state locked, are we really still mapped? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"unmapped buffer, bailing out\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_journal\">no_journal</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"has transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> != <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"belongs to older transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* @@@ IS THIS TRUE  ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Not any more.  Scenario: someone does a write()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * in data=journal mode.  The buffer's transaction has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * moved into commit.  Then someone does another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * write() to the file.  We do the frozen data copyout</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and set b_next_transaction to point to j_running_t.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * And while we're in that state, someone does a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * writepage() in an attempt to pageout the same area</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * of the file via a shared mapping.  At present that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * calls journal_dirty_data(), and we get right here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * It may be too late to journal the data.  Simply</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * falling through to the next test will suffice: the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * data will be dirty and wil be checkpointed.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ordering comments in the next comment block still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * apply.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">//J_ASSERT_JH(jh, jh-&gt;b_next_transaction == NULL);</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we're journalling data, and this buffer was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * subject to a write(), it could be metadata, forget</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * or shadow against the committing transaction.  Now,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * someone has dirtied the same darn page via a mapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and it is being writepage()'d.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We *could* just steal the page from commit, with some</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * fancy locking there.  Instead, we just skip it -</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * don't tie the page's buffers to the new transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * at all.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Implication: if we crash before the writepage() data</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is written into the filesystem, recovery will replay</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the write() data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> != <a class=\"id\" href=\"#BJ_None\">BJ_None</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> != <a class=\"id\" href=\"#BJ_SyncData\">BJ_SyncData</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> != <a class=\"id\" href=\"#BJ_Locked\">BJ_Locked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"Not stealing\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_journal\">no_journal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This buffer may be undergoing writeout in commit.  We</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * can't return from here and let the caller dirty it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * again because that can cause the write-out loop in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * commit to never terminate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_brelse\">need_brelse</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_dirty_buffer\">sync_dirty_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Since we dropped the lock... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"buffer got unmapped\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_journal\">no_journal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The buffer may become locked again at any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   time if it is redirtied */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We cannot remove the buffer with io error from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * committing transaction, because otherwise it would</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * miss the error and the commit would not abort.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_journal\">no_journal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"unfile from commit\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_temp_unlink_buffer\">__journal_temp_unlink_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It still points to the committing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * transaction; move it to this one so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that the refile assert checks are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * happy. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The buffer will be refiled below */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Special case --- the buffer might actually have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocated and then immediately deallocated in the previous,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * committing transaction, so might still be left on that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * transaction's metadata lists.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> != <a class=\"id\" href=\"#BJ_SyncData\">BJ_SyncData</a> && <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> != <a class=\"id\" href=\"#BJ_Locked\">BJ_Locked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"not on correct data list: unfile\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> != <a class=\"id\" href=\"#BJ_Shadow\">BJ_Shadow</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_temp_unlink_buffer\">__journal_temp_unlink_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"file as data\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_file_buffer\">__journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BJ_SyncData\">BJ_SyncData</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"not on a transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_file_buffer\">__journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>, <a class=\"id\" href=\"#BJ_SyncData\">BJ_SyncData</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#no_journal\">no_journal</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_brelse\">need_brelse</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"brelse\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"exit\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_put_journal_head\">journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int journal_dirty_metadata() - mark a buffer as containing dirty metadata</span>", 
"<span class=\"comment\"> * @handle: transaction to add buffer to.</span>", 
"<span class=\"comment\"> * @bh: buffer to mark</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mark dirty metadata which needs to be journaled as part of the current</span>", 
"<span class=\"comment\"> * transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The buffer is placed on the transaction's metadata list and is marked</span>", 
"<span class=\"comment\"> * as belonging to the transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns error number or 0 on success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Special care needs to be taken if the buffer already belongs to the</span>", 
"<span class=\"comment\"> * current committing transaction (in which case we should have frozen</span>", 
"<span class=\"comment\"> * data present for that commit).  In that case, we don't relink the</span>", 
"<span class=\"comment\"> * buffer: that only gets done when the old transaction finally</span>", 
"<span class=\"comment\"> * completes its commit.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#journal_dirty_metadata\">journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(5, \"journal_head %p\\n\", <a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"entry\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This buffer's got modified and becoming part</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of the transaction. This needs to be done</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * once a transaction -bzzz</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a> &gt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fastpath, to avoid expensive locking.  If this buffer is already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the running transaction's metadata list there is nothing to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Nobody can take it off again because there is a handle open.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * I _think_ we're OK here with SMP barriers - a mistaken decision will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * result in this test being false, so we go in and take the locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a> && <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#BJ_Metadata\">BJ_Metadata</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"fastpath\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_bh\">out_unlock_bh</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_jbddirty\">set_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Metadata already on the current transaction list doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to be filed.  Metadata on another transaction's list must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be committing, and will be refiled once the commit completes:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * leave it alone for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> != <a class=\"id\" href=\"#transaction\">transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"already on other transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* And this case is illegal: we can't reuse another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * transaction's data buffer, ever. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_bh\">out_unlock_bh</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* That test should have eliminated the following case: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_frozen_data\">b_frozen_data</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"file as BJ_Metadata\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__journal_file_buffer\">__journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>, <a class=\"id\" href=\"#BJ_Metadata\">BJ_Metadata</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<a class=\"id\" href=\"#out_unlock_bh\">out_unlock_bh</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"exit\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * journal_release_buffer: undo a get_write_access without any buffer</span>", 
"<span class=\"comment\"> * updates, if the update decided in the end that it didn't need access.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#journal_release_buffer\">journal_release_buffer</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"entry\");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * void journal_forget() - bforget() for potentially-journaled buffers.</span>", 
"<span class=\"comment\"> * @handle: transaction handle</span>", 
"<span class=\"comment\"> * @bh:     bh to 'forget'</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We can only do the bforget if there are no commits pending against the</span>", 
"<span class=\"comment\"> * buffer.  If the buffer is dirty in the current running transaction we</span>", 
"<span class=\"comment\"> * can safely unlink it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * bh may not be a journalled buffer at all - it may be a non-JBD</span>", 
"<span class=\"comment\"> * buffer which came off the hashtable.  Check for this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Decrements bh-&gt;b_count by one.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allow this call even if the handle has aborted --- it may be part of</span>", 
"<span class=\"comment\"> * the caller's cleanup after an abort.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#journal_forget\">journal_forget</a> (<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#drop_reserve\">drop_reserve</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#was_modified\">was_modified</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"entry\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_jbd\">not_jbd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Critical error: attempting to delete a bitmap buffer, maybe?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't do any jbd operations, and return an error. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#J_EXPECT_JH\">J_EXPECT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, !<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"inconsistent data on disk\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_jbd\">not_jbd</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* keep track of wether or not this transaction modified us */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#was_modified\">was_modified</a> = <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The buffer's going from the transaction, we must drop</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all references -bzzz</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, !<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_frozen_data\">b_frozen_data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we are forgetting a buffer which is already part</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of this transaction, then we can just drop it from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the transaction immediately. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_jbddirty\">clear_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"belongs to current transaction: unfile\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we only want to drop a reference if this transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * modified the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#was_modified\">was_modified</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_reserve\">drop_reserve</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are no longer going to journal this buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * However, the commit of this transaction is still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * important to the buffer: the delete that we are now</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * processing might obsolete an old log entry, so by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * committing, we can satisfy the buffer's checkpoint.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So, if we have a checkpoint on the buffer, we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * now refile the buffer on our BJ_Forget list so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we know to remove the checkpoint after we commit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_cp_transaction\">b_cp_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_temp_unlink_buffer\">__journal_temp_unlink_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_file_buffer\">__journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>, <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_unfile_buffer\">__journal_unfile_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_remove_journal_head\">journal_remove_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bforget\">__bforget</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* However, if the buffer is still owned by a prior</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (committing) transaction, we can't drop it yet... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"belongs to older transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ... but we CAN drop it from the new transaction if we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * have also modified it since the original commit. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * only drop a reference if this transaction modified</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#was_modified\">was_modified</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_reserve\">drop_reserve</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#not_jbd\">not_jbd</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<a class=\"id\" href=\"#drop\">drop</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drop_reserve\">drop_reserve</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no need to reserve log space for this block -bzzz */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int journal_stop() - complete a transaction</span>", 
"<span class=\"comment\"> * @handle: tranaction to complete.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All done for a particular handle.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is not much action needed here.  We just return any remaining</span>", 
"<span class=\"comment\"> * buffer credits to the transaction and remove the handle.  The only</span>", 
"<span class=\"comment\"> * complication is that we need to start a commit operation if the</span>", 
"<span class=\"comment\"> * filesystem is marked for synchronous update.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * journal_stop itself will not usually return an error, but it may</span>", 
"<span class=\"comment\"> * do so in unusual circumstances.  In particular, expect it to</span>", 
"<span class=\"comment\"> * return -EIO if a journal_abort has been executed since the</span>", 
"<span class=\"comment\"> * transaction began.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#journal_stop\">journal_stop</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#journal_current_handle\">journal_current_handle</a>() == <a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_updates\">t_updates</a> &gt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_ref\">h_ref</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(4, \"h_ref %d -> %d\\n\", <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_ref\">h_ref</a> + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_ref\">h_ref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(4, \"Handle %p going down\\n\", <a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Implement synchronous transaction batching.  If the handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was synchronous, don't force a commit immediately.  Let's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * yield and let another thread piggyback onto this transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Keep doing that while new threads continue to arrive.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It doesn't cost much - we're about to run a commit and sleep</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on IO anyway.  Speeds up many-threaded, many-dir operations</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by 30x or more...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We try and optimize the sleep time against what the underlying disk</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can do, instead of having a static sleep time.  This is usefull for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the case where our storage is so fast that it is more optimal to go</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ahead and force a flush and wait for the transaction to be committed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than it is to wait for an arbitrary amount of time for new writers to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * join the transaction.  We achieve this by measuring how long it takes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to commit a transaction, and compare it with how long this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction has been running, and if run time &lt; commit time then we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sleep for the delta and commit.  This greatly helps super fast disks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that would see slowdowns as more threads started doing fsyncs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But don't do this if this process was the most recent one to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * perform a synchronous write.  We do this to detect the case where a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * single process is doing a stream of sync writes.  No point in waiting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for joiners in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_sync\">h_sync</a> && <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_last_sync_writer\">j_last_sync_writer</a> != <a class=\"id\" href=\"#pid\">pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#commit_time\">commit_time</a>, <a class=\"id\" href=\"#trans_time\">trans_time</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_last_sync_writer\">j_last_sync_writer</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit_time\">commit_time</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_average_commit_time\">j_average_commit_time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trans_time\">trans_time</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#ktime_get\">ktime_get</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_start_time\">t_start_time</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit_time\">commit_time</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#u64\">u64</a>, <a class=\"id\" href=\"#commit_time\">commit_time</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    1000*<a class=\"id\" href=\"#jiffies_to_usecs\">jiffies_to_usecs</a>(1));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#trans_time\">trans_time</a> &lt; <a class=\"id\" href=\"#commit_time\">commit_time</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#ktime_add_ns\">ktime_add_ns</a>(<a class=\"id\" href=\"#ktime_get\">ktime_get</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#commit_time\">commit_time</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_hrtimeout\">schedule_hrtimeout</a>(&amp;<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#HRTIMER_MODE_ABS\">HRTIMER_MODE_ABS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_sync\">h_sync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_synchronous_commit\">t_synchronous_commit</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#journal_info\">journal_info</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_handle_lock\">t_handle_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_outstanding_credits\">t_outstanding_credits</a> -= <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_updates\">t_updates</a>--;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_updates\">t_updates</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_updates\">j_wait_updates</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_barrier_count\">j_barrier_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_transaction_locked\">j_wait_transaction_locked</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the handle is marked SYNC, we need to set another commit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * going!  We also want to force a commit if the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction is occupying too much of the log, or if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction is too old now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_sync\">h_sync</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_outstanding_credits\">t_outstanding_credits</a> &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_max_transaction_buffers\">j_max_transaction_buffers</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_expires\">t_expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Do this even for aborted journals: an abort still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * completes the commit thread, it just doesn't write</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * anything to disk. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid_t\">tid_t</a> <a class=\"id\" href=\"#tid\">tid</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>;", 
];
xr_frag_insert('l/57/e9d083536df73f55b09cd9bd6bf6d54c115e4b.xr', __xr_tmp);
