var __xr_tmp = [
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sht\">sht</a>-><a class=\"id\" href=\"#change_queue_depth\">change_queue_depth</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a> >= <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#max_queue_depth\">max_queue_depth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>,", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#last_queue_ramp_up\">last_queue_ramp_up</a> + <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_ramp_up_period\">queue_ramp_up_period</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>,", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#last_queue_full_time\">last_queue_full_time</a> + <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_ramp_up_period\">queue_ramp_up_period</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Walk all devices of a target and do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ramp up on them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost_for_each_device\">shost_for_each_device</a>(<a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>-><a class=\"id\" href=\"#channel\">channel</a> != <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#channel\">channel</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>-><a class=\"id\" href=\"#id\">id</a> != <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#id\">id</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a> == <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#max_queue_depth\">max_queue_depth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * call back into LLD to increase queue_depth by one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with ramp up reason code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sht\">sht</a>-><a class=\"id\" href=\"#change_queue_depth\">change_queue_depth</a>(<a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>, <a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a> + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_QDEPTH_RAMP_UP\">SCSI_QDEPTH_RAMP_UP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#last_queue_ramp_up\">last_queue_ramp_up</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scsi_handle_queue_full\">scsi_handle_queue_full</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_host_template\">scsi_host_template</a> *<a class=\"id\" href=\"#sht\">sht</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sht\">sht</a>-><a class=\"id\" href=\"#change_queue_depth\">change_queue_depth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost_for_each_device\">shost_for_each_device</a>(<a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>-><a class=\"id\" href=\"#channel\">channel</a> != <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#channel\">channel</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>-><a class=\"id\" href=\"#id\">id</a> != <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We do not know the number of commands that were at</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the device when we got the queue full so we start</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from the highest possible value and work our way down.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sht\">sht</a>-><a class=\"id\" href=\"#change_queue_depth\">change_queue_depth</a>(<a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>, <a class=\"id\" href=\"#tmp_sdev\">tmp_sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a> - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_QDEPTH_QFULL\">SCSI_QDEPTH_QFULL</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_completed_normally - Disposition a eh cmd on return from LLD.</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>SCSI cmd to examine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    This is *only* called when we are examining the status of commands</span>", 
"<span class=\"comment\"> *    queued during error recovery.  the main difference here is that we</span>", 
"<span class=\"comment\"> *    don't allow for the possibility of retries here, and we are a lot</span>", 
"<span class=\"comment\"> *    more restrictive about what we consider acceptable.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_eh_completed_normally\">scsi_eh_completed_normally</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first check the host byte, to see if there is anything in there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that would indicate what we need to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host_byte\">host_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>) == <a class=\"id\" href=\"#DID_RESET\">DID_RESET</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rats.  we are already in the error handler, so we now</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * get to try and figure out what to do next.  if the sense</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is valid, we have a pretty good idea of what to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if not, we mark it as FAILED.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#scsi_check_sense\">scsi_check_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host_byte\">host_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>) != <a class=\"id\" href=\"#DID_OK\">DID_OK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * next, check the message byte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg_byte\">msg_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>) != <a class=\"id\" href=\"#COMMAND_COMPLETE\">COMMAND_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * now, check the status byte to see if this indicates</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anything special.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#status_byte\">status_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GOOD\">GOOD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_handle_queue_ramp_up\">scsi_handle_queue_ramp_up</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#COMMAND_TERMINATED\">COMMAND_TERMINATED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CHECK_CONDITION\">CHECK_CONDITION</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#scsi_check_sense\">scsi_check_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CONDITION_GOOD\">CONDITION_GOOD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INTERMEDIATE_GOOD\">INTERMEDIATE_GOOD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INTERMEDIATE_C_GOOD\">INTERMEDIATE_C_GOOD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * who knows?  FIXME(eric)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RESERVATION_CONFLICT\">RESERVATION_CONFLICT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[0] == <a class=\"id\" href=\"#TEST_UNIT_READY\">TEST_UNIT_READY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* it is a success, we probed the device and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * found it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* otherwise, we failed to send the command */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#QUEUE_FULL\">QUEUE_FULL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_handle_queue_full\">scsi_handle_queue_full</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BUSY\">BUSY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_done - Completion function for error handling.</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>Cmd that is done.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_eh_done\">scsi_eh_done</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a>     *<a class=\"id\" href=\"#eh_action\">eh_action</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s scmd: %p result: %x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eh_action\">eh_action</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#eh_action\">eh_action</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#eh_action\">eh_action</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#eh_action\">eh_action</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_try_host_reset - ask host adapter to reset itself</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>SCSI cmd to send hsot reset.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_try_host_reset\">scsi_try_host_reset</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: Snd Host RST\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__func__\">__func__</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#eh_host_reset_handler\">eh_host_reset_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#eh_host_reset_handler\">eh_host_reset_handler</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#skip_settle_delay\">skip_settle_delay</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ssleep\">ssleep</a>(<a class=\"id\" href=\"#HOST_RESET_SETTLE_TIME\">HOST_RESET_SETTLE_TIME</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_report_bus_reset\">scsi_report_bus_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#scmd_channel\">scmd_channel</a>(<a class=\"id\" href=\"#scmd\">scmd</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_try_bus_reset - ask host to perform a bus reset</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>SCSI cmd to send bus reset.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_try_bus_reset\">scsi_try_bus_reset</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
];
xr_frag_insert('l/58/026866c01ccc77ca568a4887fe3bbe46f1bdfe.xr', __xr_tmp);
