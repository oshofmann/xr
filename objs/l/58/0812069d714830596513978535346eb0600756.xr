var __xr_tmp = [
"<span class=\"comment\">/* Authors: Karl MacMillan &lt;kmacmillan@tresys.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    Frank Mayer &lt;mayerf@tresys.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2003 - 2004 Tresys Technology, LLC</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the Free Software Foundation, version 2.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"security.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"conditional.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cond_evaluate_expr evaluates a conditional expr</span>", 
"<span class=\"comment\"> * in reverse polish notation. It returns true (1), false (0),</span>", 
"<span class=\"comment\"> * or undefined (-1). Undefined occurs when the expression</span>", 
"<span class=\"comment\"> * exceeds the stack depth of COND_EXPR_MAXDEPTH.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cond_evaluate_expr\">cond_evaluate_expr</a>(struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#cond_expr\">cond_expr</a> *<a class=\"id\" href=\"#expr\">expr</a>)", 
"{", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_expr\">cond_expr</a> *<a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#COND_EXPR_MAXDEPTH\">COND_EXPR_MAXDEPTH</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sp\">sp</a> = -1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#expr\">expr</a>; <a class=\"id\" href=\"#cur\">cur</a>; <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#expr_type\">expr_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#COND_BOOL\">COND_BOOL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> == (<a class=\"id\" href=\"#COND_EXPR_MAXDEPTH\">COND_EXPR_MAXDEPTH</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a>] = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bool_val_to_struct\">bool_val_to_struct</a>[<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#bool\">bool</a> - 1]-><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#COND_NOT\">COND_NOT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a>] = !<a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#COND_OR\">COND_OR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a>] |= <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a> + 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#COND_AND\">COND_AND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a>] &= <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a> + 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#COND_XOR\">COND_XOR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a>] ^= <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a> + 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#COND_EQ\">COND_EQ</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a>] = (<a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a>] == <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a> + 1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#COND_NEQ\">COND_NEQ</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a>] = (<a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a>] != <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#sp\">sp</a> + 1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#s\">s</a>[0];", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * evaluate_cond_node evaluates the conditional stored in</span>", 
"<span class=\"comment\"> * a struct cond_node and if the result is different than the</span>", 
"<span class=\"comment\"> * current state of the node it sets the rules in the true/false</span>", 
"<span class=\"comment\"> * list appropriately. If the result of the expression is undefined</span>", 
"<span class=\"comment\"> * all of the rules are disabled for safety.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#evaluate_cond_node\">evaluate_cond_node</a>(struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#cond_node\">cond_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#new_state\">new_state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_av_list\">cond_av_list</a> *<a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_state\">new_state</a> = <a class=\"id\" href=\"#cond_evaluate_expr\">cond_evaluate_expr</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#expr\">expr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_state\">new_state</a> != <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#cur_state\">cur_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#cur_state\">cur_state</a> = <a class=\"id\" href=\"#new_state\">new_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_state\">new_state</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SELinux: expression result was undefined - disabling all rules.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* turn the rules on or off */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#true_list\">true_list</a>; <a class=\"id\" href=\"#cur\">cur</a>; <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_state\">new_state</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#specified\">specified</a> &= ~<a class=\"id\" href=\"#AVTAB_ENABLED\">AVTAB_ENABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#specified\">specified</a> |= <a class=\"id\" href=\"#AVTAB_ENABLED\">AVTAB_ENABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#false_list\">false_list</a>; <a class=\"id\" href=\"#cur\">cur</a>; <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* -1 or 1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_state\">new_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#specified\">specified</a> &= ~<a class=\"id\" href=\"#AVTAB_ENABLED\">AVTAB_ENABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#specified\">specified</a> |= <a class=\"id\" href=\"#AVTAB_ENABLED\">AVTAB_ENABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#cond_policydb_init\">cond_policydb_init</a>(struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bool_val_to_struct\">bool_val_to_struct</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cond_list\">cond_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avtab_init\">avtab_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#te_cond_avtab\">te_cond_avtab</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cond_av_list_destroy\">cond_av_list_destroy</a>(struct <a class=\"id\" href=\"#cond_av_list\">cond_av_list</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_av_list\">cond_av_list</a> *<a class=\"id\" href=\"#cur\">cur</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#list\">list</a>; <a class=\"id\" href=\"#cur\">cur</a>; <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the avtab_ptr_t node is destroy by the avtab */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cur\">cur</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cond_node_destroy\">cond_node_destroy</a>(struct <a class=\"id\" href=\"#cond_node\">cond_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_expr\">cond_expr</a> *<a class=\"id\" href=\"#cur_expr\">cur_expr</a>, *<a class=\"id\" href=\"#next_expr\">next_expr</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cur_expr\">cur_expr</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#expr\">expr</a>; <a class=\"id\" href=\"#cur_expr\">cur_expr</a>; <a class=\"id\" href=\"#cur_expr\">cur_expr</a> = <a class=\"id\" href=\"#next_expr\">next_expr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_expr\">next_expr</a> = <a class=\"id\" href=\"#cur_expr\">cur_expr</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cur_expr\">cur_expr</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_av_list_destroy\">cond_av_list_destroy</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#true_list\">true_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_av_list_destroy\">cond_av_list_destroy</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#false_list\">false_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cond_list_destroy\">cond_list_destroy</a>(struct <a class=\"id\" href=\"#cond_node\">cond_node</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_node\">cond_node</a> *<a class=\"id\" href=\"#next\">next</a>, *<a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list\">list</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#list\">list</a>; <a class=\"id\" href=\"#cur\">cur</a>; <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_node_destroy\">cond_node_destroy</a>(<a class=\"id\" href=\"#cur\">cur</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#cond_policydb_destroy\">cond_policydb_destroy</a>(struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bool_val_to_struct\">bool_val_to_struct</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avtab_destroy\">avtab_destroy</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#te_cond_avtab\">te_cond_avtab</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_list_destroy\">cond_list_destroy</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cond_list\">cond_list</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#cond_init_bool_indexes\">cond_init_bool_indexes</a>(struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bool_val_to_struct\">bool_val_to_struct</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bool_val_to_struct\">bool_val_to_struct</a> = (struct <a class=\"id\" href=\"#cond_bool_datum\">cond_bool_datum</a> **)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p_bools\">p_bools</a>.<a class=\"id\" href=\"#nprim\">nprim</a> * sizeof(struct <a class=\"id\" href=\"#cond_bool_datum\">cond_bool_datum</a> *), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bool_val_to_struct\">bool_val_to_struct</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#cond_destroy_bool\">cond_destroy_bool</a>(void *<a class=\"id\" href=\"#key\">key</a>, void *<a class=\"id\" href=\"#datum\">datum</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#datum\">datum</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#cond_index_bool\">cond_index_bool</a>(void *<a class=\"id\" href=\"#key\">key</a>, void *<a class=\"id\" href=\"#datum\">datum</a>, void *<a class=\"id\" href=\"#datap\">datap</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_bool_datum\">cond_bool_datum</a> *<a class=\"id\" href=\"#booldatum\">booldatum</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#booldatum\">booldatum</a> = <a class=\"id\" href=\"#datum\">datum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#datap\">datap</a>;", 
"", 
];
xr_frag_insert('l/58/0812069d714830596513978535346eb0600756.xr', __xr_tmp);
