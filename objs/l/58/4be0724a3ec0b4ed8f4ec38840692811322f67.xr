var __xr_tmp = [
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_guid - Convert GUID from ASCII to binary</span>", 
"<span class=\"comment\"> * @src:   36 char string of the form fa50ff2b-f2e8-45de-83fa-65417f2f49ba</span>", 
"<span class=\"comment\"> * @dest:  Memory block to hold binary GUID (16 bytes)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * N.B. The GUID need not be NULL terminated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @dest contains binary GUID</span>", 
"<span class=\"comment\"> *          'false'  @dest contents are undefined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_parse_guid\">ldm_parse_guid</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#dest\">dest</a>)", 
"{", 
"<span class=\"ts\"/>static const int <a class=\"id\" href=\"#size\">size</a>[] = { 4, 2, 2, 2, 6 };", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#src\">src</a>[8]  != '-' || <a class=\"id\" href=\"#src\">src</a>[13] != '-' ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#src\">src</a>[18] != '-' || <a class=\"id\" href=\"#src\">src</a>[23] != '-')", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 5; <a class=\"id\" href=\"#j\">j</a>++, <a class=\"id\" href=\"#src\">src</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#size\">size</a>[<a class=\"id\" href=\"#j\">j</a>]; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#src\">src</a>+=2, *<a class=\"id\" href=\"#dest\">dest</a>++ = <a class=\"id\" href=\"#v\">v</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#ldm_parse_hexbyte\">ldm_parse_hexbyte</a> (<a class=\"id\" href=\"#src\">src</a>)) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_privhead - Read the LDM Database PRIVHEAD structure</span>", 
"<span class=\"comment\"> * @data:  Raw database PRIVHEAD structure loaded from the device</span>", 
"<span class=\"comment\"> * @ph:    In-memory privhead structure in which to return parsed information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This parses the LDM database PRIVHEAD structure supplied in @data and</span>", 
"<span class=\"comment\"> * sets up the in-memory privhead structure @ph with the obtained information.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @ph contains the PRIVHEAD data</span>", 
"<span class=\"comment\"> *          'false'  @ph contents are undefined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_parse_privhead\">ldm_parse_privhead</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#privhead\">privhead</a> *<a class=\"id\" href=\"#ph\">ph</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_vista\">is_vista</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#data\">data</a> || !<a class=\"id\" href=\"#ph\">ph</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#MAGIC_PRIVHEAD\">MAGIC_PRIVHEAD</a> != <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"Cannot find PRIVHEAD structure. LDM database is\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" corrupt. Aborting.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#ver_major\">ver_major</a> = <a class=\"id\" href=\"#get_unaligned_be16\">get_unaligned_be16</a>(<a class=\"id\" href=\"#data\">data</a> + 0x000C);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#ver_minor\">ver_minor</a> = <a class=\"id\" href=\"#get_unaligned_be16\">get_unaligned_be16</a>(<a class=\"id\" href=\"#data\">data</a> + 0x000E);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#logical_disk_start\">logical_disk_start</a> = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#data\">data</a> + 0x011B);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#logical_disk_size\">logical_disk_size</a> = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#data\">data</a> + 0x0123);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#config_start\">config_start</a> = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#data\">data</a> + 0x012B);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#config_size\">config_size</a> = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#data\">data</a> + 0x0133);", 
"<span class=\"ts\"/><span class=\"comment\">/* Version 2.11 is Win2k/XP and version 2.12 is Vista. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#ver_major\">ver_major</a> == 2 && <a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#ver_minor\">ver_minor</a> == 12)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_vista\">is_vista</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_vista\">is_vista</a> && (<a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#ver_major\">ver_major</a> != 2 || <a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#ver_minor\">ver_minor</a> != 11)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"Expected PRIVHEAD version 2.11 or 2.12, got %d.%d.\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" Aborting.\", <a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#ver_major\">ver_major</a>, <a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#ver_minor\">ver_minor</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_debug\">ldm_debug</a>(\"PRIVHEAD version %d.%d (Windows %s).\", <a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#ver_major\">ver_major</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#ver_minor\">ver_minor</a>, <a class=\"id\" href=\"#is_vista\">is_vista</a> ? \"Vista\" : \"2000/XP\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#config_size\">config_size</a> != <a class=\"id\" href=\"#LDM_DB_SIZE\">LDM_DB_SIZE</a>) {<span class=\"ts\"/><span class=\"comment\">/* 1 MiB in sectors. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Warn the user and continue, carefully. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_info\">ldm_info</a>(\"Database is normally %u bytes, it claims to \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"be %llu bytes.\", <a class=\"id\" href=\"#LDM_DB_SIZE\">LDM_DB_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#config_size\">config_size</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#logical_disk_size\">logical_disk_size</a> == 0) || (<a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#logical_disk_start\">logical_disk_start</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#logical_disk_size\">logical_disk_size</a> &gt; <a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#config_start\">config_start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"PRIVHEAD disk size doesn't match real disk size\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ldm_parse_guid\">ldm_parse_guid</a>(<a class=\"id\" href=\"#data\">data</a> + 0x0030, <a class=\"id\" href=\"#ph\">ph</a>-><a class=\"id\" href=\"#disk_id\">disk_id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_error\">ldm_error</a>(\"PRIVHEAD contains an invalid GUID.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ldm_debug\">ldm_debug</a>(\"Parsed PRIVHEAD successfully.\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_tocblock - Read the LDM Database TOCBLOCK structure</span>", 
"<span class=\"comment\"> * @data:  Raw database TOCBLOCK structure loaded from the device</span>", 
"<span class=\"comment\"> * @toc:   In-memory toc structure in which to return parsed information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This parses the LDM Database TOCBLOCK (table of contents) structure supplied</span>", 
"<span class=\"comment\"> * in @data and sets up the in-memory tocblock structure @toc with the obtained</span>", 
"<span class=\"comment\"> * information.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * N.B.  The *_start and *_size values returned in @toc are not range-checked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  'true'   @toc contains the TOCBLOCK data</span>", 
"<span class=\"comment\"> *          'false'  @toc contents are undefined</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ldm_parse_tocblock\">ldm_parse_tocblock</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#tocblock\">tocblock</a> *<a class=\"id\" href=\"#toc\">toc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a> (!<a class=\"id\" href=\"#data\">data</a> || !<a class=\"id\" href=\"#toc\">toc</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#MAGIC_TOCBLOCK\">MAGIC_TOCBLOCK</a> != <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(<a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldm_crit\">ldm_crit</a> (\"Cannot find TOCBLOCK, database may be corrupt.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
];
xr_frag_insert('l/58/4be0724a3ec0b4ed8f4ec38840692811322f67.xr', __xr_tmp);
