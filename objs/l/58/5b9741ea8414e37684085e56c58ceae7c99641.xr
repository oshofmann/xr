var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#sections\">sections</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#i387\">i387</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mtrr\">mtrr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#numa\">numa</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#asm\">asm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mce\">mce</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#msr\">msr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pat\">pat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uv\">uv</a>/<a class=\"id\" href=\"#uv\">uv</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"cpu.h\"", 
"", 
"<span class=\"comment\">/* all of these masks are initialized in setup_cpu_local_masks() */</span>", 
"<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#cpu_initialized_mask\">cpu_initialized_mask</a>;", 
"<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#cpu_callout_mask\">cpu_callout_mask</a>;", 
"<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#cpu_callin_mask\">cpu_callin_mask</a>;", 
"", 
"<span class=\"comment\">/* representing cpus for which sibling maps can be computed */</span>", 
"<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#cpu_sibling_setup_mask\">cpu_sibling_setup_mask</a>;", 
"", 
"<span class=\"comment\">/* correctly size the local cpu masks */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_cpu_local_masks\">setup_cpu_local_masks</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_bootmem_cpumask_var\">alloc_bootmem_cpumask_var</a>(&amp;<a class=\"id\" href=\"#cpu_initialized_mask\">cpu_initialized_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_bootmem_cpumask_var\">alloc_bootmem_cpumask_var</a>(&amp;<a class=\"id\" href=\"#cpu_callin_mask\">cpu_callin_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_bootmem_cpumask_var\">alloc_bootmem_cpumask_var</a>(&amp;<a class=\"id\" href=\"#cpu_callout_mask\">cpu_callout_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_bootmem_cpumask_var\">alloc_bootmem_cpumask_var</a>(&amp;<a class=\"id\" href=\"#cpu_sibling_setup_mask\">cpu_sibling_setup_mask</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#default_init\">default_init</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_detect_cache_sizes\">cpu_detect_cache_sizes</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/* Not much we can do here... */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if at least it has cpuid */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No cpuid. It must be an ancient CPU */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>, \"486\");", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>, \"386\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#cpu_dev\">cpu_dev</a> <a class=\"id\" href=\"#__cpuinitconst\">__cpuinitconst</a> <a class=\"id\" href=\"#default_cpu\">default_cpu</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_init\">c_init</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#default_init\">default_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_vendor\">c_vendor</a><span class=\"ts\"/>= \"Unknown\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_x86_vendor\">c_x86_vendor</a><span class=\"ts\"/>= <a class=\"id\" href=\"#X86_VENDOR_UNKNOWN\">X86_VENDOR_UNKNOWN</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#cpu_dev\">cpu_dev</a> *<a class=\"id\" href=\"#this_cpu\">this_cpu</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> = &amp;<a class=\"id\" href=\"#default_cpu\">default_cpu</a>;", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU_PAGE_ALIGNED\">DEFINE_PER_CPU_PAGE_ALIGNED</a>(struct <a class=\"id\" href=\"#gdt_page\">gdt_page</a>, <a class=\"id\" href=\"#gdt_page\">gdt_page</a>) = { .<a class=\"id\" href=\"#gdt\">gdt</a> = {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need valid kernel segments for data and code in long mode too</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IRET will check the segment types  kkeil 2000/10/28</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also sysret mandates a special GDT layout</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TLS descriptors are currently at a different place compared to i386.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hopefully nobody expects them at a fixed place (Wine?)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_KERNEL32_CS\">GDT_ENTRY_KERNEL32_CS</a>]<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xc09b, 0, 0xfffff),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_KERNEL_CS\">GDT_ENTRY_KERNEL_CS</a>]<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xa09b, 0, 0xfffff),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_KERNEL_DS\">GDT_ENTRY_KERNEL_DS</a>]<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xc093, 0, 0xfffff),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_DEFAULT_USER32_CS\">GDT_ENTRY_DEFAULT_USER32_CS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xc0fb, 0, 0xfffff),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_DEFAULT_USER_DS\">GDT_ENTRY_DEFAULT_USER_DS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xc0f3, 0, 0xfffff),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_DEFAULT_USER_CS\">GDT_ENTRY_DEFAULT_USER_CS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xa0fb, 0, 0xfffff),", 
"#else", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_KERNEL_CS\">GDT_ENTRY_KERNEL_CS</a>]<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xc09a, 0, 0xfffff),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_KERNEL_DS\">GDT_ENTRY_KERNEL_DS</a>]<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xc092, 0, 0xfffff),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_DEFAULT_USER_CS\">GDT_ENTRY_DEFAULT_USER_CS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xc0fa, 0, 0xfffff),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_DEFAULT_USER_DS\">GDT_ENTRY_DEFAULT_USER_DS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xc0f2, 0, 0xfffff),", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Segments used for calling PnP BIOS have byte granularity.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * They code segments and data segments have fixed 64k limits,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the transfer segment sizes are set at run time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* 32-bit code */</span>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_PNPBIOS_CS32\">GDT_ENTRY_PNPBIOS_CS32</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0x409a, 0, 0xffff),", 
"<span class=\"ts\"/><span class=\"comment\">/* 16-bit code */</span>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_PNPBIOS_CS16\">GDT_ENTRY_PNPBIOS_CS16</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0x009a, 0, 0xffff),", 
"<span class=\"ts\"/><span class=\"comment\">/* 16-bit data */</span>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_PNPBIOS_DS\">GDT_ENTRY_PNPBIOS_DS</a>]<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0x0092, 0, 0xffff),", 
"<span class=\"ts\"/><span class=\"comment\">/* 16-bit data */</span>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_PNPBIOS_TS1\">GDT_ENTRY_PNPBIOS_TS1</a>]<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0x0092, 0, 0),", 
"<span class=\"ts\"/><span class=\"comment\">/* 16-bit data */</span>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_PNPBIOS_TS2\">GDT_ENTRY_PNPBIOS_TS2</a>]<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0x0092, 0, 0),", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The APM segments have byte granularity and their bases</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are set at run time.  All have 64k limits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* 32-bit code */</span>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_APMBIOS_BASE\">GDT_ENTRY_APMBIOS_BASE</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0x409a, 0, 0xffff),", 
"<span class=\"ts\"/><span class=\"comment\">/* 16-bit code */</span>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_APMBIOS_BASE\">GDT_ENTRY_APMBIOS_BASE</a>+1]<span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0x009a, 0, 0xffff),", 
"<span class=\"ts\"/><span class=\"comment\">/* data */</span>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_APMBIOS_BASE\">GDT_ENTRY_APMBIOS_BASE</a>+2]<span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0x4092, 0, 0xffff),", 
"", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_ESPFIX_SS\">GDT_ENTRY_ESPFIX_SS</a>]<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xc092, 0, 0xfffff),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#GDT_ENTRY_PERCPU\">GDT_ENTRY_PERCPU</a>]<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#GDT_ENTRY_INIT\">GDT_ENTRY_INIT</a>(0xc092, 0, 0xfffff),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GDT_STACK_CANARY_INIT\">GDT_STACK_CANARY_INIT</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"} };", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL_GPL\">EXPORT_PER_CPU_SYMBOL_GPL</a>(<a class=\"id\" href=\"#gdt_page\">gdt_page</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#x86_xsave_setup\">x86_xsave_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_clear_cpu_cap\">setup_clear_cpu_cap</a>(<a class=\"id\" href=\"#X86_FEATURE_XSAVE\">X86_FEATURE_XSAVE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_clear_cpu_cap\">setup_clear_cpu_cap</a>(<a class=\"id\" href=\"#X86_FEATURE_XSAVEOPT\">X86_FEATURE_XSAVEOPT</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"noxsave\", <a class=\"id\" href=\"#x86_xsave_setup\">x86_xsave_setup</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#x86_xsaveopt_setup\">x86_xsaveopt_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_clear_cpu_cap\">setup_clear_cpu_cap</a>(<a class=\"id\" href=\"#X86_FEATURE_XSAVEOPT\">X86_FEATURE_XSAVEOPT</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"noxsaveopt\", <a class=\"id\" href=\"#x86_xsaveopt_setup\">x86_xsaveopt_setup</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"static int <a class=\"id\" href=\"#cachesize_override\">cachesize_override</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> = -1;", 
"static int <a class=\"id\" href=\"#disable_x86_serial_nr\">disable_x86_serial_nr</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> = 1;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cachesize_setup\">cachesize_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#cachesize_override\">cachesize_override</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"cachesize=\", <a class=\"id\" href=\"#cachesize_setup\">cachesize_setup</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#x86_fxsr_setup\">x86_fxsr_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_clear_cpu_cap\">setup_clear_cpu_cap</a>(<a class=\"id\" href=\"#X86_FEATURE_FXSR\">X86_FEATURE_FXSR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_clear_cpu_cap\">setup_clear_cpu_cap</a>(<a class=\"id\" href=\"#X86_FEATURE_XMM\">X86_FEATURE_XMM</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"nofxsr\", <a class=\"id\" href=\"#x86_fxsr_setup\">x86_fxsr_setup</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#x86_sep_setup\">x86_sep_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_clear_cpu_cap\">setup_clear_cpu_cap</a>(<a class=\"id\" href=\"#X86_FEATURE_SEP\">X86_FEATURE_SEP</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"nosep\", <a class=\"id\" href=\"#x86_sep_setup\">x86_sep_setup</a>);", 
"", 
"<span class=\"comment\">/* Standard macro to see if a specific flag is changeable */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#flag_is_changeable_p\">flag_is_changeable_p</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#f1\">f1</a>, <a class=\"id\" href=\"#f2\">f2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cyrix and IDT cpus allow disabling of CPUID</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so the code below may return different results</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when it is executed before and after enabling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the CPUID. Add \"volatile\" to not allow gcc to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * optimize the subsequent calls to this function.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (\"pushfl  \\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"pushfl  \\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"popl %0  \\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"movl %0, %1 \\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"xorl %2, %0 \\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"pushl %0  \\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"popfl  \\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"pushfl  \\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"popl %0  \\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"popfl  \\n\\t\"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>      : \"=&r\" (<a class=\"id\" href=\"#f1\">f1</a>), \"=&r\" (<a class=\"id\" href=\"#f2\">f2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>      : \"ir\" (<a class=\"id\" href=\"#flag\">flag</a>));", 
"", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#f1\">f1</a>^<a class=\"id\" href=\"#f2\">f2</a>) &amp; <a class=\"id\" href=\"#flag\">flag</a>) != 0;", 
"}", 
"", 
"<span class=\"comment\">/* Probe for the CPUID instruction */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#have_cpuid_p\">have_cpuid_p</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#flag_is_changeable_p\">flag_is_changeable_p</a>(<a class=\"id\" href=\"#X86_EFLAGS_ID\">X86_EFLAGS_ID</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#squash_the_stupid_serial_number\">squash_the_stupid_serial_number</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_PN\">X86_FEATURE_PN</a>) || !<a class=\"id\" href=\"#disable_x86_serial_nr\">disable_x86_serial_nr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable processor serial number: */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_IA32_BBL_CR_CTL\">MSR_IA32_BBL_CR_CTL</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lo\">lo</a> |= 0x200000;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_IA32_BBL_CR_CTL\">MSR_IA32_BBL_CR_CTL</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"CPU serial number disabled.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_PN\">X86_FEATURE_PN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disabling the serial number may affect the cpuid level */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> = <a class=\"id\" href=\"#cpuid_eax\">cpuid_eax</a>(0);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#x86_serial_nr_setup\">x86_serial_nr_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable_x86_serial_nr\">disable_x86_serial_nr</a> = 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"serialnumber\", <a class=\"id\" href=\"#x86_serial_nr_setup\">x86_serial_nr_setup</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#flag_is_changeable_p\">flag_is_changeable_p</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<span class=\"comment\">/* Probe for the CPUID instruction */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#have_cpuid_p\">have_cpuid_p</a>(void)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#squash_the_stupid_serial_number\">squash_the_stupid_serial_number</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some CPU features depend on higher CPUID levels, which may not always</span>", 
"<span class=\"comment\"> * be available due to CPUID level capping or broken virtualization</span>", 
"<span class=\"comment\"> * software.  Add those features to this table to auto-disable them.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cpuid_dependent_feature\">cpuid_dependent_feature</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#feature\">feature</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#level\">level</a>;", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#cpuid_dependent_feature\">cpuid_dependent_feature</a> <a class=\"id\" href=\"#__cpuinitconst\">__cpuinitconst</a>", 
"<a class=\"id\" href=\"#cpuid_dependent_features\">cpuid_dependent_features</a>[] = {", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#X86_FEATURE_MWAIT\">X86_FEATURE_MWAIT</a>,<span class=\"ts\"/><span class=\"ts\"/>0x00000005 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#X86_FEATURE_DCA\">X86_FEATURE_DCA</a>,<span class=\"ts\"/><span class=\"ts\"/>0x00000009 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#X86_FEATURE_XSAVE\">X86_FEATURE_XSAVE</a>,<span class=\"ts\"/><span class=\"ts\"/>0x0000000d },", 
"<span class=\"ts\"/>{ 0, 0 }", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#filter_cpuid_features\">filter_cpuid_features</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#warn\">warn</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpuid_dependent_feature\">cpuid_dependent_feature</a> *<a class=\"id\" href=\"#df\">df</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#df\">df</a> = <a class=\"id\" href=\"#cpuid_dependent_features\">cpuid_dependent_features</a>; <a class=\"id\" href=\"#df\">df</a>-><a class=\"id\" href=\"#feature\">feature</a>; <a class=\"id\" href=\"#df\">df</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#df\">df</a>-><a class=\"id\" href=\"#feature\">feature</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: cpuid_level is set to -1 if unavailable, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * extended_extended_level is set to 0 if unavailable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and the legitimate extended levels are all negative</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when signed; hence the weird messing around with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * signs here...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!((<a class=\"id\" href=\"#s32\">s32</a>)<a class=\"id\" href=\"#df\">df</a>-><a class=\"id\" href=\"#level\">level</a> &lt; 0 ?", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#df\">df</a>-><a class=\"id\" href=\"#level\">level</a> &gt; (<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#extended_cpuid_level\">extended_cpuid_level</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#s32\">s32</a>)<a class=\"id\" href=\"#df\">df</a>-><a class=\"id\" href=\"#level\">level</a> &gt; (<a class=\"id\" href=\"#s32\">s32</a>)<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#df\">df</a>-><a class=\"id\" href=\"#feature\">feature</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#warn\">warn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"CPU: CPU feature %s disabled, no CPUID level 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_cap_flags\">x86_cap_flags</a>[<a class=\"id\" href=\"#df\">df</a>-><a class=\"id\" href=\"#feature\">feature</a>], <a class=\"id\" href=\"#df\">df</a>-><a class=\"id\" href=\"#level\">level</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Naming convention should be: &lt;Name&gt; [(&lt;Codename&gt;)]</span>", 
"<span class=\"comment\"> * This table only is used unless init_&lt;vendor&gt;() below doesn't set it;</span>", 
"<span class=\"comment\"> * in particular, if CPUID levels 0x80000002..4 are supported, this</span>", 
"<span class=\"comment\"> * isn't used</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Look up CPU names by table lookup. */</span>", 
"static const char *<a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#table_lookup_model\">table_lookup_model</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpu_model_info\">cpu_model_info</a> *<a class=\"id\" href=\"#info\">info</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> >= 16)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"comment\">/* Range check */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#this_cpu\">this_cpu</a>-><a class=\"id\" href=\"#c_models\">c_models</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#info\">info</a> && <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#family\">family</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#family\">family</a> == <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#model_names\">model_names</a>[<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not found */</span>", 
"}", 
"", 
"<a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#cpu_caps_cleared\">cpu_caps_cleared</a>[<a class=\"id\" href=\"#NCAPINTS\">NCAPINTS</a>] <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a>;", 
"<a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#cpu_caps_set\">cpu_caps_set</a>[<a class=\"id\" href=\"#NCAPINTS\">NCAPINTS</a>] <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a>;", 
"", 
"void <a class=\"id\" href=\"#load_percpu_segment\">load_percpu_segment</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#fs\">fs</a>, <a class=\"id\" href=\"#__KERNEL_PERCPU\">__KERNEL_PERCPU</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#gs\">gs</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_GS_BASE\">MSR_GS_BASE</a>, (unsigned long)<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#irq_stack_union\">irq_stack_union</a>.<a class=\"id\" href=\"#gs_base\">gs_base</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_stack_canary_segment\">load_stack_canary_segment</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Current gdt points %fs at the \"master\" per-cpu area: after this,</span>", 
"<span class=\"comment\"> * it's on the real one.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#switch_to_new_gdt\">switch_to_new_gdt</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> <a class=\"id\" href=\"#gdt_descr\">gdt_descr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdt_descr\">gdt_descr</a>.<a class=\"id\" href=\"#address\">address</a> = (long)<a class=\"id\" href=\"#get_cpu_gdt_table\">get_cpu_gdt_table</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdt_descr\">gdt_descr</a>.<a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#GDT_SIZE\">GDT_SIZE</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_gdt\">load_gdt</a>(&amp;<a class=\"id\" href=\"#gdt_descr\">gdt_descr</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Reload the per-cpu base */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_percpu_segment\">load_percpu_segment</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#cpu_dev\">cpu_dev</a> *<a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#cpu_devs\">cpu_devs</a>[<a class=\"id\" href=\"#X86_VENDOR_NUM\">X86_VENDOR_NUM</a>] = {};", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#get_model_name\">get_model_name</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#extended_cpuid_level\">extended_cpuid_level</a> &lt; 0x80000004)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = (unsigned int *)<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(0x80000002, &amp;<a class=\"id\" href=\"#v\">v</a>[0], &amp;<a class=\"id\" href=\"#v\">v</a>[1], &amp;<a class=\"id\" href=\"#v\">v</a>[2], &amp;<a class=\"id\" href=\"#v\">v</a>[3]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(0x80000003, &amp;<a class=\"id\" href=\"#v\">v</a>[4], &amp;<a class=\"id\" href=\"#v\">v</a>[5], &amp;<a class=\"id\" href=\"#v\">v</a>[6], &amp;<a class=\"id\" href=\"#v\">v</a>[7]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(0x80000004, &amp;<a class=\"id\" href=\"#v\">v</a>[8], &amp;<a class=\"id\" href=\"#v\">v</a>[9], &amp;<a class=\"id\" href=\"#v\">v</a>[10], &amp;<a class=\"id\" href=\"#v\">v</a>[11]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>[48] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Intel chips right-justify this string for some dumb reason;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * undo that brain damage:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#q\">q</a> = &amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>[0];", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a> == ' ')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#q\">q</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#q\">q</a>++ = *<a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#q\">q</a> <= &amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>[48])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#q\">q</a>++ = '\\0';<span class=\"ts\"/><span class=\"comment\">/* Zero-pad the rest */</span>", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#cpu_detect_cache_sizes\">cpu_detect_cache_sizes</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#dummy\">dummy</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>, <a class=\"id\" href=\"#l2size\">l2size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#extended_cpuid_level\">extended_cpuid_level</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> >= 0x80000005) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(0x80000005, &amp;<a class=\"id\" href=\"#dummy\">dummy</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_cache_size\">x86_cache_size</a> = (<a class=\"id\" href=\"#ecx\">ecx</a>>>24) + (<a class=\"id\" href=\"#edx\">edx</a>>>24);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* On K8 L1 TLB is inclusive, so don't count it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_tlbsize\">x86_tlbsize</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; 0x80000006)<span class=\"ts\"/><span class=\"comment\">/* Some chips just has a large L1. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(0x80000006, &amp;<a class=\"id\" href=\"#dummy\">dummy</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l2size\">l2size</a> = <a class=\"id\" href=\"#ecx\">ecx</a> >> 16;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_tlbsize\">x86_tlbsize</a> += ((<a class=\"id\" href=\"#ebx\">ebx</a> >> 16) &amp; 0xfff) + (<a class=\"id\" href=\"#ebx\">ebx</a> &amp; 0xfff);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/* do processor-specific cache resizing */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_cpu\">this_cpu</a>-><a class=\"id\" href=\"#c_size_cache\">c_size_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l2size\">l2size</a> = <a class=\"id\" href=\"#this_cpu\">this_cpu</a>-><a class=\"id\" href=\"#c_size_cache\">c_size_cache</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#l2size\">l2size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow user to override all this if necessary. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachesize_override\">cachesize_override</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l2size\">l2size</a> = <a class=\"id\" href=\"#cachesize_override\">cachesize_override</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#l2size\">l2size</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Again, no L2 cache is possible */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_cache_size\">x86_cache_size</a> = <a class=\"id\" href=\"#l2size\">l2size</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#detect_ht\">detect_ht</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_HT\">CONFIG_X86_HT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index_msb\">index_msb</a>, <a class=\"id\" href=\"#core_bits\">core_bits</a>;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#printed\">printed</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_HT\">X86_FEATURE_HT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_CMP_LEGACY\">X86_FEATURE_CMP_LEGACY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_XTOPOLOGY\">X86_FEATURE_XTOPOLOGY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(1, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> = (<a class=\"id\" href=\"#ebx\">ebx</a> &amp; 0xff0000) >> 16;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"CPU0: Hyper-Threading is disabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> &gt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"CPU: Unsupported number of siblings %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index_msb\">index_msb</a> = <a class=\"id\" href=\"#get_count_order\">get_count_order</a>(<a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#phys_pkg_id\">phys_pkg_id</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a>, <a class=\"id\" href=\"#index_msb\">index_msb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> = <a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> / <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index_msb\">index_msb</a> = <a class=\"id\" href=\"#get_count_order\">get_count_order</a>(<a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#core_bits\">core_bits</a> = <a class=\"id\" href=\"#get_count_order\">get_count_order</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_core_id\">cpu_core_id</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#phys_pkg_id\">phys_pkg_id</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a>, <a class=\"id\" href=\"#index_msb\">index_msb</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       ((1 << <a class=\"id\" href=\"#core_bits\">core_bits</a>) - 1);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#printed\">printed</a> && (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> * <a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a>) &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>  \"CPU: Physical Processor ID: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>  \"CPU: Processor Core ID: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_core_id\">cpu_core_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printed\">printed</a> = 1;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#get_cpu_vendor\">get_cpu_vendor</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor_id\">x86_vendor_id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#X86_VENDOR_NUM\">X86_VENDOR_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_devs\">cpu_devs</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#cpu_devs\">cpu_devs</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#c_ident\">c_ident</a>[0]) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#cpu_devs\">cpu_devs</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#c_ident\">c_ident</a>[1] &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     !<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#cpu_devs\">cpu_devs</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#c_ident\">c_ident</a>[1]))) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#cpu_devs\">cpu_devs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> = <a class=\"id\" href=\"#this_cpu\">this_cpu</a>-><a class=\"id\" href=\"#c_x86_vendor\">c_x86_vendor</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"CPU: vendor_id '%s' unknown, using generic init.\\n\" \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"CPU: Your system may be unstable.\\n\", <a class=\"id\" href=\"#v\">v</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> = <a class=\"id\" href=\"#X86_VENDOR_UNKNOWN\">X86_VENDOR_UNKNOWN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a> = &amp;<a class=\"id\" href=\"#default_cpu\">default_cpu</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#cpu_detect\">cpu_detect</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Get vendor name */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(0x00000000, (unsigned int *)&amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a>,", 
"<span class=\"ts\"/>      (unsigned int *)&amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor_id\">x86_vendor_id</a>[0],", 
"<span class=\"ts\"/>      (unsigned int *)&amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor_id\">x86_vendor_id</a>[8],", 
"<span class=\"ts\"/>      (unsigned int *)&amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor_id\">x86_vendor_id</a>[4]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> = 4;", 
"<span class=\"ts\"/><span class=\"comment\">/* Intel-defined flags: level 0x00000001 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> >= 0x00000001) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#junk\">junk</a>, <a class=\"id\" href=\"#tfms\">tfms</a>, <a class=\"id\" href=\"#cap0\">cap0</a>, <a class=\"id\" href=\"#misc\">misc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(0x00000001, &amp;<a class=\"id\" href=\"#tfms\">tfms</a>, &amp;<a class=\"id\" href=\"#misc\">misc</a>, &amp;<a class=\"id\" href=\"#junk\">junk</a>, &amp;<a class=\"id\" href=\"#cap0\">cap0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> = (<a class=\"id\" href=\"#tfms\">tfms</a> >> 8) &amp; 0xf;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> = (<a class=\"id\" href=\"#tfms\">tfms</a> >> 4) &amp; 0xf;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> = <a class=\"id\" href=\"#tfms\">tfms</a> &amp; 0xf;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 0xf)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> += (<a class=\"id\" href=\"#tfms\">tfms</a> >> 20) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> >= 0x6)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> += ((<a class=\"id\" href=\"#tfms\">tfms</a> >> 16) &amp; 0xf) << 4;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cap0\">cap0</a> &amp; (1<<19)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_clflush_size\">x86_clflush_size</a> = ((<a class=\"id\" href=\"#misc\">misc</a> >> 8) &amp; 0xff) * 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_cache_alignment\">x86_cache_alignment</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_clflush_size\">x86_clflush_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#get_cpu_cap\">get_cpu_cap</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tfms\">tfms</a>, <a class=\"id\" href=\"#xlvl\">xlvl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ebx\">ebx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Intel-defined flags: level 0x00000001 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> >= 0x00000001) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#capability\">capability</a>, <a class=\"id\" href=\"#excap\">excap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(0x00000001, &amp;<a class=\"id\" href=\"#tfms\">tfms</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#excap\">excap</a>, &amp;<a class=\"id\" href=\"#capability\">capability</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>[0] = <a class=\"id\" href=\"#capability\">capability</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>[4] = <a class=\"id\" href=\"#excap\">excap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Additional Intel-defined flags: level 0x00000007 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> >= 0x00000007) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuid_count\">cpuid_count</a>(0x00000007, 0, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#eax\">eax</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>[9] = <a class=\"id\" href=\"#ebx\">ebx</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* AMD-defined flags: level 0x80000001 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xlvl\">xlvl</a> = <a class=\"id\" href=\"#cpuid_eax\">cpuid_eax</a>(0x80000000);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#extended_cpuid_level\">extended_cpuid_level</a> = <a class=\"id\" href=\"#xlvl\">xlvl</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#xlvl\">xlvl</a> &amp; 0xffff0000) == 0x80000000) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#xlvl\">xlvl</a> >= 0x80000001) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>[1] = <a class=\"id\" href=\"#cpuid_edx\">cpuid_edx</a>(0x80000001);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>[6] = <a class=\"id\" href=\"#cpuid_ecx\">cpuid_ecx</a>(0x80000001);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#extended_cpuid_level\">extended_cpuid_level</a> >= 0x80000008) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#eax\">eax</a> = <a class=\"id\" href=\"#cpuid_eax\">cpuid_eax</a>(0x80000008);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_virt_bits\">x86_virt_bits</a> = (<a class=\"id\" href=\"#eax\">eax</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_phys_bits\">x86_phys_bits</a> = <a class=\"id\" href=\"#eax\">eax</a> &amp; 0xff;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_PAE\">X86_FEATURE_PAE</a>) || <a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_PSE36\">X86_FEATURE_PSE36</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_phys_bits\">x86_phys_bits</a> = 36;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#extended_cpuid_level\">extended_cpuid_level</a> >= 0x80000007)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_power\">x86_power</a> = <a class=\"id\" href=\"#cpuid_edx\">cpuid_edx</a>(0x80000007);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_scattered_cpuid_features\">init_scattered_cpuid_features</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#identify_cpu_without_cpuid\">identify_cpu_without_cpuid</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First of all, decide if this is a 486 or higher</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's a 486 if we can modify the AC flag</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flag_is_changeable_p\">flag_is_changeable_p</a>(<a class=\"id\" href=\"#X86_EFLAGS_AC\">X86_EFLAGS_AC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> = 4;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> = 3;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#X86_VENDOR_NUM\">X86_VENDOR_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_devs\">cpu_devs</a>[<a class=\"id\" href=\"#i\">i</a>] && <a class=\"id\" href=\"#cpu_devs\">cpu_devs</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#c_identify\">c_identify</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor_id\">x86_vendor_id</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_devs\">cpu_devs</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#c_identify\">c_identify</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor_id\">x86_vendor_id</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_cpu_vendor\">get_cpu_vendor</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do minimum CPU detection early.</span>", 
"<span class=\"comment\"> * Fields really needed: vendor, cpuid_level, family, model, mask,</span>", 
"<span class=\"comment\"> * cache alignment.</span>", 
"<span class=\"comment\"> * The others are not touched to avoid unwanted side effects.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * WARNING: this function is only called on the BP.  Don't add code here</span>", 
"<span class=\"comment\"> * that is supposed to run on all CPUs.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_identify_cpu\">early_identify_cpu</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_clflush_size\">x86_clflush_size</a> = 64;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_phys_bits\">x86_phys_bits</a> = 36;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_virt_bits\">x86_virt_bits</a> = 48;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_clflush_size\">x86_clflush_size</a> = 32;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_phys_bits\">x86_phys_bits</a> = 32;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_virt_bits\">x86_virt_bits</a> = 32;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_cache_alignment\">x86_cache_alignment</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_clflush_size\">x86_clflush_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>, 0, sizeof <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#extended_cpuid_level\">extended_cpuid_level</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#have_cpuid_p\">have_cpuid_p</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#identify_cpu_without_cpuid\">identify_cpu_without_cpuid</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cyrix could have cpuid enabled via c_identify()*/</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#have_cpuid_p\">have_cpuid_p</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_detect\">cpu_detect</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_cpu_vendor\">get_cpu_vendor</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_cpu_cap\">get_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_cpu\">this_cpu</a>-><a class=\"id\" href=\"#c_early_init\">c_early_init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a>-><a class=\"id\" href=\"#c_early_init\">c_early_init</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_index\">cpu_index</a> = <a class=\"id\" href=\"#boot_cpu_id\">boot_cpu_id</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filter_cpuid_features\">filter_cpuid_features</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_cpu_init\">early_cpu_init</a>(void)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpu_dev\">cpu_dev</a> *const *<a class=\"id\" href=\"#cdev\">cdev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#PROCESSOR_SELECT\">PROCESSOR_SELECT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"KERNEL supported cpus:\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cdev\">cdev</a> = <a class=\"id\" href=\"#__x86_cpu_dev_start\">__x86_cpu_dev_start</a>; <a class=\"id\" href=\"#cdev\">cdev</a> &lt; <a class=\"id\" href=\"#__x86_cpu_dev_end\">__x86_cpu_dev_end</a>; <a class=\"id\" href=\"#cdev\">cdev</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpu_dev\">cpu_dev</a> *<a class=\"id\" href=\"#cpudev\">cpudev</a> = *<a class=\"id\" href=\"#cdev\">cdev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> >= <a class=\"id\" href=\"#X86_VENDOR_NUM\">X86_VENDOR_NUM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_devs\">cpu_devs</a>[<a class=\"id\" href=\"#count\">count</a>] = <a class=\"id\" href=\"#cpudev\">cpudev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#PROCESSOR_SELECT\">PROCESSOR_SELECT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 2; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpudev\">cpudev</a>-><a class=\"id\" href=\"#c_ident\">c_ident</a>[<a class=\"id\" href=\"#j\">j</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"  %s %s\\n\", <a class=\"id\" href=\"#cpudev\">cpudev</a>-><a class=\"id\" href=\"#c_vendor\">c_vendor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpudev\">cpudev</a>-><a class=\"id\" href=\"#c_ident\">c_ident</a>[<a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_identify_cpu\">early_identify_cpu</a>(&amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The NOPL instruction is supposed to exist on all CPUs with</span>", 
"<span class=\"comment\"> * family &gt;= 6; unfortunately, that's not true in practice because</span>", 
"<span class=\"comment\"> * of early VIA chips and (more importantly) broken virtualizers that</span>", 
"<span class=\"comment\"> * are not easy to detect.  In the latter case it doesn't even *fail*</span>", 
"<span class=\"comment\"> * reliably, so probing for it doesn't even work.  Disable it completely</span>", 
"<span class=\"comment\"> * unless we can find a reliable way to detect all the broken cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#detect_nopl\">detect_nopl</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_NOPL\">X86_FEATURE_NOPL</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#generic_identify\">generic_identify</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#extended_cpuid_level\">extended_cpuid_level</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#have_cpuid_p\">have_cpuid_p</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#identify_cpu_without_cpuid\">identify_cpu_without_cpuid</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cyrix could have cpuid enabled via c_identify()*/</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#have_cpuid_p\">have_cpuid_p</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_detect\">cpu_detect</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_cpu_vendor\">get_cpu_vendor</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_cpu_cap\">get_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> >= 0x00000001) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a> = (<a class=\"id\" href=\"#cpuid_ebx\">cpuid_ebx</a>(1) >> 24) &amp; 0xFF;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_HT\">CONFIG_X86_HT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#phys_pkg_id\">phys_pkg_id</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a>, 0);", 
"# else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a>;", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_HT\">CONFIG_X86_HT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_model_name\">get_model_name</a>(<a class=\"id\" href=\"#c\">c</a>); <span class=\"comment\">/* Default name */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#detect_nopl\">detect_nopl</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This does the hard work of actually picking apart the CPU stuff...</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#identify_cpu\">identify_cpu</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> = <a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_cache_size\">x86_cache_size</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> = <a class=\"id\" href=\"#X86_VENDOR_UNKNOWN\">X86_VENDOR_UNKNOWN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* So far unknown... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor_id\">x86_vendor_id</a>[0] = '\\0'; <span class=\"comment\">/* Unset */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>[0] = '\\0';  <span class=\"comment\">/* Unset */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_coreid_bits\">x86_coreid_bits</a> = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_clflush_size\">x86_clflush_size</a> = 64;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_phys_bits\">x86_phys_bits</a> = 36;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_virt_bits\">x86_virt_bits</a> = 48;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> = -1;<span class=\"ts\"/><span class=\"comment\">/* CPUID not detected */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_clflush_size\">x86_clflush_size</a> = 32;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_phys_bits\">x86_phys_bits</a> = 32;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_virt_bits\">x86_virt_bits</a> = 32;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_cache_alignment\">x86_cache_alignment</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_clflush_size\">x86_clflush_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>, 0, sizeof <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#generic_identify\">generic_identify</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_cpu\">this_cpu</a>-><a class=\"id\" href=\"#c_identify\">c_identify</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a>-><a class=\"id\" href=\"#c_identify\">c_identify</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear/Set all flags overriden by options, after probe */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NCAPINTS\">NCAPINTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>[<a class=\"id\" href=\"#i\">i</a>] &= ~<a class=\"id\" href=\"#cpu_caps_cleared\">cpu_caps_cleared</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>[<a class=\"id\" href=\"#i\">i</a>] |= <a class=\"id\" href=\"#cpu_caps_set\">cpu_caps_set</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#phys_pkg_id\">phys_pkg_id</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a>, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Vendor-specific initialization.  In this section we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * canonicalize the feature flags, meaning if there are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * features a certain CPU supports which CPUID doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tell us, CPUID claiming incorrect flags, or other bugs,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we handle them here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At the end of this section, c-&gt;x86_capability better</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * indicate the features this CPU genuinely supports!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_cpu\">this_cpu</a>-><a class=\"id\" href=\"#c_init\">c_init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a>-><a class=\"id\" href=\"#c_init\">c_init</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable the PN if appropriate */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#squash_the_stupid_serial_number\">squash_the_stupid_serial_number</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The vendor-specific functions might have changed features.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now we do \"generic changes.\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Filter out anything that depends on CPUID levels we don't have */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filter_cpuid_features\">filter_cpuid_features</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the model name is still unset, do table lookup. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#table_lookup_model\">table_lookup_model</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Last resort... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>, \"%02x/%02x\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a>, <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a>);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#detect_ht\">detect_ht</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_hypervisor\">init_hypervisor</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear/Set all flags overriden by options, need do it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before following smp all cpus cap AND.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NCAPINTS\">NCAPINTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>[<a class=\"id\" href=\"#i\">i</a>] &= ~<a class=\"id\" href=\"#cpu_caps_cleared\">cpu_caps_cleared</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>[<a class=\"id\" href=\"#i\">i</a>] |= <a class=\"id\" href=\"#cpu_caps_set\">cpu_caps_set</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On SMP, boot_cpu_data holds the common feature set between</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all CPUs; so make sure that we indicate which features are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * common between the CPUs.  The first time this routine gets</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * executed, c == &amp;boot_cpu_data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> != &amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* AND the already accumulated flags with these */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NCAPINTS\">NCAPINTS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_capability\">x86_capability</a>[<a class=\"id\" href=\"#i\">i</a>] &= <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_capability\">x86_capability</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Init Machine Check Exception if available. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mcheck_cpu_init\">mcheck_cpu_init</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#select_idle_routine\">select_idle_routine</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_add_cpu\">numa_add_cpu</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"static void <a class=\"id\" href=\"#vgetcpu_set_mode\">vgetcpu_set_mode</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(&amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>, <a class=\"id\" href=\"#X86_FEATURE_RDTSCP\">X86_FEATURE_RDTSCP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgetcpu_mode\">vgetcpu_mode</a> = <a class=\"id\" href=\"#VGETCPU_RDTSCP\">VGETCPU_RDTSCP</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vgetcpu_mode\">vgetcpu_mode</a> = <a class=\"id\" href=\"#VGETCPU_LSL\">VGETCPU_LSL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#identify_boot_cpu\">identify_boot_cpu</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#identify_cpu\">identify_cpu</a>(&amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_c1e_mask\">init_c1e_mask</a>();", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysenter_setup\">sysenter_setup</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_sep_cpu\">enable_sep_cpu</a>();", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vgetcpu_set_mode\">vgetcpu_set_mode</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_hw_perf_events\">init_hw_perf_events</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#identify_secondary_cpu\">identify_secondary_cpu</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#c\">c</a> == &amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#identify_cpu\">identify_cpu</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_sep_cpu\">enable_sep_cpu</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_ap_init\">mtrr_ap_init</a>();", 
"}", 
"", 
"struct <a class=\"id\" href=\"#msr_range\">msr_range</a> {", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a>;", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#msr_range\">msr_range</a> <a class=\"id\" href=\"#msr_range_array\">msr_range_array</a>[] <a class=\"id\" href=\"#__cpuinitconst\">__cpuinitconst</a> = {", 
"<span class=\"ts\"/>{ 0x00000000, 0x00000418},", 
"<span class=\"ts\"/>{ 0xc0000000, 0xc000040b},", 
"<span class=\"ts\"/>{ 0xc0010000, 0xc0010142},", 
"<span class=\"ts\"/>{ 0xc0011000, 0xc001103b},", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#print_cpu_msr\">print_cpu_msr</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#index_min\">index_min</a>, <a class=\"id\" href=\"#index_max\">index_max</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#msr_range_array\">msr_range_array</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index_min\">index_min</a> = <a class=\"id\" href=\"#msr_range_array\">msr_range_array</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#min\">min</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index_max\">index_max</a> = <a class=\"id\" href=\"#msr_range_array\">msr_range_array</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#index_min\">index_min</a>; <a class=\"id\" href=\"#index\">index</a> &lt; <a class=\"id\" href=\"#index_max\">index_max</a>; <a class=\"id\" href=\"#index\">index</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rdmsrl_amd_safe\">rdmsrl_amd_safe</a>(<a class=\"id\" href=\"#index\">index</a>, &amp;<a class=\"id\" href=\"#val\">val</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \" MSR%08x: %016llx\\n\", <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#show_msr\">show_msr</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a>;", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#setup_show_msr\">setup_show_msr</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#num\">num</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_msr\">show_msr</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"show_msr=\", <a class=\"id\" href=\"#setup_show_msr\">setup_show_msr</a>);", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#setup_noclflush\">setup_noclflush</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_clear_cpu_cap\">setup_clear_cpu_cap</a>(<a class=\"id\" href=\"#X86_FEATURE_CLFLSH\">X86_FEATURE_CLFLSH</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"noclflush\", <a class=\"id\" href=\"#setup_noclflush\">setup_noclflush</a>);", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#print_cpu_info\">print_cpu_info</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> &lt; <a class=\"id\" href=\"#X86_VENDOR_NUM\">X86_VENDOR_NUM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#this_cpu\">this_cpu</a>-><a class=\"id\" href=\"#c_vendor\">c_vendor</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor_id\">x86_vendor_id</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vendor\">vendor</a> && !<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>, <a class=\"id\" href=\"#vendor\">vendor</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"%s \", <a class=\"id\" href=\"#vendor\">vendor</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"%s\", <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"%d86\", <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> || <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" stepping %02x\\n\", <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_index\">cpu_index</a> &lt; <a class=\"id\" href=\"#show_msr\">show_msr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_cpu_msr\">print_cpu_msr</a>();", 
"#else", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#show_msr\">show_msr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_cpu_msr\">print_cpu_msr</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#setup_disablecpuid\">setup_disablecpuid</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bit\">bit</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#bit\">bit</a>) && <a class=\"id\" href=\"#bit\">bit</a> &lt; <a class=\"id\" href=\"#NCAPINTS\">NCAPINTS</a>*32)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_clear_cpu_cap\">setup_clear_cpu_cap</a>(<a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"clearcpuid=\", <a class=\"id\" href=\"#setup_disablecpuid\">setup_disablecpuid</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> <a class=\"id\" href=\"#idt_descr\">idt_descr</a> = { <a class=\"id\" href=\"#NR_VECTORS\">NR_VECTORS</a> * 16 - 1, (unsigned long) <a class=\"id\" href=\"#idt_table\">idt_table</a> };", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU_FIRST\">DEFINE_PER_CPU_FIRST</a>(union <a class=\"id\" href=\"#irq_stack_union\">irq_stack_union</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#irq_stack_union\">irq_stack_union</a>) <a class=\"id\" href=\"#__aligned\">__aligned</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following four percpu variables are hot.  Align current_task to</span>", 
"<span class=\"comment\"> * cacheline size such that all four fall in the same cacheline.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, <a class=\"id\" href=\"#current_task\">current_task</a>) <a class=\"id\" href=\"#____cacheline_aligned\">____cacheline_aligned</a> =", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#init_task\">init_task</a>;", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#current_task\">current_task</a>);", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#kernel_stack\">kernel_stack</a>) =", 
"<span class=\"ts\"/>(unsigned long)&amp;<a class=\"id\" href=\"#init_thread_union\">init_thread_union</a> - <a class=\"id\" href=\"#KERNEL_STACK_OFFSET\">KERNEL_STACK_OFFSET</a> + <a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>;", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#kernel_stack\">kernel_stack</a>);", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(char *, <a class=\"id\" href=\"#irq_stack_ptr\">irq_stack_ptr</a>) =", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_per_cpu_var\">init_per_cpu_var</a>(<a class=\"id\" href=\"#irq_stack_union\">irq_stack_union</a>.<a class=\"id\" href=\"#irq_stack\">irq_stack</a>) + <a class=\"id\" href=\"#IRQ_STACK_SIZE\">IRQ_STACK_SIZE</a> - 64;", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned int, <a class=\"id\" href=\"#irq_count\">irq_count</a>) = -1;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special IST stacks which the CPU switches to when it calls</span>", 
"<span class=\"comment\"> * an IST-marked descriptor entry. Up to 7 stacks (hardware</span>", 
"<span class=\"comment\"> * limit), all of them are 4K, except the debug stack which</span>", 
"<span class=\"comment\"> * is 8K.</span>", 
"<span class=\"comment\"> */</span>", 
"static const unsigned int <a class=\"id\" href=\"#exception_stack_sizes\">exception_stack_sizes</a>[<a class=\"id\" href=\"#N_EXCEPTION_STACKS\">N_EXCEPTION_STACKS</a>] = {", 
"<span class=\"ts\"/>  [0 ... <a class=\"id\" href=\"#N_EXCEPTION_STACKS\">N_EXCEPTION_STACKS</a> - 1]<span class=\"ts\"/>= <a class=\"id\" href=\"#EXCEPTION_STKSZ\">EXCEPTION_STKSZ</a>,", 
"<span class=\"ts\"/>  [<a class=\"id\" href=\"#DEBUG_STACK\">DEBUG_STACK</a> - 1]<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#DEBUG_STKSZ\">DEBUG_STKSZ</a>", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU_PAGE_ALIGNED\">DEFINE_PER_CPU_PAGE_ALIGNED</a>(char, <a class=\"id\" href=\"#exception_stacks\">exception_stacks</a>", 
"<span class=\"ts\"/>[(<a class=\"id\" href=\"#N_EXCEPTION_STACKS\">N_EXCEPTION_STACKS</a> - 1) * <a class=\"id\" href=\"#EXCEPTION_STKSZ\">EXCEPTION_STKSZ</a> + <a class=\"id\" href=\"#DEBUG_STKSZ\">DEBUG_STKSZ</a>]);", 
"", 
"<span class=\"comment\">/* May not be marked __init: used by software suspend */</span>", 
"void <a class=\"id\" href=\"#syscall_init\">syscall_init</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * LSTAR and STAR live in a bit strange symbiosis.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * They both write to the same internal register. STAR allows to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set CS/DS but only a 32bit target. LSTAR sets the 64bit rip.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_STAR\">MSR_STAR</a>,  ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#__USER32_CS\">__USER32_CS</a>)<<48  | ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>)<<32);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_LSTAR\">MSR_LSTAR</a>, <a class=\"id\" href=\"#system_call\">system_call</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_CSTAR\">MSR_CSTAR</a>, <a class=\"id\" href=\"#ignore_sysret\">ignore_sysret</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#syscall32_cpu_init\">syscall32_cpu_init</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flags to clear on syscall */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_SYSCALL_MASK\">MSR_SYSCALL_MASK</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>|<a class=\"id\" href=\"#X86_EFLAGS_DF\">X86_EFLAGS_DF</a>|<a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>|<a class=\"id\" href=\"#X86_EFLAGS_IOPL\">X86_EFLAGS_IOPL</a>);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#kernel_eflags\">kernel_eflags</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copies of the original ist values from the tss are only accessed during</span>", 
"<span class=\"comment\"> * debugging, no special alignment required.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#orig_ist\">orig_ist</a>, <a class=\"id\" href=\"#orig_ist\">orig_ist</a>);", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, <a class=\"id\" href=\"#current_task\">current_task</a>) = &amp;<a class=\"id\" href=\"#init_task\">init_task</a>;", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#current_task\">current_task</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CC_STACKPROTECTOR\">CONFIG_CC_STACKPROTECTOR</a>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU_ALIGNED\">DEFINE_PER_CPU_ALIGNED</a>(struct <a class=\"id\" href=\"#stack_canary\">stack_canary</a>, <a class=\"id\" href=\"#stack_canary\">stack_canary</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Make sure %fs and %gs are initialized properly in idle threads */</span>", 
"struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> * <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#idle_regs\">idle_regs</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#regs\">regs</a>, 0, sizeof(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#fs\">fs</a> = <a class=\"id\" href=\"#__KERNEL_PERCPU\">__KERNEL_PERCPU</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#gs\">gs</a> = <a class=\"id\" href=\"#__KERNEL_STACK_CANARY\">__KERNEL_STACK_CANARY</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#regs\">regs</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clear all 6 debug registers:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#clear_all_debug_regs\">clear_all_debug_regs</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 8; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ignore db4, db5 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a> == 4) || (<a class=\"id\" href=\"#i\">i</a> == 5))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(0, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB\">CONFIG_KGDB</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Restore debug regs if using kgdbwait and you have a kernel debugger</span>", 
"<span class=\"comment\"> * connection established.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dbg_restore_debug_regs\">dbg_restore_debug_regs</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a> && <a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>.<a class=\"id\" href=\"#correct_hw_break\">correct_hw_break</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>.<a class=\"id\" href=\"#correct_hw_break\">correct_hw_break</a>();", 
"}", 
"#else <span class=\"comment\">/* ! CONFIG_KGDB */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dbg_restore_debug_regs\">dbg_restore_debug_regs</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* ! CONFIG_KGDB */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cpu_init() initializes state that is per-CPU. Some data is already</span>", 
"<span class=\"comment\"> * initialized (naturally) in the bootstrap process, such as the GDT</span>", 
"<span class=\"comment\"> * and IDT. We reload them nevertheless, this function acts as a</span>", 
"<span class=\"comment\"> * 'CPU state barrier', nothing should get across.</span>", 
"<span class=\"comment\"> * A lot of state is already set up in PDA init for 64 bit</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#cpu_init\">cpu_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#orig_ist\">orig_ist</a> *<a class=\"id\" href=\"#oist\">oist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#me\">me</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#stack_smp_processor_id\">stack_smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#init_tss\">init_tss</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oist\">oist</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#orig_ist\">orig_ist</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> != 0 && <a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#numa_node\">numa_node</a>) == 0 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) != <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_numa_node\">set_numa_node</a>(<a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#me\">me</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_and_set_cpu\">cpumask_test_and_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_initialized_mask\">cpu_initialized_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"CPU#%d already initialized!\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Initializing CPU#%d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_in_cr4\">clear_in_cr4</a>(<a class=\"id\" href=\"#X86_CR4_VME\">X86_CR4_VME</a>|<a class=\"id\" href=\"#X86_CR4_PVI\">X86_CR4_PVI</a>|<a class=\"id\" href=\"#X86_CR4_TSD\">X86_CR4_TSD</a>|<a class=\"id\" href=\"#X86_CR4_DE\">X86_CR4_DE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize the per-CPU GDT with the boot GDT,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and set up the GDT descriptor:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#switch_to_new_gdt\">switch_to_new_gdt</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#fs\">fs</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_idt\">load_idt</a>((const struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *)&amp;<a class=\"id\" href=\"#idt_descr\">idt_descr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#tls_array\">tls_array</a>, 0, <a class=\"id\" href=\"#GDT_ENTRY_TLS_ENTRIES\">GDT_ENTRY_TLS_ENTRIES</a> * 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#syscall_init\">syscall_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_FS_BASE\">MSR_FS_BASE</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_KERNEL_GS_BASE\">MSR_KERNEL_GS_BASE</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_configure_nx\">x86_configure_nx</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_x2apic\">enable_x2apic</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set up and load the per-CPU TSS</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#oist\">oist</a>-><a class=\"id\" href=\"#ist\">ist</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#estacks\">estacks</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#exception_stacks\">exception_stacks</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#v\">v</a> = 0; <a class=\"id\" href=\"#v\">v</a> &lt; <a class=\"id\" href=\"#N_EXCEPTION_STACKS\">N_EXCEPTION_STACKS</a>; <a class=\"id\" href=\"#v\">v</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#estacks\">estacks</a> += <a class=\"id\" href=\"#exception_stack_sizes\">exception_stack_sizes</a>[<a class=\"id\" href=\"#v\">v</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oist\">oist</a>-><a class=\"id\" href=\"#ist\">ist</a>[<a class=\"id\" href=\"#v\">v</a>] = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#x86_tss\">x86_tss</a>.<a class=\"id\" href=\"#ist\">ist</a>[<a class=\"id\" href=\"#v\">v</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#estacks\">estacks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#x86_tss\">x86_tss</a>.<a class=\"id\" href=\"#io_bitmap_base\">io_bitmap_base</a> = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a>, <a class=\"id\" href=\"#io_bitmap\">io_bitmap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * &lt;= is required because the CPU will access up to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 8 bits beyond the end of the IO permission bitmap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#IO_BITMAP_LONGS\">IO_BITMAP_LONGS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap\">io_bitmap</a>[<a class=\"id\" href=\"#i\">i</a>] = ~0UL;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#mm_count\">mm_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> = &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enter_lazy_tlb\">enter_lazy_tlb</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#me\">me</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_sp0\">load_sp0</a>(<a class=\"id\" href=\"#t\">t</a>, &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tss_desc\">set_tss_desc</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_TR_desc\">load_TR_desc</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_LDT\">load_LDT</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#context\">context</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_all_debug_regs\">clear_all_debug_regs</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_restore_debug_regs\">dbg_restore_debug_regs</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fpu_init\">fpu_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xsave_init\">xsave_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_local_save_flags\">raw_local_save_flags</a>(<a class=\"id\" href=\"#kernel_eflags\">kernel_eflags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_uv_system\">is_uv_system</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uv_cpu_init\">uv_cpu_init</a>();", 
"}", 
"", 
"#else", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#cpu_init\">cpu_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a> *<a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#init_tss\">init_tss</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#thread\">thread</a> = &amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_and_set_cpu\">cpumask_test_and_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_initialized_mask\">cpu_initialized_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"CPU#%d already initialized!\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Initializing CPU#%d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_vme\">cpu_has_vme</a> || <a class=\"id\" href=\"#cpu_has_tsc\">cpu_has_tsc</a> || <a class=\"id\" href=\"#cpu_has_de\">cpu_has_de</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_in_cr4\">clear_in_cr4</a>(<a class=\"id\" href=\"#X86_CR4_VME\">X86_CR4_VME</a>|<a class=\"id\" href=\"#X86_CR4_PVI\">X86_CR4_PVI</a>|<a class=\"id\" href=\"#X86_CR4_TSD\">X86_CR4_TSD</a>|<a class=\"id\" href=\"#X86_CR4_DE\">X86_CR4_DE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_idt\">load_idt</a>(&amp;<a class=\"id\" href=\"#idt_descr\">idt_descr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#switch_to_new_gdt\">switch_to_new_gdt</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set up and load the per-CPU TSS and LDT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#mm_count\">mm_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> = &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enter_lazy_tlb\">enter_lazy_tlb</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#curr\">curr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_sp0\">load_sp0</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tss_desc\">set_tss_desc</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_TR_desc\">load_TR_desc</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_LDT\">load_LDT</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#context\">context</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#x86_tss\">x86_tss</a>.<a class=\"id\" href=\"#io_bitmap_base\">io_bitmap_base</a> = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a>, <a class=\"id\" href=\"#io_bitmap\">io_bitmap</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DOUBLEFAULT\">CONFIG_DOUBLEFAULT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up doublefault TSS pointer in the GDT */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_tss_desc\">__set_tss_desc</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#GDT_ENTRY_DOUBLEFAULT_TSS\">GDT_ENTRY_DOUBLEFAULT_TSS</a>, &amp;<a class=\"id\" href=\"#doublefault_tss\">doublefault_tss</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_all_debug_regs\">clear_all_debug_regs</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_restore_debug_regs\">dbg_restore_debug_regs</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Force FPU initialization:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_used_math\">clear_used_math</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mxcsr_feature_mask_init\">mxcsr_feature_mask_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fpu_init\">fpu_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xsave_init\">xsave_init</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/58/5b9741ea8414e37684085e56c58ceae7c99641.xr', __xr_tmp);
