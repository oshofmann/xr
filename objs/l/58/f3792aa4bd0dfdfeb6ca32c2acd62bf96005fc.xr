var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\\\t\");<span class=\"ts\"/><span class=\"comment\">/* HORIZONTAL TAB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0x0B:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\\\v\");<span class=\"ts\"/><span class=\"comment\">/* VERTICAL TAB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case '\\'':<span class=\"ts\"/><span class=\"comment\">/* Single Quote */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case '\\\"':<span class=\"ts\"/><span class=\"comment\">/* Double Quote */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case '\\\\':<span class=\"ts\"/><span class=\"comment\">/* Backslash */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\\\%c\", (int)<a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check for printable character or hex escape */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_IS_PRINT\">ACPI_IS_PRINT</a>(<a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is a normal character */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%c\", (int)<a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* All others will be Hex escapes */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\\\x%2.2X\", (<a class=\"id\" href=\"#s32\">s32</a>) <a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\\"\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#max_length\">max_length</a> && <a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"...\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_dword_byte_swap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Value           - Value to be converted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      u32 integer with bytes swapped</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Convert a 32-bit value to big-endian (swap the bytes)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_ut_dword_byte_swap\">acpi_ut_dword_byte_swap</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#bytes\">bytes</a>[4];", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#bytes\">bytes</a>[4];", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#in\">in</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[0] = <a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[3];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[1] = <a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[2];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[2] = <a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[3] = <a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[0];", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_set_integer_width</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Revision            From DSDT header</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Set the global integer bit width based upon the revision</span>", 
"<span class=\"comment\"> *              of the DSDT.  For Revision 1 and 0, Integers are 32 bits.</span>", 
"<span class=\"comment\"> *              For Revision 2 and above, Integers are 64 bits.  Yes, this</span>", 
"<span class=\"comment\"> *              makes a difference.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ut_set_integer_width\">acpi_ut_set_integer_width</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#revision\">revision</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#revision\">revision</a> &lt; 2) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 32-bit case */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_integer_bit_width\">acpi_gbl_integer_bit_width</a> = 32;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_integer_nybble_width\">acpi_gbl_integer_nybble_width</a> = 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_integer_byte_width\">acpi_gbl_integer_byte_width</a> = 4;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 64-bit case (ACPI 2.0+) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_integer_bit_width\">acpi_gbl_integer_bit_width</a> = 64;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_integer_nybble_width\">acpi_gbl_integer_nybble_width</a> = 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_integer_byte_width\">acpi_gbl_integer_byte_width</a> = 8;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_DEBUG_OUTPUT\">ACPI_DEBUG_OUTPUT</a>", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_display_init_pathname</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Type                - Object type of the node</span>", 
"<span class=\"comment\"> *              obj_handle          - Handle whose pathname will be displayed</span>", 
"<span class=\"comment\"> *              Path                - Additional path string to be appended.</span>", 
"<span class=\"comment\"> *                                      (NULL if no extra path)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      acpi_status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Display full pathname of an object, DEBUG ONLY</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ut_display_init_pathname\">acpi_ut_display_init_pathname</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#obj_handle\">obj_handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      char *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_buffer\">acpi_buffer</a> <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only print the path if the appropriate debug level is enabled */</span>", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#acpi_dbg_level\">acpi_dbg_level</a> &amp; <a class=\"id\" href=\"#ACPI_LV_INIT_NAMES\">ACPI_LV_INIT_NAMES</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the full pathname to the node */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_LOCAL_BUFFER\">ACPI_ALLOCATE_LOCAL_BUFFER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_handle_to_pathname\">acpi_ns_handle_to_pathname</a>(<a class=\"id\" href=\"#obj_handle\">obj_handle</a>, &amp;<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Print what we're doing */</span>", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"Executing  \");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"Initializing \");", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Print the object type and pathname */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%-12s %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#acpi_ut_get_type_name\">acpi_ut_get_type_name</a>(<a class=\"id\" href=\"#type\">type</a>), (char *)<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Extra path is used to append names like _STA, _INI, etc. */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\".%s\", <a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_valid_acpi_char</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Char            - The character to be examined</span>", 
"<span class=\"comment\"> *              Position        - Byte position (0-3)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      TRUE if the character is valid, FALSE otherwise</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check for a valid ACPI character. Must be one of:</span>", 
"<span class=\"comment\"> *              1) Upper case alpha</span>", 
"<span class=\"comment\"> *              2) numeric</span>", 
"<span class=\"comment\"> *              3) underscore</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              We allow a '!' as the last character because of the ASF! table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ut_valid_acpi_char\">acpi_ut_valid_acpi_char</a>(char <a class=\"id\" href=\"#character\">character</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#position\">position</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (!((<a class=\"id\" href=\"#character\">character</a> >= 'A' && <a class=\"id\" href=\"#character\">character</a> <= 'Z') ||", 
"<span class=\"ts\"/>      (<a class=\"id\" href=\"#character\">character</a> >= '0' && <a class=\"id\" href=\"#character\">character</a> <= '9') || (<a class=\"id\" href=\"#character\">character</a> == '_'))) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Allow a '!' in the last position */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#character\">character</a> == '!' && <a class=\"id\" href=\"#position\">position</a> == 3) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#FALSE\">FALSE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_valid_acpi_name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Name            - The name to be examined</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      TRUE if the name is valid, FALSE otherwise</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check for a valid ACPI name.  Each character must be one of:</span>", 
"<span class=\"comment\"> *              1) Upper case alpha</span>", 
"<span class=\"comment\"> *              2) numeric</span>", 
"<span class=\"comment\"> *              3) underscore</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ut_valid_acpi_name\">acpi_ut_valid_acpi_name</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_ut_valid_acpi_char\">acpi_ut_valid_acpi_char</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, &amp;<a class=\"id\" href=\"#name\">name</a>))[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#FALSE\">FALSE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_repair_name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Name            - The ACPI name to be repaired</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Repaired version of the name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Repair an ACPI name: Change invalid characters to '*' and</span>", 
"<span class=\"comment\"> *              return the new name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_name\">acpi_name</a> <a class=\"id\" href=\"#acpi_ut_repair_name\">acpi_ut_repair_name</a>(char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"       <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#new_name\">new_name</a>[<a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_name\">new_name</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Replace a bad character with something printable, yet technically</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * still invalid. This prevents any collisions with existing \"good\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * names in the namespace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_ut_valid_acpi_char\">acpi_ut_valid_acpi_char</a>(<a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_name\">new_name</a>[<a class=\"id\" href=\"#i\">i</a>] = '*';", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (*(<a class=\"id\" href=\"#u32\">u32</a> *) <a class=\"id\" href=\"#new_name\">new_name</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_strtoul64</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  String          - Null terminated string</span>", 
"<span class=\"comment\"> *              Base            - Radix of the string: 16 or ACPI_ANY_BASE;</span>", 
"<span class=\"comment\"> *                                ACPI_ANY_BASE means 'in behalf of to_integer'</span>", 
"<span class=\"comment\"> *              ret_integer     - Where the converted integer is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status and Converted value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Convert a string into an unsigned value. Performs either a</span>", 
"<span class=\"comment\"> *              32-bit or 64-bit conversion, depending on the current mode</span>", 
"<span class=\"comment\"> *              of the interpreter.</span>", 
"<span class=\"comment\"> *              NOTE: Does not support Octal strings, not needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ut_strtoul64\">acpi_ut_strtoul64</a>(char *<a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#u64\">u64</a> * <a class=\"id\" href=\"#ret_integer\">ret_integer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#this_digit\">this_digit</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#return_value\">return_value</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#quotient\">quotient</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dividend\">dividend</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#to_integer_op\">to_integer_op</a> = (<a class=\"id\" href=\"#base\">base</a> == <a class=\"id\" href=\"#ACPI_ANY_BASE\">ACPI_ANY_BASE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mode32\">mode32</a> = (<a class=\"id\" href=\"#acpi_gbl_integer_byte_width\">acpi_gbl_integer_byte_width</a> == 4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#valid_digits\">valid_digits</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sign_of0x\">sign_of0x</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#term\">term</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_STR\">ACPI_FUNCTION_TRACE_STR</a>(<a class=\"id\" href=\"#ut_stroul64\">ut_stroul64</a>, <a class=\"id\" href=\"#string\">string</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#base\">base</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_ANY_BASE\">ACPI_ANY_BASE</a>:", 
"<span class=\"ts\"/>case 16:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Invalid Base */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#string\">string</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_exit\">error_exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip over any white space in the buffer */</span>", 
"", 
"<span class=\"ts\"/>while ((*<a class=\"id\" href=\"#string\">string</a>) && (<a class=\"id\" href=\"#ACPI_IS_SPACE\">ACPI_IS_SPACE</a>(*<a class=\"id\" href=\"#string\">string</a>) || *<a class=\"id\" href=\"#string\">string</a> == '\\t')) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string\">string</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to_integer_op\">to_integer_op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Base equal to ACPI_ANY_BASE means 'to_integer operation case'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need to determine if it is decimal or hexadecimal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#string\">string</a> == '0') && (<a class=\"id\" href=\"#ACPI_TOLOWER\">ACPI_TOLOWER</a>(*(<a class=\"id\" href=\"#string\">string</a> + 1)) == 'x')) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sign_of0x\">sign_of0x</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = 16;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip over the leading '0x' */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string\">string</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = 10;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Any string left? Check that '0x' is not followed by white space. */</span>", 
"", 
"<span class=\"ts\"/>if (!(*<a class=\"id\" href=\"#string\">string</a>) || <a class=\"id\" href=\"#ACPI_IS_SPACE\">ACPI_IS_SPACE</a>(*<a class=\"id\" href=\"#string\">string</a>) || *<a class=\"id\" href=\"#string\">string</a> == '\\t') {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#to_integer_op\">to_integer_op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_exit\">error_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#all_done\">all_done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Perform a 32-bit or 64-bit conversion, depending upon the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * execution mode of the interpreter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dividend\">dividend</a> = (<a class=\"id\" href=\"#mode32\">mode32</a>) ? <a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a> : <a class=\"id\" href=\"#ACPI_UINT64_MAX\">ACPI_UINT64_MAX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Main loop: convert the string to a 32- or 64-bit integer */</span>", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#string\">string</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_IS_DIGIT\">ACPI_IS_DIGIT</a>(*<a class=\"id\" href=\"#string\">string</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Convert ASCII 0-9 to Decimal value */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_digit\">this_digit</a> = ((<a class=\"id\" href=\"#u8\">u8</a>) * <a class=\"id\" href=\"#string\">string</a>) - '0';", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#base\">base</a> == 10) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Digit is out of range; possible in to_integer case only */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#term\">term</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_digit\">this_digit</a> = (<a class=\"id\" href=\"#u8\">u8</a>) <a class=\"id\" href=\"#ACPI_TOUPPER\">ACPI_TOUPPER</a>(*<a class=\"id\" href=\"#string\">string</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_IS_XDIGIT\">ACPI_IS_XDIGIT</a>((char)<a class=\"id\" href=\"#this_digit\">this_digit</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Convert ASCII Hex char to value */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_digit\">this_digit</a> = <a class=\"id\" href=\"#this_digit\">this_digit</a> - 'A' + 10;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#term\">term</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#term\">term</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#to_integer_op\">to_integer_op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_exit\">error_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#valid_digits\">valid_digits</a> == 0) && (<a class=\"id\" href=\"#this_digit\">this_digit</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   && !<a class=\"id\" href=\"#sign_of0x\">sign_of0x</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip zeros */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string\">string</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#valid_digits\">valid_digits</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sign_of0x\">sign_of0x</a> && ((<a class=\"id\" href=\"#valid_digits\">valid_digits</a> &gt; 16)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  || ((<a class=\"id\" href=\"#valid_digits\">valid_digits</a> &gt; 8) && <a class=\"id\" href=\"#mode32\">mode32</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is to_integer operation case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * No any restrictions for string-to-integer conversion,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * see ACPI spec.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_exit\">error_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Divide the digit into the correct position */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_short_divide\">acpi_ut_short_divide</a>((<a class=\"id\" href=\"#dividend\">dividend</a> - (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#this_digit\">this_digit</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#base\">base</a>, &amp;<a class=\"id\" href=\"#quotient\">quotient</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#return_value\">return_value</a> &gt; <a class=\"id\" href=\"#quotient\">quotient</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#to_integer_op\">to_integer_op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_exit\">error_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_value\">return_value</a> *= <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_value\">return_value</a> += <a class=\"id\" href=\"#this_digit\">this_digit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string\">string</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All done, normal exit */</span>", 
"", 
"      <a class=\"id\" href=\"#all_done\">all_done</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>, \"Converted value: %8.8X%8.8X\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#return_value\">return_value</a>)));", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ret_integer\">ret_integer</a> = <a class=\"id\" href=\"#return_value\">return_value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"", 
"      <a class=\"id\" href=\"#error_exit\">error_exit</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Base was set/validated above */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> == 10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_DECIMAL_CONSTANT\">AE_BAD_DECIMAL_CONSTANT</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_HEX_CONSTANT\">AE_BAD_HEX_CONSTANT</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_create_update_state_and_push</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Object          - Object to be added to the new state</span>", 
"<span class=\"comment\"> *              Action          - Increment/Decrement</span>", 
"<span class=\"comment\"> *              state_list      - List the state will be added to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Create a new state and push it</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ut_create_update_state_and_push\">acpi_ut_create_update_state_and_push</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#object\">object</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#action\">action</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> **<a class=\"id\" href=\"#state_list\">state_list</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ignore null objects; these are expected */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#object\">object</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#acpi_ut_create_update_state\">acpi_ut_create_update_state</a>(<a class=\"id\" href=\"#object\">object</a>, <a class=\"id\" href=\"#action\">action</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_push_generic_state\">acpi_ut_push_generic_state</a>(<a class=\"id\" href=\"#state_list\">state_list</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_walk_package_tree</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  source_object       - The package to walk</span>", 
"<span class=\"comment\"> *              target_object       - Target object (if package is being copied)</span>", 
"<span class=\"comment\"> *              walk_callback       - Called once for each package element</span>", 
"<span class=\"comment\"> *              Context             - Passed to the callback function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Walk through a package</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ut_walk_package_tree\">acpi_ut_walk_package_tree</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> * <a class=\"id\" href=\"#source_object\">source_object</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#target_object\">target_object</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_pkg_callback\">acpi_pkg_callback</a> <a class=\"id\" href=\"#walk_callback\">walk_callback</a>, void *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *<a class=\"id\" href=\"#state_list\">state_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#this_index\">this_index</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#this_source_obj\">this_source_obj</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ut_walk_package_tree\">ut_walk_package_tree</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#acpi_ut_create_pkg_state\">acpi_ut_create_pkg_state</a>(<a class=\"id\" href=\"#source_object\">source_object</a>, <a class=\"id\" href=\"#target_object\">target_object</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#state\">state</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get one element of the package */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_index\">this_index</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pkg\">pkg</a>.<a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_source_obj\">this_source_obj</a> = (union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pkg\">pkg</a>.<a class=\"id\" href=\"#source_object\">source_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#this_index\">this_index</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check for:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 1) An uninitialized package element.  It is completely</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *    legal to declare a package and leave it uninitialized</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 2) Not an internal object - can be a namespace node instead</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 3) Any type other than a package.  Packages are handled in else</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *    case below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((!<a class=\"id\" href=\"#this_source_obj\">this_source_obj</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#ACPI_GET_DESCRIPTOR_TYPE\">ACPI_GET_DESCRIPTOR_TYPE</a>(<a class=\"id\" href=\"#this_source_obj\">this_source_obj</a>) !=", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ACPI_DESC_TYPE_OPERAND\">ACPI_DESC_TYPE_OPERAND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#this_source_obj\">this_source_obj</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_PACKAGE\">ACPI_TYPE_PACKAGE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_callback\">walk_callback</a>(<a class=\"id\" href=\"#ACPI_COPY_TYPE_SIMPLE\">ACPI_COPY_TYPE_SIMPLE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#this_source_obj\">this_source_obj</a>, <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#context\">context</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pkg\">pkg</a>.<a class=\"id\" href=\"#index\">index</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pkg\">pkg</a>.<a class=\"id\" href=\"#index\">index</a> >=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pkg\">pkg</a>.<a class=\"id\" href=\"#source_object\">source_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We've handled all of the objects at this level,  This means</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that we have just completed a package.  That package may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * have contained one or more packages itself.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Delete this state and pop the previous state (package).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_delete_generic_state\">acpi_ut_delete_generic_state</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#acpi_ut_pop_generic_state\">acpi_ut_pop_generic_state</a>(&amp;<a class=\"id\" href=\"#state_list\">state_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Finished when there are no more states */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We have handled all of the objects in the top level</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * package just add the length of the package objects</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and exit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Go back up a level and move the index past the just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * completed package object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pkg\">pkg</a>.<a class=\"id\" href=\"#index\">index</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is a subobject of type package */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_callback\">walk_callback</a>(<a class=\"id\" href=\"#ACPI_COPY_TYPE_PACKAGE\">ACPI_COPY_TYPE_PACKAGE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#this_source_obj\">this_source_obj</a>, <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#context\">context</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Push the current state and create a new one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The callback above returned a new target package object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_push_generic_state\">acpi_ut_push_generic_state</a>(&amp;<a class=\"id\" href=\"#state_list\">state_list</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#acpi_ut_create_pkg_state\">acpi_ut_create_pkg_state</a>(<a class=\"id\" href=\"#this_source_obj\">this_source_obj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pkg\">pkg</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#this_target_obj\">this_target_obj</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#state\">state</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Free any stacked Update State objects */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#state_list\">state_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_pop_generic_state\">acpi_ut_pop_generic_state</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (&amp;<a class=\"id\" href=\"#state_list\">state_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_delete_generic_state\">acpi_ut_delete_generic_state</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We should never get here */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_INTERNAL\">AE_AML_INTERNAL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_error, acpi_exception, acpi_warning, acpi_info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  module_name         - Caller's module name (for error output)</span>", 
"<span class=\"comment\"> *              line_number         - Caller's line number (for error output)</span>", 
"<span class=\"comment\"> *              Format              - Printf format string + additional args</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Print message with module/line/version info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#ACPI_INTERNAL_VAR_XFACE\">ACPI_INTERNAL_VAR_XFACE</a>", 
"<a class=\"id\" href=\"#acpi_error\">acpi_error</a>(const char *<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>, const char *<a class=\"id\" href=\"#format\">format</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"ACPI Error: \");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#format\">format</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_vprintf\">acpi_os_vprintf</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_COMMON_MSG_SUFFIX\">ACPI_COMMON_MSG_SUFFIX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ACPI_INTERNAL_VAR_XFACE\">ACPI_INTERNAL_VAR_XFACE</a>", 
"<a class=\"id\" href=\"#acpi_exception\">acpi_exception</a>(const char *<a class=\"id\" href=\"#module_name\">module_name</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>, <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>, const char *<a class=\"id\" href=\"#format\">format</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"ACPI Exception: %s, \", <a class=\"id\" href=\"#acpi_format_exception\">acpi_format_exception</a>(<a class=\"id\" href=\"#status\">status</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#format\">format</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_vprintf\">acpi_os_vprintf</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_COMMON_MSG_SUFFIX\">ACPI_COMMON_MSG_SUFFIX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ACPI_INTERNAL_VAR_XFACE\">ACPI_INTERNAL_VAR_XFACE</a>", 
"<a class=\"id\" href=\"#acpi_warning\">acpi_warning</a>(const char *<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>, const char *<a class=\"id\" href=\"#format\">format</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"ACPI Warning: \");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#format\">format</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_vprintf\">acpi_os_vprintf</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_COMMON_MSG_SUFFIX\">ACPI_COMMON_MSG_SUFFIX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ACPI_INTERNAL_VAR_XFACE\">ACPI_INTERNAL_VAR_XFACE</a>", 
"<a class=\"id\" href=\"#acpi_info\">acpi_info</a>(const char *<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>, const char *<a class=\"id\" href=\"#format\">format</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"ACPI: \");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#format\">format</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_vprintf\">acpi_os_vprintf</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_error\">acpi_error</a>)", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_exception\">acpi_exception</a>)", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_warning\">acpi_warning</a>)", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_info\">acpi_info</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_predefined_warning</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  module_name     - Caller's module name (for error output)</span>", 
"<span class=\"comment\"> *              line_number     - Caller's line number (for error output)</span>", 
"<span class=\"comment\"> *              Pathname        - Full pathname to the node</span>", 
"<span class=\"comment\"> *              node_flags      - From Namespace node for the method/object</span>", 
"<span class=\"comment\"> *              Format          - Printf format string + additional args</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Warnings for the predefined validation module. Messages are</span>", 
"<span class=\"comment\"> *              only emitted the first time a problem with a particular</span>", 
"<span class=\"comment\"> *              method/object is detected. This prevents a flood of error</span>", 
"<span class=\"comment\"> *              messages for methods that are repeatedly evaluated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\">******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#ACPI_INTERNAL_VAR_XFACE\">ACPI_INTERNAL_VAR_XFACE</a>", 
"<a class=\"id\" href=\"#acpi_ut_predefined_warning\">acpi_ut_predefined_warning</a>(const char *<a class=\"id\" href=\"#module_name\">module_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   char *<a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#node_flags\">node_flags</a>, const char *<a class=\"id\" href=\"#format\">format</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Warning messages for this method/object will be disabled after the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first time a validation fails or an object is successfully repaired.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node_flags\">node_flags</a> &amp; <a class=\"id\" href=\"#ANOBJ_EVALUATED\">ANOBJ_EVALUATED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"ACPI Warning for %s: \", <a class=\"id\" href=\"#pathname\">pathname</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#format\">format</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_vprintf\">acpi_os_vprintf</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_COMMON_MSG_SUFFIX\">ACPI_COMMON_MSG_SUFFIX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_predefined_info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  module_name     - Caller's module name (for error output)</span>", 
"<span class=\"comment\"> *              line_number     - Caller's line number (for error output)</span>", 
"<span class=\"comment\"> *              Pathname        - Full pathname to the node</span>", 
"<span class=\"comment\"> *              node_flags      - From Namespace node for the method/object</span>", 
"<span class=\"comment\"> *              Format          - Printf format string + additional args</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Info messages for the predefined validation module. Messages</span>", 
"<span class=\"comment\"> *              are only emitted the first time a problem with a particular</span>", 
"<span class=\"comment\"> *              method/object is detected. This prevents a flood of</span>", 
"<span class=\"comment\"> *              messages for methods that are repeatedly evaluated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#ACPI_INTERNAL_VAR_XFACE\">ACPI_INTERNAL_VAR_XFACE</a>", 
"<a class=\"id\" href=\"#acpi_ut_predefined_info\">acpi_ut_predefined_info</a>(const char *<a class=\"id\" href=\"#module_name\">module_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#node_flags\">node_flags</a>, const char *<a class=\"id\" href=\"#format\">format</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Warning messages for this method/object will be disabled after the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first time a validation fails or an object is successfully repaired.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node_flags\">node_flags</a> &amp; <a class=\"id\" href=\"#ANOBJ_EVALUATED\">ANOBJ_EVALUATED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"ACPI Info for %s: \", <a class=\"id\" href=\"#pathname\">pathname</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#format\">format</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_vprintf\">acpi_os_vprintf</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_COMMON_MSG_SUFFIX\">ACPI_COMMON_MSG_SUFFIX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
];
xr_frag_insert('l/58/f3792aa4bd0dfdfeb6ca32c2acd62bf96005fc.xr', __xr_tmp);
