var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>{ u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>addr;     } &amp;&amp; PERF_SAMPLE_ADDR</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>{ u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>id;<span class=\"ts\"/>  } &amp;&amp; PERF_SAMPLE_ID</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>{ u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>stream_id;} &amp;&amp; PERF_SAMPLE_STREAM_ID</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>{ u32<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>cpu, res; } &amp;&amp; PERF_SAMPLE_CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>{ u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>period;   } &amp;&amp; PERF_SAMPLE_PERIOD</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>{ struct read_format<span class=\"ts\"/>values;<span class=\"ts\"/>  } &amp;&amp; PERF_SAMPLE_READ</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>{ u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>nr,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>  u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>ips[nr];  } &amp;&amp; PERF_SAMPLE_CALLCHAIN</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>#</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/># The RAW record below is opaque data wrt the ABI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>#</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/># That is, the ABI doesn't make any promises wrt to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/># the stability of its content, it may vary depending</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/># on event, hardware, kernel version and phase of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/># the moon.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>#</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/># In other words, PERF_SAMPLE_RAW contents are not an ABI.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>#</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>{ u32<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>size;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>  char                  data[size];}&amp;&amp; PERF_SAMPLE_RAW</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * };</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_RECORD_SAMPLE\">PERF_RECORD_SAMPLE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 9,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_RECORD_MAX\">PERF_RECORD_MAX</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-ABI */</span>", 
"};", 
"", 
"enum <a class=\"id\" href=\"#perf_callchain_context\">perf_callchain_context</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_CONTEXT_HV\">PERF_CONTEXT_HV</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#__u64\">__u64</a>)-32,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_CONTEXT_KERNEL\">PERF_CONTEXT_KERNEL</a><span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#__u64\">__u64</a>)-128,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_CONTEXT_USER\">PERF_CONTEXT_USER</a><span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#__u64\">__u64</a>)-512,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_CONTEXT_GUEST\">PERF_CONTEXT_GUEST</a><span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#__u64\">__u64</a>)-2048,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_CONTEXT_GUEST_KERNEL\">PERF_CONTEXT_GUEST_KERNEL</a><span class=\"ts\"/>= (<a class=\"id\" href=\"#__u64\">__u64</a>)-2176,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_CONTEXT_GUEST_USER\">PERF_CONTEXT_GUEST_USER</a><span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#__u64\">__u64</a>)-2560,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_CONTEXT_MAX\">PERF_CONTEXT_MAX</a><span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#__u64\">__u64</a>)-4095,", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_FLAG_FD_NO_GROUP\">PERF_FLAG_FD_NO_GROUP</a><span class=\"ts\"/>(1U << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_FLAG_FD_OUTPUT\">PERF_FLAG_FD_OUTPUT</a><span class=\"ts\"/>(1U << 1)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kernel-internal data types and definitions:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#local64\">local64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#perf_guest_info_callbacks\">perf_guest_info_callbacks</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#is_in_guest\">is_in_guest</a>) (void);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#is_user_mode\">is_user_mode</a>) (void);", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#get_guest_ip\">get_guest_ip</a>) (void);", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_HW_BREAKPOINT\">CONFIG_HAVE_HW_BREAKPOINT</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#hw_breakpoint\">hw_breakpoint</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hrtimer\">hrtimer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#local\">local</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_MAX_STACK_DEPTH\">PERF_MAX_STACK_DEPTH</a><span class=\"ts\"/><span class=\"ts\"/>255", 
"", 
"struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>[<a class=\"id\" href=\"#PERF_MAX_STACK_DEPTH\">PERF_MAX_STACK_DEPTH</a>];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#perf_raw_record\">perf_raw_record</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#perf_branch_entry\">perf_branch_entry</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#perf_branch_stack\">perf_branch_stack</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_branch_entry\">perf_branch_entry</a><span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a>[0];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct hw_perf_event - performance event hardware details:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct { <span class=\"comment\">/* hardware */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#config\">config</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_tag\">last_tag</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#config_base\">config_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#event_base\">event_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_cpu\">last_cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/><span class=\"ts\"/>struct { <span class=\"comment\">/* software */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer\">hrtimer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_HW_BREAKPOINT\">CONFIG_HAVE_HW_BREAKPOINT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct { <span class=\"comment\">/* breakpoint */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_hw_breakpoint\">arch_hw_breakpoint</a><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp_list\">bp_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_t\">local64_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_count\">prev_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_period\">last_period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_t\">local64_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period_left\">period_left</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interrupts\">interrupts</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freq_time_stamp\">freq_time_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freq_count_stamp\">freq_count_stamp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#perf_event\">perf_event</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Common implementation detail of pmu::{start,commit,cancel}_txn</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_EVENT_TXN\">PERF_EVENT_TXN</a> 0x1", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct pmu - generic performance monitoring unit</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pmu\">pmu</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#enable\">enable</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#disable\">disable</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#start\">start</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#stop\">stop</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#read\">read</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#unthrottle\">unthrottle</a>)<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Group events scheduling is treated as a transaction, add group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * events as a whole and perform one schedulability test. If the test</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fails, roll back the whole group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Start the transaction, after this -&gt;enable() doesn't need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to do schedulability tests.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#start_txn\">start_txn</a>)<span class=\"ts\"/>(const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#pmu\">pmu</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If -&gt;start_txn() disabled the -&gt;enable() schedulability test</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then -&gt;commit_txn() is required to perform one. On success</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the transaction is closed. On error the transaction is kept</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * open until -&gt;cancel_txn() is called.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int  (*<a class=\"id\" href=\"#commit_txn\">commit_txn</a>)<span class=\"ts\"/>(const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#pmu\">pmu</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Will cancel the transaction, assumes -&gt;disable() is called for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * each successfull -&gt;enable() during the transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#cancel_txn\">cancel_txn</a>)<span class=\"ts\"/>(const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#pmu\">pmu</a>);", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum perf_event_active_state - the states of a event</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#perf_event_active_state\">perf_event_active_state</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_EVENT_STATE_ERROR\">PERF_EVENT_STATE_ERROR</a><span class=\"ts\"/><span class=\"ts\"/>= -2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a><span class=\"ts\"/><span class=\"ts\"/>= -1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a><span class=\"ts\"/>=  0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a><span class=\"ts\"/><span class=\"ts\"/>=  1,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#file\">file</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_BUFFER_WRITABLE\">PERF_BUFFER_WRITABLE</a><span class=\"ts\"/><span class=\"ts\"/>0x01", 
"", 
"struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refcount\">refcount</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_USE_VMALLOC\">CONFIG_PERF_USE_VMALLOC</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_order\">page_order</a>;<span class=\"ts\"/><span class=\"comment\">/* allocation order  */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>;<span class=\"ts\"/><span class=\"comment\">/* nr of data pages  */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writable\">writable</a>;<span class=\"ts\"/><span class=\"comment\">/* are we writable   */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll\">poll</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* POLL_ for wakeups */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* write position    */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nest\">nest</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nested writers    */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events\">events</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* event limit       */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wakeup\">wakeup</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* wakeup stamp      */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lost\">lost</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nr records lost   */</span>", 
"", 
"<span class=\"ts\"/>long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#watermark\">watermark</a>;<span class=\"ts\"/><span class=\"comment\">/* wakeup watermark  */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_mmap_page\">perf_event_mmap_page</a><span class=\"ts\"/>*<a class=\"id\" href=\"#user_page\">user_page</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data_pages\">data_pages</a>[0];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a> *);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a>;", 
"", 
"typedef void (*<a class=\"id\" href=\"#perf_overflow_handler_t\">perf_overflow_handler_t</a>)(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"enum <a class=\"id\" href=\"#perf_group_flag\">perf_group_flag</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_GROUP_SOFTWARE\">PERF_GROUP_SOFTWARE</a> = 0x1,", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SWEVENT_HLIST_BITS\">SWEVENT_HLIST_BITS</a><span class=\"ts\"/>8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SWEVENT_HLIST_SIZE\">SWEVENT_HLIST_SIZE</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#SWEVENT_HLIST_BITS\">SWEVENT_HLIST_BITS</a>)", 
"", 
"struct <a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/><a class=\"id\" href=\"#heads\">heads</a>[<a class=\"id\" href=\"#SWEVENT_HLIST_SIZE\">SWEVENT_HLIST_SIZE</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_ATTACH_CONTEXT\">PERF_ATTACH_CONTEXT</a><span class=\"ts\"/>0x01", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_ATTACH_GROUP\">PERF_ATTACH_GROUP</a><span class=\"ts\"/>0x02", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct perf_event - performance event kernel representation:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#perf_event\">perf_event</a> {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_entry\">group_entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_entry\">event_entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sibling_list\">sibling_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_siblings\">nr_siblings</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_flags\">group_flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pmu\">pmu</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pmu\">pmu</a>;", 
"", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#perf_event_active_state\">perf_event_active_state</a><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach_state\">attach_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_t\">local64_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic64_t\">atomic64_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_count\">child_count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * These are the total time in nanoseconds that the event</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has been enabled (i.e. eligible to run, and the task has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * been scheduled in, if this is a per-task event)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and running (scheduled onto the CPU), respectively.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * They are computed from tstamp_enabled, tstamp_running and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tstamp_stopped when the event is in INACTIVE or ACTIVE state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_time_running\">total_time_running</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * These are timestamps used for computing total_time_enabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and total_time_running when the event is in INACTIVE or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ACTIVE state, measured in nanoseconds from an arbitrary point</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tstamp_enabled: the notional time when the event was enabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tstamp_running: the notional time when the event was scheduled on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tstamp_stopped: in INACTIVE state, the notional time when the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>event was scheduled off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tstamp_enabled\">tstamp_enabled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tstamp_running\">tstamp_running</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tstamp_stopped\">tstamp_stopped</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#filp\">filp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * These accumulate total time (in nanoseconds) that children</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * events have been enabled and running, respectively.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic64_t\">atomic64_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_total_time_enabled\">child_total_time_enabled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic64_t\">atomic64_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_total_time_running\">child_total_time_running</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protect attach/detach and child_list:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_mutex\">child_mutex</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_list\">child_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oncpu\">oncpu</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner_entry\">owner_entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#owner\">owner</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mmap bits */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmap_mutex\">mmap_mutex</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmap_count\">mmap_count</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmap_locked\">mmap_locked</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#mmap_user\">mmap_user</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* poll related */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#waitq\">waitq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#fasync\">fasync</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* delayed work for NMIs and such */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pending_wakeup\">pending_wakeup</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pending_kill\">pending_kill</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pending_disable\">pending_disable</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_pending_entry\">perf_pending_entry</a><span class=\"ts\"/><a class=\"id\" href=\"#pending\">pending</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_limit\">event_limit</a>;", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#destroy\">destroy</a>)(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_overflow_handler_t\">perf_overflow_handler_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#overflow_handler\">overflow_handler</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EVENT_TRACING\">CONFIG_EVENT_TRACING</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a><span class=\"ts\"/>*<a class=\"id\" href=\"#tp_event\">tp_event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_filter\">event_filter</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#filter\">filter</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PERF_EVENTS */</span>", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct perf_event_context - event context structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used as a container for task events and CPU events as well:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protect the states of the events in the list,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nr_active, and the list:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protect the list of events.  Locking either mutex or lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is sufficient to ensure the list doesn't change; to change</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the list you need to lock both the mutex and the spinlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex\">mutex</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pinned_groups\">pinned_groups</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_list\">event_list</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_events\">nr_events</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_active\">nr_active</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_active\">is_active</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_stat\">nr_stat</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refcount\">refcount</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Context clock, runs when context enabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timestamp\">timestamp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * These fields let us detect when two contexts have both</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * been cloned (inherited) from a common ancestor.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a><span class=\"ts\"/>*<a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent_gen\">parent_gen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#generation\">generation</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pin_count\">pin_count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct perf_event_cpu_context - per cpu event context structure</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a><span class=\"ts\"/>*<a class=\"id\" href=\"#task_ctx\">task_ctx</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active_oncpu\">active_oncpu</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_pertask\">max_pertask</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exclusive\">exclusive</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_mutex\">hlist_mutex</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_refcount\">hlist_refcount</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Recursion avoidance:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task, softirq, irq, nmi context</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recursion\">recursion</a>[4];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wakeup\">wakeup</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nmi\">nmi</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sample\">sample</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set by architecture code:</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#perf_max_events\">perf_max_events</a>;", 
"", 
"extern const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#hw_perf_event_init\">hw_perf_event_init</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"extern void <a class=\"id\" href=\"#perf_event_task_sched_in\">perf_event_task_sched_in</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"extern void <a class=\"id\" href=\"#perf_event_task_sched_out\">perf_event_task_sched_out</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>);", 
"extern void <a class=\"id\" href=\"#perf_event_task_tick\">perf_event_task_tick</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"extern int <a class=\"id\" href=\"#perf_event_init_task\">perf_event_init_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>);", 
"extern void <a class=\"id\" href=\"#perf_event_exit_task\">perf_event_exit_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>);", 
"extern void <a class=\"id\" href=\"#perf_event_free_task\">perf_event_free_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"extern void <a class=\"id\" href=\"#set_perf_event_pending\">set_perf_event_pending</a>(void);", 
"extern void <a class=\"id\" href=\"#perf_event_do_pending\">perf_event_do_pending</a>(void);", 
"extern void <a class=\"id\" href=\"#perf_event_print_debug\">perf_event_print_debug</a>(void);", 
"extern void <a class=\"id\" href=\"#__perf_disable\">__perf_disable</a>(void);", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__perf_enable\">__perf_enable</a>(void);", 
"extern void <a class=\"id\" href=\"#perf_disable\">perf_disable</a>(void);", 
"extern void <a class=\"id\" href=\"#perf_enable\">perf_enable</a>(void);", 
"extern int <a class=\"id\" href=\"#perf_event_task_disable\">perf_event_task_disable</a>(void);", 
"extern int <a class=\"id\" href=\"#perf_event_task_enable\">perf_event_task_enable</a>(void);", 
"extern void <a class=\"id\" href=\"#perf_event_update_userpage\">perf_event_update_userpage</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"extern int <a class=\"id\" href=\"#perf_event_release_kernel\">perf_event_release_kernel</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"extern struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *", 
"<a class=\"id\" href=\"#perf_event_create_kernel_counter\">perf_event_create_kernel_counter</a>(struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_overflow_handler_t\">perf_overflow_handler_t</a> <a class=\"id\" href=\"#callback\">callback</a>);", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#perf_event_read_value\">perf_event_read_value</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#enabled\">enabled</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#running\">running</a>);", 
"", 
"struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><a class=\"id\" href=\"#tid\">tid</a>;", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid_entry\">tid_entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stream_id\">stream_id</a>;", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><a class=\"id\" href=\"#reserved\">reserved</a>;", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_entry\">cpu_entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a><span class=\"ts\"/>*<a class=\"id\" href=\"#callchain\">callchain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_raw_record\">perf_raw_record</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#raw\">raw</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#perf_sample_data_init\">perf_sample_data_init</a>(struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#raw\">raw</a>  = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#perf_output_sample\">perf_output_sample</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#perf_event_header\">perf_event_header</a> *<a class=\"id\" href=\"#header\">header</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"extern void <a class=\"id\" href=\"#perf_prepare_sample\">perf_prepare_sample</a>(struct <a class=\"id\" href=\"#perf_event_header\">perf_event_header</a> *<a class=\"id\" href=\"#header\">header</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"extern int <a class=\"id\" href=\"#perf_event_overflow\">perf_event_overflow</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, int <a class=\"id\" href=\"#nmi\">nmi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return 1 for a software event, 0 for a hardware event</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_software_event\">is_software_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_TYPE_SOFTWARE\">PERF_TYPE_SOFTWARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_TYPE_TRACEPOINT\">PERF_TYPE_TRACEPOINT</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* for now the breakpoint stuff also works as software event */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_TYPE_BREAKPOINT\">PERF_TYPE_BREAKPOINT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"extern <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#perf_swevent_enabled\">perf_swevent_enabled</a>[<a class=\"id\" href=\"#PERF_COUNT_SW_MAX\">PERF_COUNT_SW_MAX</a>];", 
"", 
"extern void <a class=\"id\" href=\"#__perf_sw_event\">__perf_sw_event</a>(<a class=\"id\" href=\"#u32\">u32</a>, <a class=\"id\" href=\"#u64\">u64</a>, int, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *, <a class=\"id\" href=\"#u64\">u64</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#perf_arch_fetch_caller_regs\">perf_arch_fetch_caller_regs</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#perf_arch_fetch_caller_regs\">perf_arch_fetch_caller_regs</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#ip\">ip</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Take a snapshot of the regs. Skip ip and frame pointer to</span>", 
"<span class=\"comment\"> * the nth caller. We only need a few of the regs:</span>", 
"<span class=\"comment\"> * - ip for PERF_SAMPLE_IP</span>", 
"<span class=\"comment\"> * - cs for user_mode() tests</span>", 
"<span class=\"comment\"> * - bp for callchains</span>", 
"<span class=\"comment\"> * - eflags, for future purposes, just in case</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_fetch_caller_regs\">perf_fetch_caller_regs</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#regs\">regs</a>, 0, sizeof(*<a class=\"id\" href=\"#regs\">regs</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_arch_fetch_caller_regs\">perf_arch_fetch_caller_regs</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#CALLER_ADDR0\">CALLER_ADDR0</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#perf_sw_event\">perf_sw_event</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event_id\">event_id</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nr\">nr</a>, int <a class=\"id\" href=\"#nmi\">nmi</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#perf_swevent_enabled\">perf_swevent_enabled</a>[<a class=\"id\" href=\"#event_id\">event_id</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> <a class=\"id\" href=\"#hot_regs\">hot_regs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#regs\">regs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_fetch_caller_regs\">perf_fetch_caller_regs</a>(&amp;<a class=\"id\" href=\"#hot_regs\">hot_regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a> = &amp;<a class=\"id\" href=\"#hot_regs\">hot_regs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__perf_sw_event\">__perf_sw_event</a>(<a class=\"id\" href=\"#event_id\">event_id</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#nmi\">nmi</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#perf_event_mmap\">perf_event_mmap</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>);", 
"extern struct <a class=\"id\" href=\"#perf_guest_info_callbacks\">perf_guest_info_callbacks</a> *<a class=\"id\" href=\"#perf_guest_cbs\">perf_guest_cbs</a>;", 
"extern int <a class=\"id\" href=\"#perf_register_guest_info_callbacks\">perf_register_guest_info_callbacks</a>(struct <a class=\"id\" href=\"#perf_guest_info_callbacks\">perf_guest_info_callbacks</a> *<a class=\"id\" href=\"#callbacks\">callbacks</a>);", 
"extern int <a class=\"id\" href=\"#perf_unregister_guest_info_callbacks\">perf_unregister_guest_info_callbacks</a>(struct <a class=\"id\" href=\"#perf_guest_info_callbacks\">perf_guest_info_callbacks</a> *<a class=\"id\" href=\"#callbacks\">callbacks</a>);", 
"", 
"extern void <a class=\"id\" href=\"#perf_event_comm\">perf_event_comm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"extern void <a class=\"id\" href=\"#perf_event_fork\">perf_event_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#perf_callchain_entry\">perf_callchain_entry</a> *<a class=\"id\" href=\"#perf_callchain\">perf_callchain</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"extern int <a class=\"id\" href=\"#sysctl_perf_event_paranoid\">sysctl_perf_event_paranoid</a>;", 
"extern int <a class=\"id\" href=\"#sysctl_perf_event_mlock\">sysctl_perf_event_mlock</a>;", 
"extern int <a class=\"id\" href=\"#sysctl_perf_event_sample_rate\">sysctl_perf_event_sample_rate</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#perf_paranoid_tracepoint_raw\">perf_paranoid_tracepoint_raw</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysctl_perf_event_paranoid\">sysctl_perf_event_paranoid</a> &gt; -1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#perf_paranoid_cpu\">perf_paranoid_cpu</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysctl_perf_event_paranoid\">sysctl_perf_event_paranoid</a> &gt; 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#perf_paranoid_kernel\">perf_paranoid_kernel</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysctl_perf_event_paranoid\">sysctl_perf_event_paranoid</a> &gt; 1;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#perf_event_init\">perf_event_init</a>(void);", 
"extern void <a class=\"id\" href=\"#perf_tp_event\">perf_tp_event</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#count\">count</a>, void *<a class=\"id\" href=\"#record\">record</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#entry_size\">entry_size</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>, int <a class=\"id\" href=\"#rctx\">rctx</a>);", 
"extern void <a class=\"id\" href=\"#perf_bp_event\">perf_bp_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#perf_misc_flags\">perf_misc_flags</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#perf_misc_flags\">perf_misc_flags</a>(<a class=\"id\" href=\"#regs\">regs</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>) ? <a class=\"id\" href=\"#PERF_RECORD_MISC_USER\">PERF_RECORD_MISC_USER</a> : \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#PERF_RECORD_MISC_KERNEL\">PERF_RECORD_MISC_KERNEL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#perf_instruction_pointer\">perf_instruction_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>)<span class=\"ts\"/><a class=\"id\" href=\"#instruction_pointer\">instruction_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern int <a class=\"id\" href=\"#perf_output_begin\">perf_output_begin</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#nmi\">nmi</a>, int <a class=\"id\" href=\"#sample\">sample</a>);", 
"extern void <a class=\"id\" href=\"#perf_output_end\">perf_output_end</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>);", 
"extern void <a class=\"id\" href=\"#perf_output_copy\">perf_output_copy</a>(struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"extern int <a class=\"id\" href=\"#perf_swevent_get_recursion_context\">perf_swevent_get_recursion_context</a>(void);", 
"extern void <a class=\"id\" href=\"#perf_swevent_put_recursion_context\">perf_swevent_put_recursion_context</a>(int <a class=\"id\" href=\"#rctx\">rctx</a>);", 
"extern void <a class=\"id\" href=\"#perf_event_enable\">perf_event_enable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"extern void <a class=\"id\" href=\"#perf_event_disable\">perf_event_disable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#perf_event_task_sched_in\">perf_event_task_sched_in</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#perf_event_task_sched_out\">perf_event_task_sched_out</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#perf_event_task_tick\">perf_event_task_tick</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#perf_event_init_task\">perf_event_init_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)<span class=\"ts\"/>{ return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_event_exit_task\">perf_event_exit_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)<span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_event_free_task\">perf_event_free_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_event_do_pending\">perf_event_do_pending</a>(void)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_event_print_debug\">perf_event_print_debug</a>(void)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_disable\">perf_disable</a>(void)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_enable\">perf_enable</a>(void)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#perf_event_task_disable\">perf_event_task_disable</a>(void)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#perf_event_task_enable\">perf_event_task_enable</a>(void)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>; }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#perf_sw_event\">perf_sw_event</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event_id\">event_id</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nr\">nr</a>, int <a class=\"id\" href=\"#nmi\">nmi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#perf_bp_event\">perf_bp_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, void *<a class=\"id\" href=\"#data\">data</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#perf_register_guest_info_callbacks\">perf_register_guest_info_callbacks</a>", 
"(struct <a class=\"id\" href=\"#perf_guest_info_callbacks\">perf_guest_info_callbacks</a> *<a class=\"id\" href=\"#callbacks\">callbacks</a>) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#perf_unregister_guest_info_callbacks\">perf_unregister_guest_info_callbacks</a>", 
"(struct <a class=\"id\" href=\"#perf_guest_info_callbacks\">perf_guest_info_callbacks</a> *<a class=\"id\" href=\"#callbacks\">callbacks</a>) { return 0; }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_event_mmap\">perf_event_mmap</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)<span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_event_comm\">perf_event_comm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_event_fork\">perf_event_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_event_init\">perf_event_init</a>(void)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int  <a class=\"id\" href=\"#perf_swevent_get_recursion_context\">perf_swevent_get_recursion_context</a>(void)<span class=\"ts\"/><span class=\"ts\"/>{ return -1; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_swevent_put_recursion_context\">perf_swevent_put_recursion_context</a>(int <a class=\"id\" href=\"#rctx\">rctx</a>)<span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_event_enable\">perf_event_enable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)<span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#perf_event_disable\">perf_event_disable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)<span class=\"ts\"/><span class=\"ts\"/>{ }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#perf_output_put\">perf_output_put</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#x\">x</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_copy\">perf_output_copy</a>((<a class=\"id\" href=\"#handle\">handle</a>), &amp;(<a class=\"id\" href=\"#x\">x</a>), sizeof(<a class=\"id\" href=\"#x\">x</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This has to have a higher priority than migration_notifier in sched.c.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#perf_cpu_notifier\">perf_cpu_notifier</a>(<a class=\"id\" href=\"#fn\">fn</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#fn\">fn</a>##<a class=\"id\" href=\"#_nb\">_nb</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> =<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#fn\">fn</a>, .<a class=\"id\" href=\"#priority\">priority</a> = <a class=\"id\" href=\"#CPU_PRI_PERF\">CPU_PRI_PERF</a> }; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(&amp;<a class=\"id\" href=\"#fn\">fn</a>##<a class=\"id\" href=\"#_nb\">_nb</a>, (unsigned long)<a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(void *)(unsigned long)<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(&amp;<a class=\"id\" href=\"#fn\">fn</a>##<a class=\"id\" href=\"#_nb\">_nb</a>, (unsigned long)<a class=\"id\" href=\"#CPU_STARTING\">CPU_STARTING</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(void *)(unsigned long)<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(&amp;<a class=\"id\" href=\"#fn\">fn</a>##<a class=\"id\" href=\"#_nb\">_nb</a>, (unsigned long)<a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(void *)(unsigned long)<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#fn\">fn</a>##<a class=\"id\" href=\"#_nb\">_nb</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
];
xr_frag_insert('l/59/07369045abdafc7d2f7660467ab16f108d6427.xr', __xr_tmp);
