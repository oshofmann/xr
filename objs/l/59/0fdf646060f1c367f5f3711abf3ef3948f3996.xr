var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic PPP layer for Linux.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 1999-2002 Paul Mackerras.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *  modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *  as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *  2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The generic PPP layer handles the PPP network interfaces, the</span>", 
"<span class=\"comment\"> * /dev/ppp device, packet and VJ compression, and multilink.</span>", 
"<span class=\"comment\"> * It talks to PPP `channels' via the interface defined in</span>", 
"<span class=\"comment\"> * include/linux/ppp_channel.h.  Channels provide the basic means for</span>", 
"<span class=\"comment\"> * sending and receiving PPP frames on some kind of communications</span>", 
"<span class=\"comment\"> * channel.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Part of the code in this driver was inspired by the old async-only</span>", 
"<span class=\"comment\"> * PPP driver, written by Michael Callahan and Al Longyear, and</span>", 
"<span class=\"comment\"> * subsequently hacked by Paul Mackerras.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ==FILEVERSION 20041108==</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ppp_defs\">ppp_defs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#filter\">filter</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_ppp\">if_ppp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ppp_channel\">ppp_channel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ppp\">ppp</a>-<a class=\"id\" href=\"#comp\">comp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtnetlink\">rtnetlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_arp\">if_arp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tcp\">tcp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#slhc_vj\">slhc_vj</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#net_namespace\">net_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#generic\">generic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PPP_VERSION\">PPP_VERSION</a><span class=\"ts\"/>\"2.4.2\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Network protocols we support.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NP_IP\">NP_IP</a><span class=\"ts\"/>0<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Internet Protocol V4 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NP_IPV6\">NP_IPV6</a><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Internet Protocol V6 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NP_IPX\">NP_IPX</a><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* IPX protocol */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NP_AT\">NP_AT</a><span class=\"ts\"/>3<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Appletalk protocol */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NP_MPLS_UC\">NP_MPLS_UC</a> 4<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* MPLS unicast */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NP_MPLS_MC\">NP_MPLS_MC</a> 5<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* MPLS multicast */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUM_NP\">NUM_NP</a><span class=\"ts\"/>6<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Number of NPs. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MPHDRLEN\">MPHDRLEN</a><span class=\"ts\"/>6<span class=\"ts\"/><span class=\"comment\">/* multilink protocol header length */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MPHDRLEN_SSN\">MPHDRLEN_SSN</a><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"comment\">/* ditto with short sequence numbers */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * An instance of /dev/ppp can be associated with either a ppp</span>", 
"<span class=\"comment\"> * interface unit or a ppp channel.  In both cases, file-&gt;private_data</span>", 
"<span class=\"comment\"> * points to one of these.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a> {", 
"<span class=\"ts\"/>enum {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INTERFACE\">INTERFACE</a>=1, <a class=\"id\" href=\"#CHANNEL\">CHANNEL</a>", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kind\">kind</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> <a class=\"id\" href=\"#xq\">xq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pppd transmit queue */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> <a class=\"id\" href=\"#rq\">rq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* receive queue for pppd */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#rwait\">rwait</a>;<span class=\"ts\"/><span class=\"comment\">/* for poll on reading /dev/ppp */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#refcnt\">refcnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* # refs (incl /dev/ppp attached) */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hdrlen\">hdrlen</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* space to leave for headers */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* interface unit / channel number */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dead\">dead</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unit/channel has been shut down */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_TO_X\">PF_TO_X</a>(<a class=\"id\" href=\"#pf\">pf</a>, <a class=\"id\" href=\"#X\">X</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#pf\">pf</a>, <a class=\"id\" href=\"#X\">X</a>, <a class=\"id\" href=\"#file\">file</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_TO_PPP\">PF_TO_PPP</a>(<a class=\"id\" href=\"#pf\">pf</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PF_TO_X\">PF_TO_X</a>(<a class=\"id\" href=\"#pf\">pf</a>, struct <a class=\"id\" href=\"#ppp\">ppp</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PF_TO_CHANNEL\">PF_TO_CHANNEL</a>(<a class=\"id\" href=\"#pf\">pf</a>)<span class=\"ts\"/><a class=\"id\" href=\"#PF_TO_X\">PF_TO_X</a>(<a class=\"id\" href=\"#pf\">pf</a>, struct <a class=\"id\" href=\"#channel\">channel</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Data structure describing one ppp unit.</span>", 
"<span class=\"comment\"> * A ppp unit corresponds to a ppp network interface device</span>", 
"<span class=\"comment\"> * and represents a multilink bundle.</span>", 
"<span class=\"comment\"> * It can have 0 or more ppp channels connected to it.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ppp\">ppp</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* stuff for read/write/poll 0 */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a><span class=\"ts\"/>*<a class=\"id\" href=\"#owner\">owner</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* file that owns this unit 48 */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#channels\">channels</a>;<span class=\"ts\"/><span class=\"comment\">/* list of attached channels 4c */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n_channels\">n_channels</a>;<span class=\"ts\"/><span class=\"comment\">/* how many channels are attached 54 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><a class=\"id\" href=\"#rlock\">rlock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* lock for receive side 58 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><a class=\"id\" href=\"#wlock\">wlock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* lock for transmit side 5c */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mru\">mru</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* max receive unit 60 */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* control bits 64 */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#xstate\">xstate</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* transmit state bits 68 */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#rstate\">rstate</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* receive state bits 6c */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug\">debug</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* debug flags 70 */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#vj\">vj</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* state for VJ header compression */</span>", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#NPmode\">NPmode</a><span class=\"ts\"/><a class=\"id\" href=\"#npmode\">npmode</a>[<a class=\"id\" href=\"#NUM_NP\">NUM_NP</a>];<span class=\"ts\"/><span class=\"comment\">/* what to do with each net proto 78 */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/>*<a class=\"id\" href=\"#xmit_pending\">xmit_pending</a>;<span class=\"ts\"/><span class=\"comment\">/* a packet ready to go out 88 */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compressor\">compressor</a> *<a class=\"id\" href=\"#xcomp\">xcomp</a>;<span class=\"ts\"/><span class=\"comment\">/* transmit packet compressor 8c */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#xc_state\">xc_state</a>;<span class=\"ts\"/><span class=\"comment\">/* its internal state 90 */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compressor\">compressor</a> *<a class=\"id\" href=\"#rcomp\">rcomp</a>;<span class=\"ts\"/><span class=\"comment\">/* receive decompressor 94 */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rc_state\">rc_state</a>;<span class=\"ts\"/><span class=\"comment\">/* its internal state 98 */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#last_xmit\">last_xmit</a>;<span class=\"ts\"/><span class=\"comment\">/* jiffies when last pkt sent 9c */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#last_recv\">last_recv</a>;<span class=\"ts\"/><span class=\"comment\">/* jiffies when last pkt rcvd a0 */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* network interface device a4 */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#closing\">closing</a>;<span class=\"ts\"/><span class=\"comment\">/* is device closing down? a8 */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_MULTILINK\">CONFIG_PPP_MULTILINK</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nxchan\">nxchan</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* next channel to send something on */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nxseq\">nxseq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* next sequence number to send */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mrru\">mrru</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* MP: max reconst. receive unit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nextseq\">nextseq</a>;<span class=\"ts\"/><span class=\"comment\">/* MP: seq no of next packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minseq\">minseq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* MP: min of most recent seqnos */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> <a class=\"id\" href=\"#mrq\">mrq</a>;<span class=\"ts\"/><span class=\"comment\">/* MP: receive reconstruction queue */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_MULTILINK */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_FILTER\">CONFIG_PPP_FILTER</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_filter\">sock_filter</a> *<a class=\"id\" href=\"#pass_filter\">pass_filter</a>;<span class=\"ts\"/><span class=\"comment\">/* filter for packets to pass */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_filter\">sock_filter</a> *<a class=\"id\" href=\"#active_filter\">active_filter</a>;<span class=\"comment\">/* filter for pkts to reset idle */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pass_len\">pass_len</a>, <a class=\"id\" href=\"#active_len\">active_len</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_FILTER */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ppp_net\">ppp_net</a>;<span class=\"ts\"/><span class=\"comment\">/* the net we belong to */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bits in flags: SC_NO_TCP_CCID, SC_CCP_OPEN, SC_CCP_UP, SC_LOOP_TRAFFIC,</span>", 
"<span class=\"comment\"> * SC_MULTILINK, SC_MP_SHORTSEQ, SC_MP_XSHORTSEQ, SC_COMP_TCP, SC_REJ_COMP_TCP,</span>", 
"<span class=\"comment\"> * SC_MUST_COMP</span>", 
"<span class=\"comment\"> * Bits in rstate: SC_DECOMP_RUN, SC_DC_ERROR, SC_DC_FERROR.</span>", 
"<span class=\"comment\"> * Bits in xstate: SC_COMP_RUN</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SC_FLAG_BITS\">SC_FLAG_BITS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#SC_NO_TCP_CCID\">SC_NO_TCP_CCID</a>|<a class=\"id\" href=\"#SC_CCP_OPEN\">SC_CCP_OPEN</a>|<a class=\"id\" href=\"#SC_CCP_UP\">SC_CCP_UP</a>|<a class=\"id\" href=\"#SC_LOOP_TRAFFIC\">SC_LOOP_TRAFFIC</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> |<a class=\"id\" href=\"#SC_MULTILINK\">SC_MULTILINK</a>|<a class=\"id\" href=\"#SC_MP_SHORTSEQ\">SC_MP_SHORTSEQ</a>|<a class=\"id\" href=\"#SC_MP_XSHORTSEQ\">SC_MP_XSHORTSEQ</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> |<a class=\"id\" href=\"#SC_COMP_TCP\">SC_COMP_TCP</a>|<a class=\"id\" href=\"#SC_REJ_COMP_TCP\">SC_REJ_COMP_TCP</a>|<a class=\"id\" href=\"#SC_MUST_COMP\">SC_MUST_COMP</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Private data structure for each channel.</span>", 
"<span class=\"comment\"> * This includes the data structure used for multilink.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#channel\">channel</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* stuff for read/write/poll */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* link in all/new_channels list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>;<span class=\"ts\"/><span class=\"comment\">/* public channel data structure */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> <a class=\"id\" href=\"#chan_sem\">chan_sem</a>;<span class=\"ts\"/><span class=\"comment\">/* protects `chan' during chan ioctl */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><a class=\"id\" href=\"#downl\">downl</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* protects `chan', file.xq dequeue */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ppp\">ppp</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ppp unit we're connected to */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a><span class=\"ts\"/>*<a class=\"id\" href=\"#chan_net\">chan_net</a>;<span class=\"ts\"/><span class=\"comment\">/* the net channel belongs to */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#clist\">clist</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* link in list of channels per unit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwlock_t\">rwlock_t</a><span class=\"ts\"/><a class=\"id\" href=\"#upl\">upl</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* protects `ppp' */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_MULTILINK\">CONFIG_PPP_MULTILINK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avail\">avail</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* flag used in multilink stuff */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#had_frag\">had_frag</a>;<span class=\"ts\"/><span class=\"comment\">/* &gt;= 1 fragments have been sent */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lastseq\">lastseq</a>;<span class=\"ts\"/><span class=\"comment\">/* MP: last sequence # received */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#speed\">speed</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* speed of the corresponding ppp channel*/</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_MULTILINK */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SMP locking issues:</span>", 
"<span class=\"comment\"> * Both the ppp.rlock and ppp.wlock locks protect the ppp.channels</span>", 
"<span class=\"comment\"> * list and the ppp.n_channels field, you need to take both locks</span>", 
"<span class=\"comment\"> * before you modify them.</span>", 
"<span class=\"comment\"> * The lock ordering is: channel.upl -&gt; ppp.wlock -&gt; ppp.rlock -&gt;</span>", 
"<span class=\"comment\"> * channel.downl.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#ppp_mutex\">ppp_mutex</a>);", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#ppp_unit_count\">ppp_unit_count</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#channel_count\">channel_count</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"", 
"<span class=\"comment\">/* per-net private data for this module */</span>", 
"static int <a class=\"id\" href=\"#ppp_net_id\">ppp_net_id</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* units to ppp mapping */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr\">idr</a> <a class=\"id\" href=\"#units_idr\">units_idr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all_ppp_mutex protects the units_idr mapping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It also ensures that finding a ppp unit in the units_idr</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * map and updating its file.refcnt field is atomic.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#all_ppp_mutex\">all_ppp_mutex</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* channels */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#all_channels\">all_channels</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#new_channels\">new_channels</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#last_channel_index\">last_channel_index</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all_channels_lock protects all_channels and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * last_channel_index, and the atomicity of find</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a channel and updating its file.refcnt field.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#all_channels_lock\">all_channels_lock</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Get the PPP protocol number from a skb */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PPP_PROTO\">PPP_PROTO</a>(<a class=\"id\" href=\"#skb\">skb</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#data\">data</a>[0] << 8) + (<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#data\">data</a>[1])", 
"", 
"<span class=\"comment\">/* We limit the length of ppp-&gt;file.rq to this (arbitrary) value */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PPP_MAX_RQLEN\">PPP_MAX_RQLEN</a><span class=\"ts\"/>32", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Maximum number of multilink fragments queued up.</span>", 
"<span class=\"comment\"> * This has to be large enough to cope with the maximum latency of</span>", 
"<span class=\"comment\"> * the slowest channel relative to the others.  Strictly it should</span>", 
"<span class=\"comment\"> * depend on the number of channels and their characteristics.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PPP_MP_MAX_QLEN\">PPP_MP_MAX_QLEN</a><span class=\"ts\"/>128", 
"", 
"<span class=\"comment\">/* Multilink header bits. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#B\">B</a><span class=\"ts\"/>0x80<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this fragment begins a packet */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#E\">E</a><span class=\"ts\"/>0x40<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this fragment ends a packet */</span>", 
"", 
"<span class=\"comment\">/* Compare multilink sequence numbers (assumed to be 32 bits wide) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#seq_before\">seq_before</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#s32\">s32</a>)((<a class=\"id\" href=\"#a\">a</a>) - (<a class=\"id\" href=\"#b\">b</a>)) &lt; 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#seq_after\">seq_after</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#s32\">s32</a>)((<a class=\"id\" href=\"#a\">a</a>) - (<a class=\"id\" href=\"#b\">b</a>)) &gt; 0)", 
"", 
"<span class=\"comment\">/* Prototypes. */</span>", 
"static int <a class=\"id\" href=\"#ppp_unattached_ioctl\">ppp_unattached_ioctl</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a> *<a class=\"id\" href=\"#pf\">pf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"static void <a class=\"id\" href=\"#ppp_xmit_process\">ppp_xmit_process</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"static void <a class=\"id\" href=\"#ppp_send_frame\">ppp_send_frame</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"static void <a class=\"id\" href=\"#ppp_push\">ppp_push</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"static void <a class=\"id\" href=\"#ppp_channel_push\">ppp_channel_push</a>(struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>);", 
"static void <a class=\"id\" href=\"#ppp_receive_frame\">ppp_receive_frame</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>);", 
"static void <a class=\"id\" href=\"#ppp_receive_error\">ppp_receive_error</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"static void <a class=\"id\" href=\"#ppp_receive_nonmp_frame\">ppp_receive_nonmp_frame</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"static struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#ppp_decompress_frame\">ppp_decompress_frame</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_MULTILINK\">CONFIG_PPP_MULTILINK</a>", 
"static void <a class=\"id\" href=\"#ppp_receive_mp_frame\">ppp_receive_mp_frame</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>);", 
"static void <a class=\"id\" href=\"#ppp_mp_insert\">ppp_mp_insert</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"static struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#ppp_mp_reconstruct\">ppp_mp_reconstruct</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"static int <a class=\"id\" href=\"#ppp_mp_explode\">ppp_mp_explode</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_MULTILINK */</span>", 
"static int <a class=\"id\" href=\"#ppp_set_compress\">ppp_set_compress</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"static void <a class=\"id\" href=\"#ppp_ccp_peek\">ppp_ccp_peek</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#inbound\">inbound</a>);", 
"static void <a class=\"id\" href=\"#ppp_ccp_closed\">ppp_ccp_closed</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"static struct <a class=\"id\" href=\"#compressor\">compressor</a> *<a class=\"id\" href=\"#find_compressor\">find_compressor</a>(int <a class=\"id\" href=\"#type\">type</a>);", 
"static void <a class=\"id\" href=\"#ppp_get_stats\">ppp_get_stats</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#ppp_stats\">ppp_stats</a> *<a class=\"id\" href=\"#st\">st</a>);", 
"static struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp_create_interface\">ppp_create_interface</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#unit\">unit</a>, int *<a class=\"id\" href=\"#retp\">retp</a>);", 
"static void <a class=\"id\" href=\"#init_ppp_file\">init_ppp_file</a>(struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a> *<a class=\"id\" href=\"#pf\">pf</a>, int <a class=\"id\" href=\"#kind\">kind</a>);", 
"static void <a class=\"id\" href=\"#ppp_shutdown_interface\">ppp_shutdown_interface</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"static void <a class=\"id\" href=\"#ppp_destroy_interface\">ppp_destroy_interface</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"static struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp_find_unit\">ppp_find_unit</a>(struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#pn\">pn</a>, int <a class=\"id\" href=\"#unit\">unit</a>);", 
"static struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#ppp_find_channel\">ppp_find_channel</a>(struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#pn\">pn</a>, int <a class=\"id\" href=\"#unit\">unit</a>);", 
"static int <a class=\"id\" href=\"#ppp_connect_channel\">ppp_connect_channel</a>(struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>, int <a class=\"id\" href=\"#unit\">unit</a>);", 
"static int <a class=\"id\" href=\"#ppp_disconnect_channel\">ppp_disconnect_channel</a>(struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>);", 
"static void <a class=\"id\" href=\"#ppp_destroy_channel\">ppp_destroy_channel</a>(struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>);", 
"static int <a class=\"id\" href=\"#unit_get\">unit_get</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"static int <a class=\"id\" href=\"#unit_set\">unit_set</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>, int <a class=\"id\" href=\"#n\">n</a>);", 
"static void <a class=\"id\" href=\"#unit_put\">unit_put</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#n\">n</a>);", 
"static void *<a class=\"id\" href=\"#unit_find\">unit_find</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"static struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#ppp_class\">ppp_class</a>;", 
"", 
"<span class=\"comment\">/* per net-namespace data */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#ppp_pernet\">ppp_pernet</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#net\">net</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net_generic\">net_generic</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ppp_net_id\">ppp_net_id</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Translates a PPP protocol number to a NP index (NP == network protocol) */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#proto_to_npindex\">proto_to_npindex</a>(int <a class=\"id\" href=\"#proto\">proto</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#proto\">proto</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPP_IP\">PPP_IP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_IP\">NP_IP</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPP_IPV6\">PPP_IPV6</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_IPV6\">NP_IPV6</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPP_IPX\">PPP_IPX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_IPX\">NP_IPX</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPP_AT\">PPP_AT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_AT\">NP_AT</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPP_MPLS_UC\">PPP_MPLS_UC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_MPLS_UC\">NP_MPLS_UC</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPP_MPLS_MC\">PPP_MPLS_MC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_MPLS_MC\">NP_MPLS_MC</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Translates an NP index into a PPP protocol number */</span>", 
"static const int <a class=\"id\" href=\"#npindex_to_proto\">npindex_to_proto</a>[<a class=\"id\" href=\"#NUM_NP\">NUM_NP</a>] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PPP_IP\">PPP_IP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PPP_IPV6\">PPP_IPV6</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PPP_IPX\">PPP_IPX</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PPP_AT\">PPP_AT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PPP_MPLS_UC\">PPP_MPLS_UC</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PPP_MPLS_MC\">PPP_MPLS_MC</a>,", 
"};", 
"", 
"<span class=\"comment\">/* Translates an ethertype into an NP index */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ethertype_to_npindex\">ethertype_to_npindex</a>(int <a class=\"id\" href=\"#ethertype\">ethertype</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ethertype\">ethertype</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ETH_P_IP\">ETH_P_IP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_IP\">NP_IP</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ETH_P_IPV6\">ETH_P_IPV6</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_IPV6\">NP_IPV6</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ETH_P_IPX\">ETH_P_IPX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_IPX\">NP_IPX</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ETH_P_PPPTALK\">ETH_P_PPPTALK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ETH_P_ATALK\">ETH_P_ATALK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_AT\">NP_AT</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ETH_P_MPLS_UC\">ETH_P_MPLS_UC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_MPLS_UC\">NP_MPLS_UC</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ETH_P_MPLS_MC\">ETH_P_MPLS_MC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NP_MPLS_MC\">NP_MPLS_MC</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/* Translates an NP index into an ethertype */</span>", 
"static const int <a class=\"id\" href=\"#npindex_to_ethertype\">npindex_to_ethertype</a>[<a class=\"id\" href=\"#NUM_NP\">NUM_NP</a>] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ETH_P_IP\">ETH_P_IP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ETH_P_IPV6\">ETH_P_IPV6</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ETH_P_IPX\">ETH_P_IPX</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ETH_P_PPPTALK\">ETH_P_PPPTALK</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ETH_P_MPLS_UC\">ETH_P_MPLS_UC</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ETH_P_MPLS_MC\">ETH_P_MPLS_MC</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Locking shorthand.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ppp_xmit_lock\">ppp_xmit_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>)<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;(<a class=\"id\" href=\"#ppp\">ppp</a>)-><a class=\"id\" href=\"#wlock\">wlock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ppp_xmit_unlock\">ppp_xmit_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>)<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;(<a class=\"id\" href=\"#ppp\">ppp</a>)-><a class=\"id\" href=\"#wlock\">wlock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ppp_recv_lock\">ppp_recv_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>)<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;(<a class=\"id\" href=\"#ppp\">ppp</a>)-><a class=\"id\" href=\"#rlock\">rlock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ppp_recv_unlock\">ppp_recv_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>)<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;(<a class=\"id\" href=\"#ppp\">ppp</a>)-><a class=\"id\" href=\"#rlock\">rlock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ppp_lock\">ppp_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>)<span class=\"ts\"/><span class=\"ts\"/>do { <a class=\"id\" href=\"#ppp_xmit_lock\">ppp_xmit_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ppp_recv_lock\">ppp_recv_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>); } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ppp_unlock\">ppp_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>)<span class=\"ts\"/><span class=\"ts\"/>do { <a class=\"id\" href=\"#ppp_recv_unlock\">ppp_recv_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ppp_xmit_unlock\">ppp_xmit_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>); } while (0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * /dev/ppp device routines.</span>", 
"<span class=\"comment\"> * The /dev/ppp device is used by pppd to control the ppp unit.</span>", 
"<span class=\"comment\"> * It supports the read, write, ioctl and poll functions.</span>", 
"<span class=\"comment\"> * Open instances of /dev/ppp can be in one of three states:</span>", 
"<span class=\"comment\"> * unattached, attached to a ppp unit, or attached to a ppp channel.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ppp_open\">ppp_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This could (should?) be enforced by the permissions on /dev/ppp.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_NET_ADMIN\">CAP_NET_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ppp_release\">ppp_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#unused\">unused</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a> *<a class=\"id\" href=\"#pf\">pf</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pf\">pf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#kind\">kind</a> == <a class=\"id\" href=\"#INTERFACE\">INTERFACE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#PF_TO_PPP\">PF_TO_PPP</a>(<a class=\"id\" href=\"#pf\">pf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a> == <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#owner\">owner</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_shutdown_interface\">ppp_shutdown_interface</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#kind\">kind</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#INTERFACE\">INTERFACE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_destroy_interface\">ppp_destroy_interface</a>(<a class=\"id\" href=\"#PF_TO_PPP\">PF_TO_PPP</a>(<a class=\"id\" href=\"#pf\">pf</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#CHANNEL\">CHANNEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_destroy_channel\">ppp_destroy_channel</a>(<a class=\"id\" href=\"#PF_TO_CHANNEL\">PF_TO_CHANNEL</a>(<a class=\"id\" href=\"#pf\">pf</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ppp_read\">ppp_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a> *<a class=\"id\" href=\"#pf\">pf</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iovec\">iovec</a> <a class=\"id\" href=\"#iov\">iov</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pf\">pf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(&amp;<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#rwait\">rwait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>(&amp;<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#dead\">dead</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#kind\">kind</a> == <a class=\"id\" href=\"#INTERFACE\">INTERFACE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Return 0 (EOF) on an interface that has no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * channels connected, unless it is looping</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * network traffic (demand mode).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#PF_TO_PPP\">PF_TO_PPP</a>(<a class=\"id\" href=\"#pf\">pf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#n_channels\">n_channels</a> == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_LOOP_TRAFFIC\">SC_LOOP_TRAFFIC</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#rwait\">rwait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#outf\">outf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>.<a class=\"id\" href=\"#iov_base\">iov_base</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>.<a class=\"id\" href=\"#iov_len\">iov_len</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_copy_datagram_iovec\">skb_copy_datagram_iovec</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, &amp;<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#outf\">outf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
" <a class=\"id\" href=\"#outf\">outf</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ppp_write\">ppp_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a> *<a class=\"id\" href=\"#pf\">pf</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pf\">pf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#count\">count</a> + <a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#hdrlen\">hdrlen</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#hdrlen\">hdrlen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#count\">count</a>), <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_tail\">skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#xq\">xq</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#kind\">kind</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INTERFACE\">INTERFACE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_xmit_process\">ppp_xmit_process</a>(<a class=\"id\" href=\"#PF_TO_PPP\">PF_TO_PPP</a>(<a class=\"id\" href=\"#pf\">pf</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CHANNEL\">CHANNEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_channel_push\">ppp_channel_push</a>(<a class=\"id\" href=\"#PF_TO_CHANNEL\">PF_TO_CHANNEL</a>(<a class=\"id\" href=\"#pf\">pf</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* No kernel lock - fine */</span>", 
"static unsigned int <a class=\"id\" href=\"#ppp_poll\">ppp_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a> *<a class=\"id\" href=\"#pf\">pf</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pf\">pf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_wait\">poll_wait</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#rwait\">rwait</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#POLLOUT\">POLLOUT</a> | <a class=\"id\" href=\"#POLLWRNORM\">POLLWRNORM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_peek\">skb_peek</a>(&amp;<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#rq\">rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#POLLIN\">POLLIN</a> | <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#dead\">dead</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#POLLHUP\">POLLHUP</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#kind\">kind</a> == <a class=\"id\" href=\"#INTERFACE\">INTERFACE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* see comment in ppp_read */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#PF_TO_PPP\">PF_TO_PPP</a>(<a class=\"id\" href=\"#pf\">pf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#n_channels\">n_channels</a> == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_LOOP_TRAFFIC\">SC_LOOP_TRAFFIC</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#POLLIN\">POLLIN</a> | <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_FILTER\">CONFIG_PPP_FILTER</a>", 
"static int <a class=\"id\" href=\"#get_filter\">get_filter</a>(void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>, struct <a class=\"id\" href=\"#sock_filter\">sock_filter</a> **<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_fprog\">sock_fprog</a> <a class=\"id\" href=\"#uprog\">uprog</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_filter\">sock_filter</a> *<a class=\"id\" href=\"#code\">code</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#uprog\">uprog</a>, <a class=\"id\" href=\"#arg\">arg</a>, sizeof(<a class=\"id\" href=\"#uprog\">uprog</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#uprog\">uprog</a>.<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#uprog\">uprog</a>.<a class=\"id\" href=\"#len\">len</a> * sizeof(struct <a class=\"id\" href=\"#sock_filter\">sock_filter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#code\">code</a> = <a class=\"id\" href=\"#memdup_user\">memdup_user</a>(<a class=\"id\" href=\"#uprog\">uprog</a>.<a class=\"id\" href=\"#filter\">filter</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#code\">code</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#code\">code</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sk_chk_filter\">sk_chk_filter</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#uprog\">uprog</a>.<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#code\">code</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#code\">code</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#uprog\">uprog</a>.<a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_FILTER */</span>", 
"", 
"static long <a class=\"id\" href=\"#ppp_ioctl\">ppp_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a> *<a class=\"id\" href=\"#pf\">pf</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#val2\">val2</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_idle\">ppp_idle</a> <a class=\"id\" href=\"#idle\">idle</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#npioctl\">npioctl</a> <a class=\"id\" href=\"#npi\">npi</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unit\">unit</a>, <a class=\"id\" href=\"#cflags\">cflags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#vj\">vj</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argp\">argp</a> = (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#argp\">argp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pf\">pf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ppp_unattached_ioctl\">ppp_unattached_ioctl</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#net_ns\">net_ns</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pf\">pf</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#PPPIOCDETACH\">PPPIOCDETACH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We have to be careful here... if the file descriptor</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has been dup'd, we could have another process in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * middle of a poll using the same file *, so we had</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * better not free the interface data structures -</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * instead we fail the ioctl.  Even in this case, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * shut down the interface if we are the owner of it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Actually, we should get rid of PPPIOCDETACH, userland</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (i.e. pppd) could achieve the same effect by closing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this fd and reopening /dev/ppp.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ppp_mutex\">ppp_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#kind\">kind</a> == <a class=\"id\" href=\"#INTERFACE\">INTERFACE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#PF_TO_PPP\">PF_TO_PPP</a>(<a class=\"id\" href=\"#pf\">pf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a> == <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#owner\">owner</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_shutdown_interface\">ppp_shutdown_interface</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_count\">f_count</a>) <= 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_release\">ppp_release</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"PPPIOCDETACH file->f_count=%ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_count\">f_count</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ppp_mutex\">ppp_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#kind\">kind</a> == <a class=\"id\" href=\"#CHANNEL\">CHANNEL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ppp_mutex\">ppp_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a> = <a class=\"id\" href=\"#PF_TO_CHANNEL\">PF_TO_CHANNEL</a>(<a class=\"id\" href=\"#pf\">pf</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCCONNECT\">PPPIOCCONNECT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#unit\">unit</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ppp_connect_channel\">ppp_connect_channel</a>(<a class=\"id\" href=\"#pch\">pch</a>, <a class=\"id\" href=\"#unit\">unit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCDISCONN\">PPPIOCDISCONN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ppp_disconnect_channel\">ppp_disconnect_channel</a>(<a class=\"id\" href=\"#pch\">pch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan_sem\">chan_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a> && <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ioctl\">ioctl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ioctl\">ioctl</a>(<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan_sem\">chan_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ppp_mutex\">ppp_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pf\">pf</a>-><a class=\"id\" href=\"#kind\">kind</a> != <a class=\"id\" href=\"#INTERFACE\">INTERFACE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* can't happen */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PPP: not interface or channel??\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ppp_mutex\">ppp_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#PF_TO_PPP\">PF_TO_PPP</a>(<a class=\"id\" href=\"#pf\">pf</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCSMRU\">PPPIOCSMRU</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mru\">mru</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCSFLAGS\">PPPIOCSFLAGS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_lock\">ppp_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cflags\">cflags</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#SC_FLAG_BITS\">SC_FLAG_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_unlock\">ppp_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cflags\">cflags</a> &amp; <a class=\"id\" href=\"#SC_CCP_OPEN\">SC_CCP_OPEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_ccp_closed\">ppp_ccp_closed</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCGFLAGS\">PPPIOCGFLAGS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xstate\">xstate</a> | <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCSCOMPRESS\">PPPIOCSCOMPRESS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ppp_set_compress\">ppp_set_compress</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCGUNIT\">PPPIOCGUNIT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCSDEBUG\">PPPIOCSDEBUG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#debug\">debug</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCGDEBUG\">PPPIOCGDEBUG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#debug\">debug</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCGIDLE\">PPPIOCGIDLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idle\">idle</a>.<a class=\"id\" href=\"#xmit_idle\">xmit_idle</a> = (<a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#last_xmit\">last_xmit</a>) / <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idle\">idle</a>.<a class=\"id\" href=\"#recv_idle\">recv_idle</a> = (<a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#last_recv\">last_recv</a>) / <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#argp\">argp</a>, &amp;<a class=\"id\" href=\"#idle\">idle</a>, sizeof(<a class=\"id\" href=\"#idle\">idle</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCSMAXCID\">PPPIOCSMAXCID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val2\">val2</a> = 15;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#val\">val</a> >> 16) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val2\">val2</a> = <a class=\"id\" href=\"#val\">val</a> >> 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> &= 0xffff;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vj\">vj</a> = <a class=\"id\" href=\"#slhc_init\">slhc_init</a>(<a class=\"id\" href=\"#val2\">val2</a>+1, <a class=\"id\" href=\"#val\">val</a>+1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vj\">vj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PPP: no memory (VJ compressor)\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_lock\">ppp_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slhc_free\">slhc_free</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a> = <a class=\"id\" href=\"#vj\">vj</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_unlock\">ppp_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCGNPMODE\">PPPIOCGNPMODE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCSNPMODE\">PPPIOCSNPMODE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#npi\">npi</a>, <a class=\"id\" href=\"#argp\">argp</a>, sizeof(<a class=\"id\" href=\"#npi\">npi</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proto_to_npindex\">proto_to_npindex</a>(<a class=\"id\" href=\"#npi\">npi</a>.<a class=\"id\" href=\"#protocol\">protocol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#PPPIOCGNPMODE\">PPPIOCGNPMODE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#npi\">npi</a>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#npmode\">npmode</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#argp\">argp</a>, &amp;<a class=\"id\" href=\"#npi\">npi</a>, sizeof(<a class=\"id\" href=\"#npi\">npi</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#npmode\">npmode</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#npi\">npi</a>.<a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we may be able to transmit more packets now (??) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_wake_queue\">netif_wake_queue</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_FILTER\">CONFIG_PPP_FILTER</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCSPASS\">PPPIOCSPASS</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_filter\">sock_filter</a> *<a class=\"id\" href=\"#code\">code</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_filter\">get_filter</a>(<a class=\"id\" href=\"#argp\">argp</a>, &amp;<a class=\"id\" href=\"#code\">code</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_lock\">ppp_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_filter\">pass_filter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_filter\">pass_filter</a> = <a class=\"id\" href=\"#code\">code</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_len\">pass_len</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_unlock\">ppp_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCSACTIVE\">PPPIOCSACTIVE</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_filter\">sock_filter</a> *<a class=\"id\" href=\"#code\">code</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_filter\">get_filter</a>(<a class=\"id\" href=\"#argp\">argp</a>, &amp;<a class=\"id\" href=\"#code\">code</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_lock\">ppp_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_filter\">active_filter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_filter\">active_filter</a> = <a class=\"id\" href=\"#code\">code</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_len\">active_len</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_unlock\">ppp_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_FILTER */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_MULTILINK\">CONFIG_PPP_MULTILINK</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCSMRRU\">PPPIOCSMRRU</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_recv_lock\">ppp_recv_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mrru\">mrru</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_recv_unlock\">ppp_recv_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_MULTILINK */</span>", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ppp_mutex\">ppp_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ppp_unattached_ioctl\">ppp_unattached_ioctl</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#ppp_file\">ppp_file</a> *<a class=\"id\" href=\"#pf\">pf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unit\">unit</a>, <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#pn\">pn</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a> = (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ppp_mutex\">ppp_mutex</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCNEWUNIT\">PPPIOCNEWUNIT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Create a new ppp unit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#unit\">unit</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#ppp_create_interface\">ppp_create_interface</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#unit\">unit</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = &amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCATTACH\">PPPIOCATTACH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Attach to an existing ppp unit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#unit\">unit</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pn\">pn</a> = <a class=\"id\" href=\"#ppp_pernet\">ppp_pernet</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_ppp_mutex\">all_ppp_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#ppp_find_unit\">ppp_find_unit</a>(<a class=\"id\" href=\"#pn\">pn</a>, <a class=\"id\" href=\"#unit\">unit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = &amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_ppp_mutex\">all_ppp_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPPIOCATTCHAN\">PPPIOCATTCHAN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#unit\">unit</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pn\">pn</a> = <a class=\"id\" href=\"#ppp_pernet\">ppp_pernet</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_channels_lock\">all_channels_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#ppp_find_channel\">ppp_find_channel</a>(<a class=\"id\" href=\"#pn\">pn</a>, <a class=\"id\" href=\"#unit\">unit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = &amp;<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_channels_lock\">all_channels_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ppp_mutex\">ppp_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ppp_device_fops\">ppp_device_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ppp_read\">ppp_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ppp_write\">ppp_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ppp_poll\">ppp_poll</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ppp_ioctl\">ppp_ioctl</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ppp_open\">ppp_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ppp_release\">ppp_release</a>", 
"};", 
"", 
"static <a class=\"id\" href=\"#__net_init\">__net_init</a> int <a class=\"id\" href=\"#ppp_init_net\">ppp_init_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#pn\">pn</a> = <a class=\"id\" href=\"#net_generic\">net_generic</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ppp_net_id\">ppp_net_id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_init\">idr_init</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#units_idr\">units_idr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_ppp_mutex\">all_ppp_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_channels\">all_channels</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#new_channels\">new_channels</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#all_channels_lock\">all_channels_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__net_exit\">__net_exit</a> void <a class=\"id\" href=\"#ppp_exit_net\">ppp_exit_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a> *<a class=\"id\" href=\"#pn\">pn</a> = <a class=\"id\" href=\"#net_generic\">net_generic</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ppp_net_id\">ppp_net_id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_destroy\">idr_destroy</a>(&amp;<a class=\"id\" href=\"#pn\">pn</a>-><a class=\"id\" href=\"#units_idr\">units_idr</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> <a class=\"id\" href=\"#ppp_net_ops\">ppp_net_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#init\">init</a> = <a class=\"id\" href=\"#ppp_init_net\">ppp_init_net</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#exit\">exit</a> = <a class=\"id\" href=\"#ppp_exit_net\">ppp_exit_net</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#id\">id</a>   = &amp;<a class=\"id\" href=\"#ppp_net_id\">ppp_net_id</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#ppp_net\">ppp_net</a>),", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PPP_MAJOR\">PPP_MAJOR</a><span class=\"ts\"/>108", 
"", 
"<span class=\"comment\">/* Called at boot time if ppp is compiled into the kernel,</span>", 
"<span class=\"comment\">   or at module load time (from init_module) if compiled as a module. */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ppp_init\">ppp_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PPP generic driver version \" <a class=\"id\" href=\"#PPP_VERSION\">PPP_VERSION</a> \"\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_pernet_device\">register_pernet_device</a>(&amp;<a class=\"id\" href=\"#ppp_net_ops\">ppp_net_ops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"failed to register PPP pernet device (%d)\\n\", <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_chrdev\">register_chrdev</a>(<a class=\"id\" href=\"#PPP_MAJOR\">PPP_MAJOR</a>, \"ppp\", &amp;<a class=\"id\" href=\"#ppp_device_fops\">ppp_device_fops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"failed to register PPP device (%d)\\n\", <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_net\">out_net</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_class\">ppp_class</a> = <a class=\"id\" href=\"#class_create\">class_create</a>(<a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, \"ppp\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ppp_class\">ppp_class</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ppp_class\">ppp_class</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_chrdev\">out_chrdev</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* not a big deal if we fail here :-) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_create\">device_create</a>(<a class=\"id\" href=\"#ppp_class\">ppp_class</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#PPP_MAJOR\">PPP_MAJOR</a>, 0), <a class=\"id\" href=\"#NULL\">NULL</a>, \"ppp\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_chrdev\">out_chrdev</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_chrdev\">unregister_chrdev</a>(<a class=\"id\" href=\"#PPP_MAJOR\">PPP_MAJOR</a>, \"ppp\");", 
"<a class=\"id\" href=\"#out_net\">out_net</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_pernet_device\">unregister_pernet_device</a>(&amp;<a class=\"id\" href=\"#ppp_net_ops\">ppp_net_ops</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Network interface unit routines.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#netdev_tx_t\">netdev_tx_t</a>", 
"<a class=\"id\" href=\"#ppp_start_xmit\">ppp_start_xmit</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#netdev_priv\">netdev_priv</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#npi\">npi</a>, <a class=\"id\" href=\"#proto\">proto</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#pp\">pp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#npi\">npi</a> = <a class=\"id\" href=\"#ethertype_to_npindex\">ethertype_to_npindex</a>(<a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#npi\">npi</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#outf\">outf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Drop, accept or reject the packet */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#npmode\">npmode</a>[<a class=\"id\" href=\"#npi\">npi</a>]) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NPMODE_PASS\">NPMODE_PASS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NPMODE_QUEUE\">NPMODE_QUEUE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* it would be nice to have a way to tell the network</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   system to queue this one up for later. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#outf\">outf</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NPMODE_DROP\">NPMODE_DROP</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NPMODE_ERROR\">NPMODE_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#outf\">outf</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put the 2-byte PPP protocol number on the front,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   making sure there is room for the address and control fields. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cow_head\">skb_cow_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#PPP_HDRLEN\">PPP_HDRLEN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#outf\">outf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pp\">pp</a> = <a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, 2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proto\">proto</a> = <a class=\"id\" href=\"#npindex_to_proto\">npindex_to_proto</a>[<a class=\"id\" href=\"#npi\">npi</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pp\">pp</a>[0] = <a class=\"id\" href=\"#proto\">proto</a> >> 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pp\">pp</a>[1] = <a class=\"id\" href=\"#proto\">proto</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_stop_queue\">netif_stop_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_tail\">skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_xmit_process\">ppp_xmit_process</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NETDEV_TX_OK\">NETDEV_TX_OK</a>;", 
"", 
" <a class=\"id\" href=\"#outf\">outf</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#tx_dropped\">tx_dropped</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NETDEV_TX_OK\">NETDEV_TX_OK</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ppp_net_ioctl\">ppp_net_ioctl</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#ifreq\">ifreq</a> *<a class=\"id\" href=\"#ifr\">ifr</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#netdev_priv\">netdev_priv</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#addr\">addr</a> = (void <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#ifr\">ifr</a>-><a class=\"id\" href=\"#ifr_ifru\">ifr_ifru</a>.<a class=\"id\" href=\"#ifru_data\">ifru_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_stats\">ppp_stats</a> <a class=\"id\" href=\"#stats\">stats</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_comp_stats\">ppp_comp_stats</a> <a class=\"id\" href=\"#cstats\">cstats</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#vers\">vers</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCGPPPSTATS\">SIOCGPPPSTATS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_get_stats\">ppp_get_stats</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, &amp;<a class=\"id\" href=\"#stats\">stats</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#stats\">stats</a>, sizeof(<a class=\"id\" href=\"#stats\">stats</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCGPPPCSTATS\">SIOCGPPPCSTATS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#cstats\">cstats</a>, 0, sizeof(<a class=\"id\" href=\"#cstats\">cstats</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xcomp\">xcomp</a>-><a class=\"id\" href=\"#comp_stat\">comp_stat</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a>, &amp;<a class=\"id\" href=\"#cstats\">cstats</a>.<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rcomp\">rcomp</a>-><a class=\"id\" href=\"#decomp_stat\">decomp_stat</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a>, &amp;<a class=\"id\" href=\"#cstats\">cstats</a>.<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#cstats\">cstats</a>, sizeof(<a class=\"id\" href=\"#cstats\">cstats</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCGPPPVER\">SIOCGPPPVER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vers\">vers</a> = <a class=\"id\" href=\"#PPP_VERSION\">PPP_VERSION</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#vers\">vers</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#vers\">vers</a>) + 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#net_device_ops\">net_device_ops</a> <a class=\"id\" href=\"#ppp_netdev_ops\">ppp_netdev_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ndo_start_xmit\">ndo_start_xmit</a> = <a class=\"id\" href=\"#ppp_start_xmit\">ppp_start_xmit</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ndo_do_ioctl\">ndo_do_ioctl</a>   = <a class=\"id\" href=\"#ppp_net_ioctl\">ppp_net_ioctl</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#ppp_setup\">ppp_setup</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a> = &amp;<a class=\"id\" href=\"#ppp_netdev_ops\">ppp_netdev_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a> = <a class=\"id\" href=\"#PPP_HDRLEN\">PPP_HDRLEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mtu\">mtu</a> = <a class=\"id\" href=\"#PPP_MTU\">PPP_MTU</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#tx_queue_len\">tx_queue_len</a> = 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ARPHRD_PPP\">ARPHRD_PPP</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#IFF_POINTOPOINT\">IFF_POINTOPOINT</a> | <a class=\"id\" href=\"#IFF_NOARP\">IFF_NOARP</a> | <a class=\"id\" href=\"#IFF_MULTICAST\">IFF_MULTICAST</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> |= <a class=\"id\" href=\"#NETIF_F_NETNS_LOCAL\">NETIF_F_NETNS_LOCAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &= ~<a class=\"id\" href=\"#IFF_XMIT_DST_RELEASE\">IFF_XMIT_DST_RELEASE</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Transmit-side routines.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called to do any work queued up on the transmit side</span>", 
"<span class=\"comment\"> * that can now be done.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#ppp_xmit_process\">ppp_xmit_process</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_xmit_lock\">ppp_xmit_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#closing\">closing</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_push\">ppp_push</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xmit_pending\">xmit_pending</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_send_frame\">ppp_send_frame</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If there's no work left to do, tell the core net</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   code that we can accept some more. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xmit_pending\">xmit_pending</a> && !<a class=\"id\" href=\"#skb_peek\">skb_peek</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_wake_queue\">netif_wake_queue</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_xmit_unlock\">ppp_xmit_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *", 
"<a class=\"id\" href=\"#pad_compress_skb\">pad_compress_skb</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#new_skb\">new_skb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#new_skb_size\">new_skb_size</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mtu\">mtu</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xcomp\">xcomp</a>-><a class=\"id\" href=\"#comp_extra\">comp_extra</a> + <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#compressor_skb_size\">compressor_skb_size</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mtu\">mtu</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xcomp\">xcomp</a>-><a class=\"id\" href=\"#comp_extra\">comp_extra</a> + <a class=\"id\" href=\"#PPP_HDRLEN\">PPP_HDRLEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_skb\">new_skb</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#new_skb_size\">new_skb_size</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_skb\">new_skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PPP: no memory (comp pkt)\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a> &gt; <a class=\"id\" href=\"#PPP_HDRLEN\">PPP_HDRLEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#new_skb\">new_skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a> - <a class=\"id\" href=\"#PPP_HDRLEN\">PPP_HDRLEN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* compressor still expects A/C bytes in hdr */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xcomp\">xcomp</a>-><a class=\"id\" href=\"#compress\">compress</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - 2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#new_skb\">new_skb</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> + 2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#compressor_skb_size\">compressor_skb_size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; 0 && (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_CCP_UP\">SC_CCP_UP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#new_skb\">new_skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_pull\">skb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, 2);<span class=\"ts\"/><span class=\"comment\">/* pull off A/C bytes */</span>", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#len\">len</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* didn't compress, or CCP not up yet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#new_skb\">new_skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_skb\">new_skb</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (len &lt; 0)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * MPPE requires that we do not send unencrypted</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * frames.  The compressor will return -1 if we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * should drop the frame.  We cannot simply test</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the compress_proto because MPPE and MPPC share</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the same number.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ppp: compressor dropped pkt\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#new_skb\">new_skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_skb\">new_skb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_skb\">new_skb</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Compress and send a frame.</span>", 
"<span class=\"comment\"> * The caller should have locked the xmit path,</span>", 
"<span class=\"comment\"> * and xmit_pending should be 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#ppp_send_frame\">ppp_send_frame</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#proto\">proto</a> = <a class=\"id\" href=\"#PPP_PROTO\">PPP_PROTO</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#new_skb\">new_skb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#cp\">cp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#proto\">proto</a> &lt; 0x8000) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_FILTER\">CONFIG_PPP_FILTER</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check if we should pass this packet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the filter instructions are constructed assuming</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   a four-byte PPP header on each packet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, 2) = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_filter\">pass_filter</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sk_run_filter\">sk_run_filter</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_filter\">pass_filter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_len\">pass_len</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#debug\">debug</a> &amp; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"PPP: outbound frame not passed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if this packet passes the active filter, record the time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_filter\">active_filter</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sk_run_filter\">sk_run_filter</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_filter\">active_filter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_len\">active_len</a>) == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#last_xmit\">last_xmit</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_pull\">skb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, 2);", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for data packets, record the time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#last_xmit\">last_xmit</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_FILTER */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#tx_packets\">tx_packets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#tx_bytes\">tx_bytes</a> += <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - 2;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#proto\">proto</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPP_IP\">PPP_IP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a> || (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_COMP_TCP\">SC_COMP_TCP</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* try to do VJ TCP header compression */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_skb\">new_skb</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a> - 2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_skb\">new_skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PPP: no memory (VJ comp pkt)\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#new_skb\">new_skb</a>, <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a> - 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#slhc_compress\">slhc_compress</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a>, <a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - 2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#new_skb\">new_skb</a>-><a class=\"id\" href=\"#data\">data</a> + 2, &amp;<a class=\"id\" href=\"#cp\">cp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_NO_TCP_CCID\">SC_NO_TCP_CCID</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cp\">cp</a> == <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* didn't compress */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#new_skb\">new_skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cp\">cp</a>[0] &amp; <a class=\"id\" href=\"#SL_TYPE_COMPRESSED_TCP\">SL_TYPE_COMPRESSED_TCP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#proto\">proto</a> = <a class=\"id\" href=\"#PPP_VJC_COMP\">PPP_VJC_COMP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>[0] &= ~<a class=\"id\" href=\"#SL_TYPE_COMPRESSED_TCP\">SL_TYPE_COMPRESSED_TCP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#proto\">proto</a> = <a class=\"id\" href=\"#PPP_VJC_UNCOMP\">PPP_VJC_UNCOMP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>[0] = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>[2];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#new_skb\">new_skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a> + 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>[1] = <a class=\"id\" href=\"#proto\">proto</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPP_CCP\">PPP_CCP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* peek at outbound CCP frames */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_ccp_peek\">ppp_ccp_peek</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* try to do packet compression */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xstate\">xstate</a> &amp; <a class=\"id\" href=\"#SC_COMP_RUN\">SC_COMP_RUN</a>) && <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xc_state\">xc_state</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#proto\">proto</a> != <a class=\"id\" href=\"#PPP_LCP\">PPP_LCP</a> && <a class=\"id\" href=\"#proto\">proto</a> != <a class=\"id\" href=\"#PPP_CCP\">PPP_CCP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_CCP_UP\">SC_CCP_UP</a>) && (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_MUST_COMP\">SC_MUST_COMP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ppp: compression required but down - pkt dropped.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#pad_compress_skb\">pad_compress_skb</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are waiting for traffic (demand dialling),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queue it up for pppd to receive.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_LOOP_TRAFFIC\">SC_LOOP_TRAFFIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rq\">rq</a>.<a class=\"id\" href=\"#qlen\">qlen</a> &gt; <a class=\"id\" href=\"#PPP_MAX_RQLEN\">PPP_MAX_RQLEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_tail\">skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rwait\">rwait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xmit_pending\">xmit_pending</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_push\">ppp_push</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/>return;", 
"", 
" <a class=\"id\" href=\"#drop\">drop</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#tx_errors\">tx_errors</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to send the frame in xmit_pending.</span>", 
"<span class=\"comment\"> * The caller should have the xmit path locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#ppp_push\">ppp_push</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xmit_pending\">xmit_pending</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#channels\">channels</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nowhere to send the packet, just drop it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xmit_pending\">xmit_pending</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_MULTILINK\">SC_MULTILINK</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* not doing multilink: send it down the first channel */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#clist\">clist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#downl\">downl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#start_xmit\">start_xmit</a>(<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xmit_pending\">xmit_pending</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* channel got unregistered */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xmit_pending\">xmit_pending</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#downl\">downl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_MULTILINK\">CONFIG_PPP_MULTILINK</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Multilink: fragment the packet over as many links</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   as can take the packet at the moment. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp_mp_explode\">ppp_mp_explode</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_MULTILINK */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#xmit_pending\">xmit_pending</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_MULTILINK\">CONFIG_PPP_MULTILINK</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Divide a packet to be transmitted into fragments and</span>", 
"<span class=\"comment\"> * send them out the individual links.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ppp_mp_explode\">ppp_mp_explode</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#totlen\">totlen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#hdrlen\">hdrlen</a>, <a class=\"id\" href=\"#mtu\">mtu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flen\">flen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#navail\">navail</a>, <a class=\"id\" href=\"#nfree\">nfree</a>, <a class=\"id\" href=\"#nzero\">nzero</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nbigger\">nbigger</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#totspeed\">totspeed</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#totfree\">totfree</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#frag\">frag</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#totspeed\">totspeed</a> = 0; <span class=\"comment\">/*total bitrate of the bundle*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nfree\">nfree</a> = 0; <span class=\"comment\">/* # channels which have no packet already queued */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#navail\">navail</a> = 0; <span class=\"comment\">/* total # of usable channels (not deregistered) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nzero\">nzero</a> = 0; <span class=\"comment\">/* number of channels with zero speed associated*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#totfree\">totfree</a> = 0; <span class=\"comment\">/*total # of channels available and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  *having no queued packets before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  *starting the fragmentation*/</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hdrlen\">hdrlen</a> = (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_MP_XSHORTSEQ\">SC_MP_XSHORTSEQ</a>)? <a class=\"id\" href=\"#MPHDRLEN_SSN\">MPHDRLEN_SSN</a>: <a class=\"id\" href=\"#MPHDRLEN\">MPHDRLEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pch\">pch</a>, &amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#clist\">clist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#avail\">avail</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#navail\">navail</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#speed\">speed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#avail\">avail</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#avail\">avail</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#had_frag\">had_frag</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#speed\">speed</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nzero\">nzero</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totspeed\">totspeed</a> += <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#speed\">speed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#avail\">avail</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#nfree\">nfree</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#totfree\">totfree</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#had_frag\">had_frag</a> && <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nxchan\">nxchan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nxchan\">nxchan</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't start sending this packet unless at least half of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the channels are free.  This gives much better TCP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * performance if we have a lot of channels.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nfree\">nfree</a> == 0 || <a class=\"id\" href=\"#nfree\">nfree</a> &lt; <a class=\"id\" href=\"#navail\">navail</a> / 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0; <span class=\"comment\">/* can't take now, leave it in xmit_pending */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do protocol field compression (XXX this should be optional) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#totlen\">totlen</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nbigger\">nbigger</a> = <a class=\"id\" href=\"#len\">len</a> % <a class=\"id\" href=\"#nfree\">nfree</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* skip to the channel after the one we last used</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   and start at that one */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#channels\">channels</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nxchan\">nxchan</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list\">list</a> == &amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#channels\">channels</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* create a fragment for each channel */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#B\">B</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list\">list</a> == &amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#channels\">channels</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#clist\">clist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#avail\">avail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Skip this channel if it has a fragment pending already and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we haven't given a fragment to all of the free channels.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#avail\">avail</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nfree\">nfree</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#avail\">avail</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check the channel's mtu and whether it is still attached. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#downl\">downl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* can't use this channel, it's being deregistered */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#speed\">speed</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nzero\">nzero</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totspeed\">totspeed</a> -= <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#speed\">speed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#downl\">downl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#avail\">avail</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totlen\">totlen</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totfree\">totfree</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nfree\">nfree</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#navail\">navail</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>*if the channel speed is not set divide</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>*the packet evenly among the free channels;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>*otherwise divide it according to the speed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>*of the channel we are going to transmit on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flen\">flen</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nfree\">nfree</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#speed\">speed</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flen\">flen</a> = <a class=\"id\" href=\"#len\">len</a>/<a class=\"id\" href=\"#nfree\">nfree</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nbigger\">nbigger</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flen\">flen</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbigger\">nbigger</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flen\">flen</a> = (((<a class=\"id\" href=\"#totfree\">totfree</a> - <a class=\"id\" href=\"#nzero\">nzero</a>)*(<a class=\"id\" href=\"#totlen\">totlen</a> + <a class=\"id\" href=\"#hdrlen\">hdrlen</a>*<a class=\"id\" href=\"#totfree\">totfree</a>)) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#totspeed\">totspeed</a>*<a class=\"id\" href=\"#totfree\">totfree</a>)/<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#speed\">speed</a>)) - <a class=\"id\" href=\"#hdrlen\">hdrlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nbigger\">nbigger</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flen\">flen</a> += ((<a class=\"id\" href=\"#totfree\">totfree</a> - <a class=\"id\" href=\"#nzero\">nzero</a>)*<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#speed\">speed</a>)/<a class=\"id\" href=\"#totspeed\">totspeed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbigger\">nbigger</a> -= ((<a class=\"id\" href=\"#totfree\">totfree</a> - <a class=\"id\" href=\"#nzero\">nzero</a>)*<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#speed\">speed</a>)/", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totspeed\">totspeed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nfree\">nfree</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *check if we are on the last channel or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *we exceded the lenght of the data to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *fragment</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#nfree\">nfree</a> <= 0) || (<a class=\"id\" href=\"#flen\">flen</a> &gt; <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flen\">flen</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *it is not worth to tx on slow channels:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *in that case from the resulting flen according to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *above formula will be equal or less than zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *Skip the channel in this case</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flen\">flen</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#avail\">avail</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#downl\">downl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtu\">mtu</a> = <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#mtu\">mtu</a> - <a class=\"id\" href=\"#hdrlen\">hdrlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mtu\">mtu</a> &lt; 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtu\">mtu</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flen\">flen</a> &gt; <a class=\"id\" href=\"#mtu\">mtu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flen\">flen</a> = <a class=\"id\" href=\"#mtu\">mtu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flen\">flen</a> == <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bits\">bits</a> |= <a class=\"id\" href=\"#E\">E</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frag\">frag</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#flen\">flen</a> + <a class=\"id\" href=\"#hdrlen\">hdrlen</a> + (<a class=\"id\" href=\"#flen\">flen</a> == 0), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#frag\">frag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#noskb\">noskb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#frag\">frag</a>, <a class=\"id\" href=\"#flen\">flen</a> + <a class=\"id\" href=\"#hdrlen\">hdrlen</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make the MP header */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>[0] = <a class=\"id\" href=\"#PPP_MP\">PPP_MP</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>[1] = <a class=\"id\" href=\"#PPP_MP\">PPP_MP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_MP_XSHORTSEQ\">SC_MP_XSHORTSEQ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>[2] = <a class=\"id\" href=\"#bits\">bits</a> + ((<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nxseq\">nxseq</a> >> 8) &amp; 0xf);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>[3] = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nxseq\">nxseq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>[2] = <a class=\"id\" href=\"#bits\">bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>[3] = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nxseq\">nxseq</a> >> 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>[4] = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nxseq\">nxseq</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>[5] = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nxseq\">nxseq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#q\">q</a> + <a class=\"id\" href=\"#hdrlen\">hdrlen</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#flen\">flen</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* try to send it down the channel */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#start_xmit\">start_xmit</a>(<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#frag\">frag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_tail\">skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>, <a class=\"id\" href=\"#frag\">frag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#had_frag\">had_frag</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#flen\">flen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#flen\">flen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nxseq\">nxseq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bits\">bits</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#downl\">downl</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nxchan\">nxchan</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>return 1;", 
"", 
" <a class=\"id\" href=\"#noskb\">noskb</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#downl\">downl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#debug\">debug</a> &amp; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PPP: no memory (fragment)\\n\");", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#tx_errors\">tx_errors</a>;", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nxseq\">nxseq</a>;", 
"<span class=\"ts\"/>return 1;<span class=\"ts\"/><span class=\"comment\">/* abandon the frame */</span>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_MULTILINK */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to send data out on a channel.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#ppp_channel_push\">ppp_channel_push</a>(struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#downl\">downl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#start_xmit\">start_xmit</a>(<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* put the packet back and try again later */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head\">skb_queue_head</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* channel got deregistered */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_purge\">skb_queue_purge</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#downl\">downl</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* see if there is anything from the attached unit to be sent */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#xq\">xq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock_bh\">read_lock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a> = <a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_xmit_process\">ppp_xmit_process</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock_bh\">read_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Receive-side routines.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* misuse a few fields of the skb for MP reconstruction */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sequence\">sequence</a><span class=\"ts\"/><a class=\"id\" href=\"#priority\">priority</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BEbits\">BEbits</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>[0]", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#ppp_do_recv\">ppp_do_recv</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_recv_lock\">ppp_recv_lock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#closing\">closing</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_receive_frame\">ppp_receive_frame</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pch\">pch</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_recv_unlock\">ppp_recv_unlock</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#ppp_input\">ppp_input</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#proto\">proto</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pch\">pch</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock_bh\">read_lock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, 2)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_length_errors\">rx_length_errors</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_receive_error\">ppp_receive_error</a>(<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proto\">proto</a> = <a class=\"id\" href=\"#PPP_PROTO\">PPP_PROTO</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a> || <a class=\"id\" href=\"#proto\">proto</a> >= 0xc000 || <a class=\"id\" href=\"#proto\">proto</a> == <a class=\"id\" href=\"#PPP_CCPFRAG\">PPP_CCPFRAG</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* put it on the channel queue */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_tail\">skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* drop old frames if queue too long */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rq\">rq</a>.<a class=\"id\" href=\"#qlen\">qlen</a> &gt; <a class=\"id\" href=\"#PPP_MAX_RQLEN\">PPP_MAX_RQLEN</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rq\">rq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rwait\">rwait</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_do_recv\">ppp_do_recv</a>(<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pch\">pch</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock_bh\">read_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Put a 0-length skb in the receive queue as an error indication */</span>", 
"void", 
"<a class=\"id\" href=\"#ppp_input_error\">ppp_input_error</a>(struct <a class=\"id\" href=\"#ppp_channel\">ppp_channel</a> *<a class=\"id\" href=\"#chan\">chan</a>, int <a class=\"id\" href=\"#code\">code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#ppp\">ppp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pch\">pch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock_bh\">read_lock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* probably unnecessary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#cb\">cb</a>[0] = <a class=\"id\" href=\"#code\">code</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_do_recv\">ppp_do_recv</a>(<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pch\">pch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock_bh\">read_unlock_bh</a>(&amp;<a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#upl\">upl</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We come in here to process a received frame.</span>", 
"<span class=\"comment\"> * The receive side of the ppp unit is locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#ppp_receive_frame\">ppp_receive_frame</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* note: a 0-length skb is used as an error indication */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_MULTILINK\">CONFIG_PPP_MULTILINK</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* XXX do channel-level decompression here */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PPP_PROTO\">PPP_PROTO</a>(<a class=\"id\" href=\"#skb\">skb</a>) == <a class=\"id\" href=\"#PPP_MP\">PPP_MP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_receive_mp_frame\">ppp_receive_mp_frame</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pch\">pch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_MULTILINK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_receive_nonmp_frame\">ppp_receive_nonmp_frame</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_receive_error\">ppp_receive_error</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#ppp_receive_error\">ppp_receive_error</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>)", 
"{", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_errors\">rx_errors</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slhc_toss\">slhc_toss</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#ppp_receive_nonmp_frame\">ppp_receive_nonmp_frame</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#npi\">npi</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Decompress the frame, if compressed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that some decompressors need to see uncompressed frames</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that come in as well as compressed frames.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a> && (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> &amp; <a class=\"id\" href=\"#SC_DECOMP_RUN\">SC_DECOMP_RUN</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> &amp; (<a class=\"id\" href=\"#SC_DC_FERROR\">SC_DC_FERROR</a> | <a class=\"id\" href=\"#SC_DC_ERROR\">SC_DC_ERROR</a>)) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#ppp_decompress_frame\">ppp_decompress_frame</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_MUST_COMP\">SC_MUST_COMP</a> && <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> &amp; <a class=\"id\" href=\"#SC_DC_FERROR\">SC_DC_FERROR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proto\">proto</a> = <a class=\"id\" href=\"#PPP_PROTO\">PPP_PROTO</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#proto\">proto</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPP_VJC_COMP\">PPP_VJC_COMP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* decompress VJ compressed packets */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a> || (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_REJ_COMP_TCP\">SC_REJ_COMP_TCP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>) &lt; 124 || <a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* copy to a new sk_buff with more tailroom */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#dev_alloc_skb\">dev_alloc_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> + 128);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ns\">ns</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>\"PPP: no memory (VJ decomp)\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#ns\">ns</a>, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_copy_bits\">skb_copy_bits</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, <a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>), <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#slhc_uncompress\">slhc_uncompress</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + 2, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"PPP: VJ decompression error\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_trim\">skb_trim</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#proto\">proto</a> = <a class=\"id\" href=\"#PPP_IP\">PPP_IP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPP_VJC_UNCOMP\">PPP_VJC_UNCOMP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a> || (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_REJ_COMP_TCP\">SC_REJ_COMP_TCP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Until we fix the decompressor need to make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * data portion is linear.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slhc_remember\">slhc_remember</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#vj\">vj</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + 2, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - 2) <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PPP: VJ uncompressed error\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#proto\">proto</a> = <a class=\"id\" href=\"#PPP_IP\">PPP_IP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PPP_CCP\">PPP_CCP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_ccp_peek\">ppp_ccp_peek</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_packets\">rx_packets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_bytes\">rx_bytes</a> += <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - 2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#npi\">npi</a> = <a class=\"id\" href=\"#proto_to_npindex\">proto_to_npindex</a>(<a class=\"id\" href=\"#proto\">proto</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#npi\">npi</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* control or unknown frame - pass it to pppd */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_tail\">skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* limit queue length by dropping old frames */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rq\">rq</a>.<a class=\"id\" href=\"#qlen\">qlen</a> &gt; <a class=\"id\" href=\"#PPP_MAX_RQLEN\">PPP_MAX_RQLEN</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rq\">rq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* wake up any process polling or blocking on read */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#rwait\">rwait</a>);", 
"", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* network protocol frame - give it to the kernel */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_FILTER\">CONFIG_PPP_FILTER</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check if the packet passes the pass and active filters */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the filter instructions are constructed assuming</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   a four-byte PPP header on each packet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_filter\">pass_filter</a> || <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_filter\">active_filter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, 0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, 2) = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_filter\">pass_filter</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sk_run_filter\">sk_run_filter</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_filter\">pass_filter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#pass_len\">pass_len</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#debug\">debug</a> &amp; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"PPP: inbound frame \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"not passed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_filter\">active_filter</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sk_run_filter\">sk_run_filter</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_filter\">active_filter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#active_len\">active_len</a>) == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#last_recv\">last_recv</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_pull\">__skb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PPP_FILTER */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#last_recv\">last_recv</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>) == 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#npmode\">npmode</a>[<a class=\"id\" href=\"#npi\">npi</a>] != <a class=\"id\" href=\"#NPMODE_PASS\">NPMODE_PASS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* chop off protocol */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_pull_rcsum\">skb_pull_rcsum</a>(<a class=\"id\" href=\"#skb\">skb</a>, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#npindex_to_ethertype\">npindex_to_ethertype</a>[<a class=\"id\" href=\"#npi\">npi</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_mac_header\">skb_reset_mac_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_rx\">netif_rx</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"", 
" <a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_receive_error\">ppp_receive_error</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *", 
"<a class=\"id\" href=\"#ppp_decompress_frame\">ppp_decompress_frame</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#proto\">proto</a> = <a class=\"id\" href=\"#PPP_PROTO\">PPP_PROTO</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Until we fix all the decompressor's need to make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data portion is linear.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#proto\">proto</a> == <a class=\"id\" href=\"#PPP_COMP\">PPP_COMP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#obuff_size\">obuff_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rcomp\">rcomp</a>-><a class=\"id\" href=\"#compress_proto\">compress_proto</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#CI_MPPE\">CI_MPPE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obuff_size\">obuff_size</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mru\">mru</a> + <a class=\"id\" href=\"#PPP_HDRLEN\">PPP_HDRLEN</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obuff_size\">obuff_size</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mru\">mru</a> + <a class=\"id\" href=\"#PPP_HDRLEN\">PPP_HDRLEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#dev_alloc_skb\">dev_alloc_skb</a>(<a class=\"id\" href=\"#obuff_size\">obuff_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ns\">ns</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ppp_decompress_frame: no memory\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the decompressor still expects the A/C bytes in the hdr */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rcomp\">rcomp</a>-><a class=\"id\" href=\"#decompress\">decompress</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - 2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> + 2, <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#obuff_size\">obuff_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pass the compressed frame to pppd as an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   error indication. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == <a class=\"id\" href=\"#DECOMP_FATALERROR\">DECOMP_FATALERROR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> |= <a class=\"id\" href=\"#SC_DC_FERROR\">SC_DC_FERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_pull\">skb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, 2);<span class=\"ts\"/><span class=\"comment\">/* pull off the A/C bytes */</span>", 
"", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Uncompressed frame - pass to decompressor so it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   can update its dictionary if necessary. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rcomp\">rcomp</a>-><a class=\"id\" href=\"#incomp\">incomp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rcomp\">rcomp</a>-><a class=\"id\" href=\"#incomp\">incomp</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rc_state\">rc_state</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - 2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> + 2);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
" <a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#rstate\">rstate</a> |= <a class=\"id\" href=\"#SC_DC_ERROR\">SC_DC_ERROR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_receive_error\">ppp_receive_error</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PPP_MULTILINK\">CONFIG_PPP_MULTILINK</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Receive a multilink frame.</span>", 
"<span class=\"comment\"> * We put it on the reconstruction queue and then pull off</span>", 
"<span class=\"comment\"> * as many completed frames as we can.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#ppp_receive_mp_frame\">ppp_receive_mp_frame</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#pch\">pch</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#channel\">channel</a> *<a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mphdrlen\">mphdrlen</a> = (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_MP_SHORTSEQ\">SC_MP_SHORTSEQ</a>)? <a class=\"id\" href=\"#MPHDRLEN_SSN\">MPHDRLEN_SSN</a>: <a class=\"id\" href=\"#MPHDRLEN\">MPHDRLEN</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#mphdrlen\">mphdrlen</a> + 1) || <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mrru\">mrru</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no good, throw it away */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Decode sequence number and begin/end bits */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SC_MP_SHORTSEQ\">SC_MP_SHORTSEQ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = ((<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>[2] &amp; 0x0f) << 8) | <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = 0xfff;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>[3] << 16) | (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>[4] << 8)| <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>[5];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = 0xffffff;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#BEbits\">BEbits</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>[2];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_pull\">skb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#mphdrlen\">mphdrlen</a>);<span class=\"ts\"/><span class=\"comment\">/* pull off PPP and MP headers */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do protocol ID decompression on the first fragment of each packet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#BEbits\">BEbits</a> &amp; <a class=\"id\" href=\"#B\">B</a>) && (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>[0] &amp; 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, 1) = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Expand sequence number to 32 bits, making it as close</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as possible to ppp-&gt;minseq.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> |= <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#minseq\">minseq</a> &amp; ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>if ((int)(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#minseq\">minseq</a> - <a class=\"id\" href=\"#seq\">seq</a>) &gt; (int)(<a class=\"id\" href=\"#mask\">mask</a> >> 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> += <a class=\"id\" href=\"#mask\">mask</a> + 1;", 
"<span class=\"ts\"/>else if ((int)(<a class=\"id\" href=\"#seq\">seq</a> - <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#minseq\">minseq</a>) &gt; (int)(<a class=\"id\" href=\"#mask\">mask</a> >> 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> -= <a class=\"id\" href=\"#mask\">mask</a> + 1;<span class=\"ts\"/><span class=\"comment\">/* should never happen */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sequence\">sequence</a> = <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pch\">pch</a>-><a class=\"id\" href=\"#lastseq\">lastseq</a> = <a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this packet comes before the next one we were expecting,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * drop it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#seq_before\">seq_before</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nextseq\">nextseq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_dropped\">rx_dropped</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_receive_error\">ppp_receive_error</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reevaluate minseq, the minimum over all channels of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * last sequence number received on each channel.  Because of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the increasing sequence number rule, we know that any fragment</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before `minseq' which hasn't arrived is never going to arrive.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The list of channels can't change because we have the receive</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * side of the ppp unit locked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ch\">ch</a>, &amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#clist\">clist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#seq_before\">seq_before</a>(<a class=\"id\" href=\"#ch\">ch</a>-><a class=\"id\" href=\"#lastseq\">lastseq</a>, <a class=\"id\" href=\"#seq\">seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#ch\">ch</a>-><a class=\"id\" href=\"#lastseq\">lastseq</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#seq_before\">seq_before</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#minseq\">minseq</a>, <a class=\"id\" href=\"#seq\">seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#minseq\">minseq</a> = <a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put the fragment on the reconstruction queue */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_mp_insert\">ppp_mp_insert</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the queue is getting long, don't wait any longer for packets</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   before the start of the queue. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mrq\">mrq</a>) >= <a class=\"id\" href=\"#PPP_MP_MAX_QLEN\">PPP_MP_MAX_QLEN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#mskb\">mskb</a> = <a class=\"id\" href=\"#skb_peek\">skb_peek</a>(&amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mrq\">mrq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#seq_before\">seq_before</a>(<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#minseq\">minseq</a>, <a class=\"id\" href=\"#mskb\">mskb</a>-><a class=\"id\" href=\"#sequence\">sequence</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#minseq\">minseq</a> = <a class=\"id\" href=\"#mskb\">mskb</a>-><a class=\"id\" href=\"#sequence\">sequence</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Pull completed packets off the queue and receive them. */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#ppp_mp_reconstruct\">ppp_mp_reconstruct</a>(<a class=\"id\" href=\"#ppp\">ppp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_receive_nonmp_frame\">ppp_receive_nonmp_frame</a>(<a class=\"id\" href=\"#ppp\">ppp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_length_errors\">rx_length_errors</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ppp_receive_error\">ppp_receive_error</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return;", 
"", 
" <a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ppp_receive_error\">ppp_receive_error</a>(<a class=\"id\" href=\"#ppp\">ppp</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Insert a fragment on the MP reconstruction queue.</span>", 
"<span class=\"comment\"> * The queue is ordered by increasing sequence number.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#ppp_mp_insert\">ppp_mp_insert</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mrq\">mrq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sequence\">sequence</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* N.B. we don't need to lock the list lock because we have the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   ppp unit receive-side lock. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_walk\">skb_queue_walk</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#seq_before\">seq_before</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sequence\">sequence</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_before\">__skb_queue_before</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reconstruct a packet from the MP fragment queue.</span>", 
"<span class=\"comment\"> * We go through increasing sequence numbers until we find a</span>", 
"<span class=\"comment\"> * complete packet, or we get to the sequence number for a fragment</span>", 
"<span class=\"comment\"> * which hasn't arrived but might still do so.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *", 
"<a class=\"id\" href=\"#ppp_mp_reconstruct\">ppp_mp_reconstruct</a>(struct <a class=\"id\" href=\"#ppp\">ppp</a> *<a class=\"id\" href=\"#ppp\">ppp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#nextseq\">nextseq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#minseq\">minseq</a> = <a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#minseq\">minseq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mrq\">mrq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lost\">lost</a> = 0, <a class=\"id\" href=\"#len\">len</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ppp\">ppp</a>-><a class=\"id\" href=\"#mrru\">mrru</a> == 0)<span class=\"ts\"/><span class=\"comment\">/* do nothing until mrru is set */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#head\">head</a>; <a class=\"id\" href=\"#p\">p</a> != (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *) <a class=\"id\" href=\"#list\">list</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
];
xr_frag_insert('l/59/0fdf646060f1c367f5f3711abf3ef3948f3996.xr', __xr_tmp);
