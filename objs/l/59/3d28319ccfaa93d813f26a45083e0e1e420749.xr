var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current_euid\">current_euid</a>() == <a class=\"id\" href=\"#current_uid\">current_uid</a>() && <a class=\"id\" href=\"#current_egid\">current_egid</a>() == <a class=\"id\" href=\"#current_gid\">current_gid</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_dumpable\">set_dumpable</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, 1);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_dumpable\">set_dumpable</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#suid_dumpable\">suid_dumpable</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#filename\">filename</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copies the binary name from after last slash */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; (<a class=\"id\" href=\"#ch\">ch</a> = *(<a class=\"id\" href=\"#name\">name</a>++)) != '\\0';) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ch\">ch</a> == '/')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0; <span class=\"comment\">/* overwrite what we wrote */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; (sizeof(<a class=\"id\" href=\"#tcomm\">tcomm</a>) - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcomm\">tcomm</a>[<a class=\"id\" href=\"#i\">i</a>++] = <a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcomm\">tcomm</a>[<a class=\"id\" href=\"#i\">i</a>] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_task_comm\">set_task_comm</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#tcomm\">tcomm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the new mm task size. We have to do that late because it may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * depend on TIF_32BIT which is only updated in flush_thread() on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * some architectures like powerpc</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#task_size\">task_size</a> = <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* install the new credentials */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a> != <a class=\"id\" href=\"#current_euid\">current_euid</a>() ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#gid\">gid</a> != <a class=\"id\" href=\"#current_egid\">current_egid</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pdeath_signal\">pdeath_signal</a> = 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#file_permission\">file_permission</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#interp_flags\">interp_flags</a> &amp; <a class=\"id\" href=\"#BINPRM_FLAGS_ENFORCE_NONDUMP\">BINPRM_FLAGS_ENFORCE_NONDUMP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_dumpable\">set_dumpable</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#suid_dumpable\">suid_dumpable</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Flush performance counters when crossing a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * security domain:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_dumpable\">get_dumpable</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_exit_task\">perf_event_exit_task</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* An exec changes our domain. We are no longer part of the thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   group */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#self_exec_id\">self_exec_id</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_signal_handlers\">flush_signal_handlers</a>(<a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_old_files\">flush_old_files</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#setup_new_exec\">setup_new_exec</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prepare credentials and lock -&gt;cred_guard_mutex.</span>", 
"<span class=\"comment\"> * install_exec_creds() commits the new creds and drops the lock.</span>", 
"<span class=\"comment\"> * Or, if exec fails before, free_bprm() should release -&gt;cred and</span>", 
"<span class=\"comment\"> * and unlock.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#prepare_bprm_creds\">prepare_bprm_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred_guard_mutex\">cred_guard_mutex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERESTARTNOINTR\">ERESTARTNOINTR</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#prepare_exec_creds\">prepare_exec_creds</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred_guard_mutex\">cred_guard_mutex</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_bprm\">free_bprm</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_arg_pages\">free_arg_pages</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred_guard_mutex\">cred_guard_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#abort_creds\">abort_creds</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * install the new credentials for this executable</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#install_exec_creds\">install_exec_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_bprm_committing_creds\">security_bprm_committing_creds</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#commit_creds\">commit_creds</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cred_guard_mutex must be held at least to this point to prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ptrace_attach() from altering our determination of the task's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * credentials; any time after this it may be unlocked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_bprm_committed_creds\">security_bprm_committed_creds</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred_guard_mutex\">cred_guard_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#install_exec_creds\">install_exec_creds</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * determine how safe it is to execute the proposed program</span>", 
"<span class=\"comment\"> * - the caller must hold current-&gt;cred_guard_mutex to protect against</span>", 
"<span class=\"comment\"> *   PTRACE_ATTACH</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#check_unsafe_exec\">check_unsafe_exec</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>, *<a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#n_fs\">n_fs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#unsafe\">unsafe</a> = <a class=\"id\" href=\"#tracehook_unsafe_exec\">tracehook_unsafe_exec</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n_fs\">n_fs</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#next_thread\">next_thread</a>(<a class=\"id\" href=\"#p\">p</a>); <a class=\"id\" href=\"#t\">t</a> != <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#next_thread\">next_thread</a>(<a class=\"id\" href=\"#t\">t</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#fs\">fs</a> == <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fs\">fs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n_fs\">n_fs</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#users\">users</a> &gt; <a class=\"id\" href=\"#n_fs\">n_fs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#unsafe\">unsafe</a> |= <a class=\"id\" href=\"#LSM_UNSAFE_SHARE\">LSM_UNSAFE_SHARE</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#in_exec\">in_exec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#in_exec\">in_exec</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> * Fill the binprm structure from the inode. </span>", 
"<span class=\"comment\"> * Check permissions, then read the first 128 (BINPRM_BUF_SIZE) bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This may be called multiple times for binary chains (scripts for example).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#prepare_binprm\">prepare_binprm</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#umode_t\">umode_t</a> <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* clear any previous set[ug]id data from a previous binary */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> = <a class=\"id\" href=\"#current_euid\">current_euid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#egid\">egid</a> = <a class=\"id\" href=\"#current_egid\">current_egid</a>();", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_NOSUID\">MNT_NOSUID</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set-uid? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_ISUID\">S_ISUID</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#per_clear\">per_clear</a> |= <a class=\"id\" href=\"#PER_CLEAR_ON_SETID\">PER_CLEAR_ON_SETID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set-gid? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If setgid is set but no group execute bit then this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is a candidate for mandatory locking, not a setgid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * executable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; (<a class=\"id\" href=\"#S_ISGID\">S_ISGID</a> | <a class=\"id\" href=\"#S_IXGRP\">S_IXGRP</a>)) == (<a class=\"id\" href=\"#S_ISGID\">S_ISGID</a> | <a class=\"id\" href=\"#S_IXGRP\">S_IXGRP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#per_clear\">per_clear</a> |= <a class=\"id\" href=\"#PER_CLEAR_ON_SETID\">PER_CLEAR_ON_SETID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#egid\">egid</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fill in binprm security blob */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#security_bprm_set_creds\">security_bprm_set_creds</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred_prepared\">cred_prepared</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>, 0, <a class=\"id\" href=\"#BINPRM_BUF_SIZE\">BINPRM_BUF_SIZE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kernel_read\">kernel_read</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>, 0, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#BINPRM_BUF_SIZE\">BINPRM_BUF_SIZE</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#prepare_binprm\">prepare_binprm</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Arguments are '\\0' separated strings found at the location bprm-&gt;p</span>", 
"<span class=\"comment\"> * points to; chop off the first by relocating brpm-&gt;p to right after</span>", 
"<span class=\"comment\"> * the first '\\0' encountered.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#remove_arg_zero\">remove_arg_zero</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#kaddr\">kaddr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#argc\">argc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#get_arg_page\">get_arg_page</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kaddr\">kaddr</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> && <a class=\"id\" href=\"#kaddr\">kaddr</a>[<a class=\"id\" href=\"#offset\">offset</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a>++, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#kaddr\">kaddr</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_arg_page\">put_arg_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> == <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_arg_page\">free_arg_page</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) - 1);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#offset\">offset</a> == <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#argc\">argc</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#remove_arg_zero\">remove_arg_zero</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cycle the list of binary formats handler, until one recognizes the image</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#search_binary_handler\">search_binary_handler</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>,struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#recursion_depth\">recursion_depth</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#try\">try</a>,<a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linux_binfmt\">linux_binfmt</a> *<a class=\"id\" href=\"#fmt\">fmt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#security_bprm_check\">security_bprm_check</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* kernel module loader fixup */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* so we don't try to load run modprobe in kernel space. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#USER_DS\">USER_DS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#audit_bprm\">audit_bprm</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#try\">try</a>=0; <a class=\"id\" href=\"#try\">try</a>&lt;2; <a class=\"id\" href=\"#try\">try</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, &amp;<a class=\"id\" href=\"#formats\">formats</a>, <a class=\"id\" href=\"#lh\">lh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *) = <a class=\"id\" href=\"#fmt\">fmt</a>-><a class=\"id\" href=\"#load_binary\">load_binary</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fn\">fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#fmt\">fmt</a>-><a class=\"id\" href=\"#module\">module</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Restore the depth counter to its starting value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * in this call, so we don't have to rely on every</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * load_binary function to restore it on return.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#recursion_depth\">recursion_depth</a> = <a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracehook_report_exec\">tracehook_report_exec</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#bprm\">bprm</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_binfmt\">put_binfmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allow_write_access\">allow_write_access</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#did_exec\">did_exec</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#proc_exec_connector\">proc_exec_connector</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_binfmt\">put_binfmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> != -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a> || <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#binfmt_lock\">binfmt_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> != -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a> || <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#printable\">printable</a>(<a class=\"id\" href=\"#c\">c</a>) (((<a class=\"id\" href=\"#c\">c</a>)=='\\t') || ((<a class=\"id\" href=\"#c\">c</a>)=='\\n') || (0x20<=(<a class=\"id\" href=\"#c\">c</a>) && (<a class=\"id\" href=\"#c\">c</a>)<=0x7e))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printable\">printable</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>[0]) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#printable\">printable</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>[1]) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#printable\">printable</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>[2]) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#printable\">printable</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>[3]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break; <span class=\"comment\">/* -ENOEXEC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"binfmt-%04x\", *(unsigned short *)(&amp;<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>[2]));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#search_binary_handler\">search_binary_handler</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sys_execve() executes a new program.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#do_execve\">do_execve</a>(const char * <a class=\"id\" href=\"#filename\">filename</a>,", 
"<span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *const <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argv\">argv</a>,", 
"<span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *const <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#envp\">envp</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> * <a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#displaced\">displaced</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#clear_in_exec\">clear_in_exec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#unshare_files\">unshare_files</a>(&amp;<a class=\"id\" href=\"#displaced\">displaced</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_ret\">out_ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#bprm\">bprm</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_files\">out_files</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#prepare_bprm_creds\">prepare_bprm_creds</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#check_unsafe_exec\">check_unsafe_exec</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_in_exec\">clear_in_exec</a> = <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#in_execve\">in_execve</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#open_exec\">open_exec</a>(<a class=\"id\" href=\"#filename\">filename</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unmark\">out_unmark</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_exec\">sched_exec</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#filename\">filename</a> = <a class=\"id\" href=\"#filename\">filename</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#interp\">interp</a> = <a class=\"id\" href=\"#filename\">filename</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#bprm_mm_init\">bprm_mm_init</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_file\">out_file</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#argc\">argc</a> = <a class=\"id\" href=\"#count\">count</a>(<a class=\"id\" href=\"#argv\">argv</a>, <a class=\"id\" href=\"#MAX_ARG_STRINGS\">MAX_ARG_STRINGS</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#argc\">argc</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#envc\">envc</a> = <a class=\"id\" href=\"#count\">count</a>(<a class=\"id\" href=\"#envp\">envp</a>, <a class=\"id\" href=\"#MAX_ARG_STRINGS\">MAX_ARG_STRINGS</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#envc\">envc</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#prepare_binprm\">prepare_binprm</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_strings_kernel\">copy_strings_kernel</a>(1, &amp;<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#exec\">exec</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_strings\">copy_strings</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#envc\">envc</a>, <a class=\"id\" href=\"#envp\">envp</a>, <a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_strings\">copy_strings</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#argc\">argc</a>, <a class=\"id\" href=\"#argv\">argv</a>, <a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_KTHREAD\">PF_KTHREAD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#search_binary_handler\">search_binary_handler</a>(<a class=\"id\" href=\"#bprm\">bprm</a>,<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* execve succeeded */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#in_exec\">in_exec</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#in_execve\">in_execve</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acct_update_integrals\">acct_update_integrals</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bprm\">free_bprm</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#displaced\">displaced</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_files_struct\">put_files_struct</a>(<a class=\"id\" href=\"#displaced\">displaced</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a> (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<a class=\"id\" href=\"#out_file\">out_file</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allow_write_access\">allow_write_access</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_unmark\">out_unmark</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_in_exec\">clear_in_exec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#in_exec\">in_exec</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#in_execve\">in_execve</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bprm\">free_bprm</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"", 
"<a class=\"id\" href=\"#out_files\">out_files</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#displaced\">displaced</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_files_struct\">reset_files_struct</a>(<a class=\"id\" href=\"#displaced\">displaced</a>);", 
"<a class=\"id\" href=\"#out_ret\">out_ret</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_binfmt\">set_binfmt</a>(struct <a class=\"id\" href=\"#linux_binfmt\">linux_binfmt</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#binfmt\">binfmt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#binfmt\">binfmt</a>-><a class=\"id\" href=\"#module\">module</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#binfmt\">binfmt</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__module_get\">__module_get</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#module\">module</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_binfmt\">set_binfmt</a>);", 
"", 
"<span class=\"comment\">/* format_corename will inspect the pattern parameter, and output a</span>", 
"<span class=\"comment\"> * name into corename, which must have space for at least</span>", 
"<span class=\"comment\"> * CORENAME_MAX_SIZE bytes plus one byte for the zero terminator.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#format_corename\">format_corename</a>(char *<a class=\"id\" href=\"#corename\">corename</a>, long <a class=\"id\" href=\"#signr\">signr</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#pat_ptr\">pat_ptr</a> = <a class=\"id\" href=\"#core_pattern\">core_pattern</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ispipe\">ispipe</a> = (*<a class=\"id\" href=\"#pat_ptr\">pat_ptr</a> == '|');", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#out_ptr\">out_ptr</a> = <a class=\"id\" href=\"#corename\">corename</a>;", 
"<span class=\"ts\"/>char *const <a class=\"id\" href=\"#out_end\">out_end</a> = <a class=\"id\" href=\"#corename\">corename</a> + <a class=\"id\" href=\"#CORENAME_MAX_SIZE\">CORENAME_MAX_SIZE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pid_in_pattern\">pid_in_pattern</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Repeat as long as we have more pattern to process and more output</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   space */</span>", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#pat_ptr\">pat_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#pat_ptr\">pat_ptr</a> != '%') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#out_ptr\">out_ptr</a> == <a class=\"id\" href=\"#out_end\">out_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out_ptr\">out_ptr</a>++ = *<a class=\"id\" href=\"#pat_ptr\">pat_ptr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (*++<a class=\"id\" href=\"#pat_ptr\">pat_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Double percent, output one percent */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '%':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#out_ptr\">out_ptr</a> == <a class=\"id\" href=\"#out_end\">out_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out_ptr\">out_ptr</a>++ = '%';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'p':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid_in_pattern\">pid_in_pattern</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#out_ptr\">out_ptr</a>, <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%d\", <a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &gt; <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_ptr\">out_ptr</a> += <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* uid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'u':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#out_ptr\">out_ptr</a>, <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%d\", <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &gt; <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_ptr\">out_ptr</a> += <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* gid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'g':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#out_ptr\">out_ptr</a>, <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%d\", <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#gid\">gid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &gt; <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_ptr\">out_ptr</a> += <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* signal that caused the coredump */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 's':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#out_ptr\">out_ptr</a>, <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%ld\", <a class=\"id\" href=\"#signr\">signr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &gt; <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_ptr\">out_ptr</a> += <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* UNIX time of coredump */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 't': {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#tv\">tv</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_gettimeofday\">do_gettimeofday</a>(&amp;<a class=\"id\" href=\"#tv\">tv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#out_ptr\">out_ptr</a>, <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%lu\", <a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &gt; <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_ptr\">out_ptr</a> += <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hostname */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'h':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#uts_sem\">uts_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#out_ptr\">out_ptr</a>, <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%s\", <a class=\"id\" href=\"#utsname\">utsname</a>()-><a class=\"id\" href=\"#nodename\">nodename</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#uts_sem\">uts_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &gt; <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_ptr\">out_ptr</a> += <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* executable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'e':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#out_ptr\">out_ptr</a>, <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%s\", <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &gt; <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_ptr\">out_ptr</a> += <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* core limit size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'c':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#out_ptr\">out_ptr</a>, <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%lu\", <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_CORE\">RLIMIT_CORE</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &gt; <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_ptr\">out_ptr</a> += <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#pat_ptr\">pat_ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Backward compatibility with core_uses_pid:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If core_pattern does not include a %p (as is the default)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and core_uses_pid is set, then .%pid will be appended to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the filename. Do not do this for piped commands. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ispipe\">ispipe</a> && !<a class=\"id\" href=\"#pid_in_pattern\">pid_in_pattern</a> && <a class=\"id\" href=\"#core_uses_pid\">core_uses_pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#out_ptr\">out_ptr</a>, <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \".%d\", <a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &gt; <a class=\"id\" href=\"#out_end\">out_end</a> - <a class=\"id\" href=\"#out_ptr\">out_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_ptr\">out_ptr</a> += <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#out_ptr\">out_ptr</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ispipe\">ispipe</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#zap_process\">zap_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#exit_code\">exit_code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#SIGNAL_GROUP_EXIT\">SIGNAL_GROUP_EXIT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a> = <a class=\"id\" href=\"#exit_code\">exit_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> != <a class=\"id\" href=\"#current\">current</a> && <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigaddset\">sigaddset</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pending\">pending</a>.<a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal_wake_up\">signal_wake_up</a>(<a class=\"id\" href=\"#t\">t</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#zap_threads\">zap_threads</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#core_state\">core_state</a> *<a class=\"id\" href=\"#core_state\">core_state</a>, int <a class=\"id\" href=\"#exit_code\">exit_code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#g\">g</a>, *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#signal_group_exit\">signal_group_exit</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#core_state\">core_state</a> = <a class=\"id\" href=\"#core_state\">core_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#zap_process\">zap_process</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#exit_code\">exit_code</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#nr\">nr</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>) == <a class=\"id\" href=\"#nr\">nr</a> + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We should find and kill all tasks which use this mm, and we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * count them correctly into -&gt;nr_threads. We don't take tasklist</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock, but this is safe wrt:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fork:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>None of sub-threads can fork after zap_process(leader). All</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>processes which were created before this point should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>visible to zap_threads() because copy_process() adds the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>process to the tail of init_task.tasks list, and lock/unlock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>of -&gt;siglock provides a memory barrier.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do_exit:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>The caller holds mm-&gt;mmap_sem. This means that the task which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>uses this mm can't pass exit_mm(), so it can't exit or clear</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>its -&gt;mm.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * de_thread:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>It does list_replace_rcu(&amp;leader-&gt;tasks, &amp;current-&gt;tasks),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>we must see either old or new leader, this does not matter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>However, it can change p-&gt;sighand, so lock_task_sighand(p)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>must be used. Since p-&gt;mm != NULL and we hold -&gt;mmap_sem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>it can't fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Note also that \"g\" can be the old leader with -&gt;mm == NULL</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>and already unhashed and thus removed from -&gt;thread_group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>This is OK, __unhash_process()-&gt;list_del_rcu() does not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>clear the -&gt;next pointer, we will find the new leader via</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>next_thread().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_process\">for_each_process</a>(<a class=\"id\" href=\"#g\">g</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#g\">g</a> == <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#g\">g</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_KTHREAD\">PF_KTHREAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#g\">g</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#mm\">mm</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_task_sighand\">lock_task_sighand</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> += <a class=\"id\" href=\"#zap_process\">zap_process</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#exit_code\">exit_code</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_task_sighand\">unlock_task_sighand</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#core_state\">core_state</a>-><a class=\"id\" href=\"#nr_threads\">nr_threads</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#coredump_wait\">coredump_wait</a>(int <a class=\"id\" href=\"#exit_code\">exit_code</a>, struct <a class=\"id\" href=\"#core_state\">core_state</a> *<a class=\"id\" href=\"#core_state\">core_state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#vfork_done\">vfork_done</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#core_waiters\">core_waiters</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#core_state\">core_state</a>-><a class=\"id\" href=\"#startup\">startup</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#core_state\">core_state</a>-><a class=\"id\" href=\"#dumper\">dumper</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#core_state\">core_state</a>-><a class=\"id\" href=\"#dumper\">dumper</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#core_state\">core_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#core_waiters\">core_waiters</a> = <a class=\"id\" href=\"#zap_threads\">zap_threads</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#core_state\">core_state</a>, <a class=\"id\" href=\"#exit_code\">exit_code</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#core_waiters\">core_waiters</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure nobody is waiting for us to release the VM,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * otherwise we can deadlock when we wait on each other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfork_done\">vfork_done</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#vfork_done\">vfork_done</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vfork_done\">vfork_done</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#vfork_done\">vfork_done</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#vfork_done\">vfork_done</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#core_waiters\">core_waiters</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#core_state\">core_state</a>-><a class=\"id\" href=\"#startup\">startup</a>);", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#core_waiters\">core_waiters</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#coredump_finish\">coredump_finish</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#core_thread\">core_thread</a> *<a class=\"id\" href=\"#curr\">curr</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#core_state\">core_state</a>-><a class=\"id\" href=\"#dumper\">dumper</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#next\">next</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * see exit_mm(), curr-&gt;task must not see</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * -&gt;task == NULL before we read -&gt;next.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#core_state\">core_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * set_dumpable converts traditional three-value dumpable to two flags and</span>", 
"<span class=\"comment\"> * stores them into mm-&gt;flags.  It modifies lower two bits of mm-&gt;flags, but</span>", 
"<span class=\"comment\"> * these bits are not changed atomically.  So get_dumpable can observe the</span>", 
"<span class=\"comment\"> * intermediate state.  To avoid doing unexpected behavior, get get_dumpable</span>", 
"<span class=\"comment\"> * return either old dumpable or new one by paying attention to the order of</span>", 
"<span class=\"comment\"> * modifying the bits.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * dumpable |   mm-&gt;flags (binary)</span>", 
"<span class=\"comment\"> * old  new | initial interim  final</span>", 
"<span class=\"comment\"> * ---------+-----------------------</span>", 
"<span class=\"comment\"> *  0    1  |   00      01      01</span>", 
"<span class=\"comment\"> *  0    2  |   00      10(*)   11</span>", 
"<span class=\"comment\"> *  1    0  |   01      00      00</span>", 
"<span class=\"comment\"> *  1    2  |   01      11      11</span>", 
"<span class=\"comment\"> *  2    0  |   11      10(*)   00</span>", 
"<span class=\"comment\"> *  2    1  |   11      11      01</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (*) get_dumpable regards interim value of 10 as 11.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#set_dumpable\">set_dumpable</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#value\">value</a>) {", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#MMF_DUMPABLE\">MMF_DUMPABLE</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#MMF_DUMP_SECURELY\">MMF_DUMP_SECURELY</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#MMF_DUMPABLE\">MMF_DUMPABLE</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#MMF_DUMP_SECURELY\">MMF_DUMP_SECURELY</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#MMF_DUMP_SECURELY\">MMF_DUMP_SECURELY</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#MMF_DUMPABLE\">MMF_DUMPABLE</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__get_dumpable\">__get_dumpable</a>(unsigned long <a class=\"id\" href=\"#mm_flags\">mm_flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mm_flags\">mm_flags</a> &amp; <a class=\"id\" href=\"#MMF_DUMPABLE_MASK\">MMF_DUMPABLE_MASK</a>;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ret\">ret</a> >= 2) ? 2 : <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#get_dumpable\">get_dumpable</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__get_dumpable\">__get_dumpable</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#wait_for_dump_helpers\">wait_for_dump_helpers</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock\">pipe_lock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#readers\">readers</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#writers\">writers</a>--;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#readers\">readers</a> &gt; 1) && (!<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible_sync\">wake_up_interruptible_sync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_readers\">fasync_readers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_wait\">pipe_wait</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#readers\">readers</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#writers\">writers</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * uhm_pipe_setup</span>", 
"<span class=\"comment\"> * helper function to customize the process used</span>", 
"<span class=\"comment\"> * to collect the core in userspace.  Specifically</span>", 
"<span class=\"comment\"> * it sets up a pipe and installs it as fd 0 (stdin)</span>", 
"<span class=\"comment\"> * for the process.  Returns 0 on success, or</span>", 
"<span class=\"comment\"> * PTR_ERR on failure.</span>", 
"<span class=\"comment\"> * Note that it also sets the core limit to 1.  This</span>", 
"<span class=\"comment\"> * is a special value that we use to trap recursive</span>", 
"<span class=\"comment\"> * core dumps</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#umh_pipe_setup\">umh_pipe_setup</a>(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#rp\">rp</a>, *<a class=\"id\" href=\"#wp\">wp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#coredump_params\">coredump_params</a> *<a class=\"id\" href=\"#cp\">cp</a> = (struct <a class=\"id\" href=\"#coredump_params\">coredump_params</a> *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#cf\">cf</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wp\">wp</a> = <a class=\"id\" href=\"#create_write_pipe\">create_write_pipe</a>(0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#wp\">wp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#wp\">wp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rp\">rp</a> = <a class=\"id\" href=\"#create_read_pipe\">create_read_pipe</a>(<a class=\"id\" href=\"#wp\">wp</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#rp\">rp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_write_pipe\">free_write_pipe</a>(<a class=\"id\" href=\"#wp\">wp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#wp\">wp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sys_close\">sys_close</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd_install\">fd_install</a>(0, <a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cf\">cf</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#cf\">cf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FD_SET\">FD_SET</a>(0, <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FD_CLR\">FD_CLR</a>(0, <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cf\">cf</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* and disallow core files too */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_CORE\">RLIMIT_CORE</a>] = (struct <a class=\"id\" href=\"#rlimit\">rlimit</a>){1, 1};", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#do_coredump\">do_coredump</a>(long <a class=\"id\" href=\"#signr\">signr</a>, int <a class=\"id\" href=\"#exit_code\">exit_code</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#core_state\">core_state</a> <a class=\"id\" href=\"#core_state\">core_state</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#corename\">corename</a>[<a class=\"id\" href=\"#CORENAME_MAX_SIZE\">CORENAME_MAX_SIZE</a> + 1];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linux_binfmt\">linux_binfmt</a> * <a class=\"id\" href=\"#binfmt\">binfmt</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old_cred\">old_cred</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flag\">flag</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ispipe\">ispipe</a>;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#core_dump_count\">core_dump_count</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#coredump_params\">coredump_params</a> <a class=\"id\" href=\"#cprm\">cprm</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#signr\">signr</a> = <a class=\"id\" href=\"#signr\">signr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_CORE\">RLIMIT_CORE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We must use the same mm-&gt;flags while dumping core to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * inconsistency of bit flags, since this flag is not protected</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by any locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mm_flags\">mm_flags</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_core_dumps\">audit_core_dumps</a>(<a class=\"id\" href=\"#signr\">signr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#binfmt\">binfmt</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#binfmt\">binfmt</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#binfmt\">binfmt</a> || !<a class=\"id\" href=\"#binfmt\">binfmt</a>-><a class=\"id\" href=\"#core_dump\">core_dump</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__get_dumpable\">__get_dumpable</a>(<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#mm_flags\">mm_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#prepare_creds\">prepare_creds</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cred\">cred</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>We cannot trust fsuid as being the \"true\" uid of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>process nor do we know its entire history. We only know it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>was tainted so we dump it as root in mode 2.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_dumpable\">__get_dumpable</a>(<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#mm_flags\">mm_flags</a>) == 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Setuid core dump mode */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> = <a class=\"id\" href=\"#O_EXCL\">O_EXCL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Stop rewrite attacks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* Dump root private */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#coredump_wait\">coredump_wait</a>(<a class=\"id\" href=\"#exit_code\">exit_code</a>, &amp;<a class=\"id\" href=\"#core_state\">core_state</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_creds\">fail_creds</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_cred\">old_cred</a> = <a class=\"id\" href=\"#override_creds\">override_creds</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear any false indication of pending signals that might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be seen by the filesystem code called to write the core file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_thread_flag\">clear_thread_flag</a>(<a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ispipe\">ispipe</a> = <a class=\"id\" href=\"#format_corename\">format_corename</a>(<a class=\"id\" href=\"#corename\">corename</a>, <a class=\"id\" href=\"#signr\">signr</a>);", 
"", 
" <span class=\"ts\"/>if (<a class=\"id\" href=\"#ispipe\">ispipe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dump_count\">dump_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char **<a class=\"id\" href=\"#helper_argv\">helper_argv</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#limit\">limit</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Normally core limits are irrelevant to pipes, since</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we're not writing to the file system, but we use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cprm.limit of 1 here as a speacial value. Any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * non-1 limit gets set to RLIM_INFINITY below, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a limit of 0 skips the dump.  This is a consistent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * way to catch recursive crashes.  We can still crash</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if the core_pattern binary sets RLIM_CORE =  !1</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but it runs as root, and can do lots of stupid things</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Note that we use task_tgid_vnr here to grab the pid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * of the process group leader.  That way we get the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * right pid if a thread in a multi-threaded</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * core_pattern process dies.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Process %d(%s) has RLIMIT_CORE set to 1\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>), <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Aborting core\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_unlock\">fail_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#RLIM_INFINITY\">RLIM_INFINITY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_count\">dump_count</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#core_dump_count\">core_dump_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#core_pipe_limit\">core_pipe_limit</a> && (<a class=\"id\" href=\"#core_pipe_limit\">core_pipe_limit</a> &lt; <a class=\"id\" href=\"#dump_count\">dump_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Pid %d(%s) over core_pipe_limit\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>), <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Skipping core dump\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_dropcount\">fail_dropcount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#helper_argv\">helper_argv</a> = <a class=\"id\" href=\"#argv_split\">argv_split</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#corename\">corename</a>+1, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#helper_argv\">helper_argv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s failed to allocate memory\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_dropcount\">fail_dropcount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#call_usermodehelper_fns\">call_usermodehelper_fns</a>(<a class=\"id\" href=\"#helper_argv\">helper_argv</a>[0], <a class=\"id\" href=\"#helper_argv\">helper_argv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#UMH_WAIT_EXEC\">UMH_WAIT_EXEC</a>, <a class=\"id\" href=\"#umh_pipe_setup\">umh_pipe_setup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#cprm\">cprm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argv_free\">argv_free</a>(<a class=\"id\" href=\"#helper_argv\">helper_argv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Core dump to %s pipe failed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#corename\">corename</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#close_fail\">close_fail</a>;", 
" <span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#limit\">limit</a> &lt; <a class=\"id\" href=\"#binfmt\">binfmt</a>-><a class=\"id\" href=\"#min_coredump\">min_coredump</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_unlock\">fail_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#filp_open\">filp_open</a>(<a class=\"id\" href=\"#corename\">corename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#O_CREAT\">O_CREAT</a> | 2 | <a class=\"id\" href=\"#O_NOFOLLOW\">O_NOFOLLOW</a> | <a class=\"id\" href=\"#O_LARGEFILE\">O_LARGEFILE</a> | <a class=\"id\" href=\"#flag\">flag</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 0600);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_unlock\">fail_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#close_fail\">close_fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d_unhashed\">d_unhashed</a>(<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#close_fail\">close_fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * AK: actually i see no reason to not allow this for named</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pipes etc, but keep the previous behaviour for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#close_fail\">close_fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Dont allow local users get cute and trick others to coredump</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * into their pre-created files.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> != <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#close_fail\">close_fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> || !<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#close_fail\">close_fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_truncate\">do_truncate</a>(<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, 0, 0, <a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#close_fail\">close_fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#binfmt\">binfmt</a>-><a class=\"id\" href=\"#core_dump\">core_dump</a>(&amp;<a class=\"id\" href=\"#cprm\">cprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a> |= 0x80;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ispipe\">ispipe</a> && <a class=\"id\" href=\"#core_pipe_limit\">core_pipe_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_dump_helpers\">wait_for_dump_helpers</a>(<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#file\">file</a>);", 
"<a class=\"id\" href=\"#close_fail\">close_fail</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp_close\">filp_close</a>(<a class=\"id\" href=\"#cprm\">cprm</a>.<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<a class=\"id\" href=\"#fail_dropcount\">fail_dropcount</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ispipe\">ispipe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#core_dump_count\">core_dump_count</a>);", 
"<a class=\"id\" href=\"#fail_unlock\">fail_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#coredump_finish\">coredump_finish</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#revert_creds\">revert_creds</a>(<a class=\"id\" href=\"#old_cred\">old_cred</a>);", 
"<a class=\"id\" href=\"#fail_creds\">fail_creds</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Core dumping helper functions.  These are the only things you should</span>", 
"<span class=\"comment\"> * do on a core-file: use only these functions to write out all the</span>", 
"<span class=\"comment\"> * necessary info.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dump_write\">dump_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const void *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#nr\">nr</a>) && <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#write\">write</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>) == <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dump_write\">dump_write</a>);", 
"", 
"int <a class=\"id\" href=\"#dump_seek\">dump_seek</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#off\">off</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#llseek\">llseek</a> && <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#llseek\">llseek</a> != <a class=\"id\" href=\"#no_llseek\">no_llseek</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#llseek\">llseek</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#SEEK_CUR\">SEEK_CUR</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a> = (char *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#off\">off</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dump_write\">dump_write</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dump_seek\">dump_seek</a>);", 
];
xr_frag_insert('l/59/3d28319ccfaa93d813f26a45083e0e1e420749.xr', __xr_tmp);
