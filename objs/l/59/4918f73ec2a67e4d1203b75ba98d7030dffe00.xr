var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: tbfadt   - FADT table utilities</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"actables.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_TABLES\">ACPI_TABLES</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"tbfadt\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#acpi_tb_init_generic_address\">acpi_tb_init_generic_address</a>(struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#generic_address\">generic_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#space_id\">space_id</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#byte_width\">byte_width</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"static void <a class=\"id\" href=\"#acpi_tb_convert_fadt\">acpi_tb_convert_fadt</a>(void);", 
"", 
"static void <a class=\"id\" href=\"#acpi_tb_validate_fadt\">acpi_tb_validate_fadt</a>(void);", 
"", 
"static void <a class=\"id\" href=\"#acpi_tb_setup_fadt_registers\">acpi_tb_setup_fadt_registers</a>(void);", 
"", 
"<span class=\"comment\">/* Table for conversion of FADT to common internal format and FADT validation */</span>", 
"", 
"typedef struct <a class=\"id\" href=\"#acpi_fadt_info\">acpi_fadt_info</a> {", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#address64\">address64</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#address32\">address32</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#default_length\">default_length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"} <a class=\"id\" href=\"#acpi_fadt_info\">acpi_fadt_info</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_FADT_REQUIRED\">ACPI_FADT_REQUIRED</a>          1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_FADT_SEPARATE_LENGTH\">ACPI_FADT_SEPARATE_LENGTH</a>   2", 
"", 
"static struct <a class=\"id\" href=\"#acpi_fadt_info\">acpi_fadt_info</a> <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[] = {", 
"<span class=\"ts\"/>{\"Pm1aEventBlock\",", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xpm1a_event_block\">xpm1a_event_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm1a_event_block\">pm1a_event_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm1_event_length\">pm1_event_length</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_PM1_REGISTER_WIDTH\">ACPI_PM1_REGISTER_WIDTH</a> * 2,<span class=\"ts\"/><span class=\"comment\">/* Enable + Status register */</span>", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_REQUIRED\">ACPI_FADT_REQUIRED</a>},", 
"", 
"<span class=\"ts\"/>{\"Pm1bEventBlock\",", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xpm1b_event_block\">xpm1b_event_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm1b_event_block\">pm1b_event_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm1_event_length\">pm1_event_length</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_PM1_REGISTER_WIDTH\">ACPI_PM1_REGISTER_WIDTH</a> * 2,<span class=\"ts\"/><span class=\"comment\">/* Enable + Status register */</span>", 
"<span class=\"ts\"/> 0},", 
"", 
"<span class=\"ts\"/>{\"Pm1aControlBlock\",", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xpm1a_control_block\">xpm1a_control_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm1a_control_block\">pm1a_control_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm1_control_length\">pm1_control_length</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_PM1_REGISTER_WIDTH\">ACPI_PM1_REGISTER_WIDTH</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_REQUIRED\">ACPI_FADT_REQUIRED</a>},", 
"", 
"<span class=\"ts\"/>{\"Pm1bControlBlock\",", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xpm1b_control_block\">xpm1b_control_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm1b_control_block\">pm1b_control_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm1_control_length\">pm1_control_length</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_PM1_REGISTER_WIDTH\">ACPI_PM1_REGISTER_WIDTH</a>,", 
"<span class=\"ts\"/> 0},", 
"", 
"<span class=\"ts\"/>{\"Pm2ControlBlock\",", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xpm2_control_block\">xpm2_control_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm2_control_block\">pm2_control_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm2_control_length\">pm2_control_length</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_PM2_REGISTER_WIDTH\">ACPI_PM2_REGISTER_WIDTH</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_SEPARATE_LENGTH\">ACPI_FADT_SEPARATE_LENGTH</a>},", 
"", 
"<span class=\"ts\"/>{\"PmTimerBlock\",", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xpm_timer_block\">xpm_timer_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm_timer_block\">pm_timer_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#pm_timer_length\">pm_timer_length</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_PM_TIMER_WIDTH\">ACPI_PM_TIMER_WIDTH</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_REQUIRED\">ACPI_FADT_REQUIRED</a>},", 
"", 
"<span class=\"ts\"/>{\"Gpe0Block\",", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xgpe0_block\">xgpe0_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#gpe0_block\">gpe0_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#gpe0_block_length\">gpe0_block_length</a>),", 
"<span class=\"ts\"/> 0,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_SEPARATE_LENGTH\">ACPI_FADT_SEPARATE_LENGTH</a>},", 
"", 
"<span class=\"ts\"/>{\"Gpe1Block\",", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xgpe1_block\">xgpe1_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#gpe1_block\">gpe1_block</a>),", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#gpe1_block_length\">gpe1_block_length</a>),", 
"<span class=\"ts\"/> 0,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_SEPARATE_LENGTH\">ACPI_FADT_SEPARATE_LENGTH</a>}", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_FADT_INFO_ENTRIES\">ACPI_FADT_INFO_ENTRIES</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(sizeof (<a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>) / sizeof (struct <a class=\"id\" href=\"#acpi_fadt_info\">acpi_fadt_info</a>))", 
"", 
"<span class=\"comment\">/* Table used to split Event Blocks into separate status/enable registers */</span>", 
"", 
"typedef struct <a class=\"id\" href=\"#acpi_fadt_pm_info\">acpi_fadt_pm_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#source\">source</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#register_num\">register_num</a>;", 
"", 
"} <a class=\"id\" href=\"#acpi_fadt_pm_info\">acpi_fadt_pm_info</a>;", 
"", 
"static struct <a class=\"id\" href=\"#acpi_fadt_pm_info\">acpi_fadt_pm_info</a> <a class=\"id\" href=\"#fadt_pm_info_table\">fadt_pm_info_table</a>[] = {", 
"<span class=\"ts\"/>{&amp;<a class=\"id\" href=\"#acpi_gbl_xpm1a_status\">acpi_gbl_xpm1a_status</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xpm1a_event_block\">xpm1a_event_block</a>),", 
"<span class=\"ts\"/> 0},", 
"", 
"<span class=\"ts\"/>{&amp;<a class=\"id\" href=\"#acpi_gbl_xpm1a_enable\">acpi_gbl_xpm1a_enable</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xpm1a_event_block\">xpm1a_event_block</a>),", 
"<span class=\"ts\"/> 1},", 
"", 
"<span class=\"ts\"/>{&amp;<a class=\"id\" href=\"#acpi_gbl_xpm1b_status\">acpi_gbl_xpm1b_status</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xpm1b_event_block\">xpm1b_event_block</a>),", 
"<span class=\"ts\"/> 0},", 
"", 
"<span class=\"ts\"/>{&amp;<a class=\"id\" href=\"#acpi_gbl_xpm1b_enable\">acpi_gbl_xpm1b_enable</a>,", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FADT_OFFSET\">ACPI_FADT_OFFSET</a>(<a class=\"id\" href=\"#xpm1b_event_block\">xpm1b_event_block</a>),", 
"<span class=\"ts\"/> 1}", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_FADT_PM_INFO_ENTRIES\">ACPI_FADT_PM_INFO_ENTRIES</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(sizeof (<a class=\"id\" href=\"#fadt_pm_info_table\">fadt_pm_info_table</a>) / sizeof (struct <a class=\"id\" href=\"#acpi_fadt_pm_info\">acpi_fadt_pm_info</a>))", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_tb_init_generic_address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  generic_address     - GAS struct to be initialized</span>", 
"<span class=\"comment\"> *              byte_width          - Width of this register</span>", 
"<span class=\"comment\"> *              Address             - Address of the register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Initialize a Generic Address Structure (GAS)</span>", 
"<span class=\"comment\"> *              See the ACPI specification for a full description and</span>", 
"<span class=\"comment\"> *              definition of this structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#acpi_tb_init_generic_address\">acpi_tb_init_generic_address</a>(struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#generic_address\">generic_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#space_id\">space_id</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#byte_width\">byte_width</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The 64-bit Address field is non-aligned in the byte packed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * GAS struct.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_64_TO_64\">ACPI_MOVE_64_TO_64</a>(&amp;<a class=\"id\" href=\"#generic_address\">generic_address</a>-><a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All other fields are byte-wide */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#generic_address\">generic_address</a>-><a class=\"id\" href=\"#space_id\">space_id</a> = <a class=\"id\" href=\"#space_id\">space_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#generic_address\">generic_address</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> = (<a class=\"id\" href=\"#u8\">u8</a>)<a class=\"id\" href=\"#ACPI_MUL_8\">ACPI_MUL_8</a>(<a class=\"id\" href=\"#byte_width\">byte_width</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#generic_address\">generic_address</a>-><a class=\"id\" href=\"#bit_offset\">bit_offset</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#generic_address\">generic_address</a>-><a class=\"id\" href=\"#access_width\">access_width</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* Access width ANY */</span>", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_tb_parse_fadt</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  table_index         - Index for the FADT</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Initialize the FADT, DSDT and FACS tables</span>", 
"<span class=\"comment\"> *              (FADT contains the addresses of the DSDT and FACS)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_tb_parse_fadt\">acpi_tb_parse_fadt</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#table_index\">table_index</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#table\">table</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The FADT has multiple versions with different lengths,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and it contains pointers to both the DSDT and FACS tables.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get a local copy of the FADT and convert it to a common format</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Map entire FADT, assumed to be smaller than one page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#acpi_gbl_root_table_list\">acpi_gbl_root_table_list</a>.<a class=\"id\" href=\"#tables\">tables</a>[<a class=\"id\" href=\"#table_index\">table_index</a>].<a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_map_memory\">acpi_os_map_memory</a>(<a class=\"id\" href=\"#acpi_gbl_root_table_list\">acpi_gbl_root_table_list</a>.<a class=\"id\" href=\"#tables\">tables</a>[<a class=\"id\" href=\"#table_index\">table_index</a>].", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#table\">table</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Validate the FADT checksum before we copy the table. Ignore</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * checksum error as we want to try to get the DSDT and FACS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_tb_verify_checksum\">acpi_tb_verify_checksum</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create a local copy of the FADT in common ACPI 2.0+ format */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_tb_create_local_fadt\">acpi_tb_create_local_fadt</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All done with the real FADT, unmap it */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_unmap_memory\">acpi_os_unmap_memory</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Obtain the DSDT and FACS tables via their addresses within the FADT */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_tb_install_table\">acpi_tb_install_table</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>) <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xdsdt\">Xdsdt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_SIG_DSDT\">ACPI_SIG_DSDT</a>, <a class=\"id\" href=\"#ACPI_TABLE_INDEX_DSDT\">ACPI_TABLE_INDEX_DSDT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_tb_install_table\">acpi_tb_install_table</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>) <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xfacs\">Xfacs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_SIG_FACS\">ACPI_SIG_FACS</a>, <a class=\"id\" href=\"#ACPI_TABLE_INDEX_FACS\">ACPI_TABLE_INDEX_FACS</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_tb_create_local_fadt</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Table               - Pointer to BIOS FADT</span>", 
"<span class=\"comment\"> *              Length              - Length of the table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get a local copy of the FADT and convert it to a common format.</span>", 
"<span class=\"comment\"> *              Performs validation on some important FADT fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE:        We create a local copy of the FADT regardless of the version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_tb_create_local_fadt\">acpi_tb_create_local_fadt</a>(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if the FADT is larger than the largest table that we expect</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (the ACPI 2.0/3.0 version). If so, truncate the table, and issue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a warning.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; sizeof(struct <a class=\"id\" href=\"#acpi_table_fadt\">acpi_table_fadt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"FADT (revision %u) is longer than ACPI 2.0 version, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"truncating length %u to %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#revision\">revision</a>, <a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (<a class=\"id\" href=\"#u32\">u32</a>)sizeof(struct <a class=\"id\" href=\"#acpi_table_fadt\">acpi_table_fadt</a>)));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the entire local FADT */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMSET\">ACPI_MEMSET</a>(&amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>, 0, sizeof(struct <a class=\"id\" href=\"#acpi_table_fadt\">acpi_table_fadt</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy the original FADT, up to sizeof (struct acpi_table_fadt) */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMCPY\">ACPI_MEMCPY</a>(&amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>, <a class=\"id\" href=\"#table\">table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_MIN\">ACPI_MIN</a>(<a class=\"id\" href=\"#length\">length</a>, sizeof(struct <a class=\"id\" href=\"#acpi_table_fadt\">acpi_table_fadt</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Convert the local copy of the FADT to the common internal format */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_tb_convert_fadt\">acpi_tb_convert_fadt</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate FADT values now, before we make any changes */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_tb_validate_fadt\">acpi_tb_validate_fadt</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the global ACPI register structures */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_tb_setup_fadt_registers\">acpi_tb_setup_fadt_registers</a>();", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_tb_convert_fadt</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None, uses acpi_gbl_FADT</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Converts all versions of the FADT to a common internal format.</span>", 
"<span class=\"comment\"> *              Expand 32-bit addresses to 64-bit as necessary.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE:        acpi_gbl_FADT must be of size (struct acpi_table_fadt),</span>", 
"<span class=\"comment\"> *              and must contain a copy of the actual FADT.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes on 64-bit register addresses:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After this FADT conversion, later ACPICA code will only use the 64-bit \"X\"</span>", 
"<span class=\"comment\"> * fields of the FADT for all ACPI register addresses.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The 64-bit \"X\" fields are optional extensions to the original 32-bit FADT</span>", 
"<span class=\"comment\"> * V1.0 fields. Even if they are present in the FADT, they are optional and</span>", 
"<span class=\"comment\"> * are unused if the BIOS sets them to zero. Therefore, we must copy/expand</span>", 
"<span class=\"comment\"> * 32-bit V1.0 fields if the corresponding X field is zero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For ACPI 1.0 FADTs, all 32-bit address fields are expanded to the</span>", 
"<span class=\"comment\"> * corresponding \"X\" fields in the internal FADT.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For ACPI 2.0+ FADTs, all valid (non-zero) 32-bit address fields are expanded</span>", 
"<span class=\"comment\"> * to the corresponding 64-bit X fields. For compatibility with other ACPI</span>", 
"<span class=\"comment\"> * implementations, we ignore the 64-bit field if the 32-bit field is valid,</span>", 
"<span class=\"comment\"> * regardless of whether the host OS is 32-bit or 64-bit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static void <a class=\"id\" href=\"#acpi_tb_convert_fadt\">acpi_tb_convert_fadt</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#address64\">address64</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#address32\">address32</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update the local FADT table header length */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#length\">length</a> = sizeof(struct <a class=\"id\" href=\"#acpi_table_fadt\">acpi_table_fadt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Expand the 32-bit FACS and DSDT addresses to 64-bit as necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Later code will always use the X 64-bit field. Also, check for an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * address mismatch between the 32-bit and 64-bit address fields</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (FIRMWARE_CTRL/X_FIRMWARE_CTRL, DSDT/X_DSDT) which would indicate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the presence of two FACS or two DSDT tables.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xfacs\">Xfacs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xfacs\">Xfacs</a> = (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#facs\">facs</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#facs\">facs</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xfacs\">Xfacs</a> != (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#facs\">facs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"32/64 FACS address mismatch in FADT - two FACS tables!\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xdsdt\">Xdsdt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xdsdt\">Xdsdt</a> = (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#dsdt\">dsdt</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#dsdt\">dsdt</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xdsdt\">Xdsdt</a> != (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#dsdt\">dsdt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"32/64 DSDT address mismatch in FADT - two DSDT tables!\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For ACPI 1.0 FADTs (revision 1 or 2), ensure that reserved fields which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should be zero are indeed zero. This will workaround BIOSs that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inadvertently place values in these fields.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The ACPI 1.0 reserved fields that will be zeroed are the bytes located at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * offset 45, 55, 95, and the word located at offset 109, 110.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#revision\">revision</a> &lt; <a class=\"id\" href=\"#FADT2_REVISION_ID\">FADT2_REVISION_ID</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#preferred_profile\">preferred_profile</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#pstate_control\">pstate_control</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#cst_control\">cst_control</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#boot_flags\">boot_flags</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Expand the ACPI 1.0 32-bit addresses to the ACPI 2.0 64-bit \"X\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * generic address structures as necessary. Later code will always use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the 64-bit address structures.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * March 2009:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We now always use the 32-bit address if it is valid (non-null). This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is not in accordance with the ACPI specification which states that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the 64-bit address supersedes the 32-bit version, but we do this for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * compatibility with other ACPI implementations. Most notably, in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case where both the 32 and 64 versions are non-null, we use the 32-bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * version. This is the only address that is guaranteed to have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tested by the BIOS manufacturer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_FADT_INFO_ENTRIES\">ACPI_FADT_INFO_ENTRIES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address32\">address32</a> = *<a class=\"id\" href=\"#ACPI_ADD_PTR\">ACPI_ADD_PTR</a>(<a class=\"id\" href=\"#u32\">u32</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#address32\">address32</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address64\">address64</a> = <a class=\"id\" href=\"#ACPI_ADD_PTR\">ACPI_ADD_PTR</a>(struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#address64\">address64</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If both 32- and 64-bit addresses are valid (non-zero),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * they must match.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#address64\">address64</a>-><a class=\"id\" href=\"#address\">address</a> && <a class=\"id\" href=\"#address32\">address32</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#address64\">address64</a>-><a class=\"id\" href=\"#address\">address</a> != (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#address32\">address32</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"32/64X address mismatch in %s: 0x%8.8X/0x%8.8X%8.8X, using 32\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#address32\">address32</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#address64\">address64</a>-><a class=\"id\" href=\"#address\">address</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Always use 32-bit address if it is valid (non-null) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#address32\">address32</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Copy the 32-bit address to the 64-bit GAS structure. The</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Space ID is always I/O for 32-bit legacy address fields</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_tb_init_generic_address\">acpi_tb_init_generic_address</a>(<a class=\"id\" href=\"#address64\">address64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_IO\">ACPI_ADR_SPACE_SYSTEM_IO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     *<a class=\"id\" href=\"#ACPI_ADD_PTR\">ACPI_ADD_PTR</a>(<a class=\"id\" href=\"#u8\">u8</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   [<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#length\">length</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#address32\">address32</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_tb_validate_fadt</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Table           - Pointer to the FADT to be validated</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Validate various important fields within the FADT. If a problem</span>", 
"<span class=\"comment\"> *              is found, issue a message, but no status is returned.</span>", 
"<span class=\"comment\"> *              Used by both the table manager and the disassembler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Possible additional checks:</span>", 
"<span class=\"comment\"> * (acpi_gbl_FADT.pm1_event_length &gt;= 4)</span>", 
"<span class=\"comment\"> * (acpi_gbl_FADT.pm1_control_length &gt;= 2)</span>", 
"<span class=\"comment\"> * (acpi_gbl_FADT.pm_timer_length &gt;= 4)</span>", 
"<span class=\"comment\"> * Gpe block lengths must be multiple of 2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static void <a class=\"id\" href=\"#acpi_tb_validate_fadt\">acpi_tb_validate_fadt</a>(void)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#address64\">address64</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for FACS and DSDT address mismatches. An address mismatch between</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the 32-bit and 64-bit address fields (FIRMWARE_CTRL/X_FIRMWARE_CTRL and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * DSDT/X_DSDT) would indicate the presence of two FACS or two DSDT tables.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#facs\">facs</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xfacs\">Xfacs</a> != (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#facs\">facs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"32/64X FACS address mismatch in FADT - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"0x%8.8X/0x%8.8X%8.8X, using 32\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#facs\">facs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xfacs\">Xfacs</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xfacs\">Xfacs</a> = (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#facs\">facs</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#dsdt\">dsdt</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xdsdt\">Xdsdt</a> != (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#dsdt\">dsdt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"32/64X DSDT address mismatch in FADT - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"0x%8.8X/0x%8.8X%8.8X, using 32\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#dsdt\">dsdt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xdsdt\">Xdsdt</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#Xdsdt\">Xdsdt</a> = (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#dsdt\">dsdt</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Examine all of the 64-bit extended address fields (X fields) */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_FADT_INFO_ENTRIES\">ACPI_FADT_INFO_ENTRIES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Generate pointer to the 64-bit address, get the register</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * length (width) and the register name</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address64\">address64</a> = <a class=\"id\" href=\"#ACPI_ADD_PTR\">ACPI_ADD_PTR</a>(struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#address64\">address64</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    *<a class=\"id\" href=\"#ACPI_ADD_PTR\">ACPI_ADD_PTR</a>(<a class=\"id\" href=\"#u8\">u8</a>, &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For each extended field, check for length mismatch between the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * legacy length field and the corresponding 64-bit X length field.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#address64\">address64</a>-><a class=\"id\" href=\"#address\">address</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#address64\">address64</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> != <a class=\"id\" href=\"#ACPI_MUL_8\">ACPI_MUL_8</a>(<a class=\"id\" href=\"#length\">length</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"32/64X length mismatch in %s: %u/%u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ACPI_MUL_8\">ACPI_MUL_8</a>(<a class=\"id\" href=\"#length\">length</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#address64\">address64</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a> &amp; <a class=\"id\" href=\"#ACPI_FADT_REQUIRED\">ACPI_FADT_REQUIRED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Field is required (Pm1a_event, Pm1a_control, pm_timer).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Both the address and length must be non-zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#address64\">address64</a>-><a class=\"id\" href=\"#address\">address</a> || !<a class=\"id\" href=\"#length\">length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Required field %s has zero address and/or length:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \" 0x%8.8X%8.8X/0x%X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#address64\">address64</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#address\">address</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#length\">length</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a> &amp; <a class=\"id\" href=\"#ACPI_FADT_SEPARATE_LENGTH\">ACPI_FADT_SEPARATE_LENGTH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Field is optional (PM2Control, GPE0, GPE1) AND has its own</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * length field. If present, both the address and length must</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * be valid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#address64\">address64</a>-><a class=\"id\" href=\"#address\">address</a> && !<a class=\"id\" href=\"#length\">length</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#address64\">address64</a>-><a class=\"id\" href=\"#address\">address</a> && <a class=\"id\" href=\"#length\">length</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Optional field %s has zero address or length: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"0x%8.8X%8.8X/0x%X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#address64\">address64</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#address\">address</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#length\">length</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_tb_setup_fadt_registers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None, uses acpi_gbl_FADT.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Initialize global ACPI PM1 register definitions. Optionally,</span>", 
"<span class=\"comment\"> *              force FADT register definitions to their default lengths.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static void <a class=\"id\" href=\"#acpi_tb_setup_fadt_registers\">acpi_tb_setup_fadt_registers</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#target64\">target64</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#source64\">source64</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pm1_register_byte_width\">pm1_register_byte_width</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Optionally check all register lengths against the default values and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update them if they are incorrect.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_use_default_register_widths\">acpi_gbl_use_default_register_widths</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_FADT_INFO_ENTRIES\">ACPI_FADT_INFO_ENTRIES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target64\">target64</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_ADD_PTR\">ACPI_ADD_PTR</a>(struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#address64\">address64</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If a valid register (Address != 0) and the (default_length &gt; 0)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (Not a GPE register), then check the width against the default.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#target64\">target64</a>-><a class=\"id\" href=\"#address\">address</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#default_length\">default_length</a> &gt; 0) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#default_length\">default_length</a> !=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#target64\">target64</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Invalid length for %s: %u, using default %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#target64\">target64</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#default_length\">default_length</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Incorrect size, set width to the default */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target64\">target64</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#fadt_info_table\">fadt_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#default_length\">default_length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the length of the individual PM1 registers (enable and status).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Each register is defined to be (event block length / 2). Extra divide</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by 8 converts bits to bytes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm1_register_byte_width\">pm1_register_byte_width</a> = (<a class=\"id\" href=\"#u8\">u8</a>)", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_DIV_16\">ACPI_DIV_16</a>(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xpm1a_event_block\">xpm1a_event_block</a>.<a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calculate separate GAS structs for the PM1x (A/B) Status and Enable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * registers. These addresses do not appear (directly) in the FADT, so it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is useful to pre-calculate them from the PM1 Event Block definitions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The PM event blocks are split into two register blocks, first is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PM Status Register block, followed immediately by the PM Enable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Register block. Each is of length (pm1_event_length/2)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: The PM1A event block is required by the ACPI specification.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * However, the PM1B event block is optional and is rarely, if ever,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * used.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_FADT_PM_INFO_ENTRIES\">ACPI_FADT_PM_INFO_ENTRIES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#source64\">source64</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_ADD_PTR\">ACPI_ADD_PTR</a>(struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a>, &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#fadt_pm_info_table\">fadt_pm_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#source\">source</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#source64\">source64</a>-><a class=\"id\" href=\"#address\">address</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_tb_init_generic_address\">acpi_tb_init_generic_address</a>(<a class=\"id\" href=\"#fadt_pm_info_table\">fadt_pm_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#source64\">source64</a>-><a class=\"id\" href=\"#space_id\">space_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#pm1_register_byte_width\">pm1_register_byte_width</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#source64\">source64</a>-><a class=\"id\" href=\"#address\">address</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#fadt_pm_info_table\">fadt_pm_info_table</a>[<a class=\"id\" href=\"#i\">i</a>].", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#register_num\">register_num</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pm1_register_byte_width\">pm1_register_byte_width</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/59/4918f73ec2a67e4d1203b75ba98d7030dffe00.xr', __xr_tmp);
