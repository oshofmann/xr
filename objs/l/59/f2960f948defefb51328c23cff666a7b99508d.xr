var __xr_tmp = [
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__nodes_weight\">__nodes_weight</a>(const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_weight\">bitmap_weight</a>(<a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_shift_right\">nodes_shift_right</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#n\">n</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_shift_right\">__nodes_shift_right</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), &amp;(<a class=\"id\" href=\"#src\">src</a>), (<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_shift_right\">__nodes_shift_right</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>, int <a class=\"id\" href=\"#n\">n</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_shift_right\">bitmap_shift_right</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_shift_left\">nodes_shift_left</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#n\">n</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_shift_left\">__nodes_shift_left</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), &amp;(<a class=\"id\" href=\"#src\">src</a>), (<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_shift_left\">__nodes_shift_left</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>, int <a class=\"id\" href=\"#n\">n</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_shift_left\">bitmap_shift_left</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"<span class=\"comment\">/* FIXME: better would be to fix all architectures to never return</span>", 
"<span class=\"comment\">          &gt; MAX_NUMNODES, then the silly min_ts could be dropped. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#src\">src</a>) <a class=\"id\" href=\"#__first_node\">__first_node</a>(&amp;(<a class=\"id\" href=\"#src\">src</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__first_node\">__first_node</a>(const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>, <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(<a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#next_node\">next_node</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#src\">src</a>) <a class=\"id\" href=\"#__next_node\">__next_node</a>((<a class=\"id\" href=\"#n\">n</a>), &amp;(<a class=\"id\" href=\"#src\">src</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__next_node\">__next_node</a>(int <a class=\"id\" href=\"#n\">n</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_t\">min_t</a>(int,<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>,<a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>, <a class=\"id\" href=\"#n\">n</a>+1));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_nodemask_of_node\">init_nodemask_of_node</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(*<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodemask_of_node\">nodemask_of_node</a>(<a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#_unused_nodemask_arg_\">_unused_nodemask_arg_</a>) <a class=\"id\" href=\"#m\">m</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#m\">m</a>) == sizeof(unsigned long)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#bits\">bits</a>[0] = 1UL << (<a class=\"id\" href=\"#node\">node</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_nodemask_of_node\">init_nodemask_of_node</a>(&amp;<a class=\"id\" href=\"#m\">m</a>, (<a class=\"id\" href=\"#node\">node</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#first_unset_node\">first_unset_node</a>(<a class=\"id\" href=\"#mask\">mask</a>) <a class=\"id\" href=\"#__first_unset_node\">__first_unset_node</a>(&amp;(<a class=\"id\" href=\"#mask\">mask</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__first_unset_node\">__first_unset_node</a>(const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#maskp\">maskp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_t\">min_t</a>(int,<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#find_first_zero_bit\">find_first_zero_bit</a>(<a class=\"id\" href=\"#maskp\">maskp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODE_MASK_LAST_WORD\">NODE_MASK_LAST_WORD</a> <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"", 
"#if <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a> <= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODE_MASK_ALL\">NODE_MASK_ALL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"((<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a>) { {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)-1] = <a class=\"id\" href=\"#NODE_MASK_LAST_WORD\">NODE_MASK_LAST_WORD</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} })", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODE_MASK_ALL\">NODE_MASK_ALL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"((<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a>) { {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)-2] = ~0UL,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)-1] = <a class=\"id\" href=\"#NODE_MASK_LAST_WORD\">NODE_MASK_LAST_WORD</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} })", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODE_MASK_NONE\">NODE_MASK_NONE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"((<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a>) { {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)-1] =  0UL<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} })", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_addr\">nodes_addr</a>(<a class=\"id\" href=\"#src\">src</a>) ((<a class=\"id\" href=\"#src\">src</a>).<a class=\"id\" href=\"#bits\">bits</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodemask_scnprintf\">nodemask_scnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#src\">src</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodemask_scnprintf\">__nodemask_scnprintf</a>((<a class=\"id\" href=\"#buf\">buf</a>), (<a class=\"id\" href=\"#len\">len</a>), &amp;(<a class=\"id\" href=\"#src\">src</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__nodemask_scnprintf\">__nodemask_scnprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_scnprintf\">bitmap_scnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodemask_parse_user\">nodemask_parse_user</a>(<a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#ulen\">ulen</a>, <a class=\"id\" href=\"#dst\">dst</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodemask_parse_user\">__nodemask_parse_user</a>((<a class=\"id\" href=\"#ubuf\">ubuf</a>), (<a class=\"id\" href=\"#ulen\">ulen</a>), &amp;(<a class=\"id\" href=\"#dst\">dst</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__nodemask_parse_user\">__nodemask_parse_user</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_parse_user\">bitmap_parse_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodelist_scnprintf\">nodelist_scnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#src\">src</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodelist_scnprintf\">__nodelist_scnprintf</a>((<a class=\"id\" href=\"#buf\">buf</a>), (<a class=\"id\" href=\"#len\">len</a>), &amp;(<a class=\"id\" href=\"#src\">src</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__nodelist_scnprintf\">__nodelist_scnprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_scnlistprintf\">bitmap_scnlistprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodelist_parse\">nodelist_parse</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#dst\">dst</a>) <a class=\"id\" href=\"#__nodelist_parse\">__nodelist_parse</a>((<a class=\"id\" href=\"#buf\">buf</a>), &amp;(<a class=\"id\" href=\"#dst\">dst</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__nodelist_parse\">__nodelist_parse</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_parselist\">bitmap_parselist</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_remap\">node_remap</a>(<a class=\"id\" href=\"#oldbit\">oldbit</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__node_remap\">__node_remap</a>((<a class=\"id\" href=\"#oldbit\">oldbit</a>), &amp;(<a class=\"id\" href=\"#old\">old</a>), &amp;(<a class=\"id\" href=\"#new\">new</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__node_remap\">__node_remap</a>(int <a class=\"id\" href=\"#oldbit\">oldbit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#oldp\">oldp</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#newp\">newp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_bitremap\">bitmap_bitremap</a>(<a class=\"id\" href=\"#oldbit\">oldbit</a>, <a class=\"id\" href=\"#oldp\">oldp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#newp\">newp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_remap\">nodes_remap</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_remap\">__nodes_remap</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), &amp;(<a class=\"id\" href=\"#src\">src</a>), &amp;(<a class=\"id\" href=\"#old\">old</a>), &amp;(<a class=\"id\" href=\"#new\">new</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_remap\">__nodes_remap</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#oldp\">oldp</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#newp\">newp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_remap\">bitmap_remap</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#oldp\">oldp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#newp\">newp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_onto\">nodes_onto</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#orig\">orig</a>, <a class=\"id\" href=\"#relmap\">relmap</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_onto\">__nodes_onto</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), &amp;(<a class=\"id\" href=\"#orig\">orig</a>), &amp;(<a class=\"id\" href=\"#relmap\">relmap</a>), <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_onto\">__nodes_onto</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#origp\">origp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#relmapp\">relmapp</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_onto\">bitmap_onto</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#origp\">origp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#relmapp\">relmapp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nodes_fold\">nodes_fold</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#orig\">orig</a>, <a class=\"id\" href=\"#sz\">sz</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__nodes_fold\">__nodes_fold</a>(&amp;(<a class=\"id\" href=\"#dst\">dst</a>), &amp;(<a class=\"id\" href=\"#orig\">orig</a>), <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nodes_fold\">__nodes_fold</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#origp\">origp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#sz\">sz</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_fold\">bitmap_fold</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#origp\">origp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a> &gt; 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#node\">node</a>) = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#mask\">mask</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#node\">node</a>) &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#node\">node</a>) = <a class=\"id\" href=\"#next_node\">next_node</a>((<a class=\"id\" href=\"#node\">node</a>), (<a class=\"id\" href=\"#mask\">mask</a>)))", 
"#else <span class=\"comment\">/* MAX_NUMNODES == 1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(<a class=\"id\" href=\"#mask\">mask</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>for ((<a class=\"id\" href=\"#node\">node</a>) = 0; (<a class=\"id\" href=\"#node\">node</a>) &lt; 1; (<a class=\"id\" href=\"#node\">node</a>)++)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* MAX_NUMNODES */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bitmasks that are kept for all the nodes.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#node_states\">node_states</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#N_POSSIBLE\">N_POSSIBLE</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The node could become online at some point */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The node is online */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#N_NORMAL_MEMORY\">N_NORMAL_MEMORY</a>,<span class=\"ts\"/><span class=\"comment\">/* The node has regular memory */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The node has regular or high memory */</span>", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a> = <a class=\"id\" href=\"#N_NORMAL_MEMORY\">N_NORMAL_MEMORY</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#N_CPU\">N_CPU</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The node has one or more cpus */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NR_NODE_STATES\">NR_NODE_STATES</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following particular system nodemasks and operations</span>", 
"<span class=\"comment\"> * on them manage all possible and online nodes.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"extern <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#NR_NODE_STATES\">NR_NODE_STATES</a>];", 
"", 
"#if <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a> &gt; 1", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#node_state\">node_state</a>(int <a class=\"id\" href=\"#node\">node</a>, enum <a class=\"id\" href=\"#node_states\">node_states</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#state\">state</a>]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#node_set_state\">node_set_state</a>(int <a class=\"id\" href=\"#node\">node</a>, enum <a class=\"id\" href=\"#node_states\">node_states</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__node_set\">__node_set</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#state\">state</a>]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#node_clear_state\">node_clear_state</a>(int <a class=\"id\" href=\"#node\">node</a>, enum <a class=\"id\" href=\"#node_states\">node_states</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__node_clear\">__node_clear</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#state\">state</a>]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#num_node_state\">num_node_state</a>(enum <a class=\"id\" href=\"#node_states\">node_states</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nodes_weight\">nodes_weight</a>(<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#state\">state</a>]);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#__node\">__node</a>, <a class=\"id\" href=\"#__state\">__state</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>((<a class=\"id\" href=\"#__node\">__node</a>), <a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#__state\">__state</a>])", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#first_online_node\">first_online_node</a><span class=\"ts\"/><a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>])", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#next_online_node\">next_online_node</a>(<a class=\"id\" href=\"#nid\">nid</a>)<span class=\"ts\"/><a class=\"id\" href=\"#next_node\">next_node</a>((<a class=\"id\" href=\"#nid\">nid</a>), <a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>])", 
"", 
"extern int <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>;", 
"extern int <a class=\"id\" href=\"#nr_online_nodes\">nr_online_nodes</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#node_set_online\">node_set_online</a>(int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set_state\">node_set_state</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_online_nodes\">nr_online_nodes</a> = <a class=\"id\" href=\"#num_node_state\">num_node_state</a>(<a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#node_set_offline\">node_set_offline</a>(int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_clear_state\">node_clear_state</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_online_nodes\">nr_online_nodes</a> = <a class=\"id\" href=\"#num_node_state\">num_node_state</a>(<a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>);", 
"}", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#node_state\">node_state</a>(int <a class=\"id\" href=\"#node\">node</a>, enum <a class=\"id\" href=\"#node_states\">node_states</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a> == 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#node_set_state\">node_set_state</a>(int <a class=\"id\" href=\"#node\">node</a>, enum <a class=\"id\" href=\"#node_states\">node_states</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#node_clear_state\">node_clear_state</a>(int <a class=\"id\" href=\"#node\">node</a>, enum <a class=\"id\" href=\"#node_states\">node_states</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#num_node_state\">num_node_state</a>(enum <a class=\"id\" href=\"#node_states\">node_states</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#__state\">__state</a>) \\", 
"<span class=\"ts\"/>for ( (<a class=\"id\" href=\"#node\">node</a>) = 0; (<a class=\"id\" href=\"#node\">node</a>) == 0; (<a class=\"id\" href=\"#node\">node</a>) = 1)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#first_online_node\">first_online_node</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#next_online_node\">next_online_node</a>(<a class=\"id\" href=\"#nid\">nid</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nr_online_nodes\">nr_online_nodes</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_set_online\">node_set_online</a>(<a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/>   <a class=\"id\" href=\"#node_set_state\">node_set_state</a>((<a class=\"id\" href=\"#node\">node</a>), <a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_set_offline\">node_set_offline</a>(<a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/>   <a class=\"id\" href=\"#node_clear_state\">node_clear_state</a>((<a class=\"id\" href=\"#node\">node</a>), <a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_online_map\">node_online_map</a> <span class=\"ts\"/><a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>]", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_possible_map\">node_possible_map</a> <span class=\"ts\"/><a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_POSSIBLE\">N_POSSIBLE</a>]", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#num_online_nodes\">num_online_nodes</a>()<span class=\"ts\"/><a class=\"id\" href=\"#num_node_state\">num_node_state</a>(<a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#num_possible_nodes\">num_possible_nodes</a>()<span class=\"ts\"/><a class=\"id\" href=\"#num_node_state\">num_node_state</a>(<a class=\"id\" href=\"#N_POSSIBLE\">N_POSSIBLE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/><a class=\"id\" href=\"#node_state\">node_state</a>((<a class=\"id\" href=\"#node\">node</a>), <a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_possible\">node_possible</a>(<a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/><a class=\"id\" href=\"#node_state\">node_state</a>((<a class=\"id\" href=\"#node\">node</a>), <a class=\"id\" href=\"#N_POSSIBLE\">N_POSSIBLE</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_node\">for_each_node</a>(<a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/>   <a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_POSSIBLE\">N_POSSIBLE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#node\">node</a>) <a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For nodemask scrach area.</span>", 
"<span class=\"comment\"> * NODEMASK_ALLOC(type, name) allocates an object with a specified type and</span>", 
"<span class=\"comment\"> * name.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#NODES_SHIFT\">NODES_SHIFT</a> &gt; 8 <span class=\"comment\">/* nodemask_t &gt; 256 bytes */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODEMASK_ALLOC\">NODEMASK_ALLOC</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#name\">name</a>), <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODEMASK_FREE\">NODEMASK_FREE</a>(<a class=\"id\" href=\"#m\">m</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#m\">m</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODEMASK_ALLOC\">NODEMASK_ALLOC</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>)<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#_\">_</a>##<a class=\"id\" href=\"#name\">name</a>, *<a class=\"id\" href=\"#name\">name</a> = &amp;<a class=\"id\" href=\"#_\">_</a>##<a class=\"id\" href=\"#name\">name</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODEMASK_FREE\">NODEMASK_FREE</a>(<a class=\"id\" href=\"#m\">m</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* A example struture for using NODEMASK_ALLOC, used in mempolicy. */</span>", 
"struct <a class=\"id\" href=\"#nodemask_scratch\">nodemask_scratch</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a><span class=\"ts\"/><a class=\"id\" href=\"#mask1\">mask1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a><span class=\"ts\"/><a class=\"id\" href=\"#mask2\">mask2</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODEMASK_SCRATCH\">NODEMASK_SCRATCH</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_ALLOC\">NODEMASK_ALLOC</a>(struct <a class=\"id\" href=\"#nodemask_scratch\">nodemask_scratch</a>, <a class=\"id\" href=\"#x\">x</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_NORETRY\">__GFP_NORETRY</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODEMASK_SCRATCH_FREE\">NODEMASK_SCRATCH_FREE</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_FREE\">NODEMASK_FREE</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_NODEMASK_H */</span>", 
];
xr_frag_insert('l/59/f2960f948defefb51328c23cff666a7b99508d.xr', __xr_tmp);
