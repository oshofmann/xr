var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_size\">dma_drain_size</a> && <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_needed\">dma_drain_needed</a>(<a class=\"id\" href=\"#rq\">rq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_WRITE\">REQ_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_buffer\">dma_drain_buffer</a>, 0, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_size\">dma_drain_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#page_link\">page_link</a> &= ~0x02;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#sg_next\">sg_next</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_set_page\">sg_set_page</a>(<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_buffer\">dma_drain_buffer</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_size\">dma_drain_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    ((unsigned long)<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_buffer\">dma_drain_buffer</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsegs\">nsegs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#extra_len\">extra_len</a> += <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_size\">dma_drain_size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sg\">sg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_mark_end\">sg_mark_end</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nsegs\">nsegs</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_rq_map_sg\">blk_rq_map_sg</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ll_new_hw_segment\">ll_new_hw_segment</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_phys_segs\">nr_phys_segs</a> = <a class=\"id\" href=\"#bio_phys_segments\">bio_phys_segments</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a> + <a class=\"id\" href=\"#nr_phys_segs\">nr_phys_segs</a> &gt; <a class=\"id\" href=\"#queue_max_segments\">queue_max_segments</a>(<a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_NOMERGE\">REQ_NOMERGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a> == <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#last_merge\">last_merge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#last_merge\">last_merge</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This will form the start of a new hw segment.  Bump both</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * counters.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a> += <a class=\"id\" href=\"#nr_phys_segs\">nr_phys_segs</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ll_back_merge_fn\">ll_back_merge_fn</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#max_sectors\">max_sectors</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_sectors\">max_sectors</a> = <a class=\"id\" href=\"#queue_max_hw_sectors\">queue_max_hw_sectors</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_sectors\">max_sectors</a> = <a class=\"id\" href=\"#queue_max_sectors\">queue_max_sectors</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_sectors\">blk_rq_sectors</a>(<a class=\"id\" href=\"#req\">req</a>) + <a class=\"id\" href=\"#bio_sectors\">bio_sectors</a>(<a class=\"id\" href=\"#bio\">bio</a>) &gt; <a class=\"id\" href=\"#max_sectors\">max_sectors</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_NOMERGE\">REQ_NOMERGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a> == <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#last_merge\">last_merge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#last_merge\">last_merge</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#biotail\">biotail</a>, <a class=\"id\" href=\"#BIO_SEG_VALID\">BIO_SEG_VALID</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_recount_segments\">blk_recount_segments</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#biotail\">biotail</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_SEG_VALID\">BIO_SEG_VALID</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_recount_segments\">blk_recount_segments</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ll_new_hw_segment\">ll_new_hw_segment</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#ll_front_merge_fn\">ll_front_merge_fn</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#max_sectors\">max_sectors</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_sectors\">max_sectors</a> = <a class=\"id\" href=\"#queue_max_hw_sectors\">queue_max_hw_sectors</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_sectors\">max_sectors</a> = <a class=\"id\" href=\"#queue_max_sectors\">queue_max_sectors</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_sectors\">blk_rq_sectors</a>(<a class=\"id\" href=\"#req\">req</a>) + <a class=\"id\" href=\"#bio_sectors\">bio_sectors</a>(<a class=\"id\" href=\"#bio\">bio</a>) &gt; <a class=\"id\" href=\"#max_sectors\">max_sectors</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_NOMERGE\">REQ_NOMERGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a> == <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#last_merge\">last_merge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#last_merge\">last_merge</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_SEG_VALID\">BIO_SEG_VALID</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_recount_segments\">blk_recount_segments</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_SEG_VALID\">BIO_SEG_VALID</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_recount_segments\">blk_recount_segments</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ll_new_hw_segment\">ll_new_hw_segment</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ll_merge_requests_fn\">ll_merge_requests_fn</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#total_phys_segments\">total_phys_segments</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#seg_size\">seg_size</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#biotail\">biotail</a>-><a class=\"id\" href=\"#bi_seg_back_size\">bi_seg_back_size</a> + <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_seg_front_size\">bi_seg_front_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First check if the either of the requests are re-queued</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requests.  Can't merge them if they are.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a> || <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#special\">special</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Will it become too large?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#blk_rq_sectors\">blk_rq_sectors</a>(<a class=\"id\" href=\"#req\">req</a>) + <a class=\"id\" href=\"#blk_rq_sectors\">blk_rq_sectors</a>(<a class=\"id\" href=\"#next\">next</a>)) &gt; <a class=\"id\" href=\"#queue_max_sectors\">queue_max_sectors</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_phys_segments\">total_phys_segments</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a> + <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_phys_contig_segment\">blk_phys_contig_segment</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#biotail\">biotail</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#bio\">bio</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_seg_front_size\">bi_seg_front_size</a> = <a class=\"id\" href=\"#seg_size\">seg_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#biotail\">biotail</a>-><a class=\"id\" href=\"#bi_seg_back_size\">bi_seg_back_size</a> = <a class=\"id\" href=\"#seg_size\">seg_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_phys_segments\">total_phys_segments</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#total_phys_segments\">total_phys_segments</a> &gt; <a class=\"id\" href=\"#queue_max_segments\">queue_max_segments</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Merge is OK... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a> = <a class=\"id\" href=\"#total_phys_segments\">total_phys_segments</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_rq_set_mixed_merge - mark a request as mixed merge</span>", 
"<span class=\"comment\"> * @rq: request to mark as mixed merge</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     @rq is about to be mixed merged.  Make sure the attributes</span>", 
"<span class=\"comment\"> *     which can be mixed are set in each bio and mark @rq as mixed</span>", 
"<span class=\"comment\"> *     merged.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_rq_set_mixed_merge\">blk_rq_set_mixed_merge</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_MIXED_MERGE\">REQ_MIXED_MERGE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @rq will no longer represent mixable attributes for all the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * contained bios.  It will just track those of the first one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Distributes the attributs to each bio.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#bio\">bio</a>; <a class=\"id\" href=\"#bio\">bio</a>; <a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>((<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>) != <a class=\"id\" href=\"#ff\">ff</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> |= <a class=\"id\" href=\"#ff\">ff</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_MIXED_MERGE\">REQ_MIXED_MERGE</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#blk_account_io_merge\">blk_account_io_merge</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_do_io_stat\">blk_do_io_stat</a>(<a class=\"id\" href=\"#req\">req</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#part_stat_lock\">part_stat_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#disk_map_sector_rcu\">disk_map_sector_rcu</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>, <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#req\">req</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_round_stats\">part_round_stats</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#part\">part</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_dec_in_flight\">part_dec_in_flight</a>(<a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#req\">req</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_stat_unlock\">part_stat_unlock</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Has to be called with the request spinlock acquired</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#attempt_merge\">attempt_merge</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq_mergeable\">rq_mergeable</a>(<a class=\"id\" href=\"#req\">req</a>) || !<a class=\"id\" href=\"#rq_mergeable\">rq_mergeable</a>(<a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't merge file system requests and discard requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>) != (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't merge discard requests and secure discard requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_SECURE\">REQ_SECURE</a>) != (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_SECURE\">REQ_SECURE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not contiguous</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#req\">req</a>) + <a class=\"id\" href=\"#blk_rq_sectors\">blk_rq_sectors</a>(<a class=\"id\" href=\"#req\">req</a>) != <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#req\">req</a>) != <a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/>    || <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a> != <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>", 
"<span class=\"ts\"/>    || <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#special\">special</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_integrity_rq\">blk_integrity_rq</a>(<a class=\"id\" href=\"#req\">req</a>) != <a class=\"id\" href=\"#blk_integrity_rq\">blk_integrity_rq</a>(<a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are allowed to merge, then append bio list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from next to rq and release next. merge_requests_fn</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will have updated segment counts, update sector</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * counts here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ll_merge_requests_fn\">ll_merge_requests_fn</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If failfast settings disagree or any of the two is already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a mixed merge, mark both as mixed before proceeding.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * makes sure that all involved bios have mixable attributes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set properly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> | <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a>) &amp; <a class=\"id\" href=\"#REQ_MIXED_MERGE\">REQ_MIXED_MERGE</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>) !=", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_set_mixed_merge\">blk_rq_set_mixed_merge</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_set_mixed_merge\">blk_rq_set_mixed_merge</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point we have either done a back merge</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or front merge. We need the smaller start_time of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the merged requests to be the current request</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for accounting purposes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#start_time\">start_time</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#start_time\">start_time</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#start_time\">start_time</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#start_time\">start_time</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#biotail\">biotail</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#biotail\">biotail</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#biotail\">biotail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#__data_len\">__data_len</a> += <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elv_merge_requests\">elv_merge_requests</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'next' is going away, so update stats accordingly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_account_io_merge\">blk_account_io_merge</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a> = <a class=\"id\" href=\"#ioprio_best\">ioprio_best</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_cpu_valid\">blk_rq_cpu_valid</a>(<a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* owner-ship of bio passed from next to req */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blk_put_request\">__blk_put_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"int <a class=\"id\" href=\"#attempt_back_merge\">attempt_back_merge</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#elv_latter_request\">elv_latter_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#attempt_merge\">attempt_merge</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#attempt_front_merge\">attempt_front_merge</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#elv_former_request\">elv_former_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#attempt_merge\">attempt_merge</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/5a/00b0a830cfec0d12ee30f9971b6a2cfd5b42ca.xr', __xr_tmp);
