var __xr_tmp = [
"<span class=\"comment\"> * go. A value of 12 for DEF_PRIORITY implies that we will scan 1/4096th of the</span>", 
"<span class=\"comment\"> * queues (\"queue_length &gt;&gt; 12\") during an aging round.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEF_PRIORITY\">DEF_PRIORITY</a> 12", 
"", 
"<span class=\"comment\">/* Maximum number of zones on a zonelist */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ZONES_PER_ZONELIST\">MAX_ZONES_PER_ZONELIST</a> (<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a> * <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The NUMA zonelists are doubled becausse we need zonelists that restrict the</span>", 
"<span class=\"comment\"> * allocations to a single node for GFP_THISNODE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * [0]<span class=\"ts\"/>: Zonelist with fallback</span>", 
"<span class=\"comment\"> * [1]<span class=\"ts\"/>: No fallback (GFP_THISNODE)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ZONELISTS\">MAX_ZONELISTS</a> 2", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We cache key information from each zonelist for smaller cache</span>", 
"<span class=\"comment\"> * footprint when scanning for free pages in get_page_from_freelist().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1) The BITMAP fullzones tracks which zones in a zonelist have come</span>", 
"<span class=\"comment\"> *    up short of free memory since the last time (last_fullzone_zap)</span>", 
"<span class=\"comment\"> *    we zero'd fullzones.</span>", 
"<span class=\"comment\"> * 2) The array z_to_n[] maps each zone in the zonelist to its node</span>", 
"<span class=\"comment\"> *    id, so that we can efficiently evaluate whether that node is</span>", 
"<span class=\"comment\"> *    set in the current tasks mems_allowed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Both fullzones and z_to_n[] are one-to-one with the zonelist,</span>", 
"<span class=\"comment\"> * indexed by a zones offset in the zonelist zones[] array.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The get_page_from_freelist() routine does two scans.  During the</span>", 
"<span class=\"comment\"> * first scan, we skip zones whose corresponding bit in 'fullzones'</span>", 
"<span class=\"comment\"> * is set or whose corresponding node in current-&gt;mems_allowed (which</span>", 
"<span class=\"comment\"> * comes from cpusets) is not set.  During the second scan, we bypass</span>", 
"<span class=\"comment\"> * this zonelist_cache, to ensure we look methodically at each zone.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Once per second, we zero out (zap) fullzones, forcing us to</span>", 
"<span class=\"comment\"> * reconsider nodes that might have regained more free memory.</span>", 
"<span class=\"comment\"> * The field last_full_zap is the time we last zapped fullzones.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This mechanism reduces the amount of time we waste repeatedly</span>", 
"<span class=\"comment\"> * reexaming zones for free memory when they just came up low on</span>", 
"<span class=\"comment\"> * memory momentarilly ago.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The zonelist_cache struct members logically belong in struct</span>", 
"<span class=\"comment\"> * zonelist.  However, the mempolicy zonelists constructed for</span>", 
"<span class=\"comment\"> * MPOL_BIND are intentionally variable length (and usually much</span>", 
"<span class=\"comment\"> * shorter).  A general purpose mechanism for handling structs with</span>", 
"<span class=\"comment\"> * multiple variable length members is more mechanism than we want</span>", 
"<span class=\"comment\"> * here.  We resort to some special case hackery instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The MPOL_BIND zonelists don't need this zonelist_cache (in good</span>", 
"<span class=\"comment\"> * part because they are shorter), so we put the fixed length stuff</span>", 
"<span class=\"comment\"> * at the front of the zonelist struct, ending in a variable length</span>", 
"<span class=\"comment\"> * zones[], as is needed by MPOL_BIND.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Then we put the optional zonelist cache on the end of the zonelist</span>", 
"<span class=\"comment\"> * struct.  This optional stuff is found by a 'zlcache_ptr' pointer in</span>", 
"<span class=\"comment\"> * the fixed length portion at the front of the struct.  This pointer</span>", 
"<span class=\"comment\"> * both enables us to find the zonelist cache, and in the case of</span>", 
"<span class=\"comment\"> * MPOL_BIND zonelists, (which will just set the zlcache_ptr to NULL)</span>", 
"<span class=\"comment\"> * to know that the zonelist cache is not there.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The end result is that struct zonelists come in two flavors:</span>", 
"<span class=\"comment\"> *  1) The full, fixed length version, shown below, and</span>", 
"<span class=\"comment\"> *  2) The custom zonelists for MPOL_BIND.</span>", 
"<span class=\"comment\"> * The custom MPOL_BIND zonelists have a NULL zlcache_ptr and no zlcache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Even though there may be multiple CPU cores on a node modifying</span>", 
"<span class=\"comment\"> * fullzones or last_full_zap in the same zonelist_cache at the same</span>", 
"<span class=\"comment\"> * time, we don't lock it.  This is just hint data - if it is wrong now</span>", 
"<span class=\"comment\"> * and then, the allocator will still function, perhaps a bit slower.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"struct <a class=\"id\" href=\"#zonelist_cache\">zonelist_cache</a> {", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#z_to_n\">z_to_n</a>[<a class=\"id\" href=\"#MAX_ZONES_PER_ZONELIST\">MAX_ZONES_PER_ZONELIST</a>];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* zone-&gt;nid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#fullzones\">fullzones</a>, <a class=\"id\" href=\"#MAX_ZONES_PER_ZONELIST\">MAX_ZONES_PER_ZONELIST</a>);<span class=\"ts\"/><span class=\"comment\">/* zone full? */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#last_full_zap\">last_full_zap</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* when last zap'd (jiffies) */</span>", 
"};", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ZONELISTS\">MAX_ZONELISTS</a> 1", 
"struct <a class=\"id\" href=\"#zonelist_cache\">zonelist_cache</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This struct contains information about a zone in a zonelist. It is stored</span>", 
"<span class=\"comment\"> * here to avoid dereferences into large structures and lookups of tables</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#zoneref\">zoneref</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;<span class=\"ts\"/><span class=\"comment\">/* Pointer to actual zone */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zone_idx\">zone_idx</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* zone_idx(zoneref-&gt;zone) */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * One allocation request operates on a zonelist. A zonelist</span>", 
"<span class=\"comment\"> * is a list of zones, the first one is the 'goal' of the</span>", 
"<span class=\"comment\"> * allocation, the other zones are fallback zones, in decreasing</span>", 
"<span class=\"comment\"> * priority.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If zlcache_ptr is not NULL, then it is just the address of zlcache,</span>", 
"<span class=\"comment\"> * as explained above.  If zlcache_ptr is NULL, there is no zlcache.</span>", 
"<span class=\"comment\"> * *</span>", 
"<span class=\"comment\"> * To speed the reading of the zonelist, the zonerefs contain the zone index</span>", 
"<span class=\"comment\"> * of the entry being read. Helper functions to access information given</span>", 
"<span class=\"comment\"> * a struct zoneref are</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * zonelist_zone()<span class=\"ts\"/>- Return the struct zone * for an entry in _zonerefs</span>", 
"<span class=\"comment\"> * zonelist_zone_idx()<span class=\"ts\"/>- Return the index of the zone for an entry</span>", 
"<span class=\"comment\"> * zonelist_node_idx()<span class=\"ts\"/>- Return the index of the node for an entry</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#zonelist\">zonelist</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist_cache\">zonelist_cache</a> *<a class=\"id\" href=\"#zlcache_ptr\">zlcache_ptr</a>;<span class=\"ts\"/><span class=\"ts\"/>     <span class=\"comment\">// NULL or &amp;zlcache</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> <a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#MAX_ZONES_PER_ZONELIST\">MAX_ZONES_PER_ZONELIST</a> + 1];", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist_cache\">zonelist_cache</a> <a class=\"id\" href=\"#zlcache\">zlcache</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <span class=\"comment\">// optional ...</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_POPULATES_NODE_MAP\">CONFIG_ARCH_POPULATES_NODE_MAP</a>", 
"struct <a class=\"id\" href=\"#node_active_region\">node_active_region</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ARCH_POPULATES_NODE_MAP */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_DISCONTIGMEM\">CONFIG_DISCONTIGMEM</a>", 
"<span class=\"comment\">/* The array of struct pages - for discontigmem use pgdat-&gt;lmem_map */</span>", 
"extern struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#mem_map\">mem_map</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The pg_data_t structure is used in machines with CONFIG_DISCONTIGMEM</span>", 
"<span class=\"comment\"> * (mostly NUMA machines?) to denote a higher-level memory zone than the</span>", 
"<span class=\"comment\"> * zone denotes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On NUMA machines, each NUMA node would have a pg_data_t to describe</span>", 
"<span class=\"comment\"> * it's memory layout.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Memory statistics and page replacement data structures are maintained on a</span>", 
"<span class=\"comment\"> * per-zone basis.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bootmem_data\">bootmem_data</a>;", 
"typedef struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> <a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> <a class=\"id\" href=\"#node_zonelists\">node_zonelists</a>[<a class=\"id\" href=\"#MAX_ZONELISTS\">MAX_ZONELISTS</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_zones\">nr_zones</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FLAT_NODE_MEM_MAP\">CONFIG_FLAT_NODE_MEM_MAP</a><span class=\"ts\"/><span class=\"comment\">/* means !SPARSEMEM */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#node_mem_map\">node_mem_map</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR\">CONFIG_CGROUP_MEM_RES_CTLR</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#node_page_cgroup\">node_page_cgroup</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bootmem_data\">bootmem_data</a> *<a class=\"id\" href=\"#bdata\">bdata</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must be held any time you expect node_start_pfn, node_present_pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or node_spanned_pages stay constant.  Holding this will also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * guarantee that any pfn_valid() stays that way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Nests above zone-&gt;lock and zone-&gt;size_seqlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#node_size_lock\">node_size_lock</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_present_pages\">node_present_pages</a>; <span class=\"comment\">/* total number of physical pages */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>; <span class=\"comment\">/* total size of physical page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     range, including holes */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node_id\">node_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#kswapd_wait\">kswapd_wait</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#kswapd\">kswapd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#kswapd_max_order\">kswapd_max_order</a>;", 
"} <a class=\"id\" href=\"#pg_data_t\">pg_data_t</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_present_pages\">node_present_pages</a>(<a class=\"id\" href=\"#nid\">nid</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#node_present_pages\">node_present_pages</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>(<a class=\"id\" href=\"#nid\">nid</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>)", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FLAT_NODE_MEM_MAP\">CONFIG_FLAT_NODE_MEM_MAP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pgdat_page_nr\">pgdat_page_nr</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#pagenr\">pagenr</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#pgdat\">pgdat</a>)-><a class=\"id\" href=\"#node_mem_map\">node_mem_map</a> + (<a class=\"id\" href=\"#pagenr\">pagenr</a>))", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pgdat_page_nr\">pgdat_page_nr</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#pagenr\">pagenr</a>)<span class=\"ts\"/><a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>((<a class=\"id\" href=\"#pgdat\">pgdat</a>)-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> + (<a class=\"id\" href=\"#pagenr\">pagenr</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nid_page_nr\">nid_page_nr</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#pagenr\">pagenr</a>) <span class=\"ts\"/><a class=\"id\" href=\"#pgdat_page_nr\">pgdat_page_nr</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>),(<a class=\"id\" href=\"#pagenr\">pagenr</a>))", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory_hotplug\">memory_hotplug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#zonelists_mutex\">zonelists_mutex</a>;", 
"void <a class=\"id\" href=\"#build_all_zonelists\">build_all_zonelists</a>(void *<a class=\"id\" href=\"#data\">data</a>);", 
"void <a class=\"id\" href=\"#wakeup_kswapd\">wakeup_kswapd</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, int <a class=\"id\" href=\"#order\">order</a>);", 
"int <a class=\"id\" href=\"#zone_watermark_ok\">zone_watermark_ok</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#z\">z</a>, int <a class=\"id\" href=\"#order\">order</a>, unsigned long <a class=\"id\" href=\"#mark\">mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#classzone_idx\">classzone_idx</a>, int <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>);", 
"enum <a class=\"id\" href=\"#memmap_context\">memmap_context</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEMMAP_EARLY\">MEMMAP_EARLY</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEMMAP_HOTPLUG\">MEMMAP_HOTPLUG</a>,", 
"};", 
"extern int <a class=\"id\" href=\"#init_currently_empty_zone\">init_currently_empty_zone</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#memmap_context\">memmap_context</a> <a class=\"id\" href=\"#context\">context</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_MEMORY_PRESENT\">CONFIG_HAVE_MEMORY_PRESENT</a>", 
"void <a class=\"id\" href=\"#memory_present\">memory_present</a>(int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#memory_present\">memory_present</a>(int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_MEMORYLESS_NODES\">CONFIG_HAVE_MEMORYLESS_NODES</a>", 
"int <a class=\"id\" href=\"#local_memory_node\">local_memory_node</a>(int <a class=\"id\" href=\"#node_id\">node_id</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#local_memory_node\">local_memory_node</a>(int <a class=\"id\" href=\"#node_id\">node_id</a>) { return <a class=\"id\" href=\"#node_id\">node_id</a>; };", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NEED_NODE_MEMMAP_SIZE\">CONFIG_NEED_NODE_MEMMAP_SIZE</a>", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#node_memmap_size_bytes\">node_memmap_size_bytes</a>(int, unsigned long, unsigned long);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * zone_idx() returns 0 for the ZONE_DMA zone, 1 for the ZONE_NORMAL zone, etc.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#zone_idx\">zone_idx</a>(<a class=\"id\" href=\"#zone\">zone</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#zone\">zone</a>) - (<a class=\"id\" href=\"#zone\">zone</a>)-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#populated_zone\">populated_zone</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>return (!!<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>);", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#movable_zone\">movable_zone</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#zone_movable_is_highmem\">zone_movable_is_highmem</a>(void)", 
"{", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ARCH_POPULATES_NODE_MAP\">CONFIG_ARCH_POPULATES_NODE_MAP</a>)", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#movable_zone\">movable_zone</a> == <a class=\"id\" href=\"#ZONE_HIGHMEM\">ZONE_HIGHMEM</a>;", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_highmem_idx\">is_highmem_idx</a>(enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#ZONE_HIGHMEM\">ZONE_HIGHMEM</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a> && <a class=\"id\" href=\"#zone_movable_is_highmem\">zone_movable_is_highmem</a>()));", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_normal_idx\">is_normal_idx</a>(enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_highmem - helper function to quickly check if a struct zone is a </span>", 
"<span class=\"comment\"> *              highmem zone or not.  This is an attempt to keep references</span>", 
"<span class=\"comment\"> *              to ZONE_{DMA/NORMAL/HIGHMEM/etc} in general code to a minimum.</span>", 
"<span class=\"comment\"> * @zone - pointer to struct zone variable</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_highmem\">is_highmem</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zone_off\">zone_off</a> = (char *)<a class=\"id\" href=\"#zone\">zone</a> - (char *)<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zone_off\">zone_off</a> == <a class=\"id\" href=\"#ZONE_HIGHMEM\">ZONE_HIGHMEM</a> * sizeof(*<a class=\"id\" href=\"#zone\">zone</a>) ||", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#zone_off\">zone_off</a> == <a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a> * sizeof(*<a class=\"id\" href=\"#zone\">zone</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_movable_is_highmem\">zone_movable_is_highmem</a>());", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_normal\">is_normal</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zone\">zone</a> == <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_dma32\">is_dma32</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA32\">CONFIG_ZONE_DMA32</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zone\">zone</a> == <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#ZONE_DMA32\">ZONE_DMA32</a>;", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_dma\">is_dma</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA\">CONFIG_ZONE_DMA</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zone\">zone</a> == <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#ZONE_DMA\">ZONE_DMA</a>;", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* These two functions are used to setup the per zone pages min values */</span>", 
"struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a>;", 
"int <a class=\"id\" href=\"#min_free_kbytes_sysctl_handler\">min_free_kbytes_sysctl_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"extern int <a class=\"id\" href=\"#sysctl_lowmem_reserve_ratio\">sysctl_lowmem_reserve_ratio</a>[<a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>-1];", 
"int <a class=\"id\" href=\"#lowmem_reserve_ratio_sysctl_handler\">lowmem_reserve_ratio_sysctl_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"int <a class=\"id\" href=\"#percpu_pagelist_fraction_sysctl_handler\">percpu_pagelist_fraction_sysctl_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"int <a class=\"id\" href=\"#sysctl_min_unmapped_ratio_sysctl_handler\">sysctl_min_unmapped_ratio_sysctl_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"int <a class=\"id\" href=\"#sysctl_min_slab_ratio_sysctl_handler\">sysctl_min_slab_ratio_sysctl_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"", 
"extern int <a class=\"id\" href=\"#numa_zonelist_order_handler\">numa_zonelist_order_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"extern char <a class=\"id\" href=\"#numa_zonelist_order\">numa_zonelist_order</a>[];", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUMA_ZONELIST_ORDER_LEN\">NUMA_ZONELIST_ORDER_LEN</a> 16<span class=\"ts\"/><span class=\"comment\">/* string buffer size */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NEED_MULTIPLE_NODES\">CONFIG_NEED_MULTIPLE_NODES</a>", 
"", 
"extern struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> <a class=\"id\" href=\"#contig_page_data\">contig_page_data</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)<span class=\"ts\"/><span class=\"ts\"/>(&amp;<a class=\"id\" href=\"#contig_page_data\">contig_page_data</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODE_MEM_MAP\">NODE_MEM_MAP</a>(<a class=\"id\" href=\"#nid\">nid</a>)<span class=\"ts\"/><a class=\"id\" href=\"#mem_map\">mem_map</a>", 
"", 
"#else <span class=\"comment\">/* CONFIG_NEED_MULTIPLE_NODES */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmzone\">mmzone</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_NEED_MULTIPLE_NODES */</span>", 
"", 
"extern struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#first_online_pgdat\">first_online_pgdat</a>(void);", 
"extern struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#next_online_pgdat\">next_online_pgdat</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"extern struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#next_zone\">next_zone</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * for_each_online_pgdat - helper macro to iterate over all online nodes</span>", 
"<span class=\"comment\"> * @pgdat - pointer to a pg_data_t variable</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_online_pgdat\">for_each_online_pgdat</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#first_online_pgdat\">first_online_pgdat</a>();<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pgdat\">pgdat</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#next_online_pgdat\">next_online_pgdat</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>))", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * for_each_zone - helper macro to iterate over all memory zones</span>", 
"<span class=\"comment\"> * @zone - pointer to struct zone variable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The user only needs to declare the zone variable, for_each_zone</span>", 
"<span class=\"comment\"> * fills it in.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_zone\">for_each_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>        \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#zone\">zone</a> = (<a class=\"id\" href=\"#first_online_pgdat\">first_online_pgdat</a>())-><a class=\"id\" href=\"#node_zones\">node_zones</a>; \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#zone\">zone</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#next_zone\">next_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>)<span class=\"ts\"/><span class=\"ts\"/>        \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#zone\">zone</a> = (<a class=\"id\" href=\"#first_online_pgdat\">first_online_pgdat</a>())-><a class=\"id\" href=\"#node_zones\">node_zones</a>; \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#zone\">zone</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#next_zone\">next_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>))<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>; <span class=\"comment\">/* do nothing */</span><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zonelist_zone\">zonelist_zone</a>(struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#zoneref\">zoneref</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zoneref\">zoneref</a>-><a class=\"id\" href=\"#zone\">zone</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#zonelist_zone_idx\">zonelist_zone_idx</a>(struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#zoneref\">zoneref</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zoneref\">zoneref</a>-><a class=\"id\" href=\"#zone_idx\">zone_idx</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#zonelist_node_idx\">zonelist_node_idx</a>(struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#zoneref\">zoneref</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* zone_to_nid not available in this context */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zoneref\">zoneref</a>-><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#node\">node</a>;", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * next_zones_zonelist - Returns the next zone at or below highest_zoneidx within the allowed nodemask using a cursor within a zonelist as a starting point</span>", 
"<span class=\"comment\"> * @z - The cursor used as a starting point for the search</span>", 
"<span class=\"comment\"> * @highest_zoneidx - The zone index of the highest zone to return</span>", 
"<span class=\"comment\"> * @nodes - An optional nodemask to filter the zonelist with</span>", 
"<span class=\"comment\"> * @zone - The first suitable zone found is returned via this parameter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns the next zone at or below a given zone index that is</span>", 
"<span class=\"comment\"> * within the allowed nodemask using a cursor as the starting point for the</span>", 
"<span class=\"comment\"> * search. The zoneref returned is a cursor that represents the current zone</span>", 
"<span class=\"comment\"> * being examined. It should be advanced by one before calling</span>", 
"<span class=\"comment\"> * next_zones_zonelist again.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#next_zones_zonelist\">next_zones_zonelist</a>(struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#highest_zoneidx\">highest_zoneidx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> **<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * first_zones_zonelist - Returns the first zone at or below highest_zoneidx within the allowed nodemask in a zonelist</span>", 
"<span class=\"comment\"> * @zonelist - The zonelist to search for a suitable zone</span>", 
"<span class=\"comment\"> * @highest_zoneidx - The zone index of the highest zone to return</span>", 
"<span class=\"comment\"> * @nodes - An optional nodemask to filter the zonelist with</span>", 
"<span class=\"comment\"> * @zone - The first suitable zone found is returned via this parameter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns the first zone at or below a given zone index that is</span>", 
"<span class=\"comment\"> * within the allowed nodemask. The zoneref returned is a cursor that can be</span>", 
"<span class=\"comment\"> * used to iterate the zonelist with next_zones_zonelist by advancing it by</span>", 
"<span class=\"comment\"> * one before calling.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#first_zones_zonelist\">first_zones_zonelist</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#highest_zoneidx\">highest_zoneidx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> **<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#next_zones_zonelist\">next_zones_zonelist</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>, <a class=\"id\" href=\"#highest_zoneidx\">highest_zoneidx</a>, <a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * for_each_zone_zonelist_nodemask - helper macro to iterate over valid zones in a zonelist at or below a given zone index and within a nodemask</span>", 
"<span class=\"comment\"> * @zone - The current zone in the iterator</span>", 
"<span class=\"comment\"> * @z - The current pointer within zonelist-&gt;zones being iterated</span>", 
"<span class=\"comment\"> * @zlist - The zonelist being iterated</span>", 
"<span class=\"comment\"> * @highidx - The zone index of the highest zone to return</span>", 
"<span class=\"comment\"> * @nodemask - Nodemask allowed by the allocator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This iterator iterates though all zones at or below a given zone index and</span>", 
"<span class=\"comment\"> * within a given nodemask</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_zone_zonelist_nodemask\">for_each_zone_zonelist_nodemask</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zlist\">zlist</a>, <a class=\"id\" href=\"#highidx\">highidx</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#z\">z</a> = <a class=\"id\" href=\"#first_zones_zonelist\">first_zones_zonelist</a>(<a class=\"id\" href=\"#zlist\">zlist</a>, <a class=\"id\" href=\"#highidx\">highidx</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>, &amp;<a class=\"id\" href=\"#zone\">zone</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#z\">z</a> = <a class=\"id\" href=\"#next_zones_zonelist\">next_zones_zonelist</a>(++<a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#highidx\">highidx</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>, &amp;<a class=\"id\" href=\"#zone\">zone</a>))<span class=\"ts\"/>\\", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * for_each_zone_zonelist - helper macro to iterate over valid zones in a zonelist at or below a given zone index</span>", 
"<span class=\"comment\"> * @zone - The current zone in the iterator</span>", 
"<span class=\"comment\"> * @z - The current pointer within zonelist-&gt;zones being iterated</span>", 
"<span class=\"comment\"> * @zlist - The zonelist being iterated</span>", 
"<span class=\"comment\"> * @highidx - The zone index of the highest zone to return</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This iterator iterates though all zones at or below a given zone index.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_zone_zonelist\">for_each_zone_zonelist</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zlist\">zlist</a>, <a class=\"id\" href=\"#highidx\">highidx</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist_nodemask\">for_each_zone_zonelist_nodemask</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zlist\">zlist</a>, <a class=\"id\" href=\"#highidx\">highidx</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM\">CONFIG_SPARSEMEM</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#sparsemem\">sparsemem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_HAVE_ARCH_EARLY_PFN_TO_NID\">CONFIG_HAVE_ARCH_EARLY_PFN_TO_NID</a>) && \\", 
"<span class=\"ts\"/>!<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ARCH_POPULATES_NODE_MAP\">CONFIG_ARCH_POPULATES_NODE_MAP</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#early_pfn_to_nid\">early_pfn_to_nid</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FLATMEM\">CONFIG_FLATMEM</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pfn_to_nid\">pfn_to_nid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)<span class=\"ts\"/><span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#pfn\">pfn</a>) ((<a class=\"id\" href=\"#pfn\">pfn</a>) >> <a class=\"id\" href=\"#PFN_SECTION_SHIFT\">PFN_SECTION_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#section_nr_to_pfn\">section_nr_to_pfn</a>(<a class=\"id\" href=\"#sec\">sec</a>) ((<a class=\"id\" href=\"#sec\">sec</a>) << <a class=\"id\" href=\"#PFN_SECTION_SHIFT\">PFN_SECTION_SHIFT</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM\">CONFIG_SPARSEMEM</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SECTION_SHIFT    <span class=\"ts\"/><span class=\"ts\"/>#bits space required to store a section #</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PA_SECTION_SHIFT<span class=\"ts\"/><span class=\"ts\"/>physical address to/from section number</span>", 
"<span class=\"comment\"> * PFN_SECTION_SHIFT<span class=\"ts\"/><span class=\"ts\"/>pfn to/from section number</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTIONS_SHIFT\">SECTIONS_SHIFT</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#MAX_PHYSMEM_BITS\">MAX_PHYSMEM_BITS</a> - <a class=\"id\" href=\"#SECTION_SIZE_BITS\">SECTION_SIZE_BITS</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PA_SECTION_SHIFT\">PA_SECTION_SHIFT</a><span class=\"ts\"/>(<a class=\"id\" href=\"#SECTION_SIZE_BITS\">SECTION_SIZE_BITS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PFN_SECTION_SHIFT\">PFN_SECTION_SHIFT</a><span class=\"ts\"/>(<a class=\"id\" href=\"#SECTION_SIZE_BITS\">SECTION_SIZE_BITS</a> - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a><span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#SECTIONS_SHIFT\">SECTIONS_SHIFT</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>       (1UL << <a class=\"id\" href=\"#PFN_SECTION_SHIFT\">PFN_SECTION_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_SECTION_MASK\">PAGE_SECTION_MASK</a><span class=\"ts\"/>(~(<a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>-1))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTION_BLOCKFLAGS_BITS\">SECTION_BLOCKFLAGS_BITS</a> \\", 
"<span class=\"ts\"/>((1UL << (<a class=\"id\" href=\"#PFN_SECTION_SHIFT\">PFN_SECTION_SHIFT</a> - <a class=\"id\" href=\"#pageblock_order\">pageblock_order</a>)) * <a class=\"id\" href=\"#NR_PAGEBLOCK_BITS\">NR_PAGEBLOCK_BITS</a>)", 
"", 
"#if (<a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a> - 1 + <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) &gt; <a class=\"id\" href=\"#SECTION_SIZE_BITS\">SECTION_SIZE_BITS</a>", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#Allocator\">Allocator</a> <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a> <a class=\"id\" href=\"#exceeds\">exceeds</a> <a class=\"id\" href=\"#SECTION_SIZE\">SECTION_SIZE</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a>;", 
"struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a>;", 
"struct <a class=\"id\" href=\"#mem_section\">mem_section</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is, logically, a pointer to an array of struct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages.  However, it is stored with some other magic.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (see sparse.c::sparse_init_one_section())</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Additionally during early boot we encode node id of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the location of the section here to guide allocation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (see sparse.c::memory_present())</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Making it a UL at least makes someone do a cast</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before using it wrong.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#section_mem_map\">section_mem_map</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* See declaration of similar field in struct zone */</span>", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#pageblock_flags\">pageblock_flags</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR\">CONFIG_CGROUP_MEM_RES_CTLR</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If !SPARSEMEM, pgdat doesn't have page_cgroup pointer. We use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * section. (see memcontrol.h/page_cgroup.h about this.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#page_cgroup\">page_cgroup</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pad\">pad</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_EXTREME\">CONFIG_SPARSEMEM_EXTREME</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTIONS_PER_ROOT\">SECTIONS_PER_ROOT</a>       (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / sizeof (struct <a class=\"id\" href=\"#mem_section\">mem_section</a>))", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTIONS_PER_ROOT\">SECTIONS_PER_ROOT</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTION_NR_TO_ROOT\">SECTION_NR_TO_ROOT</a>(<a class=\"id\" href=\"#sec\">sec</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#sec\">sec</a>) / <a class=\"id\" href=\"#SECTIONS_PER_ROOT\">SECTIONS_PER_ROOT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NR_SECTION_ROOTS\">NR_SECTION_ROOTS</a><span class=\"ts\"/><a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>, <a class=\"id\" href=\"#SECTIONS_PER_ROOT\">SECTIONS_PER_ROOT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTION_ROOT_MASK\">SECTION_ROOT_MASK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#SECTIONS_PER_ROOT\">SECTIONS_PER_ROOT</a> - 1)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_EXTREME\">CONFIG_SPARSEMEM_EXTREME</a>", 
"extern struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#mem_section\">mem_section</a>[<a class=\"id\" href=\"#NR_SECTION_ROOTS\">NR_SECTION_ROOTS</a>];", 
"#else", 
"extern struct <a class=\"id\" href=\"#mem_section\">mem_section</a> <a class=\"id\" href=\"#mem_section\">mem_section</a>[<a class=\"id\" href=\"#NR_SECTION_ROOTS\">NR_SECTION_ROOTS</a>][<a class=\"id\" href=\"#SECTIONS_PER_ROOT\">SECTIONS_PER_ROOT</a>];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(unsigned long <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_section\">mem_section</a>[<a class=\"id\" href=\"#SECTION_NR_TO_ROOT\">SECTION_NR_TO_ROOT</a>(<a class=\"id\" href=\"#nr\">nr</a>)])", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#mem_section\">mem_section</a>[<a class=\"id\" href=\"#SECTION_NR_TO_ROOT\">SECTION_NR_TO_ROOT</a>(<a class=\"id\" href=\"#nr\">nr</a>)][<a class=\"id\" href=\"#nr\">nr</a> &amp; <a class=\"id\" href=\"#SECTION_ROOT_MASK\">SECTION_ROOT_MASK</a>];", 
"}", 
"extern int <a class=\"id\" href=\"#__section_nr\">__section_nr</a>(struct <a class=\"id\" href=\"#mem_section\">mem_section</a>* <a class=\"id\" href=\"#ms\">ms</a>);", 
"extern unsigned long <a class=\"id\" href=\"#usemap_size\">usemap_size</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We use the lower bits of the mem_map pointer to store</span>", 
"<span class=\"comment\"> * a little bit of information.  There should be at least</span>", 
"<span class=\"comment\"> * 3 bits here due to 32-bit alignment.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SECTION_MARKED_PRESENT\">SECTION_MARKED_PRESENT</a><span class=\"ts\"/>(1UL<<0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTION_HAS_MEM_MAP\">SECTION_HAS_MEM_MAP</a><span class=\"ts\"/>(1UL<<1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTION_MAP_LAST_BIT\">SECTION_MAP_LAST_BIT</a><span class=\"ts\"/>(1UL<<2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTION_MAP_MASK\">SECTION_MAP_MASK</a><span class=\"ts\"/>(~(<a class=\"id\" href=\"#SECTION_MAP_LAST_BIT\">SECTION_MAP_LAST_BIT</a>-1))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTION_NID_SHIFT\">SECTION_NID_SHIFT</a><span class=\"ts\"/>2", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#__section_mem_map_addr\">__section_mem_map_addr</a>(struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#section\">section</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> &= <a class=\"id\" href=\"#SECTION_MAP_MASK\">SECTION_MAP_MASK</a>;", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#page\">page</a> *)<a class=\"id\" href=\"#map\">map</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#present_section\">present_section</a>(struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#section\">section</a> && (<a class=\"id\" href=\"#section\">section</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a> &amp; <a class=\"id\" href=\"#SECTION_MARKED_PRESENT\">SECTION_MARKED_PRESENT</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(unsigned long <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#present_section\">present_section</a>(<a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#nr\">nr</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#valid_section\">valid_section</a>(struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#section\">section</a> && (<a class=\"id\" href=\"#section\">section</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a> &amp; <a class=\"id\" href=\"#SECTION_HAS_MEM_MAP\">SECTION_HAS_MEM_MAP</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#valid_section_nr\">valid_section_nr</a>(unsigned long <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#valid_section\">valid_section</a>(<a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#nr\">nr</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#__pfn_to_section\">__pfn_to_section</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#pfn\">pfn</a>) >= <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#valid_section\">valid_section</a>(<a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pfn_present\">pfn_present</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#pfn\">pfn</a>) >= <a class=\"id\" href=\"#NR_MEM_SECTIONS\">NR_MEM_SECTIONS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#present_section\">present_section</a>(<a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are _only_ used during initialisation, therefore they</span>", 
"<span class=\"comment\"> * can use __initdata ...  They could have names to indicate</span>", 
"<span class=\"comment\"> * this restriction.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pfn_to_nid\">pfn_to_nid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__pfn_to_nid_pfn\">__pfn_to_nid_pfn</a> = (<a class=\"id\" href=\"#pfn\">pfn</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#__pfn_to_nid_pfn\">__pfn_to_nid_pfn</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pfn_to_nid\">pfn_to_nid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)<span class=\"ts\"/><span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#early_pfn_valid\">early_pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)<span class=\"ts\"/><a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)", 
"void <a class=\"id\" href=\"#sparse_init\">sparse_init</a>(void);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sparse_init\">sparse_init</a>()<span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sparse_index_init\">sparse_index_init</a>(<a class=\"id\" href=\"#_sec\">_sec</a>, <a class=\"id\" href=\"#_nid\">_nid</a>)  do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SPARSEMEM */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NODES_SPAN_OTHER_NODES\">CONFIG_NODES_SPAN_OTHER_NODES</a>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#early_pfn_in_nid\">early_pfn_in_nid</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, int <a class=\"id\" href=\"#nid\">nid</a>);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#early_pfn_in_nid\">early_pfn_in_nid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#nid\">nid</a>)<span class=\"ts\"/>(1)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#early_pfn_valid\">early_pfn_valid</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#early_pfn_valid\">early_pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)<span class=\"ts\"/>(1)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#memory_present\">memory_present</a>(int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#node_memmap_size_bytes\">node_memmap_size_bytes</a>(int, unsigned long, unsigned long);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If it is possible to have holes within a MAX_ORDER_NR_PAGES, then we</span>", 
"<span class=\"comment\"> * need to check pfn validility within that MAX_ORDER_NR_PAGES block.</span>", 
"<span class=\"comment\"> * pfn_valid_within() should be used in this case; we optimise this away</span>", 
"<span class=\"comment\"> * when we have no holes within a MAX_ORDER_NR_PAGES block.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOLES_IN_ZONE\">CONFIG_HOLES_IN_ZONE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pfn_valid_within\">pfn_valid_within</a>(<a class=\"id\" href=\"#pfn\">pfn</a>) <a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pfn_valid_within\">pfn_valid_within</a>(<a class=\"id\" href=\"#pfn\">pfn</a>) (1)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_HAS_HOLES_MEMORYMODEL\">CONFIG_ARCH_HAS_HOLES_MEMORYMODEL</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pfn_valid() is meant to be able to tell if a given PFN has valid memmap</span>", 
"<span class=\"comment\"> * associated with it or not. In FLATMEM, it is expected that holes always</span>", 
"<span class=\"comment\"> * have valid memmap as long as there is valid PFNs either side of the hole.</span>", 
"<span class=\"comment\"> * In SPARSEMEM, it is assumed that a valid section has a memmap for the</span>", 
"<span class=\"comment\"> * entire section.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * However, an ARM, and maybe other embedded architectures in the future</span>", 
"<span class=\"comment\"> * free memmap backing holes to save memory on the assumption the memmap is</span>", 
"<span class=\"comment\"> * never used. The page_zone linkages are then broken even though pfn_valid()</span>", 
"<span class=\"comment\"> * returns true. A walker of the full memmap must then do this additional</span>", 
"<span class=\"comment\"> * check to ensure the memmap they are looking at is sane by making sure</span>", 
"<span class=\"comment\"> * the zone and PFN linkages are still valid. This is expensive, but walkers</span>", 
"<span class=\"comment\"> * of the full memmap are extremely rare.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#memmap_valid_within\">memmap_valid_within</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#memmap_valid_within\">memmap_valid_within</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ARCH_HAS_HOLES_MEMORYMODEL */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !__GENERATING_BOUNDS.H */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !__ASSEMBLY__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_MMZONE_H */</span>", 
];
xr_frag_insert('l/5a/4250e9ab05b2247ddcf993365a35aecc97e776.xr', __xr_tmp);
