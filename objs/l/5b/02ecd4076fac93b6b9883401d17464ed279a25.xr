var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_MODULE_PARAMS_H\">_LINUX_MODULE_PARAMS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_MODULE_PARAMS_H\">_LINUX_MODULE_PARAMS_H</a>", 
"<span class=\"comment\">/* (C) Copyright 2001, 2002 Rusty Russell IBM Corporation */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stringify\">stringify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* You can override this manually, but generally this should match the</span>", 
"<span class=\"comment\">   module name. */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#MODULE\">MODULE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_PARAM_PREFIX\">MODULE_PARAM_PREFIX</a> <span class=\"comment\">/* empty */</span>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_PARAM_PREFIX\">MODULE_PARAM_PREFIX</a> <a class=\"id\" href=\"#KBUILD_MODNAME\">KBUILD_MODNAME</a> \".\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Chosen so that structs with an unsigned long line up. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_PARAM_PREFIX_LEN\">MAX_PARAM_PREFIX_LEN</a> (64 - sizeof(unsigned long))", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#MODULE\">MODULE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#___module_cat\">___module_cat</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>) <a class=\"id\" href=\"#__mod_\">__mod_</a> ## <a class=\"id\" href=\"#a\">a</a> ## <a class=\"id\" href=\"#b\">b</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__module_cat\">__module_cat</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>) <a class=\"id\" href=\"#___module_cat\">___module_cat</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__MODULE_INFO\">__MODULE_INFO</a>(<a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#info\">info</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"static const char <a class=\"id\" href=\"#__module_cat\">__module_cat</a>(<a class=\"id\" href=\"#name\">name</a>,<a class=\"id\" href=\"#__LINE__\">__LINE__</a>)[]<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"  <a class=\"id\" href=\"#__used\">__used</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"  <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\".modinfo\"),<a class=\"id\" href=\"#unused\">unused</a>)) = <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#tag\">tag</a>) \"=\" <a class=\"id\" href=\"#info\">info</a>", 
"#else  <span class=\"comment\">/* !MODULE */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__MODULE_INFO\">__MODULE_INFO</a>(<a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#info\">info</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__MODULE_PARM_TYPE\">__MODULE_PARM_TYPE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#_type\">_type</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"  <a class=\"id\" href=\"#__MODULE_INFO\">__MODULE_INFO</a>(<a class=\"id\" href=\"#parmtype\">parmtype</a>, <a class=\"id\" href=\"#name\">name</a>##<a class=\"id\" href=\"#type\">type</a>, #<a class=\"id\" href=\"#name\">name</a> \":\" <a class=\"id\" href=\"#_type\">_type</a>)", 
"", 
"struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a>;", 
"", 
"struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Returns 0, or -errno.  arg is in kp-&gt;arg. */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#set\">set</a>)(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Returns length written or -errno.  Buffer is 4k (ie. be short!) */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get\">get</a>)(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Optional function to free kp-&gt;arg when module unloaded. */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#free\">free</a>)(void *<a class=\"id\" href=\"#arg\">arg</a>);", 
"};", 
"", 
"<span class=\"comment\">/* Flag bits for kernel_param.flags */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPARAM_ISBOOL\">KPARAM_ISBOOL</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"", 
"struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#kparam_string\">kparam_string</a> *<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#kparam_array\">kparam_array</a> *<a class=\"id\" href=\"#arr\">arr</a>;", 
"<span class=\"ts\"/>};", 
"};", 
"", 
"<span class=\"comment\">/* Special one for strings we want to copy into */</span>", 
"struct <a class=\"id\" href=\"#kparam_string\">kparam_string</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#maxlen\">maxlen</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#string\">string</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Special one for arrays */</span>", 
"struct <a class=\"id\" href=\"#kparam_array\">kparam_array</a>", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#elemsize\">elemsize</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#elem\">elem</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * module_param - typesafe helper for a module/cmdline parameter</span>", 
"<span class=\"comment\"> * @value: the variable to alter, and exposed parameter name.</span>", 
"<span class=\"comment\"> * @type: the type of the parameter</span>", 
"<span class=\"comment\"> * @perm: visibility in sysfs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @value becomes the module parameter, or (prefixed by KBUILD_MODNAME and a</span>", 
"<span class=\"comment\"> * \".\") the kernel commandline parameter.  Note that - is changed to _, so</span>", 
"<span class=\"comment\"> * the user can use \"foo-bar=1\" even for variable \"foo_bar\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @perm is 0 if the the variable is not to appear in sysfs, or 0444</span>", 
"<span class=\"comment\"> * for world-readable, 0644 for root-writable, etc.  Note that if it</span>", 
"<span class=\"comment\"> * is writable, you may need to use kparam_block_sysfs_write() around</span>", 
"<span class=\"comment\"> * accesses (esp. charp, which can be kfreed when it changes).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The @type is simply pasted to refer to a param_ops_##type and a</span>", 
"<span class=\"comment\"> * param_check_##type: for convenience many standard types are provided but</span>", 
"<span class=\"comment\"> * you can create your own by defining those variables.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Standard types are:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>byte, short, ushort, int, uint, long, ulong</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>charp: a character pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bool: a bool, values 0/1, y/n, Y/N.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>invbool: the above, only sense-reversed (N = true).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#perm\">perm</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_param_named\">module_param_named</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#perm\">perm</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * module_param_named - typesafe helper for a renamed module/cmdline parameter</span>", 
"<span class=\"comment\"> * @name: a valid C identifier which is the parameter name.</span>", 
"<span class=\"comment\"> * @value: the actual lvalue to alter.</span>", 
"<span class=\"comment\"> * @type: the type of the parameter</span>", 
"<span class=\"comment\"> * @perm: visibility in sysfs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Usually it's a good idea to have variable names and user-exposed names the</span>", 
"<span class=\"comment\"> * same, but that's harder if the variable must be non-static or is inside a</span>", 
"<span class=\"comment\"> * structure.  This allows exposure under a different name.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#module_param_named\">module_param_named</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#perm\">perm</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param_check_\">param_check_</a>##<a class=\"id\" href=\"#type\">type</a>(<a class=\"id\" href=\"#name\">name</a>, &amp;(<a class=\"id\" href=\"#value\">value</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_param_cb\">module_param_cb</a>(<a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#param_ops_\">param_ops_</a>##<a class=\"id\" href=\"#type\">type</a>, &amp;<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#perm\">perm</a>);<span class=\"ts\"/><span class=\"ts\"/>   \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__MODULE_PARM_TYPE\">__MODULE_PARM_TYPE</a>(<a class=\"id\" href=\"#name\">name</a>, #<a class=\"id\" href=\"#type\">type</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * module_param_cb - general callback for a module/cmdline parameter</span>", 
"<span class=\"comment\"> * @name: a valid C identifier which is the parameter name.</span>", 
"<span class=\"comment\"> * @ops: the set &amp; get operations for this parameter.</span>", 
"<span class=\"comment\"> * @perm: visibility in sysfs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The ops can have NULL set or get functions.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#module_param_cb\">module_param_cb</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#perm\">perm</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__module_param_call\">__module_param_call</a>(<a class=\"id\" href=\"#MODULE_PARAM_PREFIX\">MODULE_PARAM_PREFIX</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#__same_type\">__same_type</a>((<a class=\"id\" href=\"#arg\">arg</a>), <a class=\"id\" href=\"#bool\">bool</a> *), <a class=\"id\" href=\"#perm\">perm</a>)", 
"", 
"<span class=\"comment\">/* On alpha, ia64 and ppc64 relocations to global data cannot go into</span>", 
"<span class=\"comment\">   read-only sections (which is part of respective UNIX ABI on these</span>", 
"<span class=\"comment\">   platforms). So 'const' makes no sense and even causes compile failures</span>", 
"<span class=\"comment\">   with some compilers. */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ALPHA\">CONFIG_ALPHA</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IA64\">CONFIG_IA64</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PPC64\">CONFIG_PPC64</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__moduleparam_const\">__moduleparam_const</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__moduleparam_const\">__moduleparam_const</a> const", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* This is the fundamental function for registering boot/module</span>", 
"<span class=\"comment\">   parameters. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__module_param_call\">__module_param_call</a>(<a class=\"id\" href=\"#prefix\">prefix</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#isbool\">isbool</a>, <a class=\"id\" href=\"#perm\">perm</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"comment\">/* Default value instead of permissions? */</span><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#__param_perm_check_\">__param_perm_check_</a>##<a class=\"id\" href=\"#name\">name</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#unused\">unused</a>)) =<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON_ZERO\">BUILD_BUG_ON_ZERO</a>((<a class=\"id\" href=\"#perm\">perm</a>) &lt; 0 || (<a class=\"id\" href=\"#perm\">perm</a>) &gt; 0777 || ((<a class=\"id\" href=\"#perm\">perm</a>) &amp; 2))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>+ <a class=\"id\" href=\"#BUILD_BUG_ON_ZERO\">BUILD_BUG_ON_ZERO</a>(sizeof(\"\"<a class=\"id\" href=\"#prefix\">prefix</a>) &gt; <a class=\"id\" href=\"#MAX_PARAM_PREFIX_LEN\">MAX_PARAM_PREFIX_LEN</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static const char <a class=\"id\" href=\"#__param_str_\">__param_str_</a>##<a class=\"id\" href=\"#name\">name</a>[] = <a class=\"id\" href=\"#prefix\">prefix</a> #<a class=\"id\" href=\"#name\">name</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> <a class=\"id\" href=\"#__moduleparam_const\">__moduleparam_const</a> <a class=\"id\" href=\"#__param_\">__param_</a>##<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__used\">__used</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"    <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#unused\">unused</a>,<a class=\"id\" href=\"#__section__\">__section__</a> (\"__param\"),<a class=\"id\" href=\"#aligned\">aligned</a>(sizeof(void *)))) \\", 
"<span class=\"ts\"/>= { <a class=\"id\" href=\"#__param_str_\">__param_str_</a>##<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#perm\">perm</a>, <a class=\"id\" href=\"#isbool\">isbool</a> ? <a class=\"id\" href=\"#KPARAM_ISBOOL\">KPARAM_ISBOOL</a> : 0,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>    { <a class=\"id\" href=\"#arg\">arg</a> } }", 
"", 
"<span class=\"comment\">/* Obsolete - use module_param_cb() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#module_param_call\">module_param_call</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#set\">set</a>, <a class=\"id\" href=\"#get\">get</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#perm\">perm</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#__param_ops_\">__param_ops_</a>##<a class=\"id\" href=\"#name\">name</a> =<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/> { (void *)<a class=\"id\" href=\"#set\">set</a>, (void *)<a class=\"id\" href=\"#get\">get</a> };<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__module_param_call\">__module_param_call</a>(<a class=\"id\" href=\"#MODULE_PARAM_PREFIX\">MODULE_PARAM_PREFIX</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#__param_ops_\">__param_ops_</a>##<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#arg\">arg</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__same_type\">__same_type</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#bool\">bool</a> *),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#perm\">perm</a>) + sizeof(<a class=\"id\" href=\"#__check_old_set_param\">__check_old_set_param</a>(<a class=\"id\" href=\"#set\">set</a>))*0)", 
"", 
"<span class=\"comment\">/* We don't get oldget: it's often a new-style param_get_uint, etc. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#__check_old_set_param\">__check_old_set_param</a>(int (*<a class=\"id\" href=\"#oldset\">oldset</a>)(const char *, struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *))", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kparam_block_sysfs_write - make sure a parameter isn't written via sysfs.</span>", 
"<span class=\"comment\"> * @name: the name of the parameter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There's no point blocking write on a paramter that isn't writable via sysfs!</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kparam_block_sysfs_write\">kparam_block_sysfs_write</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#__param_\">__param_</a>##<a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#perm\">perm</a> &amp; 0222));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kernel_param_lock\">__kernel_param_lock</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kparam_unblock_sysfs_write - allows sysfs to write to a parameter again.</span>", 
"<span class=\"comment\"> * @name: the name of the parameter</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kparam_unblock_sysfs_write\">kparam_unblock_sysfs_write</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#__param_\">__param_</a>##<a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#perm\">perm</a> &amp; 0222));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kernel_param_unlock\">__kernel_param_unlock</a>();<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kparam_block_sysfs_read - make sure a parameter isn't read via sysfs.</span>", 
"<span class=\"comment\"> * @name: the name of the parameter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This also blocks sysfs writes.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kparam_block_sysfs_read\">kparam_block_sysfs_read</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#__param_\">__param_</a>##<a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#perm\">perm</a> &amp; 0444));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kernel_param_lock\">__kernel_param_lock</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kparam_unblock_sysfs_read - allows sysfs to read a parameter again.</span>", 
"<span class=\"comment\"> * @name: the name of the parameter</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kparam_unblock_sysfs_read\">kparam_unblock_sysfs_read</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#__param_\">__param_</a>##<a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#perm\">perm</a> &amp; 0444));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kernel_param_unlock\">__kernel_param_unlock</a>();<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>", 
"extern void <a class=\"id\" href=\"#__kernel_param_lock\">__kernel_param_lock</a>(void);", 
"extern void <a class=\"id\" href=\"#__kernel_param_unlock\">__kernel_param_unlock</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__kernel_param_lock\">__kernel_param_lock</a>(void)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__kernel_param_unlock\">__kernel_param_unlock</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#MODULE\">MODULE</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * core_param - define a historical core kernel parameter.</span>", 
"<span class=\"comment\"> * @name: the name of the cmdline and sysfs parameter (often the same as var)</span>", 
"<span class=\"comment\"> * @var: the variable</span>", 
"<span class=\"comment\"> * @type: the type of the parameter</span>", 
"<span class=\"comment\"> * @perm: visibility in sysfs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * core_param is just like module_param(), but cannot be modular and</span>", 
"<span class=\"comment\"> * doesn't add a prefix (such as \"printk.\").  This is for compatibility</span>", 
"<span class=\"comment\"> * with __setup(), and it makes sense as truly core parameters aren't</span>", 
"<span class=\"comment\"> * tied to the particular file they're in.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#core_param\">core_param</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#perm\">perm</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param_check_\">param_check_</a>##<a class=\"id\" href=\"#type\">type</a>(<a class=\"id\" href=\"#name\">name</a>, &amp;(<a class=\"id\" href=\"#var\">var</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__module_param_call\">__module_param_call</a>(\"\", <a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#param_ops_\">param_ops_</a>##<a class=\"id\" href=\"#type\">type</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#__same_type\">__same_type</a>(<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#bool\">bool</a>), <a class=\"id\" href=\"#perm\">perm</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !MODULE */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * module_param_string - a char array parameter</span>", 
"<span class=\"comment\"> * @name: the name of the parameter</span>", 
"<span class=\"comment\"> * @string: the string variable</span>", 
"<span class=\"comment\"> * @len: the maximum length of the string, incl. terminator</span>", 
"<span class=\"comment\"> * @perm: visibility in sysfs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This actually copies the string when it's set (unlike type charp).</span>", 
"<span class=\"comment\"> * @len is usually just sizeof(string).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#module_param_string\">module_param_string</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#perm\">perm</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#kparam_string\">kparam_string</a> <a class=\"id\" href=\"#__param_string_\">__param_string_</a>##<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>= { <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#string\">string</a> };<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__module_param_call\">__module_param_call</a>(<a class=\"id\" href=\"#MODULE_PARAM_PREFIX\">MODULE_PARAM_PREFIX</a>, <a class=\"id\" href=\"#name\">name</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#param_ops_string\">param_ops_string</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    .<a class=\"id\" href=\"#str\">str</a> = &amp;<a class=\"id\" href=\"#__param_string_\">__param_string_</a>##<a class=\"id\" href=\"#name\">name</a>, 0, <a class=\"id\" href=\"#perm\">perm</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__MODULE_PARM_TYPE\">__MODULE_PARM_TYPE</a>(<a class=\"id\" href=\"#name\">name</a>, \"string\")", 
"", 
"<span class=\"comment\">/* Called on module insert or kernel boot */</span>", 
"extern int <a class=\"id\" href=\"#parse_args\">parse_args</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      char *<a class=\"id\" href=\"#args\">args</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#params\">params</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int (*<a class=\"id\" href=\"#unknown\">unknown</a>)(char *<a class=\"id\" href=\"#param\">param</a>, char *<a class=\"id\" href=\"#val\">val</a>));", 
"", 
"<span class=\"comment\">/* Called by module remove. */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>", 
"extern void <a class=\"id\" href=\"#destroy_params\">destroy_params</a>(const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#params\">params</a>, unsigned <a class=\"id\" href=\"#num\">num</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#destroy_params\">destroy_params</a>(const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#params\">params</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_SYSFS */</span>", 
"", 
"<span class=\"comment\">/* All the helper functions */</span>", 
"<span class=\"comment\">/* The macros to do compile-time type checking stolen from Jakub</span>", 
"<span class=\"comment\">   Jelinek, who IIRC came up with this idea for the 2.4 module init code. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__param_check\">__param_check</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#type\">type</a>) \\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#type\">type</a> *<a class=\"id\" href=\"#__check_\">__check_</a>##<a class=\"id\" href=\"#name\">name</a>(void) { return(<a class=\"id\" href=\"#p\">p</a>); }", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_byte\">param_ops_byte</a>;", 
"extern int <a class=\"id\" href=\"#param_set_byte\">param_set_byte</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"extern int <a class=\"id\" href=\"#param_get_byte\">param_get_byte</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#param_check_byte\">param_check_byte</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#__param_check\">__param_check</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>, unsigned char)", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_short\">param_ops_short</a>;", 
"extern int <a class=\"id\" href=\"#param_set_short\">param_set_short</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"extern int <a class=\"id\" href=\"#param_get_short\">param_get_short</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#param_check_short\">param_check_short</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#__param_check\">__param_check</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>, short)", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_ushort\">param_ops_ushort</a>;", 
"extern int <a class=\"id\" href=\"#param_set_ushort\">param_set_ushort</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"extern int <a class=\"id\" href=\"#param_get_ushort\">param_get_ushort</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#param_check_ushort\">param_check_ushort</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#__param_check\">__param_check</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>, unsigned short)", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_int\">param_ops_int</a>;", 
"extern int <a class=\"id\" href=\"#param_set_int\">param_set_int</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"extern int <a class=\"id\" href=\"#param_get_int\">param_get_int</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#param_check_int\">param_check_int</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#__param_check\">__param_check</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>, int)", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_uint\">param_ops_uint</a>;", 
"extern int <a class=\"id\" href=\"#param_set_uint\">param_set_uint</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"extern int <a class=\"id\" href=\"#param_get_uint\">param_get_uint</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#param_check_uint\">param_check_uint</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#__param_check\">__param_check</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>, unsigned int)", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_long\">param_ops_long</a>;", 
"extern int <a class=\"id\" href=\"#param_set_long\">param_set_long</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"extern int <a class=\"id\" href=\"#param_get_long\">param_get_long</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#param_check_long\">param_check_long</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#__param_check\">__param_check</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>, long)", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_ulong\">param_ops_ulong</a>;", 
"extern int <a class=\"id\" href=\"#param_set_ulong\">param_set_ulong</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"extern int <a class=\"id\" href=\"#param_get_ulong\">param_get_ulong</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#param_check_ulong\">param_check_ulong</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#__param_check\">__param_check</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>, unsigned long)", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_charp\">param_ops_charp</a>;", 
"extern int <a class=\"id\" href=\"#param_set_charp\">param_set_charp</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"extern int <a class=\"id\" href=\"#param_get_charp\">param_get_charp</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#param_check_charp\">param_check_charp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#__param_check\">__param_check</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>, char *)", 
"", 
"<span class=\"comment\">/* For historical reasons \"bool\" parameters can be (unsigned) \"int\". */</span>", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_bool\">param_ops_bool</a>;", 
"extern int <a class=\"id\" href=\"#param_set_bool\">param_set_bool</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"extern int <a class=\"id\" href=\"#param_get_bool\">param_get_bool</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#param_check_bool\">param_check_bool</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__check_\">__check_</a>##<a class=\"id\" href=\"#name\">name</a>(void)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(!<a class=\"id\" href=\"#__same_type\">__same_type</a>((<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#bool\">bool</a> *) &&<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     !<a class=\"id\" href=\"#__same_type\">__same_type</a>((<a class=\"id\" href=\"#p\">p</a>), unsigned int *) &&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     !<a class=\"id\" href=\"#__same_type\">__same_type</a>((<a class=\"id\" href=\"#p\">p</a>), int *));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_invbool\">param_ops_invbool</a>;", 
"extern int <a class=\"id\" href=\"#param_set_invbool\">param_set_invbool</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"extern int <a class=\"id\" href=\"#param_get_invbool\">param_get_invbool</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#param_check_invbool\">param_check_invbool</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#__param_check\">__param_check</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bool\">bool</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * module_param_array - a parameter which is an array of some type</span>", 
"<span class=\"comment\"> * @name: the name of the array variable</span>", 
"<span class=\"comment\"> * @type: the type, as per module_param()</span>", 
"<span class=\"comment\"> * @nump: optional pointer filled in with the number written</span>", 
"<span class=\"comment\"> * @perm: visibility in sysfs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Input and output are as comma-separated values.  Commas inside values</span>", 
"<span class=\"comment\"> * don't work properly (eg. an array of charp).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ARRAY_SIZE(@name) is used to determine the number of elements in the</span>", 
"<span class=\"comment\"> * array, so the definition must be visible.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#module_param_array\">module_param_array</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#nump\">nump</a>, <a class=\"id\" href=\"#perm\">perm</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_param_array_named\">module_param_array_named</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#nump\">nump</a>, <a class=\"id\" href=\"#perm\">perm</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * module_param_array_named - renamed parameter which is an array of some type</span>", 
"<span class=\"comment\"> * @name: a valid C identifier which is the parameter name</span>", 
"<span class=\"comment\"> * @array: the name of the array variable</span>", 
"<span class=\"comment\"> * @type: the type, as per module_param()</span>", 
"<span class=\"comment\"> * @nump: optional pointer filled in with the number written</span>", 
"<span class=\"comment\"> * @perm: visibility in sysfs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This exposes a different name than the actual variable name.  See</span>", 
"<span class=\"comment\"> * module_param_named() for why this might be necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#module_param_array_named\">module_param_array_named</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#array\">array</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#nump\">nump</a>, <a class=\"id\" href=\"#perm\">perm</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#kparam_array\">kparam_array</a> <a class=\"id\" href=\"#__param_arr_\">__param_arr_</a>##<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>= { <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#array\">array</a>), <a class=\"id\" href=\"#nump\">nump</a>, &amp;<a class=\"id\" href=\"#param_ops_\">param_ops_</a>##<a class=\"id\" href=\"#type\">type</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>    sizeof(<a class=\"id\" href=\"#array\">array</a>[0]), <a class=\"id\" href=\"#array\">array</a> };<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__module_param_call\">__module_param_call</a>(<a class=\"id\" href=\"#MODULE_PARAM_PREFIX\">MODULE_PARAM_PREFIX</a>, <a class=\"id\" href=\"#name\">name</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#param_array_ops\">param_array_ops</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    .<a class=\"id\" href=\"#arr\">arr</a> = &amp;<a class=\"id\" href=\"#__param_arr_\">__param_arr_</a>##<a class=\"id\" href=\"#name\">name</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__same_type\">__same_type</a>(<a class=\"id\" href=\"#array\">array</a>[0], <a class=\"id\" href=\"#bool\">bool</a>), <a class=\"id\" href=\"#perm\">perm</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__MODULE_PARM_TYPE\">__MODULE_PARM_TYPE</a>(<a class=\"id\" href=\"#name\">name</a>, \"array of \" #<a class=\"id\" href=\"#type\">type</a>)", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_array_ops\">param_array_ops</a>;", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_string\">param_ops_string</a>;", 
"extern int <a class=\"id\" href=\"#param_set_copystring\">param_set_copystring</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *);", 
"extern int <a class=\"id\" href=\"#param_get_string\">param_get_string</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>);", 
"", 
"<span class=\"comment\">/* for exporting parameters in /sys/parameters */</span>", 
"", 
"struct <a class=\"id\" href=\"#module\">module</a>;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>)", 
"extern int <a class=\"id\" href=\"#module_param_sysfs_setup\">module_param_sysfs_setup</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kparam\">kparam</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#num_params\">num_params</a>);", 
"", 
"extern void <a class=\"id\" href=\"#module_param_sysfs_remove\">module_param_sysfs_remove</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#module_param_sysfs_setup\">module_param_sysfs_setup</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kparam\">kparam</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#num_params\">num_params</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#module_param_sysfs_remove\">module_param_sysfs_remove</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{ }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_MODULE_PARAMS_H */</span>", 
];
xr_frag_insert('l/5b/02ecd4076fac93b6b9883401d17464ed279a25.xr', __xr_tmp);
