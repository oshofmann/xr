var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SELinux support for the Audit LSM hooks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Most of below header was moved from include/linux/selinux.h which</span>", 
"<span class=\"comment\"> * is released under below copyrights:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: James Morris &lt;jmorris@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 Red Hat, Inc., James Morris &lt;jmorris@redhat.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2006 Trusted Computer Solutions, Inc. &lt;dgoeddel@trustedcs.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2006 IBM Corporation, Timothy R. Chavez &lt;tinytim@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License version 2,</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_SELINUX_AUDIT_H\">_SELINUX_AUDIT_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_SELINUX_AUDIT_H\">_SELINUX_AUDIT_H</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>selinux_audit_rule_init - alloc/init an selinux audit rule structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@field: the field this rule refers to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@op: the operater the rule uses</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rulestr: the text \"target\" of the rule</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rule: pointer to the new rule structure returned via this</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 if successful, -errno if not.  On success, the rule structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will be allocated internally.  The caller must free this structure with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>selinux_audit_rule_free() after use.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#selinux_audit_rule_init\">selinux_audit_rule_init</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#op\">op</a>, char *<a class=\"id\" href=\"#rulestr\">rulestr</a>, void **<a class=\"id\" href=\"#rule\">rule</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>selinux_audit_rule_free - free an selinux audit rule structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rule: pointer to the audit rule to be freed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This will free all memory associated with the given rule.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If @rule is NULL, no operation is performed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#selinux_audit_rule_free\">selinux_audit_rule_free</a>(void *<a class=\"id\" href=\"#rule\">rule</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>selinux_audit_rule_match - determine if a context ID matches a rule.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sid: the context ID to check</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@field: the field this rule refers to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@op: the operater the rule uses</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rule: pointer to the audit rule to check against</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@actx: the audit context (can be NULL) associated with the check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 1 if the context id matches the rule, 0 if it does not, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>-errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#selinux_audit_rule_match\">selinux_audit_rule_match</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#op\">op</a>, void *<a class=\"id\" href=\"#rule\">rule</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#audit_context\">audit_context</a> *<a class=\"id\" href=\"#actx\">actx</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>selinux_audit_rule_known - check to see if rule contains selinux fields.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rule: rule to be checked</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 1 if there are selinux fields specified in the rule, 0 otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#selinux_audit_rule_known\">selinux_audit_rule_known</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#krule\">krule</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _SELINUX_AUDIT_H */</span>", 
"", 
];
xr_frag_insert('l/5b/04eb805d55eee47509f61a402b64b1606582ef.xr', __xr_tmp);
