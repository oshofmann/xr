var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_context\">irq_context</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chain_key\">chain_key</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_LOCKDEP_KEYS_BITS\">MAX_LOCKDEP_KEYS_BITS</a><span class=\"ts\"/><span class=\"ts\"/>13", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Subtract one because we offset hlock-&gt;class_idx by 1 in order</span>", 
"<span class=\"comment\"> * to make 0 mean no class. This avoids overflowing the class_idx</span>", 
"<span class=\"comment\"> * bitfield and hitting the BUG in hlock_class().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_LOCKDEP_KEYS\">MAX_LOCKDEP_KEYS</a><span class=\"ts\"/><span class=\"ts\"/>((1UL << <a class=\"id\" href=\"#MAX_LOCKDEP_KEYS_BITS\">MAX_LOCKDEP_KEYS_BITS</a>) - 1)", 
"", 
"struct <a class=\"id\" href=\"#held_lock\">held_lock</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * One-way hash of the dependency chain up to this point. We</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hash the hashes step by step as the dependency chain grows.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use it for dependency-caching and we skip detection</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * passes and dependency-updates if there is a cache-hit, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it is absolutely critical for 100% coverage of the validator</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to have a unique key value for every unique dependency path</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that can occur in the system, to make a unique hash value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as likely as possible - hence the 64-bit width.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The task struct holds the current hash value (initialized</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with zero), here we store the previous hash value:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_chain_key\">prev_chain_key</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acquire_ip\">acquire_ip</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#instance\">instance</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nest_lock\">nest_lock</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCK_STAT\">CONFIG_LOCK_STAT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#waittime_stamp\">waittime_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#holdtime_stamp\">holdtime_stamp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class_idx\">class_idx</a>:<a class=\"id\" href=\"#MAX_LOCKDEP_KEYS_BITS\">MAX_LOCKDEP_KEYS_BITS</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The lock-stack is unified in that the lock chains of interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * contexts nest ontop of process context chains, but we 'separate'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the hashes by starting with 0 if we cross into an interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * context, and we also keep do not add cross-context lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dependencies - the lock usage graph walking covers that area</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anyway, and we'd just unnecessarily increase the number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dependencies otherwise. [Note: hardirq and softirq contexts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are separated from each other too.]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The following field is used to detect when we cross into an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupt context:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#irq_context\">irq_context</a>:2; <span class=\"comment\">/* bit 0 - soft, bit 1 - hard */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#trylock\">trylock</a>:1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 16 bits */</span>", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#read\">read</a>:2;        <span class=\"comment\">/* see lock_acquire() comment */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#check\">check</a>:2;       <span class=\"comment\">/* see lock_acquire() comment */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hardirqs_off\">hardirqs_off</a>:1;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#references\">references</a>:11;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 32 bits */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialization, self-test and debugging-output methods:</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#lockdep_init\">lockdep_init</a>(void);", 
"extern void <a class=\"id\" href=\"#lockdep_info\">lockdep_info</a>(void);", 
"extern void <a class=\"id\" href=\"#lockdep_reset\">lockdep_reset</a>(void);", 
"extern void <a class=\"id\" href=\"#lockdep_reset_lock\">lockdep_reset_lock</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"extern void <a class=\"id\" href=\"#lockdep_free_key_range\">lockdep_free_key_range</a>(void *<a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"extern void <a class=\"id\" href=\"#lockdep_sys_exit\">lockdep_sys_exit</a>(void);", 
"", 
"extern void <a class=\"id\" href=\"#lockdep_off\">lockdep_off</a>(void);", 
"extern void <a class=\"id\" href=\"#lockdep_on\">lockdep_on</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These methods are used by specific locking variants (spinlocks,</span>", 
"<span class=\"comment\"> * rwlocks, mutexes and rwsems) to pass init/acquire/release events</span>", 
"<span class=\"comment\"> * to lockdep:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"extern void <a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *<a class=\"id\" href=\"#lock\">lock</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>, int <a class=\"id\" href=\"#subclass\">subclass</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * To initialize a lockdep_map statically use this macro.</span>", 
"<span class=\"comment\"> * Note that _name must not be NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATIC_LOCKDEP_MAP_INIT\">STATIC_LOCKDEP_MAP_INIT</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_key\">_key</a>) \\", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#name\">name</a> = (<a class=\"id\" href=\"#_name\">_name</a>), .<a class=\"id\" href=\"#key\">key</a> = (void *)(<a class=\"id\" href=\"#_key\">_key</a>), }", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reinitialize a lock key - for cases where there is special locking or</span>", 
"<span class=\"comment\"> * special initialization of locks so that the validator gets the scope</span>", 
"<span class=\"comment\"> * of dependencies wrong: they are either too broad (they need a class-split)</span>", 
"<span class=\"comment\"> * or they are too narrow (they suffer from a false class-split):</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#key\">key</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, #<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#key\">key</a>, 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_set_class_and_name\">lockdep_set_class_and_name</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#name\">name</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#key\">key</a>, 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_set_class_and_subclass\">lockdep_set_class_and_subclass</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#sub\">sub</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, #<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#sub\">sub</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_set_subclass\">lockdep_set_subclass</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#sub\">sub</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, #<a class=\"id\" href=\"#lock\">lock</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>.<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#sub\">sub</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_set_novalidate_class\">lockdep_set_novalidate_class</a>(<a class=\"id\" href=\"#lock\">lock</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(<a class=\"id\" href=\"#lock\">lock</a>, &amp;<a class=\"id\" href=\"#__lockdep_no_validate__\">__lockdep_no_validate__</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Compare locking classes</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_match_class\">lockdep_match_class</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#key\">key</a>) <a class=\"id\" href=\"#lockdep_match_key\">lockdep_match_key</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, <a class=\"id\" href=\"#key\">key</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#lockdep_match_key\">lockdep_match_key</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#key\">key</a> == <a class=\"id\" href=\"#key\">key</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Acquire a lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Values for \"read\":</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   0: exclusive (write) acquire</span>", 
"<span class=\"comment\"> *   1: read-acquire (no recursion allowed)</span>", 
"<span class=\"comment\"> *   2: read-acquire with same-instance recursion allowed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Values for check:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   0: disabled</span>", 
"<span class=\"comment\"> *   1: simple checks (freeing, held-at-exit-time, etc.)</span>", 
"<span class=\"comment\"> *   2: full validation</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *<a class=\"id\" href=\"#lock\">lock</a>, unsigned int <a class=\"id\" href=\"#subclass\">subclass</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#trylock\">trylock</a>, int <a class=\"id\" href=\"#read\">read</a>, int <a class=\"id\" href=\"#check\">check</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *<a class=\"id\" href=\"#nest_lock\">nest_lock</a>, unsigned long <a class=\"id\" href=\"#ip\">ip</a>);", 
"", 
"extern void <a class=\"id\" href=\"#lock_release\">lock_release</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *<a class=\"id\" href=\"#lock\">lock</a>, int <a class=\"id\" href=\"#nested\">nested</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#ip\">ip</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#lock_is_held\">lock_is_held</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>)", 
"", 
"extern int <a class=\"id\" href=\"#lock_is_held\">lock_is_held</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"extern void <a class=\"id\" href=\"#lock_set_class\">lock_set_class</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *<a class=\"id\" href=\"#lock\">lock</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>, unsigned int <a class=\"id\" href=\"#subclass\">subclass</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#ip\">ip</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#lock_set_subclass\">lock_set_subclass</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#subclass\">subclass</a>, unsigned long <a class=\"id\" href=\"#ip\">ip</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_set_class\">lock_set_class</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#subclass\">subclass</a>, <a class=\"id\" href=\"#ip\">ip</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#lockdep_set_current_reclaim_state\">lockdep_set_current_reclaim_state</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"extern void <a class=\"id\" href=\"#lockdep_clear_current_reclaim_state\">lockdep_clear_current_reclaim_state</a>(void);", 
"extern void <a class=\"id\" href=\"#lockdep_trace_alloc\">lockdep_trace_alloc</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_LOCKDEP\">INIT_LOCKDEP</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#lockdep_recursion\">lockdep_recursion</a> = 0, .<a class=\"id\" href=\"#lockdep_reclaim_gfp\">lockdep_reclaim_gfp</a> = 0,", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_depth\">lockdep_depth</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#debug_locks\">debug_locks</a> ? (<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#lockdep_depth\">lockdep_depth</a> : 0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_assert_held\">lockdep_assert_held</a>(<a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#debug_locks\">debug_locks</a> && !<a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(<a class=\"id\" href=\"#l\">l</a>))", 
"", 
"#else <span class=\"comment\">/* !LOCKDEP */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#lockdep_off\">lockdep_off</a>(void)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#lockdep_on\">lockdep_on</a>(void)", 
"{", 
"}", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_release\">lock_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_set_class\">lock_set_class</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_set_subclass\">lock_set_subclass</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_set_current_reclaim_state\">lockdep_set_current_reclaim_state</a>(<a class=\"id\" href=\"#g\">g</a>)<span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_clear_current_reclaim_state\">lockdep_clear_current_reclaim_state</a>()<span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_trace_alloc\">lockdep_trace_alloc</a>(<a class=\"id\" href=\"#g\">g</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_init\">lockdep_init</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_info\">lockdep_info</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#sub\">sub</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>do { (void)(<a class=\"id\" href=\"#name\">name</a>); (void)(<a class=\"id\" href=\"#key\">key</a>); } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#key\">key</a>)<span class=\"ts\"/><span class=\"ts\"/>do { (void)(<a class=\"id\" href=\"#key\">key</a>); } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_set_class_and_name\">lockdep_set_class_and_name</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#name\">name</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>do { (void)(<a class=\"id\" href=\"#key\">key</a>); (void)(<a class=\"id\" href=\"#name\">name</a>); } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_set_class_and_subclass\">lockdep_set_class_and_subclass</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#sub\">sub</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>do { (void)(<a class=\"id\" href=\"#key\">key</a>); } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_set_subclass\">lockdep_set_subclass</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#sub\">sub</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_set_novalidate_class\">lockdep_set_novalidate_class</a>(<a class=\"id\" href=\"#lock\">lock</a>) do { } while (0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We don't define lockdep_match_class() and lockdep_match_key() for !LOCKDEP</span>", 
"<span class=\"comment\"> * case since the result is not well defined and the caller should rather</span>", 
"<span class=\"comment\"> * #ifdef the call himself.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_LOCKDEP\">INIT_LOCKDEP</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_reset\">lockdep_reset</a>()<span class=\"ts\"/><span class=\"ts\"/>do { <a class=\"id\" href=\"#debug_locks\">debug_locks</a> = 1; } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_free_key_range\">lockdep_free_key_range</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>)<span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_sys_exit\">lockdep_sys_exit</a>() <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The class key takes no space if lockdep is disabled:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> { };", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_depth\">lockdep_depth</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/>(0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lockdep_assert_held\">lockdep_assert_held</a>(<a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !LOCKDEP */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCK_STAT\">CONFIG_LOCK_STAT</a>", 
"", 
"extern void <a class=\"id\" href=\"#lock_contended\">lock_contended</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *<a class=\"id\" href=\"#lock\">lock</a>, unsigned long <a class=\"id\" href=\"#ip\">ip</a>);", 
"extern void <a class=\"id\" href=\"#lock_acquired\">lock_acquired</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *<a class=\"id\" href=\"#lock\">lock</a>, unsigned long <a class=\"id\" href=\"#ip\">ip</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_CONTENDED\">LOCK_CONTENDED</a>(<a class=\"id\" href=\"#_lock\">_lock</a>, <a class=\"id\" href=\"#try\">try</a>, <a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#try\">try</a>(<a class=\"id\" href=\"#_lock\">_lock</a>)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_contended\">lock_contended</a>(&amp;(<a class=\"id\" href=\"#_lock\">_lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>(<a class=\"id\" href=\"#_lock\">_lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_acquired\">lock_acquired</a>(&amp;(<a class=\"id\" href=\"#_lock\">_lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#else <span class=\"comment\">/* CONFIG_LOCK_STAT */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_contended\">lock_contended</a>(<a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>, <a class=\"id\" href=\"#ip\">ip</a>) do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_acquired\">lock_acquired</a>(<a class=\"id\" href=\"#lockdep_map\">lockdep_map</a>, <a class=\"id\" href=\"#ip\">ip</a>) do {} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_CONTENDED\">LOCK_CONTENDED</a>(<a class=\"id\" href=\"#_lock\">_lock</a>, <a class=\"id\" href=\"#try\">try</a>, <a class=\"id\" href=\"#lock\">lock</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>(<a class=\"id\" href=\"#_lock\">_lock</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_LOCK_STAT */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On lockdep we dont want the hand-coded irq-enable of</span>", 
"<span class=\"comment\"> * _raw_*_lock_flags() code, because lockdep assumes</span>", 
"<span class=\"comment\"> * that interrupts are not re-enabled during lock-acquire:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_CONTENDED_FLAGS\">LOCK_CONTENDED_FLAGS</a>(<a class=\"id\" href=\"#_lock\">_lock</a>, <a class=\"id\" href=\"#try\">try</a>, <a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#lockfl\">lockfl</a>, <a class=\"id\" href=\"#flags\">flags</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LOCK_CONTENDED\">LOCK_CONTENDED</a>((<a class=\"id\" href=\"#_lock\">_lock</a>), (<a class=\"id\" href=\"#try\">try</a>), (<a class=\"id\" href=\"#lock\">lock</a>))", 
"", 
"#else <span class=\"comment\">/* CONFIG_LOCKDEP */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_CONTENDED_FLAGS\">LOCK_CONTENDED_FLAGS</a>(<a class=\"id\" href=\"#_lock\">_lock</a>, <a class=\"id\" href=\"#try\">try</a>, <a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#lockfl\">lockfl</a>, <a class=\"id\" href=\"#flags\">flags</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockfl\">lockfl</a>((<a class=\"id\" href=\"#_lock\">_lock</a>), (<a class=\"id\" href=\"#flags\">flags</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_LOCKDEP */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_HARDIRQS\">CONFIG_GENERIC_HARDIRQS</a>", 
"extern void <a class=\"id\" href=\"#early_init_irq_lock_class\">early_init_irq_lock_class</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#early_init_irq_lock_class\">early_init_irq_lock_class</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACE_IRQFLAGS\">CONFIG_TRACE_IRQFLAGS</a>", 
"extern void <a class=\"id\" href=\"#early_boot_irqs_off\">early_boot_irqs_off</a>(void);", 
"extern void <a class=\"id\" href=\"#early_boot_irqs_on\">early_boot_irqs_on</a>(void);", 
"extern void <a class=\"id\" href=\"#print_irqtrace_events\">print_irqtrace_events</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#early_boot_irqs_off\">early_boot_irqs_off</a>(void)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#early_boot_irqs_on\">early_boot_irqs_on</a>(void)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#print_irqtrace_events\">print_irqtrace_events</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For trivial one-depth nesting of a lock-class, the following</span>", 
"<span class=\"comment\"> * global define can be used. (Subsystems with multiple levels</span>", 
"<span class=\"comment\"> * of nesting should define their own lock-nesting subclasses.)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map the dependency ops to NOP or to real lockdep ops, depending</span>", 
"<span class=\"comment\"> * on the per lock-class debug mode:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_acquire\">spin_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 0, 2, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_acquire_nest\">spin_acquire_nest</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 0, 2, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"# else", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_acquire\">spin_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 0, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_acquire_nest\">spin_acquire_nest</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 0, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_release\">spin_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_release\">lock_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_acquire\">spin_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_release\">spin_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwlock_acquire\">rwlock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 0, 2, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwlock_acquire_read\">rwlock_acquire_read</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 2, 2, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"# else", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwlock_acquire\">rwlock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 0, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwlock_acquire_read\">rwlock_acquire_read</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 2, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwlock_release\">rwlock_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_release\">lock_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwlock_acquire\">rwlock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwlock_acquire_read\">rwlock_acquire_read</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwlock_release\">rwlock_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_acquire\">mutex_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 0, 2, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"# else", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_acquire\">mutex_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 0, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_release\">mutex_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_release\">lock_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_acquire\">mutex_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_release\">mutex_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwsem_acquire\">rwsem_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 0, 2, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwsem_acquire_read\">rwsem_acquire_read</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 1, 2, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"# else", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwsem_acquire\">rwsem_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 0, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwsem_acquire_read\">rwsem_acquire_read</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, 1, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwsem_release\">rwsem_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_release\">lock_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwsem_acquire\">rwsem_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwsem_acquire_read\">rwsem_acquire_read</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rwsem_release\">rwsem_release</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_map_acquire\">lock_map_acquire</a>(<a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, 0, 0, 0, 2, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>)", 
"# else", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_map_acquire\">lock_map_acquire</a>(<a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(<a class=\"id\" href=\"#l\">l</a>, 0, 0, 0, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>)", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_map_release\">lock_map_release</a>(<a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_release\">lock_release</a>(<a class=\"id\" href=\"#l\">l</a>, 1, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_map_acquire\">lock_map_acquire</a>(<a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lock_map_release\">lock_map_release</a>(<a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#might_lock\">might_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typecheck\">typecheck</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *, &amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, 0, 0, 0, 2, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_release\">lock_release</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, 0, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#might_lock_read\">might_lock_read</a>(<a class=\"id\" href=\"#lock\">lock</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typecheck\">typecheck</a>(struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> *, &amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, 0, 0, 1, 2, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_release\">lock_release</a>(&amp;(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, 0, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#might_lock\">might_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>) do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#might_lock_read\">might_lock_read</a>(<a class=\"id\" href=\"#lock\">lock</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_RCU\">CONFIG_PROVE_RCU</a>", 
"extern void <a class=\"id\" href=\"#lockdep_rcu_dereference\">lockdep_rcu_dereference</a>(const char *<a class=\"id\" href=\"#file\">file</a>, const int <a class=\"id\" href=\"#line\">line</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_LOCKDEP_H */</span>", 
];
xr_frag_insert('l/5b/2abc5b2f8940a037c8bfeb0ea5e525e1c29840.xr', __xr_tmp);
