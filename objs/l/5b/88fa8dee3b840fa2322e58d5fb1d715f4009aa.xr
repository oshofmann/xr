var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_PID_H\">_LINUX_PID_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_PID_H\">_LINUX_PID_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"enum <a class=\"id\" href=\"#pid_type\">pid_type</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PIDTYPE_SID\">PIDTYPE_SID</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PIDTYPE_MAX\">PIDTYPE_MAX</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * What is struct pid?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A struct pid is the kernel's internal notion of a process identifier.</span>", 
"<span class=\"comment\"> * It refers to individual tasks, process groups, and sessions.  While</span>", 
"<span class=\"comment\"> * there are processes attached to it the struct pid lives in a hash</span>", 
"<span class=\"comment\"> * table, so it and then the processes that it refers to can be found</span>", 
"<span class=\"comment\"> * quickly from the numeric pid value.  The attached processes may be</span>", 
"<span class=\"comment\"> * quickly accessed by following pointers from struct pid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Storing pid_t values in the kernel and refering to them later has a</span>", 
"<span class=\"comment\"> * problem.  The process originally with that pid may have exited and the</span>", 
"<span class=\"comment\"> * pid allocator wrapped, and another process could have come along</span>", 
"<span class=\"comment\"> * and been assigned that pid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Referring to user space processes by holding a reference to struct</span>", 
"<span class=\"comment\"> * task_struct has a problem.  When the user space process exits</span>", 
"<span class=\"comment\"> * the now useless task_struct is still kept.  A task_struct plus a</span>", 
"<span class=\"comment\"> * stack consumes around 10K of low kernel memory.  More precisely</span>", 
"<span class=\"comment\"> * this is THREAD_SIZE + sizeof(struct task_struct).  By comparison</span>", 
"<span class=\"comment\"> * a struct pid is about 64 bytes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Holding a reference to struct pid solves both of these problems.</span>", 
"<span class=\"comment\"> * It is small so holding a reference does not consume a lot of</span>", 
"<span class=\"comment\"> * resources, and since a new struct pid is allocated when the numeric pid</span>", 
"<span class=\"comment\"> * value is reused (when pids wrap around) we don't mistakenly refer to new</span>", 
"<span class=\"comment\"> * processes.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * struct upid is used to get the id of the struct pid, as it is</span>", 
"<span class=\"comment\"> * seen in particular namespace. Later the struct pid is found with</span>", 
"<span class=\"comment\"> * find_pid_ns() using the int nr and struct pid_namespace *ns.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#upid\">upid</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Try to keep pid_chain in the same cacheline as nr for find_vpid */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#pid_chain\">pid_chain</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pid\">pid</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* lists of tasks that use this pid */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#tasks\">tasks</a>[<a class=\"id\" href=\"#PIDTYPE_MAX\">PIDTYPE_MAX</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#upid\">upid</a> <a class=\"id\" href=\"#numbers\">numbers</a>[1];", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#pid\">pid</a> <a class=\"id\" href=\"#init_struct_pid\">init_struct_pid</a>;", 
"", 
"struct <a class=\"id\" href=\"#pid_link\">pid_link</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#get_pid\">get_pid</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#put_pid\">put_pid</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>);", 
"extern struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#pid_task\">pid_task</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a>);", 
"extern struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#get_pid_task\">get_pid_task</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#get_task_pid\">get_task_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * attach_pid() and detach_pid() must be called with the tasklist_lock</span>", 
"<span class=\"comment\"> * write-held.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#attach_pid\">attach_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>);", 
"extern void <a class=\"id\" href=\"#detach_pid\">detach_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a>);", 
"extern void <a class=\"id\" href=\"#change_pid\">change_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>);", 
"extern void <a class=\"id\" href=\"#transfer_pid\">transfer_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#old\">old</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> enum <a class=\"id\" href=\"#pid_type\">pid_type</a>);", 
"", 
"struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>;", 
"extern struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> <a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * look up a PID in the hash table. Must be called with the tasklist_lock</span>", 
"<span class=\"comment\"> * or rcu_read_lock() held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * find_pid_ns() finds the pid in the namespace specified</span>", 
"<span class=\"comment\"> * find_vpid() finr the pid by its virtual id, i.e. in the current namespace</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * see also find_task_by_vpid() set in include/linux/sched.h</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#find_pid_ns\">find_pid_ns</a>(int <a class=\"id\" href=\"#nr\">nr</a>, struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"extern struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#find_vpid\">find_vpid</a>(int <a class=\"id\" href=\"#nr\">nr</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lookup a PID in the hash table, and return with it's count elevated.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#find_get_pid\">find_get_pid</a>(int <a class=\"id\" href=\"#nr\">nr</a>);", 
"extern struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#find_ge_pid\">find_ge_pid</a>(int <a class=\"id\" href=\"#nr\">nr</a>, struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *);", 
"int <a class=\"id\" href=\"#next_pidmap\">next_pidmap</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#pid_ns\">pid_ns</a>, int <a class=\"id\" href=\"#last\">last</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#alloc_pid\">alloc_pid</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"extern void <a class=\"id\" href=\"#free_pid\">free_pid</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ns_of_pid() returns the pid namespace in which the specified pid was</span>", 
"<span class=\"comment\"> * allocated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>ns_of_pid() is expected to be called for a process (task) that has</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>an attached 'struct pid' (see attach_pid(), detach_pid()) i.e @pid</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>is expected to be non-NULL. If @pid is NULL, caller should handle</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>the resulting NULL pid-ns.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns_of_pid\">ns_of_pid</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a>[<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#level\">level</a>].<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the helpers to get the pid's id seen from different namespaces</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * pid_nr()    : global id, i.e. the id seen from the init namespace;</span>", 
"<span class=\"comment\"> * pid_vnr()   : virtual id, i.e. the id seen from the pid namespace of</span>", 
"<span class=\"comment\"> *               current.</span>", 
"<span class=\"comment\"> * pid_nr_ns() : id seen from the ns specified.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * see also task_xid_nr() etc in include/linux/sched.h</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid_nr\">pid_nr</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a>[0].<a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid_nr_ns\">pid_nr_ns</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid_vnr\">pid_vnr</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_each_pid_task\">do_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos___\">pos___</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#pid\">pid</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>((<a class=\"id\" href=\"#task\">task</a>), <a class=\"id\" href=\"#pos___\">pos___</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;(<a class=\"id\" href=\"#pid\">pid</a>)-><a class=\"id\" href=\"#tasks\">tasks</a>[<a class=\"id\" href=\"#type\">type</a>], <a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#node\">node</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Both old and new leaders may be attached to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the same pid in the middle of de_thread().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#while_each_pid_task\">while_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_each_pid_thread\">do_each_pid_thread</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_pid_task\">do_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#task\">task</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tg___\">tg___</a> = <a class=\"id\" href=\"#task\">task</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#while_each_pid_thread\">while_each_pid_thread</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#tg___\">tg___</a>, <a class=\"id\" href=\"#task\">task</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#tg___\">tg___</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_pid_task\">while_each_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#task\">task</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_PID_H */</span>", 
];
xr_frag_insert('l/5b/88fa8dee3b840fa2322e58d5fb1d715f4009aa.xr', __xr_tmp);
