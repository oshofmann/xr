var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/kernel/irq/autoprobe.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1992, 1998-2004 Linus Torvalds, Ingo Molnar</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains the interrupt probing code and driver APIs.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#async\">async</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internals.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Autodetection depends on the fact that any interrupt that</span>", 
"<span class=\"comment\"> * comes in on to an unassigned handler will get stuck with</span>", 
"<span class=\"comment\"> * \"IRQ_WAITING\" cleared and the interrupt disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#probing_active\">probing_active</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>probe_irq_on<span class=\"ts\"/>- begin an interrupt autodetect</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Commence probing for an interrupt. The interrupts are scanned</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and a mask of potential interrupt lines is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#probe_irq_on\">probe_irq_on</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * quiesce the kernel, or at least the asynchronous portion</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_synchronize_full\">async_synchronize_full</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#probing_active\">probing_active</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * something may have generated an irq long ago and we want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * flush such a longstanding irq before considering it as spurious.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_irq_desc_reverse\">for_each_irq_desc_reverse</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#desc\">desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#action\">action</a> && !(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_NOPROBE\">IRQ_NOPROBE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * An old-style architecture might still have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the handle_bad_irq handler there:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#compat_irq_chip_set_default_handler\">compat_irq_chip_set_default_handler</a>(<a class=\"id\" href=\"#desc\">desc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Some chips need to know about probing in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * progress:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#set_type\">set_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#set_type\">set_type</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#IRQ_TYPE_PROBE\">IRQ_TYPE_PROBE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#startup\">startup</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for longstanding interrupts to trigger. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(20);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enable any unassigned irqs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (we must startup again here because if a longstanding irq</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * happened in the previous stage, it may have masked itself)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_irq_desc_reverse\">for_each_irq_desc_reverse</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#desc\">desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#action\">action</a> && !(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_NOPROBE\">IRQ_NOPROBE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#IRQ_AUTODETECT\">IRQ_AUTODETECT</a> | <a class=\"id\" href=\"#IRQ_WAITING\">IRQ_WAITING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#startup\">startup</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#IRQ_PENDING\">IRQ_PENDING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for spurious interrupts to trigger</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(100);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now filter out any obviously spurious interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_irq_desc\">for_each_irq_desc</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#desc\">desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_AUTODETECT\">IRQ_AUTODETECT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It triggered already - consider it spurious. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_WAITING\">IRQ_WAITING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#status\">status</a> &amp; ~<a class=\"id\" href=\"#IRQ_AUTODETECT\">IRQ_AUTODETECT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#shutdown\">shutdown</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; 32)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= 1 << <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#probe_irq_on\">probe_irq_on</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>probe_irq_mask - scan a bitmap of interrupt lines</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@val:<span class=\"ts\"/>mask of interrupts to consider</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Scan the interrupt lines and return a bitmap of active</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>autodetect interrupts. The interrupt probe logic state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is then returned to its previous value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: we need to scan all the irq's even though we will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>only return autodetect irq numbers - just so that we reset</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>them all to a known state.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#probe_irq_mask\">probe_irq_mask</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#mask\">mask</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_irq_desc\">for_each_irq_desc</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#desc\">desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_AUTODETECT\">IRQ_AUTODETECT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; 16 && !(<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_WAITING\">IRQ_WAITING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= 1 << <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#status\">status</a> &amp; ~<a class=\"id\" href=\"#IRQ_AUTODETECT\">IRQ_AUTODETECT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#shutdown\">shutdown</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#probing_active\">probing_active</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#probe_irq_mask\">probe_irq_mask</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>probe_irq_off<span class=\"ts\"/>- end an interrupt autodetect</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@val: mask of potential interrupts (unused)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Scans the unused interrupt lines and returns the line which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>appears to have triggered the interrupt. If no interrupt was</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>found then zero is returned. If more than one interrupt is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>found then minus the first candidate is returned to indicate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>their is doubt.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The interrupt probe logic state is returned to its previous</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>BUGS: When used in a module (which arguably shouldn't happen)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>nothing prevents two IRQ probe callers from overlapping. The</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>results of this are non-optimal.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#probe_irq_off\">probe_irq_off</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#irq_found\">irq_found</a> = 0, <a class=\"id\" href=\"#nr_of_irqs\">nr_of_irqs</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_irq_desc\">for_each_irq_desc</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#desc\">desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_AUTODETECT\">IRQ_AUTODETECT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_WAITING\">IRQ_WAITING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_of_irqs\">nr_of_irqs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_found\">irq_found</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_of_irqs\">nr_of_irqs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#status\">status</a> &amp; ~<a class=\"id\" href=\"#IRQ_AUTODETECT\">IRQ_AUTODETECT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#shutdown\">shutdown</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#probing_active\">probing_active</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_of_irqs\">nr_of_irqs</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_found\">irq_found</a> = -<a class=\"id\" href=\"#irq_found\">irq_found</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#irq_found\">irq_found</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#probe_irq_off\">probe_irq_off</a>);", 
"", 
];
xr_frag_insert('l/5b/cc38035a622a4330349afd3183c4442a6cf180.xr', __xr_tmp);
