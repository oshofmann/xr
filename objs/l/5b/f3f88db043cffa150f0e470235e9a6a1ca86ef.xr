var __xr_tmp = [
"<span class=\"comment\">/* K8 NUMA support */</span>", 
"<span class=\"comment\">/* Copyright 2002,2003 by Andi Kleen, SuSE Labs */</span>", 
"<span class=\"comment\">/* 2.5 Version loosely based on the NUMAQ Code by Pat Gaughen. */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_MMZONE_64_H\">_ASM_X86_MMZONE_64_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_MMZONE_64_H\">_ASM_X86_MMZONE_64_H</a>", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmdebug\">mmdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Simple perfect hash to map physical addresses to node numbers */</span>", 
"struct <a class=\"id\" href=\"#memnode\">memnode</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mapsize\">mapsize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s16\">s16</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s16\">s16</a> <a class=\"id\" href=\"#embedded_map\">embedded_map</a>[64 - 8];", 
"} <a class=\"id\" href=\"#____cacheline_aligned\">____cacheline_aligned</a>; <span class=\"comment\">/* total size = 128 bytes */</span>", 
"extern struct <a class=\"id\" href=\"#memnode\">memnode</a> <a class=\"id\" href=\"#memnode\">memnode</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#memnode_shift\">memnode_shift</a> <a class=\"id\" href=\"#memnode\">memnode</a>.<a class=\"id\" href=\"#shift\">shift</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#memnodemap\">memnodemap</a> <a class=\"id\" href=\"#memnode\">memnode</a>.<a class=\"id\" href=\"#map\">map</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#memnodemapsize\">memnodemapsize</a> <a class=\"id\" href=\"#memnode\">memnode</a>.<a class=\"id\" href=\"#mapsize\">mapsize</a>", 
"", 
"extern struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#node_data\">node_data</a>[];", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#pure\">pure</a>)) int <a class=\"id\" href=\"#phys_to_nid\">phys_to_nid</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VIRTUAL_BUG_ON\">VIRTUAL_BUG_ON</a>(!<a class=\"id\" href=\"#memnodemap\">memnodemap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#memnodemap\">memnodemap</a>[<a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#memnode_shift\">memnode_shift</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VIRTUAL_BUG_ON\">VIRTUAL_BUG_ON</a>(<a class=\"id\" href=\"#nid\">nid</a> >= <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a> || !<a class=\"id\" href=\"#node_data\">node_data</a>[<a class=\"id\" href=\"#nid\">nid</a>]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nid\">nid</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#node_data\">node_data</a>[<a class=\"id\" href=\"#nid\">nid</a>])", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>(<a class=\"id\" href=\"#nid\">nid</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#node_end_pfn\">node_end_pfn</a>(<a class=\"id\" href=\"#nid\">nid</a>)       (<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> +<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_MMZONE_64_H */</span>", 
];
xr_frag_insert('l/5b/f3f88db043cffa150f0e470235e9a6a1ca86ef.xr', __xr_tmp);
