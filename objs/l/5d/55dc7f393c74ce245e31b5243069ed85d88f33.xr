var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_RMAP_H\">_LINUX_RMAP_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_RMAP_H\">_LINUX_RMAP_H</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Declarations for Reverse Mapping functions in mm/rmap.c</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memcontrol\">memcontrol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The anon_vma heads a list of private \"related\" vmas, to scan if</span>", 
"<span class=\"comment\"> * an anonymous page pointing to this anon_vma needs to be unmapped:</span>", 
"<span class=\"comment\"> * the vmas on the list will be related by forking, or by splitting.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since vmas come and go as they are split and merged (particularly</span>", 
"<span class=\"comment\"> * in mprotect), the mapping field of an anonymous page cannot point</span>", 
"<span class=\"comment\"> * directly to a vma: instead it points to an anon_vma, on whose list</span>", 
"<span class=\"comment\"> * the related vmas can be easily linked or unlinked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After unlinking the last vma on the list, we must garbage collect</span>", 
"<span class=\"comment\"> * the anon_vma object itself: we're guaranteed no page can be</span>", 
"<span class=\"comment\"> * pointing to this anon_vma once its vma list is empty.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;<span class=\"ts\"/><span class=\"comment\">/* Serialize access to vma list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#root\">root</a>;<span class=\"ts\"/><span class=\"comment\">/* Root of this anon_vma tree */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_KSM\">CONFIG_KSM</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MIGRATION\">CONFIG_MIGRATION</a>)", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The external_refcount is taken by either KSM or page migration</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to take a reference to an anon_vma when there is no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * guarantee that the vma of page tables will exist for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the duration of the operation. A caller that takes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the reference is responsible for clearing up the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anon_vma if they are the last user on release</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#external_refcount\">external_refcount</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: the LSB of the head.next is set by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mm_take_all_locks() _after_ taking the above lock. So the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * head must only be read/written after taking the above lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to be sure to see a valid next pointer. The LSB bit itself</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is serialized by a system wide lock only visible to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mm_take_all_locks() (mm_all_locks_mutex).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#head\">head</a>;<span class=\"ts\"/><span class=\"comment\">/* Chain of private \"related\" vmas */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The copy-on-write semantics of fork mean that an anon_vma</span>", 
"<span class=\"comment\"> * can become associated with multiple processes. Furthermore,</span>", 
"<span class=\"comment\"> * each child process will have its own anon_vma, where new</span>", 
"<span class=\"comment\"> * pages for that process are instantiated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure allows us to find the anon_vmas associated</span>", 
"<span class=\"comment\"> * with a VMA, or the VMAs associated with an anon_vma.</span>", 
"<span class=\"comment\"> * The \"same_vma\" list contains the anon_vma_chains linking</span>", 
"<span class=\"comment\"> * all the anon_vmas associated with this VMA.</span>", 
"<span class=\"comment\"> * The \"same_anon_vma\" list contains the anon_vma_chains</span>", 
"<span class=\"comment\"> * which link all the VMAs associated with this anon_vma.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#same_vma\">same_vma</a>;   <span class=\"comment\">/* locked by mmap_sem &amp; page_table_lock */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#same_anon_vma\">same_anon_vma</a>;<span class=\"ts\"/><span class=\"comment\">/* locked by anon_vma-&gt;lock */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_KSM\">CONFIG_KSM</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MIGRATION\">CONFIG_MIGRATION</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#anonvma_external_refcount_init\">anonvma_external_refcount_init</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#external_refcount\">external_refcount</a>, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#anonvma_external_refcount\">anonvma_external_refcount</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#external_refcount\">external_refcount</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#get_anon_vma\">get_anon_vma</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#external_refcount\">external_refcount</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#drop_anon_vma\">drop_anon_vma</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#anonvma_external_refcount_init\">anonvma_external_refcount_init</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#anonvma_external_refcount\">anonvma_external_refcount</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#get_anon_vma\">get_anon_vma</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#drop_anon_vma\">drop_anon_vma</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_KSM */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#page_anon_vma\">page_anon_vma</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (((unsigned long)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> &amp; <a class=\"id\" href=\"#PAGE_MAPPING_FLAGS\">PAGE_MAPPING_FLAGS</a>) !=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PAGE_MAPPING_ANON\">PAGE_MAPPING_ANON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_rmapping\">page_rmapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#vma_lock_anon_vma\">vma_lock_anon_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#vma_unlock_anon_vma\">vma_unlock_anon_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#anon_vma_lock\">anon_vma_lock</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#anon_vma_unlock\">anon_vma_unlock</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * anon_vma helper functions.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#anon_vma_init\">anon_vma_init</a>(void);<span class=\"ts\"/><span class=\"comment\">/* create anon_vma_cachep */</span>", 
"int  <a class=\"id\" href=\"#anon_vma_prepare\">anon_vma_prepare</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"void <a class=\"id\" href=\"#unlink_anon_vmas\">unlink_anon_vmas</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"int <a class=\"id\" href=\"#anon_vma_clone\">anon_vma_clone</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"int <a class=\"id\" href=\"#anon_vma_fork\">anon_vma_fork</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"void <a class=\"id\" href=\"#__anon_vma_link\">__anon_vma_link</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"void <a class=\"id\" href=\"#anon_vma_free\">anon_vma_free</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#anon_vma_merge\">anon_vma_merge</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> != <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlink_anon_vmas\">unlink_anon_vmas</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rmap interfaces called when adding or removing pte of page</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#page_move_anon_rmap\">page_move_anon_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, unsigned long);", 
"void <a class=\"id\" href=\"#page_add_anon_rmap\">page_add_anon_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, unsigned long);", 
"void <a class=\"id\" href=\"#do_page_add_anon_rmap\">do_page_add_anon_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long, int);", 
"void <a class=\"id\" href=\"#page_add_new_anon_rmap\">page_add_new_anon_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, unsigned long);", 
"void <a class=\"id\" href=\"#page_add_file_rmap\">page_add_file_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *);", 
"void <a class=\"id\" href=\"#page_remove_rmap\">page_remove_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *);", 
"", 
"void <a class=\"id\" href=\"#hugepage_add_anon_rmap\">hugepage_add_anon_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long);", 
"void <a class=\"id\" href=\"#hugepage_add_new_anon_rmap\">hugepage_add_new_anon_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#page_dup_rmap\">page_dup_rmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_mapcount\">_mapcount</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from mm/vmscan.c to handle paging out</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#page_referenced\">page_referenced</a>(struct <a class=\"id\" href=\"#page\">page</a> *, int <a class=\"id\" href=\"#is_locked\">is_locked</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#cnt\">cnt</a>, unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"int <a class=\"id\" href=\"#page_referenced_one\">page_referenced_one</a>(struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, unsigned int *<a class=\"id\" href=\"#mapcount\">mapcount</a>, unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"", 
"enum <a class=\"id\" href=\"#ttu_flags\">ttu_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TTU_UNMAP\">TTU_UNMAP</a> = 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unmap mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TTU_MIGRATION\">TTU_MIGRATION</a> = 1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* migration mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TTU_MUNLOCK\">TTU_MUNLOCK</a> = 2,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* munlock mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TTU_ACTION_MASK\">TTU_ACTION_MASK</a> = 0xff,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TTU_IGNORE_MLOCK\">TTU_IGNORE_MLOCK</a> = (1 << 8),<span class=\"ts\"/><span class=\"comment\">/* ignore mlock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TTU_IGNORE_ACCESS\">TTU_IGNORE_ACCESS</a> = (1 << 9),<span class=\"ts\"/><span class=\"comment\">/* don't age */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TTU_IGNORE_HWPOISON\">TTU_IGNORE_HWPOISON</a> = (1 << 10),<span class=\"comment\">/* corrupted page is recoverable */</span>", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TTU_ACTION\">TTU_ACTION</a>(<a class=\"id\" href=\"#x\">x</a>) ((<a class=\"id\" href=\"#x\">x</a>) &amp; <a class=\"id\" href=\"#TTU_ACTION_MASK\">TTU_ACTION_MASK</a>)", 
"", 
"int <a class=\"id\" href=\"#try_to_unmap\">try_to_unmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *, enum <a class=\"id\" href=\"#ttu_flags\">ttu_flags</a> <a class=\"id\" href=\"#flags\">flags</a>);", 
"int <a class=\"id\" href=\"#try_to_unmap_one\">try_to_unmap_one</a>(struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, enum <a class=\"id\" href=\"#ttu_flags\">ttu_flags</a> <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from mm/filemap_xip.c to unmap empty zero page</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#page_check_address\">page_check_address</a>(struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> **, int);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Used by swapoff to help locate where page is expected in vma.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#page_address_in_vma\">page_address_in_vma</a>(struct <a class=\"id\" href=\"#page\">page</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cleans the PTEs of shared mappings.</span>", 
"<span class=\"comment\"> * (and since clean PTEs should also be readonly, write protects them too)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns the number of cleaned PTEs.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#page_mkclean\">page_mkclean</a>(struct <a class=\"id\" href=\"#page\">page</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * called in munlock()/munmap() path to check for other vmas holding</span>", 
"<span class=\"comment\"> * the page mlocked.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#try_to_munlock\">try_to_munlock</a>(struct <a class=\"id\" href=\"#page\">page</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called by memory-failure.c to kill processes.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#page_lock_anon_vma\">page_lock_anon_vma</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"void <a class=\"id\" href=\"#page_unlock_anon_vma\">page_unlock_anon_vma</a>(struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"int <a class=\"id\" href=\"#page_mapped_in_vma\">page_mapped_in_vma</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called by migrate.c to remove migration ptes, but might be used more later.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#rmap_walk\">rmap_walk</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int (*<a class=\"id\" href=\"#rmap_one\">rmap_one</a>)(struct <a class=\"id\" href=\"#page\">page</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, unsigned long, void *), void *<a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* !CONFIG_MMU */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#anon_vma_init\">anon_vma_init</a>()<span class=\"ts\"/><span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#anon_vma_prepare\">anon_vma_prepare</a>(<a class=\"id\" href=\"#vma\">vma</a>)<span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#anon_vma_link\">anon_vma_link</a>(<a class=\"id\" href=\"#vma\">vma</a>)<span class=\"ts\"/>do {} while (0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_referenced\">page_referenced</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#is_locked\">is_locked</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#cnt\">cnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#vm_flags\">vm_flags</a> = 0;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#try_to_unmap\">try_to_unmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#refs\">refs</a>) <a class=\"id\" href=\"#SWAP_FAIL\">SWAP_FAIL</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_mkclean\">page_mkclean</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_MMU */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return values of try_to_unmap</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SWAP_SUCCESS\">SWAP_SUCCESS</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SWAP_AGAIN\">SWAP_AGAIN</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SWAP_FAIL\">SWAP_FAIL</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SWAP_MLOCK\">SWAP_MLOCK</a><span class=\"ts\"/>3", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _LINUX_RMAP_H */</span>", 
];
xr_frag_insert('l/5d/55dc7f393c74ce245e31b5243069ed85d88f33.xr', __xr_tmp);
