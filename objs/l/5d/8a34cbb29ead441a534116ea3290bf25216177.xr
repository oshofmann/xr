var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/mm/memory_hotplug.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagevec\">pagevec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory\">memory</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory_hotplug\">memory_hotplug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#migrate\">migrate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page\">page</a>-<a class=\"id\" href=\"#isolation\">isolation</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pfn\">pfn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm_inline\">mm_inline</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#firmware\">firmware</a>-<a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"<span class=\"comment\">/* add this memory to iomem resource */</span>", 
"static struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#register_memory_resource\">register_memory_resource</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#resource\">resource</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#res\">res</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#name\">name</a> = \"System RAM\";", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a> | <a class=\"id\" href=\"#IORESOURCE_BUSY\">IORESOURCE_BUSY</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request_resource\">request_resource</a>(&amp;<a class=\"id\" href=\"#iomem_resource\">iomem_resource</a>, <a class=\"id\" href=\"#res\">res</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"System RAM resource %llx - %llx cannot be added\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a>, (unsigned long long)<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#release_memory_resource\">release_memory_resource</a>(struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_resource\">release_resource</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG_SPARSE\">CONFIG_MEMORY_HOTPLUG_SPARSE</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_VMEMMAP\">CONFIG_SPARSEMEM_VMEMMAP</a>", 
"static void <a class=\"id\" href=\"#get_page_bootmem\">get_page_bootmem</a>(unsigned long <a class=\"id\" href=\"#info\">info</a>,  struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_mapcount\">_mapcount</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPagePrivate\">SetPagePrivate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>);", 
"}", 
"", 
"<span class=\"comment\">/* reference to __meminit __free_pages_bootmem is valid</span>", 
"<span class=\"comment\"> * so use __ref to tell modpost not to generate a warning */</span>", 
"void <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#put_page_bootmem\">put_page_bootmem</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_mapcount\">_mapcount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#type\">type</a> >= -1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_return\">atomic_dec_return</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPagePrivate\">ClearPagePrivate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_page_mapcount\">reset_page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_bootmem\">__free_pages_bootmem</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"}", 
"", 
"static void <a class=\"id\" href=\"#register_page_bootmem_info_section\">register_page_bootmem_info_section</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#usemap\">usemap</a>, <a class=\"id\" href=\"#mapsize\">mapsize</a>, <a class=\"id\" href=\"#section_nr\">section_nr</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, *<a class=\"id\" href=\"#memmap\">memmap</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#section_nr\">section_nr</a> = <a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#section_nr\">section_nr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get section's memmap address */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmap\">memmap</a> = <a class=\"id\" href=\"#sparse_decode_mem_map\">sparse_decode_mem_map</a>(<a class=\"id\" href=\"#ms\">ms</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a>, <a class=\"id\" href=\"#section_nr\">section_nr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get page for the memmap's phys address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX: need more consideration for sparse_vmemmap...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#memmap\">memmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapsize\">mapsize</a> = sizeof(struct <a class=\"id\" href=\"#page\">page</a>) * <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapsize\">mapsize</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#mapsize\">mapsize</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* remember memmap's page */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mapsize\">mapsize</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#page\">page</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page_bootmem\">get_page_bootmem</a>(<a class=\"id\" href=\"#section_nr\">section_nr</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#SECTION_INFO\">SECTION_INFO</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usemap\">usemap</a> = <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#section_nr\">section_nr</a>)-><a class=\"id\" href=\"#pageblock_flags\">pageblock_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#usemap\">usemap</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapsize\">mapsize</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#usemap_size\">usemap_size</a>()) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mapsize\">mapsize</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#page\">page</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page_bootmem\">get_page_bootmem</a>(<a class=\"id\" href=\"#section_nr\">section_nr</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MIX_SECTION_INFO\">MIX_SECTION_INFO</a>);", 
"", 
"}", 
"", 
"void <a class=\"id\" href=\"#register_page_bootmem_info_node\">register_page_bootmem_info_node</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(sizeof(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a>)) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#page\">page</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page_bootmem\">get_page_bootmem</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NODE_INFO\">NODE_INFO</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = &amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a>[0];", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#zone\">zone</a> &lt; <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a> - 1; <a class=\"id\" href=\"#zone\">zone</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#wait_table\">wait_table</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#wait_table_hash_nr_entries\">wait_table_hash_nr_entries</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>* sizeof(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#wait_table\">wait_table</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#page\">page</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page_bootmem\">get_page_bootmem</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NODE_INFO\">NODE_INFO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#pfn\">pfn</a> + <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* register_section info */</span>", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_page_bootmem_info_section\">register_page_bootmem_info_section</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_SPARSEMEM_VMEMMAP */</span>", 
"", 
"static void <a class=\"id\" href=\"#grow_zone_span\">grow_zone_span</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_zone_end_pfn\">old_zone_end_pfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_span_writelock\">zone_span_writelock</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_zone_end_pfn\">old_zone_end_pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &lt; <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#old_zone_end_pfn\">old_zone_end_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_span_writeunlock\">zone_span_writeunlock</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#grow_pgdat_span\">grow_pgdat_span</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_pgdat_end_pfn\">old_pgdat_end_pfn</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> + <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &lt; <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#old_pgdat_end_pfn\">old_pgdat_end_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#__add_zone\">__add_zone</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zone_type\">zone_type</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_type\">zone_type</a> = <a class=\"id\" href=\"#zone\">zone</a> - <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#wait_table\">wait_table</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#init_currently_empty_zone\">init_currently_empty_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#MEMMAP_HOTPLUG\">MEMMAP_HOTPLUG</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat_resize_lock\">pgdat_resize_lock</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grow_zone_span\">grow_zone_span</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>, <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a> + <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grow_pgdat_span\">grow_pgdat_span</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>, <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a> + <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat_resize_unlock\">pgdat_resize_unlock</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmap_init_zone\">memmap_init_zone</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zone_type\">zone_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>, <a class=\"id\" href=\"#MEMMAP_HOTPLUG\">MEMMAP_HOTPLUG</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#__add_section\">__add_section</a>(int <a class=\"id\" href=\"#nid\">nid</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sparse_add_one_section\">sparse_add_one_section</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__add_zone\">__add_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_new_memory\">register_new_memory</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#__pfn_to_section\">__pfn_to_section</a>(<a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_VMEMMAP\">CONFIG_SPARSEMEM_VMEMMAP</a>", 
"static int <a class=\"id\" href=\"#__remove_section\">__remove_section</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX: Freeing memmap with vmemmap is not implement yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      This should be removed later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"}", 
"#else", 
"static int <a class=\"id\" href=\"#__remove_section\">__remove_section</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#valid_section\">valid_section</a>(<a class=\"id\" href=\"#ms\">ms</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#unregister_memory_section\">unregister_memory_section</a>(<a class=\"id\" href=\"#ms\">ms</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat_resize_lock\">pgdat_resize_lock</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sparse_remove_one_section\">sparse_remove_one_section</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#ms\">ms</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat_resize_unlock\">pgdat_resize_unlock</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reasonably generic function for adding memory.  It is</span>", 
"<span class=\"comment\"> * expected that archs that support memory hotplug will</span>", 
"<span class=\"comment\"> * call this function after deciding the zone to which to</span>", 
"<span class=\"comment\"> * add the new pages.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#__add_pages\">__add_pages</a>(int <a class=\"id\" href=\"#nid\">nid</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start_sec\">start_sec</a>, <a class=\"id\" href=\"#end_sec\">end_sec</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* during initialize mem_map, align hot-added range to section */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_sec\">start_sec</a> = <a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_sec\">end_sec</a> = <a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a> + <a class=\"id\" href=\"#nr_pages\">nr_pages</a> - 1);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#start_sec\">start_sec</a>; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#end_sec\">end_sec</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__add_section\">__add_section</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#i\">i</a> << <a class=\"id\" href=\"#PFN_SECTION_SHIFT\">PFN_SECTION_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * EEXIST is finally dealt with by ioresource collision</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * check. see add_memory() =&gt; register_memory_resource()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Warning will be printed if there is collision.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> && (<a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__add_pages\">__add_pages</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __remove_pages() - remove sections of pages from a zone</span>", 
"<span class=\"comment\"> * @zone: zone from which pages need to be removed</span>", 
"<span class=\"comment\"> * @phys_start_pfn: starting pageframe (must be aligned to start of a section)</span>", 
"<span class=\"comment\"> * @nr_pages: number of pages to remove (must be multiple of section size)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Generic helper function to remove section mappings and sysfs entries</span>", 
"<span class=\"comment\"> * for the section of the memory we are removing. Caller needs to make</span>", 
"<span class=\"comment\"> * sure that pages are marked reserved and zones are adjust properly by</span>", 
"<span class=\"comment\"> * calling offline_pages().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__remove_pages\">__remove_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sections_to_remove\">sections_to_remove</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can only remove entire sections</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a> &amp; ~<a class=\"id\" href=\"#PAGE_SECTION_MASK\">PAGE_SECTION_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a> % <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sections_to_remove\">sections_to_remove</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a> / <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sections_to_remove\">sections_to_remove</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#phys_start_pfn\">phys_start_pfn</a> + <a class=\"id\" href=\"#i\">i</a>*<a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_mem_region\">release_mem_region</a>(<a class=\"id\" href=\"#pfn\">pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__remove_section\">__remove_section</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#__pfn_to_section\">__pfn_to_section</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__remove_pages\">__remove_pages</a>);", 
"", 
"void <a class=\"id\" href=\"#online_page\">online_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#totalram_pages\">totalram_pages</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn\">pfn</a> >= <a class=\"id\" href=\"#num_physpages\">num_physpages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_physpages\">num_physpages</a> = <a class=\"id\" href=\"#pfn\">pfn</a> + 1;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totalhigh_pages\">totalhigh_pages</a>++;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FLATMEM\">CONFIG_FLATMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_mapnr\">max_mapnr</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#max_mapnr\">max_mapnr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPageReserved\">ClearPageReserved</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_page_count\">init_page_count</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#online_pages_range\">online_pages_range</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#onlined_pages\">onlined_pages</a> = *(unsigned long *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#online_page\">online_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#onlined_pages\">onlined_pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>*(unsigned long *)<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#onlined_pages\">onlined_pages</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"int <a class=\"id\" href=\"#online_pages\">online_pages</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#onlined_pages\">onlined_pages</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_zonelists_rebuild\">need_zonelists_rebuild</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_notify\">memory_notify</a> <a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#status_change_nid\">status_change_nid</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node_present_pages\">node_present_pages</a>(<a class=\"id\" href=\"#nid\">nid</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#status_change_nid\">status_change_nid</a> = <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#memory_notify\">memory_notify</a>(<a class=\"id\" href=\"#MEM_GOING_ONLINE\">MEM_GOING_ONLINE</a>, &amp;<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notifier_to_errno\">notifier_to_errno</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_notify\">memory_notify</a>(<a class=\"id\" href=\"#MEM_CANCEL_ONLINE\">MEM_CANCEL_ONLINE</a>, &amp;<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This doesn't need a lock to do pfn_to_page().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The section can't be removed here because of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * memory_block-&gt;state_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this zone is not populated, then it is not in zonelist.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This means the page allocator ignores this zone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So, zonelist must be updated after online.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#zonelists_mutex\">zonelists_mutex</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_zonelists_rebuild\">need_zonelists_rebuild</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#walk_system_ram_range\">walk_system_ram_range</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, &amp;<a class=\"id\" href=\"#onlined_pages\">onlined_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#online_pages_range\">online_pages_range</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#zonelists_mutex\">zonelists_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"online_pages %lx at %lx failed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_notify\">memory_notify</a>(<a class=\"id\" href=\"#MEM_CANCEL_ONLINE\">MEM_CANCEL_ONLINE</a>, &amp;<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a> += <a class=\"id\" href=\"#onlined_pages\">onlined_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_pgdat\">zone_pgdat</a>-><a class=\"id\" href=\"#node_present_pages\">node_present_pages</a> += <a class=\"id\" href=\"#onlined_pages\">onlined_pages</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_zonelists_rebuild\">need_zonelists_rebuild</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#build_all_zonelists\">build_all_zonelists</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_pcp_update\">zone_pcp_update</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#zonelists_mutex\">zonelists_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_per_zone_wmarks\">setup_per_zone_wmarks</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calculate_zone_inactive_ratio\">calculate_zone_inactive_ratio</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#onlined_pages\">onlined_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kswapd_run\">kswapd_run</a>(<a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set_state\">node_set_state</a>(<a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>), <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_total_pages\">vm_total_pages</a> = <a class=\"id\" href=\"#nr_free_pagecache_pages\">nr_free_pagecache_pages</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writeback_set_ratelimit\">writeback_set_ratelimit</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#onlined_pages\">onlined_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_notify\">memory_notify</a>(<a class=\"id\" href=\"#MEM_ONLINE\">MEM_ONLINE</a>, &amp;<a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MEMORY_HOTPLUG_SPARSE */</span>", 
"", 
"<span class=\"comment\">/* we are OK calling __meminit stuff here - we have CONFIG_MEMORY_HOTPLUG */</span>", 
"static <a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> <a class=\"id\" href=\"#__ref\">__ref</a> *<a class=\"id\" href=\"#hotadd_new_pgdat\">hotadd_new_pgdat</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zones_size\">zones_size</a>[<a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>] = {0};", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zholes_size\">zholes_size</a>[<a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>] = {0};", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#arch_alloc_nodedata\">arch_alloc_nodedata</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_refresh_nodedata\">arch_refresh_nodedata</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we can use NODE_DATA(nid) from here */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* init node's zones as empty zones, we don't have any present pages.*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_area_init_node\">free_area_init_node</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zones_size\">zones_size</a>, <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#zholes_size\">zholes_size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pgdat\">pgdat</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rollback_node_hotadd\">rollback_node_hotadd</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_refresh_nodedata\">arch_refresh_nodedata</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_free_nodedata\">arch_free_nodedata</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * called by cpu_up() to online a node without onlined memory.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mem_online_node\">mem_online_node</a>(int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a><span class=\"ts\"/>*<a class=\"id\" href=\"#pgdat\">pgdat</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_system_sleep\">lock_system_sleep</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#hotadd_new_pgdat\">hotadd_new_pgdat</a>(<a class=\"id\" href=\"#nid\">nid</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgdat\">pgdat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set_online\">node_set_online</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_one_node\">register_one_node</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_system_sleep\">unlock_system_sleep</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* we are OK calling __meminit stuff here - we have CONFIG_MEMORY_HOTPLUG */</span>", 
"int <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#add_memory\">add_memory</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#new_pgdat\">new_pgdat</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_system_sleep\">lock_system_sleep</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#register_memory_resource\">register_memory_resource</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#nid\">nid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#hotadd_new_pgdat\">hotadd_new_pgdat</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_pgdat\">new_pgdat</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* call arch's memory hotadd */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#arch_add_memory\">arch_add_memory</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we online node here. we can't roll back from here. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set_online\">node_set_online</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_pgdat\">new_pgdat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_one_node\">register_one_node</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If sysfs file of new node can't create, cpu on the node</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can't be hot-added. There is no rollback way now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So, check by BUG_ON() to catch it reluctantly..</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* create new memmap entry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#firmware_map_add_hotplug\">firmware_map_add_hotplug</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a>, \"System RAM\");", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* rollback pgdat allocation and others */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_pgdat\">new_pgdat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rollback_node_hotadd\">rollback_node_hotadd</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_memory_resource\">release_memory_resource</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_system_sleep\">unlock_system_sleep</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#add_memory\">add_memory</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTREMOVE\">CONFIG_MEMORY_HOTREMOVE</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A free page on the buddy free lists (not the per-cpu lists) has PageBuddy</span>", 
"<span class=\"comment\"> * set and the size of the free page is given by page_order(). Using this,</span>", 
"<span class=\"comment\"> * the function determines if the pageblock contains only free pages.</span>", 
"<span class=\"comment\"> * Due to buddy contraints, a free page at least the size of a pageblock will</span>", 
"<span class=\"comment\"> * be located at the start of the pageblock</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pageblock_free\">pageblock_free</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PageBuddy\">PageBuddy</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#page\">page</a>) >= <a class=\"id\" href=\"#pageblock_order\">pageblock_order</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Return the start of the next active pageblock after a given page */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#next_active_pageblock\">next_active_pageblock</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure the starting page is pageblock-aligned */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>) &amp; (<a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a> - 1));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the entire pageblock is free, move to the end of free page */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pageblock_free\">pageblock_free</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* be careful. we don't have locks, page_order can be changed.*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>) && (<a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#pageblock_order\">pageblock_order</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a> + (1 << <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Checks if this range of memory is likely to be hot-removable. */</span>", 
"int <a class=\"id\" href=\"#is_mem_section_removable\">is_mem_section_removable</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#end_page\">end_page</a> = <a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the starting page of each pageblock within the range */</span>", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#page\">page</a> &lt; <a class=\"id\" href=\"#end_page\">end_page</a>; <a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#next_active_pageblock\">next_active_pageblock</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#get_pageblock_migratetype\">get_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * A pageblock containing MOVABLE or free pages is considered</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * removable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a> && !<a class=\"id\" href=\"#pageblock_free\">pageblock_free</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * A pageblock starting with a PageReserved page is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * considered removable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All pageblocks in the memory block are likely to be hot-removable */</span>", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Confirm all pages in a range [start, end) is belongs to the same zone.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#test_pages_in_a_zone\">test_pages_in_a_zone</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#MAX_ORDER_NR_PAGES\">MAX_ORDER_NR_PAGES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is just a CONFIG_HOLES_IN_ZONE check.*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_ORDER_NR_PAGES\">MAX_ORDER_NR_PAGES</a>) && !<a class=\"id\" href=\"#pfn_valid_within\">pfn_valid_within</a>(<a class=\"id\" href=\"#pfn\">pfn</a> + <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#MAX_ORDER_NR_PAGES\">MAX_ORDER_NR_PAGES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a> && <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scanning pfn is much easier than scanning lru list.</span>", 
"<span class=\"comment\"> * Scan pfn from start to end and Find LRU page.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scan_lru_pages\">scan_lru_pages</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#hotremove_migrate_alloc\">hotremove_migrate_alloc</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#private\">private</a>, int **<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* This should be improooooved!! */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NR_OFFLINE_AT_ONCE_PAGES\">NR_OFFLINE_AT_ONCE_PAGES</a><span class=\"ts\"/>(256)", 
"static int", 
"<a class=\"id\" href=\"#do_migrate_range\">do_migrate_range</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#move_pages\">move_pages</a> = <a class=\"id\" href=\"#NR_OFFLINE_AT_ONCE_PAGES\">NR_OFFLINE_AT_ONCE_PAGES</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#not_managed\">not_managed</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#source\">source</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a> && <a class=\"id\" href=\"#move_pages\">move_pages</a> &gt; 0; <a class=\"id\" href=\"#pfn\">pfn</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can skip free pages. And we can only deal with pages on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * LRU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) { <span class=\"comment\">/* Success */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#source\">source</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#move_pages\">move_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_zone_page_state\">inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#page_is_file_cache\">page_is_file_cache</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Becasue we don't have big zone-&gt;lock. we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   check this again here. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#not_managed\">not_managed</a>++;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_VM\">CONFIG_DEBUG_VM</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> \"removing pfn %lx from LRU failed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_page\">dump_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#not_managed\">not_managed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#source\">source</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_pages\">putback_lru_pages</a>(&amp;<a class=\"id\" href=\"#source\">source</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#source\">source</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* this function returns # of failed pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#migrate_pages\">migrate_pages</a>(&amp;<a class=\"id\" href=\"#source\">source</a>, <a class=\"id\" href=\"#hotremove_migrate_alloc\">hotremove_migrate_alloc</a>, 0, 1);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * remove from free_area[] and mark all as Reserved.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#offline_isolated_pages_cb\">offline_isolated_pages_cb</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__offline_isolated_pages\">__offline_isolated_pages</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#offline_isolated_pages\">offline_isolated_pages</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk_system_ram_range\">walk_system_ram_range</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a> - <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offline_isolated_pages_cb\">offline_isolated_pages_cb</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check all pages in range, recoreded as memory resource, are isolated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#check_pages_isolated_cb\">check_pages_isolated_cb</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#offlined\">offlined</a> = *(long *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#test_pages_isolated\">test_pages_isolated</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#start_pfn\">start_pfn</a> + <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offlined\">offlined</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*(long *)<a class=\"id\" href=\"#data\">data</a> += <a class=\"id\" href=\"#offlined\">offlined</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static long", 
"<a class=\"id\" href=\"#check_pages_isolated\">check_pages_isolated</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#offlined\">offlined</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#walk_system_ram_range\">walk_system_ram_range</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a> - <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, &amp;<a class=\"id\" href=\"#offlined\">offlined</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_pages_isolated_cb\">check_pages_isolated_cb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offlined\">offlined</a> = (long)<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#offlined\">offlined</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#offline_pages\">offline_pages</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>, unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#expire\">expire</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#offlined_pages\">offlined_pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#drain\">drain</a>, <a class=\"id\" href=\"#retry_max\">retry_max</a>, <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memory_notify\">memory_notify</a> <a class=\"id\" href=\"#arg\">arg</a>;", 
];
xr_frag_insert('l/5d/8a34cbb29ead441a534116ea3290bf25216177.xr', __xr_tmp);
