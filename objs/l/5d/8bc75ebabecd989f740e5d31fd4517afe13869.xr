var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * driver.c - centralized device driver management</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2002-3 Patrick Mochel</span>", 
"<span class=\"comment\"> * Copyright (c) 2002-3 Open Source Development Labs</span>", 
"<span class=\"comment\"> * Copyright (c) 2007 Greg Kroah-Hartman &lt;gregkh@suse.de&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2007 Novell Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"base.h\"", 
"", 
"static struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#next_device\">next_device</a>(struct <a class=\"id\" href=\"#klist_iter\">klist_iter</a> *<a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#klist_next\">klist_next</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_private\">device_private</a> *<a class=\"id\" href=\"#dev_prv\">dev_prv</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_prv\">dev_prv</a> = <a class=\"id\" href=\"#to_device_private_driver\">to_device_private_driver</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_prv\">dev_prv</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_for_each_device - Iterator for devices bound to a driver.</span>", 
"<span class=\"comment\"> * @drv: Driver we're iterating.</span>", 
"<span class=\"comment\"> * @start: Device to begin with</span>", 
"<span class=\"comment\"> * @data: Data to pass to the callback.</span>", 
"<span class=\"comment\"> * @fn: Function to call for each device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterate over the @drv's list of devices calling @fn for each one.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#driver_for_each_device\">driver_for_each_device</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#data\">data</a>, int (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#device\">device</a> *, void *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_iter\">klist_iter</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#drv\">drv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_iter_init_node\">klist_iter_init_node</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#klist_devices\">klist_devices</a>, &amp;<a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#start\">start</a> ? &amp;<a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#knode_driver\">knode_driver</a> : <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#next_device\">next_device</a>(&amp;<a class=\"id\" href=\"#i\">i</a>)) && !<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_iter_exit\">klist_iter_exit</a>(&amp;<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#driver_for_each_device\">driver_for_each_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_find_device - device iterator for locating a particular device.</span>", 
"<span class=\"comment\"> * @drv: The device's driver</span>", 
"<span class=\"comment\"> * @start: Device to begin with</span>", 
"<span class=\"comment\"> * @data: Data to pass to match function</span>", 
"<span class=\"comment\"> * @match: Callback function to check device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is similar to the driver_for_each_device() function above, but</span>", 
"<span class=\"comment\"> * it returns a reference to a device that is 'found' for later use, as</span>", 
"<span class=\"comment\"> * determined by the @match callback.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The callback should return 0 if the device doesn't match and non-zero</span>", 
"<span class=\"comment\"> * if it does.  If the callback returns non-zero, this function will</span>", 
"<span class=\"comment\"> * return to the caller and not iterate over any more devices.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#driver_find_device\">driver_find_device</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#start\">start</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int (*<a class=\"id\" href=\"#match\">match</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_iter\">klist_iter</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#drv\">drv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_iter_init_node\">klist_iter_init_node</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#klist_devices\">klist_devices</a>, &amp;<a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#start\">start</a> ? &amp;<a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#knode_driver\">knode_driver</a> : <a class=\"id\" href=\"#NULL\">NULL</a>));", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#next_device\">next_device</a>(&amp;<a class=\"id\" href=\"#i\">i</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#data\">data</a>) && <a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_iter_exit\">klist_iter_exit</a>(&amp;<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#driver_find_device\">driver_find_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_create_file - create sysfs file for driver.</span>", 
"<span class=\"comment\"> * @drv: driver.</span>", 
"<span class=\"comment\"> * @attr: driver attribute descriptor.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#driver_create_file\">driver_create_file</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#driver_attribute\">driver_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysfs_create_file\">sysfs_create_file</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#driver_create_file\">driver_create_file</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_remove_file - remove sysfs file for driver.</span>", 
"<span class=\"comment\"> * @drv: driver.</span>", 
"<span class=\"comment\"> * @attr: driver attribute descriptor.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#driver_remove_file\">driver_remove_file</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#driver_attribute\">driver_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_file\">sysfs_remove_file</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#attr\">attr</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#driver_remove_file\">driver_remove_file</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_add_kobj - add a kobject below the specified driver</span>", 
"<span class=\"comment\"> * @drv: requesting device driver</span>", 
"<span class=\"comment\"> * @kobj: kobject to add below this driver</span>", 
"<span class=\"comment\"> * @fmt: format string that names the kobject</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You really don't want to do this, this is only here due to one looney</span>", 
"<span class=\"comment\"> * iseries driver, go poke those developers if you are annoyed about</span>", 
"<span class=\"comment\"> * this...</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#driver_add_kobj\">driver_add_kobj</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kvasprintf\">kvasprintf</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kobject_add\">kobject_add</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, \"%s\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#driver_add_kobj\">driver_add_kobj</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_driver - increment driver reference count.</span>", 
"<span class=\"comment\"> * @drv: driver.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#get_driver\">get_driver</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#driver_private\">driver_private</a> *<a class=\"id\" href=\"#priv\">priv</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#to_driver\">to_driver</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#get_driver\">get_driver</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * put_driver - decrement driver's refcount.</span>", 
"<span class=\"comment\"> * @drv: driver.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#put_driver\">put_driver</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#put_driver\">put_driver</a>);", 
"", 
"static int <a class=\"id\" href=\"#driver_add_groups\">driver_add_groups</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> **<a class=\"id\" href=\"#groups\">groups</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#groups\">groups</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysfs_create_group\">sysfs_create_group</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#i\">i</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_group\">sysfs_remove_group</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#driver_remove_groups\">driver_remove_groups</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> **<a class=\"id\" href=\"#groups\">groups</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#groups\">groups</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_group\">sysfs_remove_group</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_register - register driver with bus</span>", 
"<span class=\"comment\"> * @drv: driver to register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We pass off most of the work to the bus_add_driver() call,</span>", 
"<span class=\"comment\"> * since most of the things we have to do deal with the bus</span>", 
"<span class=\"comment\"> * structures.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#driver_register\">driver_register</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#other\">other</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#probe\">probe</a> && <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#probe\">probe</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#remove\">remove</a> && <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#remove\">remove</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#shutdown\">shutdown</a> && <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#shutdown\">shutdown</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Driver '%s' needs updating - please use \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"bus_type methods\\n\", <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#other\">other</a> = <a class=\"id\" href=\"#driver_find\">driver_find</a>(<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#bus\">bus</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#other\">other</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_driver\">put_driver</a>(<a class=\"id\" href=\"#other\">other</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Error: Driver '%s' is already registered, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"aborting...\\n\", <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#bus_add_driver\">bus_add_driver</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#driver_add_groups\">driver_add_groups</a>(<a class=\"id\" href=\"#drv\">drv</a>, <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#groups\">groups</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus_remove_driver\">bus_remove_driver</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#driver_register\">driver_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_unregister - remove driver from system.</span>", 
"<span class=\"comment\"> * @drv: driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Again, we pass off most of the work to the bus-level call.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#driver_unregister\">driver_unregister</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#drv\">drv</a> || !<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"Unexpected driver unregister!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver_remove_groups\">driver_remove_groups</a>(<a class=\"id\" href=\"#drv\">drv</a>, <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#groups\">groups</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_remove_driver\">bus_remove_driver</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#driver_unregister\">driver_unregister</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_find - locate driver on a bus by its name.</span>", 
"<span class=\"comment\"> * @name: name of the driver.</span>", 
"<span class=\"comment\"> * @bus: bus to scan for the driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call kset_find_obj() to iterate over list of drivers on</span>", 
"<span class=\"comment\"> * a bus to find driver by name. Return driver if found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that kset_find_obj increments driver's reference count.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#driver_find\">driver_find</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#bus_type\">bus_type</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#kset_find_obj\">kset_find_obj</a>(<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#drivers_kset\">drivers_kset</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#driver_private\">driver_private</a> *<a class=\"id\" href=\"#priv\">priv</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#to_driver\">to_driver</a>(<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#priv\">priv</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#driver_find\">driver_find</a>);", 
];
xr_frag_insert('l/5d/8bc75ebabecd989f740e5d31fd4517afe13869.xr', __xr_tmp);
