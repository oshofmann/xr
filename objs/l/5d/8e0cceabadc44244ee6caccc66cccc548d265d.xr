var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/> * and it's value is between 512 and PAGE_SIZE */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> = <a class=\"id\" href=\"#blksize_bits\">blksize_bits</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sb_set_blocksize\">sb_set_blocksize</a>);", 
"", 
"int <a class=\"id\" href=\"#sb_min_blocksize\">sb_min_blocksize</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#minsize\">minsize</a> = <a class=\"id\" href=\"#bdev_logical_block_size\">bdev_logical_block_size</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#minsize\">minsize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#minsize\">minsize</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sb_set_blocksize\">sb_set_blocksize</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sb_min_blocksize\">sb_min_blocksize</a>);", 
"", 
"static int", 
"<a class=\"id\" href=\"#blkdev_get_block\">blkdev_get_block</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#create\">create</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iblock\">iblock</a> >= <a class=\"id\" href=\"#max_block\">max_block</a>(<a class=\"id\" href=\"#I_BDEV\">I_BDEV</a>(<a class=\"id\" href=\"#inode\">inode</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#create\">create</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for reads, we're just trying to fill a partial page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return a hole, they will have to call get_block again</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * before they can fill it, and they will get -EIO at that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * time</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a> = <a class=\"id\" href=\"#I_BDEV\">I_BDEV</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> = <a class=\"id\" href=\"#iblock\">iblock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_mapped\">set_buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#blkdev_get_blocks\">blkdev_get_blocks</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#create\">create</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#end_block\">end_block</a> = <a class=\"id\" href=\"#max_block\">max_block</a>(<a class=\"id\" href=\"#I_BDEV\">I_BDEV</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_blocks\">max_blocks</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> >> <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#iblock\">iblock</a> + <a class=\"id\" href=\"#max_blocks\">max_blocks</a>) &gt; <a class=\"id\" href=\"#end_block\">end_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_blocks\">max_blocks</a> = <a class=\"id\" href=\"#end_block\">end_block</a> - <a class=\"id\" href=\"#iblock\">iblock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((long)<a class=\"id\" href=\"#max_blocks\">max_blocks</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#create\">create</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;<span class=\"ts\"/><span class=\"comment\">/* write fully beyond EOF */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * It is a read which is fully beyond EOF.  We return</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a !buffer_mapped buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_blocks\">max_blocks</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a> = <a class=\"id\" href=\"#I_BDEV\">I_BDEV</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> = <a class=\"id\" href=\"#iblock\">iblock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> = <a class=\"id\" href=\"#max_blocks\">max_blocks</a> << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_blocks\">max_blocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_mapped\">set_buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#blkdev_direct_IO\">blkdev_direct_IO</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__blockdev_direct_IO\">__blockdev_direct_IO</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#I_BDEV\">I_BDEV</a>(<a class=\"id\" href=\"#inode\">inode</a>), <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#blkdev_get_blocks\">blkdev_get_blocks</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__sync_blockdev\">__sync_blockdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wait\">wait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#filemap_flush\">filemap_flush</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#filemap_write_and_wait\">filemap_write_and_wait</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write out and wait upon all the dirty data associated with a block</span>", 
"<span class=\"comment\"> * device via its mapping.  Does not take the superblock lock.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sync_blockdev\">sync_blockdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__sync_blockdev\">__sync_blockdev</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sync_blockdev\">sync_blockdev</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write out and wait upon all dirty data associated with this</span>", 
"<span class=\"comment\"> * device.   Filesystem data as well as the underlying block</span>", 
"<span class=\"comment\"> * device.  Takes the superblock lock.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fsync_bdev\">fsync_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#get_super\">get_super</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#sync_filesystem\">sync_filesystem</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_super\">drop_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sync_blockdev\">sync_blockdev</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#fsync_bdev\">fsync_bdev</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * freeze_bdev  --  lock a filesystem and force it into a consistent state</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>blockdevice to lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If a superblock is found on this device, we take the s_umount semaphore</span>", 
"<span class=\"comment\"> * on it to make sure nobody unmounts until the snapshot creation is done.</span>", 
"<span class=\"comment\"> * The reference counter (bd_fsfreeze_count) guarantees that only the last</span>", 
"<span class=\"comment\"> * unfreeze process can unfreeze the frozen filesystem actually when multiple</span>", 
"<span class=\"comment\"> * freeze requests arrive simultaneously. It counts up in freeze_bdev() and</span>", 
"<span class=\"comment\"> * count down in thaw_bdev(). When it becomes 0, thaw_bdev() will unfreeze</span>", 
"<span class=\"comment\"> * actually.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#freeze_bdev\">freeze_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>);", 
"<span class=\"ts\"/>if (++<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_count\">bd_fsfreeze_count</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We don't even need to grab a reference - the first call</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to freeze_bdev grab an active reference and only the last</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * thaw_bdev drops it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#get_super\">get_super</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_super\">drop_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#get_active_super\">get_active_super</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb\">sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#freeze_super\">freeze_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_super\">deactivate_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_count\">bd_fsfreeze_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deactivate_super\">deactivate_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_blockdev\">sync_blockdev</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sb\">sb</a>;<span class=\"ts\"/><span class=\"comment\">/* thaw_bdev releases s-&gt;s_umount */</span>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#freeze_bdev\">freeze_bdev</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * thaw_bdev  -- unlock filesystem</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>blockdevice to unlock</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/>associated superblock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unlocks the filesystem and marks it writeable again after freeze_bdev().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#thaw_bdev\">thaw_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_count\">bd_fsfreeze_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_count\">bd_fsfreeze_count</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb\">sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#thaw_super\">thaw_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_count\">bd_fsfreeze_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#thaw_bdev\">thaw_bdev</a>);", 
"", 
"static int <a class=\"id\" href=\"#blkdev_writepage\">blkdev_writepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#block_write_full_page\">block_write_full_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#blkdev_get_block\">blkdev_get_block</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#blkdev_readpage\">blkdev_readpage</a>(struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#page\">page</a> * <a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#block_read_full_page\">block_read_full_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#blkdev_get_block\">blkdev_get_block</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#blkdev_write_begin\">blkdev_write_begin</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, void **<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#block_write_begin\">block_write_begin</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pagep\">pagep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#blkdev_get_block\">blkdev_get_block</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#blkdev_write_end\">blkdev_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#block_write_end\">block_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * private llseek:</span>", 
"<span class=\"comment\"> * for a block special file file-&gt;f_path.dentry-&gt;d_inode-&gt;i_size is zero</span>", 
"<span class=\"comment\"> * so we compute the size by hand (just as in block_read/write above)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#block_llseek\">block_llseek</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#origin\">origin</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#bd_inode\">bd_inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#bd_inode\">bd_inode</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#origin\">origin</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> >= 0 && <a class=\"id\" href=\"#offset\">offset</a> <= <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> != <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<span class=\"ts\"/>", 
"int <a class=\"id\" href=\"#blkdev_fsync\">blkdev_fsync</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#datasync\">datasync</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#bd_inode\">bd_inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#I_BDEV\">I_BDEV</a>(<a class=\"id\" href=\"#bd_inode\">bd_inode</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There is no need to serialise calls to blkdev_issue_flush with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_mutex and doing so causes performance issues with concurrent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * O_SYNC writers to a block device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#blkdev_issue_flush\">blkdev_issue_flush</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#BLKDEV_IFL_WAIT\">BLKDEV_IFL_WAIT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blkdev_fsync\">blkdev_fsync</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pseudo-fs</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static  <a class=\"id\" href=\"#__cacheline_aligned_in_smp\">__cacheline_aligned_in_smp</a> <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> * <a class=\"id\" href=\"#bdev_cachep\">bdev_cachep</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#bdev_alloc_inode\">bdev_alloc_inode</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bdev_inode\">bdev_inode</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#bdev_cachep\">bdev_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ei\">ei</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>;", 
"}", 
"", 
];
xr_frag_insert('l/5d/8e0cceabadc44244ee6caccc66cccc548d265d.xr', __xr_tmp);
