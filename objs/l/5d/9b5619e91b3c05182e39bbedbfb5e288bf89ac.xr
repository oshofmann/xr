var __xr_tmp = [
"<span class=\"comment\">/*  linux/include/linux/clocksource.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This file contains the structure definitions for clocksources.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  If you are not a clocksource, or timekeeping code, you should</span>", 
"<span class=\"comment\"> *  not be including this file!</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_CLOCKSOURCE_H\">_LINUX_CLOCKSOURCE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_CLOCKSOURCE_H\">_LINUX_CLOCKSOURCE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timex\">timex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#div64\">div64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* clocksource cycle base type */</span>", 
"typedef <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cycle_t\">cycle_t</a>;", 
"struct <a class=\"id\" href=\"#clocksource\">clocksource</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cyclecounter - hardware abstraction for a free running counter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Provides completely state-free accessors to the underlying hardware.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Depending on which hardware it reads, the cycle counter may wrap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>around quickly. Locking rules (if necessary) have to be defined</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by the implementor and user of specific instances of this API.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @read:<span class=\"ts\"/><span class=\"ts\"/>returns the current cycle value</span>", 
"<span class=\"comment\"> * @mask:<span class=\"ts\"/><span class=\"ts\"/>bitmask for two's complement</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>subtraction of non 64 bit counters,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>see CLOCKSOURCE_MASK() helper macro</span>", 
"<span class=\"comment\"> * @mult:<span class=\"ts\"/><span class=\"ts\"/>cycle to nanosecond multiplier</span>", 
"<span class=\"comment\"> * @shift:<span class=\"ts\"/><span class=\"ts\"/>cycle to nanosecond divisor (power of two)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cyclecounter\">cyclecounter</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> (*<a class=\"id\" href=\"#read\">read</a>)(const struct <a class=\"id\" href=\"#cyclecounter\">cyclecounter</a> *<a class=\"id\" href=\"#cc\">cc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mult\">mult</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#shift\">shift</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct timecounter - layer above a %struct cyclecounter which counts nanoseconds</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Contains the state needed by timecounter_read() to detect</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cycle counter wrap around. Initialize with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>timecounter_init(). Also used to convert cycle counts into the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>corresponding nanosecond counts with timecounter_cyc2time(). Users</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of this code are responsible for initializing the underlying</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cycle counter hardware, locking issues and reading the time</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>more often than the cycle counter wraps around. The nanosecond</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>counter will only wrap around after ~585 years.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @cc:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the cycle counter used by this instance</span>", 
"<span class=\"comment\"> * @cycle_last:<span class=\"ts\"/><span class=\"ts\"/>most recent cycle counter value seen by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>timecounter_read()</span>", 
"<span class=\"comment\"> * @nsec:<span class=\"ts\"/><span class=\"ts\"/>continuously increasing count</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#timecounter\">timecounter</a> {", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cyclecounter\">cyclecounter</a> *<a class=\"id\" href=\"#cc\">cc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#cycle_last\">cycle_last</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cyclecounter_cyc2ns - converts cycle counter cycles to nanoseconds</span>", 
"<span class=\"comment\"> * @tc:<span class=\"ts\"/><span class=\"ts\"/>Pointer to cycle counter.</span>", 
"<span class=\"comment\"> * @cycles:<span class=\"ts\"/>Cycles</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * XXX - This could use some mult_lxl_ll() asm optimization. Same code</span>", 
"<span class=\"comment\"> * as in cyc2ns, but with unsigned result.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cyclecounter_cyc2ns\">cyclecounter_cyc2ns</a>(const struct <a class=\"id\" href=\"#cyclecounter\">cyclecounter</a> *<a class=\"id\" href=\"#cc\">cc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#cycles\">cycles</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cycles\">cycles</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#ret\">ret</a> * <a class=\"id\" href=\"#cc\">cc</a>-><a class=\"id\" href=\"#mult\">mult</a>) >> <a class=\"id\" href=\"#cc\">cc</a>-><a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * timecounter_init - initialize a time counter</span>", 
"<span class=\"comment\"> * @tc:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Pointer to time counter which is to be initialized/reset</span>", 
"<span class=\"comment\"> * @cc:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>A cycle counter, ready to be used.</span>", 
"<span class=\"comment\"> * @start_tstamp:<span class=\"ts\"/>Arbitrary initial time stamp.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After this call the current cycle register (roughly) corresponds to</span>", 
"<span class=\"comment\"> * the initial time stamp. Every call to timecounter_read() increments</span>", 
"<span class=\"comment\"> * the time stamp counter by the number of elapsed nanoseconds.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#timecounter_init\">timecounter_init</a>(struct <a class=\"id\" href=\"#timecounter\">timecounter</a> *<a class=\"id\" href=\"#tc\">tc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#cyclecounter\">cyclecounter</a> *<a class=\"id\" href=\"#cc\">cc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start_tstamp\">start_tstamp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * timecounter_read - return nanoseconds elapsed since timecounter_init()</span>", 
"<span class=\"comment\"> *                    plus the initial time stamp</span>", 
"<span class=\"comment\"> * @tc:          Pointer to time counter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In other words, keeps track of time since the same epoch as</span>", 
"<span class=\"comment\"> * the function which generated the initial time stamp.</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#timecounter_read\">timecounter_read</a>(struct <a class=\"id\" href=\"#timecounter\">timecounter</a> *<a class=\"id\" href=\"#tc\">tc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * timecounter_cyc2time - convert a cycle counter to same</span>", 
"<span class=\"comment\"> *                        time base as values returned by</span>", 
"<span class=\"comment\"> *                        timecounter_read()</span>", 
"<span class=\"comment\"> * @tc:<span class=\"ts\"/><span class=\"ts\"/>Pointer to time counter.</span>", 
"<span class=\"comment\"> * @cycle:<span class=\"ts\"/>a value returned by tc-&gt;cc-&gt;read()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Cycle counts that are converted correctly as long as they</span>", 
"<span class=\"comment\"> * fall into the interval [-1/2 max cycle count, +1/2 max cycle count],</span>", 
"<span class=\"comment\"> * with \"max cycle count\" == cs-&gt;mask+1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This allows conversion of cycle counter values which were generated</span>", 
"<span class=\"comment\"> * in the past.</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#timecounter_cyc2time\">timecounter_cyc2time</a>(struct <a class=\"id\" href=\"#timecounter\">timecounter</a> *<a class=\"id\" href=\"#tc\">tc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#cycle_tstamp\">cycle_tstamp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct clocksource - hardware abstraction for a free running counter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Provides mostly state-free accessors to the underlying hardware.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is the structure used for system time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @name:<span class=\"ts\"/><span class=\"ts\"/>ptr to clocksource name</span>", 
"<span class=\"comment\"> * @list:<span class=\"ts\"/><span class=\"ts\"/>list head for registration</span>", 
"<span class=\"comment\"> * @rating:<span class=\"ts\"/><span class=\"ts\"/>rating value for selection (higher is better)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>To avoid rating inflation the following</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>list should give you a guide as to how</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>to assign your clocksource a rating</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1-99: Unfit for real use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Only available for bootup and testing purposes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>100-199: Base level usability.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Functional for real use, but not desired.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>200-299: Good.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>A correct and usable clocksource.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>300-399: Desired.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>A reasonably fast and accurate clocksource.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>400-499: Perfect</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>The ideal clocksource. A must-use where</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>available.</span>", 
"<span class=\"comment\"> * @read:<span class=\"ts\"/><span class=\"ts\"/>returns a cycle value, passes clocksource as argument</span>", 
"<span class=\"comment\"> * @enable:<span class=\"ts\"/><span class=\"ts\"/>optional function to enable the clocksource</span>", 
"<span class=\"comment\"> * @disable:<span class=\"ts\"/><span class=\"ts\"/>optional function to disable the clocksource</span>", 
"<span class=\"comment\"> * @mask:<span class=\"ts\"/><span class=\"ts\"/>bitmask for two's complement</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>subtraction of non 64 bit counters</span>", 
"<span class=\"comment\"> * @mult:<span class=\"ts\"/><span class=\"ts\"/>cycle to nanosecond multiplier</span>", 
"<span class=\"comment\"> * @shift:<span class=\"ts\"/><span class=\"ts\"/>cycle to nanosecond divisor (power of two)</span>", 
"<span class=\"comment\"> * @max_idle_ns:<span class=\"ts\"/>max idle time permitted by the clocksource (nsecs)</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/><span class=\"ts\"/>flags describing special properties</span>", 
"<span class=\"comment\"> * @vread:<span class=\"ts\"/><span class=\"ts\"/>vsyscall based read</span>", 
"<span class=\"comment\"> * @suspend:<span class=\"ts\"/><span class=\"ts\"/>suspend function for the clocksource, if necessary</span>", 
"<span class=\"comment\"> * @resume:<span class=\"ts\"/><span class=\"ts\"/>resume function for the clocksource, if necessary</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#clocksource\">clocksource</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First part of structure is read mostly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rating\">rating</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> (*<a class=\"id\" href=\"#read\">read</a>)(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#enable\">enable</a>)(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#disable\">disable</a>)(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mult\">mult</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#max_idle_ns\">max_idle_ns</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> (*<a class=\"id\" href=\"#vread\">vread</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#suspend\">suspend</a>)(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#resume\">resume</a>)(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IA64\">CONFIG_IA64</a>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#fsys_mmio\">fsys_mmio</a>;        <span class=\"comment\">/* used by fsyscall asm code */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLKSRC_FSYS_MMIO_SET\">CLKSRC_FSYS_MMIO_SET</a>(<a class=\"id\" href=\"#mmio\">mmio</a>, <a class=\"id\" href=\"#addr\">addr</a>)      ((<a class=\"id\" href=\"#mmio\">mmio</a>) = (<a class=\"id\" href=\"#addr\">addr</a>))", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLKSRC_FSYS_MMIO_SET\">CLKSRC_FSYS_MMIO_SET</a>(<a class=\"id\" href=\"#mmio\">mmio</a>, <a class=\"id\" href=\"#addr\">addr</a>)      do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Second part is written at each timer interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Keep it in a different cache line to dirty no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * more than one cache line.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#cycle_last\">cycle_last</a> <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CLOCKSOURCE_WATCHDOG\">CONFIG_CLOCKSOURCE_WATCHDOG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Watchdog related data, used by the framework */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#wd_list\">wd_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#wd_last\">wd_last</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clock source flags bits::</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_SOURCE_IS_CONTINUOUS\">CLOCK_SOURCE_IS_CONTINUOUS</a><span class=\"ts\"/><span class=\"ts\"/>0x01", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_SOURCE_MUST_VERIFY\">CLOCK_SOURCE_MUST_VERIFY</a><span class=\"ts\"/><span class=\"ts\"/>0x02", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_SOURCE_WATCHDOG\">CLOCK_SOURCE_WATCHDOG</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_SOURCE_VALID_FOR_HRES\">CLOCK_SOURCE_VALID_FOR_HRES</a><span class=\"ts\"/><span class=\"ts\"/>0x20", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_SOURCE_UNSTABLE\">CLOCK_SOURCE_UNSTABLE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x40", 
"", 
"<span class=\"comment\">/* simplify initialization of mask field */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCKSOURCE_MASK\">CLOCKSOURCE_MASK</a>(<a class=\"id\" href=\"#bits\">bits</a>) (<a class=\"id\" href=\"#cycle_t\">cycle_t</a>)((<a class=\"id\" href=\"#bits\">bits</a>) &lt; 64 ? ((1ULL<<(<a class=\"id\" href=\"#bits\">bits</a>))-1) : -1)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clocksource_khz2mult - calculates mult from khz and shift</span>", 
"<span class=\"comment\"> * @khz:<span class=\"ts\"/><span class=\"ts\"/>Clocksource frequency in KHz</span>", 
"<span class=\"comment\"> * @shift_constant:<span class=\"ts\"/>Clocksource shift factor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Helper functions that converts a khz counter frequency to a timsource</span>", 
"<span class=\"comment\"> * multiplier, given the clocksource shift value</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#clocksource_khz2mult\">clocksource_khz2mult</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#khz\">khz</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#shift_constant\">shift_constant</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*  khz = cyc/(Million ns)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mult/2^shift  = ns/cyc</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mult = ns/cyc * 2^shift</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mult = 1Million/khz * 2^shift</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mult = 1000000 * 2^shift / khz</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mult = (1000000&lt;&lt;shift) / khz</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tmp\">tmp</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)1000000) << <a class=\"id\" href=\"#shift_constant\">shift_constant</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> += <a class=\"id\" href=\"#khz\">khz</a>/2; <span class=\"comment\">/* round for do_div */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#khz\">khz</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clocksource_hz2mult - calculates mult from hz and shift</span>", 
"<span class=\"comment\"> * @hz:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Clocksource frequency in Hz</span>", 
"<span class=\"comment\"> * @shift_constant:<span class=\"ts\"/>Clocksource shift factor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Helper functions that converts a hz counter</span>", 
"<span class=\"comment\"> * frequency to a timsource multiplier, given the</span>", 
"<span class=\"comment\"> * clocksource shift value</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#clocksource_hz2mult\">clocksource_hz2mult</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hz\">hz</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#shift_constant\">shift_constant</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*  hz = cyc/(Billion ns)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mult/2^shift  = ns/cyc</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mult = ns/cyc * 2^shift</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mult = 1Billion/hz * 2^shift</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mult = 1000000000 * 2^shift / hz</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mult = (1000000000&lt;&lt;shift) / hz</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tmp\">tmp</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)1000000000) << <a class=\"id\" href=\"#shift_constant\">shift_constant</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> += <a class=\"id\" href=\"#hz\">hz</a>/2; <span class=\"comment\">/* round for do_div */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#hz\">hz</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clocksource_cyc2ns - converts clocksource cycles to nanoseconds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Converts cycles to nanoseconds, using the given mult and shift.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * XXX - This could use some mult_lxl_ll() asm optimization</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#clocksource_cyc2ns\">clocksource_cyc2ns</a>(<a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#cycles\">cycles</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mult\">mult</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#shift\">shift</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#cycles\">cycles</a> * <a class=\"id\" href=\"#mult\">mult</a>) >> <a class=\"id\" href=\"#shift\">shift</a>;", 
"}", 
"", 
"", 
"extern int <a class=\"id\" href=\"#clocksource_register\">clocksource_register</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a>*);", 
"extern void <a class=\"id\" href=\"#clocksource_unregister\">clocksource_unregister</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a>*);", 
"extern void <a class=\"id\" href=\"#clocksource_touch_watchdog\">clocksource_touch_watchdog</a>(void);", 
"extern struct <a class=\"id\" href=\"#clocksource\">clocksource</a>* <a class=\"id\" href=\"#clocksource_get_next\">clocksource_get_next</a>(void);", 
"extern void <a class=\"id\" href=\"#clocksource_change_rating\">clocksource_change_rating</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>, int <a class=\"id\" href=\"#rating\">rating</a>);", 
"extern void <a class=\"id\" href=\"#clocksource_suspend\">clocksource_suspend</a>(void);", 
"extern void <a class=\"id\" href=\"#clocksource_resume\">clocksource_resume</a>(void);", 
"extern struct <a class=\"id\" href=\"#clocksource\">clocksource</a> * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#clocksource_default_clock\">clocksource_default_clock</a>(void);", 
"extern void <a class=\"id\" href=\"#clocksource_mark_unstable\">clocksource_mark_unstable</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>);", 
"", 
"extern void", 
"<a class=\"id\" href=\"#clocks_calc_mult_shift\">clocks_calc_mult_shift</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#mult\">mult</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#shift\">shift</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#minsec\">minsec</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Don't call __clocksource_register_scale directly, use</span>", 
"<span class=\"comment\"> * clocksource_register_hz/khz</span>", 
"<span class=\"comment\"> */</span>", 
"extern int", 
"<a class=\"id\" href=\"#__clocksource_register_scale\">__clocksource_register_scale</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#scale\">scale</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#freq\">freq</a>);", 
"extern void", 
"<a class=\"id\" href=\"#__clocksource_updatefreq_scale\">__clocksource_updatefreq_scale</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#scale\">scale</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#freq\">freq</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#clocksource_register_hz\">clocksource_register_hz</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hz\">hz</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__clocksource_register_scale\">__clocksource_register_scale</a>(<a class=\"id\" href=\"#cs\">cs</a>, 1, <a class=\"id\" href=\"#hz\">hz</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#clocksource_register_khz\">clocksource_register_khz</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#khz\">khz</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__clocksource_register_scale\">__clocksource_register_scale</a>(<a class=\"id\" href=\"#cs\">cs</a>, 1000, <a class=\"id\" href=\"#khz\">khz</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__clocksource_updatefreq_hz\">__clocksource_updatefreq_hz</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hz\">hz</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clocksource_updatefreq_scale\">__clocksource_updatefreq_scale</a>(<a class=\"id\" href=\"#cs\">cs</a>, 1, <a class=\"id\" href=\"#hz\">hz</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__clocksource_updatefreq_khz\">__clocksource_updatefreq_khz</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#khz\">khz</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clocksource_updatefreq_scale\">__clocksource_updatefreq_scale</a>(<a class=\"id\" href=\"#cs\">cs</a>, 1000, <a class=\"id\" href=\"#khz\">khz</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#clocksource_calc_mult_shift\">clocksource_calc_mult_shift</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#freq\">freq</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#minsec\">minsec</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#clocks_calc_mult_shift\">clocks_calc_mult_shift</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#mult\">mult</a>, &amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#shift\">shift</a>, <a class=\"id\" href=\"#freq\">freq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>, <a class=\"id\" href=\"#minsec\">minsec</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_TIME_VSYSCALL\">CONFIG_GENERIC_TIME_VSYSCALL</a>", 
"extern void", 
"<a class=\"id\" href=\"#update_vsyscall\">update_vsyscall</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#wtm\">wtm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mult\">mult</a>);", 
"extern void <a class=\"id\" href=\"#update_vsyscall_tz\">update_vsyscall_tz</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#update_vsyscall\">update_vsyscall</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#wtm\">wtm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mult\">mult</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_vsyscall_tz\">update_vsyscall_tz</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#timekeeping_notify\">timekeeping_notify</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#clock\">clock</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_CLOCKSOURCE_H */</span>", 
];
xr_frag_insert('l/5d/9b5619e91b3c05182e39bbedbfb5e288bf89ac.xr', __xr_tmp);
