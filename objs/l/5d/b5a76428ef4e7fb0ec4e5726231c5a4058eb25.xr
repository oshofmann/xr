var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * include/linux/idr.h</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * 2002-10-18  written by Jim Houston jim.houston@ccur.com</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright (C) 2002 by Concurrent Computer Corporation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Distributed under the GNU GPL license version 2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Small id to pointer translation service avoiding fixed sized</span>", 
"<span class=\"comment\"> * tables.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__IDR_H__\">__IDR_H__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__IDR_H__\">__IDR_H__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a> 5", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDR_FULL\">IDR_FULL</a> 0xfffffffful", 
"<span class=\"comment\">/* We can only use two of the bits in the top level because there is</span>", 
"<span class=\"comment\">   only one possible bit in the top level (5 bits * 7 levels = 35</span>", 
"<span class=\"comment\">   bits, but you only use 31 bits in the id). */</span>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TOP_LEVEL_FULL\">TOP_LEVEL_FULL</a> (<a class=\"id\" href=\"#IDR_FULL\">IDR_FULL</a> >> 30)", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a> 6", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDR_FULL\">IDR_FULL</a> 0xfffffffffffffffful", 
"<span class=\"comment\">/* We can only use two of the bits in the top level because there is</span>", 
"<span class=\"comment\">   only one possible bit in the top level (6 bits * 6 levels = 36</span>", 
"<span class=\"comment\">   bits, but you only use 31 bits in the id). */</span>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TOP_LEVEL_FULL\">TOP_LEVEL_FULL</a> (<a class=\"id\" href=\"#IDR_FULL\">IDR_FULL</a> >> 62)", 
"#else", 
"# <a class=\"id\" href=\"#error\">error</a> \"BITS_PER_LONG is not 32 or 64\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDR_SIZE\">IDR_SIZE</a> (1 << <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a> ((1 << <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>)-1)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ID_SHIFT\">MAX_ID_SHIFT</a> (sizeof(int)*8 - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ID_BIT\">MAX_ID_BIT</a> (1U << <a class=\"id\" href=\"#MAX_ID_SHIFT\">MAX_ID_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ID_MASK\">MAX_ID_MASK</a> (<a class=\"id\" href=\"#MAX_ID_BIT\">MAX_ID_BIT</a> - 1)", 
"", 
"<span class=\"comment\">/* Leave the possibility of an incomplete final layer */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_LEVEL\">MAX_LEVEL</a> (<a class=\"id\" href=\"#MAX_ID_SHIFT\">MAX_ID_SHIFT</a> + <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a> - 1) / <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>", 
"", 
"<span class=\"comment\">/* Number of id_layer structs to leave in free list */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDR_FREE_MAX\">IDR_FREE_MAX</a> <a class=\"id\" href=\"#MAX_LEVEL\">MAX_LEVEL</a> + <a class=\"id\" href=\"#MAX_LEVEL\">MAX_LEVEL</a>", 
"", 
"struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> {", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bitmap\">bitmap</a>; <span class=\"comment\">/* A zero bit means \"space here\" */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ary\">ary</a>[1<<<a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>];", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#count\">count</a>;<span class=\"ts\"/> <span class=\"comment\">/* When zero, we can release it */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#layer\">layer</a>;<span class=\"ts\"/> <span class=\"comment\">/* distance from leaf */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#idr\">idr</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#id_free\">id_free</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#layers\">layers</a>; <span class=\"comment\">/* only valid without concurrent changes */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#id_free_cnt\">id_free_cnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/>  <a class=\"id\" href=\"#lock\">lock</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDR_INIT\">IDR_INIT</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#top\">top</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#id_free\">id_free</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#layers\">layers</a> <span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#id_free_cnt\">id_free_cnt</a><span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#lock\">lock</a>),<span class=\"ts\"/>\\", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_IDR\">DEFINE_IDR</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr\">idr</a> <a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#IDR_INIT\">IDR_INIT</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"", 
"<span class=\"comment\">/* Actions to be taken after a call to _idr_sub_alloc */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDR_NEED_TO_GROW\">IDR_NEED_TO_GROW</a> -2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDR_NOMORE_SPACE\">IDR_NOMORE_SPACE</a> -3", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_idr_rc_to_errno\">_idr_rc_to_errno</a>(<a class=\"id\" href=\"#rc\">rc</a>) ((<a class=\"id\" href=\"#rc\">rc</a>) == -1 ? -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a> : -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr synchronization (stolen from radix-tree.h)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * idr_find() is able to be called locklessly, using RCU. The caller must</span>", 
"<span class=\"comment\"> * ensure calls to this function are made within rcu_read_lock() regions.</span>", 
"<span class=\"comment\"> * Other readers (lock-free or otherwise) and modifications may be running</span>", 
"<span class=\"comment\"> * concurrently.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is still required that the caller manage the synchronization and</span>", 
"<span class=\"comment\"> * lifetimes of the items. So if RCU lock-free lookups are used, typically</span>", 
"<span class=\"comment\"> * this would mean that the items have their own locks, or are amenable to</span>", 
"<span class=\"comment\"> * lock-free access; and that the items are freed by RCU (or only freed after</span>", 
"<span class=\"comment\"> * having been deleted from the idr tree *and* a synchronize_rcu() grace</span>", 
"<span class=\"comment\"> * period).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is what we export.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void *<a class=\"id\" href=\"#idr_find\">idr_find</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, int <a class=\"id\" href=\"#id\">id</a>);", 
"int <a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"int <a class=\"id\" href=\"#idr_get_new\">idr_get_new</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>, int *<a class=\"id\" href=\"#id\">id</a>);", 
"int <a class=\"id\" href=\"#idr_get_new_above\">idr_get_new_above</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>, int <a class=\"id\" href=\"#starting_id\">starting_id</a>, int *<a class=\"id\" href=\"#id\">id</a>);", 
"int <a class=\"id\" href=\"#idr_for_each\">idr_for_each</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> int (*<a class=\"id\" href=\"#fn\">fn</a>)(int <a class=\"id\" href=\"#id\">id</a>, void *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#data\">data</a>), void *<a class=\"id\" href=\"#data\">data</a>);", 
"void *<a class=\"id\" href=\"#idr_get_next\">idr_get_next</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, int *<a class=\"id\" href=\"#nextid\">nextid</a>);", 
"void *<a class=\"id\" href=\"#idr_replace\">idr_replace</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>, int <a class=\"id\" href=\"#id\">id</a>);", 
"void <a class=\"id\" href=\"#idr_remove\">idr_remove</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, int <a class=\"id\" href=\"#id\">id</a>);", 
"void <a class=\"id\" href=\"#idr_remove_all\">idr_remove_all</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>);", 
"void <a class=\"id\" href=\"#idr_destroy\">idr_destroy</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>);", 
"void <a class=\"id\" href=\"#idr_init\">idr_init</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * IDA - IDR based id allocator, use when translation from id to</span>", 
"<span class=\"comment\"> * pointer isn't necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDA_CHUNK_SIZE\">IDA_CHUNK_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>128<span class=\"ts\"/><span class=\"comment\">/* 128 bytes per chunk */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDA_BITMAP_LONGS\">IDA_BITMAP_LONGS</a><span class=\"ts\"/>(128 / sizeof(long) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDA_BITMAP_BITS\">IDA_BITMAP_BITS</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#IDA_BITMAP_LONGS\">IDA_BITMAP_LONGS</a> * sizeof(long) * 8)", 
"", 
"struct <a class=\"id\" href=\"#ida_bitmap\">ida_bitmap</a> {", 
"<span class=\"ts\"/>long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_busy\">nr_busy</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#IDA_BITMAP_LONGS\">IDA_BITMAP_LONGS</a>];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ida\">ida</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr\">idr</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr\">idr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ida_bitmap\">ida_bitmap</a><span class=\"ts\"/>*<a class=\"id\" href=\"#free_bitmap\">free_bitmap</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDA_INIT\">IDA_INIT</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#idr\">idr</a> = <a class=\"id\" href=\"#IDR_INIT\">IDR_INIT</a>(<a class=\"id\" href=\"#name\">name</a>), .<a class=\"id\" href=\"#free_bitmap\">free_bitmap</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, }", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_IDA\">DEFINE_IDA</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/>struct <a class=\"id\" href=\"#ida\">ida</a> <a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#IDA_INIT\">IDA_INIT</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"", 
"int <a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"int <a class=\"id\" href=\"#ida_get_new_above\">ida_get_new_above</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>, int <a class=\"id\" href=\"#starting_id\">starting_id</a>, int *<a class=\"id\" href=\"#p_id\">p_id</a>);", 
"int <a class=\"id\" href=\"#ida_get_new\">ida_get_new</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>, int *<a class=\"id\" href=\"#p_id\">p_id</a>);", 
"void <a class=\"id\" href=\"#ida_remove\">ida_remove</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>, int <a class=\"id\" href=\"#id\">id</a>);", 
"void <a class=\"id\" href=\"#ida_destroy\">ida_destroy</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>);", 
"void <a class=\"id\" href=\"#ida_init\">ida_init</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>);", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#idr_init_cache\">idr_init_cache</a>(void);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __IDR_H__ */</span>", 
];
xr_frag_insert('l/5d/b5a76428ef4e7fb0ec4e5726231c5a4058eb25.xr', __xr_tmp);
