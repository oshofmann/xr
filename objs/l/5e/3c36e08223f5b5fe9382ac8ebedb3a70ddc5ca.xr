var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  This file contains work-arounds for many known PCI hardware</span>", 
"<span class=\"comment\"> *  bugs.  Devices present only on certain architectures (host</span>", 
"<span class=\"comment\"> *  bridges et cetera) should be handled in arch-specific code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Note: any quirks for hotpluggable devices must _NOT_ be declared __init.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (c) 1999 Martin Mares &lt;mj@ucw.cz&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Init/reset quirks for USB host controllers should be in the</span>", 
"<span class=\"comment\"> *  USB quirks file, where their drivers can access reuse it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  The bridge optimization stuff has been removed. If you really</span>", 
"<span class=\"comment\"> *  have a silly BIOS which is unable to set your host bridge right,</span>", 
"<span class=\"comment\"> *  use the PowerTweak utility (see http://powertweak.sourceforge.net).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>-<a class=\"id\" href=\"#aspm\">aspm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#dma\">dma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"comment\">/* isa_dma_bridge_buggy */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> \"pci.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This quirk function disables memory decoding and releases memory resources</span>", 
"<span class=\"comment\"> * of the device specified by kernel's boot parameter 'pci=resource_alignment='.</span>", 
"<span class=\"comment\"> * It also rounds up size to specified alignment.</span>", 
"<span class=\"comment\"> * Later on, the kernel will assign page-aligned memory resource back</span>", 
"<span class=\"comment\"> * to the device.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_resource_alignment\">quirk_resource_alignment</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#command\">command</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_is_reassigndev\">pci_is_reassigndev</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hdr_type\">hdr_type</a> == <a class=\"id\" href=\"#PCI_HEADER_TYPE_NORMAL\">PCI_HEADER_TYPE_NORMAL</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) == <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_HOST\">PCI_CLASS_BRIDGE_HOST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Can't reassign resources to host bridge.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Disabling memory decoding and releasing memory resources.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#command\">command</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#command\">command</a> &= ~<a class=\"id\" href=\"#PCI_COMMAND_MEMORY\">PCI_COMMAND_MEMORY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, <a class=\"id\" href=\"#command\">command</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = <a class=\"id\" href=\"#pci_specified_resource_alignment\">pci_specified_resource_alignment</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#resource_size\">resource_size</a>(<a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#align\">align</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#align\">align</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Rounding up size of resource #%d to %#llx.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>, (unsigned long long)<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Need to disable bridge's resource window,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to enable the kernel to reassign new resource</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * window later on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hdr_type\">hdr_type</a> == <a class=\"id\" href=\"#PCI_HEADER_TYPE_BRIDGE\">PCI_HEADER_TYPE_BRIDGE</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) == <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_PCI\">PCI_CLASS_BRIDGE_PCI</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PCI_NUM_RESOURCES\">PCI_NUM_RESOURCES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#resource_size\">resource_size</a>(<a class=\"id\" href=\"#r\">r</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_disable_bridge_window\">pci_disable_bridge_window</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#quirk_resource_alignment\">quirk_resource_alignment</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Decoding should be disabled for a PCI device during BAR sizing to avoid</span>", 
"<span class=\"comment\"> * conflict. But doing so may cause problems on host bridge and perhaps other</span>", 
"<span class=\"comment\"> * key system devices. For devices that need to have mmio decoding always-on,</span>", 
"<span class=\"comment\"> * we need to set the dev-&gt;mmio_always_on bit.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_mmio_always_on\">quirk_mmio_always_on</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) == <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_HOST\">PCI_CLASS_BRIDGE_HOST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mmio_always_on\">mmio_always_on</a> = 1;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#quirk_mmio_always_on\">quirk_mmio_always_on</a>);", 
"", 
"<span class=\"comment\">/* The Mellanox Tavor device gives false positive parity errors</span>", 
"<span class=\"comment\"> * Mark this device with a broken_parity_status, to allow</span>", 
"<span class=\"comment\"> * PCI scanning code to \"skip\" this now blacklisted device.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_mellanox_tavor\">quirk_mellanox_tavor</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#broken_parity_status\">broken_parity_status</a> = 1;<span class=\"ts\"/><span class=\"comment\">/* This device gives false positives */</span>", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_MELLANOX\">PCI_VENDOR_ID_MELLANOX</a>,<a class=\"id\" href=\"#PCI_DEVICE_ID_MELLANOX_TAVOR\">PCI_DEVICE_ID_MELLANOX_TAVOR</a>,<a class=\"id\" href=\"#quirk_mellanox_tavor\">quirk_mellanox_tavor</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_MELLANOX\">PCI_VENDOR_ID_MELLANOX</a>,<a class=\"id\" href=\"#PCI_DEVICE_ID_MELLANOX_TAVOR_BRIDGE\">PCI_DEVICE_ID_MELLANOX_TAVOR_BRIDGE</a>,<a class=\"id\" href=\"#quirk_mellanox_tavor\">quirk_mellanox_tavor</a>);", 
"", 
"<span class=\"comment\">/* Deal with broken BIOS'es that neglect to enable passive release,</span>", 
"<span class=\"comment\">   which can cause problems in combination with the 82441FX/PPro MTRRs */</span>", 
"static void <a class=\"id\" href=\"#quirk_passive_release\">quirk_passive_release</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#dlc\">dlc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We have to make sure a particular bit is set in the PIIX3</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   ISA bridge, so we have to go out and find it. */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#pci_get_device\">pci_get_device</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82371SB_0\">PCI_DEVICE_ID_INTEL_82371SB_0</a>, <a class=\"id\" href=\"#d\">d</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#d\">d</a>, 0x82, &amp;<a class=\"id\" href=\"#dlc\">dlc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dlc\">dlc</a> &amp; 1<<1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"PIIX3: Enabling Passive Release\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dlc\">dlc</a> |= 1<<1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#d\">d</a>, 0x82, <a class=\"id\" href=\"#dlc\">dlc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82441\">PCI_DEVICE_ID_INTEL_82441</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_passive_release\">quirk_passive_release</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82441\">PCI_DEVICE_ID_INTEL_82441</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_passive_release\">quirk_passive_release</a>);", 
"", 
"<span class=\"comment\">/*  The VIA VP2/VP3/MVP3 seem to have some 'features'. There may be a workaround</span>", 
"<span class=\"comment\">    but VIA don't answer queries. If you happen to have good contacts at VIA</span>", 
"<span class=\"comment\">    ask them for me please -- Alan </span>", 
"<span class=\"comment\">    </span>", 
"<span class=\"comment\">    This appears to be BIOS not version dependent. So presumably there is a </span>", 
"<span class=\"comment\">    chipset level fix */</span>", 
"    ", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_isa_dma_hangs\">quirk_isa_dma_hangs</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#isa_dma_bridge_buggy\">isa_dma_bridge_buggy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isa_dma_bridge_buggy\">isa_dma_bridge_buggy</a>=1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Activating ISA DMA hang workarounds\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Its not totally clear which chipsets are the problematic ones</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We know 82C586 and 82C596 variants are affected.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C586_0\">PCI_DEVICE_ID_VIA_82C586_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_isa_dma_hangs\">quirk_isa_dma_hangs</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C596\">PCI_DEVICE_ID_VIA_82C596</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_isa_dma_hangs\">quirk_isa_dma_hangs</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,    <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82371SB_0\">PCI_DEVICE_ID_INTEL_82371SB_0</a>,  <a class=\"id\" href=\"#quirk_isa_dma_hangs\">quirk_isa_dma_hangs</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AL\">PCI_VENDOR_ID_AL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AL_M1533\">PCI_DEVICE_ID_AL_M1533</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_isa_dma_hangs\">quirk_isa_dma_hangs</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NEC\">PCI_VENDOR_ID_NEC</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_NEC_CBUS_1\">PCI_DEVICE_ID_NEC_CBUS_1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_isa_dma_hangs\">quirk_isa_dma_hangs</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NEC\">PCI_VENDOR_ID_NEC</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_NEC_CBUS_2\">PCI_DEVICE_ID_NEC_CBUS_2</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_isa_dma_hangs\">quirk_isa_dma_hangs</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NEC\">PCI_VENDOR_ID_NEC</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_NEC_CBUS_3\">PCI_DEVICE_ID_NEC_CBUS_3</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_isa_dma_hangs\">quirk_isa_dma_hangs</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Intel NM10 \"TigerPoint\" LPC PM1a_STS.BM_STS must be clear</span>", 
"<span class=\"comment\"> * for some HT machines to use C4 w/o hanging.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_tigerpoint_bm_sts\">quirk_tigerpoint_bm_sts</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pmbase\">pmbase</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pm1a\">pm1a</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x40, &amp;<a class=\"id\" href=\"#pmbase\">pmbase</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmbase\">pmbase</a> = <a class=\"id\" href=\"#pmbase\">pmbase</a> &amp; 0xff80;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm1a\">pm1a</a> = <a class=\"id\" href=\"#inw\">inw</a>(<a class=\"id\" href=\"#pmbase\">pmbase</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm1a\">pm1a</a> &amp; 0x10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#FW_BUG\">FW_BUG</a> \"TigerPoint LPC.BM_STS cleared\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outw\">outw</a>(0x10, <a class=\"id\" href=\"#pmbase\">pmbase</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_TGP_LPC\">PCI_DEVICE_ID_INTEL_TGP_LPC</a>, <a class=\"id\" href=\"#quirk_tigerpoint_bm_sts\">quirk_tigerpoint_bm_sts</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Chipsets where PCI-&gt;PCI transfers vanish or hang</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_nopcipci\">quirk_nopcipci</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a> &amp; <a class=\"id\" href=\"#PCIPCI_FAIL\">PCIPCI_FAIL</a>)==0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Disabling direct PCI/PCI transfers\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a> |= <a class=\"id\" href=\"#PCIPCI_FAIL\">PCIPCI_FAIL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SI\">PCI_VENDOR_ID_SI</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_SI_5597\">PCI_DEVICE_ID_SI_5597</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_nopcipci\">quirk_nopcipci</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SI\">PCI_VENDOR_ID_SI</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_SI_496\">PCI_DEVICE_ID_SI_496</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_nopcipci\">quirk_nopcipci</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_nopciamd\">quirk_nopciamd</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#rev\">rev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x08, &amp;<a class=\"id\" href=\"#rev\">rev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rev\">rev</a> == 0x13) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Erratum 24 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Chipset erratum: Disabling direct PCI/AGP transfers\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a> |= <a class=\"id\" href=\"#PCIAGP_FAIL\">PCIAGP_FAIL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_8151_0\">PCI_DEVICE_ID_AMD_8151_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_nopciamd\">quirk_nopciamd</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Triton requires workarounds to be used by the drivers</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_triton\">quirk_triton</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a>&amp;<a class=\"id\" href=\"#PCIPCI_TRITON\">PCIPCI_TRITON</a>)==0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Limiting direct PCI/PCI transfers\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a> |= <a class=\"id\" href=\"#PCIPCI_TRITON\">PCIPCI_TRITON</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82437\">PCI_DEVICE_ID_INTEL_82437</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_triton\">quirk_triton</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82437VX\">PCI_DEVICE_ID_INTEL_82437VX</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_triton\">quirk_triton</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82439\">PCI_DEVICE_ID_INTEL_82439</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_triton\">quirk_triton</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82439TX\">PCI_DEVICE_ID_INTEL_82439TX</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_triton\">quirk_triton</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>VIA Apollo KT133 needs PCI latency patch</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Made according to a windows driver based patch by George E. Breese</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>see PCI Latency Adjust on http://www.viahardware.com/download/viatweak.shtm</span>", 
"<span class=\"comment\"> *      Also see http://www.au-ja.org/review-kt133a-1-en.phtml for</span>", 
"<span class=\"comment\"> *      the info on which Mr Breese based his work.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Updated based on further information from the site and also on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>information provided by VIA </span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#quirk_vialatency\">quirk_vialatency</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#busarb\">busarb</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok we have a potential problem chipset here. Now see if we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   a buggy southbridge */</span>", 
"<span class=\"ts\"/>   ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pci_get_device\">pci_get_device</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C686\">PCI_DEVICE_ID_VIA_82C686</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>!=<a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x40 - 0x4f == 686B, 0x10 - 0x2f == 686A; thanks Dan Hollis */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check for buggy part revisions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#revision\">revision</a> &lt; 0x40 || <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#revision\">revision</a> &gt; 0x42)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pci_get_device\">pci_get_device</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8231\">PCI_DEVICE_ID_VIA_8231</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>==<a class=\"id\" href=\"#NULL\">NULL</a>)<span class=\"ts\"/><span class=\"comment\">/* No problem parts */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check for buggy part revisions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#revision\">revision</a> &lt; 0x10 || <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#revision\">revision</a> &gt; 0x12)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Ok we have the problem. Now set the PCI master grant to </span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>occur every master grant. The apparent bug is that under high</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>PCI load (quite common in Linux of course) you can get data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>loss when the CPU is held off the bus for 3 bus master requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>This happens to include the IDE controllers....</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>VIA only apply this fix when an SB Live! is present but under</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>both Linux and Windows this isnt enough, and we have seen</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>corruption without SB Live! but with things like 3 UDMA IDE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>controllers. So we ignore that bit of the VIA recommendation..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x76, &amp;<a class=\"id\" href=\"#busarb\">busarb</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Set bit 4 and bi 5 of byte 76 to 0x01 </span>", 
"<span class=\"comment\"><span class=\"ts\"/>   \"Master priority rotation on every PCI master grant */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#busarb\">busarb</a> &= ~(1<<5);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#busarb\">busarb</a> |= (1<<4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x76, <a class=\"id\" href=\"#busarb\">busarb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Applying VIA southbridge workaround\\n\");", 
"<a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8363_0\">PCI_DEVICE_ID_VIA_8363_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_vialatency\">quirk_vialatency</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8371_1\">PCI_DEVICE_ID_VIA_8371_1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_vialatency\">quirk_vialatency</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8361\">PCI_DEVICE_ID_VIA_8361</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_vialatency\">quirk_vialatency</a>);", 
"<span class=\"comment\">/* Must restore this on a resume from RAM */</span>", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8363_0\">PCI_DEVICE_ID_VIA_8363_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_vialatency\">quirk_vialatency</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8371_1\">PCI_DEVICE_ID_VIA_8371_1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_vialatency\">quirk_vialatency</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8361\">PCI_DEVICE_ID_VIA_8361</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_vialatency\">quirk_vialatency</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>VIA Apollo VP3 needs ETBF on BT848/878</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_viaetbf\">quirk_viaetbf</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a>&amp;<a class=\"id\" href=\"#PCIPCI_VIAETBF\">PCIPCI_VIAETBF</a>)==0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Limiting direct PCI/PCI transfers\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a> |= <a class=\"id\" href=\"#PCIPCI_VIAETBF\">PCIPCI_VIAETBF</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C597_0\">PCI_DEVICE_ID_VIA_82C597_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_viaetbf\">quirk_viaetbf</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_vsfx\">quirk_vsfx</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a>&amp;<a class=\"id\" href=\"#PCIPCI_VSFX\">PCIPCI_VSFX</a>)==0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Limiting direct PCI/PCI transfers\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a> |= <a class=\"id\" href=\"#PCIPCI_VSFX\">PCIPCI_VSFX</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C576\">PCI_DEVICE_ID_VIA_82C576</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_vsfx\">quirk_vsfx</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Ali Magik requires workarounds to be used by the drivers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that DMA to AGP space. Latency must be set to 0xA and triton</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>workaround applied too</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>[Info kindly provided by ALi]</span>", 
"<span class=\"comment\"> */</span><span class=\"ts\"/>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#quirk_alimagik\">quirk_alimagik</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a>&amp;<a class=\"id\" href=\"#PCIPCI_ALIMAGIK\">PCIPCI_ALIMAGIK</a>)==0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Limiting direct PCI/PCI transfers\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a> |= <a class=\"id\" href=\"#PCIPCI_ALIMAGIK\">PCIPCI_ALIMAGIK</a>|<a class=\"id\" href=\"#PCIPCI_TRITON\">PCIPCI_TRITON</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AL\">PCI_VENDOR_ID_AL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AL_M1647\">PCI_DEVICE_ID_AL_M1647</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_alimagik\">quirk_alimagik</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AL\">PCI_VENDOR_ID_AL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AL_M1651\">PCI_DEVICE_ID_AL_M1651</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_alimagik\">quirk_alimagik</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Natoma has some interesting boundary conditions with Zoran stuff</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>at least</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_natoma\">quirk_natoma</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a>&amp;<a class=\"id\" href=\"#PCIPCI_NATOMA\">PCIPCI_NATOMA</a>)==0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Limiting direct PCI/PCI transfers\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_pci_problems\">pci_pci_problems</a> |= <a class=\"id\" href=\"#PCIPCI_NATOMA\">PCIPCI_NATOMA</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82441\">PCI_DEVICE_ID_INTEL_82441</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_natoma\">quirk_natoma</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82443LX_0\">PCI_DEVICE_ID_INTEL_82443LX_0</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_natoma\">quirk_natoma</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82443LX_1\">PCI_DEVICE_ID_INTEL_82443LX_1</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_natoma\">quirk_natoma</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82443BX_0\">PCI_DEVICE_ID_INTEL_82443BX_0</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_natoma\">quirk_natoma</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82443BX_1\">PCI_DEVICE_ID_INTEL_82443BX_1</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_natoma\">quirk_natoma</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82443BX_2\">PCI_DEVICE_ID_INTEL_82443BX_2</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_natoma\">quirk_natoma</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  This chip can cause PCI parity errors if config register 0xA0 is read</span>", 
"<span class=\"comment\"> *  while DMAs are occurring.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_citrine\">quirk_citrine</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cfg_size\">cfg_size</a> = 0xA0;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_IBM\">PCI_VENDOR_ID_IBM</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_IBM_CITRINE\">PCI_DEVICE_ID_IBM_CITRINE</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_citrine\">quirk_citrine</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  S3 868 and 968 chips report region size equal to 32M, but they decode 64M.</span>", 
"<span class=\"comment\"> *  If it's needed, re-allocate the region.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_s3_64M\">quirk_s3_64M</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[0];", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> &amp; 0x3ffffff) || <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> != <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> + 0x3ffffff) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> = 0x3ffffff;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_S3\">PCI_VENDOR_ID_S3</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_S3_868\">PCI_DEVICE_ID_S3_868</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_s3_64M\">quirk_s3_64M</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_S3\">PCI_VENDOR_ID_S3</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_S3_968\">PCI_DEVICE_ID_S3_968</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_s3_64M\">quirk_s3_64M</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some CS5536 BIOSes (for example, the Soekris NET5501 board w/ comBIOS</span>", 
"<span class=\"comment\"> * ver. 1.33  20070103) don't set the correct ISA PCI region header info.</span>", 
"<span class=\"comment\"> * BAR0 should be 8 bytes; instead, it may be set to something like 8k</span>", 
"<span class=\"comment\"> * (which conflicts w/ BAR1's memory range).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_cs5536_vsa\">quirk_cs5536_vsa</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0) != 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> + 8 - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"CS5536 ISA bridge bug detected \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"(incorrect header); workaround applied.\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_CS5536_ISA\">PCI_DEVICE_ID_AMD_CS5536_ISA</a>, <a class=\"id\" href=\"#quirk_cs5536_vsa\">quirk_cs5536_vsa</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned <a class=\"id\" href=\"#region\">region</a>,", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#nr\">nr</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a> &= ~(<a class=\"id\" href=\"#size\">size</a>-1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#region\">region</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus_region\">pci_bus_region</a> <a class=\"id\" href=\"#bus_region\">bus_region</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a> + <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#pci_name\">pci_name</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#region\">region</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#region\">region</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Convert from PCI bus to resource space.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus_region\">bus_region</a>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus_region\">bus_region</a>.<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcibios_bus_to_resource\">pcibios_bus_to_resource</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#res\">res</a>, &amp;<a class=\"id\" href=\"#bus_region\">bus_region</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_claim_resource\">pci_claim_resource</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#nr\">nr</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"quirk: %pR claimed by %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"}<span class=\"ts\"/>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ATI Northbridge setups MCE the processor if you even</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>read somewhere between 0x3b0-&gt;0x3bb or read 0x3d3</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_ati_exploding_mce\">quirk_ati_exploding_mce</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"ATI Northbridge, reserving I/O ports 0x3b0 to 0x3bb\\n\");", 
"<span class=\"ts\"/><span class=\"comment\">/* Mae rhaid i ni beidio ag edrych ar y lleoliadiau I/O hyn */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#request_region\">request_region</a>(0x3b0, 0x0C, \"RadeonIGP\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#request_region\">request_region</a>(0x3d3, 0x01, \"RadeonIGP\");", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_ATI_RS100\">PCI_DEVICE_ID_ATI_RS100</a>,   <a class=\"id\" href=\"#quirk_ati_exploding_mce\">quirk_ati_exploding_mce</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Let's make the southbridge information explicit instead</span>", 
"<span class=\"comment\"> * of having to worry about people probing the ACPI areas,</span>", 
"<span class=\"comment\"> * for example.. (Yes, it happens, and if you read the wrong</span>", 
"<span class=\"comment\"> * ACPI register it will put the machine to sleep with no</span>", 
"<span class=\"comment\"> * way of waking it up again. Bummer).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ALI M7101: Two IO regions pointed to by words at</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0xE0 (64 bytes of ACPI registers)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0xE2 (32 bytes of SMB registers)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_ali7101_acpi\">quirk_ali7101_acpi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#region\">region</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xE0, &amp;<a class=\"id\" href=\"#region\">region</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#region\">region</a>, 64, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>, \"ali7101 ACPI\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xE2, &amp;<a class=\"id\" href=\"#region\">region</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#region\">region</a>, 32, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>+1, \"ali7101 SMB\");", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AL\">PCI_VENDOR_ID_AL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AL_M7101\">PCI_DEVICE_ID_AL_M7101</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_ali7101_acpi\">quirk_ali7101_acpi</a>);", 
"", 
"static void <a class=\"id\" href=\"#piix4_io_quirk\">piix4_io_quirk</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#name\">name</a>, unsigned int <a class=\"id\" href=\"#port\">port</a>, unsigned int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#devres\">devres</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#port\">port</a>, &amp;<a class=\"id\" href=\"#devres\">devres</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#devres\">devres</a> &amp; <a class=\"id\" href=\"#enable\">enable</a>) != <a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = (<a class=\"id\" href=\"#devres\">devres</a> >> 16) &amp; 15;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#devres\">devres</a> &amp; 0xffff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 16;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#size\">size</a> >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#bit\">bit</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) == <a class=\"id\" href=\"#bit\">bit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For now we only print it out. Eventually we'll want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reserve it (at least if it's in the 0x1000+ range), but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * let's get enough confirmation reports first. </span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> &= -<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%s PIO at %04x-%04x\\n\", <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#size\">size</a> - 1);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#piix4_mem_quirk\">piix4_mem_quirk</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#name\">name</a>, unsigned int <a class=\"id\" href=\"#port\">port</a>, unsigned int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#devres\">devres</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#port\">port</a>, &amp;<a class=\"id\" href=\"#devres\">devres</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#devres\">devres</a> &amp; <a class=\"id\" href=\"#enable\">enable</a>) != <a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#devres\">devres</a> &amp; 0xffff0000;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = (<a class=\"id\" href=\"#devres\">devres</a> &amp; 0x3f) << 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 128 << 16;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#size\">size</a> >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#bit\">bit</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) == <a class=\"id\" href=\"#bit\">bit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For now we only print it out. Eventually we'll want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reserve it, but let's get enough confirmation reports first. </span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> &= -<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%s MMIO at %04x-%04x\\n\", <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#size\">size</a> - 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PIIX4 ACPI: Two IO regions pointed to by longwords at</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0x40 (64 bytes of ACPI registers)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0x90 (16 bytes of SMB registers)</span>", 
"<span class=\"comment\"> * and a few strange programmable PIIX4 device resources.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_piix4_acpi\">quirk_piix4_acpi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#region\">region</a>, <a class=\"id\" href=\"#res_a\">res_a</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x40, &amp;<a class=\"id\" href=\"#region\">region</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#region\">region</a>, 64, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>, \"PIIX4 ACPI\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x90, &amp;<a class=\"id\" href=\"#region\">region</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#region\">region</a>, 16, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>+1, \"PIIX4 SMB\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Device resource A has enables for some of the other ones */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x5c, &amp;<a class=\"id\" href=\"#res_a\">res_a</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#piix4_io_quirk\">piix4_io_quirk</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"PIIX4 devres B\", 0x60, 3 << 21);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#piix4_io_quirk\">piix4_io_quirk</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"PIIX4 devres C\", 0x64, 3 << 21);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Device resource D is just bitfields for static resources */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Device 12 enabled? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res_a\">res_a</a> &amp; (1 << 29)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#piix4_io_quirk\">piix4_io_quirk</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"PIIX4 devres E\", 0x68, 1 << 20);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#piix4_mem_quirk\">piix4_mem_quirk</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"PIIX4 devres F\", 0x6c, 1 << 7);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Device 13 enabled? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res_a\">res_a</a> &amp; (1 << 30)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#piix4_io_quirk\">piix4_io_quirk</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"PIIX4 devres G\", 0x70, 1 << 20);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#piix4_mem_quirk\">piix4_mem_quirk</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"PIIX4 devres H\", 0x74, 1 << 7);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#piix4_io_quirk\">piix4_io_quirk</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"PIIX4 devres I\", 0x78, 1 << 20);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#piix4_io_quirk\">piix4_io_quirk</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"PIIX4 devres J\", 0x7c, 1 << 20);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82371AB_3\">PCI_DEVICE_ID_INTEL_82371AB_3</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_piix4_acpi\">quirk_piix4_acpi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82443MX_3\">PCI_DEVICE_ID_INTEL_82443MX_3</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_piix4_acpi\">quirk_piix4_acpi</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ICH4, ICH4-M, ICH5, ICH5-M ACPI: Three IO regions pointed to by longwords at</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0x40 (128 bytes of ACPI, GPIO &amp; TCO registers)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0x58 (64 bytes of GPIO I/O space)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_ich4_lpc_acpi\">quirk_ich4_lpc_acpi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#region\">region</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x40, &amp;<a class=\"id\" href=\"#region\">region</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#region\">region</a>, 128, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>, \"ICH4 ACPI/GPIO/TCO\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x58, &amp;<a class=\"id\" href=\"#region\">region</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#region\">region</a>, 64, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>+1, \"ICH4 GPIO\");", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,    <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82801AA_0\">PCI_DEVICE_ID_INTEL_82801AA_0</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_ich4_lpc_acpi\">quirk_ich4_lpc_acpi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,    <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82801AB_0\">PCI_DEVICE_ID_INTEL_82801AB_0</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_ich4_lpc_acpi\">quirk_ich4_lpc_acpi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,    <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82801BA_0\">PCI_DEVICE_ID_INTEL_82801BA_0</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_ich4_lpc_acpi\">quirk_ich4_lpc_acpi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,    <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82801BA_10\">PCI_DEVICE_ID_INTEL_82801BA_10</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_ich4_lpc_acpi\">quirk_ich4_lpc_acpi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,    <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82801CA_0\">PCI_DEVICE_ID_INTEL_82801CA_0</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_ich4_lpc_acpi\">quirk_ich4_lpc_acpi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,    <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82801CA_12\">PCI_DEVICE_ID_INTEL_82801CA_12</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_ich4_lpc_acpi\">quirk_ich4_lpc_acpi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,    <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82801DB_0\">PCI_DEVICE_ID_INTEL_82801DB_0</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_ich4_lpc_acpi\">quirk_ich4_lpc_acpi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,    <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82801DB_12\">PCI_DEVICE_ID_INTEL_82801DB_12</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_ich4_lpc_acpi\">quirk_ich4_lpc_acpi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,    <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82801EB_0\">PCI_DEVICE_ID_INTEL_82801EB_0</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_ich4_lpc_acpi\">quirk_ich4_lpc_acpi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,    <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ESB_1\">PCI_DEVICE_ID_INTEL_ESB_1</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_ich4_lpc_acpi\">quirk_ich4_lpc_acpi</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#ich6_lpc_acpi_gpio\">ich6_lpc_acpi_gpio</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#region\">region</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x40, &amp;<a class=\"id\" href=\"#region\">region</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#region\">region</a>, 128, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>, \"ICH6 ACPI/GPIO/TCO\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x48, &amp;<a class=\"id\" href=\"#region\">region</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#region\">region</a>, 64, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>+1, \"ICH6 GPIO\");", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#ich6_lpc_generic_decode\">ich6_lpc_generic_decode</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned <a class=\"id\" href=\"#reg\">reg</a>, const char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#dynsize\">dynsize</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#reg\">reg</a>, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Enabled? */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#val\">val</a> &amp; 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#val\">val</a> &amp; 0xfffc;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dynsize\">dynsize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is not correct. It is 16, 32 or 64 bytes depending on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * register D31:F0:ADh bits 5:4.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But this gets us at least _part_ of it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 16;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 128;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> &= ~(<a class=\"id\" href=\"#size\">size</a>-1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Just print it out for now. We should reserve it after more debugging */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%s PIO at %04x-%04x\\n\", <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#base\">base</a>+<a class=\"id\" href=\"#size\">size</a>-1);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_ich6_lpc\">quirk_ich6_lpc</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Shared ACPI/GPIO decode with all ICH6+ */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ich6_lpc_acpi_gpio\">ich6_lpc_acpi_gpio</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ICH6-specific generic IO decode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ich6_lpc_generic_decode\">ich6_lpc_generic_decode</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x84, \"LPC Generic IO decode 1\", 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ich6_lpc_generic_decode\">ich6_lpc_generic_decode</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x88, \"LPC Generic IO decode 2\", 1);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH6_0\">PCI_DEVICE_ID_INTEL_ICH6_0</a>, <a class=\"id\" href=\"#quirk_ich6_lpc\">quirk_ich6_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH6_1\">PCI_DEVICE_ID_INTEL_ICH6_1</a>, <a class=\"id\" href=\"#quirk_ich6_lpc\">quirk_ich6_lpc</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#ich7_lpc_generic_decode\">ich7_lpc_generic_decode</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned <a class=\"id\" href=\"#reg\">reg</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#reg\">reg</a>, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Enabled? */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#val\">val</a> &amp; 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IO base in bits 15:2, mask in bits 23:18, both</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are dword-based</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#val\">val</a> &amp; 0xfffc;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = (<a class=\"id\" href=\"#val\">val</a> >> 16) &amp; 0xfc;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= 3;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Just print it out for now. We should reserve it after more debugging */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%s PIO at %04x (mask %04x)\\n\", <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"", 
"<span class=\"comment\">/* ICH7-10 has the same common LPC generic IO decode registers */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We share the common ACPI/DPIO decode with ICH6 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ich6_lpc_acpi_gpio\">ich6_lpc_acpi_gpio</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* And have 4 ICH7+ generic decodes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ich7_lpc_generic_decode\">ich7_lpc_generic_decode</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x84, \"ICH7 LPC Generic IO decode 1\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ich7_lpc_generic_decode\">ich7_lpc_generic_decode</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x88, \"ICH7 LPC Generic IO decode 2\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ich7_lpc_generic_decode\">ich7_lpc_generic_decode</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x8c, \"ICH7 LPC Generic IO decode 3\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ich7_lpc_generic_decode\">ich7_lpc_generic_decode</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x90, \"ICH7 LPC Generic IO decode 4\");", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH7_0\">PCI_DEVICE_ID_INTEL_ICH7_0</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH7_1\">PCI_DEVICE_ID_INTEL_ICH7_1</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH7_31\">PCI_DEVICE_ID_INTEL_ICH7_31</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH8_0\">PCI_DEVICE_ID_INTEL_ICH8_0</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH8_2\">PCI_DEVICE_ID_INTEL_ICH8_2</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH8_3\">PCI_DEVICE_ID_INTEL_ICH8_3</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH8_1\">PCI_DEVICE_ID_INTEL_ICH8_1</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH8_4\">PCI_DEVICE_ID_INTEL_ICH8_4</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH9_2\">PCI_DEVICE_ID_INTEL_ICH9_2</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH9_4\">PCI_DEVICE_ID_INTEL_ICH9_4</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH9_7\">PCI_DEVICE_ID_INTEL_ICH9_7</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH9_8\">PCI_DEVICE_ID_INTEL_ICH9_8</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,   <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ICH10_1\">PCI_DEVICE_ID_INTEL_ICH10_1</a>, <a class=\"id\" href=\"#quirk_ich7_lpc\">quirk_ich7_lpc</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VIA ACPI: One IO region pointed to by longword at</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0x48 or 0x20 (256 bytes of ACPI registers)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_vt82c586_acpi\">quirk_vt82c586_acpi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#region\">region</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#revision\">revision</a> &amp; 0x10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x48, &amp;<a class=\"id\" href=\"#region\">region</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a> &= <a class=\"id\" href=\"#PCI_BASE_ADDRESS_IO_MASK\">PCI_BASE_ADDRESS_IO_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#region\">region</a>, 256, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>, \"vt82c586 ACPI\");", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C586_3\">PCI_DEVICE_ID_VIA_82C586_3</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_vt82c586_acpi\">quirk_vt82c586_acpi</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VIA VT82C686 ACPI: Three IO region pointed to by (long)words at</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0x48 (256 bytes of ACPI registers)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0x70 (128 bytes of hardware monitoring register)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0x90 (16 bytes of SMB registers)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_vt82c686_acpi\">quirk_vt82c686_acpi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#hm\">hm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#smb\">smb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_vt82c586_acpi\">quirk_vt82c586_acpi</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x70, &amp;<a class=\"id\" href=\"#hm\">hm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hm\">hm</a> &= <a class=\"id\" href=\"#PCI_BASE_ADDRESS_IO_MASK\">PCI_BASE_ADDRESS_IO_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#hm\">hm</a>, 128, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a> + 1, \"vt82c686 HW-mon\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x90, &amp;<a class=\"id\" href=\"#smb\">smb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smb\">smb</a> &= <a class=\"id\" href=\"#PCI_BASE_ADDRESS_IO_MASK\">PCI_BASE_ADDRESS_IO_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#smb\">smb</a>, 16, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a> + 2, \"vt82c686 SMB\");", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C686_4\">PCI_DEVICE_ID_VIA_82C686_4</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_vt82c686_acpi\">quirk_vt82c686_acpi</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VIA VT8235 ISA Bridge: Two IO regions pointed to by words at</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0x88 (128 bytes of power management registers)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0xd0 (16 bytes of SMB registers)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_vt8235_acpi\">quirk_vt8235_acpi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pm\">pm</a>, <a class=\"id\" href=\"#smb\">smb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x88, &amp;<a class=\"id\" href=\"#pm\">pm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm\">pm</a> &= <a class=\"id\" href=\"#PCI_BASE_ADDRESS_IO_MASK\">PCI_BASE_ADDRESS_IO_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm\">pm</a>, 128, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>, \"vt8235 PM\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xd0, &amp;<a class=\"id\" href=\"#smb\">smb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smb\">smb</a> &= <a class=\"id\" href=\"#PCI_BASE_ADDRESS_IO_MASK\">PCI_BASE_ADDRESS_IO_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quirk_io_region\">quirk_io_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#smb\">smb</a>, 16, <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a> + 1, \"vt8235 SMB\");", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8235\">PCI_DEVICE_ID_VIA_8235</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_vt8235_acpi\">quirk_vt8235_acpi</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * TI XIO2000a PCIe-PCI Bridge erroneously reports it supports fast back-to-back:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Disable fast back-to-back on the secondary bus segment</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_xio2000a\">quirk_xio2000a</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#command\">command</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"TI XIO2000a quirk detected; \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"secondary bus fast back-to-back transfers disabled\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#command\">command</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#command\">command</a> &amp; <a class=\"id\" href=\"#PCI_COMMAND_FAST_BACK\">PCI_COMMAND_FAST_BACK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, <a class=\"id\" href=\"#command\">command</a> &amp; ~<a class=\"id\" href=\"#PCI_COMMAND_FAST_BACK\">PCI_COMMAND_FAST_BACK</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_TI\">PCI_VENDOR_ID_TI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_TI_XIO2000A\">PCI_DEVICE_ID_TI_XIO2000A</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_xio2000a\">quirk_xio2000a</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a> ", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io_apic\">io_apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VIA 686A/B: If an IO-APIC is active, we need to route all on-chip</span>", 
"<span class=\"comment\"> * devices to the external APIC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TODO: When we have device-specific interrupt routers,</span>", 
"<span class=\"comment\"> * this code will go away from quirks.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#quirk_via_ioapic\">quirk_via_ioapic</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_ioapics\">nr_ioapics</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = 0;    <span class=\"comment\">/* nothing routed to external APIC */</span>", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = 0x1f; <span class=\"comment\">/* all known bits (4-0) routed to external APIC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%sbling VIA external APIC routing\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#tmp\">tmp</a> == 0 ? \"Disa\" : \"Ena\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Offset 0x58: External APIC IRQ output control */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a> (<a class=\"id\" href=\"#dev\">dev</a>, 0x58, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C686\">PCI_DEVICE_ID_VIA_82C686</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_ioapic\">quirk_via_ioapic</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C686\">PCI_DEVICE_ID_VIA_82C686</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_ioapic\">quirk_via_ioapic</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VIA 8237: Some BIOSs don't set the 'Bypass APIC De-Assert Message' Bit.</span>", 
"<span class=\"comment\"> * This leads to doubled level interrupt rates.</span>", 
"<span class=\"comment\"> * Set this bit to get rid of cycle wastage.</span>", 
"<span class=\"comment\"> * Otherwise uncritical.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#quirk_via_vt8237_bypass_apic_deassert\">quirk_via_vt8237_bypass_apic_deassert</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#misc_control2\">misc_control2</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BYPASS_APIC_DEASSERT\">BYPASS_APIC_DEASSERT</a> 8", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x5B, &amp;<a class=\"id\" href=\"#misc_control2\">misc_control2</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#misc_control2\">misc_control2</a> &amp; <a class=\"id\" href=\"#BYPASS_APIC_DEASSERT\">BYPASS_APIC_DEASSERT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Bypassing VIA 8237 APIC De-Assert Message\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x5B, <a class=\"id\" href=\"#misc_control2\">misc_control2</a>|<a class=\"id\" href=\"#BYPASS_APIC_DEASSERT\">BYPASS_APIC_DEASSERT</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8237\">PCI_DEVICE_ID_VIA_8237</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_vt8237_bypass_apic_deassert\">quirk_via_vt8237_bypass_apic_deassert</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8237\">PCI_DEVICE_ID_VIA_8237</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_vt8237_bypass_apic_deassert\">quirk_via_vt8237_bypass_apic_deassert</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The AMD io apic can hang the box when an apic irq is masked.</span>", 
"<span class=\"comment\"> * We check all revs &gt;= B0 (yet not in the pre production!) as the bug</span>", 
"<span class=\"comment\"> * is currently marked NoFix</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We have multiple reports of hangs with this chipset that went away with</span>", 
"<span class=\"comment\"> * noapic specified. For the moment we assume it's the erratum. We may be wrong</span>", 
"<span class=\"comment\"> * of course. However the advice is demonstrably good even if so..</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_amd_ioapic\">quirk_amd_ioapic</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#revision\">revision</a> >= 0x02) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"I/O APIC: AMD Erratum #22 may be present. In the event of instability try\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"        : booting with the \\\"noapic\\\" option\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_VIPER_7410\">PCI_DEVICE_ID_AMD_VIPER_7410</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_amd_ioapic\">quirk_amd_ioapic</a>);", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#quirk_ioapic_rmw\">quirk_ioapic_rmw</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a> == 0 && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#number\">number</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sis_apic_bug\">sis_apic_bug</a> = 1;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SI\">PCI_VENDOR_ID_SI</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_ioapic_rmw\">quirk_ioapic_rmw</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_IO_APIC */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some settings of MMRBC can lead to data corruption so block changes.</span>", 
"<span class=\"comment\"> * See AMD 8131 HyperTransport PCI-X Tunnel Revision Guide</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#quirk_amd_8131_mmrbc\">quirk_amd_8131_mmrbc</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#revision\">revision</a> <= 0x12) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"AMD8131 rev %x detected; \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"disabling PCI-X MMRBC\\n\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#revision\">revision</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>-><a class=\"id\" href=\"#bus_flags\">bus_flags</a> |= <a class=\"id\" href=\"#PCI_BUS_FLAGS_NO_MMRBC\">PCI_BUS_FLAGS_NO_MMRBC</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_8131_BRIDGE\">PCI_DEVICE_ID_AMD_8131_BRIDGE</a>, <a class=\"id\" href=\"#quirk_amd_8131_mmrbc\">quirk_amd_8131_mmrbc</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * FIXME: it is questionable that quirk_via_acpi</span>", 
"<span class=\"comment\"> * is needed.  It shows up as an ISA bridge, and does not</span>", 
"<span class=\"comment\"> * support the PCI_INTERRUPT_LINE register at all.  Therefore</span>", 
"<span class=\"comment\"> * it seems like setting the pci_dev's 'irq' to the</span>", 
"<span class=\"comment\"> * value of the ACPI SCI interrupt is only done for convenience.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>-jgarzik</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_via_acpi\">quirk_via_acpi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * VIA ACPI device: SCI IRQ line in PCI config byte 0x42</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#d\">d</a>, 0x42, &amp;<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a> &= 0xf;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irq\">irq</a> && (<a class=\"id\" href=\"#irq\">irq</a> != 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#irq\">irq</a>;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C586_3\">PCI_DEVICE_ID_VIA_82C586_3</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_acpi\">quirk_via_acpi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C686_4\">PCI_DEVICE_ID_VIA_82C686_4</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_acpi\">quirk_via_acpi</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>VIA bridges which have VLink</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#via_vlink_dev_lo\">via_vlink_dev_lo</a> = -1, <a class=\"id\" href=\"#via_vlink_dev_hi\">via_vlink_dev_hi</a> = 18;", 
"", 
"static void <a class=\"id\" href=\"#quirk_via_bridge\">quirk_via_bridge</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* See what bridge we have and find the device ranges */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C686\">PCI_DEVICE_ID_VIA_82C686</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The VT82C686 is special, it attaches to PCI and can have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   any device number. All its subdevices are functions of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   that single device. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#via_vlink_dev_lo\">via_vlink_dev_lo</a> = <a class=\"id\" href=\"#PCI_SLOT\">PCI_SLOT</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#via_vlink_dev_hi\">via_vlink_dev_hi</a> = <a class=\"id\" href=\"#PCI_SLOT\">PCI_SLOT</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8237\">PCI_DEVICE_ID_VIA_8237</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8237A\">PCI_DEVICE_ID_VIA_8237A</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#via_vlink_dev_lo\">via_vlink_dev_lo</a> = 15;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8235\">PCI_DEVICE_ID_VIA_8235</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#via_vlink_dev_lo\">via_vlink_dev_lo</a> = 16;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8231\">PCI_DEVICE_ID_VIA_8231</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8233_0\">PCI_DEVICE_ID_VIA_8233_0</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8233A\">PCI_DEVICE_ID_VIA_8233A</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8233C_0\">PCI_DEVICE_ID_VIA_8233C_0</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#via_vlink_dev_lo\">via_vlink_dev_lo</a> = 17;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C686\">PCI_DEVICE_ID_VIA_82C686</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_bridge\">quirk_via_bridge</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8231\">PCI_DEVICE_ID_VIA_8231</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_bridge\">quirk_via_bridge</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8233_0\">PCI_DEVICE_ID_VIA_8233_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_bridge\">quirk_via_bridge</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8233A\">PCI_DEVICE_ID_VIA_8233A</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_bridge\">quirk_via_bridge</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8233C_0\">PCI_DEVICE_ID_VIA_8233C_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_bridge\">quirk_via_bridge</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8235\">PCI_DEVICE_ID_VIA_8235</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_bridge\">quirk_via_bridge</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8237\">PCI_DEVICE_ID_VIA_8237</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_bridge\">quirk_via_bridge</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8237A\">PCI_DEVICE_ID_VIA_8237A</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_via_bridge\">quirk_via_bridge</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>quirk_via_vlink<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>VIA VLink IRQ number update</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: PCI device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the device we are dealing with is on a PIC IRQ we need to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ensure that the IRQ line register which usually is not relevant</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for PCI cards, is actually written so that interrupts get sent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to the right place.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We only do this on systems where a VIA south bridge was detected,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and only for VIA devices on the motherboard (see quirk_via_bridge</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>above).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#quirk_via_vlink\">quirk_via_vlink</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#new_irq\">new_irq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if we have VLink at all */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#via_vlink_dev_lo\">via_vlink_dev_lo</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_irq\">new_irq</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#irq\">irq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't quirk interrupts outside the legacy IRQ range */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_irq\">new_irq</a> || <a class=\"id\" href=\"#new_irq\">new_irq</a> &gt; 15)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Internal device ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#number\">number</a> != 0 || <a class=\"id\" href=\"#PCI_SLOT\">PCI_SLOT</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>) &gt; <a class=\"id\" href=\"#via_vlink_dev_hi\">via_vlink_dev_hi</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#PCI_SLOT\">PCI_SLOT</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>) &lt; <a class=\"id\" href=\"#via_vlink_dev_lo\">via_vlink_dev_lo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is an internal VLink device on a PIC interrupt. The BIOS</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   ought to have set this but may not have, so we redo it */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_INTERRUPT_LINE\">PCI_INTERRUPT_LINE</a>, &amp;<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_irq\">new_irq</a> != <a class=\"id\" href=\"#irq\">irq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"VIA VLink IRQ fixup, from %d to %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#new_irq\">new_irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(15);<span class=\"ts\"/><span class=\"comment\">/* unknown if delay really needed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_INTERRUPT_LINE\">PCI_INTERRUPT_LINE</a>, <a class=\"id\" href=\"#new_irq\">new_irq</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_ENABLE\">DECLARE_PCI_FIXUP_ENABLE</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#quirk_via_vlink\">quirk_via_vlink</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VIA VT82C598 has its device ID settable and many BIOSes</span>", 
"<span class=\"comment\"> * set it to the ID of VT82C597 for backward compatibility.</span>", 
"<span class=\"comment\"> * We need to switch it off to be able to recognize the real</span>", 
"<span class=\"comment\"> * type of the chip.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_vt82c598_id\">quirk_vt82c598_id</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xfc, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID\">PCI_DEVICE_ID</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_82C597_0\">PCI_DEVICE_ID_VIA_82C597_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_vt82c598_id\">quirk_vt82c598_id</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CardBus controllers have a legacy base address that enables them</span>", 
"<span class=\"comment\"> * to respond as i82365 pcmcia controllers.  We don't want them to</span>", 
"<span class=\"comment\"> * do this even if the Linux CardBus driver is not loaded, because</span>", 
"<span class=\"comment\"> * the Linux i82365 driver does not (and should not) handle CardBus.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#quirk_cardbus_legacy\">quirk_cardbus_legacy</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#PCI_CLASS_BRIDGE_CARDBUS\">PCI_CLASS_BRIDGE_CARDBUS</a> << 8) ^ <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CB_LEGACY_MODE_BASE\">PCI_CB_LEGACY_MODE_BASE</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#quirk_cardbus_legacy\">quirk_cardbus_legacy</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#quirk_cardbus_legacy\">quirk_cardbus_legacy</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Following the PCI ordering rules is optional on the AMD762. I'm not</span>", 
"<span class=\"comment\"> * sure what the designers were smoking but let's not inhale...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To be fair to AMD, it follows the spec by default, its BIOS people</span>", 
"<span class=\"comment\"> * who turn it off!</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#quirk_amd_ordering\">quirk_amd_ordering</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pcic\">pcic</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x4C, &amp;<a class=\"id\" href=\"#pcic\">pcic</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pcic\">pcic</a>&amp;6)!=6) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcic\">pcic</a> |= 6;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"BIOS failed to enable PCI standards compliance; fixing this error\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x4C, <a class=\"id\" href=\"#pcic\">pcic</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x84, &amp;<a class=\"id\" href=\"#pcic\">pcic</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcic\">pcic</a> |= (1<<23);<span class=\"ts\"/><span class=\"comment\">/* Required in this mode */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x84, <a class=\"id\" href=\"#pcic\">pcic</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_FE_GATE_700C\">PCI_DEVICE_ID_AMD_FE_GATE_700C</a>, <a class=\"id\" href=\"#quirk_amd_ordering\">quirk_amd_ordering</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_FE_GATE_700C\">PCI_DEVICE_ID_AMD_FE_GATE_700C</a>, <a class=\"id\" href=\"#quirk_amd_ordering\">quirk_amd_ordering</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>DreamWorks provided workaround for Dunord I-3000 problem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This card decodes and responds to addresses not apparently</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>assigned to it. We force a larger allocation to ensure that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>nothing gets put too close to it.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_dunord\">quirk_dunord</a> ( struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> * <a class=\"id\" href=\"#dev\">dev</a> )", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a> [1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> = 0xffffff;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_DUNORD\">PCI_VENDOR_ID_DUNORD</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_DUNORD_I3000\">PCI_DEVICE_ID_DUNORD_I3000</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_dunord\">quirk_dunord</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i82380FB mobile docking controller: its PCI-to-PCI bridge</span>", 
"<span class=\"comment\"> * is subtractive decoding (transparent), and does indicate this</span>", 
"<span class=\"comment\"> * in the ProgIf. Unfortunately, the ProgIf value is wrong - 0x80</span>", 
"<span class=\"comment\"> * instead of 0x01.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_transparent_bridge\">quirk_transparent_bridge</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#transparent\">transparent</a> = 1;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82380FB\">PCI_DEVICE_ID_INTEL_82380FB</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_transparent_bridge\">quirk_transparent_bridge</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_TOSHIBA\">PCI_VENDOR_ID_TOSHIBA</a>,<span class=\"ts\"/>0x605,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_transparent_bridge\">quirk_transparent_bridge</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Common misconfiguration of the MediaGX/Geode PCI master that will</span>", 
"<span class=\"comment\"> * reduce PCI bandwidth from 70MB/s to 25MB/s.  See the GXM/GXLV/GX1</span>", 
"<span class=\"comment\"> * datasheets found at http://www.national.com/ds/GX for info on what</span>", 
"<span class=\"comment\"> * these bits do.  &lt;christer@weinigel.se&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#quirk_mediagx_master\">quirk_mediagx_master</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#reg\">reg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x41, &amp;<a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a> &amp; 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> &= ~2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Fixup for MediaGX/Geode Slave Disconnect Boundary (0x41=0x%02x)\\n\", <a class=\"id\" href=\"#reg\">reg</a>);", 
"                <a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x41, <a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_CYRIX\">PCI_VENDOR_ID_CYRIX</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_CYRIX_PCI_MASTER\">PCI_DEVICE_ID_CYRIX_PCI_MASTER</a>, <a class=\"id\" href=\"#quirk_mediagx_master\">quirk_mediagx_master</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_CYRIX\">PCI_VENDOR_ID_CYRIX</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_CYRIX_PCI_MASTER\">PCI_DEVICE_ID_CYRIX_PCI_MASTER</a>, <a class=\"id\" href=\"#quirk_mediagx_master\">quirk_mediagx_master</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Ensure C0 rev restreaming is off. This is normally done by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the BIOS but in the odd case it is not the results are corruption</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hence the presence of a Linux check</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#quirk_disable_pxb\">quirk_disable_pxb</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#config\">config</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#revision\">revision</a> != 0x04)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Only C0 requires this */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0x40, &amp;<a class=\"id\" href=\"#config\">config</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#config\">config</a> &amp; (1<<6)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#config\">config</a> &= ~(1<<6);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0x40, <a class=\"id\" href=\"#config\">config</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"C0 revision 450NX. Disabling PCI restreaming\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82454NX\">PCI_DEVICE_ID_INTEL_82454NX</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_pxb\">quirk_disable_pxb</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82454NX\">PCI_DEVICE_ID_INTEL_82454NX</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_pxb\">quirk_disable_pxb</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_amd_ide_mode\">quirk_amd_ide_mode</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* set SBX00/Hudson-2 SATA in IDE mode to AHCI mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_CLASS_DEVICE\">PCI_CLASS_DEVICE</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == 0x01) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0x40, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0x40, <a class=\"id\" href=\"#tmp\">tmp</a>|1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0x9, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0xa, 6);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0x40, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#PCI_CLASS_STORAGE_SATA_AHCI\">PCI_CLASS_STORAGE_SATA_AHCI</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"set SATA to AHCI mode\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_ATI_IXP600_SATA\">PCI_DEVICE_ID_ATI_IXP600_SATA</a>, <a class=\"id\" href=\"#quirk_amd_ide_mode\">quirk_amd_ide_mode</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_ATI_IXP600_SATA\">PCI_DEVICE_ID_ATI_IXP600_SATA</a>, <a class=\"id\" href=\"#quirk_amd_ide_mode\">quirk_amd_ide_mode</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_ATI_IXP700_SATA\">PCI_DEVICE_ID_ATI_IXP700_SATA</a>, <a class=\"id\" href=\"#quirk_amd_ide_mode\">quirk_amd_ide_mode</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_ATI_IXP700_SATA\">PCI_DEVICE_ID_ATI_IXP700_SATA</a>, <a class=\"id\" href=\"#quirk_amd_ide_mode\">quirk_amd_ide_mode</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_HUDSON2_SATA_IDE\">PCI_DEVICE_ID_AMD_HUDSON2_SATA_IDE</a>, <a class=\"id\" href=\"#quirk_amd_ide_mode\">quirk_amd_ide_mode</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_HUDSON2_SATA_IDE\">PCI_DEVICE_ID_AMD_HUDSON2_SATA_IDE</a>, <a class=\"id\" href=\"#quirk_amd_ide_mode\">quirk_amd_ide_mode</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Serverworks CSB5 IDE does not fully support native mode</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_svwks_csb5ide\">quirk_svwks_csb5ide</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#prog\">prog</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_CLASS_PROG\">PCI_CLASS_PROG</a>, &amp;<a class=\"id\" href=\"#prog\">prog</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prog\">prog</a> &amp; 5) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prog\">prog</a> &= ~5;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#class\">class</a> &= ~5;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_CLASS_PROG\">PCI_CLASS_PROG</a>, <a class=\"id\" href=\"#prog\">prog</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* PCI layer will sort out resources */</span>", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SERVERWORKS\">PCI_VENDOR_ID_SERVERWORKS</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_SERVERWORKS_CSB5IDE\">PCI_DEVICE_ID_SERVERWORKS_CSB5IDE</a>, <a class=\"id\" href=\"#quirk_svwks_csb5ide\">quirk_svwks_csb5ide</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
];
xr_frag_insert('l/5e/3c36e08223f5b5fe9382ac8ebedb3a70ddc5ca.xr', __xr_tmp);
