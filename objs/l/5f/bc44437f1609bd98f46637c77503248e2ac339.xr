var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mm/percpu-vm.c - vmalloc area based chunk allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2010<span class=\"ts\"/><span class=\"ts\"/>SUSE Linux Products GmbH</span>", 
"<span class=\"comment\"> * Copyright (C) 2010<span class=\"ts\"/><span class=\"ts\"/>Tejun Heo &lt;tj@kernel.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Chunks are mapped into vmalloc areas and populated page by page.</span>", 
"<span class=\"comment\"> * This is the default chunk allocator.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pcpu_chunk_page\">pcpu_chunk_page</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#page_idx\">page_idx</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* must not be used on pre-mapped chunk */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#immutable\">immutable</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>((void *)<a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#page_idx\">page_idx</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_get_pages_and_bitmap - get temp pages array and bitmap</span>", 
"<span class=\"comment\"> * @chunk: chunk of interest</span>", 
"<span class=\"comment\"> * @bitmapp: output parameter for bitmap</span>", 
"<span class=\"comment\"> * @may_alloc: may allocate the array</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns pointer to array of pointers to struct page and bitmap,</span>", 
"<span class=\"comment\"> * both of which can be indexed with pcpu_page_idx().  The returned</span>", 
"<span class=\"comment\"> * array is cleared to zero and *@bitmapp is copied from</span>", 
"<span class=\"comment\"> * @chunk-&gt;populated.  Note that there is only one array and bitmap</span>", 
"<span class=\"comment\"> * and access exclusion is the caller's responsibility.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * pcpu_alloc_mutex and does GFP_KERNEL allocation if @may_alloc.</span>", 
"<span class=\"comment\"> * Otherwise, don't care.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to temp pages array on success, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pcpu_get_pages_and_bitmap\">pcpu_get_pages_and_bitmap</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long **<a class=\"id\" href=\"#bitmapp\">bitmapp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#may_alloc\">may_alloc</a>)", 
"{", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>static unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#pages_size\">pages_size</a> = <a class=\"id\" href=\"#pcpu_nr_units\">pcpu_nr_units</a> * <a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a> * sizeof(<a class=\"id\" href=\"#pages\">pages</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#bitmap_size\">bitmap_size</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a>) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(unsigned long);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pages\">pages</a> || !<a class=\"id\" href=\"#bitmap\">bitmap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#may_alloc\">may_alloc</a> && !<a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#pcpu_mem_alloc\">pcpu_mem_alloc</a>(<a class=\"id\" href=\"#pages_size\">pages_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#may_alloc\">may_alloc</a> && !<a class=\"id\" href=\"#bitmap\">bitmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#pcpu_mem_alloc\">pcpu_mem_alloc</a>(<a class=\"id\" href=\"#bitmap_size\">bitmap_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pages\">pages</a> || !<a class=\"id\" href=\"#bitmap\">bitmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#pages\">pages</a>, 0, <a class=\"id\" href=\"#pages_size\">pages_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_copy\">bitmap_copy</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#bitmapp\">bitmapp</a> = <a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pages\">pages</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_free_pages - free pages which were allocated for @chunk</span>", 
"<span class=\"comment\"> * @chunk: chunk pages were allocated for</span>", 
"<span class=\"comment\"> * @pages: array of pages to be freed, indexed by pcpu_page_idx()</span>", 
"<span class=\"comment\"> * @populated: populated bitmap</span>", 
"<span class=\"comment\"> * @page_start: page index of the first page to be freed</span>", 
"<span class=\"comment\"> * @page_end: page index of the last page to be freed + 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free pages [@page_start and @page_end) in @pages for all units.</span>", 
"<span class=\"comment\"> * The pages were allocated for @chunk.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_free_pages\">pcpu_free_pages</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, unsigned long *<a class=\"id\" href=\"#populated\">populated</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#page_start\">page_start</a>, int <a class=\"id\" href=\"#page_end\">page_end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#page_start\">page_start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#page_end\">page_end</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#pcpu_page_idx\">pcpu_page_idx</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#i\">i</a>)];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_alloc_pages - allocates pages for @chunk</span>", 
"<span class=\"comment\"> * @chunk: target chunk</span>", 
"<span class=\"comment\"> * @pages: array to put the allocated pages into, indexed by pcpu_page_idx()</span>", 
"<span class=\"comment\"> * @populated: populated bitmap</span>", 
"<span class=\"comment\"> * @page_start: page index of the first page to be allocated</span>", 
"<span class=\"comment\"> * @page_end: page index of the last page to be allocated + 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate pages [@page_start,@page_end) into @pages for all units.</span>", 
"<span class=\"comment\"> * The allocation is for @chunk.  Percpu core doesn't care about the</span>", 
"<span class=\"comment\"> * content of @pages and will pass it verbatim to pcpu_map_pages().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pcpu_alloc_pages\">pcpu_alloc_pages</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, unsigned long *<a class=\"id\" href=\"#populated\">populated</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#page_start\">page_start</a>, int <a class=\"id\" href=\"#page_end\">page_end</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a> = <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a> | <a class=\"id\" href=\"#__GFP_COLD\">__GFP_COLD</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#page_start\">page_start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#page_end\">page_end</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a> = &amp;<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#pcpu_page_idx\">pcpu_page_idx</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#i\">i</a>)];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pagep\">pagep</a> = <a class=\"id\" href=\"#alloc_pages_node\">alloc_pages_node</a>(<a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#gfp\">gfp</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#pagep\">pagep</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_free_pages\">pcpu_free_pages</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#populated\">populated</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#page_end\">page_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_pre_unmap_flush - flush cache prior to unmapping</span>", 
"<span class=\"comment\"> * @chunk: chunk the regions to be flushed belongs to</span>", 
"<span class=\"comment\"> * @page_start: page index of the first page to be flushed</span>", 
"<span class=\"comment\"> * @page_end: page index of the last page to be flushed + 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pages in [@page_start,@page_end) of @chunk are about to be</span>", 
"<span class=\"comment\"> * unmapped.  Flush cache.  As each flushing trial can be very</span>", 
"<span class=\"comment\"> * expensive, issue flush on the whole region at once rather than</span>", 
"<span class=\"comment\"> * doing it for each cpu.  This could be an overkill but is more</span>", 
"<span class=\"comment\"> * scalable.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_pre_unmap_flush\">pcpu_pre_unmap_flush</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#page_start\">page_start</a>, int <a class=\"id\" href=\"#page_end\">page_end</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_vunmap\">flush_cache_vunmap</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pcpu_first_unit_cpu\">pcpu_first_unit_cpu</a>, <a class=\"id\" href=\"#page_start\">page_start</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pcpu_last_unit_cpu\">pcpu_last_unit_cpu</a>, <a class=\"id\" href=\"#page_end\">page_end</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__pcpu_unmap_pages\">__pcpu_unmap_pages</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_kernel_range_noflush\">unmap_kernel_range_noflush</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_unmap_pages - unmap pages out of a pcpu_chunk</span>", 
"<span class=\"comment\"> * @chunk: chunk of interest</span>", 
"<span class=\"comment\"> * @pages: pages array which can be used to pass information to free</span>", 
"<span class=\"comment\"> * @populated: populated bitmap</span>", 
"<span class=\"comment\"> * @page_start: page index of the first page to unmap</span>", 
"<span class=\"comment\"> * @page_end: page index of the last page to unmap + 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For each cpu, unmap pages [@page_start,@page_end) out of @chunk.</span>", 
"<span class=\"comment\"> * Corresponding elements in @pages were cleared by the caller and can</span>", 
"<span class=\"comment\"> * be used to carry information to pcpu_free_pages() which will be</span>", 
"<span class=\"comment\"> * called after all unmaps are finished.  The caller should call</span>", 
"<span class=\"comment\"> * proper pre/post flush functions.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_unmap_pages\">pcpu_unmap_pages</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, unsigned long *<a class=\"id\" href=\"#populated\">populated</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#page_start\">page_start</a>, int <a class=\"id\" href=\"#page_end\">page_end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#page_start\">page_start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#page_end\">page_end</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pcpu_chunk_page\">pcpu_chunk_page</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#pcpu_page_idx\">pcpu_page_idx</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#i\">i</a>)] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pcpu_unmap_pages\">__pcpu_unmap_pages</a>(<a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#page_start\">page_start</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#page_end\">page_end</a> - <a class=\"id\" href=\"#page_start\">page_start</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#page_start\">page_start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#page_end\">page_end</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#populated\">populated</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_post_unmap_tlb_flush - flush TLB after unmapping</span>", 
"<span class=\"comment\"> * @chunk: pcpu_chunk the regions to be flushed belong to</span>", 
"<span class=\"comment\"> * @page_start: page index of the first page to be flushed</span>", 
"<span class=\"comment\"> * @page_end: page index of the last page to be flushed + 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pages [@page_start,@page_end) of @chunk have been unmapped.  Flush</span>", 
"<span class=\"comment\"> * TLB for the regions.  This can be skipped if the area is to be</span>", 
"<span class=\"comment\"> * returned to vmalloc as vmalloc will handle TLB flushing lazily.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As with pcpu_pre_unmap_flush(), TLB flushing also is done at once</span>", 
"<span class=\"comment\"> * for the whole region.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_post_unmap_tlb_flush\">pcpu_post_unmap_tlb_flush</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#page_start\">page_start</a>, int <a class=\"id\" href=\"#page_end\">page_end</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_kernel_range\">flush_tlb_kernel_range</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pcpu_first_unit_cpu\">pcpu_first_unit_cpu</a>, <a class=\"id\" href=\"#page_start\">page_start</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pcpu_last_unit_cpu\">pcpu_last_unit_cpu</a>, <a class=\"id\" href=\"#page_end\">page_end</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__pcpu_map_pages\">__pcpu_map_pages</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#map_kernel_range_noflush\">map_kernel_range_noflush</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_map_pages - map pages into a pcpu_chunk</span>", 
"<span class=\"comment\"> * @chunk: chunk of interest</span>", 
"<span class=\"comment\"> * @pages: pages array containing pages to be mapped</span>", 
"<span class=\"comment\"> * @populated: populated bitmap</span>", 
"<span class=\"comment\"> * @page_start: page index of the first page to map</span>", 
"<span class=\"comment\"> * @page_end: page index of the last page to map + 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For each cpu, map pages [@page_start,@page_end) into @chunk.  The</span>", 
"<span class=\"comment\"> * caller is responsible for calling pcpu_post_map_flush() after all</span>", 
"<span class=\"comment\"> * mappings are complete.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is responsible for setting corresponding bits in</span>", 
"<span class=\"comment\"> * @chunk-&gt;populated bitmap and whatever is necessary for reverse</span>", 
"<span class=\"comment\"> * lookup (addr -&gt; chunk).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pcpu_map_pages\">pcpu_map_pages</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, unsigned long *<a class=\"id\" href=\"#populated\">populated</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#page_start\">page_start</a>, int <a class=\"id\" href=\"#page_end\">page_end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tcpu\">tcpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__pcpu_map_pages\">__pcpu_map_pages</a>(<a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#page_start\">page_start</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#pcpu_page_idx\">pcpu_page_idx</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#page_start\">page_start</a>)],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#page_end\">page_end</a> - <a class=\"id\" href=\"#page_start\">page_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mapping successful, link chunk and mark populated */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#page_start\">page_start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#page_end\">page_end</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_set_page_chunk\">pcpu_set_page_chunk</a>(<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#pcpu_page_idx\">pcpu_page_idx</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#i\">i</a>)],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#populated\">populated</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#tcpu\">tcpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcpu\">tcpu</a> == <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pcpu_unmap_pages\">__pcpu_unmap_pages</a>(<a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#tcpu\">tcpu</a>, <a class=\"id\" href=\"#page_start\">page_start</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#page_end\">page_end</a> - <a class=\"id\" href=\"#page_start\">page_start</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_post_map_flush - flush cache after mapping</span>", 
"<span class=\"comment\"> * @chunk: pcpu_chunk the regions to be flushed belong to</span>", 
"<span class=\"comment\"> * @page_start: page index of the first page to be flushed</span>", 
"<span class=\"comment\"> * @page_end: page index of the last page to be flushed + 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pages [@page_start,@page_end) of @chunk have been mapped.  Flush</span>", 
"<span class=\"comment\"> * cache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As with pcpu_pre_unmap_flush(), TLB flushing also is done at once</span>", 
"<span class=\"comment\"> * for the whole region.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_post_map_flush\">pcpu_post_map_flush</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#page_start\">page_start</a>, int <a class=\"id\" href=\"#page_end\">page_end</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_vmap\">flush_cache_vmap</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pcpu_first_unit_cpu\">pcpu_first_unit_cpu</a>, <a class=\"id\" href=\"#page_start\">page_start</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pcpu_last_unit_cpu\">pcpu_last_unit_cpu</a>, <a class=\"id\" href=\"#page_end\">page_end</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_populate_chunk - populate and map an area of a pcpu_chunk</span>", 
"<span class=\"comment\"> * @chunk: chunk of interest</span>", 
"<span class=\"comment\"> * @off: offset to the area to populate</span>", 
"<span class=\"comment\"> * @size: size of the area to populate in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For each cpu, populate and map pages [@page_start,@page_end) into</span>", 
"<span class=\"comment\"> * @chunk.  The area is cleared on return.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * pcpu_alloc_mutex, does GFP_KERNEL allocation.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pcpu_populate_chunk\">pcpu_populate_chunk</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, int <a class=\"id\" href=\"#off\">off</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#page_start\">page_start</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#page_end\">page_end</a> = <a class=\"id\" href=\"#PFN_UP\">PFN_UP</a>(<a class=\"id\" href=\"#off\">off</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#free_end\">free_end</a> = <a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#unmap_end\">unmap_end</a> = <a class=\"id\" href=\"#page_start\">page_start</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#populated\">populated</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* quick path, check whether all pages are already there */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rs\">rs</a> = <a class=\"id\" href=\"#page_start\">page_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_next_pop\">pcpu_next_pop</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, &amp;<a class=\"id\" href=\"#rs\">rs</a>, &amp;<a class=\"id\" href=\"#re\">re</a>, <a class=\"id\" href=\"#page_end\">page_end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rs\">rs</a> == <a class=\"id\" href=\"#page_start\">page_start</a> && <a class=\"id\" href=\"#re\">re</a> == <a class=\"id\" href=\"#page_end\">page_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#clear\">clear</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need to allocate and map pages, this chunk can't be immutable */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#immutable\">immutable</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#pcpu_get_pages_and_bitmap\">pcpu_get_pages_and_bitmap</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, &amp;<a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* alloc and map */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_for_each_unpop_region\">pcpu_for_each_unpop_region</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>, <a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#page_end\">page_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcpu_alloc_pages\">pcpu_alloc_pages</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free\">err_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_end\">free_end</a> = <a class=\"id\" href=\"#re\">re</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_for_each_unpop_region\">pcpu_for_each_unpop_region</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>, <a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#page_end\">page_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcpu_map_pages\">pcpu_map_pages</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_unmap\">err_unmap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_end\">unmap_end</a> = <a class=\"id\" href=\"#re\">re</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_post_map_flush\">pcpu_post_map_flush</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#page_end\">page_end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* commit new bitmap */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_copy\">bitmap_copy</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a>);", 
"<a class=\"id\" href=\"#clear\">clear</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>((void *)<a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, 0) + <a class=\"id\" href=\"#off\">off</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_unmap\">err_unmap</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_pre_unmap_flush\">pcpu_pre_unmap_flush</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#unmap_end\">unmap_end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_for_each_unpop_region\">pcpu_for_each_unpop_region</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>, <a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#unmap_end\">unmap_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_unmap_pages\">pcpu_unmap_pages</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_post_unmap_tlb_flush\">pcpu_post_unmap_tlb_flush</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#unmap_end\">unmap_end</a>);", 
"<a class=\"id\" href=\"#err_free\">err_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_for_each_unpop_region\">pcpu_for_each_unpop_region</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>, <a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#free_end\">free_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_free_pages\">pcpu_free_pages</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_depopulate_chunk - depopulate and unmap an area of a pcpu_chunk</span>", 
"<span class=\"comment\"> * @chunk: chunk to depopulate</span>", 
"<span class=\"comment\"> * @off: offset to the area to depopulate</span>", 
"<span class=\"comment\"> * @size: size of the area to depopulate in bytes</span>", 
"<span class=\"comment\"> * @flush: whether to flush cache and tlb or not</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For each cpu, depopulate and unmap pages [@page_start,@page_end)</span>", 
"<span class=\"comment\"> * from @chunk.  If @flush is true, vcache is flushed before unmapping</span>", 
"<span class=\"comment\"> * and tlb after.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * pcpu_alloc_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_depopulate_chunk\">pcpu_depopulate_chunk</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, int <a class=\"id\" href=\"#off\">off</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#page_start\">page_start</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#page_end\">page_end</a> = <a class=\"id\" href=\"#PFN_UP\">PFN_UP</a>(<a class=\"id\" href=\"#off\">off</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#populated\">populated</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* quick path, check whether it's empty already */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rs\">rs</a> = <a class=\"id\" href=\"#page_start\">page_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_next_unpop\">pcpu_next_unpop</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, &amp;<a class=\"id\" href=\"#rs\">rs</a>, &amp;<a class=\"id\" href=\"#re\">re</a>, <a class=\"id\" href=\"#page_end\">page_end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rs\">rs</a> == <a class=\"id\" href=\"#page_start\">page_start</a> && <a class=\"id\" href=\"#re\">re</a> == <a class=\"id\" href=\"#page_end\">page_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* immutable chunks can't be depopulated */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#immutable\">immutable</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If control reaches here, there must have been at least one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * successful population attempt so the temp pages array must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be available now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#pcpu_get_pages_and_bitmap\">pcpu_get_pages_and_bitmap</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, &amp;<a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* unmap and free */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_pre_unmap_flush\">pcpu_pre_unmap_flush</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#page_end\">page_end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_for_each_pop_region\">pcpu_for_each_pop_region</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>, <a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#page_end\">page_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_unmap_pages\">pcpu_unmap_pages</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no need to flush tlb, vmalloc will handle it lazily */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_for_each_pop_region\">pcpu_for_each_pop_region</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>, <a class=\"id\" href=\"#page_start\">page_start</a>, <a class=\"id\" href=\"#page_end\">page_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_free_pages\">pcpu_free_pages</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* commit new bitmap */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_copy\">bitmap_copy</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#pcpu_create_chunk\">pcpu_create_chunk</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> **<a class=\"id\" href=\"#vms\">vms</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#pcpu_alloc_chunk\">pcpu_alloc_chunk</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vms\">vms</a> = <a class=\"id\" href=\"#pcpu_get_vm_areas\">pcpu_get_vm_areas</a>(<a class=\"id\" href=\"#pcpu_group_offsets\">pcpu_group_offsets</a>, <a class=\"id\" href=\"#pcpu_group_sizes\">pcpu_group_sizes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_nr_groups\">pcpu_nr_groups</a>, <a class=\"id\" href=\"#pcpu_atom_size\">pcpu_atom_size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vms\">vms</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_free_chunk\">pcpu_free_chunk</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#vms\">vms</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a> = <a class=\"id\" href=\"#vms\">vms</a>[0]-><a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#pcpu_group_offsets\">pcpu_group_offsets</a>[0];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chunk\">chunk</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pcpu_destroy_chunk\">pcpu_destroy_chunk</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a> && <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_free_vm_areas\">pcpu_free_vm_areas</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#pcpu_nr_groups\">pcpu_nr_groups</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_free_chunk\">pcpu_free_chunk</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pcpu_addr_to_page\">pcpu_addr_to_page</a>(void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_verify_alloc_info\">pcpu_verify_alloc_info</a>(const struct <a class=\"id\" href=\"#pcpu_alloc_info\">pcpu_alloc_info</a> *<a class=\"id\" href=\"#ai\">ai</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* no extra restriction */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/5f/bc44437f1609bd98f46637c77503248e2ac339.xr', __xr_tmp);
