var __xr_tmp = [
"<span class=\"comment\">/* Credentials management - see Documentation/credentials.txt</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2008 Red Hat, Inc. All Rights Reserved.</span>", 
"<span class=\"comment\"> * Written by David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public Licence</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> * 2 of the Licence, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_CRED_H\">_LINUX_CRED_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_CRED_H\">_LINUX_CRED_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#selinux\">selinux</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#user_struct\">user_struct</a>;", 
"struct <a class=\"id\" href=\"#cred\">cred</a>;", 
"struct <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * COW Supplementary groups list</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NGROUPS_SMALL\">NGROUPS_SMALL</a><span class=\"ts\"/><span class=\"ts\"/>32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NGROUPS_PER_BLOCK\">NGROUPS_PER_BLOCK</a><span class=\"ts\"/>((unsigned int)(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / sizeof(<a class=\"id\" href=\"#gid_t\">gid_t</a>)))", 
"", 
"struct <a class=\"id\" href=\"#group_info\">group_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#usage\">usage</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nblocks\">nblocks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#small_block\">small_block</a>[<a class=\"id\" href=\"#NGROUPS_SMALL\">NGROUPS_SMALL</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#blocks\">blocks</a>[0];", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_group_info - Get a reference to a group info structure</span>", 
"<span class=\"comment\"> * @group_info: The group info to reference</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This gets a reference to a set of supplementary groups.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the caller is accessing a task's credentials, they must hold the RCU read</span>", 
"<span class=\"comment\"> * lock when reading.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#group_info\">group_info</a> *<a class=\"id\" href=\"#get_group_info\">get_group_info</a>(struct <a class=\"id\" href=\"#group_info\">group_info</a> *<a class=\"id\" href=\"#gi\">gi</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#usage\">usage</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#gi\">gi</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * put_group_info - Release a reference to a group info structure</span>", 
"<span class=\"comment\"> * @group_info: The group info to release</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_group_info\">put_group_info</a>(<a class=\"id\" href=\"#group_info\">group_info</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;(<a class=\"id\" href=\"#group_info\">group_info</a>)-><a class=\"id\" href=\"#usage\">usage</a>))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#groups_free\">groups_free</a>(<a class=\"id\" href=\"#group_info\">group_info</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"extern struct <a class=\"id\" href=\"#group_info\">group_info</a> *<a class=\"id\" href=\"#groups_alloc\">groups_alloc</a>(int);", 
"extern struct <a class=\"id\" href=\"#group_info\">group_info</a> <a class=\"id\" href=\"#init_groups\">init_groups</a>;", 
"extern void <a class=\"id\" href=\"#groups_free\">groups_free</a>(struct <a class=\"id\" href=\"#group_info\">group_info</a> *);", 
"extern int <a class=\"id\" href=\"#set_current_groups\">set_current_groups</a>(struct <a class=\"id\" href=\"#group_info\">group_info</a> *);", 
"extern int <a class=\"id\" href=\"#set_groups\">set_groups</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *, struct <a class=\"id\" href=\"#group_info\">group_info</a> *);", 
"extern int <a class=\"id\" href=\"#groups_search\">groups_search</a>(const struct <a class=\"id\" href=\"#group_info\">group_info</a> *, <a class=\"id\" href=\"#gid_t\">gid_t</a>);", 
"", 
"<span class=\"comment\">/* access the groups \"array\" with this macro */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GROUP_AT\">GROUP_AT</a>(<a class=\"id\" href=\"#gi\">gi</a>, <a class=\"id\" href=\"#i\">i</a>) \\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#gi\">gi</a>)-><a class=\"id\" href=\"#blocks\">blocks</a>[(<a class=\"id\" href=\"#i\">i</a>) / <a class=\"id\" href=\"#NGROUPS_PER_BLOCK\">NGROUPS_PER_BLOCK</a>][(<a class=\"id\" href=\"#i\">i</a>) % <a class=\"id\" href=\"#NGROUPS_PER_BLOCK\">NGROUPS_PER_BLOCK</a>])", 
"", 
"extern int <a class=\"id\" href=\"#in_group_p\">in_group_p</a>(<a class=\"id\" href=\"#gid_t\">gid_t</a>);", 
"extern int <a class=\"id\" href=\"#in_egroup_p\">in_egroup_p</a>(<a class=\"id\" href=\"#gid_t\">gid_t</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The common credentials for a thread group</span>", 
"<span class=\"comment\"> * - shared by CLONE_THREAD</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"struct <a class=\"id\" href=\"#thread_group_cred\">thread_group_cred</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#usage\">usage</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tgid\">tgid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* thread group process ID */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a><span class=\"ts\"/>*<a class=\"id\" href=\"#session_keyring\">session_keyring</a>;<span class=\"ts\"/><span class=\"comment\">/* keyring inherited over fork */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a><span class=\"ts\"/>*<a class=\"id\" href=\"#process_keyring\">process_keyring</a>;<span class=\"ts\"/><span class=\"comment\">/* keyring private to this process */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><a class=\"id\" href=\"#rcu\">rcu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* RCU deletion hook */</span>", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The security context of a task</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The parts of the context break down into two categories:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (1) The objective context of a task.  These parts are used when some other</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>task is attempting to affect this one.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (2) The subjective context.  These details are used when the task is acting</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>upon another object, be that a file, a task, a key or whatever.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that some members of this structure belong to both categories - the</span>", 
"<span class=\"comment\"> * LSM security pointer for instance.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A task has two security pointers.  task-&gt;real_cred points to the objective</span>", 
"<span class=\"comment\"> * context that defines that task's actual details.  The objective part of this</span>", 
"<span class=\"comment\"> * context is used whenever that task is acted upon.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * task-&gt;cred points to the subjective context that defines the details of how</span>", 
"<span class=\"comment\"> * that task is going to act upon another object.  This may be overridden</span>", 
"<span class=\"comment\"> * temporarily to point to another security context, but normally points to the</span>", 
"<span class=\"comment\"> * same context as task-&gt;real_cred.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cred\">cred</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#usage\">usage</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_CREDENTIALS\">CONFIG_DEBUG_CREDENTIALS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#subscribers\">subscribers</a>;<span class=\"ts\"/><span class=\"comment\">/* number of processes subscribed */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#put_addr\">put_addr</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#magic\">magic</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CRED_MAGIC\">CRED_MAGIC</a><span class=\"ts\"/>0x43736564", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CRED_MAGIC_DEAD\">CRED_MAGIC_DEAD</a><span class=\"ts\"/>0x44656144", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uid\">uid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* real UID of the task */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gid\">gid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* real GID of the task */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#suid\">suid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* saved UID of the task */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgid\">sgid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* saved GID of the task */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#euid\">euid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* effective UID of the task */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#egid\">egid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* effective GID of the task */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsuid\">fsuid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* UID for VFS ops */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsgid\">fsgid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* GID for VFS ops */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#securebits\">securebits</a>;<span class=\"ts\"/><span class=\"comment\">/* SUID-less security management */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a><span class=\"ts\"/><a class=\"id\" href=\"#cap_inheritable\">cap_inheritable</a>; <span class=\"comment\">/* caps our children can inherit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a><span class=\"ts\"/><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>;<span class=\"ts\"/><span class=\"comment\">/* caps we're permitted */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a><span class=\"ts\"/><a class=\"id\" href=\"#cap_effective\">cap_effective</a>;<span class=\"ts\"/><span class=\"comment\">/* caps we can actually use */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a><span class=\"ts\"/><a class=\"id\" href=\"#cap_bset\">cap_bset</a>;<span class=\"ts\"/><span class=\"comment\">/* capability bounding set */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><a class=\"id\" href=\"#jit_keyring\">jit_keyring</a>;<span class=\"ts\"/><span class=\"comment\">/* default keyring to attach requested</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * keys to */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a><span class=\"ts\"/>*<a class=\"id\" href=\"#thread_keyring\">thread_keyring</a>; <span class=\"comment\">/* keyring private to this thread */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a><span class=\"ts\"/>*<a class=\"id\" href=\"#request_key_auth\">request_key_auth</a>; <span class=\"comment\">/* assumed request_key authority */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_group_cred\">thread_group_cred</a> *<a class=\"id\" href=\"#tgcred\">tgcred</a>; <span class=\"comment\">/* thread-group shared credentials */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY\">CONFIG_SECURITY</a>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#security\">security</a>;<span class=\"ts\"/><span class=\"comment\">/* subjective LSM security */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#user\">user</a>;<span class=\"ts\"/><span class=\"comment\">/* real user ID subscription */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#group_info\">group_info</a> *<a class=\"id\" href=\"#group_info\">group_info</a>;<span class=\"ts\"/><span class=\"comment\">/* supplementary groups for euid/fsgid */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><a class=\"id\" href=\"#rcu\">rcu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* RCU deletion hook */</span>", 
"};", 
"", 
"extern void <a class=\"id\" href=\"#__put_cred\">__put_cred</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *);", 
"extern void <a class=\"id\" href=\"#exit_creds\">exit_creds</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern int <a class=\"id\" href=\"#copy_creds\">copy_creds</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, unsigned long);", 
"extern const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#get_task_cred\">get_task_cred</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred_alloc_blank\">cred_alloc_blank</a>(void);", 
"extern struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#prepare_creds\">prepare_creds</a>(void);", 
"extern struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#prepare_exec_creds\">prepare_exec_creds</a>(void);", 
"extern int <a class=\"id\" href=\"#commit_creds\">commit_creds</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *);", 
"extern void <a class=\"id\" href=\"#abort_creds\">abort_creds</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *);", 
"extern const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#override_creds\">override_creds</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *);", 
"extern void <a class=\"id\" href=\"#revert_creds\">revert_creds</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *);", 
"extern struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#prepare_kernel_cred\">prepare_kernel_cred</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern int <a class=\"id\" href=\"#change_create_files_as\">change_create_files_as</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern int <a class=\"id\" href=\"#set_security_override\">set_security_override</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *, <a class=\"id\" href=\"#u32\">u32</a>);", 
"extern int <a class=\"id\" href=\"#set_security_override_from_ctx\">set_security_override_from_ctx</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *, const char *);", 
"extern int <a class=\"id\" href=\"#set_create_files_as\">set_create_files_as</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cred_init\">cred_init</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * check for validity of credentials</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_CREDENTIALS\">CONFIG_DEBUG_CREDENTIALS</a>", 
"extern void <a class=\"id\" href=\"#__invalid_creds\">__invalid_creds</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *, const char *, unsigned);", 
"extern void <a class=\"id\" href=\"#__validate_process_creds\">__validate_process_creds</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const char *, unsigned);", 
"", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#creds_are_invalid\">creds_are_invalid</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__validate_creds\">__validate_creds</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#file\">file</a>, unsigned <a class=\"id\" href=\"#line\">line</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#creds_are_invalid\">creds_are_invalid</a>(<a class=\"id\" href=\"#cred\">cred</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__invalid_creds\">__invalid_creds</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#line\">line</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#cred\">cred</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__validate_creds\">__validate_creds</a>((<a class=\"id\" href=\"#cred\">cred</a>), <a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>);<span class=\"ts\"/>\\", 
"} while(0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#validate_process_creds\">validate_process_creds</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__validate_process_creds\">__validate_process_creds</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>);<span class=\"ts\"/>\\", 
"} while(0)", 
"", 
"extern void <a class=\"id\" href=\"#validate_creds_for_do_exit\">validate_creds_for_do_exit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#validate_creds\">validate_creds</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#validate_creds_for_do_exit\">validate_creds_for_do_exit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#validate_process_creds\">validate_process_creds</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_new_cred - Get a reference on a new set of credentials</span>", 
"<span class=\"comment\"> * @cred: The new credentials to reference</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get a reference on the specified set of new credentials.  The caller must</span>", 
"<span class=\"comment\"> * release the reference.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#get_new_cred\">get_new_cred</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#usage\">usage</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cred\">cred</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_cred - Get a reference on a set of credentials</span>", 
"<span class=\"comment\"> * @cred: The credentials to reference</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get a reference on the specified set of credentials.  The caller must</span>", 
"<span class=\"comment\"> * release the reference.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is used to deal with a committed set of credentials.  Although the</span>", 
"<span class=\"comment\"> * pointer is const, this will temporarily discard the const and increment the</span>", 
"<span class=\"comment\"> * usage count.  The purpose of this is to attempt to catch at compile time the</span>", 
"<span class=\"comment\"> * accidental alteration of a set of credentials that should be considered</span>", 
"<span class=\"comment\"> * immutable.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#get_cred\">get_cred</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#nonconst_cred\">nonconst_cred</a> = (struct <a class=\"id\" href=\"#cred\">cred</a> *) <a class=\"id\" href=\"#cred\">cred</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_new_cred\">get_new_cred</a>(<a class=\"id\" href=\"#nonconst_cred\">nonconst_cred</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * put_cred - Release a reference to a set of credentials</span>", 
"<span class=\"comment\"> * @cred: The credentials to release</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Release a reference to a set of credentials, deleting them when the last ref</span>", 
"<span class=\"comment\"> * is released.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This takes a const pointer to a set of credentials because the credentials</span>", 
"<span class=\"comment\"> * on task_struct are attached by const pointers to prevent accidental</span>", 
"<span class=\"comment\"> * alteration of otherwise immutable credential sets.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_cred\">put_cred</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#_cred\">_cred</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = (struct <a class=\"id\" href=\"#cred\">cred</a> *) <a class=\"id\" href=\"#_cred\">_cred</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;(<a class=\"id\" href=\"#cred\">cred</a>)-><a class=\"id\" href=\"#usage\">usage</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_cred\">__put_cred</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * current_cred - Access the current task's subjective credentials</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Access the subjective credentials of the current task.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_cred\">current_cred</a>() \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred\">cred</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __task_cred - Access a task's objective credentials</span>", 
"<span class=\"comment\"> * @task: The task to query</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Access the objective credentials of a task.  The caller must hold the RCU</span>", 
"<span class=\"comment\"> * readlock or the task must be dead and unable to change its own credentials.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The result of this function should not be passed directly to get_cred();</span>", 
"<span class=\"comment\"> * rather get_task_cred() should be used instead.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#__t\">__t</a> = (<a class=\"id\" href=\"#task\">task</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#__t\">__t</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() ||<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#task_is_dead\">task_is_dead</a>(<a class=\"id\" href=\"#__t\">__t</a>));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_current_cred - Get the current task's subjective credentials</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get the subjective credentials of the current task, pinning them so that</span>", 
"<span class=\"comment\"> * they can't go away.  Accessing the current task's credentials directly is</span>", 
"<span class=\"comment\"> * not permitted.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_current_cred\">get_current_cred</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#get_cred\">get_cred</a>(<a class=\"id\" href=\"#current_cred\">current_cred</a>()))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_current_user - Get the current task's user_struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get the user record of the current task, pinning it so that it can't go</span>", 
"<span class=\"comment\"> * away.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_current_user\">get_current_user</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#__u\">__u</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#__cred\">__cred</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cred\">__cred</a> = (struct <a class=\"id\" href=\"#cred\">cred</a> *) <a class=\"id\" href=\"#current_cred\">current_cred</a>();<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u\">__u</a> = <a class=\"id\" href=\"#get_uid\">get_uid</a>(<a class=\"id\" href=\"#__cred\">__cred</a>-><a class=\"id\" href=\"#user\">user</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u\">__u</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_current_groups - Get the current task's supplementary group list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get the supplementary group list of the current task, pinning it so that it</span>", 
"<span class=\"comment\"> * can't go away.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_current_groups\">get_current_groups</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#group_info\">group_info</a> *<a class=\"id\" href=\"#__groups\">__groups</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#__cred\">__cred</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cred\">__cred</a> = (struct <a class=\"id\" href=\"#cred\">cred</a> *) <a class=\"id\" href=\"#current_cred\">current_cred</a>();<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__groups\">__groups</a> = <a class=\"id\" href=\"#get_group_info\">get_group_info</a>(<a class=\"id\" href=\"#__cred\">__cred</a>-><a class=\"id\" href=\"#group_info\">group_info</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__groups\">__groups</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_cred_xxx\">task_cred_xxx</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#xxx\">xxx</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__typeof__\">__typeof__</a>(((struct <a class=\"id\" href=\"#cred\">cred</a> *)<a class=\"id\" href=\"#NULL\">NULL</a>)-><a class=\"id\" href=\"#xxx\">xxx</a>) <a class=\"id\" href=\"#___val\">___val</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#___val\">___val</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>((<a class=\"id\" href=\"#task\">task</a>))-><a class=\"id\" href=\"#xxx\">xxx</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#___val\">___val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_uid\">task_uid</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#task_cred_xxx\">task_cred_xxx</a>((<a class=\"id\" href=\"#task\">task</a>), <a class=\"id\" href=\"#uid\">uid</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_euid\">task_euid</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#task_cred_xxx\">task_cred_xxx</a>((<a class=\"id\" href=\"#task\">task</a>), <a class=\"id\" href=\"#euid\">euid</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#xxx\">xxx</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#xxx\">xxx</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_uid\">current_uid</a>()<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#uid\">uid</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_gid\">current_gid</a>()<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#gid\">gid</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_euid\">current_euid</a>()<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#euid\">euid</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_egid\">current_egid</a>()<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#egid\">egid</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_suid\">current_suid</a>()<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#suid\">suid</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_sgid\">current_sgid</a>()<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#sgid\">sgid</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>() <span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#fsuid\">fsuid</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_fsgid\">current_fsgid</a>() <span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#fsgid\">fsgid</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_cap\">current_cap</a>()<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#cap_effective\">cap_effective</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_user\">current_user</a>()<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#user\">user</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_user_ns\">current_user_ns</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#user\">user</a>)-><a class=\"id\" href=\"#user_ns\">user_ns</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_security\">current_security</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#current_cred_xxx\">current_cred_xxx</a>(<a class=\"id\" href=\"#security\">security</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_uid_gid\">current_uid_gid</a>(<a class=\"id\" href=\"#_uid\">_uid</a>, <a class=\"id\" href=\"#_gid\">_gid</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#__cred\">__cred</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cred\">__cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#_uid\">_uid</a>) = <a class=\"id\" href=\"#__cred\">__cred</a>-><a class=\"id\" href=\"#uid\">uid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#_gid\">_gid</a>) = <a class=\"id\" href=\"#__cred\">__cred</a>-><a class=\"id\" href=\"#gid\">gid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while(0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_euid_egid\">current_euid_egid</a>(<a class=\"id\" href=\"#_euid\">_euid</a>, <a class=\"id\" href=\"#_egid\">_egid</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#__cred\">__cred</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cred\">__cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#_euid\">_euid</a>) = <a class=\"id\" href=\"#__cred\">__cred</a>-><a class=\"id\" href=\"#euid\">euid</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#_egid\">_egid</a>) = <a class=\"id\" href=\"#__cred\">__cred</a>-><a class=\"id\" href=\"#egid\">egid</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while(0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#current_fsuid_fsgid\">current_fsuid_fsgid</a>(<a class=\"id\" href=\"#_fsuid\">_fsuid</a>, <a class=\"id\" href=\"#_fsgid\">_fsgid</a>)<span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#__cred\">__cred</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cred\">__cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#_fsuid\">_fsuid</a>) = <a class=\"id\" href=\"#__cred\">__cred</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#_fsgid\">_fsgid</a>) = <a class=\"id\" href=\"#__cred\">__cred</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while(0)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_CRED_H */</span>", 
];
xr_frag_insert('l/5f/e6c85fde4a64b1eeb441b986dce6a3a7f950f6.xr', __xr_tmp);
