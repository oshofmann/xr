var __xr_tmp = [
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* move slabp to correct slabp list: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#free\">free</a> == <a class=\"id\" href=\"#BUFCTL_END\">BUFCTL_END</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_full\">slabs_full</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#must_grow\">must_grow</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a> -= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>;", 
"<a class=\"id\" href=\"#alloc_done\">alloc_done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#cache_grow\">cache_grow</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#GFP_THISNODE\">GFP_THISNODE</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cache_grow can reenable interrupts, then ac could change. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a> = <a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#x\">x</a> && <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a> == 0)<span class=\"ts\"/><span class=\"comment\">/* no objects in sight? abort */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* objects refilled by interrupt? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#touched\">touched</a> = 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>[--<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cache_alloc_debugcheck_before\">cache_alloc_debugcheck_before</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep_if\">might_sleep_if</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>);", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_flagcheck\">kmem_flagcheck</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"static void *<a class=\"id\" href=\"#cache_alloc_debugcheck_after\">cache_alloc_debugcheck_after</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#objp\">objp</a>, void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#objp\">objp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#objp\">objp</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PAGEALLOC\">CONFIG_DEBUG_PAGEALLOC</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> % <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) == 0 && <a class=\"id\" href=\"#OFF_SLAB\">OFF_SLAB</a>(<a class=\"id\" href=\"#cachep\">cachep</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_map_pages\">kernel_map_pages</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#objp\">objp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_poison_obj\">check_poison_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_poison_obj\">check_poison_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poison_obj\">poison_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#POISON_INUSE\">POISON_INUSE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_userword\">dbg_userword</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) = <a class=\"id\" href=\"#caller\">caller</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#dbg_redzone1\">dbg_redzone1</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) != <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_redzone2\">dbg_redzone2</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) != <a class=\"id\" href=\"#RED_INACTIVE\">RED_INACTIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_error\">slab_error</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, \"double free, or memory outside\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" object was overwritten\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%p: redzone 1:0x%llx, redzone 2:0x%llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a>, *<a class=\"id\" href=\"#dbg_redzone1\">dbg_redzone1</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_redzone2\">dbg_redzone2</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_redzone1\">dbg_redzone1</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) = <a class=\"id\" href=\"#RED_ACTIVE\">RED_ACTIVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_redzone2\">dbg_redzone2</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>) = <a class=\"id\" href=\"#RED_ACTIVE\">RED_ACTIVE</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SLAB_LEAK\">CONFIG_DEBUG_SLAB_LEAK</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#objnr\">objnr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#page_get_slab\">page_get_slab</a>(<a class=\"id\" href=\"#virt_to_head_page\">virt_to_head_page</a>(<a class=\"id\" href=\"#objp\">objp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#objnr\">objnr</a> = (unsigned)(<a class=\"id\" href=\"#objp\">objp</a> - <a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#s_mem\">s_mem</a>) / <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_bufctl\">slab_bufctl</a>(<a class=\"id\" href=\"#slabp\">slabp</a>)[<a class=\"id\" href=\"#objnr\">objnr</a>] = <a class=\"id\" href=\"#BUFCTL_ACTIVE\">BUFCTL_ACTIVE</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> += <a class=\"id\" href=\"#obj_offset\">obj_offset</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#ctor\">ctor</a> && <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#ctor\">ctor</a>(<a class=\"id\" href=\"#objp\">objp</a>);", 
"#if <a class=\"id\" href=\"#ARCH_SLAB_MINALIGN\">ARCH_SLAB_MINALIGN</a>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#objp\">objp</a> &amp; (<a class=\"id\" href=\"#ARCH_SLAB_MINALIGN\">ARCH_SLAB_MINALIGN</a>-1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"0x%p: not aligned to ARCH_SLAB_MINALIGN=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#ARCH_SLAB_MINALIGN\">ARCH_SLAB_MINALIGN</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#objp\">objp</a>;", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cache_alloc_debugcheck_after\">cache_alloc_debugcheck_after</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>,<a class=\"id\" href=\"#objp\">objp</a>,<a class=\"id\" href=\"#d\">d</a>) (<a class=\"id\" href=\"#objp\">objp</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#slab_should_failslab\">slab_should_failslab</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a> == &amp;<a class=\"id\" href=\"#cache_cache\">cache_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#should_failslab\">should_failslab</a>(<a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>), <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#____cache_alloc\">____cache_alloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#objp\">objp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ac\">ac</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a> = <a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ALLOCHIT\">STATS_INC_ALLOCHIT</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#touched\">touched</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>[--<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>];", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ALLOCMISS\">STATS_INC_ALLOCMISS</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#cache_alloc_refill\">cache_alloc_refill</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the 'ac' may be updated by cache_alloc_refill(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and kmemleak_erase() requires its correct value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a> = <a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To avoid a false negative, if an object that is in one of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * per-CPU caches is leaked, we need to make sure kmemleak doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * treat the array pointers as a reference to the object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#objp\">objp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_erase\">kmemleak_erase</a>(&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#objp\">objp</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try allocating on another node if PF_SPREAD_SLAB|PF_MEMPOLICY.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we are in_interrupt, then process context, including cpusets and</span>", 
"<span class=\"comment\"> * mempolicy, may not apply and should not be used for allocation policy.</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#alternate_node_alloc\">alternate_node_alloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid_alloc\">nid_alloc</a>, <a class=\"id\" href=\"#nid_here\">nid_here</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>() || (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#__GFP_THISNODE\">__GFP_THISNODE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid_alloc\">nid_alloc</a> = <a class=\"id\" href=\"#nid_here\">nid_here</a> = <a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_mems_allowed\">get_mems_allowed</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuset_do_slab_mem_spread\">cpuset_do_slab_mem_spread</a>() && (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_MEM_SPREAD\">SLAB_MEM_SPREAD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid_alloc\">nid_alloc</a> = <a class=\"id\" href=\"#cpuset_slab_spread_node\">cpuset_slab_spread_node</a>();", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid_alloc\">nid_alloc</a> = <a class=\"id\" href=\"#slab_node\">slab_node</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_mems_allowed\">put_mems_allowed</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nid_alloc\">nid_alloc</a> != <a class=\"id\" href=\"#nid_here\">nid_here</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#____cache_alloc_node\">____cache_alloc_node</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#nid_alloc\">nid_alloc</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fallback function if there was no memory available and no objects on a</span>", 
"<span class=\"comment\"> * certain node and fall back is permitted. First we scan all the</span>", 
"<span class=\"comment\"> * available nodelists for available objects. If that fails then we</span>", 
"<span class=\"comment\"> * perform an allocation without specifying a node. This allows the page</span>", 
"<span class=\"comment\"> * allocator to do its reclaim / fallback magic. We then insert the</span>", 
"<span class=\"comment\"> * slab into the proper nodelist and then allocate from it.</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#fallback_alloc\">fallback_alloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#local_flags\">local_flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a> = <a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#obj\">obj</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#__GFP_THISNODE\">__GFP_THISNODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_mems_allowed\">get_mems_allowed</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a> = <a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(<a class=\"id\" href=\"#slab_node\">slab_node</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>), <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_flags\">local_flags</a> = <a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#GFP_CONSTRAINT_MASK\">GFP_CONSTRAINT_MASK</a>|<a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>);", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Look through allowed nodes for objects available</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from existing per node queues.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist\">for_each_zone_zonelist</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuset_zone_allowed_hardwall\">cpuset_zone_allowed_hardwall</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#flags\">flags</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#nid\">nid</a>] &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#nid\">nid</a>]-><a class=\"id\" href=\"#free_objects\">free_objects</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj\">obj</a> = <a class=\"id\" href=\"#____cache_alloc_node\">____cache_alloc_node</a>(<a class=\"id\" href=\"#cache\">cache</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#GFP_THISNODE\">GFP_THISNODE</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#obj\">obj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#obj\">obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This allocation will be performed within the constraints</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of the current cpuset / memory policy requirements.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We may trigger various forms of reclaim on the allowed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * set and go into memory reserves if necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#local_flags\">local_flags</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_flagcheck\">kmem_flagcheck</a>(<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj\">obj</a> = <a class=\"id\" href=\"#kmem_getpages\">kmem_getpages</a>(<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#local_flags\">local_flags</a>, <a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#local_flags\">local_flags</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#obj\">obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Insert into the appropriate per node queues</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#obj\">obj</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cache_grow\">cache_grow</a>(<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#obj\">obj</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj\">obj</a> = <a class=\"id\" href=\"#____cache_alloc_node\">____cache_alloc_node</a>(<a class=\"id\" href=\"#cache\">cache</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#GFP_THISNODE\">GFP_THISNODE</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#obj\">obj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Another processor may allocate the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * objects in the slab since we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not holding any locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cache_grow already freed obj */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj\">obj</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_mems_allowed\">put_mems_allowed</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#obj\">obj</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A interface to enable slab creation on nodeid</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#____cache_alloc_node\">____cache_alloc_node</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#obj\">obj</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#x\">x</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#l3\">l3</a>);", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> == &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_touched\">free_touched</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> == &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#must_grow\">must_grow</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_spinlock_acquired_node\">check_spinlock_acquired_node</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_slabp\">check_slabp</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_NODEALLOCS\">STATS_INC_NODEALLOCS</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_ACTIVE\">STATS_INC_ACTIVE</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATS_SET_HIGH\">STATS_SET_HIGH</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a> == <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj\">obj</a> = <a class=\"id\" href=\"#slab_get_obj\">slab_get_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_slabp\">check_slabp</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a>--;", 
"<span class=\"ts\"/><span class=\"comment\">/* move slabp to correct slabp list: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#free\">free</a> == <a class=\"id\" href=\"#BUFCTL_END\">BUFCTL_END</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_full\">slabs_full</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<a class=\"id\" href=\"#must_grow\">must_grow</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#cache_grow\">cache_grow</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#GFP_THISNODE\">GFP_THISNODE</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fallback_alloc\">fallback_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#obj\">obj</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmem_cache_alloc_node - Allocate an object on the specified node</span>", 
"<span class=\"comment\"> * @cachep: The cache to allocate from.</span>", 
"<span class=\"comment\"> * @flags: See kmalloc().</span>", 
"<span class=\"comment\"> * @nodeid: node number of the target node.</span>", 
"<span class=\"comment\"> * @caller: return address of caller, used for debug information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Identical to kmem_cache_alloc but it will allocate memory on the given</span>", 
"<span class=\"comment\"> * node, which can improve the performance for cpu bound structures.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fallback to other node is possible if __GFP_THISNODE is not set.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *", 
"<a class=\"id\" href=\"#__cache_alloc_node\">__cache_alloc_node</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#nodeid\">nodeid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#save_flags\">save_flags</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slab_node\">slab_node</a> = <a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= <a class=\"id\" href=\"#gfp_allowed_mask\">gfp_allowed_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_trace_alloc\">lockdep_trace_alloc</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab_should_failslab\">slab_should_failslab</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_alloc_debugcheck_before\">cache_alloc_debugcheck_before</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#save_flags\">save_flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodeid\">nodeid</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodeid\">nodeid</a> = <a class=\"id\" href=\"#slab_node\">slab_node</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Node not bootstrapped yet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#fallback_alloc\">fallback_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodeid\">nodeid</a> == <a class=\"id\" href=\"#slab_node\">slab_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Use the locally cached objects if possible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * However ____cache_alloc does not allow fallback</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to other nodes. It may fail while we still have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * objects on other nodes available.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#____cache_alloc\">____cache_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* ___cache_alloc_node can fall back to other nodes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#____cache_alloc_node\">____cache_alloc_node</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"  <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#save_flags\">save_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#cache_alloc_debugcheck_after\">cache_alloc_debugcheck_after</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#caller\">caller</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_alloc_recursive\">kmemleak_alloc_recursive</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>), 1, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#ptr\">ptr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_slab_alloc\">kmemcheck_slab_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>) && <a class=\"id\" href=\"#ptr\">ptr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, 0, <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *", 
"<a class=\"id\" href=\"#__do_cache_alloc\">__do_cache_alloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#objp\">objp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#PF_SPREAD_SLAB\">PF_SPREAD_SLAB</a> | <a class=\"id\" href=\"#PF_MEMPOLICY\">PF_MEMPOLICY</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#alternate_node_alloc\">alternate_node_alloc</a>(<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#objp\">objp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#____cache_alloc\">____cache_alloc</a>(<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We may just have run out of memory on the local node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ____cache_alloc_node() knows how to locate memory on other nodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#objp\">objp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#____cache_alloc_node\">____cache_alloc_node</a>(<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>());", 
"", 
"  <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#objp\">objp</a>;", 
"}", 
"#else", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *", 
"<a class=\"id\" href=\"#__do_cache_alloc\">__do_cache_alloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#____cache_alloc\">____cache_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *", 
"<a class=\"id\" href=\"#__cache_alloc\">__cache_alloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#save_flags\">save_flags</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#objp\">objp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= <a class=\"id\" href=\"#gfp_allowed_mask\">gfp_allowed_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_trace_alloc\">lockdep_trace_alloc</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab_should_failslab\">slab_should_failslab</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache_alloc_debugcheck_before\">cache_alloc_debugcheck_before</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#save_flags\">save_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#__do_cache_alloc\">__do_cache_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#save_flags\">save_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#cache_alloc_debugcheck_after\">cache_alloc_debugcheck_after</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#caller\">caller</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_alloc_recursive\">kmemleak_alloc_recursive</a>(<a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>), 1, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prefetchw\">prefetchw</a>(<a class=\"id\" href=\"#objp\">objp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#objp\">objp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_slab_alloc\">kmemcheck_slab_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>) && <a class=\"id\" href=\"#objp\">objp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#objp\">objp</a>, 0, <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#objp\">objp</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Caller needs to acquire correct kmem_list's list_lock</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_block\">free_block</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void **<a class=\"id\" href=\"#objpp\">objpp</a>, int <a class=\"id\" href=\"#nr_objects\">nr_objects</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_objects\">nr_objects</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#objpp\">objpp</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#virt_to_slab\">virt_to_slab</a>(<a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_spinlock_acquired_node\">check_spinlock_acquired_node</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_slabp\">check_slabp</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_put_obj\">slab_put_obj</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>, <a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STATS_DEC_ACTIVE\">STATS_DEC_ACTIVE</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_slabp\">check_slabp</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fixup slab chains */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a> &gt; <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_limit\">free_limit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a> -= <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No need to drop any previously held</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * lock here, even if we have a off-slab slab</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * descriptor it is guaranteed to come from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a different cache, refer to comments before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * alloc_slabmgmt.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab_destroy\">slab_destroy</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unconditionally move a slab to the end of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * partial list on free - maximum time for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * other objects to be freed, too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cache_flusharray\">cache_flusharray</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#batchcount\">batchcount</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#batchcount\">batchcount</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a>;", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#batchcount\">batchcount</a> || <a class=\"id\" href=\"#batchcount\">batchcount</a> &gt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#shared_array\">shared_array</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#shared_array\">shared_array</a>-><a class=\"id\" href=\"#limit\">limit</a> - <a class=\"id\" href=\"#shared_array\">shared_array</a>-><a class=\"id\" href=\"#avail\">avail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#batchcount\">batchcount</a> &gt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#batchcount\">batchcount</a> = <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;(<a class=\"id\" href=\"#shared_array\">shared_array</a>-><a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#shared_array\">shared_array</a>-><a class=\"id\" href=\"#avail\">avail</a>]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>, sizeof(void *) * <a class=\"id\" href=\"#batchcount\">batchcount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared_array\">shared_array</a>-><a class=\"id\" href=\"#avail\">avail</a> += <a class=\"id\" href=\"#batchcount\">batchcount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_done\">free_done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_block\">free_block</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#batchcount\">batchcount</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<a class=\"id\" href=\"#free_done\">free_done</a>:", 
"#if <a class=\"id\" href=\"#STATS\">STATS</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a> != &amp;(<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slabp\">slabp</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STATS_SET_FREEABLE\">STATS_SET_FREEABLE</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a> -= <a class=\"id\" href=\"#batchcount\">batchcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>, &amp;(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#batchcount\">batchcount</a>]), sizeof(void *)*<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Release an obj back to its cache. If the obj has a constructed state, it must</span>", 
"<span class=\"comment\"> * be in this state _before_ it is released.  Called with disabled ints.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__cache_free\">__cache_free</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ac\">ac</a> = <a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_free_recursive\">kmemleak_free_recursive</a>(<a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#objp\">objp</a> = <a class=\"id\" href=\"#cache_free_debugcheck\">cache_free_debugcheck</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_slab_free\">kmemcheck_slab_free</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Skip calling cache_free_alien() when the platform is not numa.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This will avoid cache misses that happen while accessing slabp (which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is per page memory  reference) to get nodeid. Instead use a global</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * variable to skip the call, which is mostly likely to be present in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_online_nodes\">nr_online_nodes</a> &gt; 1 && <a class=\"id\" href=\"#cache_free_alien\">cache_free_alien</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a> &lt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#limit\">limit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_FREEHIT\">STATS_INC_FREEHIT</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>++] = <a class=\"id\" href=\"#objp\">objp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STATS_INC_FREEMISS\">STATS_INC_FREEMISS</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache_flusharray\">cache_flusharray</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#ac\">ac</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>++] = <a class=\"id\" href=\"#objp\">objp</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmem_cache_alloc - Allocate an object</span>", 
"<span class=\"comment\"> * @cachep: The cache to allocate from.</span>", 
"<span class=\"comment\"> * @flags: See kmalloc().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate an object from this cache.  The flags are only relevant</span>", 
"<span class=\"comment\"> * if the cache has no available objects.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__cache_alloc\">__cache_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_kmem_cache_alloc\">trace_kmem_cache_alloc</a>(<a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>, <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>), <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>", 
"void *<a class=\"id\" href=\"#kmem_cache_alloc_notrace\">kmem_cache_alloc_notrace</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__cache_alloc\">__cache_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_alloc_notrace\">kmem_cache_alloc_notrace</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmem_ptr_validate - check if an untrusted pointer might be a slab entry.</span>", 
"<span class=\"comment\"> * @cachep: the cache we're checking against</span>", 
"<span class=\"comment\"> * @ptr: pointer to validate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This verifies that the untrusted pointer looks sane;</span>", 
"<span class=\"comment\"> * it is _not_ a guarantee that the pointer is actually</span>", 
"<span class=\"comment\"> * part of the slab cache in question, but it at least</span>", 
"<span class=\"comment\"> * validates that the pointer can be dereferenced and</span>", 
"<span class=\"comment\"> * looks half-way sane.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Currently only used for dentry validation.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kmem_ptr_validate\">kmem_ptr_validate</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, const void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#kern_ptr_validate\">kern_ptr_validate</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size\">size</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#PageSlab\">PageSlab</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page_get_cache\">page_get_cache</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#cachep\">cachep</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>return 1;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"void *<a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__cache_alloc_node\">__cache_alloc_node</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_kmem_cache_alloc_node\">trace_kmem_cache_alloc_node</a>(<a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>, <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>), <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>", 
"void *<a class=\"id\" href=\"#kmem_cache_alloc_node_notrace\">kmem_cache_alloc_node_notrace</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__cache_alloc_node\">__cache_alloc_node</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_alloc_node_notrace\">kmem_cache_alloc_node_notrace</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *", 
"<a class=\"id\" href=\"#__do_kmalloc_node\">__do_kmalloc_node</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>, void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#kmem_find_general_cachep\">kmem_find_general_cachep</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ZERO_OR_NULL_PTR\">ZERO_OR_NULL_PTR</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kmem_cache_alloc_node_notrace\">kmem_cache_alloc_node_notrace</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_kmalloc_node\">trace_kmalloc_node</a>((unsigned long) <a class=\"id\" href=\"#caller\">caller</a>, <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_SLAB\">CONFIG_DEBUG_SLAB</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>)", 
"void *<a class=\"id\" href=\"#__kmalloc_node\">__kmalloc_node</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__do_kmalloc_node\">__do_kmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__kmalloc_node\">__kmalloc_node</a>);", 
"", 
"void *<a class=\"id\" href=\"#__kmalloc_node_track_caller\">__kmalloc_node_track_caller</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>, unsigned long <a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__do_kmalloc_node\">__do_kmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>, (void *)<a class=\"id\" href=\"#caller\">caller</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__kmalloc_node_track_caller\">__kmalloc_node_track_caller</a>);", 
"#else", 
"void *<a class=\"id\" href=\"#__kmalloc_node\">__kmalloc_node</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__do_kmalloc_node\">__do_kmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__kmalloc_node\">__kmalloc_node</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DEBUG_SLAB || CONFIG_TRACING */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __do_kmalloc - allocate memory</span>", 
"<span class=\"comment\"> * @size: how many bytes of memory are required.</span>", 
"<span class=\"comment\"> * @flags: the type of memory to allocate (see kmalloc).</span>", 
"<span class=\"comment\"> * @caller: function caller for debug tracking of the caller</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *<a class=\"id\" href=\"#__do_kmalloc\">__do_kmalloc</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If you want to save a few bytes .text space: replace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __ with kmem_.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Then kmalloc uses the uninlined functions instead of the inline</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * functions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#__find_general_cachep\">__find_general_cachep</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ZERO_OR_NULL_PTR\">ZERO_OR_NULL_PTR</a>(<a class=\"id\" href=\"#cachep\">cachep</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__cache_alloc\">__cache_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#caller\">caller</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_kmalloc\">trace_kmalloc</a>((unsigned long) <a class=\"id\" href=\"#caller\">caller</a>, <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_SLAB\">CONFIG_DEBUG_SLAB</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>)", 
"void *<a class=\"id\" href=\"#__kmalloc\">__kmalloc</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__do_kmalloc\">__do_kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__kmalloc\">__kmalloc</a>);", 
"", 
"void *<a class=\"id\" href=\"#__kmalloc_track_caller\">__kmalloc_track_caller</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, unsigned long <a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__do_kmalloc\">__do_kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, (void *)<a class=\"id\" href=\"#caller\">caller</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__kmalloc_track_caller\">__kmalloc_track_caller</a>);", 
"", 
"#else", 
"void *<a class=\"id\" href=\"#__kmalloc\">__kmalloc</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__do_kmalloc\">__do_kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__kmalloc\">__kmalloc</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmem_cache_free - Deallocate an object</span>", 
"<span class=\"comment\"> * @cachep: The cache the allocation was from.</span>", 
"<span class=\"comment\"> * @objp: The previously allocated object.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free an object which was previously allocated from this</span>", 
"<span class=\"comment\"> * cache.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_locks_freed\">debug_check_no_locks_freed</a>(<a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>));", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_DEBUG_OBJECTS\">SLAB_DEBUG_OBJECTS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_obj_freed\">debug_check_no_obj_freed</a>(<a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cache_free\">__cache_free</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_kmem_cache_free\">trace_kmem_cache_free</a>(<a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfree - free previously allocated memory</span>", 
"<span class=\"comment\"> * @objp: pointer returned by kmalloc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @objp is NULL, no operation is performed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Don't free memory not originally allocated by kmalloc()</span>", 
"<span class=\"comment\"> * or you will run into trouble.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kfree\">kfree</a>(const void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_kfree\">trace_kfree</a>(<a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>, <a class=\"id\" href=\"#objp\">objp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ZERO_OR_NULL_PTR\">ZERO_OR_NULL_PTR</a>(<a class=\"id\" href=\"#objp\">objp</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_debugcheck\">kfree_debugcheck</a>(<a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#virt_to_cache\">virt_to_cache</a>(<a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_locks_freed\">debug_check_no_locks_freed</a>(<a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#c\">c</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_obj_freed\">debug_check_no_obj_freed</a>(<a class=\"id\" href=\"#objp\">objp</a>, <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#c\">c</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cache_free\">__cache_free</a>(<a class=\"id\" href=\"#c\">c</a>, (void *)<a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kfree\">kfree</a>);", 
"", 
"unsigned int <a class=\"id\" href=\"#kmem_cache_size\">kmem_cache_size</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kmem_cache_size\">kmem_cache_size</a>);", 
"", 
"const char *<a class=\"id\" href=\"#kmem_cache_name\">kmem_cache_name</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kmem_cache_name\">kmem_cache_name</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This initializes kmem_list3 or resizes various caches for all nodes.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#alloc_kmemlist\">alloc_kmemlist</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#new_shared\">new_shared</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> **<a class=\"id\" href=\"#new_alien\">new_alien</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#node\">node</a>) {", 
"", 
"                if (<a class=\"id\" href=\"#use_alien_caches\">use_alien_caches</a>) {", 
"                        <a class=\"id\" href=\"#new_alien\">new_alien</a> = <a class=\"id\" href=\"#alloc_alien_cache\">alloc_alien_cache</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"                        if (!<a class=\"id\" href=\"#new_alien\">new_alien</a>)", 
"                                goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"                }", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_shared\">new_shared</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#shared\">shared</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_shared\">new_shared</a> = <a class=\"id\" href=\"#alloc_arraycache\">alloc_arraycache</a>(<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#shared\">shared</a>*<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0xbaadf00d, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_shared\">new_shared</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_alien_cache\">free_alien_cache</a>(<a class=\"id\" href=\"#new_alien\">new_alien</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#shared\">shared</a> = <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shared\">shared</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_block\">free_block</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#shared\">shared</a>-><a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a>-><a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a> = <a class=\"id\" href=\"#new_shared\">new_shared</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a> = <a class=\"id\" href=\"#new_alien\">new_alien</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_alien\">new_alien</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_limit\">free_limit</a> = (1 + <a class=\"id\" href=\"#nr_cpus_node\">nr_cpus_node</a>(<a class=\"id\" href=\"#node\">node</a>)) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a> + <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#shared\">shared</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_alien_cache\">free_alien_cache</a>(<a class=\"id\" href=\"#new_alien\">new_alien</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a>), <a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_alien_cache\">free_alien_cache</a>(<a class=\"id\" href=\"#new_alien\">new_alien</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new_shared\">new_shared</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_list3_init\">kmem_list3_init</a>(<a class=\"id\" href=\"#l3\">l3</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#next_reap\">next_reap</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#REAPTIMEOUT_LIST3\">REAPTIMEOUT_LIST3</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#cachep\">cachep</a>) % <a class=\"id\" href=\"#REAPTIMEOUT_LIST3\">REAPTIMEOUT_LIST3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a> = <a class=\"id\" href=\"#new_shared\">new_shared</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a> = <a class=\"id\" href=\"#new_alien\">new_alien</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_limit\">free_limit</a> = (1 + <a class=\"id\" href=\"#nr_cpus_node\">nr_cpus_node</a>(<a class=\"id\" href=\"#node\">node</a>)) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a> + <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>] = <a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#next\">next</a>.<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Cache is not active yet. Roll back what we did */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#node\">node</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_alien_cache\">free_alien_cache</a>(<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#alien\">alien</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#l3\">l3</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#ccupdate_struct\">ccupdate_struct</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#new\">new</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>];", 
"};", 
"", 
"static void <a class=\"id\" href=\"#do_ccupdate_local\">do_ccupdate_local</a>(void *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ccupdate_struct\">ccupdate_struct</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_off\">check_irq_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cachep\">cachep</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()] = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#new\">new</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#new\">new</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()] = <a class=\"id\" href=\"#old\">old</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Always called with the cache_chain_mutex held */</span>", 
"static int <a class=\"id\" href=\"#do_tune_cpucache\">do_tune_cpucache</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, int <a class=\"id\" href=\"#limit\">limit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#batchcount\">batchcount</a>, int <a class=\"id\" href=\"#shared\">shared</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ccupdate_struct\">ccupdate_struct</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#new\">new</a>), <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#new\">new</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#alloc_arraycache\">alloc_arraycache</a>(<a class=\"id\" href=\"#cpu_to_mem\">cpu_to_mem</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#limit\">limit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#batchcount\">batchcount</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#new\">new</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>--; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#new\">new</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#cachep\">cachep</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#do_ccupdate_local\">do_ccupdate_local</a>, (void *)<a class=\"id\" href=\"#new\">new</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_on\">check_irq_on</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a> = <a class=\"id\" href=\"#batchcount\">batchcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#shared\">shared</a> = <a class=\"id\" href=\"#shared\">shared</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ccold\">ccold</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#new\">new</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ccold\">ccold</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#cpu_to_mem\">cpu_to_mem</a>(<a class=\"id\" href=\"#i\">i</a>)]-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_block\">free_block</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#ccold\">ccold</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#ccold\">ccold</a>-><a class=\"id\" href=\"#avail\">avail</a>, <a class=\"id\" href=\"#cpu_to_mem\">cpu_to_mem</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#cpu_to_mem\">cpu_to_mem</a>(<a class=\"id\" href=\"#i\">i</a>)]-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ccold\">ccold</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_kmemlist\">alloc_kmemlist</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Called with cache_chain_mutex held always */</span>", 
"static int <a class=\"id\" href=\"#enable_cpucache\">enable_cpucache</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#shared\">shared</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The head array serves three purposes:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - create a LIFO ordering, i.e. return objects that are cache-warm</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - reduce the number of spinlock operations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - reduce the number of linked list operations on the slab and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   bufctl chains: array operations are cheaper.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The numbers are guessed, we should auto-tune as described by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Bonwick.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> &gt; 131072)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = 1;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = 8;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> &gt; 1024)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = 24;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> &gt; 256)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = 54;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = 120;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU bound tasks (e.g. network routing) can exhibit cpu bound</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation behaviour: Most allocs on one cpu, most free operations</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on another cpu. For these cases, an efficient object passing between</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpus is necessary. This is provided by a shared array. The array</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * replaces Bonwick's magazine layer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On uniprocessor, it's functionally equivalent (but less efficient)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to a larger limit. Thus disabled by default.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> <= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> && <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a> = 8;", 
"", 
"#if <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * With debugging enabled, large batchcount lead to excessively long</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * periods with disabled local interrupts. Limit the batchcount</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> &gt; 32)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = 32;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_tune_cpucache\">do_tune_cpucache</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#limit\">limit</a>, (<a class=\"id\" href=\"#limit\">limit</a> + 1) / 2, <a class=\"id\" href=\"#shared\">shared</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"enable_cpucache failed for %s, error %d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#name\">name</a>, -<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Drain an array if it contains any elements taking the l3 lock only if</span>", 
"<span class=\"comment\"> * necessary. Note that the l3 listlock also protects the array_cache</span>", 
"<span class=\"comment\"> * if drain_array() is used on the shared array.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#drain_array\">drain_array</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#ac\">ac</a>, int <a class=\"id\" href=\"#force\">force</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tofree\">tofree</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ac\">ac</a> || !<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#touched\">touched</a> && !<a class=\"id\" href=\"#force\">force</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#touched\">touched</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tofree\">tofree</a> = <a class=\"id\" href=\"#force\">force</a> ? <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a> : (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#limit\">limit</a> + 4) / 5;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tofree\">tofree</a> &gt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tofree\">tofree</a> = (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a> + 1) / 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_block\">free_block</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#tofree\">tofree</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a> -= <a class=\"id\" href=\"#tofree\">tofree</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>, &amp;(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#tofree\">tofree</a>]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(void *) * <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#avail\">avail</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cache_reap - Reclaim memory from caches.</span>", 
"<span class=\"comment\"> * @w: work descriptor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called from workqueue/eventd every few seconds.</span>", 
"<span class=\"comment\"> * Purpose:</span>", 
"<span class=\"comment\"> * - clear the per-cpu caches for this CPU.</span>", 
"<span class=\"comment\"> * - return freeable pages to the main free memory pool.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we cannot acquire the cache chain mutex then just give up - we'll try</span>", 
"<span class=\"comment\"> * again on the next iteration.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cache_reap\">cache_reap</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#w\">w</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#searchp\">searchp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#numa_mem_id\">numa_mem_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> *<a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#to_delayed_work\">to_delayed_work</a>(<a class=\"id\" href=\"#w\">w</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mutex_trylock\">mutex_trylock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Give up. Setup the next iteration. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#searchp\">searchp</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_irq_on\">check_irq_on</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We only take the l3 lock if absolutely necessary and we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * have established with reasonable certainty that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we can do some work if the lock was obtained.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#searchp\">searchp</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reap_alien\">reap_alien</a>(<a class=\"id\" href=\"#searchp\">searchp</a>, <a class=\"id\" href=\"#l3\">l3</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_array\">drain_array</a>(<a class=\"id\" href=\"#searchp\">searchp</a>, <a class=\"id\" href=\"#l3\">l3</a>, <a class=\"id\" href=\"#cpu_cache_get\">cpu_cache_get</a>(<a class=\"id\" href=\"#searchp\">searchp</a>), 0, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * These are racy checks but it does not matter</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if we skip one check or scan twice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#next_reap\">next_reap</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#next_reap\">next_reap</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#REAPTIMEOUT_LIST3\">REAPTIMEOUT_LIST3</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_array\">drain_array</a>(<a class=\"id\" href=\"#searchp\">searchp</a>, <a class=\"id\" href=\"#l3\">l3</a>, <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>, 0, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_touched\">free_touched</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_touched\">free_touched</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#freed\">freed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freed\">freed</a> = <a class=\"id\" href=\"#drain_freelist\">drain_freelist</a>(<a class=\"id\" href=\"#searchp\">searchp</a>, <a class=\"id\" href=\"#l3\">l3</a>, (<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_limit\">free_limit</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>5 * <a class=\"id\" href=\"#searchp\">searchp</a>-><a class=\"id\" href=\"#num\">num</a> - 1) / (5 * <a class=\"id\" href=\"#searchp\">searchp</a>-><a class=\"id\" href=\"#num\">num</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STATS_ADD_REAPED\">STATS_ADD_REAPED</a>(<a class=\"id\" href=\"#searchp\">searchp</a>, <a class=\"id\" href=\"#freed\">freed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#next\">next</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irq_on\">check_irq_on</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_reap_node\">next_reap_node</a>();", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up the next iteration */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#round_jiffies_relative\">round_jiffies_relative</a>(<a class=\"id\" href=\"#REAPTIMEOUT_CPUC\">REAPTIMEOUT_CPUC</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SLABINFO\">CONFIG_SLABINFO</a>", 
"", 
"static void <a class=\"id\" href=\"#print_slabinfo_header\">print_slabinfo_header</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Output format version, so at least we can change it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * without _too_ many complaints.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#if <a class=\"id\" href=\"#STATS\">STATS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"slabinfo - version: 2.1 (statistics)\\n\");", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"slabinfo - version: 2.1\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"# name            <active_objs> <num_objs> <objsize> \"", 
"<span class=\"ts\"/><span class=\"ts\"/> \"<objperslab> <pagesperslab>\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \" : tunables <limit> <batchcount> <sharedfactor>\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \" : slabdata <active_slabs> <num_slabs> <sharedavail>\");", 
"#if <a class=\"id\" href=\"#STATS\">STATS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \" : globalstat <listallocs> <maxobjs> <grown> <reaped> \"", 
"<span class=\"ts\"/><span class=\"ts\"/> \"<error> <maxfreeable> <nodeallocs> <remotefrees> <alienoverflow>\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \" : cpustat <allochit> <allocmiss> <freehit> <freemiss>\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '\\n');", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#s_start\">s_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#n\">n</a> = *<a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_slabinfo_header\">print_slabinfo_header</a>(<a class=\"id\" href=\"#m\">m</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>(&amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, *<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#s_next\">s_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_next\">seq_list_next</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#s_stop\">s_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#s_show\">s_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#active_objs\">active_objs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num_objs\">num_objs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#active_slabs\">active_slabs</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num_slabs\">num_slabs</a>, <a class=\"id\" href=\"#free_objects\">free_objects</a> = 0, <a class=\"id\" href=\"#shared_avail\">shared_avail</a> = 0;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#active_objs\">active_objs</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_slabs\">num_slabs</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_irq_on\">check_irq_on</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#slabp\">slabp</a>, &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_full\">slabs_full</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a> != <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a> && !<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = \"slabs_full accounting error\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active_objs\">active_objs</a> += <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active_slabs\">active_slabs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#slabp\">slabp</a>, &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a> == <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a> && !<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = \"slabs_partial inuse accounting error\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a> && !<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = \"slabs_partial/inuse accounting error\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active_objs\">active_objs</a> += <a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active_slabs\">active_slabs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#slabp\">slabp</a>, &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_free\">slabs_free</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slabp\">slabp</a>-><a class=\"id\" href=\"#inuse\">inuse</a> && !<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = \"slabs_free/inuse accounting error\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_slabs\">num_slabs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_objects\">free_objects</a> += <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#free_objects\">free_objects</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared_avail\">shared_avail</a> += <a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#shared\">shared</a>-><a class=\"id\" href=\"#avail\">avail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_slabs\">num_slabs</a> += <a class=\"id\" href=\"#active_slabs\">active_slabs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_objs\">num_objs</a> = <a class=\"id\" href=\"#num_slabs\">num_slabs</a> * <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_objs\">num_objs</a> - <a class=\"id\" href=\"#active_objs\">active_objs</a> != <a class=\"id\" href=\"#free_objects\">free_objects</a> && !<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = \"free_objects accounting error\";", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"slab: cache %s error: %s\\n\", <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%-17s %6lu %6lu %6u %4u %4d\",", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#active_objs\">active_objs</a>, <a class=\"id\" href=\"#num_objs\">num_objs</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num\">num</a>, (1 << <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#gfporder\">gfporder</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" : tunables %4u %4u %4u\",", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#batchcount\">batchcount</a>, <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#shared\">shared</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" : slabdata %6lu %6lu %6lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#active_slabs\">active_slabs</a>, <a class=\"id\" href=\"#num_slabs\">num_slabs</a>, <a class=\"id\" href=\"#shared_avail\">shared_avail</a>);", 
"#if <a class=\"id\" href=\"#STATS\">STATS</a>", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* list3 stats */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#high\">high</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#high_mark\">high_mark</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#allocs\">allocs</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#num_allocations\">num_allocations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#grown\">grown</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#grown\">grown</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reaped\">reaped</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#reaped\">reaped</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#errors\">errors</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#errors\">errors</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_freeable\">max_freeable</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#max_freeable\">max_freeable</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_allocs\">node_allocs</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#node_allocs\">node_allocs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_frees\">node_frees</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#node_frees\">node_frees</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#overflows\">overflows</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#node_overflow\">node_overflow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" : globalstat %7lu %6lu %5lu %4lu \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"%4lu %4lu %4lu %4lu %4lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#allocs\">allocs</a>, <a class=\"id\" href=\"#high\">high</a>, <a class=\"id\" href=\"#grown\">grown</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#reaped\">reaped</a>, <a class=\"id\" href=\"#errors\">errors</a>, <a class=\"id\" href=\"#max_freeable\">max_freeable</a>, <a class=\"id\" href=\"#node_allocs\">node_allocs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#node_frees\">node_frees</a>, <a class=\"id\" href=\"#overflows\">overflows</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* cpu stats */</span>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#allochit\">allochit</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#allochit\">allochit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#allocmiss\">allocmiss</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#allocmiss\">allocmiss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#freehit\">freehit</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#freehit\">freehit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#freemiss\">freemiss</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#freemiss\">freemiss</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" : cpustat %6lu %6lu %6lu %6lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#allochit\">allochit</a>, <a class=\"id\" href=\"#allocmiss\">allocmiss</a>, <a class=\"id\" href=\"#freehit\">freehit</a>, <a class=\"id\" href=\"#freemiss\">freemiss</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '\\n');", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * slabinfo_op - iterator that generates /proc/slabinfo</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Output layout:</span>", 
"<span class=\"comment\"> * cache-name</span>", 
"<span class=\"comment\"> * num-active-objs</span>", 
"<span class=\"comment\"> * total-objs</span>", 
"<span class=\"comment\"> * object size</span>", 
"<span class=\"comment\"> * num-active-slabs</span>", 
"<span class=\"comment\"> * total-slabs</span>", 
"<span class=\"comment\"> * num-pages-per-slab</span>", 
"<span class=\"comment\"> * + further values on SMP and with statistics enabled</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#slabinfo_op\">slabinfo_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#s_start\">s_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#s_next\">s_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a> = <a class=\"id\" href=\"#s_stop\">s_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#s_show\">s_show</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_SLABINFO_WRITE\">MAX_SLABINFO_WRITE</a> 128", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * slabinfo_write - Tuning for the slab allocator</span>", 
"<span class=\"comment\"> * @file: unused</span>", 
"<span class=\"comment\"> * @buffer: user buffer</span>", 
"<span class=\"comment\"> * @count: data length</span>", 
"<span class=\"comment\"> * @ppos: unused</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#slabinfo_write\">slabinfo_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#kbuf\">kbuf</a>[<a class=\"id\" href=\"#MAX_SLABINFO_WRITE\">MAX_SLABINFO_WRITE</a> + 1], *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#batchcount\">batchcount</a>, <a class=\"id\" href=\"#shared\">shared</a>, <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#MAX_SLABINFO_WRITE\">MAX_SLABINFO_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a>[<a class=\"id\" href=\"#MAX_SLABINFO_WRITE\">MAX_SLABINFO_WRITE</a>] = '\\0';", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>, ' ');", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#tmp\">tmp</a> = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, \" %d %d %d\", &amp;<a class=\"id\" href=\"#limit\">limit</a>, &amp;<a class=\"id\" href=\"#batchcount\">batchcount</a>, &amp;<a class=\"id\" href=\"#shared\">shared</a>) != 3)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the cache in the chain of caches. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, &amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#kbuf\">kbuf</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#limit\">limit</a> &lt; 1 || <a class=\"id\" href=\"#batchcount\">batchcount</a> &lt; 1 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#batchcount\">batchcount</a> &gt; <a class=\"id\" href=\"#limit\">limit</a> || <a class=\"id\" href=\"#shared\">shared</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#do_tune_cpucache\">do_tune_cpucache</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#limit\">limit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#batchcount\">batchcount</a>, <a class=\"id\" href=\"#shared\">shared</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#slabinfo_open\">slabinfo_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#slabinfo_op\">slabinfo_op</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_slabinfo_operations\">proc_slabinfo_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#slabinfo_open\">slabinfo_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#slabinfo_write\">slabinfo_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SLAB_LEAK\">CONFIG_DEBUG_SLAB_LEAK</a>", 
"", 
"static void *<a class=\"id\" href=\"#leaks_start\">leaks_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>(&amp;<a class=\"id\" href=\"#cache_chain\">cache_chain</a>, *<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#add_caller\">add_caller</a>(unsigned long *<a class=\"id\" href=\"#n\">n</a>, unsigned long <a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#v\">v</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#n\">n</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#n\">n</a> + 2;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#l\">l</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#l\">l</a>/2;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#p\">p</a> + 2 * <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#q\">q</a> == <a class=\"id\" href=\"#v\">v</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>[1]++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#q\">q</a> &gt; <a class=\"id\" href=\"#v\">v</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#q\">q</a> + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> -= <a class=\"id\" href=\"#i\">i</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (++<a class=\"id\" href=\"#n\">n</a>[1] == <a class=\"id\" href=\"#n\">n</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#p\">p</a> + 2, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#n\">n</a>[1] * 2 * sizeof(unsigned long) - ((void *)<a class=\"id\" href=\"#p\">p</a> - (void *)<a class=\"id\" href=\"#n\">n</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>[0] = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>[1] = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#handle_slab\">handle_slab</a>(unsigned long *<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#c\">c</a>, struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>[0] == <a class=\"id\" href=\"#n\">n</a>[1])", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_mem\">s_mem</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slab_bufctl\">slab_bufctl</a>(<a class=\"id\" href=\"#s\">s</a>)[<a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#BUFCTL_ACTIVE\">BUFCTL_ACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#add_caller\">add_caller</a>(<a class=\"id\" href=\"#n\">n</a>, (unsigned long)*<a class=\"id\" href=\"#dbg_userword\">dbg_userword</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#show_symbol\">show_symbol</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KALLSYMS\">CONFIG_KALLSYMS</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#modname\">modname</a>[<a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>], <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lookup_symbol_attrs\">lookup_symbol_attrs</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#name\">name</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%s+%#lx/%#lx\", <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#modname\">modname</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" [%s]\", <a class=\"id\" href=\"#modname\">modname</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%p\", (void *)<a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#leaks_show\">leaks_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#slab\">slab</a> *<a class=\"id\" href=\"#slabp\">slabp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#l3\">l3</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* OK, we can do it */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>[1] = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l3\">l3</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#l3\">l3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_irq_on\">check_irq_on</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#slabp\">slabp</a>, &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_full\">slabs_full</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle_slab\">handle_slab</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#slabp\">slabp</a>, &amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#slabs_partial\">slabs_partial</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle_slab\">handle_slab</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#slabp\">slabp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#l3\">l3</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#cachep\">cachep</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>[0] == <a class=\"id\" href=\"#n\">n</a>[1]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Increase the buffer size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#n\">n</a>[0] * 4 * sizeof(unsigned long), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Too bad, we are really out */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*(unsigned long *)<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#n\">n</a>[0] * 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cache_chain_mutex\">cache_chain_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now make sure this entry will be retried */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>[1]; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%s: %lu \", <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#n\">n</a>[2*<a class=\"id\" href=\"#i\">i</a>+3]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_symbol\">show_symbol</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#n\">n</a>[2*<a class=\"id\" href=\"#i\">i</a>+2]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '\\n');", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#slabstats_op\">slabstats_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#leaks_start\">leaks_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#s_next\">s_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a> = <a class=\"id\" href=\"#s_stop\">s_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#leaks_show\">leaks_show</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#slabstats_open\">slabstats_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#slabstats_op\">slabstats_op</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / (2 * sizeof(unsigned long));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_slabstats_operations\">proc_slabstats_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#slabstats_open\">slabstats_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release_private\">seq_release_private</a>,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#slab_proc_init\">slab_proc_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"slabinfo\",<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>|<a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,<a class=\"id\" href=\"#NULL\">NULL</a>,&amp;<a class=\"id\" href=\"#proc_slabinfo_operations\">proc_slabinfo_operations</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SLAB_LEAK\">CONFIG_DEBUG_SLAB_LEAK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"slab_allocators\", 0, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_slabstats_operations\">proc_slabstats_operations</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#slab_proc_init\">slab_proc_init</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ksize - get the actual amount of memory allocated for a given object</span>", 
"<span class=\"comment\"> * @objp: Pointer to the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * kmalloc may internally round up allocations and return more memory</span>", 
"<span class=\"comment\"> * than requested. ksize() can be used to determine the actual amount of</span>", 
"<span class=\"comment\"> * memory allocated. The caller may use this additional memory, even though</span>", 
"<span class=\"comment\"> * a smaller amount of memory was initially specified with the kmalloc call.</span>", 
"<span class=\"comment\"> * The caller must guarantee that objp points to a valid object previously</span>", 
"<span class=\"comment\"> * allocated with either kmalloc() or kmem_cache_alloc(). The object</span>", 
"<span class=\"comment\"> * must not be freed during the duration of the call.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ksize\">ksize</a>(const void *<a class=\"id\" href=\"#objp\">objp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#objp\">objp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#objp\">objp</a> == <a class=\"id\" href=\"#ZERO_SIZE_PTR\">ZERO_SIZE_PTR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#obj_size\">obj_size</a>(<a class=\"id\" href=\"#virt_to_cache\">virt_to_cache</a>(<a class=\"id\" href=\"#objp\">objp</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ksize\">ksize</a>);", 
];
xr_frag_insert('l/60/0977c143c2d4274c65754b909c9e916c126b1f.xr', __xr_tmp);
