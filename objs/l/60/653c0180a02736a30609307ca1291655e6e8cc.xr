var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>\"64==0x%04x  \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"75==0x%04x  \\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[49],", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[53],", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[63],", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[64],", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[75]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"80==0x%04x  \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"81==0x%04x  \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"82==0x%04x  \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"83==0x%04x  \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"84==0x%04x  \\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[80],", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[81],", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[82],", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[83],", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[84]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"88==0x%04x  \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"93==0x%04x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[88],", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[93]);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_id_xfermask - Compute xfermask from the given IDENTIFY data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@id: IDENTIFY data to compute xfer mask from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Compute the xfermask for this device. This is not as trivial</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as it seems if we must consider early devices correctly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>FIXME: pre IDE drive timing (do we care ?).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Computed xfermask</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ata_id_xfermask\">ata_id_xfermask</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pio_mask\">pio_mask</a>, <a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>, <a class=\"id\" href=\"#udma_mask\">udma_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Usual case. Word 53 indicates word 64 is valid */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_FIELD_VALID\">ATA_ID_FIELD_VALID</a>] &amp; (1 << 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pio_mask\">pio_mask</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_PIO_MODES\">ATA_ID_PIO_MODES</a>] &amp; 0x03;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pio_mask\">pio_mask</a> <<= 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pio_mask\">pio_mask</a> |= 0x7;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If word 64 isn't valid then Word 51 high byte holds</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the PIO timing number for the maximum. Turn it into</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a mask.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#mode\">mode</a> = (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_OLD_PIO_MODES\">ATA_ID_OLD_PIO_MODES</a>] >> 8) &amp; 0xFF;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> &lt; 5)<span class=\"ts\"/><span class=\"comment\">/* Valid PIO range */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pio_mask\">pio_mask</a> = (2 << <a class=\"id\" href=\"#mode\">mode</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pio_mask\">pio_mask</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* But wait.. there's more. Design your standards by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * committee and you too can get a free iordy field to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * process. However its the speeds not the modes that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are supported... Note drivers using the timing API</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will get this right anyway</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_MWDMA_MODES\">ATA_ID_MWDMA_MODES</a>] &amp; 0x07;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_is_cfa\">ata_id_is_cfa</a>(<a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>Process compact flash extended modes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#pio\">pio</a> = (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CFA_MODES\">ATA_ID_CFA_MODES</a>] >> 0) &amp; 0x7;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dma\">dma</a> = (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CFA_MODES\">ATA_ID_CFA_MODES</a>] >> 3) &amp; 0x7;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pio\">pio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pio_mask\">pio_mask</a> |= (1 << 5);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pio\">pio</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pio_mask\">pio_mask</a> |= (1 << 6);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma\">dma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> |= (1 << 3);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma\">dma</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> |= (1 << 4);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udma_mask\">udma_mask</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_FIELD_VALID\">ATA_ID_FIELD_VALID</a>] &amp; (1 << 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udma_mask\">udma_mask</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_UDMA_MODES\">ATA_ID_UDMA_MODES</a>] &amp; 0xff;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_pack_xfermask\">ata_pack_xfermask</a>(<a class=\"id\" href=\"#pio_mask\">pio_mask</a>, <a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>, <a class=\"id\" href=\"#udma_mask\">udma_mask</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_qc_complete_internal\">ata_qc_complete_internal</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#waiting\">waiting</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#waiting\">waiting</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_exec_internal_sg - execute libata internal command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Device to which the command is sent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tf: Taskfile registers for the command and the result</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cdb: CDB for packet command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dma_dir: Data tranfer direction of the command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sgl: sg list for the data buffer of the command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n_elem: Number of sg entries</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@timeout: Timeout in msecs (0 for default)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Executes libata internal command with timeout.  @tf contains</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>command on entry and result on return.  Timeout and error</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>conditions are reported via return value.  No recovery action</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is taken after a command times out.  It's caller's duty to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>clean up after timeout.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.  Should be called with kernel context, might sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, AC_ERR_* mask on failure</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned <a class=\"id\" href=\"#ata_exec_internal_sg\">ata_exec_internal_sg</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cdb\">cdb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#dma_dir\">dma_dir</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#n_elem\">n_elem</a>, unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#auto_timeout\">auto_timeout</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#preempted_tag\">preempted_tag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#preempted_sactive\">preempted_sactive</a>, <a class=\"id\" href=\"#preempted_qc_active\">preempted_qc_active</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#preempted_nr_active_links\">preempted_nr_active_links</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_COMPLETION_ONSTACK\">DECLARE_COMPLETION_ONSTACK</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no internal command while frozen */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_FROZEN\">ATA_PFLAG_FROZEN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AC_ERR_SYSTEM\">AC_ERR_SYSTEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* initialize internal qc */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX: Tag 0 is used for drivers with legacy EH as some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * drivers choke if any other tag is given.  This breaks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ata_tag_internal() test for those drivers.  Don't use new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * EH stuff without converting to it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#ATA_TAG_INTERNAL\">ATA_TAG_INTERNAL</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#tag\">tag</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#qc_allocated\">qc_allocated</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#__ata_qc_from_tag\">__ata_qc_from_tag</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#tag\">tag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_reinit\">ata_qc_reinit</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempted_tag\">preempted_tag</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#active_tag\">active_tag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempted_sactive\">preempted_sactive</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sactive\">sactive</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempted_qc_active\">preempted_qc_active</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#qc_active\">qc_active</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempted_nr_active_links\">preempted_nr_active_links</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#nr_active_links\">nr_active_links</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#active_tag\">active_tag</a> = <a class=\"id\" href=\"#ATA_TAG_POISON\">ATA_TAG_POISON</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sactive\">sactive</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#qc_active\">qc_active</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#nr_active_links\">nr_active_links</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* prepare &amp; issue qc */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a> = *<a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cdb\">cdb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#cdb\">cdb</a>, <a class=\"id\" href=\"#cdb\">cdb</a>, <a class=\"id\" href=\"#ATAPI_CDB_LEN\">ATAPI_CDB_LEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_QCFLAG_RESULT_TF\">ATA_QCFLAG_RESULT_TF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dma_dir\">dma_dir</a> = <a class=\"id\" href=\"#dma_dir\">dma_dir</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_dir\">dma_dir</a> != <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#buflen\">buflen</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#n_elem\">n_elem</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a> += <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_sg_init\">ata_sg_init</a>(<a class=\"id\" href=\"#qc\">qc</a>, <a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#n_elem\">n_elem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = &amp;<a class=\"id\" href=\"#wait\">wait</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#complete_fn\">complete_fn</a> = <a class=\"id\" href=\"#ata_qc_complete_internal\">ata_qc_complete_internal</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_issue\">ata_qc_issue</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#timeout\">timeout</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_probe_timeout\">ata_probe_timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#ata_probe_timeout\">ata_probe_timeout</a> * 1000;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#ata_internal_cmd_timeout\">ata_internal_cmd_timeout</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#command\">command</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#auto_timeout\">auto_timeout</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#wait_for_completion_timeout\">wait_for_completion_timeout</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#timeout\">timeout</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_sff_flush_pio_task\">ata_sff_flush_pio_task</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We're racing with irq here.  If we lose, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * following test prevents us from completing the qc</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * twice.  If we win, the port is frozen and will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cleaned up by -&gt;post_internal_cmd().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_ACTIVE\">ATA_QCFLAG_ACTIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> |= <a class=\"id\" href=\"#AC_ERR_TIMEOUT\">AC_ERR_TIMEOUT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_freeze\">ata_port_freeze</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_complete\">ata_qc_complete</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_msg_warn\">ata_msg_warn</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"qc timeout (cmd 0x%x)\\n\", <a class=\"id\" href=\"#command\">command</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do post_internal_cmd */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#post_internal_cmd\">post_internal_cmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#post_internal_cmd\">post_internal_cmd</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* perform minimal error analysis */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_FAILED\">ATA_QCFLAG_FAILED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#result_tf\">result_tf</a>.<a class=\"id\" href=\"#command\">command</a> &amp; (<a class=\"id\" href=\"#ATA_ERR\">ATA_ERR</a> | <a class=\"id\" href=\"#ATA_DF\">ATA_DF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> |= <a class=\"id\" href=\"#AC_ERR_DEV\">AC_ERR_DEV</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> |= <a class=\"id\" href=\"#AC_ERR_OTHER\">AC_ERR_OTHER</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> &amp; ~<a class=\"id\" href=\"#AC_ERR_OTHER\">AC_ERR_OTHER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> &= ~<a class=\"id\" href=\"#AC_ERR_OTHER\">AC_ERR_OTHER</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* finish up */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#tf\">tf</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#result_tf\">result_tf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_free\">ata_qc_free</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#active_tag\">active_tag</a> = <a class=\"id\" href=\"#preempted_tag\">preempted_tag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sactive\">sactive</a> = <a class=\"id\" href=\"#preempted_sactive\">preempted_sactive</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#qc_active\">qc_active</a> = <a class=\"id\" href=\"#preempted_qc_active\">preempted_qc_active</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#nr_active_links\">nr_active_links</a> = <a class=\"id\" href=\"#preempted_nr_active_links\">preempted_nr_active_links</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#err_mask\">err_mask</a> &amp; <a class=\"id\" href=\"#AC_ERR_TIMEOUT\">AC_ERR_TIMEOUT</a>) && <a class=\"id\" href=\"#auto_timeout\">auto_timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_internal_cmd_timed_out\">ata_internal_cmd_timed_out</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#command\">command</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_exec_internal - execute libata internal command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Device to which the command is sent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tf: Taskfile registers for the command and the result</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cdb: CDB for packet command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dma_dir: Data tranfer direction of the command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: Data buffer of the command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buflen: Length of data buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@timeout: Timeout in msecs (0 for default)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Wrapper around ata_exec_internal_sg() which takes simple</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>buffer instead of sg list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.  Should be called with kernel context, might sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, AC_ERR_* mask on failure</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned <a class=\"id\" href=\"#ata_exec_internal\">ata_exec_internal</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cdb\">cdb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#dma_dir\">dma_dir</a>, void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#buflen\">buflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#psg\">psg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#n_elem\">n_elem</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_dir\">dma_dir</a> != <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_init_one\">sg_init_one</a>(&amp;<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psg\">psg</a> = &amp;<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n_elem\">n_elem</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_exec_internal_sg\">ata_exec_internal_sg</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#cdb\">cdb</a>, <a class=\"id\" href=\"#dma_dir\">dma_dir</a>, <a class=\"id\" href=\"#psg\">psg</a>, <a class=\"id\" href=\"#n_elem\">n_elem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_do_simple_cmd - execute simple internal command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Device to which the command is sent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: Opcode to execute</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Execute a 'simple' command, that only consists of the opcode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>'cmd' itself, without filling any other registers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, AC_ERR_* mask on failure</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#ata_do_simple_cmd\">ata_do_simple_cmd</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_tf_init\">ata_tf_init</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATA_PROT_NODATA\">ATA_PROT_NODATA</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_exec_internal\">ata_exec_internal</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pio_need_iordy<span class=\"ts\"/>-<span class=\"ts\"/>check if iordy needed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@adev: ATA device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check if the current speed of the device requires IORDY. Used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by various controllers for chip configuration.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#ata_pio_need_iordy\">ata_pio_need_iordy</a>(const struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#adev\">adev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't set IORDY if we're preparing for reset.  IORDY may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lead to controller lock up on certain controllers if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * port is not occupied.  See bko#11703 for details.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adev\">adev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_RESETTING\">ATA_PFLAG_RESETTING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* Controller doesn't support IORDY.  Probably a pointless</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check as the caller should know this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adev\">adev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_NO_IORDY\">ATA_FLAG_NO_IORDY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* CF spec. r4.1 Table 22 says no iordy on PIO5 and PIO6.  */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_is_cfa\">ata_id_is_cfa</a>(<a class=\"id\" href=\"#adev\">adev</a>-><a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/>    && (<a class=\"id\" href=\"#adev\">adev</a>-><a class=\"id\" href=\"#pio_mode\">pio_mode</a> == <a class=\"id\" href=\"#XFER_PIO_5\">XFER_PIO_5</a> || <a class=\"id\" href=\"#adev\">adev</a>-><a class=\"id\" href=\"#pio_mode\">pio_mode</a> == <a class=\"id\" href=\"#XFER_PIO_6\">XFER_PIO_6</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* PIO3 and higher it is mandatory */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adev\">adev</a>-><a class=\"id\" href=\"#pio_mode\">pio_mode</a> &gt; <a class=\"id\" href=\"#XFER_PIO_2\">XFER_PIO_2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"comment\">/* We turn it on when possible */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_has_iordy\">ata_id_has_iordy</a>(<a class=\"id\" href=\"#adev\">adev</a>-><a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pio_mask_no_iordy<span class=\"ts\"/>-<span class=\"ts\"/>Return the non IORDY mask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@adev: ATA device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Compute the highest mode possible if we are not using iordy. Return</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>-1 if no iordy mode is available.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ata_pio_mask_no_iordy\">ata_pio_mask_no_iordy</a>(const struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#adev\">adev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If we have no drive specific rule, then PIO 2 is non IORDY */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adev\">adev</a>-><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_FIELD_VALID\">ATA_ID_FIELD_VALID</a>] &amp; 2) {<span class=\"ts\"/><span class=\"comment\">/* EIDE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pio\">pio</a> = <a class=\"id\" href=\"#adev\">adev</a>-><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_EIDE_PIO\">ATA_ID_EIDE_PIO</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Is the speed faster than the drive allows non IORDY ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pio\">pio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is cycle times not frequency - watch the logic! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pio\">pio</a> &gt; 240)<span class=\"ts\"/><span class=\"comment\">/* PIO2 is 240nS per cycle */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 3 << <a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 7 << <a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 3 << <a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_do_dev_read_id<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>default ID read method</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tf: proposed taskfile</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@id: data buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Issue the identify taskfile and hand back the buffer containing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>identify data. For some RAID controllers and for pre ATA devices</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this function is wrapped or replaced by the driver</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#ata_do_dev_read_id\">ata_do_dev_read_id</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_exec_internal\">ata_exec_internal</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#id\">id</a>, sizeof(<a class=\"id\" href=\"#id\">id</a>[0]) * <a class=\"id\" href=\"#ATA_ID_WORDS\">ATA_ID_WORDS</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dev_read_id - Read ID data from the specified device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: target device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p_class: pointer to class of the target device (may be changed)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags: ATA_READID_* flags</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@id: buffer to read IDENTIFY data into</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Read ID data from the specified device.  ATA_CMD_ID_ATA is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>performed on ATA devices and ATA_CMD_ID_ATAPI on ATAPI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>devices.  This function also issues ATA_CMD_INIT_DEV_PARAMS</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for pre-ATA4 drives.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>FIXME: ATA_CMD_ID_ATA is optional for early drives and right</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>now we abort if we hit that case.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_dev_read_id\">ata_dev_read_id</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int *<a class=\"id\" href=\"#p_class\">p_class</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#class\">class</a> = *<a class=\"id\" href=\"#p_class\">p_class</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a> = 0;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#reason\">reason</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_semb\">is_semb</a> = <a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#ATA_DEV_SEMB\">ATA_DEV_SEMB</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may_fallback\">may_fallback</a> = 1, <a class=\"id\" href=\"#tried_spinup\">tried_spinup</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_msg_ctl\">ata_msg_ctl</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, \"%s: ENTER\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_tf_init\">ata_tf_init</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#class\">class</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_DEV_SEMB\">ATA_DEV_SEMB</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a>;<span class=\"ts\"/><span class=\"comment\">/* some hard drives report SEMB sig */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_ID_ATA\">ATA_CMD_ID_ATA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_DEV_ATAPI\">ATA_DEV_ATAPI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_ID_ATAPI\">ATA_CMD_ID_ATAPI</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = \"unsupported class\";", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATA_PROT_PIO\">ATA_PROT_PIO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Some devices choke if TF registers contain garbage.  Make</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sure those are properly initialized.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a> | <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Device presence detection is unreliable on some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * controllers.  Always poll IDENTIFY if available.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_POLLING\">ATA_TFLAG_POLLING</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#read_id\">read_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#read_id\">read_id</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ata_do_dev_read_id\">ata_do_dev_read_id</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err_mask\">err_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err_mask\">err_mask</a> &amp; <a class=\"id\" href=\"#AC_ERR_NODEV_HINT\">AC_ERR_NODEV_HINT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"NODEV after polling detection\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_semb\">is_semb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, \"IDENTIFY failed on \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"device w/ SEMB sig, disabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SEMB is not supported yet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p_class\">p_class</a> = <a class=\"id\" href=\"#ATA_DEV_SEMB_UNSUP\">ATA_DEV_SEMB_UNSUP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#err_mask\">err_mask</a> == <a class=\"id\" href=\"#AC_ERR_DEV\">AC_ERR_DEV</a>) && (<a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> &amp; <a class=\"id\" href=\"#ATA_ABORTED\">ATA_ABORTED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Device or controller might have reported</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the wrong device class.  Give a shot at the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * other IDENTIFY if the current one is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * aborted by the device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#may_fallback\">may_fallback</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may_fallback\">may_fallback</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#ATA_DEV_ATAPI\">ATA_DEV_ATAPI</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Control reaches here iff the device aborted</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * both flavors of IDENTIFYs which happens</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sometimes with phantom devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"both IDENTIFYs aborted, assuming NODEV\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = \"I/O error\";", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> &amp; <a class=\"id\" href=\"#ATA_HORKAGE_DUMP_ID\">ATA_HORKAGE_DUMP_ID</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, \"dumping IDENTIFY data, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"class=%d may_fallback=%d tried_spinup=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#class\">class</a>, <a class=\"id\" href=\"#may_fallback\">may_fallback</a>, <a class=\"id\" href=\"#tried_spinup\">tried_spinup</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_hex_dump\">print_hex_dump</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, \"\", <a class=\"id\" href=\"#DUMP_PREFIX_OFFSET\">DUMP_PREFIX_OFFSET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       16, 2, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ATA_ID_WORDS\">ATA_ID_WORDS</a> * sizeof(*<a class=\"id\" href=\"#id\">id</a>), <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Falling back doesn't make sense if ID data was read</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * successfully at least once.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#may_fallback\">may_fallback</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_buf_le16\">swap_buf_le16</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ATA_ID_WORDS\">ATA_ID_WORDS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sanity check */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = \"device reports invalid type\";", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_id_is_ata\">ata_id_is_ata</a>(<a class=\"id\" href=\"#id\">id</a>) && !<a class=\"id\" href=\"#ata_id_is_cfa\">ata_id_is_cfa</a>(<a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_is_ata\">ata_id_is_ata</a>(<a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tried_spinup\">tried_spinup</a> && (<a class=\"id\" href=\"#id\">id</a>[2] == 0x37c8 || <a class=\"id\" href=\"#id\">id</a>[2] == 0x738c)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tried_spinup\">tried_spinup</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Drive powered-up in standby mode, and requires a specific</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * SET_FEATURES spin-up subcommand before it will accept</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * anything other than the original IDENTIFY command.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ata_dev_set_feature\">ata_dev_set_feature</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#SETFEATURES_SPINUP\">SETFEATURES_SPINUP</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err_mask\">err_mask</a> && <a class=\"id\" href=\"#id\">id</a>[2] != 0x738c) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = \"SPINUP failed\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the drive initially returned incomplete IDENTIFY info,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we now must reissue the IDENTIFY command.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>[2] == 0x37c8)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_READID_POSTRESET\">ATA_READID_POSTRESET</a>) && <a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The exact sequence expected by certain pre-ATA4 drives is:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * SRST RESET</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * IDENTIFY (optional in early ATA)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * INITIALIZE DEVICE PARAMETERS (later IDE and ATA)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * anything else..</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Some drives were very specific about that exact sequence.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note that ATA4 says lba is mandatory so the second check</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * should never trigger.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_major_version\">ata_id_major_version</a>(<a class=\"id\" href=\"#id\">id</a>) &lt; 4 || !<a class=\"id\" href=\"#ata_id_has_lba\">ata_id_has_lba</a>(<a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ata_dev_init_params\">ata_dev_init_params</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#id\">id</a>[3], <a class=\"id\" href=\"#id\">id</a>[6]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err_mask\">err_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = \"INIT_DEV_PARAMS failed\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* current CHS translation info (id[53-58]) might be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * changed. reread the identify device info.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ATA_READID_POSTRESET\">ATA_READID_POSTRESET</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p_class\">p_class</a> = <a class=\"id\" href=\"#class\">class</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_msg_warn\">ata_msg_warn</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, \"failed to IDENTIFY \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"(%s, err_mask=0x%x)\\n\", <a class=\"id\" href=\"#reason\">reason</a>, <a class=\"id\" href=\"#err_mask\">err_mask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ata_do_link_spd_horkage\">ata_do_link_spd_horkage</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#plink\">plink</a> = <a class=\"id\" href=\"#ata_dev_phys_link\">ata_dev_phys_link</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#target_limit\">target_limit</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sata_scr_valid\">sata_scr_valid</a>(<a class=\"id\" href=\"#plink\">plink</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> &amp; <a class=\"id\" href=\"#ATA_HORKAGE_1_5_GBPS\">ATA_HORKAGE_1_5_GBPS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target_limit\">target_limit</a> = (1 << <a class=\"id\" href=\"#target\">target</a>) - 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if already on stricter limit, no need to push further */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#plink\">plink</a>-><a class=\"id\" href=\"#sata_spd_limit\">sata_spd_limit</a> <= <a class=\"id\" href=\"#target_limit\">target_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plink\">plink</a>-><a class=\"id\" href=\"#sata_spd_limit\">sata_spd_limit</a> = <a class=\"id\" href=\"#target_limit\">target_limit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Request another EH round by returning -EAGAIN if link is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * going faster than the target speed.  Forward progress is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * guaranteed by setting sata_spd_limit to target_limit above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#plink\">plink</a>-><a class=\"id\" href=\"#sata_spd\">sata_spd</a> &gt; <a class=\"id\" href=\"#target\">target</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"applying link speed limit horkage to %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sata_spd_string\">sata_spd_string</a>(<a class=\"id\" href=\"#target\">target</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ata_dev_knobble\">ata_dev_knobble</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_dev_blacklisted\">ata_dev_blacklisted</a>(<a class=\"id\" href=\"#dev\">dev</a>) &amp; <a class=\"id\" href=\"#ATA_HORKAGE_BRIDGE_OK\">ATA_HORKAGE_BRIDGE_OK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#cbl\">cbl</a> == <a class=\"id\" href=\"#ATA_CBL_SATA\">ATA_CBL_SATA</a>) && (!<a class=\"id\" href=\"#ata_id_is_sata\">ata_id_is_sata</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>)));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ata_dev_config_ncq\">ata_dev_config_ncq</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char *<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#desc_sz\">desc_sz</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hdepth\">hdepth</a> = 0, <a class=\"id\" href=\"#ddepth\">ddepth</a> = <a class=\"id\" href=\"#ata_id_queue_depth\">ata_id_queue_depth</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#aa_desc\">aa_desc</a> = \"\";", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_id_has_ncq\">ata_id_has_ncq</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[0] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> &amp; <a class=\"id\" href=\"#ATA_HORKAGE_NONCQ\">ATA_HORKAGE_NONCQ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#desc_sz\">desc_sz</a>, \"NCQ (not used)\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_NCQ\">ATA_FLAG_NCQ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hdepth\">hdepth</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#scsi_host\">scsi_host</a>-><a class=\"id\" href=\"#can_queue\">can_queue</a>, <a class=\"id\" href=\"#ATA_MAX_QUEUE\">ATA_MAX_QUEUE</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_DFLAG_NCQ\">ATA_DFLAG_NCQ</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> &amp; <a class=\"id\" href=\"#ATA_HORKAGE_BROKEN_FPDMA_AA\">ATA_HORKAGE_BROKEN_FPDMA_AA</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_FPDMA_AA\">ATA_FLAG_FPDMA_AA</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_id_has_fpdma_aa\">ata_id_has_fpdma_aa</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ata_dev_set_feature\">ata_dev_set_feature</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#SETFEATURES_SATA_ENABLE\">SETFEATURES_SATA_ENABLE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SATA_FPDMA_AA\">SATA_FPDMA_AA</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err_mask\">err_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, \"failed to enable AA\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"(error_mask=0x%x)\\n\", <a class=\"id\" href=\"#err_mask\">err_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err_mask\">err_mask</a> != <a class=\"id\" href=\"#AC_ERR_DEV\">AC_ERR_DEV</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> |= <a class=\"id\" href=\"#ATA_HORKAGE_BROKEN_FPDMA_AA\">ATA_HORKAGE_BROKEN_FPDMA_AA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aa_desc\">aa_desc</a> = \", AA\";", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hdepth\">hdepth</a> >= <a class=\"id\" href=\"#ddepth\">ddepth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#desc_sz\">desc_sz</a>, \"NCQ (depth %d)%s\", <a class=\"id\" href=\"#ddepth\">ddepth</a>, <a class=\"id\" href=\"#aa_desc\">aa_desc</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#desc_sz\">desc_sz</a>, \"NCQ (depth %d/%d)%s\", <a class=\"id\" href=\"#hdepth\">hdepth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ddepth\">ddepth</a>, <a class=\"id\" href=\"#aa_desc\">aa_desc</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dev_configure - Configure the specified ATA/ATAPI device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Target device to configure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Configure @dev according to @dev-&gt;id.  Generic and low-level</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>driver specific fixups are also applied.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_dev_configure\">ata_dev_configure</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_context\">ata_eh_context</a> *<a class=\"id\" href=\"#ehc\">ehc</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#print_info\">print_info</a> = <a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_EHI_PRINTINFO\">ATA_EHI_PRINTINFO</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#revbuf\">revbuf</a>[7];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* XYZ-99\\0 */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#fwrevbuf\">fwrevbuf</a>[<a class=\"id\" href=\"#ATA_ID_FW_REV_LEN\">ATA_ID_FW_REV_LEN</a>+1];", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#modelbuf\">modelbuf</a>[<a class=\"id\" href=\"#ATA_ID_PROD_LEN\">ATA_ID_PROD_LEN</a>+1];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_dev_enabled\">ata_dev_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>) && <a class=\"id\" href=\"#ata_msg_info\">ata_msg_info</a>(<a class=\"id\" href=\"#ap\">ap</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, \"%s: ENTER/EXIT -- nodev\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_msg_probe\">ata_msg_probe</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, \"%s: ENTER\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set horkage */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> |= <a class=\"id\" href=\"#ata_dev_blacklisted\">ata_dev_blacklisted</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_force_horkage\">ata_force_horkage</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> &amp; <a class=\"id\" href=\"#ATA_HORKAGE_DISABLE\">ATA_HORKAGE_DISABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"unsupported device, disabling\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_disable\">ata_dev_disable</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#atapi_enabled\">atapi_enabled</a> || (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_NO_ATAPI\">ATA_FLAG_NO_ATAPI</a>)) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#ATA_DEV_ATAPI\">ATA_DEV_ATAPI</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"WARNING: ATAPI is %s, device ignored.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atapi_enabled\">atapi_enabled</a> ? \"not supported with this driver\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      : \"disabled\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_disable\">ata_dev_disable</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_do_link_spd_horkage\">ata_do_link_spd_horkage</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* let ACPI work its magic */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_acpi_on_devcfg\">ata_acpi_on_devcfg</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* massage HPA, do it early as it might change IDENTIFY data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_hpa_resize\">ata_hpa_resize</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* print device capabilities */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_msg_probe\">ata_msg_probe</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"%s: cfg 49:%04x 82:%04x 83:%04x 84:%04x \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"85:%04x 86:%04x 87:%04x 88:%04x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#id\">id</a>[49], <a class=\"id\" href=\"#id\">id</a>[82], <a class=\"id\" href=\"#id\">id</a>[83], <a class=\"id\" href=\"#id\">id</a>[84],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#id\">id</a>[85], <a class=\"id\" href=\"#id\">id</a>[86], <a class=\"id\" href=\"#id\">id</a>[87], <a class=\"id\" href=\"#id\">id</a>[88]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* initialize to-be-configured parameters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ATA_DFLAG_CFG_MASK\">ATA_DFLAG_CFG_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#max_sectors\">max_sectors</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cdb_len\">cdb_len</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#n_sectors\">n_sectors</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cylinders\">cylinders</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#heads\">heads</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sectors\">sectors</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#multi_count\">multi_count</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * common ATA, ATAPI feature tests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* find max transfer mode; for printk only */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> = <a class=\"id\" href=\"#ata_id_xfermask\">ata_id_xfermask</a>(<a class=\"id\" href=\"#id\">id</a>);", 
];
xr_frag_insert('l/60/653c0180a02736a30609307ca1291655e6e8cc.xr', __xr_tmp);
