var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * scsi_scan.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 Eric Youngdale,</span>", 
"<span class=\"comment\"> * Copyright (C) 2002 Patrick Mansfield</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The general scanning/probing algorithm is as follows, exceptions are</span>", 
"<span class=\"comment\"> * made to it depending on device specific flags, compilation options, and</span>", 
"<span class=\"comment\"> * global variable (boot or module load time) settings.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A specific LUN is scanned via an INQUIRY command; if the LUN has a</span>", 
"<span class=\"comment\"> * device attached, a scsi_device is allocated and setup for it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For every id of every channel on the given host:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Scan LUN 0; if the target responds to LUN 0 (even if there is no</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>device or storage attached to LUN 0):</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>If LUN 0 has a device attached, allocate and setup a</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>scsi_device for it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>If target is SCSI-3 or up, issue a REPORT LUN, and scan</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>all of the LUNs returned by the REPORT LUN; else,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>sequentially scan LUNs up until some maximum is reached,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>or a LUN is seen that cannot have a device attached to it.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#moduleparam\">moduleparam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#async\">async</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi\">scsi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_device\">scsi_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_driver\">scsi_driver</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_devinfo\">scsi_devinfo</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_host\">scsi_host</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_transport\">scsi_transport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_eh\">scsi_eh</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"scsi_priv.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"scsi_logging.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALLOC_FAILURE_MSG\">ALLOC_FAILURE_MSG</a><span class=\"ts\"/><a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: Allocation failure during\" \\", 
"<span class=\"ts\"/>\" SCSI scanning, some SCSI devices might not be configured\\n\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Default timeout</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCSI_TIMEOUT\">SCSI_TIMEOUT</a> (2*<a class=\"id\" href=\"#HZ\">HZ</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prefix values for the SCSI id's (stored in sysfs name field)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCSI_UID_SER_NUM\">SCSI_UID_SER_NUM</a> 'S'", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCSI_UID_UNKNOWN\">SCSI_UID_UNKNOWN</a> 'Z'", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return values of some of the scanning functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SCSI_SCAN_NO_RESPONSE: no valid response received from the target, this</span>", 
"<span class=\"comment\"> * includes allocation or general failures preventing IO from being sent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SCSI_SCAN_TARGET_PRESENT: target responded, but no device is available</span>", 
"<span class=\"comment\"> * on the given LUN.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SCSI_SCAN_LUN_PRESENT: target responded, and a device is available on a</span>", 
"<span class=\"comment\"> * given LUN.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCSI_SCAN_NO_RESPONSE\">SCSI_SCAN_NO_RESPONSE</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCSI_SCAN_TARGET_PRESENT\">SCSI_SCAN_TARGET_PRESENT</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCSI_SCAN_LUN_PRESENT\">SCSI_SCAN_LUN_PRESENT</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"", 
"static const char *<a class=\"id\" href=\"#scsi_null_device_strs\">scsi_null_device_strs</a> = \"nullnullnullnull\";", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_SCSI_LUNS\">MAX_SCSI_LUNS</a><span class=\"ts\"/>512", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCSI_MULTI_LUN\">CONFIG_SCSI_MULTI_LUN</a>", 
"static unsigned int <a class=\"id\" href=\"#max_scsi_luns\">max_scsi_luns</a> = <a class=\"id\" href=\"#MAX_SCSI_LUNS\">MAX_SCSI_LUNS</a>;", 
"#else", 
"static unsigned int <a class=\"id\" href=\"#max_scsi_luns\">max_scsi_luns</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#module_param_named\">module_param_named</a>(<a class=\"id\" href=\"#max_luns\">max_luns</a>, <a class=\"id\" href=\"#max_scsi_luns\">max_scsi_luns</a>, <a class=\"id\" href=\"#uint\">uint</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#max_luns\">max_luns</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> \"last scsi LUN (should be between 1 and 2^32-1)\");", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCSI_SCAN_ASYNC\">CONFIG_SCSI_SCAN_ASYNC</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCSI_SCAN_TYPE_DEFAULT\">SCSI_SCAN_TYPE_DEFAULT</a> \"async\"", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCSI_SCAN_TYPE_DEFAULT\">SCSI_SCAN_TYPE_DEFAULT</a> \"sync\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static char <a class=\"id\" href=\"#scsi_scan_type\">scsi_scan_type</a>[6] = <a class=\"id\" href=\"#SCSI_SCAN_TYPE_DEFAULT\">SCSI_SCAN_TYPE_DEFAULT</a>;", 
"", 
"<a class=\"id\" href=\"#module_param_string\">module_param_string</a>(<a class=\"id\" href=\"#scan\">scan</a>, <a class=\"id\" href=\"#scsi_scan_type\">scsi_scan_type</a>, sizeof(<a class=\"id\" href=\"#scsi_scan_type\">scsi_scan_type</a>), <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#scan\">scan</a>, \"sync, async or none\");", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * max_scsi_report_luns: the maximum number of LUNS that will be</span>", 
"<span class=\"comment\"> * returned from the REPORT LUNS command. 8 times this value must</span>", 
"<span class=\"comment\"> * be allocated. In theory this could be up to an 8 byte value, but</span>", 
"<span class=\"comment\"> * in practice, the maximum number of LUNs suppored by any device</span>", 
"<span class=\"comment\"> * is about 16k.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#max_scsi_report_luns\">max_scsi_report_luns</a> = 511;", 
"", 
"<a class=\"id\" href=\"#module_param_named\">module_param_named</a>(<a class=\"id\" href=\"#max_report_luns\">max_report_luns</a>, <a class=\"id\" href=\"#max_scsi_report_luns\">max_scsi_report_luns</a>, <a class=\"id\" href=\"#uint\">uint</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#max_report_luns\">max_report_luns</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> \"REPORT LUNS maximum number of LUNS received (should be\"", 
"<span class=\"ts\"/><span class=\"ts\"/> \" between 1 and 16384)\");", 
"", 
"static unsigned int <a class=\"id\" href=\"#scsi_inq_timeout\">scsi_inq_timeout</a> = <a class=\"id\" href=\"#SCSI_TIMEOUT\">SCSI_TIMEOUT</a>/<a class=\"id\" href=\"#HZ\">HZ</a> + 18;", 
"", 
"<a class=\"id\" href=\"#module_param_named\">module_param_named</a>(<a class=\"id\" href=\"#inq_timeout\">inq_timeout</a>, <a class=\"id\" href=\"#scsi_inq_timeout\">scsi_inq_timeout</a>, <a class=\"id\" href=\"#uint\">uint</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#inq_timeout\">inq_timeout</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/> \"Timeout (in seconds) waiting for devices to answer INQUIRY.\"", 
"<span class=\"ts\"/><span class=\"ts\"/> \" Default is 20. Some devices may need more; most need less.\");", 
"", 
"<span class=\"comment\">/* This lock protects only this list */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#async_scan_lock\">async_scan_lock</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#scanning_hosts\">scanning_hosts</a>);", 
"", 
"struct <a class=\"id\" href=\"#async_scan_data\">async_scan_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#prev_finished\">prev_finished</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_complete_async_scans - Wait for asynchronous scans to complete</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When this function returns, any host which started scanning before</span>", 
"<span class=\"comment\"> * this function was called will have finished its scan.  Hosts which</span>", 
"<span class=\"comment\"> * started scanning after this function was called may or may not have</span>", 
"<span class=\"comment\"> * finished.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_complete_async_scans\">scsi_complete_async_scans</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#async_scan_data\">async_scan_data</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#scanning_hosts\">scanning_hosts</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we can't get memory immediately, that's OK.  Just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sleep a little.  Even if we never get memory, the async</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * scans will finish eventually.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#data\">data</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(1);", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#prev_finished\">prev_finished</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#async_scan_lock\">async_scan_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Check that there's still somebody else on the list */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#scanning_hosts\">scanning_hosts</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#scanning_hosts\">scanning_hosts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#async_scan_lock\">async_scan_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"scsi: waiting for bus probes to complete ...\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#prev_finished\">prev_finished</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#async_scan_lock\">async_scan_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#scanning_hosts\">scanning_hosts</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#async_scan_data\">async_scan_data</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#scanning_hosts\">scanning_hosts</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#async_scan_data\">async_scan_data</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev_finished\">prev_finished</a>);", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#async_scan_lock\">async_scan_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Only exported for the benefit of scsi_wait_scan */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#scsi_complete_async_scans\">scsi_complete_async_scans</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#MODULE\">MODULE</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For async scanning we need to wait for all the scans to complete before</span>", 
"<span class=\"comment\"> * trying to mount the root fs.  Otherwise non-modular drivers may not be ready</span>", 
"<span class=\"comment\"> * yet.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#scsi_complete_async_scans\">scsi_complete_async_scans</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_unlock_floptical - unlock device via a special MODE SENSE command</span>", 
"<span class=\"comment\"> * @sdev:<span class=\"ts\"/>scsi device to send command to</span>", 
"<span class=\"comment\"> * @result:<span class=\"ts\"/>area to store the result of the MODE SENSE</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Send a vendor specific MODE SENSE (not a MODE SELECT) command.</span>", 
"<span class=\"comment\"> *     Called for BLIST_KEY devices.</span>", 
"<span class=\"comment\"> **/</span>", 
"static void <a class=\"id\" href=\"#scsi_unlock_floptical\">scsi_unlock_floptical</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned char *<a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[<a class=\"id\" href=\"#MAX_COMMAND_SIZE\">MAX_COMMAND_SIZE</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"scsi: unlocking floptical drive\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[0] = <a class=\"id\" href=\"#MODE_SENSE\">MODE_SENSE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[1] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[2] = 0x2e;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[3] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[4] = 0x2a;     <span class=\"comment\">/* size */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[5] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>, <a class=\"id\" href=\"#result\">result</a>, 0x2a, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SCSI_TIMEOUT\">SCSI_TIMEOUT</a>, 3, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_alloc_sdev - allocate and setup a scsi_Device</span>", 
"<span class=\"comment\"> * @starget: which target to allocate a &amp;scsi_device for</span>", 
"<span class=\"comment\"> * @lun: which lun</span>", 
"<span class=\"comment\"> * @hostdata: usually NULL and set by -&gt;slave_alloc instead</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Allocate, initialize for io, and return a pointer to a scsi_Device.</span>", 
"<span class=\"comment\"> *     Stores the @shost, @channel, @id, and @lun in the scsi_Device, and</span>", 
"<span class=\"comment\"> *     adds scsi_Device to the appropriate list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value:</span>", 
"<span class=\"comment\"> *     scsi_Device pointer, or NULL on failure.</span>", 
"<span class=\"comment\"> **/</span>", 
"static struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsi_alloc_sdev\">scsi_alloc_sdev</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#lun\">lun</a>, void *<a class=\"id\" href=\"#hostdata\">hostdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#display_failure_msg\">display_failure_msg</a> = 1, <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>extern void <a class=\"id\" href=\"#scsi_evt_thread\">scsi_evt_thread</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#sdev\">sdev</a>) + <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>-><a class=\"id\" href=\"#device_size\">device_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#scsi_null_device_strs\">scsi_null_device_strs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#model\">model</a> = <a class=\"id\" href=\"#scsi_null_device_strs\">scsi_null_device_strs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#rev\">rev</a> = <a class=\"id\" href=\"#scsi_null_device_strs\">scsi_null_device_strs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#shost\">shost</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_ramp_up_period\">queue_ramp_up_period</a> = <a class=\"id\" href=\"#SCSI_DEFAULT_RAMP_UP_PERIOD\">SCSI_DEFAULT_RAMP_UP_PERIOD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#lun\">lun</a> = <a class=\"id\" href=\"#lun\">lun</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#channel\">channel</a> = <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#channel\">channel</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a> = <a class=\"id\" href=\"#SDEV_CREATED\">SDEV_CREATED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#siblings\">siblings</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#same_target_siblings\">same_target_siblings</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#cmd_list\">cmd_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#event_work\">event_work</a>, <a class=\"id\" href=\"#scsi_evt_thread\">scsi_evt_thread</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a> = <a class=\"id\" href=\"#starget\">starget</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* usually NULL and set by -&gt;slave_alloc instead */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#hostdata\">hostdata</a> = <a class=\"id\" href=\"#hostdata\">hostdata</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if the device needs this changing, it may do so in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * slave_configure function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#max_device_blocked\">max_device_blocked</a> = <a class=\"id\" href=\"#SCSI_DEFAULT_DEVICE_BLOCKED\">SCSI_DEFAULT_DEVICE_BLOCKED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some low level driver could use device-&gt;type</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#type\">type</a> = -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Assume that the device will have handshaking problems,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and then fix this field later if it turns out it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#borken\">borken</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a> = <a class=\"id\" href=\"#scsi_alloc_queue\">scsi_alloc_queue</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* release fn is set up in scsi_sysfs_device_initialise, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * have to free and put manually here */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a> = <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_adjust_queue_depth\">scsi_adjust_queue_depth</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, 0, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#cmd_per_lun\">cmd_per_lun</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_sysfs_device_initialize\">scsi_sysfs_device_initialize</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#slave_alloc\">slave_alloc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#slave_alloc\">slave_alloc</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if LLDD reports slave not present, don't clutter</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * console with alloc failure messages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#display_failure_msg\">display_failure_msg</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_device_destroy\">out_device_destroy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"", 
"<a class=\"id\" href=\"#out_device_destroy\">out_device_destroy</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#SDEV_DEL\">SDEV_DEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transport_destroy_device\">transport_destroy_device</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_dev\">sdev_dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#display_failure_msg\">display_failure_msg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#ALLOC_FAILURE_MSG\">ALLOC_FAILURE_MSG</a>, <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scsi_target_destroy\">scsi_target_destroy</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = &amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transport_destroy_device\">transport_destroy_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#target_destroy\">target_destroy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#target_destroy\">target_destroy</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#siblings\">siblings</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scsi_target_dev_release\">scsi_target_dev_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#to_scsi_target\">to_scsi_target</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#device_type\">device_type</a> <a class=\"id\" href=\"#scsi_target_type\">scsi_target_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> =<span class=\"ts\"/><span class=\"ts\"/>\"scsi_target\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> =<span class=\"ts\"/><a class=\"id\" href=\"#scsi_target_dev_release\">scsi_target_dev_release</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#scsi_is_target_device\">scsi_is_target_device</a>(const struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> == &amp;<a class=\"id\" href=\"#scsi_target_type\">scsi_target_type</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_is_target_device\">scsi_is_target_device</a>);", 
"", 
"static struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#__scsi_find_target\">__scsi_find_target</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>, *<a class=\"id\" href=\"#found_starget\">found_starget</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Search for an existing target for this sdev.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#starget\">starget</a>, &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#__targets\">__targets</a>, <a class=\"id\" href=\"#siblings\">siblings</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#id\">id</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#channel\">channel</a> == <a class=\"id\" href=\"#channel\">channel</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found_starget\">found_starget</a> = <a class=\"id\" href=\"#starget\">starget</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found_starget\">found_starget</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#found_starget\">found_starget</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#found_starget\">found_starget</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_alloc_target - allocate a new or find an existing target</span>", 
"<span class=\"comment\"> * @parent:<span class=\"ts\"/>parent of the target (need not be a scsi host)</span>", 
"<span class=\"comment\"> * @channel:<span class=\"ts\"/>target channel number (zero if no channels)</span>", 
"<span class=\"comment\"> * @id:<span class=\"ts\"/><span class=\"ts\"/>target id number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return an existing target if one exists, provided it hasn't already</span>", 
"<span class=\"comment\"> * gone into STARGET_DEL state, otherwise allocate a new target.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The target is returned with an incremented reference, so the caller</span>", 
"<span class=\"comment\"> * is responsible for both reaping and doing a last put</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#scsi_alloc_target\">scsi_alloc_target</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>-><a class=\"id\" href=\"#target_size\">target_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#found_target\">found_target</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#starget\">starget</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: allocation failure\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = &amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_initialize\">device_initialize</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#reap_ref\">reap_ref</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"target%d:%d:%d\", <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_no\">host_no</a>, <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_SYSFS_DEPRECATED\">CONFIG_SYSFS_DEPRECATED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a> = &amp;<a class=\"id\" href=\"#scsi_bus_type\">scsi_bus_type</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> = &amp;<a class=\"id\" href=\"#scsi_target_type\">scsi_target_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#channel\">channel</a> = <a class=\"id\" href=\"#channel\">channel</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#can_queue\">can_queue</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#siblings\">siblings</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#devices\">devices</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#STARGET_CREATED\">STARGET_CREATED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> = <a class=\"id\" href=\"#SCSI_2\">SCSI_2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#max_target_blocked\">max_target_blocked</a> = <a class=\"id\" href=\"#SCSI_DEFAULT_TARGET_BLOCKED\">SCSI_DEFAULT_TARGET_BLOCKED</a>;", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found_target\">found_target</a> = <a class=\"id\" href=\"#__scsi_find_target\">__scsi_find_target</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found_target\">found_target</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#siblings\">siblings</a>, &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#__targets\">__targets</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate and add */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transport_setup_device\">transport_setup_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#target_alloc\">target_alloc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#target_alloc\">target_alloc</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#dev\">dev</a>, \"target allocation failed, error %d\\n\", <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* don't want scsi_target_reap to do the final</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * put because it will be under the host lock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_target_destroy\">scsi_target_destroy</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#starget\">starget</a>;", 
"", 
" <a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found_target\">found_target</a>-><a class=\"id\" href=\"#reap_ref\">reap_ref</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found_target\">found_target</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#STARGET_DEL\">STARGET_DEL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#found_target\">found_target</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Unfortunately, we found a dying target; need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wait until it's dead before we can get a new one */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#found_target\">found_target</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_scheduled_work\">flush_scheduled_work</a>();", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scsi_target_reap_usercontext\">scsi_target_reap_usercontext</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a>, <a class=\"id\" href=\"#ew\">ew</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transport_remove_device\">transport_remove_device</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_del\">device_del</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_target_destroy\">scsi_target_destroy</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_target_reap - check to see if target is in use and destroy if not</span>", 
"<span class=\"comment\"> * @starget: target to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is used after removing a LUN or doing a last put of the target</span>", 
"<span class=\"comment\"> * it checks atomically that nothing is using the target and removes</span>", 
"<span class=\"comment\"> * it if so.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_target_reap\">scsi_target_reap</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#scsi_target_state\">scsi_target_state</a> <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#empty\">empty</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#reap_ref\">reap_ref</a> == 0 && <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#devices\">devices</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#empty\">empty</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#STARGET_DEL\">STARGET_DEL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#empty\">empty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#STARGET_DEL\">STARGET_DEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#STARGET_CREATED\">STARGET_CREATED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_target_destroy\">scsi_target_destroy</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#execute_in_process_context\">execute_in_process_context</a>(<a class=\"id\" href=\"#scsi_target_reap_usercontext\">scsi_target_reap_usercontext</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#ew\">ew</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sanitize_inquiry_string - remove non-graphical chars from an INQUIRY result string</span>", 
"<span class=\"comment\"> * @s: INQUIRY result string to sanitize</span>", 
"<span class=\"comment\"> * @len: length of the string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The SCSI spec says that INQUIRY vendor, product, and revision</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>strings must consist entirely of graphic ASCII characters,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>padded on the right with spaces.  Since not all devices obey</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this rule, we will replace non-graphic or non-ASCII characters</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with spaces.  Exception: a NUL character is interpreted as a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>string terminator, so all the following characters are set to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spaces.</span>", 
"<span class=\"comment\"> **/</span>", 
"static void <a class=\"id\" href=\"#sanitize_inquiry_string\">sanitize_inquiry_string</a>(unsigned char *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#terminated\">terminated</a> = 0;", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#len\">len</a> &gt; 0; (--<a class=\"id\" href=\"#len\">len</a>, ++<a class=\"id\" href=\"#s\">s</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#s\">s</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#terminated\">terminated</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#terminated\">terminated</a> || *<a class=\"id\" href=\"#s\">s</a> &lt; 0x20 || *<a class=\"id\" href=\"#s\">s</a> &gt; 0x7e)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = ' ';", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_probe_lun - probe a single LUN using a SCSI INQUIRY</span>", 
"<span class=\"comment\"> * @sdev:<span class=\"ts\"/>scsi_device to probe</span>", 
"<span class=\"comment\"> * @inq_result:<span class=\"ts\"/>area to store the INQUIRY result</span>", 
"<span class=\"comment\"> * @result_len: len of inq_result</span>", 
"<span class=\"comment\"> * @bflags:<span class=\"ts\"/>store any bflags found here</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Probe the lun associated with @req using a standard SCSI INQUIRY;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     If the INQUIRY is successful, zero is returned and the</span>", 
"<span class=\"comment\"> *     INQUIRY data is in @inq_result; the scsi_level and INQUIRY length</span>", 
"<span class=\"comment\"> *     are copied to the scsi_device any flags value is stored in *@bflags.</span>", 
"<span class=\"comment\"> **/</span>", 
"static int <a class=\"id\" href=\"#scsi_probe_lun\">scsi_probe_lun</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, unsigned char *<a class=\"id\" href=\"#inq_result\">inq_result</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#result_len\">result_len</a>, int *<a class=\"id\" href=\"#bflags\">bflags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[<a class=\"id\" href=\"#MAX_COMMAND_SIZE\">MAX_COMMAND_SIZE</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#first_inquiry_len\">first_inquiry_len</a>, <a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a>, <a class=\"id\" href=\"#next_inquiry_len\">next_inquiry_len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#response_len\">response_len</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pass\">pass</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#bflags\">bflags</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Perform up to 3 passes.  The first pass uses a conservative</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transfer length of 36 unless sdev-&gt;inquiry_len specifies a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * different value. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_inquiry_len\">first_inquiry_len</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a> ? <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a> : 36;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a> = <a class=\"id\" href=\"#first_inquiry_len\">first_inquiry_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pass\">pass</a> = 1;", 
"", 
" <a class=\"id\" href=\"#next_pass\">next_pass</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_SCAN_BUS\">SCSI_LOG_SCAN_BUS</a>(3, <a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"scsi scan: INQUIRY pass %d length %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pass\">pass</a>, <a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Each pass gets up to three chances to ignore Unit Attention */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#count\">count</a> = 0; <a class=\"id\" href=\"#count\">count</a> &lt; 3; ++<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#resid\">resid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>, 0, 6);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[0] = <a class=\"id\" href=\"#INQUIRY\">INQUIRY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[4] = (unsigned char) <a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#inq_result\">inq_result</a>, 0, <a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdev\">sdev</a>,  <a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#inq_result\">inq_result</a>, <a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#HZ\">HZ</a> / 2 + <a class=\"id\" href=\"#HZ\">HZ</a> * <a class=\"id\" href=\"#scsi_inq_timeout\">scsi_inq_timeout</a>, 3,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#resid\">resid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_SCAN_BUS\">SCSI_LOG_SCAN_BUS</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"scsi scan: INQUIRY %s \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"with code 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> ? \"failed\" : \"successful\", <a class=\"id\" href=\"#result\">result</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not-ready to ready transition [asc/ascq=0x28/0x0]</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * or power-on, reset [asc/ascq=0x29/0x0], continue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * INQUIRY should not yield UNIT_ATTENTION</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but many buggy devices do so anyway. </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#driver_byte\">driver_byte</a>(<a class=\"id\" href=\"#result\">result</a>) &amp; <a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x28) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x29)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if nothing was transferred, we try</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * again. It's a workaround for some USB</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#resid\">resid</a> == <a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sanitize_inquiry_string\">sanitize_inquiry_string</a>(&amp;<a class=\"id\" href=\"#inq_result\">inq_result</a>[8], 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sanitize_inquiry_string\">sanitize_inquiry_string</a>(&amp;<a class=\"id\" href=\"#inq_result\">inq_result</a>[16], 16);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sanitize_inquiry_string\">sanitize_inquiry_string</a>(&amp;<a class=\"id\" href=\"#inq_result\">inq_result</a>[32], 4);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#response_len\">response_len</a> = <a class=\"id\" href=\"#inq_result\">inq_result</a>[4] + 5;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#response_len\">response_len</a> &gt; 255)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#response_len\">response_len</a> = <a class=\"id\" href=\"#first_inquiry_len\">first_inquiry_len</a>;<span class=\"ts\"/><span class=\"comment\">/* sanity */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get any flags for this device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * XXX add a bflags to scsi_device, and replace the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * corresponding bit fields in scsi_device, so bflags</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need not be passed as an argument.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bflags\">bflags</a> = <a class=\"id\" href=\"#scsi_get_device_flags\">scsi_get_device_flags</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, &amp;<a class=\"id\" href=\"#inq_result\">inq_result</a>[8],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#inq_result\">inq_result</a>[16]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* When the first pass succeeds we gain information about</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * what larger transfer lengths might work. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pass\">pass</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BLIST_INQUIRY_36\">BLIST_INQUIRY_36</a> &amp; *<a class=\"id\" href=\"#bflags\">bflags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_inquiry_len\">next_inquiry_len</a> = 36;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#BLIST_INQUIRY_58\">BLIST_INQUIRY_58</a> &amp; *<a class=\"id\" href=\"#bflags\">bflags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_inquiry_len\">next_inquiry_len</a> = 58;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_inquiry_len\">next_inquiry_len</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_inquiry_len\">next_inquiry_len</a> = <a class=\"id\" href=\"#response_len\">response_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If more data is available perform the second pass */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next_inquiry_len\">next_inquiry_len</a> &gt; <a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a> = <a class=\"id\" href=\"#next_inquiry_len\">next_inquiry_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pass\">pass</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_pass\">next_pass</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#pass\">pass</a> == 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"scsi scan: %d byte inquiry failed.  \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Consider BLIST_INQUIRY_36 for this device\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If this pass failed, the third pass goes back and transfers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the same amount as we successfully got in the first pass. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a> = <a class=\"id\" href=\"#first_inquiry_len\">first_inquiry_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pass\">pass</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_pass\">next_pass</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the last transfer attempt got an error, assume the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * peripheral doesn't exist or is dead. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't report any more data than the device says is valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#try_inquiry_len\">try_inquiry_len</a>, <a class=\"id\" href=\"#response_len\">response_len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX Abort if the response length is less than 36? If less than</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32, the lookup of the device flags (above) could be invalid,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and it would be possible to take an incorrect action - we do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not want to hang because of a short INQUIRY. On the flip side,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the device is spun down or becoming ready (and so it gives a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * short INQUIRY), an abort here prevents any further use of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device, including spin up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On the whole, the best approach seems to be to assume the first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 36 bytes are valid no matter what the device says.  That's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * better than copying &lt; 36 bytes to the inquiry-result buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and displaying garbage for the Vendor, Product, or Revision</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * strings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a> &lt; 36) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"scsi scan: INQUIRY result too short (%d),\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" using 36\\n\", <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a> = 36;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Related to the above issue:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX Devices (disk or all?) should be sent a TEST UNIT READY,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and if not ready, sent a START_STOP to start (maybe spin up) and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then send the INQUIRY again, since the INQUIRY can change after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a device is initialized.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ideally, start a device if explicitly asked to do so.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * assumes that a device is spun up on power on, spun down on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * request, and then spun up on request.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The scanning code needs to know the scsi_level, even if no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device is attached at LUN 0 (SCSI_SCAN_TARGET_PRESENT) so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * non-zero LUNs can be scanned.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> = <a class=\"id\" href=\"#inq_result\">inq_result</a>[2] &amp; 0x07;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> >= 2 ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> == 1 && (<a class=\"id\" href=\"#inq_result\">inq_result</a>[3] &amp; 0x0f) == 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_add_lun - allocate and fully initialze a scsi_device</span>", 
"<span class=\"comment\"> * @sdev:<span class=\"ts\"/>holds information to be stored in the new scsi_device</span>", 
"<span class=\"comment\"> * @inq_result:<span class=\"ts\"/>holds the result of a previous INQUIRY to the LUN</span>", 
"<span class=\"comment\"> * @bflags:<span class=\"ts\"/>black/white list flag</span>", 
"<span class=\"comment\"> * @async:<span class=\"ts\"/>1 if this device is being scanned asynchronously</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Initialize the scsi_device @sdev.  Optionally set fields based</span>", 
"<span class=\"comment\"> *     on values in *@bflags.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     SCSI_SCAN_NO_RESPONSE: could not allocate or setup a scsi_device</span>", 
"<span class=\"comment\"> *     SCSI_SCAN_LUN_PRESENT: a new scsi_device was allocated and initialized</span>", 
"<span class=\"comment\"> **/</span>", 
"static int <a class=\"id\" href=\"#scsi_add_lun\">scsi_add_lun</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, unsigned char *<a class=\"id\" href=\"#inq_result\">inq_result</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#bflags\">bflags</a>, int <a class=\"id\" href=\"#async\">async</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX do not save the inquiry, since it can change underneath us,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * save just vendor/model/rev.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Rather than save it and have an ioctl that retrieves the saved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * value, have an ioctl that executes the same INQUIRY code used</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in scsi_probe_lun, let user level programs doing INQUIRY</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scanning run at their own risk, or supply a user level program</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that can correctly scan.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Copy at least 36 bytes of INQUIRY data, so that we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dereference unallocated memory when accessing the Vendor,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Product, and Revision strings.  Badly behaved devices may set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the INQUIRY Additional Length byte to a small value, indicating</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * these strings are invalid, but often they contain plausible data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nonetheless.  It doesn't matter if the device sent &lt; 36 bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * total, since scsi_probe_lun() initializes inq_result with 0s.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry\">inquiry</a> = <a class=\"id\" href=\"#kmemdup\">kmemdup</a>(<a class=\"id\" href=\"#inq_result\">inq_result</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a>, 36),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry\">inquiry</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SCSI_SCAN_NO_RESPONSE\">SCSI_SCAN_NO_RESPONSE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#vendor\">vendor</a> = (char *) (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry\">inquiry</a> + 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#model\">model</a> = (char *) (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry\">inquiry</a> + 16);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#rev\">rev</a> = (char *) (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry\">inquiry</a> + 32);", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_ISROM\">BLIST_ISROM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#TYPE_ROM\">TYPE_ROM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#removable\">removable</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#type\">type</a> = (<a class=\"id\" href=\"#inq_result\">inq_result</a>[0] &amp; 0x1f);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#removable\">removable</a> = (<a class=\"id\" href=\"#inq_result\">inq_result</a>[1] &amp; 0x80) >> 7;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_RBC\">TYPE_RBC</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_TAPE\">TYPE_TAPE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_DISK\">TYPE_DISK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_PRINTER\">TYPE_PRINTER</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_MOD\">TYPE_MOD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_PROCESSOR\">TYPE_PROCESSOR</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_SCANNER\">TYPE_SCANNER</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_MEDIUM_CHANGER\">TYPE_MEDIUM_CHANGER</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_ENCLOSURE\">TYPE_ENCLOSURE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_COMM\">TYPE_COMM</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_RAID\">TYPE_RAID</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_OSD\">TYPE_OSD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#writeable\">writeable</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_ROM\">TYPE_ROM</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TYPE_WORM\">TYPE_WORM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#writeable\">writeable</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"scsi: unknown device type %d\\n\", <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#TYPE_RBC\">TYPE_RBC</a> || <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#TYPE_ROM\">TYPE_ROM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* RBC and MMC devices can return SCSI-3 compliance and yet</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * still not support REPORT LUNS, so make them act as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * BLIST_NOREPORTLUN unless BLIST_REPORTLUN2 is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * specifically set */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_REPORTLUN2\">BLIST_REPORTLUN2</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bflags\">bflags</a> |= <a class=\"id\" href=\"#BLIST_NOREPORTLUN\">BLIST_NOREPORTLUN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For a peripheral qualifier (PQ) value of 1 (001b), the SCSI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * spec says: The device server is capable of supporting the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * specified peripheral device type on this logical unit. However,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the physical device is not currently connected to this logical</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The above is vague, as it implies that we could treat 001 and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 011 the same. Stay compatible with previous code, and create a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scsi_device for a PQ of 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't set the device offline here; rather let the upper</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * level drivers eval the PQ to decide whether they should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * attach. So remove ((inq_result[0] &gt;&gt; 5) &amp; 7) == 1 check.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span> ", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inq_periph_qual\">inq_periph_qual</a> = (<a class=\"id\" href=\"#inq_result\">inq_result</a>[0] >> 5) &amp; 7;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#lockable\">lockable</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#removable\">removable</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#soft_reset\">soft_reset</a> = (<a class=\"id\" href=\"#inq_result\">inq_result</a>[7] &amp; 1) && ((<a class=\"id\" href=\"#inq_result\">inq_result</a>[3] &amp; 7) == 2);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> >= <a class=\"id\" href=\"#SCSI_3\">SCSI_3</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a> &gt; 56 && <a class=\"id\" href=\"#inq_result\">inq_result</a>[56] &amp; 0x04))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#ppr\">ppr</a> = 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inq_result\">inq_result</a>[7] &amp; 0x60)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#wdtr\">wdtr</a> = 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inq_result\">inq_result</a>[7] &amp; 0x10)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdtr\">sdtr</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdev\">sdev</a>, \"%s %.8s %.16s %.4s PQ: %d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"ANSI: %d%s\\n\", <a class=\"id\" href=\"#scsi_device_type\">scsi_device_type</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#type\">type</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#vendor\">vendor</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#model\">model</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#rev\">rev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inq_periph_qual\">inq_periph_qual</a>, <a class=\"id\" href=\"#inq_result\">inq_result</a>[2] &amp; 0x07,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#inq_result\">inq_result</a>[3] &amp; 0x0f) == 1 ? \" CCS\" : \"\");", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> >= <a class=\"id\" href=\"#SCSI_2\">SCSI_2</a>) && (<a class=\"id\" href=\"#inq_result\">inq_result</a>[7] &amp; 2) &&", 
"<span class=\"ts\"/>    !(*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_NOTQ\">BLIST_NOTQ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#tagged_supported\">tagged_supported</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some devices (Texel CD ROM drives) have handshaking problems</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when used with the Seagate controllers. borken is initialized</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to 1, and then set it to 0 here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_BORKEN\">BLIST_BORKEN</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#borken\">borken</a> = 0;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_NO_ULD_ATTACH\">BLIST_NO_ULD_ATTACH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#no_uld_attach\">no_uld_attach</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Apparently some really broken devices (contrary to the SCSI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * standards) need to be selected without asserting ATN</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_SELECT_NO_ATN\">BLIST_SELECT_NO_ATN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#select_no_atn\">select_no_atn</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Maximum 512 sector transfer length</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * broken RA4x00 Compaq Disk Array</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_MAX_512\">BLIST_MAX_512</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_max_hw_sectors\">blk_queue_max_hw_sectors</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, 512);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some devices may not want to have a start command automatically</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * issued when a device is added.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_NOSTARTONADD\">BLIST_NOSTARTONADD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#no_start_on_add\">no_start_on_add</a> = 1;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_SINGLELUN\">BLIST_SINGLELUN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#sdev\">sdev</a>)-><a class=\"id\" href=\"#single_lun\">single_lun</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#use_10_for_rw\">use_10_for_rw</a> = 1;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_MS_SKIP_PAGE_08\">BLIST_MS_SKIP_PAGE_08</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#skip_ms_page_8\">skip_ms_page_8</a> = 1;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_MS_SKIP_PAGE_3F\">BLIST_MS_SKIP_PAGE_3F</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#skip_ms_page_3f\">skip_ms_page_3f</a> = 1;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_USE_10_BYTE_MS\">BLIST_USE_10_BYTE_MS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#use_10_for_ms\">use_10_for_ms</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set the device running here so that slave configure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * may do I/O */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#SDEV_RUNNING\">SDEV_RUNNING</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#SDEV_BLOCK\">SDEV_BLOCK</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"in wrong state %s to complete scan\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#scsi_device_state_name\">scsi_device_state_name</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SCSI_SCAN_NO_RESPONSE\">SCSI_SCAN_NO_RESPONSE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_MS_192_BYTES_FOR_3F\">BLIST_MS_192_BYTES_FOR_3F</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#use_192_bytes_for_3f\">use_192_bytes_for_3f</a> = 1;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_NOT_LOCKABLE\">BLIST_NOT_LOCKABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#lockable\">lockable</a> = 0;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#BLIST_RETRY_HWERROR\">BLIST_RETRY_HWERROR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#retry_hwerror\">retry_hwerror</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transport_configure_device\">transport_configure_device</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#slave_configure\">slave_configure</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#slave_configure\">slave_configure</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if LLDD reports slave not present, don't clutter</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * console with alloc failure messages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"failed to configure device\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SCSI_SCAN_NO_RESPONSE\">SCSI_SCAN_NO_RESPONSE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#max_queue_depth\">max_queue_depth</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ok, the device is now all set up, we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * register it and tell the rest of the kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * about it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#async\">async</a> && <a class=\"id\" href=\"#scsi_sysfs_add_sdev\">scsi_sysfs_add_sdev</a>(<a class=\"id\" href=\"#sdev\">sdev</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SCSI_SCAN_NO_RESPONSE\">SCSI_SCAN_NO_RESPONSE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SCSI_SCAN_LUN_PRESENT\">SCSI_SCAN_LUN_PRESENT</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCSI_LOGGING\">CONFIG_SCSI_LOGGING</a>", 
"<span class=\"comment\">/** </span>", 
"<span class=\"comment\"> * scsi_inq_str - print INQUIRY data from min to max index, strip trailing whitespace</span>", 
"<span class=\"comment\"> * @buf:   Output buffer with at least end-first+1 bytes of space</span>", 
"<span class=\"comment\"> * @inq:   Inquiry buffer (input)</span>", 
"<span class=\"comment\"> * @first: Offset of string into inq</span>", 
"<span class=\"comment\"> * @end:   Index after last character in inq</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned char *<a class=\"id\" href=\"#scsi_inq_str\">scsi_inq_str</a>(unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned char *<a class=\"id\" href=\"#inq\">inq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned <a class=\"id\" href=\"#first\">first</a>, unsigned <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#term\">term</a> = 0, <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> + <a class=\"id\" href=\"#first\">first</a> &lt; <a class=\"id\" href=\"#end\">end</a> && <a class=\"id\" href=\"#idx\">idx</a> + <a class=\"id\" href=\"#first\">first</a> &lt; <a class=\"id\" href=\"#inq\">inq</a>[4] + 5; <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inq\">inq</a>[<a class=\"id\" href=\"#idx\">idx</a>+<a class=\"id\" href=\"#first\">first</a>] &gt; ' ') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#idx\">idx</a>] = <a class=\"id\" href=\"#inq\">inq</a>[<a class=\"id\" href=\"#idx\">idx</a>+<a class=\"id\" href=\"#first\">first</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#term\">term</a> = <a class=\"id\" href=\"#idx\">idx</a>+1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#idx\">idx</a>] = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#term\">term</a>] = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_probe_and_add_lun - probe a LUN, if a LUN is found add it</span>", 
"<span class=\"comment\"> * @starget:<span class=\"ts\"/>pointer to target device structure</span>", 
"<span class=\"comment\"> * @lun:<span class=\"ts\"/>LUN of target device</span>", 
"<span class=\"comment\"> * @bflagsp:<span class=\"ts\"/>store bflags here if not NULL</span>", 
"<span class=\"comment\"> * @sdevp:<span class=\"ts\"/>probe the LUN corresponding to this scsi_device</span>", 
"<span class=\"comment\"> * @rescan:     if nonzero skip some code only needed on first scan</span>", 
"<span class=\"comment\"> * @hostdata:<span class=\"ts\"/>passed to scsi_alloc_sdev()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Call scsi_probe_lun, if a LUN with an attached device is found,</span>", 
"<span class=\"comment\"> *     allocate and set it up by calling scsi_add_lun.</span>", 
"<span class=\"comment\"> *</span>", 
];
xr_frag_insert('l/60/7cef25140c482f4f28088f63c285a1666bca17.xr', __xr_tmp);
