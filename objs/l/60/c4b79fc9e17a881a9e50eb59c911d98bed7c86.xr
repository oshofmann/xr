var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 2001 Andrea Arcangeli &lt;andrea@suse.de&gt; SuSE</span>", 
"<span class=\"comment\"> *  Copyright 2003 Andi Kleen, SuSE Labs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Thanks to hpa@transmeta.com for some useful hint.</span>", 
"<span class=\"comment\"> *  Special thanks to Ingo Molnar for his early experience with</span>", 
"<span class=\"comment\"> *  a different vsyscall implementation for Linux/IA32 and for the name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  vsyscall 1 is located at -10Mbyte, vsyscall 2 is located</span>", 
"<span class=\"comment\"> *  at virtual address -10Mbyte+1024bytes etc... There are at max 4</span>", 
"<span class=\"comment\"> *  vsyscalls. One vsyscall can reserve more than 1 slot to avoid</span>", 
"<span class=\"comment\"> *  jumping out of line if necessary. We cannot add more with this</span>", 
"<span class=\"comment\"> *  mechanism because older kernels won't return -ENOSYS.</span>", 
"<span class=\"comment\"> *  If we want more than four we need a vDSO.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Note: the concept clashes with user mode linux. If you use UML and</span>", 
"<span class=\"comment\"> *  want per guest time just set the kernel.vsyscall64 sysctl to 0.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Disable profiling for userspace code: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DISABLE_BRANCH_PROFILING\">DISABLE_BRANCH_PROFILING</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seqlock\">seqlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clocksource\">clocksource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#getcpu\">getcpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#vsyscall\">vsyscall</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#fixmap\">fixmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#segment\">segment</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#vgtod\">vgtod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__vsyscall\">__vsyscall</a>(<a class=\"id\" href=\"#nr\">nr</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#unused\">unused</a>, <a class=\"id\" href=\"#__section__\">__section__</a>(\".vsyscall_\" #<a class=\"id\" href=\"#nr\">nr</a>))) <a class=\"id\" href=\"#notrace\">notrace</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__syscall_clobber\">__syscall_clobber</a> \"r11\",\"cx\",\"memory\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vsyscall_gtod_data contains data that is :</span>", 
"<span class=\"comment\"> * - readonly from vsyscalls</span>", 
"<span class=\"comment\"> * - written by timer interrupt or systcl (/proc/sys/kernel/vsyscall64)</span>", 
"<span class=\"comment\"> * Try to keep this structure as small as possible to avoid cache line ping pongs</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__vgetcpu_mode\">__vgetcpu_mode</a> <a class=\"id\" href=\"#__section_vgetcpu_mode\">__section_vgetcpu_mode</a>;", 
"", 
"struct <a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a> <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a> <a class=\"id\" href=\"#__section_vsyscall_gtod_data\">__section_vsyscall_gtod_data</a> =", 
"{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#SEQLOCK_UNLOCKED\">SEQLOCK_UNLOCKED</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sysctl_enabled\">sysctl_enabled</a> = 1,", 
"};", 
"", 
"void <a class=\"id\" href=\"#update_vsyscall_tz\">update_vsyscall_tz</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_seqlock_irqsave\">write_seqlock_irqsave</a>(&amp;<a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* sys_tz has changed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#sys_tz\">sys_tz</a> = <a class=\"id\" href=\"#sys_tz\">sys_tz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_sequnlock_irqrestore\">write_sequnlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#update_vsyscall\">update_vsyscall</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#wall_time\">wall_time</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#wtm\">wtm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#clock\">clock</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mult\">mult</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_seqlock_irqsave\">write_seqlock_irqsave</a>(&amp;<a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* copy vsyscall data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#vread\">vread</a> = <a class=\"id\" href=\"#clock\">clock</a>-><a class=\"id\" href=\"#vread\">vread</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#cycle_last\">cycle_last</a> = <a class=\"id\" href=\"#clock\">clock</a>-><a class=\"id\" href=\"#cycle_last\">cycle_last</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#clock\">clock</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#mult\">mult</a> = <a class=\"id\" href=\"#mult\">mult</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#clock\">clock</a>-><a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#wall_time_sec\">wall_time_sec</a> = <a class=\"id\" href=\"#wall_time\">wall_time</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#wall_time_nsec\">wall_time_nsec</a> = <a class=\"id\" href=\"#wall_time\">wall_time</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#wall_to_monotonic\">wall_to_monotonic</a> = *<a class=\"id\" href=\"#wtm\">wtm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#wall_time_coarse\">wall_time_coarse</a> = <a class=\"id\" href=\"#__current_kernel_time\">__current_kernel_time</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_sequnlock_irqrestore\">write_sequnlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/* RED-PEN may want to readd seq locking, but then the variable should be</span>", 
"<span class=\"comment\"> * write-once.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#do_get_tz\">do_get_tz</a>(struct <a class=\"id\" href=\"#timezone\">timezone</a> * <a class=\"id\" href=\"#tz\">tz</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#tz\">tz</a> = <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#sys_tz\">sys_tz</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> int <a class=\"id\" href=\"#gettimeofday\">gettimeofday</a>(struct <a class=\"id\" href=\"#timeval\">timeval</a> *<a class=\"id\" href=\"#tv\">tv</a>, struct <a class=\"id\" href=\"#timezone\">timezone</a> *<a class=\"id\" href=\"#tz\">tz</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"syscall\"", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"=a\" (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"0\" (<a class=\"id\" href=\"#__NR_gettimeofday\">__NR_gettimeofday</a>),\"D\" (<a class=\"id\" href=\"#tv\">tv</a>),\"S\" (<a class=\"id\" href=\"#tz\">tz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>: <a class=\"id\" href=\"#__syscall_clobber\">__syscall_clobber</a> );", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> long <a class=\"id\" href=\"#time_syscall\">time_syscall</a>(long *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#secs\">secs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"syscall\"", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"=a\" (<a class=\"id\" href=\"#secs\">secs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"0\" (<a class=\"id\" href=\"#__NR_time\">__NR_time</a>),\"D\" (<a class=\"id\" href=\"#t\">t</a>) : <a class=\"id\" href=\"#__syscall_clobber\">__syscall_clobber</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#secs\">secs</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#do_vgettimeofday\">do_vgettimeofday</a>(struct <a class=\"id\" href=\"#timeval\">timeval</a> * <a class=\"id\" href=\"#tv\">tv</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cycle_delta\">cycle_delta</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mult\">mult</a>, <a class=\"id\" href=\"#shift\">shift</a>, <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> (*<a class=\"id\" href=\"#vread\">vread</a>)(void);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vread\">vread</a> = <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#vread\">vread</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#sysctl_enabled\">sysctl_enabled</a> || !<a class=\"id\" href=\"#vread\">vread</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gettimeofday\">gettimeofday</a>(<a class=\"id\" href=\"#tv\">tv</a>,<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#vread\">vread</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#cycle_last\">cycle_last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mult\">mult</a> = <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#mult\">mult</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#clock\">clock</a>.<a class=\"id\" href=\"#shift\">shift</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tv\">tv</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#wall_time_sec\">wall_time_sec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a> = <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#wall_time_nsec\">wall_time_nsec</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* calculate interval: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_delta\">cycle_delta</a> = (<a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#base\">base</a>) &amp; <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* convert to nsecs: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a> += (<a class=\"id\" href=\"#cycle_delta\">cycle_delta</a> * <a class=\"id\" href=\"#mult\">mult</a>) >> <a class=\"id\" href=\"#shift\">shift</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nsec\">nsec</a> >= <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tv\">tv</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> += 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a> -= <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tv\">tv</a>-><a class=\"id\" href=\"#tv_usec\">tv_usec</a> = <a class=\"id\" href=\"#nsec\">nsec</a> / <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__vsyscall\">__vsyscall</a>(0) <a class=\"id\" href=\"#vgettimeofday\">vgettimeofday</a>(struct <a class=\"id\" href=\"#timeval\">timeval</a> * <a class=\"id\" href=\"#tv\">tv</a>, struct <a class=\"id\" href=\"#timezone\">timezone</a> * <a class=\"id\" href=\"#tz\">tz</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tv\">tv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_vgettimeofday\">do_vgettimeofday</a>(<a class=\"id\" href=\"#tv\">tv</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tz\">tz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_get_tz\">do_get_tz</a>(<a class=\"id\" href=\"#tz\">tz</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* This will break when the xtime seconds get inaccurate, but that is</span>", 
"<span class=\"comment\"> * unlikely */</span>", 
"<a class=\"id\" href=\"#time_t\">time_t</a> <a class=\"id\" href=\"#__vsyscall\">__vsyscall</a>(1) <a class=\"id\" href=\"#vtime\">vtime</a>(<a class=\"id\" href=\"#time_t\">time_t</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_t\">time_t</a> <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#sysctl_enabled\">sysctl_enabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#time_syscall\">time_syscall</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#wall_time_sec\">wall_time_sec</a>;", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#__vsyscall_gtod_data\">__vsyscall_gtod_data</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Fast way to get current CPU and node.</span>", 
"<span class=\"comment\">   This helps to do per node and per CPU caches in user space.</span>", 
"<span class=\"comment\">   The result is not guaranteed without CPU affinity, but usually</span>", 
"<span class=\"comment\">   works out because the scheduler tries to keep a thread on the same</span>", 
"<span class=\"comment\">   CPU.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   tcache must point to a two element sized long array.</span>", 
"<span class=\"comment\">   All arguments can be NULL. */</span>", 
"long <a class=\"id\" href=\"#__vsyscall\">__vsyscall</a>(2)", 
"<a class=\"id\" href=\"#vgetcpu\">vgetcpu</a>(unsigned *<a class=\"id\" href=\"#cpu\">cpu</a>, unsigned *<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#getcpu_cache\">getcpu_cache</a> *<a class=\"id\" href=\"#tcache\">tcache</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#j\">j</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fast cache - only recompute value once per jiffies and avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   relatively costly rdtscp/cpuid otherwise.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   This works because the scheduler usually keeps the process</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   on the same CPU and this syscall doesn't guarantee its</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   results anyways.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   We do this here because otherwise user space would do it on</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   its own in a likely inferior way (no access to jiffies).</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   If you don't like it pass NULL. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcache\">tcache</a> && <a class=\"id\" href=\"#tcache\">tcache</a>-><a class=\"id\" href=\"#blob\">blob</a>[0] == (<a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#__jiffies\">__jiffies</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#tcache\">tcache</a>-><a class=\"id\" href=\"#blob\">blob</a>[1];", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#__vgetcpu_mode\">__vgetcpu_mode</a> == <a class=\"id\" href=\"#VGETCPU_RDTSCP\">VGETCPU_RDTSCP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Load per CPU data from RDTSCP */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#native_read_tscp\">native_read_tscp</a>(&amp;<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Load per CPU data from GDT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"lsl %1,%0\" : \"=r\" (<a class=\"id\" href=\"#p\">p</a>) : \"r\" (<a class=\"id\" href=\"#__PER_CPU_SEG\">__PER_CPU_SEG</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcache\">tcache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcache\">tcache</a>-><a class=\"id\" href=\"#blob\">blob</a>[0] = <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcache\">tcache</a>-><a class=\"id\" href=\"#blob\">blob</a>[1] = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#p\">p</a> &amp; 0xfff;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#p\">p</a> >> 12;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#__vsyscall\">__vsyscall</a>(3) <a class=\"id\" href=\"#venosys_1\">venosys_1</a>(void)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"static <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#kernel_table2\">kernel_table2</a>[] = {", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#procname\">procname</a> = \"vsyscall64\",", 
"<span class=\"ts\"/>  .<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#vsyscall_gtod_data\">vsyscall_gtod_data</a>.<a class=\"id\" href=\"#sysctl_enabled\">sysctl_enabled</a>, .<a class=\"id\" href=\"#maxlen\">maxlen</a> = sizeof(int),", 
"<span class=\"ts\"/>  .<a class=\"id\" href=\"#mode\">mode</a> = 0644,", 
"<span class=\"ts\"/>  .<a class=\"id\" href=\"#proc_handler\">proc_handler</a> = <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a> },", 
"<span class=\"ts\"/>{}", 
"};", 
"", 
"static <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#kernel_root_table2\">kernel_root_table2</a>[] = {", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#procname\">procname</a> = \"kernel\", .<a class=\"id\" href=\"#mode\">mode</a> = 0555,", 
"<span class=\"ts\"/>  .<a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#kernel_table2\">kernel_table2</a> },", 
"<span class=\"ts\"/>{}", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Assume __initcall executes before all user space. Hopefully kmod</span>", 
"<span class=\"comment\">   doesn't violate that. We'll find out if it does. */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#vsyscall_set_cpu\">vsyscall_set_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node\">node</a> = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(&amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#X86_FEATURE_RDTSCP\">X86_FEATURE_RDTSCP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_rdtscp_aux\">write_rdtscp_aux</a>((<a class=\"id\" href=\"#node\">node</a> << 12) | <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Store cpu number in limit so that it can be loaded quickly</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   in user space in vgetcpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   12 bits for the CPU and 8 bits for the node. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = 0x0f40000000000ULL;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> |= <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> |= (<a class=\"id\" href=\"#node\">node</a> &amp; 0xf) << 12;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> |= (<a class=\"id\" href=\"#node\">node</a> >> 4) << 48;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_gdt_entry\">write_gdt_entry</a>(<a class=\"id\" href=\"#get_cpu_gdt_table\">get_cpu_gdt_table</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#GDT_ENTRY_PER_CPU\">GDT_ENTRY_PER_CPU</a>, &amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#DESCTYPE_S\">DESCTYPE_S</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#cpu_vsyscall_init\">cpu_vsyscall_init</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* preemption should be already off */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsyscall_set_cpu\">vsyscall_set_cpu</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a>", 
"<a class=\"id\" href=\"#cpu_vsyscall_notifier\">cpu_vsyscall_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#n\">n</a>, unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#cpu\">cpu</a> = (long)<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a> || <a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_ONLINE_FROZEN\">CPU_ONLINE_FROZEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_vsyscall_init\">cpu_vsyscall_init</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#map_vsyscall\">map_vsyscall</a>(void)", 
"{", 
"<span class=\"ts\"/>extern char <a class=\"id\" href=\"#__vsyscall_0\">__vsyscall_0</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#physaddr_page0\">physaddr_page0</a> = <a class=\"id\" href=\"#__pa_symbol\">__pa_symbol</a>(&amp;<a class=\"id\" href=\"#__vsyscall_0\">__vsyscall_0</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Note that VSYSCALL_MAPPED_PAGES must agree with the code below. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_fixmap\">__set_fixmap</a>(<a class=\"id\" href=\"#VSYSCALL_FIRST_PAGE\">VSYSCALL_FIRST_PAGE</a>, <a class=\"id\" href=\"#physaddr_page0\">physaddr_page0</a>, <a class=\"id\" href=\"#PAGE_KERNEL_VSYSCALL\">PAGE_KERNEL_VSYSCALL</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vsyscall_init\">vsyscall_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(((unsigned long) &amp;<a class=\"id\" href=\"#vgettimeofday\">vgettimeofday</a> !=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VSYSCALL_ADDR\">VSYSCALL_ADDR</a>(<a class=\"id\" href=\"#__NR_vgettimeofday\">__NR_vgettimeofday</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned long) &amp;<a class=\"id\" href=\"#vtime\">vtime</a> != <a class=\"id\" href=\"#VSYSCALL_ADDR\">VSYSCALL_ADDR</a>(<a class=\"id\" href=\"#__NR_vtime\">__NR_vtime</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#VSYSCALL_ADDR\">VSYSCALL_ADDR</a>(0) != <a class=\"id\" href=\"#__fix_to_virt\">__fix_to_virt</a>(<a class=\"id\" href=\"#VSYSCALL_FIRST_PAGE\">VSYSCALL_FIRST_PAGE</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned long) &amp;<a class=\"id\" href=\"#vgetcpu\">vgetcpu</a> != <a class=\"id\" href=\"#VSYSCALL_ADDR\">VSYSCALL_ADDR</a>(<a class=\"id\" href=\"#__NR_vgetcpu\">__NR_vgetcpu</a>));", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_sysctl_table\">register_sysctl_table</a>(<a class=\"id\" href=\"#kernel_root_table2\">kernel_root_table2</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#cpu_vsyscall_init\">cpu_vsyscall_init</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/><span class=\"comment\">/* notifier priority &gt; KVM */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#cpu_vsyscall_notifier\">cpu_vsyscall_notifier</a>, 30);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#vsyscall_init\">vsyscall_init</a>);", 
];
xr_frag_insert('l/60/c4b79fc9e17a881a9e50eb59c911d98bed7c86.xr', __xr_tmp);
