var __xr_tmp = [
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mark page as mlocked if not already.</span>", 
"<span class=\"comment\"> * If page on LRU, isolate and putback to move to unevictable list.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mlock_vma_page\">mlock_vma_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#TestSetPageMlocked\">TestSetPageMlocked</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_zone_page_state\">inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_MLOCK\">NR_MLOCK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#UNEVICTABLE_PGMLOCKED\">UNEVICTABLE_PGMLOCKED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * munlock_vma_page - munlock a vma page</span>", 
"<span class=\"comment\"> * @page - page to be unlocked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * called from munlock()/munmap() path with page supposedly on the LRU.</span>", 
"<span class=\"comment\"> * When we munlock a page, because the vma where we found the page is being</span>", 
"<span class=\"comment\"> * munlock()ed or munmap()ed, we want to check whether other vmas hold the</span>", 
"<span class=\"comment\"> * page locked so that we can leave it on the unevictable lru list and not</span>", 
"<span class=\"comment\"> * bother vmscan with it.  However, to walk the page's rmap list in</span>", 
"<span class=\"comment\"> * try_to_munlock() we must isolate the page from the LRU.  If some other</span>", 
"<span class=\"comment\"> * task has removed the page from the LRU, we won't be able to do that.</span>", 
"<span class=\"comment\"> * So we clear the PageMlocked as we might not get another chance.  If we</span>", 
"<span class=\"comment\"> * can't isolate the page, we leave it for putback_lru_page() and vmscan</span>", 
"<span class=\"comment\"> * [page_referenced()/try_to_unmap()] to deal with.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#munlock_vma_page\">munlock_vma_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TestClearPageMlocked\">TestClearPageMlocked</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dec_zone_page_state\">dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_MLOCK\">NR_MLOCK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#try_to_munlock\">try_to_munlock</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * did try_to_unlock() succeed or punt?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#SWAP_MLOCK\">SWAP_MLOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#UNEVICTABLE_PGMUNLOCKED\">UNEVICTABLE_PGMUNLOCKED</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Some other task has removed the page from the LRU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * putback_lru_page() will take care of removing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page from the unevictable list, if necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * vmscan [page_referenced()] will move the page back</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to the unevictable list if some other vma has it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mlocked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUnevictable\">PageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#UNEVICTABLE_PGSTRANDED\">UNEVICTABLE_PGSTRANDED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#UNEVICTABLE_PGMUNLOCKED\">UNEVICTABLE_PGMUNLOCKED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#stack_guard_page\">stack_guard_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_GROWSDOWN\">VM_GROWSDOWN</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> == <a class=\"id\" href=\"#addr\">addr</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#vma_stack_continue\">vma_stack_continue</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_prev\">vm_prev</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __mlock_vma_pages_range() -  mlock a range of pages in the vma.</span>", 
"<span class=\"comment\"> * @vma:   target vma</span>", 
"<span class=\"comment\"> * @start: start address</span>", 
"<span class=\"comment\"> * @end:   end address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This takes care of making the pages present too.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * return 0 on success, negative error code on error.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * vma-&gt;vm_mm-&gt;mmap_sem must be held for at least read.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#__mlock_vma_pages_range\">__mlock_vma_pages_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a>[16]; <span class=\"comment\">/* 16 gives a reasonable batch */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>) / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#gup_flags\">gup_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#end\">end</a>   &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#end\">end</a>   &gt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#rwsem_is_locked\">rwsem_is_locked</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gup_flags\">gup_flags</a> = <a class=\"id\" href=\"#FOLL_TOUCH\">FOLL_TOUCH</a> | <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gup_flags\">gup_flags</a> |= <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't try to access the guard page of a stack vma */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stack_guard_page\">stack_guard_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start\">start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * get_user_pages makes pages present if we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * setting mlock. and this extra reference count will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * disable migration of this page.  However, page may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * still be truncated out from under us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__get_user_pages\">__get_user_pages</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#pages\">pages</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gup_flags\">gup_flags</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This can happen for, e.g., VM_NONLINEAR regions before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a page has been allocated and mapped at a given offset,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or for addresses that map beyond end of a file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We'll mlock the pages if/when they get faulted in.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain\">lru_add_drain</a>();<span class=\"ts\"/><span class=\"comment\">/* push cached pages to LRU */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ret\">ret</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * That preliminary check is mainly to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the pointless overhead of lock_page on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ZERO_PAGE: which might bounce very badly if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * there is contention.  However, we're still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * dirtying its cacheline with get/put_page:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we'll add another __get_user_pages flag to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * avoid it if that case turns out to matter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Because we lock page here and migration is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * blocked by the elevated reference, we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * only check for file-cache page truncation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mlock_vma_page\">mlock_vma_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);<span class=\"ts\"/><span class=\"comment\">/* ref from get_user_pages() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#ret\">ret</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> -= <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;<span class=\"ts\"/><span class=\"comment\">/* 0 or negative error code */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * convert get_user_pages() return value to posix mlock() error</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__mlock_posix_error_return\">__mlock_posix_error_return</a>(long <a class=\"id\" href=\"#retval\">retval</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#retval\">retval</a> == -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mlock_vma_pages_range() - mlock pages in specified vma range.</span>", 
"<span class=\"comment\"> * @vma - the vma containing the specfied address range</span>", 
"<span class=\"comment\"> * @start - starting address in @vma to mlock</span>", 
"<span class=\"comment\"> * @end   - end address [+1] in @vma to mlock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For mmap()/mremap()/expansion of mlocked vma.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * return 0 on success for \"normal\" vmas.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * return number of pages [&gt; 0] to be removed from locked_vm on success</span>", 
"<span class=\"comment\"> * of \"special\" vmas.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#mlock_vma_pages_range\">mlock_vma_pages_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>) / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filter unlockable vmas</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_IO\">VM_IO</a> | <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_mlock\">no_mlock</a>;", 
"", 
"<span class=\"ts\"/>if (!((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_DONTEXPAND\">VM_DONTEXPAND</a> | <a class=\"id\" href=\"#VM_RESERVED\">VM_RESERVED</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> == <a class=\"id\" href=\"#get_gate_vma\">get_gate_vma</a>(<a class=\"id\" href=\"#current\">current</a>))) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mlock_vma_pages_range\">__mlock_vma_pages_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Hide errors from mmap() and other callers */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * User mapped kernel pages or huge pages:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make these pages present to populate the ptes, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fall thru' to reset VM_LOCKED--no need to unlock, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return nr_pages so these don't get counted against task's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * locked limit.  huge pages are already counted against</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * locked vm limit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#make_pages_present\">make_pages_present</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<a class=\"id\" href=\"#no_mlock\">no_mlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= ~<a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>;<span class=\"ts\"/><span class=\"comment\">/* and don't come back! */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* error or pages NOT mlocked */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * munlock_vma_pages_range() - munlock all pages in the vma range.'</span>", 
"<span class=\"comment\"> * @vma - vma containing range to be munlock()ed.</span>", 
"<span class=\"comment\"> * @start - start address in @vma of the range</span>", 
"<span class=\"comment\"> * @end - end of range in @vma.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  For mremap(), munmap() and exit().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with @vma VM_LOCKED.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns with VM_LOCKED cleared.  Callers must be prepared to</span>", 
"<span class=\"comment\"> * deal with this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We don't save and restore VM_LOCKED here because pages are</span>", 
"<span class=\"comment\"> * still on lru.  In unmap path, pages might be scanned by reclaim</span>", 
"<span class=\"comment\"> * and re-mlocked by try_to_{munlock|unmap} before we unmap and</span>", 
"<span class=\"comment\"> * free them.  This will result in freeing mlocked pages.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#munlock_vma_pages_range\">munlock_vma_pages_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain\">lru_add_drain</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= ~<a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Although FOLL_DUMP is intended for get_dump_page(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it just so happens that its special treatment of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ZERO_PAGE (returning an error instead of doing get_page)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * suits munlock very well (and if somehow an abnormal page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has sneaked into the range, we won't oops here: great).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#follow_page\">follow_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a> | <a class=\"id\" href=\"#FOLL_DUMP\">FOLL_DUMP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> && !<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Like in __mlock_vma_pages_range(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * because we lock page here and migration is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * blocked by the elevated reference, we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * only check for file-cache page truncation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#munlock_vma_page\">munlock_vma_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mlock_fixup  - handle mlock[all]/munlock[all] requests.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Filters out \"special\" vmas -- VM_LOCKED never gets set for these, and</span>", 
"<span class=\"comment\"> * munlock is a no-op.  However, for some special vmas, we go ahead and</span>", 
"<span class=\"comment\"> * populate the ptes via make_pages_present().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For vmas that pass the filters, merge/split as appropriate.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mlock_fixup\">mlock_fixup</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>, unsigned int <a class=\"id\" href=\"#newflags\">newflags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#newflags\">newflags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>;", 
];
xr_frag_insert('l/60/dbcea996ab25f30bd4d15aa24456125bb153e3.xr', __xr_tmp);
