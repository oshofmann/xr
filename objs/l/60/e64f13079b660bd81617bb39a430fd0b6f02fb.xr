var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * attribute_container.c - implementation of a simple container for classes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2005 - James Bottomley &lt;James.Bottomley@steeleye.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is licensed under GPLv2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The basic idea here is to enable a device to be attached to an</span>", 
"<span class=\"comment\"> * aritrary numer of classes without having to allocate storage for them.</span>", 
"<span class=\"comment\"> * Instead, the contained classes select the devices they need to attach</span>", 
"<span class=\"comment\"> * to via a matching function.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#attribute_container\">attribute_container</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"base.h\"", 
"", 
"<span class=\"comment\">/* This is a private structure used to tie the classdev and the</span>", 
"<span class=\"comment\"> * container .. it should never be visible outside this file */</span>", 
"struct <a class=\"id\" href=\"#internal_container\">internal_container</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_node\">klist_node</a> <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#classdev\">classdev</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#internal_container_klist_get\">internal_container_klist_get</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#internal_container\">internal_container</a> *<a class=\"id\" href=\"#ic\">ic</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#internal_container\">internal_container</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#internal_container_klist_put\">internal_container_klist_put</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#internal_container\">internal_container</a> *<a class=\"id\" href=\"#ic\">ic</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#internal_container\">internal_container</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_classdev_to_container - given a classdev, return the container</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @classdev: the class device created by attribute_container_add_device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the container associated with this classdev.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *", 
"<a class=\"id\" href=\"#attribute_container_classdev_to_container\">attribute_container_classdev_to_container</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#classdev\">classdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#internal_container\">internal_container</a> *<a class=\"id\" href=\"#ic\">ic</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#classdev\">classdev</a>, struct <a class=\"id\" href=\"#internal_container\">internal_container</a>, <a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#cont\">cont</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#attribute_container_classdev_to_container\">attribute_container_classdev_to_container</a>);", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#attribute_container_list\">attribute_container_list</a>);", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_register - register an attribute container</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @cont: The container to register.  This must be allocated by the</span>", 
"<span class=\"comment\"> *        callee and should also be zeroed by it.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#attribute_container_register\">attribute_container_register</a>(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_init\">klist_init</a>(&amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#containers\">containers</a>,<a class=\"id\" href=\"#internal_container_klist_get\">internal_container_klist_get</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#internal_container_klist_put\">internal_container_klist_put</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#attribute_container_list\">attribute_container_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#attribute_container_register\">attribute_container_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_unregister - remove a container registration</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @cont: previously registered container to remove</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#attribute_container_unregister\">attribute_container_unregister</a>(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#containers\">containers</a>.<a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#containers\">containers</a>.<a class=\"id\" href=\"#k_list\">k_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#node\">node</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#containers\">containers</a>.<a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#attribute_container_unregister\">attribute_container_unregister</a>);", 
"", 
"<span class=\"comment\">/* private function used as class release */</span>", 
"static void <a class=\"id\" href=\"#attribute_container_release\">attribute_container_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#classdev\">classdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#internal_container\">internal_container</a> *<a class=\"id\" href=\"#ic\">ic</a> ", 
"<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#classdev\">classdev</a>, struct <a class=\"id\" href=\"#internal_container\">internal_container</a>, <a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#classdev\">classdev</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ic\">ic</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_add_device - see if any container is interested in dev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev: device to add attributes to</span>", 
"<span class=\"comment\"> * @fn:<span class=\"ts\"/> function to trigger addition of class device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function allocates storage for the class device(s) to be</span>", 
"<span class=\"comment\"> * attached to dev (one for each matching attribute_container).  If no</span>", 
"<span class=\"comment\"> * fn is provided, the code will simply register the class device via</span>", 
"<span class=\"comment\"> * device_add.  If a function is provided, it is expected to add</span>", 
"<span class=\"comment\"> * the class device at the appropriate time.  One of the things that</span>", 
"<span class=\"comment\"> * might be necessary is to allocate and initialise the classdev and</span>", 
"<span class=\"comment\"> * then add it a later time.  To do this, call this routine for</span>", 
"<span class=\"comment\"> * allocation and initialisation and then use</span>", 
"<span class=\"comment\"> * attribute_container_device_trigger() to call device_add() on</span>", 
"<span class=\"comment\"> * it.  Note: after this, the class device contains a reference to dev</span>", 
"<span class=\"comment\"> * which is not relinquished until the release of the classdev.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#attribute_container_add_device\">attribute_container_add_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#device\">device</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#device\">device</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cont\">cont</a>, &amp;<a class=\"id\" href=\"#attribute_container_list\">attribute_container_list</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#internal_container\">internal_container</a> *<a class=\"id\" href=\"#ic\">ic</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attribute_container_no_classdevs\">attribute_container_no_classdevs</a>(<a class=\"id\" href=\"#cont\">cont</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ic\">ic</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#ic\">ic</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ic\">ic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#dev\">dev</a>, \"failed to allocate class container\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#cont\">cont</a> = <a class=\"id\" href=\"#cont\">cont</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_initialize\">device_initialize</a>(&amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>.<a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#class\">class</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#dev_release\">dev_release</a> = <a class=\"id\" href=\"#attribute_container_release\">attribute_container_release</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(&amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fn\">fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_add_class_device\">attribute_container_add_class_device</a>(&amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist_add_tail\">klist_add_tail</a>(&amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#containers\">containers</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/* FIXME: can't break out of this unless klist_iter_exit is also</span>", 
"<span class=\"comment\"> * called before doing the break</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#klist_for_each_entry\">klist_for_each_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>, <a class=\"id\" href=\"#iter\">iter</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#klist_iter_init\">klist_iter_init</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#iter\">iter</a>); (<a class=\"id\" href=\"#pos\">pos</a> = ({ \\", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#klist_next\">klist_next</a>(<a class=\"id\" href=\"#iter\">iter</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> ? <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>) : \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>({ <a class=\"id\" href=\"#klist_iter_exit\">klist_iter_exit</a>(<a class=\"id\" href=\"#iter\">iter</a>) ; <a class=\"id\" href=\"#NULL\">NULL</a>; }); \\", 
"<span class=\"ts\"/>}) ) != <a class=\"id\" href=\"#NULL\">NULL</a>; )", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_remove_device - make device eligible for removal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev:  The generic device</span>", 
"<span class=\"comment\"> * @fn:<span class=\"ts\"/>  A function to call to remove the device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine triggers device removal.  If fn is NULL, then it is</span>", 
"<span class=\"comment\"> * simply done via device_unregister (note that if something</span>", 
"<span class=\"comment\"> * still has a reference to the classdev, then the memory occupied</span>", 
"<span class=\"comment\"> * will not be freed until the classdev is released).  If you want a</span>", 
"<span class=\"comment\"> * two phase release: remove from visibility and then delete the</span>", 
"<span class=\"comment\"> * device, then you should use this routine with a fn that calls</span>", 
"<span class=\"comment\"> * device_del() and then use attribute_container_device_trigger()</span>", 
"<span class=\"comment\"> * to do the final put on the classdev.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#attribute_container_remove_device\">attribute_container_remove_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device\">device</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device\">device</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cont\">cont</a>, &amp;<a class=\"id\" href=\"#attribute_container_list\">attribute_container_list</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#internal_container\">internal_container</a> *<a class=\"id\" href=\"#ic\">ic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_iter\">klist_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attribute_container_no_classdevs\">attribute_container_no_classdevs</a>(<a class=\"id\" href=\"#cont\">cont</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist_for_each_entry\">klist_for_each_entry</a>(<a class=\"id\" href=\"#ic\">ic</a>, &amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#containers\">containers</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> != <a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>.<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist_del\">klist_del</a>(&amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fn\">fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_remove_attrs\">attribute_container_remove_attrs</a>(&amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_device_trigger - execute a trigger for each matching classdev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev:  The generic device to run the trigger for</span>", 
"<span class=\"comment\"> * @fn<span class=\"ts\"/>  the function to execute for each classdev.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This funcion is for executing a trigger when you need to know both</span>", 
"<span class=\"comment\"> * the container and the classdev.  If you only care about the</span>", 
"<span class=\"comment\"> * container, then use attribute_container_trigger() instead.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#attribute_container_device_trigger\">attribute_container_device_trigger</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device\">device</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device\">device</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cont\">cont</a>, &amp;<a class=\"id\" href=\"#attribute_container_list\">attribute_container_list</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#internal_container\">internal_container</a> *<a class=\"id\" href=\"#ic\">ic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_iter\">klist_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attribute_container_no_classdevs\">attribute_container_no_classdevs</a>(<a class=\"id\" href=\"#cont\">cont</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist_for_each_entry\">klist_for_each_entry</a>(<a class=\"id\" href=\"#ic\">ic</a>, &amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#containers\">containers</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>.<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_trigger - trigger a function for each matching container</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dev:  The generic device to activate the trigger for</span>", 
"<span class=\"comment\"> * @fn:<span class=\"ts\"/>  the function to trigger</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine triggers a function that only needs to know the</span>", 
"<span class=\"comment\"> * matching containers (not the classdev) associated with a device.</span>", 
"<span class=\"comment\"> * It is more lightweight than attribute_container_device_trigger, so</span>", 
"<span class=\"comment\"> * should be used in preference unless the triggering function</span>", 
"<span class=\"comment\"> * actually needs to know the classdev.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#attribute_container_trigger\">attribute_container_trigger</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#device\">device</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cont\">cont</a>, &amp;<a class=\"id\" href=\"#attribute_container_list\">attribute_container_list</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#attribute_container_mutex\">attribute_container_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_add_attrs - add attributes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @classdev: The class device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This simply creates all the class device sysfs files from the</span>", 
"<span class=\"comment\"> * attributes listed in the container</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#attribute_container_add_attrs\">attribute_container_add_attrs</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#classdev\">classdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_classdev_to_container\">attribute_container_classdev_to_container</a>(<a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> **<a class=\"id\" href=\"#attrs\">attrs</a> = <a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#attrs\">attrs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#attrs\">attrs</a> && <a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#grp\">grp</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attrs\">attrs</a> && !<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#grp\">grp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#grp\">grp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sysfs_create_group\">sysfs_create_group</a>(&amp;<a class=\"id\" href=\"#classdev\">classdev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#grp\">grp</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_attr_init\">sysfs_attr_init</a>(&amp;<a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#device_create_file\">device_create_file</a>(<a class=\"id\" href=\"#classdev\">classdev</a>, <a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_add_class_device - same function as device_add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @classdev:<span class=\"ts\"/>the class device to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This performs essentially the same function as device_add except for</span>", 
"<span class=\"comment\"> * attribute containers, namely add the classdev to the system and then</span>", 
"<span class=\"comment\"> * create the attribute files</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#attribute_container_add_class_device\">attribute_container_add_class_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#classdev\">classdev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#device_add\">device_add</a>(<a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#attribute_container_add_attrs\">attribute_container_add_attrs</a>(<a class=\"id\" href=\"#classdev\">classdev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_add_class_device_adapter - simple adapter for triggers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is identical to attribute_container_add_class_device except</span>", 
"<span class=\"comment\"> * that it is designed to be called from the triggers</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#attribute_container_add_class_device_adapter\">attribute_container_add_class_device_adapter</a>(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#classdev\">classdev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#attribute_container_add_class_device\">attribute_container_add_class_device</a>(<a class=\"id\" href=\"#classdev\">classdev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_remove_attrs - remove any attribute files</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @classdev: The class device to remove the files from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#attribute_container_remove_attrs\">attribute_container_remove_attrs</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#classdev\">classdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_classdev_to_container\">attribute_container_classdev_to_container</a>(<a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> **<a class=\"id\" href=\"#attrs\">attrs</a> = <a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#attrs\">attrs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attrs\">attrs</a> && !<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#grp\">grp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#grp\">grp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_group\">sysfs_remove_group</a>(&amp;<a class=\"id\" href=\"#classdev\">classdev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#grp\">grp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return ;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_remove_file\">device_remove_file</a>(<a class=\"id\" href=\"#classdev\">classdev</a>, <a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_class_device_del - equivalent of class_device_del</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @classdev: the class device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function simply removes all the attribute files and then calls</span>", 
"<span class=\"comment\"> * device_del.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#attribute_container_class_device_del\">attribute_container_class_device_del</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#classdev\">classdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attribute_container_remove_attrs\">attribute_container_remove_attrs</a>(<a class=\"id\" href=\"#classdev\">classdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_del\">device_del</a>(<a class=\"id\" href=\"#classdev\">classdev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * attribute_container_find_class_device - find the corresponding class_device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @cont:<span class=\"ts\"/>the container</span>", 
"<span class=\"comment\"> * @dev:<span class=\"ts\"/>the generic device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Looks up the device in the container's list of class devices and returns</span>", 
"<span class=\"comment\"> * the corresponding class_device.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#device\">device</a> *", 
"<a class=\"id\" href=\"#attribute_container_find_class_device\">attribute_container_find_class_device</a>(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#internal_container\">internal_container</a> *<a class=\"id\" href=\"#ic\">ic</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_iter\">klist_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_for_each_entry\">klist_for_each_entry</a>(<a class=\"id\" href=\"#ic\">ic</a>, &amp;<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#containers\">containers</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>.<a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cdev\">cdev</a> = &amp;<a class=\"id\" href=\"#ic\">ic</a>-><a class=\"id\" href=\"#classdev\">classdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: must exit iterator then break */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist_iter_exit\">klist_iter_exit</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cdev\">cdev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#attribute_container_find_class_device\">attribute_container_find_class_device</a>);", 
];
xr_frag_insert('l/60/e64f13079b660bd81617bb39a430fd0b6f02fb.xr', __xr_tmp);
