var __xr_tmp = [
"<span class=\"comment\">/* memcontrol.c - Memory Controller</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright IBM Corporation, 2007</span>", 
"<span class=\"comment\"> * Author Balbir Singh &lt;balbir@linux.vnet.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 2007 OpenVZ SWsoft Inc</span>", 
"<span class=\"comment\"> * Author: Pavel Emelianov &lt;xemul@openvz.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Memory thresholds</span>", 
"<span class=\"comment\"> * Copyright (C) 2009 Nokia Corporation</span>", 
"<span class=\"comment\"> * Author: Kirill A. Shutemov</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#res_counter\">res_counter</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memcontrol\">memcontrol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroup\">cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hugetlb\">hugetlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page\">page</a>-<a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bit_spinlock\">bit_spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rbtree\">rbtree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swapops\">swapops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#eventfd\">eventfd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sort\">sort</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm_inline\">mm_inline</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page_cgroup\">page_cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#oom\">oom</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#vmscan\">vmscan</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> <a class=\"id\" href=\"#mem_cgroup_subsys\">mem_cgroup_subsys</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_RETRIES\">MEM_CGROUP_RECLAIM_RETRIES</a><span class=\"ts\"/>5", 
"struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#root_mem_cgroup\">root_mem_cgroup</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR_SWAP\">CONFIG_CGROUP_MEM_RES_CTLR_SWAP</a>", 
"<span class=\"comment\">/* Turned on only when memory cgroup is enabled &amp;&amp; really_do_swap_account = 1 */</span>", 
"int <a class=\"id\" href=\"#do_swap_account\">do_swap_account</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static int <a class=\"id\" href=\"#really_do_swap_account\">really_do_swap_account</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> = 1; <span class=\"comment\">/* for remember boot option*/</span>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_swap_account\">do_swap_account</a><span class=\"ts\"/><span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Per memcg event counter is incremented at every pagein/pageout. This counter</span>", 
"<span class=\"comment\"> * is used for trigger some periodic events. This is straightforward and better</span>", 
"<span class=\"comment\"> * than using jiffies etc. to handle periodic memcg event.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These values will be used as !((event) &amp; ((1 &lt;&lt;(thresh)) - 1))</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#THRESHOLDS_EVENTS_THRESH\">THRESHOLDS_EVENTS_THRESH</a> (7) <span class=\"comment\">/* once in 128 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SOFTLIMIT_EVENTS_THRESH\">SOFTLIMIT_EVENTS_THRESH</a> (10) <span class=\"comment\">/* once in 1024 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Statistics for memory cgroup.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#mem_cgroup_stat_index\">mem_cgroup_stat_index</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For MEM_CONTAINER_TYPE_ALL, usage = pagecache + rss.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_STAT_CACHE\">MEM_CGROUP_STAT_CACHE</a>, <span class=\"ts\"/>   <span class=\"comment\">/* # of pages charged as cache */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_STAT_RSS\">MEM_CGROUP_STAT_RSS</a>,<span class=\"ts\"/>   <span class=\"comment\">/* # of pages charged as anon rss */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_STAT_FILE_MAPPED\">MEM_CGROUP_STAT_FILE_MAPPED</a>,  <span class=\"comment\">/* # of pages charged as file rss */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_STAT_PGPGIN_COUNT\">MEM_CGROUP_STAT_PGPGIN_COUNT</a>,<span class=\"ts\"/><span class=\"comment\">/* # of pages paged in */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_STAT_PGPGOUT_COUNT\">MEM_CGROUP_STAT_PGPGOUT_COUNT</a>,<span class=\"ts\"/><span class=\"comment\">/* # of pages paged out */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_STAT_SWAPOUT\">MEM_CGROUP_STAT_SWAPOUT</a>, <span class=\"comment\">/* # of pages, swapped out */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_EVENTS\">MEM_CGROUP_EVENTS</a>,<span class=\"ts\"/><span class=\"comment\">/* incremented at every  pagein/pageout */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_STAT_NSTATS\">MEM_CGROUP_STAT_NSTATS</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#mem_cgroup_stat_cpu\">mem_cgroup_stat_cpu</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_STAT_NSTATS\">MEM_CGROUP_STAT_NSTATS</a>];", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * per-zone information in memory controller.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * spin_lock to protect the per cgroup LRU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#lists\">lists</a>[<a class=\"id\" href=\"#NR_LRU_LISTS\">NR_LRU_LISTS</a>];", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#NR_LRU_LISTS\">NR_LRU_LISTS</a>];", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone_reclaim_stat\">zone_reclaim_stat</a> <a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree_node\">tree_node</a>;<span class=\"ts\"/><span class=\"comment\">/* RB tree node */</span>", 
"<span class=\"ts\"/>unsigned long long<span class=\"ts\"/><a class=\"id\" href=\"#usage_in_excess\">usage_in_excess</a>;<span class=\"comment\">/* Set to the value by which */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the soft limit is exceeded*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#on_tree\">on_tree</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a><span class=\"ts\"/>*<a class=\"id\" href=\"#mem\">mem</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Back pointer, we cannot */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* use container_of<span class=\"ts\"/>   */</span>", 
"};", 
"<span class=\"comment\">/* Macro for accessing counter */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEM_CGROUP_ZSTAT\">MEM_CGROUP_ZSTAT</a>(<a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#idx\">idx</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#mz\">mz</a>)-><a class=\"id\" href=\"#count\">count</a>[(<a class=\"id\" href=\"#idx\">idx</a>)])", 
"", 
"struct <a class=\"id\" href=\"#mem_cgroup_per_node\">mem_cgroup_per_node</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> <a class=\"id\" href=\"#zoneinfo\">zoneinfo</a>[<a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#mem_cgroup_lru_info\">mem_cgroup_lru_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_node\">mem_cgroup_per_node</a> *<a class=\"id\" href=\"#nodeinfo\">nodeinfo</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>];", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cgroups above their limits are maintained in a RB-Tree, independent of</span>", 
"<span class=\"comment\"> * their hierarchy representation</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#rb_root\">rb_root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#mem_cgroup_tree_per_node\">mem_cgroup_tree_per_node</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> <a class=\"id\" href=\"#rb_tree_per_zone\">rb_tree_per_zone</a>[<a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#mem_cgroup_tree\">mem_cgroup_tree</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_tree_per_node\">mem_cgroup_tree_per_node</a> *<a class=\"id\" href=\"#rb_tree_per_node\">rb_tree_per_node</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>];", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#mem_cgroup_tree\">mem_cgroup_tree</a> <a class=\"id\" href=\"#soft_limit_tree\">soft_limit_tree</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"struct <a class=\"id\" href=\"#mem_cgroup_threshold\">mem_cgroup_threshold</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd\">eventfd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#threshold\">threshold</a>;", 
"};", 
"", 
"<span class=\"comment\">/* For threshold */</span>", 
"struct <a class=\"id\" href=\"#mem_cgroup_threshold_ary\">mem_cgroup_threshold_ary</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* An array index points to threshold just below usage. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#current_threshold\">current_threshold</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Size of entries[] */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Array of thresholds */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_threshold\">mem_cgroup_threshold</a> <a class=\"id\" href=\"#entries\">entries</a>[0];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#mem_cgroup_thresholds\">mem_cgroup_thresholds</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Primary thresholds array */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_threshold_ary\">mem_cgroup_threshold_ary</a> *<a class=\"id\" href=\"#primary\">primary</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Spare threshold array.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is needed to make mem_cgroup_unregister_event() \"never fail\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It must be able to store at least primary-&gt;size - 1 entries.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_threshold_ary\">mem_cgroup_threshold_ary</a> *<a class=\"id\" href=\"#spare\">spare</a>;", 
"};", 
"", 
"<span class=\"comment\">/* for OOM */</span>", 
"struct <a class=\"id\" href=\"#mem_cgroup_eventfd_list\">mem_cgroup_eventfd_list</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd\">eventfd</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_threshold\">mem_cgroup_threshold</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>);", 
"static void <a class=\"id\" href=\"#mem_cgroup_oom_notify\">mem_cgroup_oom_notify</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The memory controller data structure. The memory controller controls both</span>", 
"<span class=\"comment\"> * page cache and RSS per cgroup. We would eventually like to provide</span>", 
"<span class=\"comment\"> * statistics based on the statistics developed by Rik Van Riel for clock-pro,</span>", 
"<span class=\"comment\"> * to help the administrator determine what knobs to tune.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TODO: Add a water mark for the memory controller. Reclaim will begin when</span>", 
"<span class=\"comment\"> * we hit the water mark. May be even add a low water mark, such that</span>", 
"<span class=\"comment\"> * no reclaim occurs from a cgroup at it's low water mark, this is</span>", 
"<span class=\"comment\"> * a feature that will be implemented much later in the future.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> <a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the counter to account for memory usage</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#res_counter\">res_counter</a> <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the counter to account for mem+swap usage.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#res_counter\">res_counter</a> <a class=\"id\" href=\"#memsw\">memsw</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Per cgroup active and inactive list, similar to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * per zone LRU lists.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_lru_info\">mem_cgroup_lru_info</a> <a class=\"id\" href=\"#info\">info</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>  protect against reclaim related member.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#reclaim_param_lock\">reclaim_param_lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * While reclaiming in a hierarchy, we cache the last child we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reclaimed from.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#last_scanned_child\">last_scanned_child</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Should the accounting and control be hierarchical, per subtree?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#oom_lock\">oom_lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#refcnt\">refcnt</a>;", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#swappiness\">swappiness</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* OOM-Killer disable */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oom_kill_disable\">oom_kill_disable</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set when res.limit == memsw.limit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memsw_is_minimum\">memsw_is_minimum</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* protect arrays of thresholds */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#thresholds_lock\">thresholds_lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* thresholds for memory usage. RCU-protected */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_thresholds\">mem_cgroup_thresholds</a> <a class=\"id\" href=\"#thresholds\">thresholds</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* thresholds for mem+swap usage. RCU-protected */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_thresholds\">mem_cgroup_thresholds</a> <a class=\"id\" href=\"#memsw_thresholds\">memsw_thresholds</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For oom notifier event fd */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#oom_notify\">oom_notify</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Should we move charges of a task when a task is moved into this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mem_cgroup ? And what type of charges should we move ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <span class=\"ts\"/><a class=\"id\" href=\"#move_charge_at_immigrate\">move_charge_at_immigrate</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * percpu counter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_stat_cpu\">mem_cgroup_stat_cpu</a> *<a class=\"id\" href=\"#stat\">stat</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Stuffs for move charges at task migration. */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Types of charges to be moved. \"move_charge_at_immitgrate\" is treated as a</span>", 
"<span class=\"comment\"> * left-shifted bitmap of these types.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#move_type\">move_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MOVE_CHARGE_TYPE_ANON\">MOVE_CHARGE_TYPE_ANON</a>,<span class=\"ts\"/><span class=\"comment\">/* private anonymous page and swap of it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MOVE_CHARGE_TYPE_FILE\">MOVE_CHARGE_TYPE_FILE</a>,<span class=\"ts\"/><span class=\"comment\">/* file page(including tmpfs) and swap of it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NR_MOVE_TYPE\">NR_MOVE_TYPE</a>,", 
"};", 
"", 
"<span class=\"comment\">/* \"mc\" and its members are protected by cgroup_mutex */</span>", 
"static struct <a class=\"id\" href=\"#move_charge_struct\">move_charge_struct</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/>  <a class=\"id\" href=\"#lock\">lock</a>; <span class=\"comment\">/* for from, to, moving_task */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#precharge\">precharge</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#moved_charge\">moved_charge</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#moved_swap\">moved_swap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#moving_task\">moving_task</a>;<span class=\"ts\"/><span class=\"comment\">/* a task moving charges */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#waitq\">waitq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* a waitq for other context */</span>", 
"} <a class=\"id\" href=\"#mc\">mc</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#lock\">lock</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#waitq\">waitq</a> = <a class=\"id\" href=\"#__WAIT_QUEUE_HEAD_INITIALIZER\">__WAIT_QUEUE_HEAD_INITIALIZER</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#waitq\">waitq</a>),", 
"};", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#move_anon\">move_anon</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#MOVE_CHARGE_TYPE_ANON\">MOVE_CHARGE_TYPE_ANON</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#move_charge_at_immigrate\">move_charge_at_immigrate</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#move_file\">move_file</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#MOVE_CHARGE_TYPE_FILE\">MOVE_CHARGE_TYPE_FILE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#move_charge_at_immigrate\">move_charge_at_immigrate</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Maximum loops in mem_cgroup_hierarchical_reclaim(), used for soft</span>", 
"<span class=\"comment\"> * limit reclaim to prevent infinite loops, if they ever occur.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_MAX_RECLAIM_LOOPS\">MEM_CGROUP_MAX_RECLAIM_LOOPS</a><span class=\"ts\"/><span class=\"ts\"/>(100)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_MAX_SOFT_LIMIT_RECLAIM_LOOPS\">MEM_CGROUP_MAX_SOFT_LIMIT_RECLAIM_LOOPS</a><span class=\"ts\"/>(2)", 
"", 
"enum <a class=\"id\" href=\"#charge_type\">charge_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_CACHE\">MEM_CGROUP_CHARGE_TYPE_CACHE</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_MAPPED\">MEM_CGROUP_CHARGE_TYPE_MAPPED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_SHMEM\">MEM_CGROUP_CHARGE_TYPE_SHMEM</a>,<span class=\"ts\"/><span class=\"comment\">/* used by page migration of shmem */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_FORCE\">MEM_CGROUP_CHARGE_TYPE_FORCE</a>,<span class=\"ts\"/><span class=\"comment\">/* used by force_empty */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_SWAPOUT\">MEM_CGROUP_CHARGE_TYPE_SWAPOUT</a>,<span class=\"ts\"/><span class=\"comment\">/* for accounting swapcache */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_CHARGE_TYPE_DROP\">MEM_CGROUP_CHARGE_TYPE_DROP</a>,<span class=\"ts\"/><span class=\"comment\">/* a page was unused swap cache */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NR_CHARGE_TYPE\">NR_CHARGE_TYPE</a>,", 
"};", 
"", 
"<span class=\"comment\">/* only for here (for easy reading.) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCGF_CACHE\">PCGF_CACHE</a><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PCG_CACHE\">PCG_CACHE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCGF_USED\">PCGF_USED</a><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PCG_USED\">PCG_USED</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCGF_LOCK\">PCGF_LOCK</a><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PCG_LOCK\">PCG_LOCK</a>)", 
"<span class=\"comment\">/* Not used, but added here for completeness */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCGF_ACCT\">PCGF_ACCT</a><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#PCG_ACCT\">PCG_ACCT</a>)", 
"", 
"<span class=\"comment\">/* for encoding cft-&gt;private value on file */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_MEM\">_MEM</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_MEMSWAP\">_MEMSWAP</a><span class=\"ts\"/><span class=\"ts\"/>(1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_OOM_TYPE\">_OOM_TYPE</a><span class=\"ts\"/><span class=\"ts\"/>(2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEMFILE_PRIVATE\">MEMFILE_PRIVATE</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#x\">x</a>) << 16) | (<a class=\"id\" href=\"#val\">val</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEMFILE_TYPE\">MEMFILE_TYPE</a>(<a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#val\">val</a>) >> 16) &amp; 0xffff)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEMFILE_ATTR\">MEMFILE_ATTR</a>(<a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#val\">val</a>) &amp; 0xffff)", 
"<span class=\"comment\">/* Used for OOM nofiier */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OOM_CONTROL\">OOM_CONTROL</a><span class=\"ts\"/><span class=\"ts\"/>(0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reclaim flags for mem_cgroup_hierarchical_reclaim</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_NOSWAP_BIT\">MEM_CGROUP_RECLAIM_NOSWAP_BIT</a><span class=\"ts\"/>0x0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_NOSWAP\">MEM_CGROUP_RECLAIM_NOSWAP</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_NOSWAP_BIT\">MEM_CGROUP_RECLAIM_NOSWAP_BIT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_SHRINK_BIT\">MEM_CGROUP_RECLAIM_SHRINK_BIT</a><span class=\"ts\"/>0x1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_SHRINK\">MEM_CGROUP_RECLAIM_SHRINK</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_SHRINK_BIT\">MEM_CGROUP_RECLAIM_SHRINK_BIT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_SOFT_BIT\">MEM_CGROUP_RECLAIM_SOFT_BIT</a><span class=\"ts\"/>0x2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_SOFT\">MEM_CGROUP_RECLAIM_SOFT</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_SOFT_BIT\">MEM_CGROUP_RECLAIM_SOFT_BIT</a>)", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_get\">mem_cgroup_get</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>);", 
"static void <a class=\"id\" href=\"#mem_cgroup_put\">mem_cgroup_put</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>);", 
"static struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#parent_mem_cgroup\">parent_mem_cgroup</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>);", 
"static void <a class=\"id\" href=\"#drain_all_stock_async\">drain_all_stock_async</a>(void);", 
"", 
"static struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *", 
"<a class=\"id\" href=\"#mem_cgroup_zoneinfo\">mem_cgroup_zoneinfo</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, int <a class=\"id\" href=\"#nid\">nid</a>, int <a class=\"id\" href=\"#zid\">zid</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#nodeinfo\">nodeinfo</a>[<a class=\"id\" href=\"#nid\">nid</a>]-><a class=\"id\" href=\"#zoneinfo\">zoneinfo</a>[<a class=\"id\" href=\"#zid\">zid</a>];", 
"}", 
"", 
"struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#mem_cgroup_css\">mem_cgroup_css</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *", 
"<a class=\"id\" href=\"#page_cgroup_zoneinfo\">page_cgroup_zoneinfo</a>(struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#page_cgroup_nid\">page_cgroup_nid</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zid\">zid</a> = <a class=\"id\" href=\"#page_cgroup_zid\">page_cgroup_zid</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem_cgroup_zoneinfo\">mem_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zid\">zid</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> *", 
"<a class=\"id\" href=\"#soft_limit_tree_node_zone\">soft_limit_tree_node_zone</a>(int <a class=\"id\" href=\"#nid\">nid</a>, int <a class=\"id\" href=\"#zid\">zid</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#soft_limit_tree\">soft_limit_tree</a>.<a class=\"id\" href=\"#rb_tree_per_node\">rb_tree_per_node</a>[<a class=\"id\" href=\"#nid\">nid</a>]-><a class=\"id\" href=\"#rb_tree_per_zone\">rb_tree_per_zone</a>[<a class=\"id\" href=\"#zid\">zid</a>];", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> *", 
"<a class=\"id\" href=\"#soft_limit_tree_from_page\">soft_limit_tree_from_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zid\">zid</a> = <a class=\"id\" href=\"#page_zonenum\">page_zonenum</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#soft_limit_tree\">soft_limit_tree</a>.<a class=\"id\" href=\"#rb_tree_per_node\">rb_tree_per_node</a>[<a class=\"id\" href=\"#nid\">nid</a>]-><a class=\"id\" href=\"#rb_tree_per_zone\">rb_tree_per_zone</a>[<a class=\"id\" href=\"#zid\">zid</a>];", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#__mem_cgroup_insert_exceeded\">__mem_cgroup_insert_exceeded</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> *<a class=\"id\" href=\"#mctz\">mctz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#new_usage_in_excess\">new_usage_in_excess</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#rb_root\">rb_root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz_node\">mz_node</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#on_tree\">on_tree</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#usage_in_excess\">usage_in_excess</a> = <a class=\"id\" href=\"#new_usage_in_excess\">new_usage_in_excess</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#usage_in_excess\">usage_in_excess</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz_node\">mz_node</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree_node\">tree_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#usage_in_excess\">usage_in_excess</a> &lt; <a class=\"id\" href=\"#mz_node\">mz_node</a>-><a class=\"id\" href=\"#usage_in_excess\">usage_in_excess</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can't avoid mem cgroups that are over their soft</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * limit by the same amount</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#usage_in_excess\">usage_in_excess</a> >= <a class=\"id\" href=\"#mz_node\">mz_node</a>-><a class=\"id\" href=\"#usage_in_excess\">usage_in_excess</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#tree_node\">tree_node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#tree_node\">tree_node</a>, &amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#rb_root\">rb_root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#on_tree\">on_tree</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#__mem_cgroup_remove_exceeded\">__mem_cgroup_remove_exceeded</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> *<a class=\"id\" href=\"#mctz\">mctz</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#on_tree\">on_tree</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#tree_node\">tree_node</a>, &amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#rb_root\">rb_root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#on_tree\">on_tree</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#mem_cgroup_remove_exceeded\">mem_cgroup_remove_exceeded</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> *<a class=\"id\" href=\"#mctz\">mctz</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_remove_exceeded\">__mem_cgroup_remove_exceeded</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#mctz\">mctz</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_update_tree\">mem_cgroup_update_tree</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#excess\">excess</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> *<a class=\"id\" href=\"#mctz\">mctz</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zid\">zid</a> = <a class=\"id\" href=\"#page_zonenum\">page_zonenum</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mctz\">mctz</a> = <a class=\"id\" href=\"#soft_limit_tree_from_page\">soft_limit_tree_from_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Necessary to update all ancestors when hierarchy is used.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because their event counter is not touched.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#mem\">mem</a>; <a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#parent_mem_cgroup\">parent_mem_cgroup</a>(<a class=\"id\" href=\"#mem\">mem</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#mem_cgroup_zoneinfo\">mem_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zid\">zid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#excess\">excess</a> = <a class=\"id\" href=\"#res_counter_soft_limit_excess\">res_counter_soft_limit_excess</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We have to update the tree if mz is on RB-tree or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mem is over its softlimit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#excess\">excess</a> || <a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#on_tree\">on_tree</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if on-tree, remove it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#on_tree\">on_tree</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_remove_exceeded\">__mem_cgroup_remove_exceeded</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#mctz\">mctz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Insert again. mz-&gt;usage_in_excess will be updated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If excess is 0, no tree ops.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_insert_exceeded\">__mem_cgroup_insert_exceeded</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#mctz\">mctz</a>, <a class=\"id\" href=\"#excess\">excess</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_remove_from_trees\">mem_cgroup_remove_from_trees</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> *<a class=\"id\" href=\"#mctz\">mctz</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_POSSIBLE\">N_POSSIBLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#zone\">zone</a> = 0; <a class=\"id\" href=\"#zone\">zone</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#zone\">zone</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#mem_cgroup_zoneinfo\">mem_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mctz\">mctz</a> = <a class=\"id\" href=\"#soft_limit_tree_node_zone\">soft_limit_tree_node_zone</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_remove_exceeded\">mem_cgroup_remove_exceeded</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#mctz\">mctz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#mem_cgroup_get_excess\">mem_cgroup_get_excess</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res_counter_soft_limit_excess\">res_counter_soft_limit_excess</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *", 
"<a class=\"id\" href=\"#__mem_cgroup_largest_soft_limit_node\">__mem_cgroup_largest_soft_limit_node</a>(struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> *<a class=\"id\" href=\"#mctz\">mctz</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rightmost\">rightmost</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rightmost\">rightmost</a> = <a class=\"id\" href=\"#rb_last\">rb_last</a>(&amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#rb_root\">rb_root</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rightmost\">rightmost</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Nothing to reclaim from */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#rightmost\">rightmost</a>, struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a>, <a class=\"id\" href=\"#tree_node\">tree_node</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Remove the node now but someone else can add it back,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we will to add it back at the end of reclaim to its correct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * position in the tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_remove_exceeded\">__mem_cgroup_remove_exceeded</a>(<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#mctz\">mctz</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res_counter_soft_limit_excess\">res_counter_soft_limit_excess</a>(&amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#css_tryget\">css_tryget</a>(&amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mz\">mz</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *", 
"<a class=\"id\" href=\"#mem_cgroup_largest_soft_limit_node\">mem_cgroup_largest_soft_limit_node</a>(struct <a class=\"id\" href=\"#mem_cgroup_tree_per_zone\">mem_cgroup_tree_per_zone</a> *<a class=\"id\" href=\"#mctz\">mctz</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#__mem_cgroup_largest_soft_limit_node\">__mem_cgroup_largest_soft_limit_node</a>(<a class=\"id\" href=\"#mctz\">mctz</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mctz\">mctz</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mz\">mz</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#mem_cgroup_read_stat\">mem_cgroup_read_stat</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#mem_cgroup_stat_index\">mem_cgroup_stat_index</a> <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#val\">val</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> += <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#idx\">idx</a>], <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#mem_cgroup_local_usage\">mem_cgroup_local_usage</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_read_stat\">mem_cgroup_read_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_CGROUP_STAT_RSS\">MEM_CGROUP_STAT_RSS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#mem_cgroup_read_stat\">mem_cgroup_read_stat</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#MEM_CGROUP_STAT_CACHE\">MEM_CGROUP_STAT_CACHE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_swap_statistics\">mem_cgroup_swap_statistics</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#charge\">charge</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a> = (<a class=\"id\" href=\"#charge\">charge</a>) ? 1 : -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_cpu_add\">this_cpu_add</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_STAT_SWAPOUT\">MEM_CGROUP_STAT_SWAPOUT</a>], <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_charge_statistics\">mem_cgroup_charge_statistics</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#charge\">charge</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a> = (<a class=\"id\" href=\"#charge\">charge</a>) ? 1 : -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageCgroupCache\">PageCgroupCache</a>(<a class=\"id\" href=\"#pc\">pc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_add\">__this_cpu_add</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_STAT_CACHE\">MEM_CGROUP_STAT_CACHE</a>], <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_add\">__this_cpu_add</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_STAT_RSS\">MEM_CGROUP_STAT_RSS</a>], <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#charge\">charge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_STAT_PGPGIN_COUNT\">MEM_CGROUP_STAT_PGPGIN_COUNT</a>]);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_STAT_PGPGOUT_COUNT\">MEM_CGROUP_STAT_PGPGOUT_COUNT</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_EVENTS\">MEM_CGROUP_EVENTS</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#mem_cgroup_get_local_zonestat\">mem_cgroup_get_local_zonestat</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zid\">zid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#total\">total</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#nid\">nid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#zid\">zid</a> = 0; <a class=\"id\" href=\"#zid\">zid</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#zid\">zid</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#mem_cgroup_zoneinfo\">mem_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zid\">zid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#MEM_CGROUP_ZSTAT\">MEM_CGROUP_ZSTAT</a>(<a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#total\">total</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__memcg_event_check\">__memcg_event_check</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, int <a class=\"id\" href=\"#event_mask_shift\">event_mask_shift</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#this_cpu_read\">this_cpu_read</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_EVENTS\">MEM_CGROUP_EVENTS</a>]);", 
"", 
"<span class=\"ts\"/>return !(<a class=\"id\" href=\"#val\">val</a> &amp; ((1 << <a class=\"id\" href=\"#event_mask_shift\">event_mask_shift</a>) - 1));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check events in order.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#memcg_check_events\">memcg_check_events</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* threshold event is triggered in finer grain than soft limit */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#__memcg_event_check\">__memcg_event_check</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#THRESHOLDS_EVENTS_THRESH\">THRESHOLDS_EVENTS_THRESH</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_threshold\">mem_cgroup_threshold</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#__memcg_event_check\">__memcg_event_check</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#SOFTLIMIT_EVENTS_THRESH\">SOFTLIMIT_EVENTS_THRESH</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_update_tree\">mem_cgroup_update_tree</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem_cgroup_from_cont\">mem_cgroup_from_cont</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a>(<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_subsys_id\">mem_cgroup_subsys_id</a>), struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem_cgroup_from_task\">mem_cgroup_from_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mm_update_next_owner() may clear mm-&gt;owner to NULL</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if it races with swapoff, page migration, etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So this can be called with p == NULL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#task_subsys_state\">task_subsys_state</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mem_cgroup_subsys_id\">mem_cgroup_subsys_id</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#try_get_mem_cgroup_from_mm\">try_get_mem_cgroup_from_mm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Because we have no locks, mm-&gt;owner's may be being moved to other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cgroup. We use css_tryget() here even if this looks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pessimistic (rather than adding locks here).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_task\">mem_cgroup_from_task</a>(<a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#owner\">owner</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#mem\">mem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#css_tryget\">css_tryget</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem\">mem</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call callback function against all cgroup under hierarchy tree.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mem_cgroup_walk_tree\">mem_cgroup_walk_tree</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#root\">root</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *, void *))", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a>, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#nextid\">nextid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (*<a class=\"id\" href=\"#func\">func</a>)(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nextid\">nextid</a> = 1;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#css_get_next\">css_get_next</a>(&amp;<a class=\"id\" href=\"#mem_cgroup_subsys\">mem_cgroup_subsys</a>, <a class=\"id\" href=\"#nextid\">nextid</a>, &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#css\">css</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#found\">found</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#css\">css</a> && <a class=\"id\" href=\"#css_tryget\">css_tryget</a>(<a class=\"id\" href=\"#css\">css</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#css\">css</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (*<a class=\"id\" href=\"#func\">func</a>)(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nextid\">nextid</a> = <a class=\"id\" href=\"#found\">found</a> + 1;", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#css\">css</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#mem\">mem</a> == <a class=\"id\" href=\"#root_mem_cgroup\">root_mem_cgroup</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Following LRU functions are allowed to be used without PCG_LOCK.</span>", 
"<span class=\"comment\"> * Operations are called by routine of global LRU independently from memcg.</span>", 
"<span class=\"comment\"> * What we have to take care of here is validness of pc-&gt;mem_cgroup.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Changes to pc-&gt;mem_cgroup happens when</span>", 
"<span class=\"comment\"> * 1. charge</span>", 
"<span class=\"comment\"> * 2. moving account</span>", 
"<span class=\"comment\"> * In typical case, \"charge\" is done before add-to-lru. Exception is SwapCache.</span>", 
"<span class=\"comment\"> * It is added to LRU before charge.</span>", 
"<span class=\"comment\"> * If PCG_USED bit is not set, page_cgroup is not added to this private LRU.</span>", 
"<span class=\"comment\"> * When moving account, the page is not on LRU. It's isolated.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#mem_cgroup_del_lru_list\">mem_cgroup_del_lru_list</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#lru\">lru</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* can happen while we handle swapcache. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#TestClearPageCgroupAcctLRU\">TestClearPageCgroupAcctLRU</a>(<a class=\"id\" href=\"#pc\">pc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't check PCG_USED bit. It's cleared when the \"page\" is finally</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * removed from global LRU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#page_cgroup_zoneinfo\">page_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_ZSTAT\">MEM_CGROUP_ZSTAT</a>(<a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#lru\">lru</a>) -= 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#lru\">lru</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"void <a class=\"id\" href=\"#mem_cgroup_del_lru\">mem_cgroup_del_lru</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_del_lru_list\">mem_cgroup_del_lru_list</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page_lru\">page_lru</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#mem_cgroup_rotate_lru_list\">mem_cgroup_rotate_lru_list</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#lru\">lru</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Used bit is set without atomic ops but after smp_wmb().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For making pc-&gt;mem_cgroup visible, insert smp_rmb() here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* unused or root page is not rotated. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>) || <a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#page_cgroup_zoneinfo\">page_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#lists\">lists</a>[<a class=\"id\" href=\"#lru\">lru</a>]);", 
"}", 
"", 
"void <a class=\"id\" href=\"#mem_cgroup_add_lru_list\">mem_cgroup_add_lru_list</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#lru\">lru</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageCgroupAcctLRU\">PageCgroupAcctLRU</a>(<a class=\"id\" href=\"#pc\">pc</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Used bit is set without atomic ops but after smp_wmb().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For making pc-&gt;mem_cgroup visible, insert smp_rmb() here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#page_cgroup_zoneinfo\">page_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MEM_CGROUP_ZSTAT\">MEM_CGROUP_ZSTAT</a>(<a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#lru\">lru</a>) += 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPageCgroupAcctLRU\">SetPageCgroupAcctLRU</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#lists\">lists</a>[<a class=\"id\" href=\"#lru\">lru</a>]);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * At handling SwapCache, pc-&gt;mem_cgroup may be changed while it's linked to</span>", 
"<span class=\"comment\"> * lru because the page may.be reused after it's fully uncharged (because of</span>", 
"<span class=\"comment\"> * SwapCache behavior).To handle that, unlink page_cgroup from LRU when charge</span>", 
"<span class=\"comment\"> * it again. This function is only used to charge SwapCache. It's done under</span>", 
"<span class=\"comment\"> * lock_page and expected that zone-&gt;lru_lock is never held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#mem_cgroup_lru_del_before_commit_swapcache\">mem_cgroup_lru_del_before_commit_swapcache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Forget old LRU when this page_cgroup is *not* used. This Used bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is guarded by lock_page() because the page is SwapCache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_del_lru_list\">mem_cgroup_del_lru_list</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page_lru\">page_lru</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_lru_add_after_commit_swapcache\">mem_cgroup_lru_add_after_commit_swapcache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* link when the page is linked to LRU but page_cgroup isn't */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>) && !<a class=\"id\" href=\"#PageCgroupAcctLRU\">PageCgroupAcctLRU</a>(<a class=\"id\" href=\"#pc\">pc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_add_lru_list\">mem_cgroup_add_lru_list</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page_lru\">page_lru</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lru_lock\">lru_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"", 
"void <a class=\"id\" href=\"#mem_cgroup_move_lists\">mem_cgroup_move_lists</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#from\">from</a>, enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_del_lru_list\">mem_cgroup_del_lru_list</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_add_lru_list\">mem_cgroup_add_lru_list</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#task_in_mem_cgroup\">task_in_mem_cgroup</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, const struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#find_lock_task_mm\">find_lock_task_mm</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#try_get_mem_cgroup_from_mm\">try_get_mem_cgroup_from_mm</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#curr\">curr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We should check use_hierarchy of \"mem\" not \"curr\". Because checking</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use_hierarchy of \"curr\" here make this function true if hierarchy is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enabled in \"curr\" and \"curr\" is a child of \"mem\" in *cgroup*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hierarchy(even if use_hierarchy is disabled in \"mem\").</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#css_is_ancestor\">css_is_ancestor</a>(&amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#css\">css</a>, &amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#curr\">curr</a> == <a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#calc_inactive_ratio\">calc_inactive_ratio</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>, unsigned long *<a class=\"id\" href=\"#present_pages\">present_pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#inactive\">inactive</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#gb\">gb</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#inactive_ratio\">inactive_ratio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inactive\">inactive</a> = <a class=\"id\" href=\"#mem_cgroup_get_local_zonestat\">mem_cgroup_get_local_zonestat</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#LRU_INACTIVE_ANON\">LRU_INACTIVE_ANON</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#active\">active</a> = <a class=\"id\" href=\"#mem_cgroup_get_local_zonestat\">mem_cgroup_get_local_zonestat</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#LRU_ACTIVE_ANON\">LRU_ACTIVE_ANON</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gb\">gb</a> = (<a class=\"id\" href=\"#inactive\">inactive</a> + <a class=\"id\" href=\"#active\">active</a>) >> (30 - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gb\">gb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inactive_ratio\">inactive_ratio</a> = <a class=\"id\" href=\"#int_sqrt\">int_sqrt</a>(10 * <a class=\"id\" href=\"#gb\">gb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inactive_ratio\">inactive_ratio</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#present_pages\">present_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#present_pages\">present_pages</a>[0] = <a class=\"id\" href=\"#inactive\">inactive</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#present_pages\">present_pages</a>[1] = <a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inactive_ratio\">inactive_ratio</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#mem_cgroup_inactive_anon_is_low\">mem_cgroup_inactive_anon_is_low</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#inactive\">inactive</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#present_pages\">present_pages</a>[2];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#inactive_ratio\">inactive_ratio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inactive_ratio\">inactive_ratio</a> = <a class=\"id\" href=\"#calc_inactive_ratio\">calc_inactive_ratio</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#present_pages\">present_pages</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inactive\">inactive</a> = <a class=\"id\" href=\"#present_pages\">present_pages</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#active\">active</a> = <a class=\"id\" href=\"#present_pages\">present_pages</a>[1];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inactive\">inactive</a> * <a class=\"id\" href=\"#inactive_ratio\">inactive_ratio</a> &lt; <a class=\"id\" href=\"#active\">active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#mem_cgroup_inactive_file_is_low\">mem_cgroup_inactive_file_is_low</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#inactive\">inactive</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inactive\">inactive</a> = <a class=\"id\" href=\"#mem_cgroup_get_local_zonestat\">mem_cgroup_get_local_zonestat</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#LRU_INACTIVE_FILE\">LRU_INACTIVE_FILE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#active\">active</a> = <a class=\"id\" href=\"#mem_cgroup_get_local_zonestat\">mem_cgroup_get_local_zonestat</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#LRU_ACTIVE_FILE\">LRU_ACTIVE_FILE</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#active\">active</a> &gt; <a class=\"id\" href=\"#inactive\">inactive</a>);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#mem_cgroup_zone_nr_pages\">mem_cgroup_zone_nr_pages</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       enum <a class=\"id\" href=\"#lru_list\">lru_list</a> <a class=\"id\" href=\"#lru\">lru</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zid\">zid</a> = <a class=\"id\" href=\"#zone_idx\">zone_idx</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#mem_cgroup_zoneinfo\">mem_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zid\">zid</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#MEM_CGROUP_ZSTAT\">MEM_CGROUP_ZSTAT</a>(<a class=\"id\" href=\"#mz\">mz</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#zone_reclaim_stat\">zone_reclaim_stat</a> *<a class=\"id\" href=\"#mem_cgroup_get_reclaim_stat\">mem_cgroup_get_reclaim_stat</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zid\">zid</a> = <a class=\"id\" href=\"#zone_idx\">zone_idx</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#mem_cgroup_zoneinfo\">mem_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zid\">zid</a>);", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#zone_reclaim_stat\">zone_reclaim_stat</a> *", 
"<a class=\"id\" href=\"#mem_cgroup_get_reclaim_stat_from_page\">mem_cgroup_get_reclaim_stat_from_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_disabled\">mem_cgroup_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Used bit is set without atomic ops but after smp_wmb().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For making pc-&gt;mem_cgroup visible, insert smp_rmb() here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#page_cgroup_zoneinfo\">page_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mz\">mz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#reclaim_stat\">reclaim_stat</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#mem_cgroup_isolate_pages\">mem_cgroup_isolate_pages</a>(unsigned long <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#scanned\">scanned</a>, int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mode\">mode</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#z\">z</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem_cont\">mem_cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#active\">active</a>, int <a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_taken\">nr_taken</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#scan\">scan</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#pc_list\">pc_list</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#z\">z</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zid\">zid</a> = <a class=\"id\" href=\"#zone_idx\">zone_idx</a>(<a class=\"id\" href=\"#z\">z</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup_per_zone\">mem_cgroup_per_zone</a> *<a class=\"id\" href=\"#mz\">mz</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lru\">lru</a> = <a class=\"id\" href=\"#LRU_FILE\">LRU_FILE</a> * <a class=\"id\" href=\"#file\">file</a> + <a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mem_cont\">mem_cont</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mz\">mz</a> = <a class=\"id\" href=\"#mem_cgroup_zoneinfo\">mem_cgroup_zoneinfo</a>(<a class=\"id\" href=\"#mem_cont\">mem_cont</a>, <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zid\">zid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = &amp;<a class=\"id\" href=\"#mz\">mz</a>-><a class=\"id\" href=\"#lists\">lists</a>[<a class=\"id\" href=\"#lru\">lru</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe_reverse\">list_for_each_entry_safe_reverse</a>(<a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scan\">scan</a> >= <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__isolate_lru_page\">__isolate_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_del_lru\">mem_cgroup_del_lru</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_taken\">nr_taken</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we don't affect global LRU but rotate in our LRU */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_rotate_lru_list\">mem_cgroup_rotate_lru_list</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page_lru\">page_lru</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#scanned\">scanned</a> = <a class=\"id\" href=\"#scan\">scan</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_vmscan_memcg_isolate\">trace_mm_vmscan_memcg_isolate</a>(0, <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>, <a class=\"id\" href=\"#scan\">scan</a>, <a class=\"id\" href=\"#nr_taken\">nr_taken</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      0, 0, 0, <a class=\"id\" href=\"#mode\">mode</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_taken\">nr_taken</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mem_cgroup_from_res_counter\">mem_cgroup_from_res_counter</a>(<a class=\"id\" href=\"#counter\">counter</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#counter\">counter</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>, <a class=\"id\" href=\"#member\">member</a>)", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mem_cgroup_check_under_limit\">mem_cgroup_check_under_limit</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res_counter_check_under_limit\">res_counter_check_under_limit</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_check_under_limit\">res_counter_check_under_limit</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#memsw\">memsw</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res_counter_check_under_limit\">res_counter_check_under_limit</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#get_swappiness\">get_swappiness</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#css\">css</a>.<a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#swappiness\">swappiness</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* root ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vm_swappiness\">vm_swappiness</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#reclaim_param_lock\">reclaim_param_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swappiness\">swappiness</a> = <a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#swappiness\">swappiness</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#reclaim_param_lock\">reclaim_param_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#swappiness\">swappiness</a>;", 
"}", 
"", 
"<span class=\"comment\">/* A routine for testing mem is not under move_account */</span>", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mem_cgroup_under_move\">mem_cgroup_under_move</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unlike task_move routines, we access mc.to, mc.from not under</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mutual exclusion by cgroup_mutex. Here, we take spinlock instead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#from\">from</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#from\">from</a> == <a class=\"id\" href=\"#mem\">mem</a> || <a class=\"id\" href=\"#to\">to</a> == <a class=\"id\" href=\"#mem\">mem</a>", 
"<span class=\"ts\"/>    || (<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a> && <a class=\"id\" href=\"#css_is_ancestor\">css_is_ancestor</a>(&amp;<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#css\">css</a>, &amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>))", 
"<span class=\"ts\"/>    || (<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a> && <a class=\"id\" href=\"#css_is_ancestor\">css_is_ancestor</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#css\">css</a>,<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mem_cgroup_wait_acct_move\">mem_cgroup_wait_acct_move</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moving_task\">moving_task</a> && <a class=\"id\" href=\"#current\">current</a> != <a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moving_task\">moving_task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_under_move\">mem_cgroup_under_move</a>(<a class=\"id\" href=\"#mem\">mem</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#waitq\">waitq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* moving charge context might have finished. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#moving_task\">moving_task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#waitq\">waitq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_count_children_cb\">mem_cgroup_count_children_cb</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#val\">val</a>)++;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mem_cgroup_print_oom_info: Called from OOM with tasklist_lock held in read mode.</span>", 
"<span class=\"comment\"> * @memcg: The memory cgroup that went over limit</span>", 
"<span class=\"comment\"> * @p: Task that is going to be killed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: @memcg and @p's mem_cgroup can be different when hierarchy is</span>", 
"<span class=\"comment\"> * enabled</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mem_cgroup_print_oom_info\">mem_cgroup_print_oom_info</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#task_cgrp\">task_cgrp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#mem_cgrp\">mem_cgrp</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need a buffer in BSS, can't rely on allocations. The code relies</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the assumption that OOM is serialized for memory controller.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this assumption is broken, revisit this code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>static char <a class=\"id\" href=\"#memcg_name\">memcg_name</a>[<a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcg\">memcg</a> || !<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgrp\">mem_cgrp</a> = <a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#css\">css</a>.<a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_cgrp\">task_cgrp</a> = <a class=\"id\" href=\"#task_cgroup\">task_cgroup</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mem_cgroup_subsys_id\">mem_cgroup_subsys_id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cgroup_path\">cgroup_path</a>(<a class=\"id\" href=\"#task_cgrp\">task_cgrp</a>, <a class=\"id\" href=\"#memcg_name\">memcg_name</a>, <a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Unfortunately, we are unable to convert to a useful name</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But we'll still print out the usage information</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Task in %s killed\", <a class=\"id\" href=\"#memcg_name\">memcg_name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cgroup_path\">cgroup_path</a>(<a class=\"id\" href=\"#mem_cgrp\">mem_cgrp</a>, <a class=\"id\" href=\"#memcg_name\">memcg_name</a>, <a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Continues from above, so we don't need an KERN_ level</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" as a result of limit of %s\\n\", <a class=\"id\" href=\"#memcg_name\">memcg_name</a>);", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"memory: usage %llukB, limit %llukB, failcnt %llu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>) >> 10,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>) >> 10,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#RES_FAILCNT\">RES_FAILCNT</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"memory+swap: usage %llukB, limit %llukB, \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"failcnt %llu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>) >> 10,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>) >> 10,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#RES_FAILCNT\">RES_FAILCNT</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function returns the number of memcg under hierarchy tree. Returns</span>", 
"<span class=\"comment\"> * 1(self count) if no children.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mem_cgroup_count_children\">mem_cgroup_count_children</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a> = 0;", 
" <span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_walk_tree\">mem_cgroup_walk_tree</a>(<a class=\"id\" href=\"#mem\">mem</a>, &amp;<a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#mem_cgroup_count_children_cb\">mem_cgroup_count_children_cb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the memory (and swap, if configured) limit for a memcg.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mem_cgroup_get_limit\">mem_cgroup_get_limit</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#memsw\">memsw</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_swap_pages\">total_swap_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memsw\">memsw</a> = <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(&amp;<a class=\"id\" href=\"#memcg\">memcg</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If memsw is finite and limits the amount of swap space available</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to this memcg, return that limit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#memsw\">memsw</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Visit the first child (need not be the first child as per the ordering</span>", 
"<span class=\"comment\"> * of the cgroup list, since we track last_scanned_child) of @mem and use</span>", 
"<span class=\"comment\"> * that to reclaim free pages from.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *", 
"<a class=\"id\" href=\"#mem_cgroup_select_victim\">mem_cgroup_select_victim</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#root_mem\">root_mem</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nextid\">nextid</a>, <a class=\"id\" href=\"#found\">found</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root_mem\">root_mem</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_get\">css_get</a>(&amp;<a class=\"id\" href=\"#root_mem\">root_mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#root_mem\">root_mem</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nextid\">nextid</a> = <a class=\"id\" href=\"#root_mem\">root_mem</a>-><a class=\"id\" href=\"#last_scanned_child\">last_scanned_child</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#css_get_next\">css_get_next</a>(&amp;<a class=\"id\" href=\"#mem_cgroup_subsys\">mem_cgroup_subsys</a>, <a class=\"id\" href=\"#nextid\">nextid</a>, &amp;<a class=\"id\" href=\"#root_mem\">root_mem</a>-><a class=\"id\" href=\"#css\">css</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#found\">found</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#css\">css</a> && <a class=\"id\" href=\"#css_tryget\">css_tryget</a>(<a class=\"id\" href=\"#css\">css</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#css\">css</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Updates scanning parameter */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#root_mem\">root_mem</a>-><a class=\"id\" href=\"#reclaim_param_lock\">reclaim_param_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#css\">css</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this means start scan from ID:1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_mem\">root_mem</a>-><a class=\"id\" href=\"#last_scanned_child\">last_scanned_child</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_mem\">root_mem</a>-><a class=\"id\" href=\"#last_scanned_child\">last_scanned_child</a> = <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#root_mem\">root_mem</a>-><a class=\"id\" href=\"#reclaim_param_lock\">reclaim_param_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scan the hierarchy if needed to reclaim memory. We remember the last child</span>", 
"<span class=\"comment\"> * we reclaimed from, so that we don't end up penalizing one child extensively</span>", 
"<span class=\"comment\"> * based on its position in the children list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * root_mem is the original ancestor that we've been reclaim from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We give up and return to the caller when we visit root_mem twice.</span>", 
"<span class=\"comment\"> * (other groups can be removed while we're walking....)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If shrink==true, for avoiding to free too much, this returns immedieately.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mem_cgroup_hierarchical_reclaim\">mem_cgroup_hierarchical_reclaim</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#root_mem\">root_mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reclaim_options\">reclaim_options</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#victim\">victim</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#total\">total</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#noswap\">noswap</a> = <a class=\"id\" href=\"#reclaim_options\">reclaim_options</a> &amp; <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_NOSWAP\">MEM_CGROUP_RECLAIM_NOSWAP</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#shrink\">shrink</a> = <a class=\"id\" href=\"#reclaim_options\">reclaim_options</a> &amp; <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_SHRINK\">MEM_CGROUP_RECLAIM_SHRINK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#check_soft\">check_soft</a> = <a class=\"id\" href=\"#reclaim_options\">reclaim_options</a> &amp; <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_SOFT\">MEM_CGROUP_RECLAIM_SOFT</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#excess\">excess</a> = <a class=\"id\" href=\"#mem_cgroup_get_excess\">mem_cgroup_get_excess</a>(<a class=\"id\" href=\"#root_mem\">root_mem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If memsw_is_minimum==1, swap-out is of-no-use. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root_mem\">root_mem</a>-><a class=\"id\" href=\"#memsw_is_minimum\">memsw_is_minimum</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#noswap\">noswap</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#victim\">victim</a> = <a class=\"id\" href=\"#mem_cgroup_select_victim\">mem_cgroup_select_victim</a>(<a class=\"id\" href=\"#root_mem\">root_mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#victim\">victim</a> == <a class=\"id\" href=\"#root_mem\">root_mem</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loop\">loop</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#loop\">loop</a> >= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_all_stock_async\">drain_all_stock_async</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#loop\">loop</a> >= 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we have not been able to reclaim</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * anything, it might because there are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * no reclaimable pages under this hierarchy</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_soft\">check_soft</a> || !<a class=\"id\" href=\"#total\">total</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#victim\">victim</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We want to do more targetted reclaim.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * excess &gt;&gt; 2 is not to excessive so as to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * reclaim too much, nor too less that we keep</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * coming back to reclaim from this cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#total\">total</a> >= (<a class=\"id\" href=\"#excess\">excess</a> >> 2) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#loop\">loop</a> &gt; <a class=\"id\" href=\"#MEM_CGROUP_MAX_RECLAIM_LOOPS\">MEM_CGROUP_MAX_RECLAIM_LOOPS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#victim\">victim</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_local_usage\">mem_cgroup_local_usage</a>(<a class=\"id\" href=\"#victim\">victim</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this cgroup's local usage == 0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#victim\">victim</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we use swappiness of local cgroup */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#check_soft\">check_soft</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_shrink_node_zone\">mem_cgroup_shrink_node_zone</a>(<a class=\"id\" href=\"#victim\">victim</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#noswap\">noswap</a>, <a class=\"id\" href=\"#get_swappiness\">get_swappiness</a>(<a class=\"id\" href=\"#victim\">victim</a>), <a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#try_to_free_mem_cgroup_pages\">try_to_free_mem_cgroup_pages</a>(<a class=\"id\" href=\"#victim\">victim</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#noswap\">noswap</a>, <a class=\"id\" href=\"#get_swappiness\">get_swappiness</a>(<a class=\"id\" href=\"#victim\">victim</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#victim\">victim</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * At shrinking usage, we can't check we should stop here or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reclaim more. It's depends on callers. last_scanned_child</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will work enough for keeping fairness under tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shrink\">shrink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#check_soft\">check_soft</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res_counter_check_under_soft_limit\">res_counter_check_under_soft_limit</a>(&amp;<a class=\"id\" href=\"#root_mem\">root_mem</a>-><a class=\"id\" href=\"#res\">res</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#total\">total</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#mem_cgroup_check_under_limit\">mem_cgroup_check_under_limit</a>(<a class=\"id\" href=\"#root_mem\">root_mem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1 + <a class=\"id\" href=\"#total\">total</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#total\">total</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_oom_lock_cb\">mem_cgroup_oom_lock_cb</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#val\">val</a> = (int *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Logically, we can stop scanning immediately when we find</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a memcg is already locked. But condidering unlock ops and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * creation/removal of memcg, scan-all is simple operation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#oom_lock\">oom_lock</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#x\">x</a>, *<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check OOM-Killer is already running under our hierarchy.</span>", 
"<span class=\"comment\"> * If someone is running, return false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mem_cgroup_oom_lock\">mem_cgroup_oom_lock</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lock_count\">lock_count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_walk_tree\">mem_cgroup_walk_tree</a>(<a class=\"id\" href=\"#mem\">mem</a>, &amp;<a class=\"id\" href=\"#lock_count\">lock_count</a>, <a class=\"id\" href=\"#mem_cgroup_oom_lock_cb\">mem_cgroup_oom_lock_cb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lock_count\">lock_count</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mem_cgroup_oom_unlock_cb\">mem_cgroup_oom_unlock_cb</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When a new child is created while the hierarchy is under oom,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mem_cgroup_oom_lock() may not be called. We have to use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * atomic_add_unless() here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add_unless\">atomic_add_unless</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#oom_lock\">oom_lock</a>, -1, 0);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_oom_unlock\">mem_cgroup_oom_unlock</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_walk_tree\">mem_cgroup_walk_tree</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_oom_unlock_cb\">mem_cgroup_oom_unlock_cb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#memcg_oom_mutex\">memcg_oom_mutex</a>);", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#memcg_oom_waitq\">memcg_oom_waitq</a>);", 
"", 
"struct <a class=\"id\" href=\"#oom_wait_info\">oom_wait_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a><span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#memcg_oom_wake_function\">memcg_oom_wake_function</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#sync\">sync</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#wake_mem\">wake_mem</a> = (struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#oom_wait_info\">oom_wait_info</a> *<a class=\"id\" href=\"#oom_wait_info\">oom_wait_info</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oom_wait_info\">oom_wait_info</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#wait\">wait</a>, struct <a class=\"id\" href=\"#oom_wait_info\">oom_wait_info</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oom_wait_info\">oom_wait_info</a>-><a class=\"id\" href=\"#mem\">mem</a> == <a class=\"id\" href=\"#wake_mem\">wake_mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#wakeup\">wakeup</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* if no hierarchy, no match */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#oom_wait_info\">oom_wait_info</a>-><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a> || !<a class=\"id\" href=\"#wake_mem\">wake_mem</a>-><a class=\"id\" href=\"#use_hierarchy\">use_hierarchy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Both of oom_wait_info-&gt;mem and wake_mem are stable under us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Then we can use css_is_ancestor without taking care of RCU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#css_is_ancestor\">css_is_ancestor</a>(&amp;<a class=\"id\" href=\"#oom_wait_info\">oom_wait_info</a>-><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>, &amp;<a class=\"id\" href=\"#wake_mem\">wake_mem</a>-><a class=\"id\" href=\"#css\">css</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#css_is_ancestor\">css_is_ancestor</a>(&amp;<a class=\"id\" href=\"#wake_mem\">wake_mem</a>-><a class=\"id\" href=\"#css\">css</a>, &amp;<a class=\"id\" href=\"#oom_wait_info\">oom_wait_info</a>-><a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#wakeup\">wakeup</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#autoremove_wake_function\">autoremove_wake_function</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#sync\">sync</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#memcg_wakeup_oom\">memcg_wakeup_oom</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* for filtering, pass \"mem\" as argument. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up\">__wake_up</a>(&amp;<a class=\"id\" href=\"#memcg_oom_waitq\">memcg_oom_waitq</a>, <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>, 0, <a class=\"id\" href=\"#mem\">mem</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#memcg_oom_recover\">memcg_oom_recover</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> && <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#oom_lock\">oom_lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcg_wakeup_oom\">memcg_wakeup_oom</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * try to call OOM killer. returns false if we should exit memory-reclaim loop.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mem_cgroup_handle_oom\">mem_cgroup_handle_oom</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#oom_wait_info\">oom_wait_info</a> <a class=\"id\" href=\"#owait\">owait</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#locked\">locked</a>, <a class=\"id\" href=\"#need_to_kill\">need_to_kill</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#owait\">owait</a>.<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#owait\">owait</a>.<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#owait\">owait</a>.<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#memcg_oom_wake_function\">memcg_oom_wake_function</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#owait\">owait</a>.<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#owait\">owait</a>.<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#task_list\">task_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#need_to_kill\">need_to_kill</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* At first, try to OOM lock hierarchy under mem.*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#memcg_oom_mutex\">memcg_oom_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locked\">locked</a> = <a class=\"id\" href=\"#mem_cgroup_oom_lock\">mem_cgroup_oom_lock</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Even if signal_pending(), we can't quit charge() loop without</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * accounting. So, UNINTERRUPTIBLE is appropriate. But SIGKILL</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * under OOM is always welcomed, use TASK_KILLABLE here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#memcg_oom_waitq\">memcg_oom_waitq</a>, &amp;<a class=\"id\" href=\"#owait\">owait</a>.<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_KILLABLE\">TASK_KILLABLE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#locked\">locked</a> || <a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#oom_kill_disable\">oom_kill_disable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_to_kill\">need_to_kill</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#locked\">locked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_oom_notify\">mem_cgroup_oom_notify</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#memcg_oom_mutex\">memcg_oom_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_to_kill\">need_to_kill</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#memcg_oom_waitq\">memcg_oom_waitq</a>, &amp;<a class=\"id\" href=\"#owait\">owait</a>.<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_out_of_memory\">mem_cgroup_out_of_memory</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#memcg_oom_waitq\">memcg_oom_waitq</a>, &amp;<a class=\"id\" href=\"#owait\">owait</a>.<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#memcg_oom_mutex\">memcg_oom_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_oom_unlock\">mem_cgroup_oom_unlock</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcg_wakeup_oom\">memcg_wakeup_oom</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#memcg_oom_mutex\">memcg_oom_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a>) || <a class=\"id\" href=\"#fatal_signal_pending\">fatal_signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Give chance to dying process */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Currently used to update mapped file statistics, but the routine can be</span>", 
"<span class=\"comment\"> * generalized to update other statistics as well.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mem_cgroup_update_file_mapped\">mem_cgroup_update_file_mapped</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pc\">pc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page_cgroup\">lock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem\">mem</a> || !<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Preemption is already disabled. We can use __this_cpu_xxx</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_STAT_FILE_MAPPED\">MEM_CGROUP_STAT_FILE_MAPPED</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageCgroupFileMapped\">SetPageCgroupFileMapped</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_dec\">__this_cpu_dec</a>(<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#MEM_CGROUP_STAT_FILE_MAPPED\">MEM_CGROUP_STAT_FILE_MAPPED</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageCgroupFileMapped\">ClearPageCgroupFileMapped</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * size of first charge trial. \"32\" comes from vmscan.c's magic value.</span>", 
"<span class=\"comment\"> * TODO: maybe necessary to use big numbers in big irons.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CHARGE_SIZE\">CHARGE_SIZE</a><span class=\"ts\"/>(32 * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"struct <a class=\"id\" href=\"#memcg_stock_pcp\">memcg_stock_pcp</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#cached\">cached</a>; <span class=\"comment\">/* this never be root cgroup */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#charge\">charge</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#work\">work</a>;", 
"};", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#memcg_stock_pcp\">memcg_stock_pcp</a>, <a class=\"id\" href=\"#memcg_stock\">memcg_stock</a>);", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#memcg_drain_count\">memcg_drain_count</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to consume stocked charge on this cpu. If success, PAGE_SIZE is consumed</span>", 
"<span class=\"comment\"> * from local stock and true is returned. If the stock is 0 or charges from a</span>", 
"<span class=\"comment\"> * cgroup which is not current target, returns false. This stock will be</span>", 
"<span class=\"comment\"> * refilled.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#consume_stock\">consume_stock</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memcg_stock_pcp\">memcg_stock_pcp</a> *<a class=\"id\" href=\"#stock\">stock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stock\">stock</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#memcg_stock\">memcg_stock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> == <a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#cached\">cached</a> && <a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#charge\">charge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#charge\">charge</a> -= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>else <span class=\"comment\">/* need to call res_counter_charge */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#memcg_stock\">memcg_stock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns stocks cached in percpu to res_counter and reset cached information.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#drain_stock\">drain_stock</a>(struct <a class=\"id\" href=\"#memcg_stock_pcp\">memcg_stock_pcp</a> *<a class=\"id\" href=\"#stock\">stock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#cached\">cached</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#charge\">charge</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#charge\">charge</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#charge\">charge</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#cached\">cached</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#charge\">charge</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This must be called under preempt disabled or must be called by</span>", 
"<span class=\"comment\"> * a thread which is pinned to local cpu.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#drain_local_stock\">drain_local_stock</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memcg_stock_pcp\">memcg_stock_pcp</a> *<a class=\"id\" href=\"#stock\">stock</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#memcg_stock\">memcg_stock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drain_stock\">drain_stock</a>(<a class=\"id\" href=\"#stock\">stock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cache charges(val) which is from res_counter, to local per_cpu area.</span>", 
"<span class=\"comment\"> * This will be consumed by consume_stock() function, later.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#refill_stock\">refill_stock</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, int <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memcg_stock_pcp\">memcg_stock_pcp</a> *<a class=\"id\" href=\"#stock\">stock</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#memcg_stock\">memcg_stock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#cached\">cached</a> != <a class=\"id\" href=\"#mem\">mem</a>) { <span class=\"comment\">/* reset if necessary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_stock\">drain_stock</a>(<a class=\"id\" href=\"#stock\">stock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#cached\">cached</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#charge\">charge</a> += <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#memcg_stock\">memcg_stock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tries to drain stocked charges in other cpus. This function is asynchronous</span>", 
"<span class=\"comment\"> * and just put a work per cpu for draining localy on each cpu. Caller can</span>", 
"<span class=\"comment\"> * expects some charges will be back to res_counter later but cannot wait for</span>", 
"<span class=\"comment\"> * it.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#drain_all_stock_async\">drain_all_stock_async</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* This function is for scheduling \"drain\" in asynchronous way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The result of \"drain\" is not directly handled by callers. Then,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if someone is calling drain, we don't have to call drain more.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Anyway, WORK_STRUCT_PENDING check in queue_work_on() will catch if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there is a race. We just do loose check here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#memcg_drain_count\">memcg_drain_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/* Notify other cpus that system-wide \"drain\" is running */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#memcg_drain_count\">memcg_drain_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#memcg_stock_pcp\">memcg_stock_pcp</a> *<a class=\"id\" href=\"#stock\">stock</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#memcg_stock\">memcg_stock</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work_on\">schedule_work_on</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#stock\">stock</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
" <span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#memcg_drain_count\">memcg_drain_count</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't wait for flush_work */</span>", 
"}", 
"", 
"<span class=\"comment\">/* This is a synchronous drain interface. */</span>", 
"static void <a class=\"id\" href=\"#drain_all_stock_sync\">drain_all_stock_sync</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* called when force_empty is called */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#memcg_drain_count\">memcg_drain_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_on_each_cpu\">schedule_on_each_cpu</a>(<a class=\"id\" href=\"#drain_local_stock\">drain_local_stock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#memcg_drain_count\">memcg_drain_count</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#memcg_stock_cpu_callback\">memcg_stock_cpu_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#action\">action</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = (unsigned long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memcg_stock_pcp\">memcg_stock_pcp</a> *<a class=\"id\" href=\"#stock\">stock</a>;", 
"", 
];
xr_frag_insert('l/61/10c064ba1b80bd7cbf24fd6a0643e4ede763fb.xr', __xr_tmp);
