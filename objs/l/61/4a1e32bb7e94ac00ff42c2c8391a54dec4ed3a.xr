var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check the deviation from the watchdog clocksource. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs_nsec\">cs_nsec</a> = <a class=\"id\" href=\"#clocksource_cyc2ns\">clocksource_cyc2ns</a>((<a class=\"id\" href=\"#csnow\">csnow</a> - <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#wd_last\">wd_last</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#mult\">mult</a>, <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#shift\">shift</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#wd_last\">wd_last</a> = <a class=\"id\" href=\"#csnow\">csnow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#abs\">abs</a>(<a class=\"id\" href=\"#cs_nsec\">cs_nsec</a> - <a class=\"id\" href=\"#wd_nsec\">wd_nsec</a>) &gt; <a class=\"id\" href=\"#WATCHDOG_THRESHOLD\">WATCHDOG_THRESHOLD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clocksource_unstable\">clocksource_unstable</a>(<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#cs_nsec\">cs_nsec</a> - <a class=\"id\" href=\"#wd_nsec\">wd_nsec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLOCK_SOURCE_VALID_FOR_HRES\">CLOCK_SOURCE_VALID_FOR_HRES</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLOCK_SOURCE_IS_CONTINUOUS\">CLOCK_SOURCE_IS_CONTINUOUS</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#watchdog\">watchdog</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLOCK_SOURCE_IS_CONTINUOUS\">CLOCK_SOURCE_IS_CONTINUOUS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CLOCK_SOURCE_VALID_FOR_HRES\">CLOCK_SOURCE_VALID_FOR_HRES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We just marked the clocksource as highres-capable,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * notify the rest of the system as well so that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * transition into high-res mode:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_clock_notify\">tick_clock_notify</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cycle through CPUs to check if the CPUs stay synchronized</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to each other.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_cpu\">next_cpu</a> = <a class=\"id\" href=\"#cpumask_next\">cpumask_next</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>(), <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_cpu\">next_cpu</a> >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_cpu\">next_cpu</a> = <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#watchdog_timer\">watchdog_timer</a>.<a class=\"id\" href=\"#expires\">expires</a> += <a class=\"id\" href=\"#WATCHDOG_INTERVAL\">WATCHDOG_INTERVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer_on\">add_timer_on</a>(&amp;<a class=\"id\" href=\"#watchdog_timer\">watchdog_timer</a>, <a class=\"id\" href=\"#next_cpu\">next_cpu</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#watchdog_lock\">watchdog_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clocksource_start_watchdog\">clocksource_start_watchdog</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#watchdog_running\">watchdog_running</a> || !<a class=\"id\" href=\"#watchdog\">watchdog</a> || <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#watchdog_list\">watchdog_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_timer\">init_timer</a>(&amp;<a class=\"id\" href=\"#watchdog_timer\">watchdog_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#watchdog_timer\">watchdog_timer</a>.<a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#clocksource_watchdog\">clocksource_watchdog</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#watchdog_last\">watchdog_last</a> = <a class=\"id\" href=\"#watchdog\">watchdog</a>-><a class=\"id\" href=\"#read\">read</a>(<a class=\"id\" href=\"#watchdog\">watchdog</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#watchdog_timer\">watchdog_timer</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#WATCHDOG_INTERVAL\">WATCHDOG_INTERVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer_on\">add_timer_on</a>(&amp;<a class=\"id\" href=\"#watchdog_timer\">watchdog_timer</a>, <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#watchdog_running\">watchdog_running</a> = 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clocksource_stop_watchdog\">clocksource_stop_watchdog</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#watchdog_running\">watchdog_running</a> || (<a class=\"id\" href=\"#watchdog\">watchdog</a> && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#watchdog_list\">watchdog_list</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#watchdog_timer\">watchdog_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#watchdog_running\">watchdog_running</a> = 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clocksource_reset_watchdog\">clocksource_reset_watchdog</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cs\">cs</a>, &amp;<a class=\"id\" href=\"#watchdog_list\">watchdog_list</a>, <a class=\"id\" href=\"#wd_list\">wd_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#CLOCK_SOURCE_WATCHDOG\">CLOCK_SOURCE_WATCHDOG</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clocksource_resume_watchdog\">clocksource_resume_watchdog</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use trylock here to avoid a potential dead lock when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kgdb calls this code after the kernel has been stopped with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * watchdog_lock held. When watchdog_lock is held we just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return and accept, that the watchdog might trigger and mark</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the monitored clock source (usually TSC) unstable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This does not affect the other caller clocksource_resume()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because at this point the kernel is UP, interrupts are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disabled and nothing can hold watchdog_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#spin_trylock_irqsave\">spin_trylock_irqsave</a>(&amp;<a class=\"id\" href=\"#watchdog_lock\">watchdog_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_reset_watchdog\">clocksource_reset_watchdog</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#watchdog_lock\">watchdog_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clocksource_enqueue_watchdog\">clocksource_enqueue_watchdog</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#watchdog_lock\">watchdog_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLOCK_SOURCE_MUST_VERIFY\">CLOCK_SOURCE_MUST_VERIFY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cs is a clocksource to be watched. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#wd_list\">wd_list</a>, &amp;<a class=\"id\" href=\"#watchdog_list\">watchdog_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#CLOCK_SOURCE_WATCHDOG\">CLOCK_SOURCE_WATCHDOG</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cs is a watchdog. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLOCK_SOURCE_IS_CONTINUOUS\">CLOCK_SOURCE_IS_CONTINUOUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CLOCK_SOURCE_VALID_FOR_HRES\">CLOCK_SOURCE_VALID_FOR_HRES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pick the best watchdog. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#watchdog\">watchdog</a> || <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#rating\">rating</a> &gt; <a class=\"id\" href=\"#watchdog\">watchdog</a>-><a class=\"id\" href=\"#rating\">rating</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#watchdog\">watchdog</a> = <a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reset watchdog cycles */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clocksource_reset_watchdog\">clocksource_reset_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if the watchdog timer needs to be started. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_start_watchdog\">clocksource_start_watchdog</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#watchdog_lock\">watchdog_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clocksource_dequeue_watchdog\">clocksource_dequeue_watchdog</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#watchdog_lock\">watchdog_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLOCK_SOURCE_MUST_VERIFY\">CLOCK_SOURCE_MUST_VERIFY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cs is a watched clocksource. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#wd_list\">wd_list</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cs\">cs</a> == <a class=\"id\" href=\"#watchdog\">watchdog</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reset watchdog cycles */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clocksource_reset_watchdog\">clocksource_reset_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Current watchdog is removed. Find an alternative. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#watchdog\">watchdog</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#clocksource_list\">clocksource_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == <a class=\"id\" href=\"#cs\">cs</a> || <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLOCK_SOURCE_MUST_VERIFY\">CLOCK_SOURCE_MUST_VERIFY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#watchdog\">watchdog</a> || <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#rating\">rating</a> &gt; <a class=\"id\" href=\"#watchdog\">watchdog</a>-><a class=\"id\" href=\"#rating\">rating</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#watchdog\">watchdog</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#CLOCK_SOURCE_WATCHDOG\">CLOCK_SOURCE_WATCHDOG</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if the watchdog timer needs to be stopped. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_stop_watchdog\">clocksource_stop_watchdog</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#watchdog_lock\">watchdog_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#clocksource_watchdog_kthread\">clocksource_watchdog_kthread</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#unstable\">unstable</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#clocksource_mutex\">clocksource_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#watchdog_lock\">watchdog_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#watchdog_list\">watchdog_list</a>, <a class=\"id\" href=\"#wd_list\">wd_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLOCK_SOURCE_UNSTABLE\">CLOCK_SOURCE_UNSTABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#wd_list\">wd_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#wd_list\">wd_list</a>, &amp;<a class=\"id\" href=\"#unstable\">unstable</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if the watchdog timer needs to be stopped. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_stop_watchdog\">clocksource_stop_watchdog</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#watchdog_lock\">watchdog_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Needs to be done outside of watchdog lock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#unstable\">unstable</a>, <a class=\"id\" href=\"#wd_list\">wd_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#wd_list\">wd_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clocksource_change_rating\">__clocksource_change_rating</a>(<a class=\"id\" href=\"#cs\">cs</a>, 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#clocksource_mutex\">clocksource_mutex</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_CLOCKSOURCE_WATCHDOG */</span>", 
"", 
"static void <a class=\"id\" href=\"#clocksource_enqueue_watchdog\">clocksource_enqueue_watchdog</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLOCK_SOURCE_IS_CONTINUOUS\">CLOCK_SOURCE_IS_CONTINUOUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CLOCK_SOURCE_VALID_FOR_HRES\">CLOCK_SOURCE_VALID_FOR_HRES</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clocksource_dequeue_watchdog\">clocksource_dequeue_watchdog</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clocksource_resume_watchdog\">clocksource_resume_watchdog</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#clocksource_watchdog_kthread\">clocksource_watchdog_kthread</a>(void *<a class=\"id\" href=\"#data\">data</a>) { return 0; }", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CLOCKSOURCE_WATCHDOG */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clocksource_suspend - suspend the clocksource(s)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#clocksource_suspend\">clocksource_suspend</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_reverse\">list_for_each_entry_reverse</a>(<a class=\"id\" href=\"#cs\">cs</a>, &amp;<a class=\"id\" href=\"#clocksource_list\">clocksource_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#suspend\">suspend</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#suspend\">suspend</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clocksource_resume - resume the clocksource(s)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#clocksource_resume\">clocksource_resume</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cs\">cs</a>, &amp;<a class=\"id\" href=\"#clocksource_list\">clocksource_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#resume\">resume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#resume\">resume</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_resume_watchdog\">clocksource_resume_watchdog</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clocksource_touch_watchdog - Update watchdog</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Update the watchdog after exception contexts such as kgdb so as not</span>", 
"<span class=\"comment\"> * to incorrectly trip the watchdog. This might fail when the kernel</span>", 
"<span class=\"comment\"> * was stopped in code which holds watchdog_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#clocksource_touch_watchdog\">clocksource_touch_watchdog</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_resume_watchdog\">clocksource_resume_watchdog</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clocksource_max_deferment - Returns max time the clocksource can be deferred</span>", 
"<span class=\"comment\"> * @cs:         Pointer to clocksource</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#clocksource_max_deferment\">clocksource_max_deferment</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#max_nsecs\">max_nsecs</a>, <a class=\"id\" href=\"#max_cycles\">max_cycles</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calculate the maximum number of cycles that we can pass to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cyc2ns function without overflowing a 64-bit signed result. The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * maximum number of cycles is equal to ULLONG_MAX/cs-&gt;mult which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is equivalent to the below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * max_cycles &lt; (2^63)/cs-&gt;mult</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * max_cycles &lt; 2^(log2((2^63)/cs-&gt;mult))</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * max_cycles &lt; 2^(log2(2^63) - log2(cs-&gt;mult))</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * max_cycles &lt; 2^(63 - log2(cs-&gt;mult))</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * max_cycles &lt; 1 &lt;&lt; (63 - log2(cs-&gt;mult))</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Please note that we add 1 to the result of the log2 to account for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any rounding errors, ensure the above inequality is satisfied and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no overflow will occur.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_cycles\">max_cycles</a> = 1ULL << (63 - (<a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#mult\">mult</a>) + 1));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The actual maximum number of cycles we can defer the clocksource is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * determined by the minimum of max_cycles and cs-&gt;mask.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_cycles\">max_cycles</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#u64\">u64</a>, <a class=\"id\" href=\"#max_cycles\">max_cycles</a>, (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_nsecs\">max_nsecs</a> = <a class=\"id\" href=\"#clocksource_cyc2ns\">clocksource_cyc2ns</a>(<a class=\"id\" href=\"#max_cycles\">max_cycles</a>, <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#mult\">mult</a>, <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#shift\">shift</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To ensure that the clocksource does not wrap whilst we are idle,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * limit the time the clocksource can be deferred by 12.5%. Please</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * note a margin of 12.5% is used because this can be computed with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a shift, versus say 10% which would require division.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max_nsecs\">max_nsecs</a> - (<a class=\"id\" href=\"#max_nsecs\">max_nsecs</a> >> 5);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_ARCH_USES_GETTIMEOFFSET\">CONFIG_ARCH_USES_GETTIMEOFFSET</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clocksource_select - Select the best clocksource available</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Private function. Must hold clocksource_mutex when called.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Select the clocksource with the best rating, or the clocksource,</span>", 
"<span class=\"comment\"> * which is selected by userspace override.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#clocksource_select\">clocksource_select</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#best\">best</a>, *<a class=\"id\" href=\"#cs\">cs</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#finished_booting\">finished_booting</a> || <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#clocksource_list\">clocksource_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/* First clocksource on the list has the best rating. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#best\">best</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#clocksource_list\">clocksource_list</a>, struct <a class=\"id\" href=\"#clocksource\">clocksource</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for the override clocksource. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cs\">cs</a>, &amp;<a class=\"id\" href=\"#clocksource_list\">clocksource_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#override_name\">override_name</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check to make sure we don't switch to a non-highres</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * capable clocksource if the tick code is in oneshot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mode (highres or nohz)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLOCK_SOURCE_VALID_FOR_HRES\">CLOCK_SOURCE_VALID_FOR_HRES</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tick_oneshot_mode_active\">tick_oneshot_mode_active</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Override clocksource cannot be used. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Override clocksource %s is not \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"HRT compatible. Cannot switch while in \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"HRT/NOHZ mode\\n\", <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#override_name\">override_name</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Override clocksource can be used. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best\">best</a> = <a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#curr_clocksource\">curr_clocksource</a> != <a class=\"id\" href=\"#best\">best</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Switching to clocksource %s\\n\", <a class=\"id\" href=\"#best\">best</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr_clocksource\">curr_clocksource</a> = <a class=\"id\" href=\"#best\">best</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timekeeping_notify\">timekeeping_notify</a>(<a class=\"id\" href=\"#curr_clocksource\">curr_clocksource</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_ARCH_USES_GETTIMEOFFSET */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clocksource_select\">clocksource_select</a>(void) { }", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * clocksource_done_booting - Called near the end of core bootup</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Hack to avoid lots of clocksource churn at boot time.</span>", 
"<span class=\"comment\"> * We use fs_initcall because we want this to start before</span>", 
"<span class=\"comment\"> * device_initcall but after subsys_initcall.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#clocksource_done_booting\">clocksource_done_booting</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#clocksource_mutex\">clocksource_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr_clocksource\">curr_clocksource</a> = <a class=\"id\" href=\"#clocksource_default_clock\">clocksource_default_clock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#clocksource_mutex\">clocksource_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finished_booting\">finished_booting</a> = 1;", 
];
xr_frag_insert('l/61/4a1e32bb7e94ac00ff42c2c8391a54dec4ed3a.xr', __xr_tmp);
