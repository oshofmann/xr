var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_BRIDGE_NETFILTER_H\">__LINUX_BRIDGE_NETFILTER_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_BRIDGE_NETFILTER_H\">__LINUX_BRIDGE_NETFILTER_H</a>", 
"", 
"<span class=\"comment\">/* bridge-specific defines for netfilter. </span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netfilter\">netfilter</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_ether\">if_ether</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_vlan\">if_vlan</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_pppox\">if_pppox</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Bridge Hooks */</span>", 
"<span class=\"comment\">/* After promisc drops, checksum checks. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_BR_PRE_ROUTING\">NF_BR_PRE_ROUTING</a><span class=\"ts\"/>0", 
"<span class=\"comment\">/* If the packet is destined for this box. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_BR_LOCAL_IN\">NF_BR_LOCAL_IN</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"<span class=\"comment\">/* If the packet is destined for another interface. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_BR_FORWARD\">NF_BR_FORWARD</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"<span class=\"comment\">/* Packets coming from a local process. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_BR_LOCAL_OUT\">NF_BR_LOCAL_OUT</a><span class=\"ts\"/><span class=\"ts\"/>3", 
"<span class=\"comment\">/* Packets about to hit the wire. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_BR_POST_ROUTING\">NF_BR_POST_ROUTING</a><span class=\"ts\"/>4", 
"<span class=\"comment\">/* Not really a hook, but used for the ebtables broute table */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_BR_BROUTING\">NF_BR_BROUTING</a><span class=\"ts\"/><span class=\"ts\"/>5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_BR_NUMHOOKS\">NF_BR_NUMHOOKS</a><span class=\"ts\"/><span class=\"ts\"/>6", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"enum <a class=\"id\" href=\"#nf_br_hook_priorities\">nf_br_hook_priorities</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_BR_PRI_FIRST\">NF_BR_PRI_FIRST</a> = <a class=\"id\" href=\"#INT_MIN\">INT_MIN</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_BR_PRI_NAT_DST_BRIDGED\">NF_BR_PRI_NAT_DST_BRIDGED</a> = -300,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_BR_PRI_FILTER_BRIDGED\">NF_BR_PRI_FILTER_BRIDGED</a> = -200,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_BR_PRI_BRNF\">NF_BR_PRI_BRNF</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_BR_PRI_NAT_DST_OTHER\">NF_BR_PRI_NAT_DST_OTHER</a> = 100,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_BR_PRI_FILTER_OTHER\">NF_BR_PRI_FILTER_OTHER</a> = 200,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_BR_PRI_NAT_SRC\">NF_BR_PRI_NAT_SRC</a> = 300,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_BR_PRI_LAST\">NF_BR_PRI_LAST</a> = <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BRIDGE_NETFILTER\">CONFIG_BRIDGE_NETFILTER</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BRNF_PKT_TYPE\">BRNF_PKT_TYPE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x01", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BRNF_BRIDGED_DNAT\">BRNF_BRIDGED_DNAT</a><span class=\"ts\"/><span class=\"ts\"/>0x02", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BRNF_BRIDGED\">BRNF_BRIDGED</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x04", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BRNF_NF_BRIDGE_PREROUTING\">BRNF_NF_BRIDGE_PREROUTING</a><span class=\"ts\"/>0x08", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BRNF_8021Q\">BRNF_8021Q</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BRNF_PPPoE\">BRNF_PPPoE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x20", 
"", 
"<span class=\"comment\">/* Only used in br_forward.c */</span>", 
"extern int <a class=\"id\" href=\"#nf_bridge_copy_header\">nf_bridge_copy_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#nf_bridge_maybe_copy_header\">nf_bridge_maybe_copy_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; (<a class=\"id\" href=\"#BRNF_BRIDGED\">BRNF_BRIDGED</a> | <a class=\"id\" href=\"#BRNF_BRIDGED_DNAT\">BRNF_BRIDGED_DNAT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#nf_bridge_copy_header\">nf_bridge_copy_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"  <span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#nf_bridge_encap_header_len\">nf_bridge_encap_header_len</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#__cpu_to_be16\">__cpu_to_be16</a>(<a class=\"id\" href=\"#ETH_P_8021Q\">ETH_P_8021Q</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VLAN_HLEN\">VLAN_HLEN</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#__cpu_to_be16\">__cpu_to_be16</a>(<a class=\"id\" href=\"#ETH_P_PPP_SES\">ETH_P_PPP_SES</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PPPOE_SES_HLEN\">PPPOE_SES_HLEN</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#nf_bridge_mtu_reduction\">nf_bridge_mtu_reduction</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#BRNF_PPPoE\">BRNF_PPPoE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PPPOE_SES_HLEN\">PPPOE_SES_HLEN</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#br_handle_frame_finish\">br_handle_frame_finish</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"comment\">/* Only used in br_device.c */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#br_nf_pre_routing_finish_bridge_slow\">br_nf_pre_routing_finish_bridge_slow</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nf_bridge_info\">nf_bridge_info</a> *<a class=\"id\" href=\"#nf_bridge\">nf_bridge</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_pull\">skb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>-><a class=\"id\" href=\"#mask\">mask</a> ^= <a class=\"id\" href=\"#BRNF_BRIDGED_DNAT\">BRNF_BRIDGED_DNAT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_copy_to_linear_data_offset\">skb_copy_to_linear_data_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>, -(<a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>-<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>-<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>-><a class=\"id\" href=\"#physindev\">physindev</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#br_handle_frame_finish\">br_handle_frame_finish</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/* This is called by the IP fragmenting code and it ensures there is</span>", 
"<span class=\"comment\"> * enough room for the encapsulating header (if there is one). */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#nf_bridge_pad\">nf_bridge_pad</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#nf_bridge_encap_header_len\">nf_bridge_encap_header_len</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#bridge_skb_cb\">bridge_skb_cb</a> {", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#ipv4\">ipv4</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#daddr\">daddr</a>;", 
"};", 
"", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nf_bridge_maybe_copy_header\">nf_bridge_maybe_copy_header</a>(<a class=\"id\" href=\"#skb\">skb</a>)<span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nf_bridge_pad\">nf_bridge_pad</a>(<a class=\"id\" href=\"#skb\">skb</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_BRIDGE_NETFILTER */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/61/5b50b671616b2813e11a9db1c384086acd71e8.xr', __xr_tmp);
