var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * INET<span class=\"ts\"/><span class=\"ts\"/>An implementation of the TCP/IP protocol suite for the LINUX</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>operating system.  INET is implemented using the  BSD Socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interface as the means of communication with the user level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Implementation of the Transmission Control Protocol(TCP).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Ross Biro</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Mark Evans, &lt;evansmp@uhura.aston.ac.uk&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Corey Minyard &lt;wf-rch!minyard@relay.EU.net&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Florian La Roche, &lt;flla@stud.uni-sb.de&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Charles Hedrick, &lt;hedrick@klinzhai.rutgers.edu&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Linus Torvalds, &lt;torvalds@cs.helsinki.fi&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox, &lt;gw4pts@gw4pts.ampr.org&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Matthew Dillon, &lt;dillon@apollo.west.oic.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Arnt Gulbrandsen, &lt;agulbra@nvg.unit.no&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jorge Cwik, &lt;jorge@laser.satlink.net&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Changes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Pedro Roque<span class=\"ts\"/>:<span class=\"ts\"/>Fast Retransmit/Recovery.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Two receive queues.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Retransmit queue handled by TCP.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Better retransmit timer handling.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>New congestion avoidance.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Header prediction.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Variable renaming.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Eric<span class=\"ts\"/><span class=\"ts\"/>:<span class=\"ts\"/>Fast Retransmit.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Randy Scott<span class=\"ts\"/>:<span class=\"ts\"/>MSS option defines.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Eric Schenk<span class=\"ts\"/>:<span class=\"ts\"/>Fixes to slow start algorithm.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Eric Schenk<span class=\"ts\"/>:<span class=\"ts\"/>Yet another double ACK bug.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Eric Schenk<span class=\"ts\"/>:<span class=\"ts\"/>Delayed ACK bug fixes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Eric Schenk<span class=\"ts\"/>:<span class=\"ts\"/>Floyd style fast retrans war avoidance.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>David S. Miller<span class=\"ts\"/>:<span class=\"ts\"/>Don't allow zero congestion window.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Eric Schenk<span class=\"ts\"/>:<span class=\"ts\"/>Fix retransmitter so that it sends</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>next packet on ack of previous packet.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen<span class=\"ts\"/>:<span class=\"ts\"/>Moved open_request checking here</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>and process RSTs for open_requests.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen<span class=\"ts\"/>:<span class=\"ts\"/>Better prune_queue, and other fixes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andrey Savochkin:<span class=\"ts\"/>Fix RTT measurements in the presence of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>timestamps.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andrey Savochkin:<span class=\"ts\"/>Check sequence numbers correctly when</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>removing SACKs due to in sequence incoming</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>data segments.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen:<span class=\"ts\"/><span class=\"ts\"/>Make sure we never ack data there is not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enough room for. Also make this condition</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>a fatal error if it might still happen.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen:<span class=\"ts\"/><span class=\"ts\"/>Add tcp_measure_rcv_mss to make</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>connections with MSS&lt;min(MTU,ann. MSS)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>work without delayed acks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen:<span class=\"ts\"/><span class=\"ts\"/>Process packets with PSH set in the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>fast path.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>J Hadi Salim:<span class=\"ts\"/><span class=\"ts\"/>ECN support</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/> <span class=\"ts\"/>Andrei Gurtov,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Pasi Sarolahti,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Panu Kuhlberg:<span class=\"ts\"/><span class=\"ts\"/>Experimental audit of TCP (re)transmission</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>engine. Lots of bugs are found.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Pasi Sarolahti:<span class=\"ts\"/><span class=\"ts\"/>F-RTO for dealing with spurious RTOs</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#tcp\">tcp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#inet_common\">inet_common</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipsec\">ipsec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unaligned\">unaligned</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netdma\">netdma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"int <a class=\"id\" href=\"#sysctl_tcp_timestamps\">sysctl_tcp_timestamps</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"int <a class=\"id\" href=\"#sysctl_tcp_window_scaling\">sysctl_tcp_window_scaling</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"int <a class=\"id\" href=\"#sysctl_tcp_sack\">sysctl_tcp_sack</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"int <a class=\"id\" href=\"#sysctl_tcp_fack\">sysctl_tcp_fack</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"int <a class=\"id\" href=\"#sysctl_tcp_reordering\">sysctl_tcp_reordering</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#TCP_FASTRETRANS_THRESH\">TCP_FASTRETRANS_THRESH</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sysctl_tcp_reordering\">sysctl_tcp_reordering</a>);", 
"int <a class=\"id\" href=\"#sysctl_tcp_ecn\">sysctl_tcp_ecn</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 2;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sysctl_tcp_ecn\">sysctl_tcp_ecn</a>);", 
"int <a class=\"id\" href=\"#sysctl_tcp_dsack\">sysctl_tcp_dsack</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"int <a class=\"id\" href=\"#sysctl_tcp_app_win\">sysctl_tcp_app_win</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 31;", 
"int <a class=\"id\" href=\"#sysctl_tcp_adv_win_scale\">sysctl_tcp_adv_win_scale</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 2;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sysctl_tcp_adv_win_scale\">sysctl_tcp_adv_win_scale</a>);", 
"", 
"int <a class=\"id\" href=\"#sysctl_tcp_stdurg\">sysctl_tcp_stdurg</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_rfc1337\">sysctl_tcp_rfc1337</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_max_orphans\">sysctl_tcp_max_orphans</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#NR_FILE\">NR_FILE</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_frto\">sysctl_tcp_frto</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 2;", 
"int <a class=\"id\" href=\"#sysctl_tcp_frto_response\">sysctl_tcp_frto_response</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_nometrics_save\">sysctl_tcp_nometrics_save</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"int <a class=\"id\" href=\"#sysctl_tcp_thin_dupack\">sysctl_tcp_thin_dupack</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"int <a class=\"id\" href=\"#sysctl_tcp_moderate_rcvbuf\">sysctl_tcp_moderate_rcvbuf</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"int <a class=\"id\" href=\"#sysctl_tcp_abc\">sysctl_tcp_abc</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_DATA\">FLAG_DATA</a><span class=\"ts\"/><span class=\"ts\"/>0x01 <span class=\"comment\">/* Incoming frame contained data.<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_WIN_UPDATE\">FLAG_WIN_UPDATE</a><span class=\"ts\"/><span class=\"ts\"/>0x02 <span class=\"comment\">/* Incoming ACK was a window update.<span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_DATA_ACKED\">FLAG_DATA_ACKED</a><span class=\"ts\"/><span class=\"ts\"/>0x04 <span class=\"comment\">/* This ACK acknowledged new data.<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_RETRANS_DATA_ACKED\">FLAG_RETRANS_DATA_ACKED</a><span class=\"ts\"/>0x08 <span class=\"comment\">/* \"\" \"\" some of which was retransmitted.<span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_SYN_ACKED\">FLAG_SYN_ACKED</a><span class=\"ts\"/><span class=\"ts\"/>0x10 <span class=\"comment\">/* This ACK acknowledged SYN.<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_DATA_SACKED\">FLAG_DATA_SACKED</a><span class=\"ts\"/>0x20 <span class=\"comment\">/* New SACK.<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_ECE\">FLAG_ECE</a><span class=\"ts\"/><span class=\"ts\"/>0x40 <span class=\"comment\">/* ECE in this ACK<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_DATA_LOST\">FLAG_DATA_LOST</a><span class=\"ts\"/><span class=\"ts\"/>0x80 <span class=\"comment\">/* SACK detected data lossage.<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_SLOWPATH\">FLAG_SLOWPATH</a><span class=\"ts\"/><span class=\"ts\"/>0x100 <span class=\"comment\">/* Do not skip RFC checks for window update.*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_ONLY_ORIG_SACKED\">FLAG_ONLY_ORIG_SACKED</a><span class=\"ts\"/>0x200 <span class=\"comment\">/* SACKs only non-rexmit sent before RTO */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_SND_UNA_ADVANCED\">FLAG_SND_UNA_ADVANCED</a><span class=\"ts\"/>0x400 <span class=\"comment\">/* Snd_una was changed (!= FLAG_DATA_ACKED) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_DSACKING_ACK\">FLAG_DSACKING_ACK</a><span class=\"ts\"/>0x800 <span class=\"comment\">/* SACK blocks contained D-SACK info */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_NONHEAD_RETRANS_ACKED\">FLAG_NONHEAD_RETRANS_ACKED</a><span class=\"ts\"/>0x1000 <span class=\"comment\">/* Non-head rexmitted data was ACKed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_SACK_RENEGING\">FLAG_SACK_RENEGING</a><span class=\"ts\"/>0x2000 <span class=\"comment\">/* snd_una advanced to a sacked seq */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_ACKED\">FLAG_ACKED</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#FLAG_DATA_ACKED\">FLAG_DATA_ACKED</a>|<a class=\"id\" href=\"#FLAG_SYN_ACKED\">FLAG_SYN_ACKED</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_NOT_DUP\">FLAG_NOT_DUP</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#FLAG_DATA\">FLAG_DATA</a>|<a class=\"id\" href=\"#FLAG_WIN_UPDATE\">FLAG_WIN_UPDATE</a>|<a class=\"id\" href=\"#FLAG_ACKED\">FLAG_ACKED</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_CA_ALERT\">FLAG_CA_ALERT</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#FLAG_DATA_SACKED\">FLAG_DATA_SACKED</a>|<a class=\"id\" href=\"#FLAG_ECE\">FLAG_ECE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_FORWARD_PROGRESS\">FLAG_FORWARD_PROGRESS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#FLAG_ACKED\">FLAG_ACKED</a>|<a class=\"id\" href=\"#FLAG_DATA_SACKED\">FLAG_DATA_SACKED</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_ANY_PROGRESS\">FLAG_ANY_PROGRESS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#FLAG_FORWARD_PROGRESS\">FLAG_FORWARD_PROGRESS</a>|<a class=\"id\" href=\"#FLAG_SND_UNA_ADVANCED\">FLAG_SND_UNA_ADVANCED</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TCP_REMNANT\">TCP_REMNANT</a> (<a class=\"id\" href=\"#TCP_FLAG_FIN\">TCP_FLAG_FIN</a>|<a class=\"id\" href=\"#TCP_FLAG_URG\">TCP_FLAG_URG</a>|<a class=\"id\" href=\"#TCP_FLAG_SYN\">TCP_FLAG_SYN</a>|<a class=\"id\" href=\"#TCP_FLAG_PSH\">TCP_FLAG_PSH</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TCP_HP_BITS\">TCP_HP_BITS</a> (~(<a class=\"id\" href=\"#TCP_RESERVED_BITS\">TCP_RESERVED_BITS</a>|<a class=\"id\" href=\"#TCP_FLAG_PSH\">TCP_FLAG_PSH</a>))", 
"", 
"<span class=\"comment\">/* Adapt the MSS value used to make delayed ack decision to the</span>", 
"<span class=\"comment\"> * real world.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_measure_rcv_mss\">tcp_measure_rcv_mss</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>const unsigned int <a class=\"id\" href=\"#lss\">lss</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#last_seg_size\">last_seg_size</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#last_seg_size\">last_seg_size</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* skb-&gt;len may jitter because of SACKs, even if peer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sends good full-sized frames.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a> ? : <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#rcv_mss\">rcv_mss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#rcv_mss\">rcv_mss</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Otherwise, we make more careful check taking into account,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that SACKs block is variable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * \"len\" is invariant segment length, including TCP header.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb_transport_header\">skb_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#TCP_MSS_DEFAULT\">TCP_MSS_DEFAULT</a> + sizeof(struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <span class=\"comment\">/* If PSH is not set, packet should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>     * full sized, provided peer TCP is not badly broken.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>     * This observation (if it is correct 8)) allows</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>     * to handle super-low mtu links fairly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>     */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#TCP_MIN_MSS\">TCP_MIN_MSS</a> + sizeof(struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     !(<a class=\"id\" href=\"#tcp_flag_word\">tcp_flag_word</a>(<a class=\"id\" href=\"#tcp_hdr\">tcp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)) &amp; <a class=\"id\" href=\"#TCP_REMNANT\">TCP_REMNANT</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Subtract also invariant (if peer is RFC compliant),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * tcp header plus fixed timestamp option length.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Resulting \"len\" is MSS free of SACK jitter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#tcp_header_len\">tcp_header_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#last_seg_size\">last_seg_size</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == <a class=\"id\" href=\"#lss\">lss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#rcv_mss\">rcv_mss</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#pending\">pending</a> &amp; <a class=\"id\" href=\"#ICSK_ACK_PUSHED\">ICSK_ACK_PUSHED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#pending\">pending</a> |= <a class=\"id\" href=\"#ICSK_ACK_PUSHED2\">ICSK_ACK_PUSHED2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#pending\">pending</a> |= <a class=\"id\" href=\"#ICSK_ACK_PUSHED\">ICSK_ACK_PUSHED</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_incr_quickack\">tcp_incr_quickack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#quickacks\">quickacks</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#rcv_wnd\">rcv_wnd</a> / (2 * <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#rcv_mss\">rcv_mss</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#quickacks\">quickacks</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quickacks\">quickacks</a> = 2;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#quickacks\">quickacks</a> &gt; <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#quick\">quick</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#quick\">quick</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#quickacks\">quickacks</a>, <a class=\"id\" href=\"#TCP_MAX_QUICKACKS\">TCP_MAX_QUICKACKS</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#tcp_enter_quickack_mode\">tcp_enter_quickack_mode</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_incr_quickack\">tcp_incr_quickack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#pingpong\">pingpong</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a> = <a class=\"id\" href=\"#TCP_ATO_MIN\">TCP_ATO_MIN</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Send ACKs quickly, if \"quick\" count is not exhausted</span>", 
"<span class=\"comment\"> * and the session is not interactive.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_in_quickack_mode\">tcp_in_quickack_mode</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#quick\">quick</a> && !<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#pingpong\">pingpong</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#TCP_ECN_queue_cwr\">TCP_ECN_queue_cwr</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#ecn_flags\">ecn_flags</a> &amp; <a class=\"id\" href=\"#TCP_ECN_OK\">TCP_ECN_OK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#ecn_flags\">ecn_flags</a> |= <a class=\"id\" href=\"#TCP_ECN_QUEUE_CWR\">TCP_ECN_QUEUE_CWR</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#TCP_ECN_accept_cwr\">TCP_ECN_accept_cwr</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_hdr\">tcp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#cwr\">cwr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#ecn_flags\">ecn_flags</a> &= ~<a class=\"id\" href=\"#TCP_ECN_DEMAND_CWR\">TCP_ECN_DEMAND_CWR</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#TCP_ECN_withdraw_cwr\">TCP_ECN_withdraw_cwr</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#ecn_flags\">ecn_flags</a> &= ~<a class=\"id\" href=\"#TCP_ECN_DEMAND_CWR\">TCP_ECN_DEMAND_CWR</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#TCP_ECN_check_ce\">TCP_ECN_check_ce</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#ecn_flags\">ecn_flags</a> &amp; <a class=\"id\" href=\"#TCP_ECN_OK\">TCP_ECN_OK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#INET_ECN_is_ce\">INET_ECN_is_ce</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#ecn_flags\">ecn_flags</a> |= <a class=\"id\" href=\"#TCP_ECN_DEMAND_CWR\">TCP_ECN_DEMAND_CWR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Funny extension: if ECT is not set on a segment,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it is surely retransmit. It is not in ECN RFC,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but Linux follows this rule. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#INET_ECN_is_not_ect\">INET_ECN_is_not_ect</a>((<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_enter_quickack_mode\">tcp_enter_quickack_mode</a>((struct <a class=\"id\" href=\"#sock\">sock</a> *)<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#TCP_ECN_rcv_synack\">TCP_ECN_rcv_synack</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#th\">th</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#ecn_flags\">ecn_flags</a> &amp; <a class=\"id\" href=\"#TCP_ECN_OK\">TCP_ECN_OK</a>) && (!<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#ece\">ece</a> || <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#cwr\">cwr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#ecn_flags\">ecn_flags</a> &= ~<a class=\"id\" href=\"#TCP_ECN_OK\">TCP_ECN_OK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#TCP_ECN_rcv_syn\">TCP_ECN_rcv_syn</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#th\">th</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#ecn_flags\">ecn_flags</a> &amp; <a class=\"id\" href=\"#TCP_ECN_OK\">TCP_ECN_OK</a>) && (!<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#ece\">ece</a> || !<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#cwr\">cwr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#ecn_flags\">ecn_flags</a> &= ~<a class=\"id\" href=\"#TCP_ECN_OK\">TCP_ECN_OK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#TCP_ECN_rcv_ecn_echo\">TCP_ECN_rcv_ecn_echo</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#th\">th</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#ece\">ece</a> && !<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#syn\">syn</a> && (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#ecn_flags\">ecn_flags</a> &amp; <a class=\"id\" href=\"#TCP_ECN_OK\">TCP_ECN_OK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Buffer size and advertised window tuning.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1. Tuning sk-&gt;sk_sndbuf, when connection enters established state.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#tcp_fixup_sndbuf\">tcp_fixup_sndbuf</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sndmem\">sndmem</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#mss_clamp\">mss_clamp</a> + <a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a> + 16 +", 
"<span class=\"ts\"/><span class=\"ts\"/>     sizeof(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a> &lt; 3 * <a class=\"id\" href=\"#sndmem\">sndmem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a> = <a class=\"id\" href=\"#min\">min</a>(3 * <a class=\"id\" href=\"#sndmem\">sndmem</a>, <a class=\"id\" href=\"#sysctl_tcp_wmem\">sysctl_tcp_wmem</a>[2]);", 
"}", 
"", 
"<span class=\"comment\">/* 2. Tuning advertised window (window_clamp, rcv_ssthresh)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All tcp_full_space() is split to two parts: \"network\" buffer, allocated</span>", 
"<span class=\"comment\"> * forward and advertised in receiver window (tp-&gt;rcv_wnd) and</span>", 
"<span class=\"comment\"> * \"application buffer\", required to isolate scheduling/application</span>", 
"<span class=\"comment\"> * latencies from network.</span>", 
"<span class=\"comment\"> * window_clamp is maximal advertised window. It can be less than</span>", 
"<span class=\"comment\"> * tcp_full_space(), in this case tcp_full_space() - window_clamp</span>", 
"<span class=\"comment\"> * is reserved for \"application\" buffer. The less window_clamp is</span>", 
"<span class=\"comment\"> * the smoother our behaviour from viewpoint of network, but the lower</span>", 
"<span class=\"comment\"> * throughput and the higher sensitivity of the connection to losses. 8)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * rcv_ssthresh is more strict window_clamp used at \"slow start\"</span>", 
"<span class=\"comment\"> * phase to predict further behaviour of this connection.</span>", 
"<span class=\"comment\"> * It is used for two goals:</span>", 
"<span class=\"comment\"> * - to enforce header prediction at sender, even when application</span>", 
"<span class=\"comment\"> *   requires some significant \"application buffer\". It is check #1.</span>", 
"<span class=\"comment\"> * - to prevent pruning of receive queue because of misprediction</span>", 
"<span class=\"comment\"> *   of receiver window. Check #2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The scheme does not work when sender sends good segments opening</span>", 
"<span class=\"comment\"> * window and then starts to feed us spaghetti. But it should work</span>", 
"<span class=\"comment\"> * in common situations. Otherwise, we have to rely on queue collapsing.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Slow part of check#2. */</span>", 
"static int <a class=\"id\" href=\"#__tcp_grow_window\">__tcp_grow_window</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Optimize this! */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#truesize\">truesize</a> = <a class=\"id\" href=\"#tcp_win_from_space\">tcp_win_from_space</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>) >> 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#window\">window</a> = <a class=\"id\" href=\"#tcp_win_from_space\">tcp_win_from_space</a>(<a class=\"id\" href=\"#sysctl_tcp_rmem\">sysctl_tcp_rmem</a>[2]) >> 1;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a> <= <a class=\"id\" href=\"#window\">window</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#truesize\">truesize</a> <= <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 2 * <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#rcv_mss\">rcv_mss</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#truesize\">truesize</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#window\">window</a> >>= 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_grow_window\">tcp_grow_window</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check #1 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a> &&", 
"<span class=\"ts\"/>    (int)<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a> &lt; <a class=\"id\" href=\"#tcp_space\">tcp_space</a>(<a class=\"id\" href=\"#sk\">sk</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#tcp_memory_pressure\">tcp_memory_pressure</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#incr\">incr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check #2. Increase window, if skb with such overhead</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will fit to rcvbuf in future.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_win_from_space\">tcp_win_from_space</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>) <= <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#incr\">incr</a> = 2 * <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#incr\">incr</a> = <a class=\"id\" href=\"#__tcp_grow_window\">__tcp_grow_window</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#incr\">incr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a> + <a class=\"id\" href=\"#incr\">incr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#quick\">quick</a> |= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* 3. Tuning rcvbuf, when connection enters established state. */</span>", 
"", 
"static void <a class=\"id\" href=\"#tcp_fixup_rcvbuf\">tcp_fixup_rcvbuf</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rcvmem\">rcvmem</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a> + <a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a> + 16 + sizeof(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try to select rcvbuf so that 4 mss-sized segments</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will fit to window and corresponding skbs will fit to our rcvbuf.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (was 3; 4 is minimum to allow fast retransmit to work.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#tcp_win_from_space\">tcp_win_from_space</a>(<a class=\"id\" href=\"#rcvmem\">rcvmem</a>) &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcvmem\">rcvmem</a> += 128;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvbuf\">sk_rcvbuf</a> &lt; 4 * <a class=\"id\" href=\"#rcvmem\">rcvmem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvbuf\">sk_rcvbuf</a> = <a class=\"id\" href=\"#min\">min</a>(4 * <a class=\"id\" href=\"#rcvmem\">rcvmem</a>, <a class=\"id\" href=\"#sysctl_tcp_rmem\">sysctl_tcp_rmem</a>[2]);", 
"}", 
"", 
"<span class=\"comment\">/* 4. Try to fixup all. It is made immediately after connection enters</span>", 
"<span class=\"comment\"> *    established state.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_init_buffer_space\">tcp_init_buffer_space</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maxwin\">maxwin</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_userlocks\">sk_userlocks</a> &amp; <a class=\"id\" href=\"#SOCK_RCVBUF_LOCK\">SOCK_RCVBUF_LOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_fixup_rcvbuf\">tcp_fixup_rcvbuf</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_userlocks\">sk_userlocks</a> &amp; <a class=\"id\" href=\"#SOCK_SNDBUF_LOCK\">SOCK_SNDBUF_LOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_fixup_sndbuf\">tcp_fixup_sndbuf</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcvq_space\">rcvq_space</a>.<a class=\"id\" href=\"#space\">space</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_wnd\">rcv_wnd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxwin\">maxwin</a> = <a class=\"id\" href=\"#tcp_full_space\">tcp_full_space</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a> >= <a class=\"id\" href=\"#maxwin\">maxwin</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a> = <a class=\"id\" href=\"#maxwin\">maxwin</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_tcp_app_win\">sysctl_tcp_app_win</a> && <a class=\"id\" href=\"#maxwin\">maxwin</a> &gt; 4 * <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#maxwin\">maxwin</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#maxwin\">maxwin</a> >> <a class=\"id\" href=\"#sysctl_tcp_app_win\">sysctl_tcp_app_win</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       4 * <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Force reservation of one segment. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_tcp_app_win\">sysctl_tcp_app_win</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a> &gt; 2 * <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a> + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a> &gt; <a class=\"id\" href=\"#maxwin\">maxwin</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a> = <a class=\"id\" href=\"#max\">max</a>(2 * <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>, <a class=\"id\" href=\"#maxwin\">maxwin</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_stamp\">snd_cwnd_stamp</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"}", 
"", 
"<span class=\"comment\">/* 5. Recalculate window clamp after socket hit its memory bounds. */</span>", 
"static void <a class=\"id\" href=\"#tcp_clamp_window\">tcp_clamp_window</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#quick\">quick</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvbuf\">sk_rcvbuf</a> &lt; <a class=\"id\" href=\"#sysctl_tcp_rmem\">sysctl_tcp_rmem</a>[2] &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_userlocks\">sk_userlocks</a> &amp; <a class=\"id\" href=\"#SOCK_RCVBUF_LOCK\">SOCK_RCVBUF_LOCK</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#tcp_memory_pressure\">tcp_memory_pressure</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#tcp_memory_allocated\">tcp_memory_allocated</a>) &lt; <a class=\"id\" href=\"#sysctl_tcp_mem\">sysctl_tcp_mem</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvbuf\">sk_rcvbuf</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rmem_alloc\">sk_rmem_alloc</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sysctl_tcp_rmem\">sysctl_tcp_rmem</a>[2]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rmem_alloc\">sk_rmem_alloc</a>) &gt; <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvbuf\">sk_rcvbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a>, 2U * <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Initialize RCV_MSS value.</span>", 
"<span class=\"comment\"> * RCV_MSS is an our guess about MSS used by the peer.</span>", 
"<span class=\"comment\"> * We haven't any direct information about the MSS.</span>", 
"<span class=\"comment\"> * It's better to underestimate the RCV_MSS rather than overestimate.</span>", 
"<span class=\"comment\"> * Overestimations make us ACKing less frequently than needed.</span>", 
"<span class=\"comment\"> * Underestimations are more easy to detect and fix by tcp_measure_rcv_mss().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_initialize_rcv_mss\">tcp_initialize_rcv_mss</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hint\">hint</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned int, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mss_cache\">mss_cache</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hint\">hint</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#hint\">hint</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_wnd\">rcv_wnd</a> / 2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hint\">hint</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#hint\">hint</a>, <a class=\"id\" href=\"#TCP_MSS_DEFAULT\">TCP_MSS_DEFAULT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hint\">hint</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#hint\">hint</a>, <a class=\"id\" href=\"#TCP_MIN_MSS\">TCP_MIN_MSS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#rcv_mss\">rcv_mss</a> = <a class=\"id\" href=\"#hint\">hint</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_initialize_rcv_mss\">tcp_initialize_rcv_mss</a>);", 
"", 
"<span class=\"comment\">/* Receiver \"autotuning\" code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The algorithm for RTT estimation w/o timestamps is based on</span>", 
"<span class=\"comment\"> * Dynamic Right-Sizing (DRS) by Wu Feng and Mike Fisk of LANL.</span>", 
"<span class=\"comment\"> * &lt;http://www.lanl.gov/radiant/website/pubs/drs/lacsi2001.ps&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * More detail on this code can be found at</span>", 
"<span class=\"comment\"> * &lt;http://www.psc.edu/~jheffner/senior_thesis.ps&gt;,</span>", 
"<span class=\"comment\"> * though this reference is out of date.  A new paper</span>", 
"<span class=\"comment\"> * is pending.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_rcv_rtt_update\">tcp_rcv_rtt_update</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sample\">sample</a>, int <a class=\"id\" href=\"#win_dep\">win_dep</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#new_sample\">new_sample</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_rtt_est\">rcv_rtt_est</a>.<a class=\"id\" href=\"#rtt\">rtt</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#sample\">sample</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_sample\">new_sample</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we sample in larger samples in the non-timestamp</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * case, we could grossly overestimate the RTT especially</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with chatty applications or bulk transfer apps which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are stalled on filesystem I/O.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Also, since we are only going for a minimum in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * non-timestamp case, we do not smooth things out</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * else with timestamps disabled convergence takes too</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * long.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#win_dep\">win_dep</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> -= (<a class=\"id\" href=\"#new_sample\">new_sample</a> >> 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_sample\">new_sample</a> += <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#m\">m</a> &lt; <a class=\"id\" href=\"#new_sample\">new_sample</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_sample\">new_sample</a> = <a class=\"id\" href=\"#m\">m</a> << 3;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No previous measure. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_sample\">new_sample</a> = <a class=\"id\" href=\"#m\">m</a> << 3;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_rtt_est\">rcv_rtt_est</a>.<a class=\"id\" href=\"#rtt\">rtt</a> != <a class=\"id\" href=\"#new_sample\">new_sample</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_rtt_est\">rcv_rtt_est</a>.<a class=\"id\" href=\"#rtt\">rtt</a> = <a class=\"id\" href=\"#new_sample\">new_sample</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_rcv_rtt_measure\">tcp_rcv_rtt_measure</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_rtt_est\">rcv_rtt_est</a>.<a class=\"id\" href=\"#time\">time</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#new_measure\">new_measure</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_nxt\">rcv_nxt</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_rtt_est\">rcv_rtt_est</a>.<a class=\"id\" href=\"#seq\">seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_rcv_rtt_update\">tcp_rcv_rtt_update</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_rtt_est\">rcv_rtt_est</a>.<a class=\"id\" href=\"#time\">time</a>, 1);", 
"", 
"<a class=\"id\" href=\"#new_measure\">new_measure</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_rtt_est\">rcv_rtt_est</a>.<a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_nxt\">rcv_nxt</a> + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_wnd\">rcv_wnd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_rtt_est\">rcv_rtt_est</a>.<a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_rcv_rtt_measure_ts\">tcp_rcv_rtt_measure_ts</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_tsecr\">rcv_tsecr</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a> -", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a> >= <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#rcv_mss\">rcv_mss</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_rcv_rtt_update\">tcp_rcv_rtt_update</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_tsecr\">rcv_tsecr</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function should be called every time data is copied to user space.</span>", 
"<span class=\"comment\"> * It calculates the appropriate TCP receive buffer space.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_rcv_space_adjust\">tcp_rcv_space_adjust</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#space\">space</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcvq_space\">rcvq_space</a>.<a class=\"id\" href=\"#time\">time</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#new_measure\">new_measure</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcvq_space\">rcvq_space</a>.<a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time\">time</a> &lt; (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_rtt_est\">rcv_rtt_est</a>.<a class=\"id\" href=\"#rtt\">rtt</a> >> 3) || <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_rtt_est\">rcv_rtt_est</a>.<a class=\"id\" href=\"#rtt\">rtt</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#space\">space</a> = 2 * (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#copied_seq\">copied_seq</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcvq_space\">rcvq_space</a>.<a class=\"id\" href=\"#seq\">seq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#space\">space</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcvq_space\">rcvq_space</a>.<a class=\"id\" href=\"#space\">space</a>, <a class=\"id\" href=\"#space\">space</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcvq_space\">rcvq_space</a>.<a class=\"id\" href=\"#space\">space</a> != <a class=\"id\" href=\"#space\">space</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rcvmem\">rcvmem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcvq_space\">rcvq_space</a>.<a class=\"id\" href=\"#space\">space</a> = <a class=\"id\" href=\"#space\">space</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_tcp_moderate_rcvbuf\">sysctl_tcp_moderate_rcvbuf</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_userlocks\">sk_userlocks</a> &amp; <a class=\"id\" href=\"#SOCK_RCVBUF_LOCK\">SOCK_RCVBUF_LOCK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#new_clamp\">new_clamp</a> = <a class=\"id\" href=\"#space\">space</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Receive space grows, normalize in order to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * take into account packet headers and sk_buff</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * structure overhead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#space\">space</a> /= <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#space\">space</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#space\">space</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcvmem\">rcvmem</a> = (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a> + <a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  16 + sizeof(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#tcp_win_from_space\">tcp_win_from_space</a>(<a class=\"id\" href=\"#rcvmem\">rcvmem</a>) &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcvmem\">rcvmem</a> += 128;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#space\">space</a> *= <a class=\"id\" href=\"#rcvmem\">rcvmem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#space\">space</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#space\">space</a>, <a class=\"id\" href=\"#sysctl_tcp_rmem\">sysctl_tcp_rmem</a>[2]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#space\">space</a> &gt; <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvbuf\">sk_rcvbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvbuf\">sk_rcvbuf</a> = <a class=\"id\" href=\"#space\">space</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make the window clamp follow along.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a> = <a class=\"id\" href=\"#new_clamp\">new_clamp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#new_measure\">new_measure</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcvq_space\">rcvq_space</a>.<a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#copied_seq\">copied_seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcvq_space\">rcvq_space</a>.<a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"}", 
"", 
"<span class=\"comment\">/* There is something which you must keep in mind when you analyze the</span>", 
"<span class=\"comment\"> * behavior of the tp-&gt;ato delayed ack timeout interval.  When a</span>", 
"<span class=\"comment\"> * connection starts up, we want to ack as quickly as possible.  The</span>", 
"<span class=\"comment\"> * problem is that \"good\" TCP's do slow start at the beginning of data</span>", 
"<span class=\"comment\"> * transmission.  The means that until we send the first few ACK's the</span>", 
"<span class=\"comment\"> * sender will sit on his end and only queue most of his data, because</span>", 
"<span class=\"comment\"> * he can only send snd_cwnd unacked packets at any given time.  For</span>", 
"<span class=\"comment\"> * each ACK we send, he increments snd_cwnd and transmits more of his</span>", 
"<span class=\"comment\"> * queue.  -DaveM</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_event_data_recv\">tcp_event_data_recv</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_csk_schedule_ack\">inet_csk_schedule_ack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_measure_rcv_mss\">tcp_measure_rcv_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_rcv_rtt_measure\">tcp_rcv_rtt_measure</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The _first_ data packet received, initialize</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * delayed ACK engine.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_incr_quickack\">tcp_incr_quickack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a> = <a class=\"id\" href=\"#TCP_ATO_MIN\">TCP_ATO_MIN</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#lrcvtime\">lrcvtime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> <= <a class=\"id\" href=\"#TCP_ATO_MIN\">TCP_ATO_MIN</a> / 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The fastest case is the first. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a> = (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a> >> 1) + <a class=\"id\" href=\"#TCP_ATO_MIN\">TCP_ATO_MIN</a> / 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#m\">m</a> &lt; <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a> = (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a> >> 1) + <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a> &gt; <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#m\">m</a> &gt; <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Too long gap. Apparently sender failed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * restart window, so that we send ACKs quickly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_incr_quickack\">tcp_incr_quickack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_mem_reclaim\">sk_mem_reclaim</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#lrcvtime\">lrcvtime</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_ECN_check_ce\">TCP_ECN_check_ce</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> >= 128)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_grow_window\">tcp_grow_window</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Called to compute a smoothed rtt estimate. The data fed to this</span>", 
"<span class=\"comment\"> * routine either comes from timestamps, or from segments that were</span>", 
"<span class=\"comment\"> * known _not_ to have been retransmitted [see Karn/Partridge</span>", 
"<span class=\"comment\"> * Proceedings SIGCOMM 87]. The algorithm is from the SIGCOMM 88</span>", 
"<span class=\"comment\"> * piece by Van Jacobson.</span>", 
"<span class=\"comment\"> * NOTE: the next three routines used to be one big routine.</span>", 
"<span class=\"comment\"> * To save cycles in the RFC 1323 implementation it was better to break</span>", 
"<span class=\"comment\"> * it up into three procedures. -- erics</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_rtt_estimator\">tcp_rtt_estimator</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, const <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mrtt\">mrtt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#mrtt\">mrtt</a>; <span class=\"comment\">/* RTT */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*<span class=\"ts\"/>The following amusing code comes from Jacobson's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>article in SIGCOMM '88.  Note that rtt and mdev</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>are scaled versions of rtt and mean deviation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>This is designed to be as fast as possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>m stands for \"measurement\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>On a 1990 paper the rto value is changed to:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>RTO = rtt + 4 * mdev</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Funny. This algorithm seems to be very broken.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * These formulae increase RTO, when it should be decreased, increase</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * too slowly, when it should be increased quickly, decrease too quickly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * etc. I guess in BSD RTO takes ONE value, so that it is absolutely</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * does not matter how to _calculate_ it. Seems, it was trap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that VJ failed to avoid. 8)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> -= (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a> >> 3);<span class=\"ts\"/><span class=\"comment\">/* m is now error in rtt est */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a> += <a class=\"id\" href=\"#m\">m</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* rtt = 7/8 rtt + 1/8 new */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = -<a class=\"id\" href=\"#m\">m</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* m is now abs(error) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> -= (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a> >> 2);   <span class=\"comment\">/* similar update on mdev */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is similar to one of Eifel findings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Eifel blocks mdev updates when rtt decreases.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This solution is a bit different: we use finer gain</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for mdev in this case (alpha*beta).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Like Eifel it also prevents growth of rto,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but also it limits too fast rto decreases,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * happening in pure Eifel.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> >>= 3;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> -= (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a> >> 2);   <span class=\"comment\">/* similar update on mdev */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a> += <a class=\"id\" href=\"#m\">m</a>;<span class=\"ts\"/>    <span class=\"ts\"/><span class=\"comment\">/* mdev = 3/4 mdev + 1/4 new */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a> &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev_max\">mdev_max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev_max\">mdev_max</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev_max\">mdev_max</a> &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rttvar\">rttvar</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rttvar\">rttvar</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev_max\">mdev_max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rtt_seq\">rtt_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev_max\">mdev_max</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rttvar\">rttvar</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rttvar\">rttvar</a> -= (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rttvar\">rttvar</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev_max\">mdev_max</a>) >> 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rtt_seq\">rtt_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev_max\">mdev_max</a> = <a class=\"id\" href=\"#tcp_rto_min\">tcp_rto_min</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no previous measure. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a> = <a class=\"id\" href=\"#m\">m</a> << 3;<span class=\"ts\"/><span class=\"comment\">/* take the measured time to be rtt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a> = <a class=\"id\" href=\"#m\">m</a> << 1;<span class=\"ts\"/><span class=\"comment\">/* make sure rto = 3*rtt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev_max\">mdev_max</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rttvar\">rttvar</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a>, <a class=\"id\" href=\"#tcp_rto_min\">tcp_rto_min</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rtt_seq\">rtt_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Calculate rto without backoff.  This is the second half of Van Jacobson's</span>", 
"<span class=\"comment\"> * routine referred to above.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_set_rto\">tcp_set_rto</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Old crap is replaced with new one. 8)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * More seriously:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1. If rtt variance happened to be less 50msec, it is hallucination.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    It cannot be less due to utterly erratic ACK generation made</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    at least by solaris and freebsd. \"Erratic ACKs\" has _nothing_</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    to do with delayed acks, because at cwnd&gt;2 true delack timeout</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    is invisible. Actually, Linux-2.4 also generates erratic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    ACKs in some circumstances.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a> = <a class=\"id\" href=\"#__tcp_set_rto\">__tcp_set_rto</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 2. Fixups made earlier cannot be right.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    If we do not estimate RTO correctly without them,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    all the algo is pure shit and should be replaced</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    with correct one. It is exactly, which we pretend to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTE: clamping at TCP_RTO_MIN is not required, current algo</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * guarantees that rto is higher.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_bound_rto\">tcp_bound_rto</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Save metrics learned by this TCP session.</span>", 
"<span class=\"comment\">   This function is called only, when TCP finishes successfully</span>", 
"<span class=\"comment\">   i.e. when it enters TIME-WAIT or goes from LAST-ACK to CLOSE.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_update_metrics\">tcp_update_metrics</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#__sk_dst_get\">__sk_dst_get</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_tcp_nometrics_save\">sysctl_tcp_nometrics_save</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_confirm\">dst_confirm</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a> && (<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DST_HOST\">DST_HOST</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rtt\">rtt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_backoff\">icsk_backoff</a> || !<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This session failed to estimate rtt. Why?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Probably, no packets returned in time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Reset our results.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTT\">RTAX_RTT</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#metrics\">metrics</a>[<a class=\"id\" href=\"#RTAX_RTT\">RTAX_RTT</a> - 1] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtt\">rtt</a> = <a class=\"id\" href=\"#dst_metric_rtt\">dst_metric_rtt</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTT\">RTAX_RTT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#rtt\">rtt</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If newly calculated rtt larger than stored one,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * store new one. Otherwise, use EWMA. Remember,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rtt overestimation is always better than underestimation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTT\">RTAX_RTT</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_dst_metric_rtt\">set_dst_metric_rtt</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTT\">RTAX_RTT</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_dst_metric_rtt\">set_dst_metric_rtt</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTT\">RTAX_RTT</a>, <a class=\"id\" href=\"#rtt\">rtt</a> - (<a class=\"id\" href=\"#m\">m</a> >> 3));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTTVAR\">RTAX_RTTVAR</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#var\">var</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = -<a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Scale deviation to rttvar fixed point */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#var\">var</a> = <a class=\"id\" href=\"#dst_metric_rtt\">dst_metric_rtt</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTTVAR\">RTAX_RTTVAR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> >= <a class=\"id\" href=\"#var\">var</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#var\">var</a> = <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#var\">var</a> -= (<a class=\"id\" href=\"#var\">var</a> - <a class=\"id\" href=\"#m\">m</a>) >> 2;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_dst_metric_rtt\">set_dst_metric_rtt</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTTVAR\">RTAX_RTTVAR</a>, <a class=\"id\" href=\"#var\">var</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_in_initial_slowstart\">tcp_in_initial_slowstart</a>(<a class=\"id\" href=\"#tp\">tp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Slow start still did not finish. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> >> 1) &gt; <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#metrics\">metrics</a>[<a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>-1] = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_CWND\">RTAX_CWND</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> &gt; <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_CWND\">RTAX_CWND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#metrics\">metrics</a>[<a class=\"id\" href=\"#RTAX_CWND\">RTAX_CWND</a> - 1] = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> == <a class=\"id\" href=\"#TCP_CA_Open\">TCP_CA_Open</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Cong. avoidance phase, cwnd is reliable. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#metrics\">metrics</a>[<a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>-1] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> >> 1, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_CWND\">RTAX_CWND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#metrics\">metrics</a>[<a class=\"id\" href=\"#RTAX_CWND\">RTAX_CWND</a>-1] = (<a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_CWND\">RTAX_CWND</a>) + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>) >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Else slow start did not finish, cwnd is non-sense,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   ssthresh may be also invalid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_CWND\">RTAX_CWND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#metrics\">metrics</a>[<a class=\"id\" href=\"#RTAX_CWND\">RTAX_CWND</a>-1] = (<a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_CWND\">RTAX_CWND</a>) + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a>) >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a> &gt; <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#metrics\">metrics</a>[<a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>-1] = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_REORDERING\">RTAX_REORDERING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_REORDERING\">RTAX_REORDERING</a>) &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a> != <a class=\"id\" href=\"#sysctl_tcp_reordering\">sysctl_tcp_reordering</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#metrics\">metrics</a>[<a class=\"id\" href=\"#RTAX_REORDERING\">RTAX_REORDERING</a>-1] = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Numbers are taken from RFC3390.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * John Heffner states:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The RFC specifies a window of no more than 4380 bytes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unless 2*MSS &gt; 4380.  Reading the pseudocode in the RFC</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is a bit misleading because they use a clamp at 4380 bytes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rather than use a multiplier in the relevant range.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#tcp_init_cwnd\">tcp_init_cwnd</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#cwnd\">cwnd</a> = (<a class=\"id\" href=\"#dst\">dst</a> ? <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_INITCWND\">RTAX_INITCWND</a>) : 0);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cwnd\">cwnd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mss_cache\">mss_cache</a> &gt; 1460)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwnd\">cwnd</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwnd\">cwnd</a> = (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mss_cache\">mss_cache</a> &gt; 1095) ? 3 : 4;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#__u32\">__u32</a>, <a class=\"id\" href=\"#cwnd\">cwnd</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_clamp\">snd_cwnd_clamp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Set slow start threshold and cwnd not falling to slow start */</span>", 
"void <a class=\"id\" href=\"#tcp_enter_cwr\">tcp_enter_cwr</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, const int <a class=\"id\" href=\"#set_ssthresh\">set_ssthresh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#prior_ssthresh\">prior_ssthresh</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#bytes_acked\">bytes_acked</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> &lt; <a class=\"id\" href=\"#TCP_CA_CWR\">TCP_CA_CWR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#set_ssthresh\">set_ssthresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#ssthresh\">ssthresh</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#tcp_packets_in_flight\">tcp_packets_in_flight</a>(<a class=\"id\" href=\"#tp\">tp</a>) + 1U);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_stamp\">snd_cwnd_stamp</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_ECN_queue_cwr\">TCP_ECN_queue_cwr</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_ca_state\">tcp_set_ca_state</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#TCP_CA_CWR\">TCP_CA_CWR</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Packet counting of FACK is based on in-order assumptions, therefore TCP</span>", 
"<span class=\"comment\"> * disables it when reordering is detected</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_disable_fack\">tcp_disable_fack</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* RFC3517 uses different metric in lost marker =&gt; reset on change */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_fack\">tcp_is_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_skb_hint\">lost_skb_hint</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#sack_ok\">sack_ok</a> &= ~2;", 
"}", 
"", 
"<span class=\"comment\">/* Take a notice that peer is sending D-SACKs */</span>", 
"static void <a class=\"id\" href=\"#tcp_dsack_seen\">tcp_dsack_seen</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#sack_ok\">sack_ok</a> |= 4;", 
"}", 
"", 
"<span class=\"comment\">/* Initialize metrics on socket. */</span>", 
"", 
"static void <a class=\"id\" href=\"#tcp_init_metrics\">tcp_init_metrics</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#__sk_dst_get\">__sk_dst_get</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reset\">reset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_confirm\">dst_confirm</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_CWND\">RTAX_CWND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_clamp\">snd_cwnd_clamp</a> = <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_CWND\">RTAX_CWND</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a> = <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_SSTHRESH\">RTAX_SSTHRESH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a> &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_clamp\">snd_cwnd_clamp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_clamp\">snd_cwnd_clamp</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_REORDERING\">RTAX_REORDERING</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a> != <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_REORDERING\">RTAX_REORDERING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_disable_fack\">tcp_disable_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a> = <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_REORDERING\">RTAX_REORDERING</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTT\">RTAX_RTT</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reset\">reset</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a> && <a class=\"id\" href=\"#dst_metric_rtt\">dst_metric_rtt</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTT\">RTAX_RTT</a>) &lt; (<a class=\"id\" href=\"#TCP_TIMEOUT_INIT\">TCP_TIMEOUT_INIT</a> << 3))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reset\">reset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initial rtt is determined from SYN,SYN-ACK.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The segment is small and rtt may appear much</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * less than real one. Use per-dst memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to make it more realistic.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A bit of theory. RTT is time passed after \"normal\" sized packet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is sent until it is ACKed. In normal circumstances sending small</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * packets force peer to delay ACKs and calculation is correct too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The algorithm is adaptive and, provided we follow specs, it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NEVER underestimate RTT. BUT! If peer tries to make some clever</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tricks sort of \"quick acks\" for time long enough to decrease RTT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to low value, and then abruptly stops to do it and starts to delay</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ACKs, wait for troubles.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_metric_rtt\">dst_metric_rtt</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTT\">RTAX_RTT</a>) &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a> = <a class=\"id\" href=\"#dst_metric_rtt\">dst_metric_rtt</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTT\">RTAX_RTT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rtt_seq\">rtt_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_metric_rtt\">dst_metric_rtt</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTTVAR\">RTAX_RTTVAR</a>) &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a> = <a class=\"id\" href=\"#dst_metric_rtt\">dst_metric_rtt</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_RTTVAR\">RTAX_RTTVAR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev_max\">mdev_max</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rttvar\">rttvar</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a>, <a class=\"id\" href=\"#tcp_rto_min\">tcp_rto_min</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_rto\">tcp_set_rto</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a> &lt; <a class=\"id\" href=\"#TCP_TIMEOUT_INIT\">TCP_TIMEOUT_INIT</a> && !<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#saw_tstamp\">saw_tstamp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reset\">reset</a>;", 
"", 
"<a class=\"id\" href=\"#cwnd\">cwnd</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#tcp_init_cwnd\">tcp_init_cwnd</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_stamp\">snd_cwnd_stamp</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#reset\">reset</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Play conservative. If timestamps are not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * supported, TCP will fail to recalculate correct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rtt, if initial rto is too small. FORGET ALL AND RESET!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#saw_tstamp\">saw_tstamp</a> && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev\">mdev</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mdev_max\">mdev_max</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rttvar\">rttvar</a> = <a class=\"id\" href=\"#TCP_TIMEOUT_INIT\">TCP_TIMEOUT_INIT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a> = <a class=\"id\" href=\"#TCP_TIMEOUT_INIT\">TCP_TIMEOUT_INIT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#cwnd\">cwnd</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_update_reordering\">tcp_update_reordering</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, const int <a class=\"id\" href=\"#metric\">metric</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const int <a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#metric\">metric</a> &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mib_idx\">mib_idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#TCP_MAX_REORDERING\">TCP_MAX_REORDERING</a>, <a class=\"id\" href=\"#metric\">metric</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This exciting event is worth to be remembered. 8) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPTSREORDER\">LINUX_MIB_TCPTSREORDER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#tcp_is_reno\">tcp_is_reno</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPRENOREORDER\">LINUX_MIB_TCPRENOREORDER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#tcp_is_fack\">tcp_is_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPFACKREORDER\">LINUX_MIB_TCPFACKREORDER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPSACKREORDER\">LINUX_MIB_TCPSACKREORDER</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#mib_idx\">mib_idx</a>);", 
"#if <a class=\"id\" href=\"#FASTRETRANS_DEBUG\">FASTRETRANS_DEBUG</a> &gt; 1", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Disorder%d %d %u f%u s%u rr%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#sack_ok\">sack_ok</a>, <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> ? <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_retrans\">undo_retrans</a> : 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_disable_fack\">tcp_disable_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* This must be called before lost_out is incremented */</span>", 
"static void <a class=\"id\" href=\"#tcp_verify_retransmit_hint\">tcp_verify_retransmit_hint</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_skb_hint\">retransmit_skb_hint</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_skb_hint\">retransmit_skb_hint</a>)-><a class=\"id\" href=\"#seq\">seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_skb_hint\">retransmit_skb_hint</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_high\">retransmit_high</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_high\">retransmit_high</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_skb_mark_lost\">tcp_skb_mark_lost</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; (<a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>|<a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_verify_retransmit_hint\">tcp_verify_retransmit_hint</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> |= <a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_skb_mark_lost_uncond_verify\">tcp_skb_mark_lost_uncond_verify</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_verify_retransmit_hint\">tcp_verify_retransmit_hint</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; (<a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>|<a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> |= <a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* This procedure tags the retransmission queue when SACKs arrive.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We have three tag bits: SACKED(S), RETRANS(R) and LOST(L).</span>", 
"<span class=\"comment\"> * Packets in queue with these bits set are counted in variables</span>", 
"<span class=\"comment\"> * sacked_out, retrans_out and lost_out, correspondingly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Valid combinations are:</span>", 
"<span class=\"comment\"> * Tag  InFlight<span class=\"ts\"/>Description</span>", 
"<span class=\"comment\"> * 0<span class=\"ts\"/>1<span class=\"ts\"/><span class=\"ts\"/>- orig segment is in flight.</span>", 
"<span class=\"comment\"> * S<span class=\"ts\"/>0<span class=\"ts\"/><span class=\"ts\"/>- nothing flies, orig reached receiver.</span>", 
"<span class=\"comment\"> * L<span class=\"ts\"/>0<span class=\"ts\"/><span class=\"ts\"/>- nothing flies, orig lost by net.</span>", 
"<span class=\"comment\"> * R<span class=\"ts\"/>2<span class=\"ts\"/><span class=\"ts\"/>- both orig and retransmit are in flight.</span>", 
"<span class=\"comment\"> * L|R<span class=\"ts\"/>1<span class=\"ts\"/><span class=\"ts\"/>- orig is lost, retransmit is in flight.</span>", 
"<span class=\"comment\"> * S|R  1<span class=\"ts\"/><span class=\"ts\"/>- orig reached receiver, retrans is still in flight.</span>", 
"<span class=\"comment\"> * (L|S|R is logically valid, it could occur when L|R is sacked,</span>", 
"<span class=\"comment\"> *  but it is equivalent to plain S and code short-curcuits it to S.</span>", 
"<span class=\"comment\"> *  L|S is logically invalid, it would mean -1 packet in flight 8))</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These 6 states form finite state machine, controlled by the following events:</span>", 
"<span class=\"comment\"> * 1. New ACK (+SACK) arrives. (tcp_sacktag_write_queue())</span>", 
"<span class=\"comment\"> * 2. Retransmission. (tcp_retransmit_skb(), tcp_xmit_retransmit_queue())</span>", 
"<span class=\"comment\"> * 3. Loss detection event of one of three flavors:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A. Scoreboard estimator decided the packet is lost.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   A'. Reno \"three dupacks\" marks head of queue lost.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   A''. Its FACK modfication, head until snd.fack is lost.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>B. SACK arrives sacking data transmitted after never retransmitted</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   hole was sent out.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>C. SACK arrives sacking SND.NXT at the moment, when the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   segment was retransmitted.</span>", 
"<span class=\"comment\"> * 4. D-SACK added new rule: D-SACK changes any tag to S.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is pleasant to note, that state diagram turns out to be commutative,</span>", 
"<span class=\"comment\"> * so that we are allowed not to be bothered by order of our actions,</span>", 
"<span class=\"comment\"> * when multiple events arrive simultaneously. (see the function below).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reordering detection.</span>", 
"<span class=\"comment\"> * --------------------</span>", 
"<span class=\"comment\"> * Reordering metric is maximal distance, which a packet can be displaced</span>", 
"<span class=\"comment\"> * in packet stream. With SACKs we can estimate it:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1. SACK fills old hole and the corresponding segment was not</span>", 
"<span class=\"comment\"> *    ever retransmitted -&gt; reordering. Alas, we cannot use it</span>", 
"<span class=\"comment\"> *    when segment was retransmitted.</span>", 
"<span class=\"comment\"> * 2. The last flaw is solved with D-SACK. D-SACK arrives</span>", 
"<span class=\"comment\"> *    for retransmitted and already SACKed segment -&gt; reordering..</span>", 
"<span class=\"comment\"> * Both of these heuristics are not used in Loss state, when we cannot</span>", 
"<span class=\"comment\"> * account for retransmits accurately.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SACK block validation.</span>", 
"<span class=\"comment\"> * ----------------------</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SACK block range validation checks that the received SACK block fits to</span>", 
"<span class=\"comment\"> * the expected sequence limits, i.e., it is between SND.UNA and SND.NXT.</span>", 
"<span class=\"comment\"> * Note that SND.UNA is not included to the range though being valid because</span>", 
"<span class=\"comment\"> * it means that the receiver is rather inconsistent with itself reporting</span>", 
"<span class=\"comment\"> * SACK reneging when it should advance SND.UNA. Such SACK block this is</span>", 
"<span class=\"comment\"> * perfectly valid, however, in light of RFC2018 which explicitly states</span>", 
"<span class=\"comment\"> * that \"SACK block MUST reflect the newest segment.  Even if the newest</span>", 
"<span class=\"comment\"> * segment is going to be discarded ...\", not that it looks very clever</span>", 
"<span class=\"comment\"> * in case of head skb. Due to potentional receiver driven attacks, we</span>", 
"<span class=\"comment\"> * choose to avoid immediate execution of a walk in write queue due to</span>", 
"<span class=\"comment\"> * reneging and defer head skb's loss recovery to standard loss recovery</span>", 
"<span class=\"comment\"> * procedure that will eventually trigger (nothing forbids us doing this).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Implements also blockage to start_seq wrap-around. Problem lies in the</span>", 
"<span class=\"comment\"> * fact that though start_seq (s) is before end_seq (i.e., not reversed),</span>", 
"<span class=\"comment\"> * there's no guarantee that it will be before snd_nxt (n). The problem</span>", 
"<span class=\"comment\"> * happens when start_seq resides between end_seq wrap (e_w) and snd_nxt</span>", 
"<span class=\"comment\"> * wrap (s_w):</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *         &lt;- outs wnd -&gt;                          &lt;- wrapzone -&gt;</span>", 
"<span class=\"comment\"> *         u     e      n                         u_w   e_w  s n_w</span>", 
"<span class=\"comment\"> *         |     |      |                          |     |   |  |</span>", 
"<span class=\"comment\"> * |&lt;------------+------+----- TCP seqno space --------------+----------&gt;|</span>", 
"<span class=\"comment\"> * ...-- &lt;2^31 -&gt;|                                           |&lt;--------...</span>", 
"<span class=\"comment\"> * ...---- &gt;2^31 ------&gt;|                                    |&lt;--------...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Current code wouldn't be vulnerable but it's better still to discard such</span>", 
"<span class=\"comment\"> * crazy SACK blocks. Doing this check for start_seq alone closes somewhat</span>", 
"<span class=\"comment\"> * similar case (end_seq after snd_nxt wrap) as earlier reversed check in</span>", 
"<span class=\"comment\"> * snd_nxt wrap -&gt; snd_una region will then become \"well defined\", i.e.,</span>", 
"<span class=\"comment\"> * equal to the ideal case (infinite seqno space without wrap caused issues).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * With D-SACK the lower bound is extended to cover sequence space below</span>", 
"<span class=\"comment\"> * SND.UNA down to undo_marker, which is the last point of interest. Yet</span>", 
"<span class=\"comment\"> * again, D-SACK block must not to go across snd_una (for the same reason as</span>", 
"<span class=\"comment\"> * for the normal SACK blocks, explained above). But there all simplicity</span>", 
"<span class=\"comment\"> * ends, TCP might receive valid D-SACKs below that. As long as they reside</span>", 
"<span class=\"comment\"> * fully below undo_marker they do not affect behavior in anyway and can</span>", 
"<span class=\"comment\"> * therefore be safely ignored. In rare cases (which are more or less</span>", 
"<span class=\"comment\"> * theoretical ones), the D-SACK will nicely cross that boundary due to skb</span>", 
"<span class=\"comment\"> * fragmentation and packet reordering past skb's retransmission. To consider</span>", 
"<span class=\"comment\"> * them correctly, the acceptable range must be extended even more though</span>", 
"<span class=\"comment\"> * the exact amount is rather hard to quantify. However, tp-&gt;max_window can</span>", 
"<span class=\"comment\"> * be used as an exaggerated estimate.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tcp_is_sackblock_valid\">tcp_is_sackblock_valid</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, int <a class=\"id\" href=\"#is_dsack\">is_dsack</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq\">end_seq</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Too far in future, or reversed (interpretation is ambiguous) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>) || !<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#end_seq\">end_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Nasty start_seq wrap-around check (see comments above) */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* In outstanding window? ...This is valid exit for D-SACKs too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start_seq == snd_una is non-sensical (see comments above)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_dsack\">is_dsack</a> || !<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ...Then it's D-SACK, and must reside below snd_una completely */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Too old */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Undo_marker boundary crossing (overestimates a lot). Known already:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   start_seq &lt; undo_marker and end_seq &gt;= undo_marker.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#end_seq\">end_seq</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#max_window\">max_window</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Check for lost retransmit. This superb idea is borrowed from \"ratehalving\".</span>", 
"<span class=\"comment\"> * Event \"C\". Later note: FACK people cheated me again 8), we have to account</span>", 
"<span class=\"comment\"> * for reordering! Ugly, but should help.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Search retransmitted skbs from write_queue that were sent when snd_nxt was</span>", 
"<span class=\"comment\"> * less than what is now known to be received by the other end (derived from</span>", 
"<span class=\"comment\"> * highest SACK block). Also calculate the lowest snd_nxt among the remaining</span>", 
"<span class=\"comment\"> * retransmitted skbs to avoid some costly processing per ACKs.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_mark_lost_retrans\">tcp_mark_lost_retrans</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cnt\">cnt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#new_low_seq\">new_low_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#received_upto\">received_upto</a> = <a class=\"id\" href=\"#tcp_highest_sack_seq\">tcp_highest_sack_seq</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_is_fack\">tcp_is_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>) || !<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#received_upto\">received_upto</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_retrans_low\">lost_retrans_low</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> != <a class=\"id\" href=\"#TCP_CA_Recovery\">TCP_CA_Recovery</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue\">tcp_for_write_queue</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ack_seq\">ack_seq</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#ack_seq\">ack_seq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a> == <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: We would like to get rid of tcp_is_fack(tp) only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * constraint here (see above) but figuring out that at</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * least tp-&gt;reordering SACK blocks reside between ack_seq</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and received_upto is not easy task to do cheaply with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the available datastructures.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Whether FACK should check here for tp-&gt;reordering segs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in-between one could argue for either way (it would be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rather simple to implement as we could count fack_count</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * during the walk and do tp-&gt;fackets_out - fack_count).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#received_upto\">received_upto</a>, <a class=\"id\" href=\"#ack_seq\">ack_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &= ~<a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a> -= <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_skb_mark_lost_uncond_verify\">tcp_skb_mark_lost_uncond_verify</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_TCPLOSTRETRANSMIT\">LINUX_MIB_TCPLOSTRETRANSMIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#ack_seq\">ack_seq</a>, <a class=\"id\" href=\"#new_low_seq\">new_low_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_low_seq\">new_low_seq</a> = <a class=\"id\" href=\"#ack_seq\">ack_seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_retrans_low\">lost_retrans_low</a> = <a class=\"id\" href=\"#new_low_seq\">new_low_seq</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tcp_check_dsack\">tcp_check_dsack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#ack_skb\">ack_skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#tcp_sack_block_wire\">tcp_sack_block_wire</a> *<a class=\"id\" href=\"#sp\">sp</a>, int <a class=\"id\" href=\"#num_sacks\">num_sacks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#prior_snd_una\">prior_snd_una</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#start_seq_0\">start_seq_0</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>[0].<a class=\"id\" href=\"#start_seq\">start_seq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq_0\">end_seq_0</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>[0].<a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dup_sack\">dup_sack</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#start_seq_0\">start_seq_0</a>, <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#ack_skb\">ack_skb</a>)-><a class=\"id\" href=\"#ack_seq\">ack_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dup_sack\">dup_sack</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_dsack_seen\">tcp_dsack_seen</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_TCPDSACKRECV\">LINUX_MIB_TCPDSACKRECV</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#num_sacks\">num_sacks</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq_1\">end_seq_1</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>[1].<a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#start_seq_1\">start_seq_1</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>[1].<a class=\"id\" href=\"#start_seq\">start_seq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#end_seq_0\">end_seq_0</a>, <a class=\"id\" href=\"#end_seq_1\">end_seq_1</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#start_seq_0\">start_seq_0</a>, <a class=\"id\" href=\"#start_seq_1\">start_seq_1</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dup_sack\">dup_sack</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_dsack_seen\">tcp_dsack_seen</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LINUX_MIB_TCPDSACKOFORECV\">LINUX_MIB_TCPDSACKOFORECV</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* D-SACK for already forgotten data... Do dumb counting. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dup_sack\">dup_sack</a> &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#end_seq_0\">end_seq_0</a>, <a class=\"id\" href=\"#prior_snd_una\">prior_snd_una</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#end_seq_0\">end_seq_0</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_retrans\">undo_retrans</a>--;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dup_sack\">dup_sack</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#tcp_sacktag_state\">tcp_sacktag_state</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#reord\">reord</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fack_count\">fack_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flag\">flag</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Check if skb is fully within the SACK block. In presence of GSO skbs,</span>", 
"<span class=\"comment\"> * the incoming SACK may not exactly match but we can find smaller MSS</span>", 
"<span class=\"comment\"> * aligned portion of it that matches. Therefore we might need to fragment</span>", 
"<span class=\"comment\"> * which may fail and creates some hassle (caller must handle error case</span>", 
"<span class=\"comment\"> * returns).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FIXME: this could be merged to shift decision code</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tcp_match_skb_to_sack\">tcp_match_skb_to_sack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq\">end_seq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#in_sack\">in_sack</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pkt_len\">pkt_len</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mss\">mss</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_sack\">in_sack</a> = !<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>  !<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>) &gt; 1 && !<a class=\"id\" href=\"#in_sack\">in_sack</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#start_seq\">start_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#tcp_skb_mss\">tcp_skb_mss</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_sack\">in_sack</a> = !<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_sack\">in_sack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt_len\">pkt_len</a> = <a class=\"id\" href=\"#start_seq\">start_seq</a> - <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pkt_len\">pkt_len</a> &lt; <a class=\"id\" href=\"#mss\">mss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt_len\">pkt_len</a> = <a class=\"id\" href=\"#mss\">mss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt_len\">pkt_len</a> = <a class=\"id\" href=\"#end_seq\">end_seq</a> - <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pkt_len\">pkt_len</a> &lt; <a class=\"id\" href=\"#mss\">mss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Round if necessary so that SACKs cover only full MSSes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and/or the remaining small portion (if present)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pkt_len\">pkt_len</a> &gt; <a class=\"id\" href=\"#mss\">mss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#new_len\">new_len</a> = (<a class=\"id\" href=\"#pkt_len\">pkt_len</a> / <a class=\"id\" href=\"#mss\">mss</a>) * <a class=\"id\" href=\"#mss\">mss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_sack\">in_sack</a> && <a class=\"id\" href=\"#new_len\">new_len</a> &lt; <a class=\"id\" href=\"#pkt_len\">pkt_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_len\">new_len</a> += <a class=\"id\" href=\"#mss\">mss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_len\">new_len</a> &gt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt_len\">pkt_len</a> = <a class=\"id\" href=\"#new_len\">new_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#tcp_fragment\">tcp_fragment</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pkt_len\">pkt_len</a>, <a class=\"id\" href=\"#mss\">mss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#in_sack\">in_sack</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#tcp_sacktag_one\">tcp_sacktag_one</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#tcp_sacktag_state\">tcp_sacktag_state</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#dup_sack\">dup_sack</a>, int <a class=\"id\" href=\"#pcount\">pcount</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sacked\">sacked</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fack_count\">fack_count</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fack_count\">fack_count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Account D-SACK for retransmitted packet. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dup_sack\">dup_sack</a> && (<a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_RETRANS\">TCPCB_RETRANS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_retrans\">undo_retrans</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#reord\">reord</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#fack_count\">fack_count</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#reord\">reord</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Nothing to do; acked frame is about to be dropped (was ACKed). */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sacked\">sacked</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the segment is not tagged as lost,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we do not clear RETRANS, believing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that retransmission is still in flight.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sacked\">sacked</a> &= ~(<a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>|<a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a> -= <a class=\"id\" href=\"#pcount\">pcount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a> -= <a class=\"id\" href=\"#pcount\">pcount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_RETRANS\">TCPCB_RETRANS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* New sack for not retransmitted frame,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * which was in hole. It is reordering.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#tcp_highest_sack_seq\">tcp_highest_sack_seq</a>(<a class=\"id\" href=\"#tp\">tp</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#reord\">reord</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#fack_count\">fack_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#reord\">reord</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SACK enhanced F-RTO (RFC4138; Appendix B) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_highmark\">frto_highmark</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#flag\">flag</a> |= <a class=\"id\" href=\"#FLAG_ONLY_ORIG_SACKED\">FLAG_ONLY_ORIG_SACKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sacked\">sacked</a> &= ~<a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a> -= <a class=\"id\" href=\"#pcount\">pcount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sacked\">sacked</a> |= <a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#flag\">flag</a> |= <a class=\"id\" href=\"#FLAG_DATA_SACKED\">FLAG_DATA_SACKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> += <a class=\"id\" href=\"#pcount\">pcount</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fack_count\">fack_count</a> += <a class=\"id\" href=\"#pcount\">pcount</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Lost marker hint past SACKed? Tweak RFC3517 cnt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_is_fack\">tcp_is_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>) && (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_skb_hint\">lost_skb_hint</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_skb_hint\">lost_skb_hint</a>)-><a class=\"id\" href=\"#seq\">seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_cnt_hint\">lost_cnt_hint</a> += <a class=\"id\" href=\"#pcount\">pcount</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fack_count\">fack_count</a> &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a> = <a class=\"id\" href=\"#fack_count\">fack_count</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* D-SACK. We can detect redundant retransmission in S|R and plain R</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * frames and clear it. undo_retrans is decreased above, L|R frames</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are accounted above as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dup_sack\">dup_sack</a> && (<a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sacked\">sacked</a> &= ~<a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a> -= <a class=\"id\" href=\"#pcount\">pcount</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sacked\">sacked</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tcp_shifted_skb\">tcp_shifted_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#tcp_sacktag_state\">tcp_sacktag_state</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#pcount\">pcount</a>, int <a class=\"id\" href=\"#shifted\">shifted</a>, int <a class=\"id\" href=\"#mss\">mss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#dup_sack\">dup_sack</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#tcp_write_queue_prev\">tcp_write_queue_prev</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#pcount\">pcount</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tweak before seqno plays */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_is_fack\">tcp_is_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>) && <a class=\"id\" href=\"#tcp_is_sack\">tcp_is_sack</a>(<a class=\"id\" href=\"#tp\">tp</a>) && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_skb_hint\">lost_skb_hint</a> &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_skb_hint\">lost_skb_hint</a>)-><a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_cnt_hint\">lost_cnt_hint</a> += <a class=\"id\" href=\"#pcount\">pcount</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a> += <a class=\"id\" href=\"#shifted\">shifted</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a> += <a class=\"id\" href=\"#shifted\">shifted</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#gso_segs\">gso_segs</a> += <a class=\"id\" href=\"#pcount\">pcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_segs\">gso_segs</a> &lt; <a class=\"id\" href=\"#pcount\">pcount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_segs\">gso_segs</a> -= <a class=\"id\" href=\"#pcount\">pcount</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* When we're adding to gso_segs == 1, gso_size will be zero,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in theory this shouldn't be necessary but as long as DSACK</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * code can come after this skb later on it's better to keep</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * setting gso_size to something.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a> = <a class=\"id\" href=\"#mss\">mss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#gso_type\">gso_type</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_gso_type\">sk_gso_type</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* CHECKME: To clear or not to clear? Mimics normal skb currently */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_segs\">gso_segs</a> <= 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_type\">gso_type</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We discard results */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_sacktag_one\">tcp_sacktag_one</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#dup_sack\">dup_sack</a>, <a class=\"id\" href=\"#pcount\">pcount</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Difference in this won't matter, both ACKed by the same cumul. ACK */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> |= (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_EVER_RETRANS\">TCPCB_EVER_RETRANS</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_SACKSHIFTED\">LINUX_MIB_SACKSHIFTED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Whole SKB was eaten :-) */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_skb_hint\">retransmit_skb_hint</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_skb_hint\">retransmit_skb_hint</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#scoreboard_skb_hint\">scoreboard_skb_hint</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#scoreboard_skb_hint\">scoreboard_skb_hint</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_skb_hint\">lost_skb_hint</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_skb_hint\">lost_skb_hint</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_cnt_hint\">lost_cnt_hint</a> -= <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_highest_sack\">tcp_highest_sack</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_advance_highest_sack\">tcp_advance_highest_sack</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_unlink_write_queue\">tcp_unlink_write_queue</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_wmem_free_skb\">sk_wmem_free_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_SACKMERGED\">LINUX_MIB_SACKMERGED</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/* I wish gso_size would have a bit more sane initialization than</span>", 
"<span class=\"comment\"> * something-or-zero which complicates things</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tcp_skb_seglen\">tcp_skb_seglen</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>) == 1 ? <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> : <a class=\"id\" href=\"#tcp_skb_mss\">tcp_skb_mss</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Shifting pages past head area doesn't work */</span>", 
"static int <a class=\"id\" href=\"#skb_can_shift\">skb_can_shift</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>) && <a class=\"id\" href=\"#skb_is_nonlinear\">skb_is_nonlinear</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Try collapsing SACK blocks spanning across multiple skbs to a single</span>", 
"<span class=\"comment\"> * skb.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_shift_skb_data\">tcp_shift_skb_data</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#tcp_sacktag_state\">tcp_sacktag_state</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq\">end_seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#dup_sack\">dup_sack</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mss\">mss</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pcount\">pcount</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#in_sack\">in_sack</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sk_can_gso\">sk_can_gso</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Normally R but no L won't result in plain S */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dup_sack\">dup_sack</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; (<a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>|<a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>)) == <a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_can_shift\">skb_can_shift</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* This frame is about to be dropped (was ACKed). */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Can only happen with delayed DSACK + discard craziness */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#tcp_write_queue_prev\">tcp_write_queue_prev</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_TAGBITS\">TCPCB_TAGBITS</a>) != <a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_sack\">in_sack</a> = !<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>  !<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_sack\">in_sack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcount\">pcount</a> = <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#tcp_skb_seglen\">tcp_skb_seglen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: Fix DSACKs to not fragment already SACKed and we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * drop this restriction as unnecessary</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mss\">mss</a> != <a class=\"id\" href=\"#tcp_skb_seglen\">tcp_skb_seglen</a>(<a class=\"id\" href=\"#prev\">prev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#start_seq\">start_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#noop\">noop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CHECKME: This is non-MSS split case only?, this will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cause skipped skbs due to advancing loop btw, original</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has that feature too</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>) <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#noop\">noop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_sack\">in_sack</a> = !<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_sack\">in_sack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: head merge to next could be attempted here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if (!after(TCP_SKB_CB(skb)-&gt;end_seq, end_seq)),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * though it might not be worth of the additional hassle</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ...we can probably just fallback to what was done</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * previously. We could try merging non-SACKed ones</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * as well but it probably isn't going to buy off</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * because later SACKs might again split them, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * it would make skb timestamp tracking considerably</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * harder problem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#end_seq\">end_seq</a> - <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#len\">len</a> &lt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* MSS boundaries should be honoured or else pcount will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * severely break even though it makes things bit trickier.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Optimize common case to avoid most of the divides</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#tcp_skb_mss\">tcp_skb_mss</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: Fix DSACKs to not fragment already SACKed and we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * drop this restriction as unnecessary</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mss\">mss</a> != <a class=\"id\" href=\"#tcp_skb_seglen\">tcp_skb_seglen</a>(<a class=\"id\" href=\"#prev\">prev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == <a class=\"id\" href=\"#mss\">mss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcount\">pcount</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#mss\">mss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#noop\">noop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcount\">pcount</a> = <a class=\"id\" href=\"#len\">len</a> / <a class=\"id\" href=\"#mss\">mss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#pcount\">pcount</a> * <a class=\"id\" href=\"#mss\">mss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_shift\">skb_shift</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_shifted_skb\">tcp_shifted_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#pcount\">pcount</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#mss\">mss</a>, <a class=\"id\" href=\"#dup_sack\">dup_sack</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hole filled allows collapsing with the next as well, this is very</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * useful when hole on every nth skb pattern happens</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> == <a class=\"id\" href=\"#tcp_write_queue_tail\">tcp_write_queue_tail</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_write_queue_next\">tcp_write_queue_next</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_can_shift\">skb_can_shift</a>(<a class=\"id\" href=\"#skb\">skb</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>)) ||", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_TAGBITS\">TCPCB_TAGBITS</a>) != <a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#mss\">mss</a> != <a class=\"id\" href=\"#tcp_skb_seglen\">tcp_skb_seglen</a>(<a class=\"id\" href=\"#skb\">skb</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shift\">skb_shift</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcount\">pcount</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_shifted_skb\">tcp_shifted_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>), <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#mss\">mss</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fack_count\">fack_count</a> += <a class=\"id\" href=\"#pcount\">pcount</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<a class=\"id\" href=\"#noop\">noop</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<a class=\"id\" href=\"#fallback\">fallback</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_SACKSHIFTFALLBACK\">LINUX_MIB_SACKSHIFTFALLBACK</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_sacktag_walk\">tcp_sacktag_walk</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sack_block\">tcp_sack_block</a> *<a class=\"id\" href=\"#next_dup\">next_dup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sacktag_state\">tcp_sacktag_state</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq\">end_seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dup_sack_in\">dup_sack_in</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue_from\">tcp_for_write_queue_from</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#in_sack\">in_sack</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dup_sack\">dup_sack</a> = <a class=\"id\" href=\"#dup_sack_in\">dup_sack_in</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* queue is in-order =&gt; we can short-circuit the walk early */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#end_seq\">end_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#next_dup\">next_dup</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#next_dup\">next_dup</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_sack\">in_sack</a> = <a class=\"id\" href=\"#tcp_match_skb_to_sack\">tcp_match_skb_to_sack</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_dup\">next_dup</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_dup\">next_dup</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_sack\">in_sack</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dup_sack\">dup_sack</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skb reference here is a bit tricky to get right, since</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * shifting can eat and free both this skb and the next,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so not even _safe variant of the loop is enough.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_sack\">in_sack</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tcp_shift_skb_data\">tcp_shift_skb_data</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#dup_sack\">dup_sack</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> != <a class=\"id\" href=\"#skb\">skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_sack\">in_sack</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_sack\">in_sack</a> = <a class=\"id\" href=\"#tcp_match_skb_to_sack\">tcp_match_skb_to_sack</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_seq\">start_seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#in_sack\">in_sack</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_sack\">in_sack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> = <a class=\"id\" href=\"#tcp_sacktag_one\">tcp_sacktag_one</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dup_sack\">dup_sack</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tcp_highest_sack_seq\">tcp_highest_sack_seq</a>(<a class=\"id\" href=\"#tp\">tp</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_advance_highest_sack\">tcp_advance_highest_sack</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fack_count\">fack_count</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Avoid all extra work that is being done by sacktag while walking in</span>", 
"<span class=\"comment\"> * a normal way</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_sacktag_skip\">tcp_sacktag_skip</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sacktag_state\">tcp_sacktag_state</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#skip_to_seq\">skip_to_seq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue_from\">tcp_for_write_queue_from</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#skip_to_seq\">skip_to_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fack_count\">fack_count</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_maybe_skipping_dsack\">tcp_maybe_skipping_dsack</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sack_block\">tcp_sack_block</a> *<a class=\"id\" href=\"#next_dup\">next_dup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sacktag_state\">tcp_sacktag_state</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#skip_to_seq\">skip_to_seq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_dup\">next_dup</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#next_dup\">next_dup</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#skip_to_seq\">skip_to_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_sacktag_skip\">tcp_sacktag_skip</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#next_dup\">next_dup</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_sacktag_walk\">tcp_sacktag_walk</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#next_dup\">next_dup</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#next_dup\">next_dup</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tcp_sack_cache_ok\">tcp_sack_cache_ok</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, struct <a class=\"id\" href=\"#tcp_sack_block\">tcp_sack_block</a> *<a class=\"id\" href=\"#cache\">cache</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cache\">cache</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#recv_sack_cache\">recv_sack_cache</a> + <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#recv_sack_cache\">recv_sack_cache</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#tcp_sacktag_write_queue\">tcp_sacktag_write_queue</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#ack_skb\">ack_skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#prior_snd_una\">prior_snd_una</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#ptr\">ptr</a> = (<a class=\"id\" href=\"#skb_transport_header\">skb_transport_header</a>(<a class=\"id\" href=\"#ack_skb\">ack_skb</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#ack_skb\">ack_skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sack_block_wire\">tcp_sack_block_wire</a> *<a class=\"id\" href=\"#sp_wire\">sp_wire</a> = (struct <a class=\"id\" href=\"#tcp_sack_block_wire\">tcp_sack_block_wire</a> *)(<a class=\"id\" href=\"#ptr\">ptr</a>+2);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sack_block\">tcp_sack_block</a> <a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#TCP_NUM_SACKS\">TCP_NUM_SACKS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sack_block\">tcp_sack_block</a> *<a class=\"id\" href=\"#cache\">cache</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sacktag_state\">tcp_sacktag_state</a> <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_sacks\">num_sacks</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#TCP_NUM_SACKS\">TCP_NUM_SACKS</a>, (<a class=\"id\" href=\"#ptr\">ptr</a>[1] - <a class=\"id\" href=\"#TCPOLEN_SACK_BASE\">TCPOLEN_SACK_BASE</a>) >> 3);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#used_sacks\">used_sacks</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found_dup_sack\">found_dup_sack</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#first_sack_index\">first_sack_index</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#flag\">flag</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#reord\">reord</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_highest_sack_reset\">tcp_highest_sack_reset</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found_dup_sack\">found_dup_sack</a> = <a class=\"id\" href=\"#tcp_check_dsack\">tcp_check_dsack</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#ack_skb\">ack_skb</a>, <a class=\"id\" href=\"#sp_wire\">sp_wire</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#num_sacks\">num_sacks</a>, <a class=\"id\" href=\"#prior_snd_una\">prior_snd_una</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found_dup_sack\">found_dup_sack</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#flag\">flag</a> |= <a class=\"id\" href=\"#FLAG_DSACKING_ACK\">FLAG_DSACKING_ACK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Eliminate too old ACKs, but take into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * account more or less fresh ones, they can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * contain valid SACK info.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#ack_skb\">ack_skb</a>)-><a class=\"id\" href=\"#ack_seq\">ack_seq</a>, <a class=\"id\" href=\"#prior_snd_una\">prior_snd_una</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#max_window\">max_window</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#used_sacks\">used_sacks</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_sack_index\">first_sack_index</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_sacks\">num_sacks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dup_sack\">dup_sack</a> = !<a class=\"id\" href=\"#i\">i</a> && <a class=\"id\" href=\"#found_dup_sack\">found_dup_sack</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#used_sacks\">used_sacks</a>].<a class=\"id\" href=\"#start_seq\">start_seq</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#sp_wire\">sp_wire</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_seq\">start_seq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#used_sacks\">used_sacks</a>].<a class=\"id\" href=\"#end_seq\">end_seq</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#sp_wire\">sp_wire</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_is_sackblock_valid\">tcp_is_sackblock_valid</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#dup_sack\">dup_sack</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#used_sacks\">used_sacks</a>].<a class=\"id\" href=\"#start_seq\">start_seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#used_sacks\">used_sacks</a>].<a class=\"id\" href=\"#end_seq\">end_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mib_idx\">mib_idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dup_sack\">dup_sack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPDSACKIGNOREDNOUNDO\">LINUX_MIB_TCPDSACKIGNOREDNOUNDO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPDSACKIGNOREDOLD\">LINUX_MIB_TCPDSACKIGNOREDOLD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't count olds caused by ACK reordering */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#ack_skb\">ack_skb</a>)-><a class=\"id\" href=\"#ack_seq\">ack_seq</a> != <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#used_sacks\">used_sacks</a>].<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPSACKDISCARD\">LINUX_MIB_TCPSACKDISCARD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#mib_idx\">mib_idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_sack_index\">first_sack_index</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ignore very old stuff early */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#used_sacks\">used_sacks</a>].<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#prior_snd_una\">prior_snd_una</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#used_sacks\">used_sacks</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* order SACK blocks to allow in order walk of the retrans queue */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#used_sacks\">used_sacks</a> - 1; <a class=\"id\" href=\"#i\">i</a> &gt; 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#j\">j</a> + 1].<a class=\"id\" href=\"#start_seq\">start_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap\">swap</a>(<a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#j\">j</a>], <a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#j\">j</a> + 1]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Track where the first SACK block goes to */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a> == <a class=\"id\" href=\"#first_sack_index\">first_sack_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_sack_index\">first_sack_index</a> = <a class=\"id\" href=\"#j\">j</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#fack_count\">fack_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It's already past, so skip checking against it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#recv_sack_cache\">recv_sack_cache</a> + <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#recv_sack_cache\">recv_sack_cache</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#recv_sack_cache\">recv_sack_cache</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip empty blocks in at head of the cache */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#tcp_sack_cache_ok\">tcp_sack_cache_ok</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#cache\">cache</a>) && !<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>       !<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#used_sacks\">used_sacks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#start_seq\">start_seq</a> = <a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_seq\">start_seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end_seq\">end_seq</a> = <a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dup_sack\">dup_sack</a> = (<a class=\"id\" href=\"#found_dup_sack\">found_dup_sack</a> && (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#first_sack_index\">first_sack_index</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sack_block\">tcp_sack_block</a> *<a class=\"id\" href=\"#next_dup\">next_dup</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#found_dup_sack\">found_dup_sack</a> && ((<a class=\"id\" href=\"#i\">i</a> + 1) == <a class=\"id\" href=\"#first_sack_index\">first_sack_index</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_dup\">next_dup</a> = &amp;<a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#i\">i</a> + 1];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Event \"B\" in the comment above. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#flag\">flag</a> |= <a class=\"id\" href=\"#FLAG_DATA_LOST\">FLAG_DATA_LOST</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip too early cached blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#tcp_sack_cache_ok\">tcp_sack_cache_ok</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#cache\">cache</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>       !<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Can skip some work by looking recv_sack_cache? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_sack_cache_ok\">tcp_sack_cache_ok</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#cache\">cache</a>) && !<a class=\"id\" href=\"#dup_sack\">dup_sack</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Head todo? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_sacktag_skip\">tcp_sacktag_skip</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>, &amp;<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#start_seq\">start_seq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_sacktag_walk\">tcp_sacktag_walk</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#next_dup\">next_dup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#start_seq\">start_seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#start_seq\">start_seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dup_sack\">dup_sack</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Rest of the block already fully processed? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#advance_sp\">advance_sp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_maybe_skipping_dsack\">tcp_maybe_skipping_dsack</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#next_dup\">next_dup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ...tail remains todo... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_highest_sack_seq\">tcp_highest_sack_seq</a>(<a class=\"id\" href=\"#tp\">tp</a>) == <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ...but better entrypoint exists! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_highest_sack\">tcp_highest_sack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#fack_count\">fack_count</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#walk\">walk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_sacktag_skip\">tcp_sacktag_skip</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>, &amp;<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#end_seq\">end_seq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check overlap against next cached too (past this one already) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#tcp_highest_sack_seq\">tcp_highest_sack_seq</a>(<a class=\"id\" href=\"#tp\">tp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_highest_sack\">tcp_highest_sack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#fack_count\">fack_count</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_sacktag_skip\">tcp_sacktag_skip</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>, &amp;<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#start_seq\">start_seq</a>);", 
"", 
"<a class=\"id\" href=\"#walk\">walk</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_sacktag_walk\">tcp_sacktag_walk</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#next_dup\">next_dup</a>, &amp;<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#start_seq\">start_seq</a>, <a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#dup_sack\">dup_sack</a>);", 
"", 
"<a class=\"id\" href=\"#advance_sp\">advance_sp</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SACK enhanced FRTO (RFC4138, Appendix B): Clearing correct</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * due to in-order walk</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_highmark\">frto_highmark</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#flag\">flag</a> &= ~<a class=\"id\" href=\"#FLAG_ONLY_ORIG_SACKED\">FLAG_ONLY_ORIG_SACKED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the head of the cache sack blocks so we can skip it next time */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#recv_sack_cache\">recv_sack_cache</a>) - <a class=\"id\" href=\"#used_sacks\">used_sacks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#recv_sack_cache\">recv_sack_cache</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start_seq\">start_seq</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#recv_sack_cache\">recv_sack_cache</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end_seq\">end_seq</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#used_sacks\">used_sacks</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#recv_sack_cache\">recv_sack_cache</a>[<a class=\"id\" href=\"#i\">i</a>++] = <a class=\"id\" href=\"#sp\">sp</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_mark_lost_retrans\">tcp_mark_lost_retrans</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_verify_left_out\">tcp_verify_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#reord\">reord</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a>) &&", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> != <a class=\"id\" href=\"#TCP_CA_Loss\">TCP_CA_Loss</a>) || <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a>) &&", 
"<span class=\"ts\"/>    (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_highmark\">frto_highmark</a> || <a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_highmark\">frto_highmark</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_update_reordering\">tcp_update_reordering</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a> - <a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#reord\">reord</a>, 0);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"", 
"#if <a class=\"id\" href=\"#FASTRETRANS_DEBUG\">FASTRETRANS_DEBUG</a> &gt; 0", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>((int)<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> &lt; 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>((int)<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a> &lt; 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>((int)<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a> &lt; 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>((int)<a class=\"id\" href=\"#tcp_packets_in_flight\">tcp_packets_in_flight</a>(<a class=\"id\" href=\"#tp\">tp</a>) &lt; 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#flag\">flag</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Limits sacked_out so that sum with lost_out isn't ever larger than</span>", 
"<span class=\"comment\"> * packets_out. Returns zero if sacked_out adjustement wasn't necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tcp_limit_reno_sacked\">tcp_limit_reno_sacked</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#holes\">holes</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#holes\">holes</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a>, 1U);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#holes\">holes</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#holes\">holes</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> + <a class=\"id\" href=\"#holes\">holes</a>) &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a> - <a class=\"id\" href=\"#holes\">holes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* If we receive more dupacks than we expected counting segments</span>", 
"<span class=\"comment\"> * in assumption of absent reordering, interpret this as reordering.</span>", 
"<span class=\"comment\"> * The only another reason could be bug in receiver TCP.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_check_reno_reordering\">tcp_check_reno_reordering</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, const int <a class=\"id\" href=\"#addend\">addend</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_limit_reno_sacked\">tcp_limit_reno_sacked</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_update_reordering\">tcp_update_reordering</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a> + <a class=\"id\" href=\"#addend\">addend</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/* Emulate SACKs for SACKless connection: account for a new dupack. */</span>", 
"", 
"static void <a class=\"id\" href=\"#tcp_add_reno_sack\">tcp_add_reno_sack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_check_reno_reordering\">tcp_check_reno_reordering</a>(<a class=\"id\" href=\"#sk\">sk</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_verify_left_out\">tcp_verify_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Account for ACK, ACKing some data in Reno Recovery phase. */</span>", 
"", 
"static void <a class=\"id\" href=\"#tcp_remove_reno_sacks\">tcp_remove_reno_sacks</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#acked\">acked</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acked\">acked</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* One ACK acked hole. The rest eat duplicate ACKs. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acked\">acked</a> - 1 >= <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> -= <a class=\"id\" href=\"#acked\">acked</a> - 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_check_reno_reordering\">tcp_check_reno_reordering</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#acked\">acked</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_verify_left_out\">tcp_verify_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_reset_reno_sack\">tcp_reset_reno_sack</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> = 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tcp_is_sackfrto\">tcp_is_sackfrto</a>(const struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#sysctl_tcp_frto\">sysctl_tcp_frto</a> == 0x2) && !<a class=\"id\" href=\"#tcp_is_reno\">tcp_is_reno</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* F-RTO can only be used if TCP has never retransmitted anything other than</span>", 
"<span class=\"comment\"> * head (SACK enhanced variant from Appendix B of RFC4138 is more robust here)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tcp_use_frto\">tcp_use_frto</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sysctl_tcp_frto\">sysctl_tcp_frto</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* MTU probe and F-RTO won't really play nicely along currently */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#probe_size\">probe_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_sackfrto\">tcp_is_sackfrto</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Avoid expensive walking of rexmit queue if possible */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_skb_is_last\">tcp_skb_is_last</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_write_queue_next\">tcp_write_queue_next</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);<span class=\"ts\"/><span class=\"comment\">/* Skips head */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue_from\">tcp_for_write_queue_from</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_RETRANS\">TCPCB_RETRANS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Short-circuit when first non-SACKed skb has been checked */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/* RTO occurred, but do not yet enter Loss state. Instead, defer RTO</span>", 
"<span class=\"comment\"> * recovery a bit and use heuristics in tcp_process_frto() to detect if</span>", 
"<span class=\"comment\"> * the RTO was spurious. Only clear SACKED_RETRANS of the head here to</span>", 
"<span class=\"comment\"> * keep retrans_out counting accurate (with SACK F-RTO, other than head</span>", 
"<span class=\"comment\"> * may still have that bit set); TCPCB_LOST and remaining SACKED_RETRANS</span>", 
"<span class=\"comment\"> * bits are handled if the Loss state is really to be entered (in</span>", 
"<span class=\"comment\"> * tcp_enter_frto_loss).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do like tcp_enter_loss() would; when RTO expires the second time it</span>", 
"<span class=\"comment\"> * does:</span>", 
"<span class=\"comment\"> *  \"Reduce ssthresh if it has not yet been made inside this window.\"</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_enter_frto\">tcp_enter_frto</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_counter\">frto_counter</a> && <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> <= <a class=\"id\" href=\"#TCP_CA_Disorder\">TCP_CA_Disorder</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a> == <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a> ||", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> == <a class=\"id\" href=\"#TCP_CA_Loss\">TCP_CA_Loss</a> || <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_counter\">frto_counter</a>) &&", 
"<span class=\"ts\"/>     !<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_retransmits\">icsk_retransmits</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#prior_ssthresh\">prior_ssthresh</a> = <a class=\"id\" href=\"#tcp_current_ssthresh\">tcp_current_ssthresh</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Our state is too optimistic in ssthresh() call because cwnd</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is not reduced until tcp_enter_frto_loss() when previous F-RTO</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * recovery has not yet completed. Pattern would be this: RTO,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Cumulative ACK, RTO (2xRTO for the same segment does not end</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * up here twice).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * RFC4138 should be more specific on what to do, even though</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * RTO is quite unlikely to occur after the first Cumulative ACK</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * due to back-off and complexity of triggering events ...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_counter\">frto_counter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#stored_cwnd\">stored_cwnd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stored_cwnd\">stored_cwnd</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#ssthresh\">ssthresh</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#stored_cwnd\">stored_cwnd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#ssthresh\">ssthresh</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
];
xr_frag_insert('l/62/07c2945f6ba3ea61b6f5075e5b6f9076ea0305.xr', __xr_tmp);
