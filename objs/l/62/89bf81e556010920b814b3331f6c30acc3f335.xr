var __xr_tmp = [
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: utresrc - Resource management utilities</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"amlresrc.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_UTILITIES\">ACPI_UTILITIES</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"utresrc\")", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#ACPI_DISASSEMBLER\">ACPI_DISASSEMBLER</a>) || <a class=\"id\" href=\"#defined\">defined</a> (<a class=\"id\" href=\"#ACPI_DEBUGGER\">ACPI_DEBUGGER</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Strings used to decode resource descriptors.</span>", 
"<span class=\"comment\"> * Used by both the disasssembler and the debugger resource dump routines</span>", 
"<span class=\"comment\"> */</span>", 
"const char *<a class=\"id\" href=\"#acpi_gbl_bm_decode\">acpi_gbl_bm_decode</a>[] = {", 
"<span class=\"ts\"/>\"NotBusMaster\",", 
"<span class=\"ts\"/>\"BusMaster\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_config_decode\">acpi_gbl_config_decode</a>[] = {", 
"<span class=\"ts\"/>\"0 - Good Configuration\",", 
"<span class=\"ts\"/>\"1 - Acceptable Configuration\",", 
"<span class=\"ts\"/>\"2 - Suboptimal Configuration\",", 
"<span class=\"ts\"/>\"3 - ***Invalid Configuration***\",", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_consume_decode\">acpi_gbl_consume_decode</a>[] = {", 
"<span class=\"ts\"/>\"ResourceProducer\",", 
"<span class=\"ts\"/>\"ResourceConsumer\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_dec_decode\">acpi_gbl_dec_decode</a>[] = {", 
"<span class=\"ts\"/>\"PosDecode\",", 
"<span class=\"ts\"/>\"SubDecode\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_he_decode\">acpi_gbl_he_decode</a>[] = {", 
"<span class=\"ts\"/>\"Level\",", 
"<span class=\"ts\"/>\"Edge\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_io_decode\">acpi_gbl_io_decode</a>[] = {", 
"<span class=\"ts\"/>\"Decode10\",", 
"<span class=\"ts\"/>\"Decode16\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_ll_decode\">acpi_gbl_ll_decode</a>[] = {", 
"<span class=\"ts\"/>\"ActiveHigh\",", 
"<span class=\"ts\"/>\"ActiveLow\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_max_decode\">acpi_gbl_max_decode</a>[] = {", 
"<span class=\"ts\"/>\"MaxNotFixed\",", 
"<span class=\"ts\"/>\"MaxFixed\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_mem_decode\">acpi_gbl_mem_decode</a>[] = {", 
"<span class=\"ts\"/>\"NonCacheable\",", 
"<span class=\"ts\"/>\"Cacheable\",", 
"<span class=\"ts\"/>\"WriteCombining\",", 
"<span class=\"ts\"/>\"Prefetchable\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_min_decode\">acpi_gbl_min_decode</a>[] = {", 
"<span class=\"ts\"/>\"MinNotFixed\",", 
"<span class=\"ts\"/>\"MinFixed\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_mtp_decode\">acpi_gbl_mtp_decode</a>[] = {", 
"<span class=\"ts\"/>\"AddressRangeMemory\",", 
"<span class=\"ts\"/>\"AddressRangeReserved\",", 
"<span class=\"ts\"/>\"AddressRangeACPI\",", 
"<span class=\"ts\"/>\"AddressRangeNVS\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_rng_decode\">acpi_gbl_rng_decode</a>[] = {", 
"<span class=\"ts\"/>\"InvalidRanges\",", 
"<span class=\"ts\"/>\"NonISAOnlyRanges\",", 
"<span class=\"ts\"/>\"ISAOnlyRanges\",", 
"<span class=\"ts\"/>\"EntireRange\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_rw_decode\">acpi_gbl_rw_decode</a>[] = {", 
"<span class=\"ts\"/>\"ReadOnly\",", 
"<span class=\"ts\"/>\"ReadWrite\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_shr_decode\">acpi_gbl_shr_decode</a>[] = {", 
"<span class=\"ts\"/>\"Exclusive\",", 
"<span class=\"ts\"/>\"Shared\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_siz_decode\">acpi_gbl_siz_decode</a>[] = {", 
"<span class=\"ts\"/>\"Transfer8\",", 
"<span class=\"ts\"/>\"Transfer8_16\",", 
"<span class=\"ts\"/>\"Transfer16\",", 
"<span class=\"ts\"/>\"InvalidSize\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_trs_decode\">acpi_gbl_trs_decode</a>[] = {", 
"<span class=\"ts\"/>\"DenseTranslation\",", 
"<span class=\"ts\"/>\"SparseTranslation\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_ttp_decode\">acpi_gbl_ttp_decode</a>[] = {", 
"<span class=\"ts\"/>\"TypeStatic\",", 
"<span class=\"ts\"/>\"TypeTranslation\"", 
"};", 
"", 
"const char *<a class=\"id\" href=\"#acpi_gbl_typ_decode\">acpi_gbl_typ_decode</a>[] = {", 
"<span class=\"ts\"/>\"Compatibility\",", 
"<span class=\"ts\"/>\"TypeA\",", 
"<span class=\"ts\"/>\"TypeB\",", 
"<span class=\"ts\"/>\"TypeF\"", 
"};", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Base sizes of the raw AML resource descriptors, indexed by resource type.</span>", 
"<span class=\"comment\"> * Zero indicates a reserved (and therefore invalid) resource type.</span>", 
"<span class=\"comment\"> */</span>", 
"const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_gbl_resource_aml_sizes\">acpi_gbl_resource_aml_sizes</a>[] = {", 
"<span class=\"ts\"/><span class=\"comment\">/* Small descriptors */</span>", 
"", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_SMALL\">ACPI_AML_SIZE_SMALL</a>(struct <a class=\"id\" href=\"#aml_resource_irq\">aml_resource_irq</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_SMALL\">ACPI_AML_SIZE_SMALL</a>(struct <a class=\"id\" href=\"#aml_resource_dma\">aml_resource_dma</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_SMALL\">ACPI_AML_SIZE_SMALL</a>(struct <a class=\"id\" href=\"#aml_resource_start_dependent\">aml_resource_start_dependent</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_SMALL\">ACPI_AML_SIZE_SMALL</a>(struct <a class=\"id\" href=\"#aml_resource_end_dependent\">aml_resource_end_dependent</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_SMALL\">ACPI_AML_SIZE_SMALL</a>(struct <a class=\"id\" href=\"#aml_resource_io\">aml_resource_io</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_SMALL\">ACPI_AML_SIZE_SMALL</a>(struct <a class=\"id\" href=\"#aml_resource_fixed_io\">aml_resource_fixed_io</a>),", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_SMALL\">ACPI_AML_SIZE_SMALL</a>(struct <a class=\"id\" href=\"#aml_resource_vendor_small\">aml_resource_vendor_small</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_SMALL\">ACPI_AML_SIZE_SMALL</a>(struct <a class=\"id\" href=\"#aml_resource_end_tag\">aml_resource_end_tag</a>),", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Large descriptors */</span>", 
"", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_LARGE\">ACPI_AML_SIZE_LARGE</a>(struct <a class=\"id\" href=\"#aml_resource_memory24\">aml_resource_memory24</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_LARGE\">ACPI_AML_SIZE_LARGE</a>(struct <a class=\"id\" href=\"#aml_resource_generic_register\">aml_resource_generic_register</a>),", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_LARGE\">ACPI_AML_SIZE_LARGE</a>(struct <a class=\"id\" href=\"#aml_resource_vendor_large\">aml_resource_vendor_large</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_LARGE\">ACPI_AML_SIZE_LARGE</a>(struct <a class=\"id\" href=\"#aml_resource_memory32\">aml_resource_memory32</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_LARGE\">ACPI_AML_SIZE_LARGE</a>(struct <a class=\"id\" href=\"#aml_resource_fixed_memory32\">aml_resource_fixed_memory32</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_LARGE\">ACPI_AML_SIZE_LARGE</a>(struct <a class=\"id\" href=\"#aml_resource_address32\">aml_resource_address32</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_LARGE\">ACPI_AML_SIZE_LARGE</a>(struct <a class=\"id\" href=\"#aml_resource_address16\">aml_resource_address16</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_LARGE\">ACPI_AML_SIZE_LARGE</a>(struct <a class=\"id\" href=\"#aml_resource_extended_irq\">aml_resource_extended_irq</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_LARGE\">ACPI_AML_SIZE_LARGE</a>(struct <a class=\"id\" href=\"#aml_resource_address64\">aml_resource_address64</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_AML_SIZE_LARGE\">ACPI_AML_SIZE_LARGE</a>(struct <a class=\"id\" href=\"#aml_resource_extended_address64\">aml_resource_extended_address64</a>)", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Resource types, used to validate the resource length field.</span>", 
"<span class=\"comment\"> * The length of fixed-length types must match exactly, variable</span>", 
"<span class=\"comment\"> * lengths must meet the minimum required length, etc.</span>", 
"<span class=\"comment\"> * Zero indicates a reserved (and therefore invalid) resource type.</span>", 
"<span class=\"comment\"> */</span>", 
"static const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_gbl_resource_types\">acpi_gbl_resource_types</a>[] = {", 
"<span class=\"ts\"/><span class=\"comment\">/* Small descriptors */</span>", 
"", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_SMALL_VARIABLE_LENGTH\">ACPI_SMALL_VARIABLE_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FIXED_LENGTH\">ACPI_FIXED_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_SMALL_VARIABLE_LENGTH\">ACPI_SMALL_VARIABLE_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FIXED_LENGTH\">ACPI_FIXED_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FIXED_LENGTH\">ACPI_FIXED_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FIXED_LENGTH\">ACPI_FIXED_LENGTH</a>,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_VARIABLE_LENGTH\">ACPI_VARIABLE_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FIXED_LENGTH\">ACPI_FIXED_LENGTH</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Large descriptors */</span>", 
"", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FIXED_LENGTH\">ACPI_FIXED_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FIXED_LENGTH\">ACPI_FIXED_LENGTH</a>,", 
"<span class=\"ts\"/>0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_VARIABLE_LENGTH\">ACPI_VARIABLE_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FIXED_LENGTH\">ACPI_FIXED_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FIXED_LENGTH\">ACPI_FIXED_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_VARIABLE_LENGTH\">ACPI_VARIABLE_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_VARIABLE_LENGTH\">ACPI_VARIABLE_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_VARIABLE_LENGTH\">ACPI_VARIABLE_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_VARIABLE_LENGTH\">ACPI_VARIABLE_LENGTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FIXED_LENGTH\">ACPI_FIXED_LENGTH</a>", 
"};", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_walk_aml_resources</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Aml             - Pointer to the raw AML resource template</span>", 
"<span class=\"comment\"> *              aml_length      - Length of the entire template</span>", 
"<span class=\"comment\"> *              user_function   - Called once for each descriptor found. If</span>", 
"<span class=\"comment\"> *                                NULL, a pointer to the end_tag is returned</span>", 
"<span class=\"comment\"> *              Context         - Passed to user_function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Walk a raw AML resource list(buffer). User function called</span>", 
"<span class=\"comment\"> *              once for each resource found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ut_walk_aml_resources\">acpi_ut_walk_aml_resources</a>(<a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#aml\">aml</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#acpi_size\">acpi_size</a> <a class=\"id\" href=\"#aml_length\">aml_length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#acpi_walk_aml_callback\">acpi_walk_aml_callback</a> <a class=\"id\" href=\"#user_function\">user_function</a>, void **<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#end_aml\">end_aml</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#resource_index\">resource_index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ut_walk_aml_resources\">ut_walk_aml_resources</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The absolute minimum resource template is one end_tag descriptor */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#aml_length\">aml_length</a> &lt; sizeof(struct <a class=\"id\" href=\"#aml_resource_end_tag\">aml_resource_end_tag</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_NO_RESOURCE_END_TAG\">AE_AML_NO_RESOURCE_END_TAG</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Point to the end of the resource template buffer */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_aml\">end_aml</a> = <a class=\"id\" href=\"#aml\">aml</a> + <a class=\"id\" href=\"#aml_length\">aml_length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Walk the byte list, abort on any invalid descriptor type or length */</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#aml\">aml</a> &lt; <a class=\"id\" href=\"#end_aml\">end_aml</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Validate the Resource Type and Resource Length */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_validate_resource\">acpi_ut_validate_resource</a>(<a class=\"id\" href=\"#aml\">aml</a>, &amp;<a class=\"id\" href=\"#resource_index\">resource_index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the length of this descriptor */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#acpi_ut_get_descriptor_length\">acpi_ut_get_descriptor_length</a>(<a class=\"id\" href=\"#aml\">aml</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Invoke the user function */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user_function\">user_function</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#user_function\">user_function</a>(<a class=\"id\" href=\"#aml\">aml</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#resource_index\">resource_index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#context\">context</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* An end_tag descriptor terminates this resource template */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ut_get_resource_type\">acpi_ut_get_resource_type</a>(<a class=\"id\" href=\"#aml\">aml</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_RESOURCE_NAME_END_TAG\">ACPI_RESOURCE_NAME_END_TAG</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * There must be at least one more byte in the buffer for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the 2nd byte of the end_tag</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#aml\">aml</a> + 1) >= <a class=\"id\" href=\"#end_aml\">end_aml</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_NO_RESOURCE_END_TAG\">AE_AML_NO_RESOURCE_END_TAG</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Return the pointer to the end_tag if requested */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#user_function\">user_function</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#context\">context</a> = <a class=\"id\" href=\"#aml\">aml</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Normal exit */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aml\">aml</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Did not find an end_tag descriptor */</span>", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_NO_RESOURCE_END_TAG\">AE_AML_NO_RESOURCE_END_TAG</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_validate_resource</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Aml             - Pointer to the raw AML resource descriptor</span>", 
"<span class=\"comment\"> *              return_index    - Where the resource index is returned. NULL</span>", 
"<span class=\"comment\"> *                                if the index is not required.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status, and optionally the Index into the global resource tables</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Validate an AML resource descriptor by checking the Resource</span>", 
"<span class=\"comment\"> *              Type and Resource Length. Returns an index into the global</span>", 
"<span class=\"comment\"> *              resource information/dispatch tables for later use.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ut_validate_resource\">acpi_ut_validate_resource</a>(void *<a class=\"id\" href=\"#aml\">aml</a>, <a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#return_index\">return_index</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#resource_type\">resource_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#resource_index\">resource_index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_rs_length\">acpi_rs_length</a> <a class=\"id\" href=\"#resource_length\">resource_length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_rs_length\">acpi_rs_length</a> <a class=\"id\" href=\"#minimum_resource_length\">minimum_resource_length</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Validate the resource_type field (Byte 0)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_type\">resource_type</a> = <a class=\"id\" href=\"#ACPI_GET8\">ACPI_GET8</a>(<a class=\"id\" href=\"#aml\">aml</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Byte 0 contains the descriptor name (Resource Type)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Examine the large/small bit in the resource header</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#resource_type\">resource_type</a> &amp; <a class=\"id\" href=\"#ACPI_RESOURCE_NAME_LARGE\">ACPI_RESOURCE_NAME_LARGE</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Verify the large resource type (name) against the max */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#resource_type\">resource_type</a> &gt; <a class=\"id\" href=\"#ACPI_RESOURCE_NAME_LARGE_MAX\">ACPI_RESOURCE_NAME_LARGE_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_INVALID_RESOURCE_TYPE\">AE_AML_INVALID_RESOURCE_TYPE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Large Resource Type -- bits 6:0 contain the name</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Translate range 0x80-0x8B to index range 0x10-0x1B</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_index\">resource_index</a> = (<a class=\"id\" href=\"#u8\">u8</a>) (<a class=\"id\" href=\"#resource_type\">resource_type</a> - 0x70);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Small Resource Type -- bits 6:3 contain the name</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Shift range to index range 0x00-0x0F</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_index\">resource_index</a> = (<a class=\"id\" href=\"#u8\">u8</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#resource_type\">resource_type</a> &amp; <a class=\"id\" href=\"#ACPI_RESOURCE_NAME_SMALL_MASK\">ACPI_RESOURCE_NAME_SMALL_MASK</a>) >> 3);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check validity of the resource type, zero indicates name is invalid */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_gbl_resource_types\">acpi_gbl_resource_types</a>[<a class=\"id\" href=\"#resource_index\">resource_index</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_INVALID_RESOURCE_TYPE\">AE_AML_INVALID_RESOURCE_TYPE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Validate the resource_length field. This ensures that the length</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    is at least reasonable, and guarantees that it is non-zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_length\">resource_length</a> = <a class=\"id\" href=\"#acpi_ut_get_resource_length\">acpi_ut_get_resource_length</a>(<a class=\"id\" href=\"#aml\">aml</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#minimum_resource_length\">minimum_resource_length</a> = <a class=\"id\" href=\"#acpi_gbl_resource_aml_sizes\">acpi_gbl_resource_aml_sizes</a>[<a class=\"id\" href=\"#resource_index\">resource_index</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate based upon the type of resource - fixed length or variable */</span>", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#acpi_gbl_resource_types\">acpi_gbl_resource_types</a>[<a class=\"id\" href=\"#resource_index\">resource_index</a>]) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_FIXED_LENGTH\">ACPI_FIXED_LENGTH</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fixed length resource, length must match exactly */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#resource_length\">resource_length</a> != <a class=\"id\" href=\"#minimum_resource_length\">minimum_resource_length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_BAD_RESOURCE_LENGTH\">AE_AML_BAD_RESOURCE_LENGTH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_VARIABLE_LENGTH\">ACPI_VARIABLE_LENGTH</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Variable length resource, length must be at least the minimum */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#resource_length\">resource_length</a> &lt; <a class=\"id\" href=\"#minimum_resource_length\">minimum_resource_length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_BAD_RESOURCE_LENGTH\">AE_AML_BAD_RESOURCE_LENGTH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_SMALL_VARIABLE_LENGTH\">ACPI_SMALL_VARIABLE_LENGTH</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Small variable length resource, length can be (Min) or (Min-1) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#resource_length\">resource_length</a> &gt; <a class=\"id\" href=\"#minimum_resource_length\">minimum_resource_length</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#resource_length\">resource_length</a> &lt; (<a class=\"id\" href=\"#minimum_resource_length\">minimum_resource_length</a> - 1))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_BAD_RESOURCE_LENGTH\">AE_AML_BAD_RESOURCE_LENGTH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Shouldn't happen (because of validation earlier), but be sure */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_AML_INVALID_RESOURCE_TYPE\">AE_AML_INVALID_RESOURCE_TYPE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Optionally return the resource table index */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#return_index\">return_index</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#return_index\">return_index</a> = <a class=\"id\" href=\"#resource_index\">resource_index</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_get_resource_type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Aml             - Pointer to the raw AML resource descriptor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      The Resource Type with no extraneous bits (except the</span>", 
"<span class=\"comment\"> *              Large/Small descriptor bit -- this is left alone)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Extract the Resource Type/Name from the first byte of</span>", 
"<span class=\"comment\"> *              a resource descriptor.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ut_get_resource_type\">acpi_ut_get_resource_type</a>(void *<a class=\"id\" href=\"#aml\">aml</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Byte 0 contains the descriptor name (Resource Type)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Examine the large/small bit in the resource header</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_GET8\">ACPI_GET8</a>(<a class=\"id\" href=\"#aml\">aml</a>) &amp; <a class=\"id\" href=\"#ACPI_RESOURCE_NAME_LARGE\">ACPI_RESOURCE_NAME_LARGE</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Large Resource Type -- bits 6:0 contain the name */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#ACPI_GET8\">ACPI_GET8</a>(<a class=\"id\" href=\"#aml\">aml</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Small Resource Type -- bits 6:3 contain the name */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return ((<a class=\"id\" href=\"#u8\">u8</a>) (<a class=\"id\" href=\"#ACPI_GET8\">ACPI_GET8</a>(<a class=\"id\" href=\"#aml\">aml</a>) &amp; <a class=\"id\" href=\"#ACPI_RESOURCE_NAME_SMALL_MASK\">ACPI_RESOURCE_NAME_SMALL_MASK</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_get_resource_length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Aml             - Pointer to the raw AML resource descriptor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Byte Length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get the \"Resource Length\" of a raw AML descriptor. By</span>", 
"<span class=\"comment\"> *              definition, this does not include the size of the descriptor</span>", 
"<span class=\"comment\"> *              header or the length field itself.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#acpi_ut_get_resource_length\">acpi_ut_get_resource_length</a>(void *<a class=\"id\" href=\"#aml\">aml</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_rs_length\">acpi_rs_length</a> <a class=\"id\" href=\"#resource_length\">resource_length</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Byte 0 contains the descriptor name (Resource Type)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Examine the large/small bit in the resource header</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_GET8\">ACPI_GET8</a>(<a class=\"id\" href=\"#aml\">aml</a>) &amp; <a class=\"id\" href=\"#ACPI_RESOURCE_NAME_LARGE\">ACPI_RESOURCE_NAME_LARGE</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Large Resource type -- bytes 1-2 contain the 16-bit length */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_16_TO_16\">ACPI_MOVE_16_TO_16</a>(&amp;<a class=\"id\" href=\"#resource_length\">resource_length</a>, <a class=\"id\" href=\"#ACPI_ADD_PTR\">ACPI_ADD_PTR</a>(<a class=\"id\" href=\"#u8\">u8</a>, <a class=\"id\" href=\"#aml\">aml</a>, 1));", 
"", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Small Resource type -- bits 2:0 of byte 0 contain the length */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_length\">resource_length</a> = (<a class=\"id\" href=\"#u16\">u16</a>) (<a class=\"id\" href=\"#ACPI_GET8\">ACPI_GET8</a>(<a class=\"id\" href=\"#aml\">aml</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_RESOURCE_NAME_SMALL_LENGTH_MASK\">ACPI_RESOURCE_NAME_SMALL_LENGTH_MASK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#resource_length\">resource_length</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_get_resource_header_length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Aml             - Pointer to the raw AML resource descriptor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Length of the AML header (depends on large/small descriptor)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get the length of the header for this resource.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ut_get_resource_header_length\">acpi_ut_get_resource_header_length</a>(void *<a class=\"id\" href=\"#aml\">aml</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Examine the large/small bit in the resource header */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_GET8\">ACPI_GET8</a>(<a class=\"id\" href=\"#aml\">aml</a>) &amp; <a class=\"id\" href=\"#ACPI_RESOURCE_NAME_LARGE\">ACPI_RESOURCE_NAME_LARGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (sizeof(struct <a class=\"id\" href=\"#aml_resource_large_header\">aml_resource_large_header</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (sizeof(struct <a class=\"id\" href=\"#aml_resource_small_header\">aml_resource_small_header</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_get_descriptor_length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Aml             - Pointer to the raw AML resource descriptor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Byte length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get the total byte length of a raw AML descriptor, including the</span>", 
"<span class=\"comment\"> *              length of the descriptor header and the length field itself.</span>", 
"<span class=\"comment\"> *              Used to walk descriptor lists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_ut_get_descriptor_length\">acpi_ut_get_descriptor_length</a>(void *<a class=\"id\" href=\"#aml\">aml</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the Resource Length (does not include header length) and add</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the header length (depends on if this is a small or large resource)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#acpi_ut_get_resource_length\">acpi_ut_get_resource_length</a>(<a class=\"id\" href=\"#aml\">aml</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_get_resource_header_length\">acpi_ut_get_resource_header_length</a>(<a class=\"id\" href=\"#aml\">aml</a>));", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_get_resource_end_tag</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  obj_desc        - The resource template buffer object</span>", 
"<span class=\"comment\"> *              end_tag         - Where the pointer to the end_tag is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status, pointer to the end tag</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Find the end_tag resource descriptor in an AML resource template</span>", 
"<span class=\"comment\"> *              Note: allows a buffer length of zero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ut_get_resource_end_tag\">acpi_ut_get_resource_end_tag</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> * <a class=\"id\" href=\"#obj_desc\">obj_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u8\">u8</a> ** <a class=\"id\" href=\"#end_tag\">end_tag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ut_get_resource_end_tag\">ut_get_resource_end_tag</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow a buffer length of zero */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#end_tag\">end_tag</a> = <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate the template and get a pointer to the end_tag */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_walk_aml_resources\">acpi_ut_walk_aml_resources</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (void **)<a class=\"id\" href=\"#end_tag\">end_tag</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
];
xr_frag_insert('l/62/89bf81e556010920b814b3331f6c30acc3f335.xr', __xr_tmp);
