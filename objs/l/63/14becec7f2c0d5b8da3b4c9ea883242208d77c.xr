var __xr_tmp = [
"<span class=\"ts\"/>return <a class=\"id\" href=\"#score\">score</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#rt_caching\">rt_caching</a>(const struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#current_rt_cache_rebuild_count\">current_rt_cache_rebuild_count</a> <=", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_rt_cache_rebuild_count\">sysctl_rt_cache_rebuild_count</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#compare_hash_inputs\">compare_hash_inputs</a>(const struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl1\">fl1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl2\">fl2</a>)", 
"{", 
"<span class=\"ts\"/>return ((((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#nl_u\">nl_u</a>.<a class=\"id\" href=\"#ip4_u\">ip4_u</a>.<a class=\"id\" href=\"#daddr\">daddr</a> ^ (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#nl_u\">nl_u</a>.<a class=\"id\" href=\"#ip4_u\">ip4_u</a>.<a class=\"id\" href=\"#daddr\">daddr</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#nl_u\">nl_u</a>.<a class=\"id\" href=\"#ip4_u\">ip4_u</a>.<a class=\"id\" href=\"#saddr\">saddr</a> ^ (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#nl_u\">nl_u</a>.<a class=\"id\" href=\"#ip4_u\">ip4_u</a>.<a class=\"id\" href=\"#saddr\">saddr</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#iif\">iif</a> ^ <a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#iif\">iif</a>)) == 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#compare_keys\">compare_keys</a>(struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl1\">fl1</a>, struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl2\">fl2</a>)", 
"{", 
"<span class=\"ts\"/>return (((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#nl_u\">nl_u</a>.<a class=\"id\" href=\"#ip4_u\">ip4_u</a>.<a class=\"id\" href=\"#daddr\">daddr</a> ^ (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#nl_u\">nl_u</a>.<a class=\"id\" href=\"#ip4_u\">ip4_u</a>.<a class=\"id\" href=\"#daddr\">daddr</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#nl_u\">nl_u</a>.<a class=\"id\" href=\"#ip4_u\">ip4_u</a>.<a class=\"id\" href=\"#saddr\">saddr</a> ^ (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#nl_u\">nl_u</a>.<a class=\"id\" href=\"#ip4_u\">ip4_u</a>.<a class=\"id\" href=\"#saddr\">saddr</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#mark\">mark</a> ^ <a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#mark\">mark</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(*(<a class=\"id\" href=\"#u16\">u16</a> *)&amp;<a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#nl_u\">nl_u</a>.<a class=\"id\" href=\"#ip4_u\">ip4_u</a>.<a class=\"id\" href=\"#tos\">tos</a> ^ *(<a class=\"id\" href=\"#u16\">u16</a> *)&amp;<a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#nl_u\">nl_u</a>.<a class=\"id\" href=\"#ip4_u\">ip4_u</a>.<a class=\"id\" href=\"#tos\">tos</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#oif\">oif</a> ^ <a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#oif\">oif</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#fl1\">fl1</a>-><a class=\"id\" href=\"#iif\">iif</a> ^ <a class=\"id\" href=\"#fl2\">fl2</a>-><a class=\"id\" href=\"#iif\">iif</a>)) == 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#compare_netns\">compare_netns</a>(struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rt1\">rt1</a>, struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rt2\">rt2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#rt1\">rt1</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#rt2\">rt2</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rt_is_expired\">rt_is_expired</a>(struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rth\">rth</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#rt_genid\">rt_genid</a> != <a class=\"id\" href=\"#rt_genid\">rt_genid</a>(<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Perform a full scan of hash table and free all entries.</span>", 
"<span class=\"comment\"> * Can be called by a softirq or a process.</span>", 
"<span class=\"comment\"> * In the later case, we want to be reschedule if necessary</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rt_do_flush\">rt_do_flush</a>(int <a class=\"id\" href=\"#process_context\">process_context</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rth\">rth</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> * <a class=\"id\" href=\"#tail\">tail</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#rt_hash_mask\">rt_hash_mask</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#process_context\">process_context</a> && <a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rth\">rth</a> = <a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rth\">rth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(<a class=\"id\" href=\"#rt_hash_lock_addr\">rt_hash_lock_addr</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> ** <a class=\"id\" href=\"#prev\">prev</a>, * <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rth\">rth</a> = <a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chain\">chain</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* defer releasing the head of the list after spin_unlock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#rth\">rth</a>; <a class=\"id\" href=\"#tail\">tail</a>; <a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_is_expired\">rt_is_expired</a>(<a class=\"id\" href=\"#tail\">tail</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rth\">rth</a> != <a class=\"id\" href=\"#tail\">tail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chain\">chain</a> = <a class=\"id\" href=\"#tail\">tail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* call rt_free on entries after the tail requiring flush */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = *<a class=\"id\" href=\"#prev\">prev</a>; <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_is_expired\">rt_is_expired</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_free\">rt_free</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rth\">rth</a> = <a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chain\">chain</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(<a class=\"id\" href=\"#rt_hash_lock_addr\">rt_hash_lock_addr</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#rth\">rth</a> != <a class=\"id\" href=\"#tail\">tail</a>; <a class=\"id\" href=\"#rth\">rth</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_free\">rt_free</a>(<a class=\"id\" href=\"#rth\">rth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * While freeing expired entries, we compute average chain length</span>", 
"<span class=\"comment\"> * and standard deviation, using fixed-point arithmetic.</span>", 
"<span class=\"comment\"> * This to have an estimation of rt_chain_length_max</span>", 
"<span class=\"comment\"> *  rt_chain_length_max = max(elasticity, AVG + 4*SD)</span>", 
"<span class=\"comment\"> * We use 3 bits for frational part, and 29 (or 61) for magnitude.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FRACT_BITS\">FRACT_BITS</a> 3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ONE\">ONE</a> (1UL << <a class=\"id\" href=\"#FRACT_BITS\">FRACT_BITS</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Given a hash chain and an item in this hash chain,</span>", 
"<span class=\"comment\"> * find if a previous entry has the same hash_inputs</span>", 
"<span class=\"comment\"> * (but differs on tos, mark or oif)</span>", 
"<span class=\"comment\"> * Returns 0 if an alias is found.</span>", 
"<span class=\"comment\"> * Returns ONE if rth has no alias before itself.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#has_noalias\">has_noalias</a>(const struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#head\">head</a>, const struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rth\">rth</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#aux\">aux</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#aux\">aux</a> != <a class=\"id\" href=\"#rth\">rth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#compare_hash_inputs\">compare_hash_inputs</a>(&amp;<a class=\"id\" href=\"#aux\">aux</a>-><a class=\"id\" href=\"#fl\">fl</a>, &amp;<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#fl\">fl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aux\">aux</a> = <a class=\"id\" href=\"#aux\">aux</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ONE\">ONE</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rt_check_expire\">rt_check_expire</a>(void)", 
"{", 
"<span class=\"ts\"/>static unsigned int <a class=\"id\" href=\"#rover\">rover</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#rover\">rover</a>, <a class=\"id\" href=\"#goal\">goal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rth\">rth</a>, **<a class=\"id\" href=\"#rthp\">rthp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#samples\">samples</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sum\">sum</a> = 0, <a class=\"id\" href=\"#sum2\">sum2</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mult\">mult</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#expires_ljiffies\">expires_ljiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expires_ljiffies\">expires_ljiffies</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mult\">mult</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#delta\">delta</a>) << <a class=\"id\" href=\"#rt_hash_log\">rt_hash_log</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ip_rt_gc_timeout\">ip_rt_gc_timeout</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#mult\">mult</a>, <a class=\"id\" href=\"#ip_rt_gc_timeout\">ip_rt_gc_timeout</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = (unsigned int)<a class=\"id\" href=\"#mult\">mult</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> &gt; <a class=\"id\" href=\"#rt_hash_mask\">rt_hash_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#rt_hash_mask\">rt_hash_mask</a> + 1;", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#goal\">goal</a> &gt; 0; <a class=\"id\" href=\"#goal\">goal</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmo\">tmo</a> = <a class=\"id\" href=\"#ip_rt_gc_timeout\">ip_rt_gc_timeout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#i\">i</a> + 1) &amp; <a class=\"id\" href=\"#rt_hash_mask\">rt_hash_mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rthp\">rthp</a> = &amp;<a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chain\">chain</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#samples\">samples</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#rthp\">rthp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(<a class=\"id\" href=\"#rt_hash_lock_addr\">rt_hash_lock_addr</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#rth\">rth</a> = *<a class=\"id\" href=\"#rthp\">rthp</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_is_expired\">rt_is_expired</a>(<a class=\"id\" href=\"#rth\">rth</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rthp\">rthp</a> = <a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_free\">rt_free</a>(<a class=\"id\" href=\"#rth\">rth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#expires\">expires</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Entry is expired even if it is in use */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before_eq\">time_before_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#expires\">expires</a>)) {", 
"<a class=\"id\" href=\"#nofree\">nofree</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmo\">tmo</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rthp\">rthp</a> = &amp;<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We only count entries on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a chain with equal hash inputs once</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so that entries for different QOS</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * levels, and other non-hash input</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * attributes don't unfairly skew</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the length computation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> += <a class=\"id\" href=\"#has_noalias\">has_noalias</a>(<a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#rth\">rth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#rt_may_expire\">rt_may_expire</a>(<a class=\"id\" href=\"#rth\">rth</a>, <a class=\"id\" href=\"#tmo\">tmo</a>, <a class=\"id\" href=\"#ip_rt_gc_timeout\">ip_rt_gc_timeout</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nofree\">nofree</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Cleanup aged off entries. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rthp\">rthp</a> = <a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_free\">rt_free</a>(<a class=\"id\" href=\"#rth\">rth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(<a class=\"id\" href=\"#rt_hash_lock_addr\">rt_hash_lock_addr</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum2\">sum2</a> += <a class=\"id\" href=\"#length\">length</a>*<a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#samples\">samples</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#avg\">avg</a> = <a class=\"id\" href=\"#sum\">sum</a> / <a class=\"id\" href=\"#samples\">samples</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#int_sqrt\">int_sqrt</a>(<a class=\"id\" href=\"#sum2\">sum2</a> / <a class=\"id\" href=\"#samples\">samples</a> - <a class=\"id\" href=\"#avg\">avg</a>*<a class=\"id\" href=\"#avg\">avg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_chain_length_max\">rt_chain_length_max</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(unsigned long,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_rt_gc_elasticity\">ip_rt_gc_elasticity</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#avg\">avg</a> + 4*<a class=\"id\" href=\"#sd\">sd</a>) >> <a class=\"id\" href=\"#FRACT_BITS\">FRACT_BITS</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rover\">rover</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rt_worker_func() is run in process context.</span>", 
"<span class=\"comment\"> * we call rt_check_expire() to scan part of the hash table</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rt_worker_func\">rt_worker_func</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_check_expire\">rt_check_expire</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(&amp;<a class=\"id\" href=\"#expires_work\">expires_work</a>, <a class=\"id\" href=\"#ip_rt_gc_interval\">ip_rt_gc_interval</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pertubation of rt_genid by a small quantity [1..256]</span>", 
"<span class=\"comment\"> * Using 8 bits of shuffling ensure we can call rt_cache_invalidate()</span>", 
"<span class=\"comment\"> * many times (2^24) without giving recent rt_genid.</span>", 
"<span class=\"comment\"> * Jenkins hash is strong enough that litle changes of rt_genid are OK.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rt_cache_invalidate\">rt_cache_invalidate</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#shuffle\">shuffle</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(&amp;<a class=\"id\" href=\"#shuffle\">shuffle</a>, sizeof(<a class=\"id\" href=\"#shuffle\">shuffle</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#shuffle\">shuffle</a> + 1U, &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#rt_genid\">rt_genid</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * delay &lt; 0  : invalidate cache (fast : entries will be deleted later)</span>", 
"<span class=\"comment\"> * delay &gt;= 0 : invalidate &amp; flush cache (can be long)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rt_cache_flush\">rt_cache_flush</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#delay\">delay</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_cache_invalidate\">rt_cache_invalidate</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delay\">delay</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_do_flush\">rt_do_flush</a>(!<a class=\"id\" href=\"#in_softirq\">in_softirq</a>());", 
"}", 
"", 
"<span class=\"comment\">/* Flush previous cache invalidated entries from the cache */</span>", 
"void <a class=\"id\" href=\"#rt_cache_flush_batch\">rt_cache_flush_batch</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_do_flush\">rt_do_flush</a>(!<a class=\"id\" href=\"#in_softirq\">in_softirq</a>());", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rt_emergency_hash_rebuild\">rt_emergency_hash_rebuild</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Route hash chain too long!\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_cache_invalidate\">rt_cache_invalidate</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   Short description of GC goals.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   We want to build algorithm, which will keep routing cache</span>", 
"<span class=\"comment\">   at some equilibrium point, when number of aged off entries</span>", 
"<span class=\"comment\">   is kept approximately equal to newly generated ones.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Current expiration strength is variable \"expire\".</span>", 
"<span class=\"comment\">   We try to adjust it dynamically, so that if networking</span>", 
"<span class=\"comment\">   is idle expires is large enough to keep enough of warm entries,</span>", 
"<span class=\"comment\">   and when load increases it reduces to limit cache size.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#rt_garbage_collect\">rt_garbage_collect</a>(struct <a class=\"id\" href=\"#dst_ops\">dst_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#expire\">expire</a> = <a class=\"id\" href=\"#RT_GC_TIMEOUT\">RT_GC_TIMEOUT</a>;", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#last_gc\">last_gc</a>;", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#rover\">rover</a>;", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#equilibrium\">equilibrium</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rth\">rth</a>, **<a class=\"id\" href=\"#rthp\">rthp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#goal\">goal</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Garbage collection is pretty expensive,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do not make it too frequently.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RT_CACHE_STAT_INC\">RT_CACHE_STAT_INC</a>(<a class=\"id\" href=\"#gc_total\">gc_total</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#last_gc\">last_gc</a> &lt; <a class=\"id\" href=\"#ip_rt_gc_min_interval\">ip_rt_gc_min_interval</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#entries\">entries</a>) &lt; <a class=\"id\" href=\"#ip_rt_max_size\">ip_rt_max_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RT_CACHE_STAT_INC\">RT_CACHE_STAT_INC</a>(<a class=\"id\" href=\"#gc_ignored\">gc_ignored</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Calculate number of entries, which we want to expire now. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#entries\">entries</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ip_rt_gc_elasticity\">ip_rt_gc_elasticity</a> << <a class=\"id\" href=\"#rt_hash_log\">rt_hash_log</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#equilibrium\">equilibrium</a> &lt; <a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#gc_thresh\">gc_thresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#equilibrium\">equilibrium</a> = <a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#gc_thresh\">gc_thresh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#entries\">entries</a>) - <a class=\"id\" href=\"#equilibrium\">equilibrium</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#equilibrium\">equilibrium</a> += <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned int, <a class=\"id\" href=\"#goal\">goal</a> >> 1, <a class=\"id\" href=\"#rt_hash_mask\">rt_hash_mask</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#entries\">entries</a>) - <a class=\"id\" href=\"#equilibrium\">equilibrium</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We are in dangerous area. Try to reduce cache really</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * aggressively.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(unsigned int, <a class=\"id\" href=\"#goal\">goal</a> >> 1, <a class=\"id\" href=\"#rt_hash_mask\">rt_hash_mask</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#equilibrium\">equilibrium</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#entries\">entries</a>) - <a class=\"id\" href=\"#goal\">goal</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#last_gc\">last_gc</a> >= <a class=\"id\" href=\"#ip_rt_gc_min_interval\">ip_rt_gc_min_interval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_gc\">last_gc</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#equilibrium\">equilibrium</a> += <a class=\"id\" href=\"#goal\">goal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#work_done\">work_done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#k\">k</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#rt_hash_mask\">rt_hash_mask</a>, <a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#rover\">rover</a>; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmo\">tmo</a> = <a class=\"id\" href=\"#expire\">expire</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = (<a class=\"id\" href=\"#k\">k</a> + 1) &amp; <a class=\"id\" href=\"#rt_hash_mask\">rt_hash_mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rthp\">rthp</a> = &amp;<a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#k\">k</a>].<a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(<a class=\"id\" href=\"#rt_hash_lock_addr\">rt_hash_lock_addr</a>(<a class=\"id\" href=\"#k\">k</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#rth\">rth</a> = *<a class=\"id\" href=\"#rthp\">rthp</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_is_expired\">rt_is_expired</a>(<a class=\"id\" href=\"#rth\">rth</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#rt_may_expire\">rt_may_expire</a>(<a class=\"id\" href=\"#rth\">rth</a>, <a class=\"id\" href=\"#tmo\">tmo</a>, <a class=\"id\" href=\"#expire\">expire</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmo\">tmo</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rthp\">rthp</a> = &amp;<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rthp\">rthp</a> = <a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_free\">rt_free</a>(<a class=\"id\" href=\"#rth\">rth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(<a class=\"id\" href=\"#rt_hash_lock_addr\">rt_hash_lock_addr</a>(<a class=\"id\" href=\"#k\">k</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rover\">rover</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#work_done\">work_done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Goal is not achieved. We stop process if:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   - if expire reduced to zero. Otherwise, expire is halfed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   - if table is not full.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   - if we are called from interrupt.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   - jiffies check is just fallback/debug loop breaker.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>     We will not spin here for long time in any case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RT_CACHE_STAT_INC\">RT_CACHE_STAT_INC</a>(<a class=\"id\" href=\"#gc_goal_miss\">gc_goal_miss</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#expire\">expire</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expire\">expire</a> >>= 1;", 
"#if <a class=\"id\" href=\"#RT_CACHE_DEBUG\">RT_CACHE_DEBUG</a> >= 2", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"expire>> %u %d %d %d\\n\", <a class=\"id\" href=\"#expire\">expire</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#entries\">entries</a>), <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#entries\">entries</a>) &lt; <a class=\"id\" href=\"#ip_rt_max_size\">ip_rt_max_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#in_softirq\">in_softirq</a>() && <a class=\"id\" href=\"#time_before_eq\">time_before_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#now\">now</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#entries\">entries</a>) &lt; <a class=\"id\" href=\"#ip_rt_max_size\">ip_rt_max_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"dst cache overflow\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RT_CACHE_STAT_INC\">RT_CACHE_STAT_INC</a>(<a class=\"id\" href=\"#gc_dst_overflow\">gc_dst_overflow</a>);", 
"<span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#work_done\">work_done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expire\">expire</a> += <a class=\"id\" href=\"#ip_rt_gc_min_interval\">ip_rt_gc_min_interval</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#expire\">expire</a> &gt; <a class=\"id\" href=\"#ip_rt_gc_timeout\">ip_rt_gc_timeout</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#entries\">entries</a>) &lt; <a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#gc_thresh\">gc_thresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expire\">expire</a> = <a class=\"id\" href=\"#ip_rt_gc_timeout\">ip_rt_gc_timeout</a>;", 
"#if <a class=\"id\" href=\"#RT_CACHE_DEBUG\">RT_CACHE_DEBUG</a> >= 2", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"expire++ %u %d %d %d\\n\", <a class=\"id\" href=\"#expire\">expire</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ipv4_dst_ops\">ipv4_dst_ops</a>.<a class=\"id\" href=\"#entries\">entries</a>), <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#rover\">rover</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<a class=\"id\" href=\"#out\">out</a>:<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns number of entries in a hash chain that have different hash_inputs</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#slow_chain_length\">slow_chain_length</a>(const struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#length\">length</a> = 0;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rth\">rth</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#rth\">rth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> += <a class=\"id\" href=\"#has_noalias\">has_noalias</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#rth\">rth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rth\">rth</a> = <a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#length\">length</a> >> <a class=\"id\" href=\"#FRACT_BITS\">FRACT_BITS</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rt_intern_hash\">rt_intern_hash</a>(unsigned <a class=\"id\" href=\"#hash\">hash</a>, struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rt\">rt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#rtable\">rtable</a> **<a class=\"id\" href=\"#rp\">rp</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a><span class=\"ts\"/>*<a class=\"id\" href=\"#rth\">rth</a>, **<a class=\"id\" href=\"#rthp\">rthp</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#cand\">cand</a>, **<a class=\"id\" href=\"#candp\">candp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_score\">min_score</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chain_length\">chain_length</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#attempts\">attempts</a> = !<a class=\"id\" href=\"#in_softirq\">in_softirq</a>();", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chain_length\">chain_length</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_score\">min_score</a> = ~(<a class=\"id\" href=\"#u32\">u32</a>)0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cand\">cand</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#candp\">candp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_caching\">rt_caching</a>(<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#dev\">dev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we're not caching, just tell the caller we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * were successful and don't touch the route.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * caller hold the sole reference to the cache entry, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it will be released when the caller is done with it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we drop it here, the callers have no way to resolve routes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when we're not caching.  Instead, just point *rp at rt, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the caller gets a single use out of the route</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note that we do rt_free on this new route entry, so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * once its refcount hits zero, we are still able to reap it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (Thanks Alexey)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note also the rt_free uses call_rcu.  We don't actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need rcu protection here, this is just our path to get</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * on the route gc list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_type\">rt_type</a> == <a class=\"id\" href=\"#RTN_UNICAST\">RTN_UNICAST</a> || <a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#iif\">iif</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#arp_bind_neighbour\">arp_bind_neighbour</a>(&amp;<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Neighbour table failure & not caching routes.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_drop\">rt_drop</a>(<a class=\"id\" href=\"#rt\">rt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_free\">rt_free</a>(<a class=\"id\" href=\"#rt\">rt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#skip_hashing\">skip_hashing</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rthp\">rthp</a> = &amp;<a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#hash\">hash</a>].<a class=\"id\" href=\"#chain\">chain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(<a class=\"id\" href=\"#rt_hash_lock_addr\">rt_hash_lock_addr</a>(<a class=\"id\" href=\"#hash\">hash</a>));", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#rth\">rth</a> = *<a class=\"id\" href=\"#rthp\">rthp</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_is_expired\">rt_is_expired</a>(<a class=\"id\" href=\"#rth\">rth</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rthp\">rthp</a> = <a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_free\">rt_free</a>(<a class=\"id\" href=\"#rth\">rth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#compare_keys\">compare_keys</a>(&amp;<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#fl\">fl</a>, &amp;<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#fl\">fl</a>) && <a class=\"id\" href=\"#compare_netns\">compare_netns</a>(<a class=\"id\" href=\"#rth\">rth</a>, <a class=\"id\" href=\"#rt\">rt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Put it first */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rthp\">rthp</a> = <a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Since lookup is lockfree, the deletion</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * must be visible to another weakly ordered CPU before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the insertion at the start of the hash chain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#hash\">hash</a>].<a class=\"id\" href=\"#chain\">chain</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Since lookup is lockfree, the update writes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * must be ordered for consistency on SMP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#hash\">hash</a>].<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#rth\">rth</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_use\">dst_use</a>(&amp;<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(<a class=\"id\" href=\"#rt_hash_lock_addr\">rt_hash_lock_addr</a>(<a class=\"id\" href=\"#hash\">hash</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_drop\">rt_drop</a>(<a class=\"id\" href=\"#rt\">rt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rp\">rp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rp\">rp</a> = <a class=\"id\" href=\"#rth\">rth</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_dst_set\">skb_dst_set</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#__refcnt\">__refcnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#score\">score</a> = <a class=\"id\" href=\"#rt_score\">rt_score</a>(<a class=\"id\" href=\"#rth\">rth</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#score\">score</a> <= <a class=\"id\" href=\"#min_score\">min_score</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cand\">cand</a> = <a class=\"id\" href=\"#rth\">rth</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#candp\">candp</a> = <a class=\"id\" href=\"#rthp\">rthp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_score\">min_score</a> = <a class=\"id\" href=\"#score\">score</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chain_length\">chain_length</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rthp\">rthp</a> = &amp;<a class=\"id\" href=\"#rth\">rth</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cand\">cand</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ip_rt_gc_elasticity used to be average length of chain</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * length, when exceeded gc becomes really aggressive.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The second limit is less certain. At the moment it allows</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only 2 entries per bucket. We will see.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chain_length\">chain_length</a> &gt; <a class=\"id\" href=\"#ip_rt_gc_elasticity\">ip_rt_gc_elasticity</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#candp\">candp</a> = <a class=\"id\" href=\"#cand\">cand</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_free\">rt_free</a>(<a class=\"id\" href=\"#cand\">cand</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chain_length\">chain_length</a> &gt; <a class=\"id\" href=\"#rt_chain_length_max\">rt_chain_length_max</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#slow_chain_length\">slow_chain_length</a>(<a class=\"id\" href=\"#rt_hash_table\">rt_hash_table</a>[<a class=\"id\" href=\"#hash\">hash</a>].<a class=\"id\" href=\"#chain\">chain</a>) &gt; <a class=\"id\" href=\"#rt_chain_length_max\">rt_chain_length_max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a> = ++<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#current_rt_cache_rebuild_count\">current_rt_cache_rebuild_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_caching\">rt_caching</a>(<a class=\"id\" href=\"#net\">net</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: %d rebuilds is over limit, route caching disabled\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_emergency_hash_rebuild\">rt_emergency_hash_rebuild</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(<a class=\"id\" href=\"#rt_hash_lock_addr\">rt_hash_lock_addr</a>(<a class=\"id\" href=\"#hash\">hash</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#rt_hash\">rt_hash</a>(<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl4_dst\">fl4_dst</a>, <a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl4_src\">fl4_src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ifindex\">ifindex</a>, <a class=\"id\" href=\"#rt_genid\">rt_genid</a>(<a class=\"id\" href=\"#net\">net</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try to bind route to arp only if it is output</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   route or unicast forwarding path.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_type\">rt_type</a> == <a class=\"id\" href=\"#RTN_UNICAST\">RTN_UNICAST</a> || <a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#iif\">iif</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#arp_bind_neighbour\">arp_bind_neighbour</a>(&amp;<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(<a class=\"id\" href=\"#rt_hash_lock_addr\">rt_hash_lock_addr</a>(<a class=\"id\" href=\"#hash\">hash</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#ENOBUFS\">ENOBUFS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_drop\">rt_drop</a>(<a class=\"id\" href=\"#rt\">rt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
];
xr_frag_insert('l/63/14becec7f2c0d5b8da3b4c9ea883242208d77c.xr', __xr_tmp);
