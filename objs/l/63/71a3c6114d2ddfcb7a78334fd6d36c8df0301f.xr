var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * RT-Mutexes: simple blocking mutual exclusion locks with PI support</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * started by Ingo Molnar and Thomas Gleixner.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004-2006 Red Hat, Inc., Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2005-2006 Timesys Corp., Thomas Gleixner &lt;tglx@timesys.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2005 Kihon Technologies Inc., Steven Rostedt</span>", 
"<span class=\"comment\"> *  Copyright (C) 2006 Esben Nielsen</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  See Documentation/rt-mutex-design.txt for details.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"rtmutex_common.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lock-&gt;owner state tracking:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * lock-&gt;owner holds the task_struct pointer of the owner. Bit 0 and 1</span>", 
"<span class=\"comment\"> * are used to keep track of the \"owner is pending\" and \"lock has</span>", 
"<span class=\"comment\"> * waiters\" state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * owner<span class=\"ts\"/>bit1<span class=\"ts\"/>bit0</span>", 
"<span class=\"comment\"> * NULL<span class=\"ts\"/><span class=\"ts\"/>0<span class=\"ts\"/>0<span class=\"ts\"/>lock is free (fast acquire possible)</span>", 
"<span class=\"comment\"> * NULL<span class=\"ts\"/><span class=\"ts\"/>0<span class=\"ts\"/>1<span class=\"ts\"/>invalid state</span>", 
"<span class=\"comment\"> * NULL<span class=\"ts\"/><span class=\"ts\"/>1<span class=\"ts\"/>0<span class=\"ts\"/>Transitional State*</span>", 
"<span class=\"comment\"> * NULL<span class=\"ts\"/><span class=\"ts\"/>1<span class=\"ts\"/>1<span class=\"ts\"/>invalid state</span>", 
"<span class=\"comment\"> * taskpointer<span class=\"ts\"/>0<span class=\"ts\"/>0<span class=\"ts\"/>lock is held (fast release possible)</span>", 
"<span class=\"comment\"> * taskpointer<span class=\"ts\"/>0<span class=\"ts\"/>1<span class=\"ts\"/>task is pending owner</span>", 
"<span class=\"comment\"> * taskpointer<span class=\"ts\"/>1<span class=\"ts\"/>0<span class=\"ts\"/>lock is held and has waiters</span>", 
"<span class=\"comment\"> * taskpointer<span class=\"ts\"/>1<span class=\"ts\"/>1<span class=\"ts\"/>task is pending owner and lock has more waiters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pending ownership is assigned to the top (highest priority)</span>", 
"<span class=\"comment\"> * waiter of the lock, when the lock is released. The thread is woken</span>", 
"<span class=\"comment\"> * up and can now take the lock. Until the lock is taken (bit 0</span>", 
"<span class=\"comment\"> * cleared) a competing higher priority thread can steal the lock</span>", 
"<span class=\"comment\"> * which puts the woken up thread back on the waiters list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The fast atomic compare exchange based acquire and release is only</span>", 
"<span class=\"comment\"> * possible when bit 0 and 1 of lock-&gt;owner are 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (*) There's a small time where the owner can be NULL and the</span>", 
"<span class=\"comment\"> * \"lock has waiters\" bit is set.  This can happen when grabbing the lock.</span>", 
"<span class=\"comment\"> * To prevent a cmpxchg of the owner releasing the lock, we need to set this</span>", 
"<span class=\"comment\"> * bit before looking at the lock, hence the reason this is a transitional</span>", 
"<span class=\"comment\"> * state.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void", 
"<a class=\"id\" href=\"#rt_mutex_set_owner\">rt_mutex_set_owner</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#owner\">owner</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a> = (unsigned long)<a class=\"id\" href=\"#owner\">owner</a> | <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_mutex_has_waiters\">rt_mutex_has_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= <a class=\"id\" href=\"#RT_MUTEX_HAS_WAITERS\">RT_MUTEX_HAS_WAITERS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a> = (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *)<a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_rt_mutex_waiters\">clear_rt_mutex_waiters</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a> = (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a> &amp; ~<a class=\"id\" href=\"#RT_MUTEX_HAS_WAITERS\">RT_MUTEX_HAS_WAITERS</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fixup_rt_mutex_waiters\">fixup_rt_mutex_waiters</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_mutex_has_waiters\">rt_mutex_has_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_rt_mutex_waiters\">clear_rt_mutex_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We can speed up the acquire/release, if the architecture</span>", 
"<span class=\"comment\"> * supports cmpxchg and if there's no debugging state to be set up</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__HAVE_ARCH_CMPXCHG\">__HAVE_ARCH_CMPXCHG</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_RT_MUTEXES\">CONFIG_DEBUG_RT_MUTEXES</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rt_mutex_cmpxchg\">rt_mutex_cmpxchg</a>(<a class=\"id\" href=\"#l\">l</a>,<a class=\"id\" href=\"#c\">c</a>,<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(&amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#owner\">owner</a>, <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#n\">n</a>) == <a class=\"id\" href=\"#c\">c</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mark_rt_mutex_waiters\">mark_rt_mutex_waiters</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#owner\">owner</a>, *<a class=\"id\" href=\"#p\">p</a> = (unsigned long *) &amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#owner\">owner</a>, <a class=\"id\" href=\"#owner\">owner</a> | <a class=\"id\" href=\"#RT_MUTEX_HAS_WAITERS\">RT_MUTEX_HAS_WAITERS</a>) != <a class=\"id\" href=\"#owner\">owner</a>);", 
"}", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rt_mutex_cmpxchg\">rt_mutex_cmpxchg</a>(<a class=\"id\" href=\"#l\">l</a>,<a class=\"id\" href=\"#c\">c</a>,<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/>(0)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mark_rt_mutex_waiters\">mark_rt_mutex_waiters</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a> = (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a> | <a class=\"id\" href=\"#RT_MUTEX_HAS_WAITERS\">RT_MUTEX_HAS_WAITERS</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate task priority from the waiter list priority</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return task-&gt;normal_prio when the waiter list is empty or when</span>", 
"<span class=\"comment\"> * the waiter is not allowed to do priority boosting</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#rt_mutex_getprio\">rt_mutex_getprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#task_has_pi_waiters\">task_has_pi_waiters</a>(<a class=\"id\" href=\"#task\">task</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#normal_prio\">normal_prio</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#task_top_pi_waiter\">task_top_pi_waiter</a>(<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>.<a class=\"id\" href=\"#prio\">prio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#normal_prio\">normal_prio</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Adjust the priority of a task, after its pi_waiters got modified.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This can be both boosting and unboosting. task-&gt;pi_lock must be held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__rt_mutex_adjust_prio\">__rt_mutex_adjust_prio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#rt_mutex_getprio\">rt_mutex_getprio</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#prio\">prio</a> != <a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_setprio\">rt_mutex_setprio</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#prio\">prio</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Adjust task priority (undo boosting). Called from the exit path of</span>", 
"<span class=\"comment\"> * rt_mutex_slowunlock() and rt_mutex_slowlock().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (Note: We do this outside of the protection of lock-&gt;wait_lock to</span>", 
"<span class=\"comment\"> * allow the lock to be taken while or before we readjust the priority</span>", 
"<span class=\"comment\"> * of task. We do not use the spin_xx_mutex() variants here as we are</span>", 
"<span class=\"comment\"> * outside of the debug path.)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rt_mutex_adjust_prio\">rt_mutex_adjust_prio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rt_mutex_adjust_prio\">__rt_mutex_adjust_prio</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Max number of times we'll walk the boosting chain:</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#max_lock_depth\">max_lock_depth</a> = 1024;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Adjust the priority chain. Also used for deadlock detection.</span>", 
"<span class=\"comment\"> * Decreases task's usage by one - may thus free the task.</span>", 
"<span class=\"comment\"> * Returns 0 or -EDEADLK.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rt_mutex_adjust_prio_chain\">rt_mutex_adjust_prio_chain</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#deadlock_detect\">deadlock_detect</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#orig_lock\">orig_lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#orig_waiter\">orig_waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#top_task\">top_task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>, *<a class=\"id\" href=\"#top_waiter\">top_waiter</a> = <a class=\"id\" href=\"#orig_waiter\">orig_waiter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#depth\">depth</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a> = <a class=\"id\" href=\"#debug_rt_mutex_detect_deadlock\">debug_rt_mutex_detect_deadlock</a>(<a class=\"id\" href=\"#orig_waiter\">orig_waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#deadlock_detect\">deadlock_detect</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The (de)boosting is a step by step approach with a lot of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pitfalls. We want this to be preemptible and we want hold a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * maximum of two locks per step. So we have to check</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * carefully whether things change under us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/>if (++<a class=\"id\" href=\"#depth\">depth</a> &gt; <a class=\"id\" href=\"#max_lock_depth\">max_lock_depth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>static int <a class=\"id\" href=\"#prev_max\">prev_max</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Print this only once. If the admin changes the limit,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * print a new message when reaching the limit again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev_max\">prev_max</a> != <a class=\"id\" href=\"#max_lock_depth\">max_lock_depth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_max\">prev_max</a> = <a class=\"id\" href=\"#max_lock_depth\">max_lock_depth</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Maximum lock depth %d reached \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"task: %s (%d)\\n\", <a class=\"id\" href=\"#max_lock_depth\">max_lock_depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#top_task\">top_task</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#top_task\">top_task</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#deadlock_detect\">deadlock_detect</a> ? -<a class=\"id\" href=\"#EDEADLK\">EDEADLK</a> : 0;", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Task can not go away as we did a get_task() before !</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check whether the end of the boosting chain has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reached or the state of the chain has changed while we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dropped the locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#waiter\">waiter</a> || !<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_pi\">out_unlock_pi</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check the orig_waiter state. After we dropped the locks,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the previous owner of the lock might have released the lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and made us the pending owner:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#orig_waiter\">orig_waiter</a> && !<a class=\"id\" href=\"#orig_waiter\">orig_waiter</a>-><a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_pi\">out_unlock_pi</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Drop out, when the task has no waiters. Note,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * top_waiter can be NULL, when we are in the deboosting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mode!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#top_waiter\">top_waiter</a> && (!<a class=\"id\" href=\"#task_has_pi_waiters\">task_has_pi_waiters</a>(<a class=\"id\" href=\"#task\">task</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#top_waiter\">top_waiter</a> != <a class=\"id\" href=\"#task_top_pi_waiter\">task_top_pi_waiter</a>(<a class=\"id\" href=\"#task\">task</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_pi\">out_unlock_pi</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When deadlock detection is off then we check, if further</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * priority adjustment is necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a> && <a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list_entry\">list_entry</a>.<a class=\"id\" href=\"#prio\">prio</a> == <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_pi\">out_unlock_pi</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#raw_spin_trylock\">raw_spin_trylock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Deadlock detection */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lock\">lock</a> == <a class=\"id\" href=\"#orig_lock\">orig_lock</a> || <a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>) == <a class=\"id\" href=\"#top_task\">top_task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_deadlock\">debug_rt_mutex_deadlock</a>(<a class=\"id\" href=\"#deadlock_detect\">deadlock_detect</a>, <a class=\"id\" href=\"#orig_waiter\">orig_waiter</a>, <a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#deadlock_detect\">deadlock_detect</a> ? -<a class=\"id\" href=\"#EDEADLK\">EDEADLK</a> : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_pi\">out_unlock_pi</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#top_waiter\">top_waiter</a> = <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Requeue the waiter */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list_entry\">list_entry</a>, &amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list_entry\">list_entry</a>.<a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#prio\">prio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_add\">plist_add</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list_entry\">list_entry</a>, &amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Release the task */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Grab the next task */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waiter\">waiter</a> == <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Boost the owner */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#top_waiter\">top_waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>.<a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list_entry\">list_entry</a>.<a class=\"id\" href=\"#prio\">prio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_add\">plist_add</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rt_mutex_adjust_prio\">__rt_mutex_adjust_prio</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#top_waiter\">top_waiter</a> == <a class=\"id\" href=\"#waiter\">waiter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Deboost the owner */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>.<a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list_entry\">list_entry</a>.<a class=\"id\" href=\"#prio\">prio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_add\">plist_add</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rt_mutex_adjust_prio\">__rt_mutex_adjust_prio</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#top_waiter\">top_waiter</a> = <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a> && <a class=\"id\" href=\"#waiter\">waiter</a> != <a class=\"id\" href=\"#top_waiter\">top_waiter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_task\">out_put_task</a>;", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
" <a class=\"id\" href=\"#out_unlock_pi\">out_unlock_pi</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
" <a class=\"id\" href=\"#out_put_task\">out_put_task</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Optimization: check if we can steal the lock from the</span>", 
"<span class=\"comment\"> * assigned pending owner [which might not have taken the</span>", 
"<span class=\"comment\"> * lock yet]:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#try_to_steal_lock\">try_to_steal_lock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#pendowner\">pendowner</a> = <a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_mutex_owner_pending\">rt_mutex_owner_pending</a>(<a class=\"id\" href=\"#lock\">lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pendowner\">pendowner</a> == <a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#prio\">prio</a> >= <a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#prio\">prio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if a waiter is enqueued on the pending owners</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pi_waiters list. Remove it and readjust pending owners</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * priority.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#rt_mutex_has_waiters\">rt_mutex_has_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No chain handling, pending owner is not blocked on anything: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rt_mutex_adjust_prio\">__rt_mutex_adjust_prio</a>(<a class=\"id\" href=\"#pendowner\">pendowner</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are going to steal the lock and a waiter was</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enqueued on the pending owners pi_waiters queue. So</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we have to enqueue this waiter into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task-&gt;pi_waiters list. This covers the case,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * where task is boosted because it holds another</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock and gets unboosted because the booster is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupted, so we would delay a waiter with higher</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * priority as task-&gt;normal_prio.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: in the rare case of a SCHED_OTHER task changing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its priority and thus stealing the lock, next-&gt;task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might be task:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#task\">task</a> != <a class=\"id\" href=\"#task\">task</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_add\">plist_add</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rt_mutex_adjust_prio\">__rt_mutex_adjust_prio</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to take an rt-mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This fails</span>", 
"<span class=\"comment\"> * - when the lock has a real owner</span>", 
"<span class=\"comment\"> * - when a different pending owner exists and has higher priority than current</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with lock-&gt;wait_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#try_to_take_rt_mutex\">try_to_take_rt_mutex</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have to be careful here if the atomic speedups are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enabled, such that, when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - no other waiter is on the lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - the lock has been released since we did the cmpxchg</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the lock can be released or taken while we are doing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * checks and marking the lock with RT_MUTEX_HAS_WAITERS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The atomic acquire/release aware variant of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mark_rt_mutex_waiters uses a cmpxchg loop. After setting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the WAITERS bit, the atomic release / acquire can not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * happen anymore and lock-&gt;wait_lock protects us from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * non-atomic case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note, that this might set lock-&gt;owner =</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RT_MUTEX_HAS_WAITERS in the case the lock is not contended</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any more. This is fixed up when we take the ownership.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is the transitional state explained at the top of this file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_rt_mutex_waiters\">mark_rt_mutex_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>) && !<a class=\"id\" href=\"#try_to_steal_lock\">try_to_steal_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We got the lock. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_lock\">debug_rt_mutex_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_set_owner\">rt_mutex_set_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_deadlock_account_lock\">rt_mutex_deadlock_account_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Task blocks on lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Prepare waiter and propagate pi chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This must be called with lock-&gt;wait_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#task_blocks_on_rt_mutex\">task_blocks_on_rt_mutex</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#top_waiter\">top_waiter</a> = <a class=\"id\" href=\"#waiter\">waiter</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#chain_walk\">chain_walk</a> = 0, <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rt_mutex_adjust_prio\">__rt_mutex_adjust_prio</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_node_init\">plist_node_init</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list_entry\">list_entry</a>, <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#prio\">prio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_node_init\">plist_node_init</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#prio\">prio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the top priority waiter on the lock */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_mutex_has_waiters\">rt_mutex_has_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#top_waiter\">top_waiter</a> = <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_add\">plist_add</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list_entry\">list_entry</a>, &amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a> = <a class=\"id\" href=\"#waiter\">waiter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waiter\">waiter</a> == <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#top_waiter\">top_waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_add\">plist_add</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rt_mutex_adjust_prio\">__rt_mutex_adjust_prio</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chain_walk\">chain_walk</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#debug_rt_mutex_detect_deadlock\">debug_rt_mutex_detect_deadlock</a>(<a class=\"id\" href=\"#waiter\">waiter</a>, <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chain_walk\">chain_walk</a> = 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#chain_walk\">chain_walk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The owner can't disappear while holding a lock,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so the owner struct is protected by wait_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Gets dropped in rt_mutex_adjust_prio_chain()!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#rt_mutex_adjust_prio_chain\">rt_mutex_adjust_prio_chain</a>(<a class=\"id\" href=\"#owner\">owner</a>, <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>, <a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#waiter\">waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wake up the next waiter on the lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Remove the top waiter from the current tasks waiter list and from</span>", 
"<span class=\"comment\"> * the lock waiter list. Set it as pending owner. Then wake it up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with lock-&gt;wait_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#wakeup_next_waiter\">wakeup_next_waiter</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#pendowner\">pendowner</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list_entry\">list_entry</a>, &amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Remove it from current-&gt;pi_waiters. We do not adjust a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * possible priority boost right now. We execute wakeup in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * boosted mode and go back to normal after releasing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock-&gt;wait_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pendowner\">pendowner</a> = <a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_set_owner\">rt_mutex_set_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#pendowner\">pendowner</a>, <a class=\"id\" href=\"#RT_MUTEX_OWNER_PENDING\">RT_MUTEX_OWNER_PENDING</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear the pi_blocked_on variable and enqueue a possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * waiter into the pi_waiters list of the pending owner. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prevents that in case the pending owner gets unboosted a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * waiter with higher priority than pending-owner-&gt;normal_prio</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is blocked on the unboosted (pending) owner.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a> != <a class=\"id\" href=\"#waiter\">waiter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a>-><a class=\"id\" href=\"#lock\">lock</a> != <a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_mutex_has_waiters\">rt_mutex_has_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_add\">plist_add</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pendowner\">pendowner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#pendowner\">pendowner</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a waiter from a lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with lock-&gt;wait_lock held</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#remove_waiter\">remove_waiter</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#first\">first</a> = (<a class=\"id\" href=\"#waiter\">waiter</a> == <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>));", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#chain_walk\">chain_walk</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list_entry\">list_entry</a>, &amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> && <a class=\"id\" href=\"#owner\">owner</a> != <a class=\"id\" href=\"#current\">current</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_del\">plist_del</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_mutex_has_waiters\">rt_mutex_has_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plist_add\">plist_add</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>, &amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rt_mutex_adjust_prio\">__rt_mutex_adjust_prio</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chain_walk\">chain_walk</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#plist_node_empty\">plist_node_empty</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#pi_list_entry\">pi_list_entry</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#chain_walk\">chain_walk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* gets dropped in rt_mutex_adjust_prio_chain()! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_adjust_prio_chain\">rt_mutex_adjust_prio_chain</a>(<a class=\"id\" href=\"#owner\">owner</a>, 0, <a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Recheck the pi chain, in case we got a priority setting</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called from sched_setscheduler</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rt_mutex_adjust_pi\">rt_mutex_adjust_pi</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#waiter\">waiter</a> || <a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list_entry\">list_entry</a>.<a class=\"id\" href=\"#prio\">prio</a> == <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#prio\">prio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* gets dropped in rt_mutex_adjust_prio_chain()! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_adjust_prio_chain\">rt_mutex_adjust_prio_chain</a>(<a class=\"id\" href=\"#task\">task</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#task\">task</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __rt_mutex_slowlock() - Perform the wait-wake-try-to-take loop</span>", 
"<span class=\"comment\"> * @lock:<span class=\"ts\"/><span class=\"ts\"/> the rt_mutex to take</span>", 
"<span class=\"comment\"> * @state:<span class=\"ts\"/><span class=\"ts\"/> the state the task should block in (TASK_INTERRUPTIBLE</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> or TASK_UNINTERRUPTIBLE)</span>", 
"<span class=\"comment\"> * @timeout:<span class=\"ts\"/><span class=\"ts\"/> the pre-initialized and started timer, or NULL for none</span>", 
"<span class=\"comment\"> * @waiter:<span class=\"ts\"/><span class=\"ts\"/> the pre-initialized rt_mutex_waiter</span>", 
"<span class=\"comment\"> * @detect_deadlock:<span class=\"ts\"/> passed to task_blocks_on_rt_mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * lock-&gt;wait_lock must be held by the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#__rt_mutex_slowlock\">__rt_mutex_slowlock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, int <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> *<a class=\"id\" href=\"#timeout\">timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to acquire the lock: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#try_to_take_rt_mutex\">try_to_take_rt_mutex</a>(<a class=\"id\" href=\"#lock\">lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TASK_INTERRUPTIBLE checks for signals and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * timeout. Ignored otherwise.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Signal pending? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a> && !<a class=\"id\" href=\"#timeout\">timeout</a>-><a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ETIMEDOUT\">ETIMEDOUT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * waiter-&gt;task is NULL the first time we come here and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when we have been woken up by the previous owner</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but the lock got stolen by a higher prio task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#task_blocks_on_rt_mutex\">task_blocks_on_rt_mutex</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#waiter\">waiter</a>, <a class=\"id\" href=\"#current\">current</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we got woken up by the owner then start loop</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * all over without going into schedule to try</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to get the lock now:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Reset the return value. We might</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * have returned with -EDEADLK and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * owner released the lock while we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * were walking the pi chain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_print_deadlock\">debug_rt_mutex_print_deadlock</a>(<a class=\"id\" href=\"#waiter\">waiter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_rt_mutex\">schedule_rt_mutex</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Slow path lock function:</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#rt_mutex_slowlock\">rt_mutex_slowlock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, int <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> *<a class=\"id\" href=\"#timeout\">timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> <a class=\"id\" href=\"#waiter\">waiter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_init_waiter\">debug_rt_mutex_init_waiter</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try to acquire the lock again: */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#try_to_take_rt_mutex\">try_to_take_rt_mutex</a>(<a class=\"id\" href=\"#lock\">lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup the timer, when timeout != NULL */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#timeout\">timeout</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_start_expires\">hrtimer_start_expires</a>(&amp;<a class=\"id\" href=\"#timeout\">timeout</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#HRTIMER_MODE_ABS\">HRTIMER_MODE_ABS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hrtimer_active\">hrtimer_active</a>(&amp;<a class=\"id\" href=\"#timeout\">timeout</a>-><a class=\"id\" href=\"#timer\">timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__rt_mutex_slowlock\">__rt_mutex_slowlock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, &amp;<a class=\"id\" href=\"#waiter\">waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_waiter\">remove_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>, &amp;<a class=\"id\" href=\"#waiter\">waiter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try_to_take_rt_mutex() sets the waiter bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unconditionally. We might have to fix that up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fixup_rt_mutex_waiters\">fixup_rt_mutex_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove pending timer: */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#timeout\">timeout</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(&amp;<a class=\"id\" href=\"#timeout\">timeout</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Readjust priority, when we did not get the lock. We might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have been the pending owner and boosted. Since we did not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * take the lock, the PI boost has to go.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_adjust_prio\">rt_mutex_adjust_prio</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_free_waiter\">debug_rt_mutex_free_waiter</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Slow path try-lock function:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#rt_mutex_slowtrylock\">rt_mutex_slowtrylock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>) != <a class=\"id\" href=\"#current\">current</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#try_to_take_rt_mutex\">try_to_take_rt_mutex</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * try_to_take_rt_mutex() sets the lock waiters</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bit unconditionally. Clean this up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fixup_rt_mutex_waiters\">fixup_rt_mutex_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Slow path to release a rt-mutex:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#rt_mutex_slowunlock\">rt_mutex_slowunlock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_unlock\">debug_rt_mutex_unlock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_deadlock_account_unlock\">rt_mutex_deadlock_account_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_mutex_has_waiters\">rt_mutex_has_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wakeup_next_waiter\">wakeup_next_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Undo pi boosting if necessary: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_adjust_prio\">rt_mutex_adjust_prio</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * debug aware fast / slowpath lock,trylock,unlock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The atomic acquire/release ops are compiled away, when either the</span>", 
"<span class=\"comment\"> * architecture does not support cmpxchg or when debugging is enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#rt_mutex_fastlock\">rt_mutex_fastlock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, int <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int (*<a class=\"id\" href=\"#slowfn\">slowfn</a>)(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, int <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> *<a class=\"id\" href=\"#timeout\">timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>))", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a> && <a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#rt_mutex_cmpxchg\">rt_mutex_cmpxchg</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#current\">current</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_deadlock_account_lock\">rt_mutex_deadlock_account_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#slowfn\">slowfn</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#rt_mutex_timed_fastlock\">rt_mutex_timed_fastlock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, int <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> *<a class=\"id\" href=\"#timeout\">timeout</a>, int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#slowfn\">slowfn</a>)(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, int <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> *<a class=\"id\" href=\"#timeout\">timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>))", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a> && <a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#rt_mutex_cmpxchg\">rt_mutex_cmpxchg</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#current\">current</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_deadlock_account_lock\">rt_mutex_deadlock_account_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#slowfn\">slowfn</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#rt_mutex_fasttrylock\">rt_mutex_fasttrylock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     int (*<a class=\"id\" href=\"#slowfn\">slowfn</a>)(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>))", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#rt_mutex_cmpxchg\">rt_mutex_cmpxchg</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#current\">current</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_deadlock_account_lock\">rt_mutex_deadlock_account_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#slowfn\">slowfn</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#rt_mutex_fastunlock\">rt_mutex_fastunlock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    void (*<a class=\"id\" href=\"#slowfn\">slowfn</a>)(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>))", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#rt_mutex_cmpxchg\">rt_mutex_cmpxchg</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_deadlock_account_unlock\">rt_mutex_deadlock_account_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slowfn\">slowfn</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rt_mutex_lock - lock a rt_mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @lock: the rt_mutex to be locked</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#rt_mutex_lock\">rt_mutex_lock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_fastlock\">rt_mutex_fastlock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>, 0, <a class=\"id\" href=\"#rt_mutex_slowlock\">rt_mutex_slowlock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rt_mutex_lock\">rt_mutex_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rt_mutex_lock_interruptible - lock a rt_mutex interruptible</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @lock: <span class=\"ts\"/><span class=\"ts\"/>the rt_mutex to be locked</span>", 
"<span class=\"comment\"> * @detect_deadlock:<span class=\"ts\"/>deadlock detection on/off</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 <span class=\"ts\"/><span class=\"ts\"/>on success</span>", 
"<span class=\"comment\"> * -EINTR <span class=\"ts\"/>when interrupted by a signal</span>", 
"<span class=\"comment\"> * -EDEADLK<span class=\"ts\"/>when the lock would deadlock (when deadlock detection is on)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#rt_mutex_lock_interruptible\">rt_mutex_lock_interruptible</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rt_mutex_fastlock\">rt_mutex_fastlock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>, <a class=\"id\" href=\"#rt_mutex_slowlock\">rt_mutex_slowlock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rt_mutex_lock_interruptible\">rt_mutex_lock_interruptible</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rt_mutex_timed_lock - lock a rt_mutex interruptible</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the timeout structure is provided</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>by the caller</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @lock: <span class=\"ts\"/><span class=\"ts\"/>the rt_mutex to be locked</span>", 
"<span class=\"comment\"> * @timeout:<span class=\"ts\"/><span class=\"ts\"/>timeout structure or NULL (no timeout)</span>", 
"<span class=\"comment\"> * @detect_deadlock:<span class=\"ts\"/>deadlock detection on/off</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 <span class=\"ts\"/><span class=\"ts\"/>on success</span>", 
"<span class=\"comment\"> * -EINTR <span class=\"ts\"/>when interrupted by a signal</span>", 
"<span class=\"comment\"> * -ETIMEDOUT<span class=\"ts\"/>when the timeout expired</span>", 
"<span class=\"comment\"> * -EDEADLK<span class=\"ts\"/>when the lock would deadlock (when deadlock detection is on)</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#rt_mutex_timed_lock\">rt_mutex_timed_lock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> *<a class=\"id\" href=\"#timeout\">timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rt_mutex_timed_fastlock\">rt_mutex_timed_fastlock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, <a class=\"id\" href=\"#timeout\">timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>, <a class=\"id\" href=\"#rt_mutex_slowlock\">rt_mutex_slowlock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rt_mutex_timed_lock\">rt_mutex_timed_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rt_mutex_trylock - try to lock a rt_mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @lock:<span class=\"ts\"/>the rt_mutex to be locked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 on success and 0 on contention</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#rt_mutex_trylock\">rt_mutex_trylock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rt_mutex_fasttrylock\">rt_mutex_fasttrylock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#rt_mutex_slowtrylock\">rt_mutex_slowtrylock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rt_mutex_trylock\">rt_mutex_trylock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rt_mutex_unlock - unlock a rt_mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @lock: the rt_mutex to be unlocked</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#rt_mutex_unlock\">rt_mutex_unlock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_fastunlock\">rt_mutex_fastunlock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#rt_mutex_slowunlock\">rt_mutex_slowunlock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rt_mutex_unlock\">rt_mutex_unlock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rt_mutex_destroy - mark a mutex unusable</span>", 
"<span class=\"comment\"> * @lock: the mutex to be destroyed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function marks the mutex uninitialized, and any subsequent</span>", 
"<span class=\"comment\"> * use of the mutex is forbidden. The mutex must not be locked when</span>", 
"<span class=\"comment\"> * this function is called.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rt_mutex_destroy\">rt_mutex_destroy</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#rt_mutex_is_locked\">rt_mutex_is_locked</a>(<a class=\"id\" href=\"#lock\">lock</a>));", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_RT_MUTEXES\">CONFIG_DEBUG_RT_MUTEXES</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#magic\">magic</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rt_mutex_destroy\">rt_mutex_destroy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __rt_mutex_init - initialize the rt lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @lock: the rt lock to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initialize the rt lock to unlocked state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initializing of a locked rt lock is not allowed</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__rt_mutex_init\">__rt_mutex_init</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_head_init_raw\">plist_head_init_raw</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_list\">wait_list</a>, &amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_init\">debug_rt_mutex_init</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__rt_mutex_init\">__rt_mutex_init</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rt_mutex_init_proxy_locked - initialize and lock a rt_mutex on behalf of a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>proxy owner</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @lock: <span class=\"ts\"/>the rt_mutex to be locked</span>", 
"<span class=\"comment\"> * @proxy_owner:the task to set as owner</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * No locking. Caller has to do serializing itself</span>", 
"<span class=\"comment\"> * Special API call for PI-futex support</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rt_mutex_init_proxy_locked\">rt_mutex_init_proxy_locked</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#proxy_owner\">proxy_owner</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rt_mutex_init\">__rt_mutex_init</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_proxy_lock\">debug_rt_mutex_proxy_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#proxy_owner\">proxy_owner</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_set_owner\">rt_mutex_set_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#proxy_owner\">proxy_owner</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_deadlock_account_lock\">rt_mutex_deadlock_account_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#proxy_owner\">proxy_owner</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rt_mutex_proxy_unlock - release a lock on behalf of owner</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @lock: <span class=\"ts\"/>the rt_mutex to be locked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * No locking. Caller has to do serializing itself</span>", 
"<span class=\"comment\"> * Special API call for PI-futex support</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rt_mutex_proxy_unlock\">rt_mutex_proxy_unlock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#proxy_owner\">proxy_owner</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_proxy_unlock\">debug_rt_mutex_proxy_unlock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_set_owner\">rt_mutex_set_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_deadlock_account_unlock\">rt_mutex_deadlock_account_unlock</a>(<a class=\"id\" href=\"#proxy_owner\">proxy_owner</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rt_mutex_start_proxy_lock() - Start lock acquisition for another task</span>", 
"<span class=\"comment\"> * @lock:<span class=\"ts\"/><span class=\"ts\"/>the rt_mutex to take</span>", 
"<span class=\"comment\"> * @waiter:<span class=\"ts\"/><span class=\"ts\"/>the pre-initialized rt_mutex_waiter</span>", 
"<span class=\"comment\"> * @task:<span class=\"ts\"/><span class=\"ts\"/>the task to prepare</span>", 
"<span class=\"comment\"> * @detect_deadlock:<span class=\"ts\"/>perform deadlock detection (1) or not (0)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 - task blocked on lock</span>", 
"<span class=\"comment\"> *  1 - acquired the lock for task, caller should wake it up</span>", 
"<span class=\"comment\"> * &lt;0 - error</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Special API call for FUTEX_REQUEUE_PI support.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#rt_mutex_start_proxy_lock\">rt_mutex_start_proxy_lock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_rt_mutex_waiters\">mark_rt_mutex_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_mutex_owner\">rt_mutex_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>) || <a class=\"id\" href=\"#try_to_steal_lock\">try_to_steal_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#task\">task</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We got the lock for task. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_lock\">debug_rt_mutex_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_set_owner\">rt_mutex_set_owner</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#task\">task</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_deadlock_account_lock\">rt_mutex_deadlock_account_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#task_blocks_on_rt_mutex\">task_blocks_on_rt_mutex</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#waiter\">waiter</a>, <a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> && !<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Reset the return value. We might have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * returned with -EDEADLK and the owner</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * released the lock while we were walking the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pi chain.  Let the waiter sort it out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_rt_mutex_print_deadlock\">debug_rt_mutex_print_deadlock</a>(<a class=\"id\" href=\"#waiter\">waiter</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rt_mutex_next_owner - return the next owner of the lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @lock: the rt lock query</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the next owner of the lock or NULL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller has to serialize against other accessors to the lock</span>", 
"<span class=\"comment\"> * itself.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Special API call for PI-futex support</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#rt_mutex_next_owner\">rt_mutex_next_owner</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_mutex_has_waiters\">rt_mutex_has_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rt_mutex_top_waiter\">rt_mutex_top_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#task\">task</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rt_mutex_finish_proxy_lock() - Complete lock acquisition</span>", 
"<span class=\"comment\"> * @lock:<span class=\"ts\"/><span class=\"ts\"/>the rt_mutex we were woken on</span>", 
"<span class=\"comment\"> * @to:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the timeout, null if none. hrtimer should already have</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>been started.</span>", 
"<span class=\"comment\"> * @waiter:<span class=\"ts\"/><span class=\"ts\"/>the pre-initialized rt_mutex_waiter</span>", 
"<span class=\"comment\"> * @detect_deadlock:<span class=\"ts\"/>perform deadlock detection (1) or not (0)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Complete the lock acquisition started our behalf by another thread.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  0 - success</span>", 
"<span class=\"comment\"> * &lt;0 - error, one of -EINTR, -ETIMEDOUT, or -EDEADLK</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Special API call for PI-futex requeue support</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#rt_mutex_finish_proxy_lock\">rt_mutex_finish_proxy_lock</a>(struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#rt_mutex_waiter\">rt_mutex_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__rt_mutex_slowlock\">__rt_mutex_slowlock</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#waiter\">waiter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#detect_deadlock\">detect_deadlock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_waiter\">remove_waiter</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#waiter\">waiter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try_to_take_rt_mutex() sets the waiter bit unconditionally. We might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have to fix that up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fixup_rt_mutex_waiters\">fixup_rt_mutex_waiters</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#wait_lock\">wait_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Readjust priority, when we did not get the lock. We might have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the pending owner and boosted. Since we did not take the lock, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PI boost has to go.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_adjust_prio\">rt_mutex_adjust_prio</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
];
xr_frag_insert('l/63/71a3c6114d2ddfcb7a78334fd6d36c8df0301f.xr', __xr_tmp);
