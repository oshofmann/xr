var __xr_tmp = [
"<span class=\"comment\">/* Keyring handling</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2004-2005, 2008 Red Hat, Inc. All Rights Reserved.</span>", 
"<span class=\"comment\"> * Written by David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> * 2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#keys\">keys</a>/<a class=\"id\" href=\"#keyring\">keyring</a>-<a class=\"id\" href=\"#type\">type</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_dereference_locked_keyring\">rcu_dereference_locked_keyring</a>(<a class=\"id\" href=\"#keyring\">keyring</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#rcu_dereference_protected\">rcu_dereference_protected</a>(<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#keyring\">keyring</a>)-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rwsem_is_locked\">rwsem_is_locked</a>((struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *)&amp;(<a class=\"id\" href=\"#keyring\">keyring</a>)-><a class=\"id\" href=\"#sem\">sem</a>)))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * when plumbing the depths of the key tree, this sets a hard limit set on how</span>", 
"<span class=\"comment\"> * deep we're willing to go</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KEYRING_SEARCH_MAX_DEPTH\">KEYRING_SEARCH_MAX_DEPTH</a> 6", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * we keep all named keyrings in a hash to speed looking them up</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KEYRING_NAME_HASH_SIZE\">KEYRING_NAME_HASH_SIZE</a><span class=\"ts\"/>(1 << 5)", 
"", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#keyring_name_hash\">keyring_name_hash</a>[<a class=\"id\" href=\"#KEYRING_NAME_HASH_SIZE\">KEYRING_NAME_HASH_SIZE</a>];", 
"static <a class=\"id\" href=\"#DEFINE_RWLOCK\">DEFINE_RWLOCK</a>(<a class=\"id\" href=\"#keyring_name_lock\">keyring_name_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#keyring_hash\">keyring_hash</a>(const char *<a class=\"id\" href=\"#desc\">desc</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bucket\">bucket</a> = 0;", 
"", 
"<span class=\"ts\"/>for (; *<a class=\"id\" href=\"#desc\">desc</a>; <a class=\"id\" href=\"#desc\">desc</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a> += (unsigned char)*<a class=\"id\" href=\"#desc\">desc</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bucket\">bucket</a> &amp; (<a class=\"id\" href=\"#KEYRING_NAME_HASH_SIZE\">KEYRING_NAME_HASH_SIZE</a> - 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the keyring type definition</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#keyring_instantiate\">keyring_instantiate</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>);", 
"static int <a class=\"id\" href=\"#keyring_match\">keyring_match</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, const void *<a class=\"id\" href=\"#criterion\">criterion</a>);", 
"static void <a class=\"id\" href=\"#keyring_revoke\">keyring_revoke</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"static void <a class=\"id\" href=\"#keyring_destroy\">keyring_destroy</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"static void <a class=\"id\" href=\"#keyring_describe\">keyring_describe</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>);", 
"static long <a class=\"id\" href=\"#keyring_read\">keyring_read</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"", 
"struct <a class=\"id\" href=\"#key_type\">key_type</a> <a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"keyring\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#def_datalen\">def_datalen</a><span class=\"ts\"/>= sizeof(struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#instantiate\">instantiate</a><span class=\"ts\"/>= <a class=\"id\" href=\"#keyring_instantiate\">keyring_instantiate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match\">match</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#keyring_match\">keyring_match</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#revoke\">revoke</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#keyring_revoke\">keyring_revoke</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#destroy\">destroy</a><span class=\"ts\"/>= <a class=\"id\" href=\"#keyring_destroy\">keyring_destroy</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#describe\">describe</a><span class=\"ts\"/>= <a class=\"id\" href=\"#keyring_describe\">keyring_describe</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#keyring_read\">keyring_read</a>,", 
"};", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * semaphore to serialise link/link calls to prevent two link calls in parallel</span>", 
"<span class=\"comment\"> * introducing a cycle</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DECLARE_RWSEM\">DECLARE_RWSEM</a>(<a class=\"id\" href=\"#keyring_serialise_link_sem\">keyring_serialise_link_sem</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * publish the name of a keyring so that it can be found by name (if it has</span>", 
"<span class=\"comment\"> * one)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#keyring_publish_name\">keyring_publish_name</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bucket\">bucket</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#description\">description</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#keyring_hash\">keyring_hash</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#description\">description</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#keyring_name_lock\">keyring_name_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#keyring_name_hash\">keyring_name_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>].<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#keyring_name_hash\">keyring_name_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#type_data\">type_data</a>.<a class=\"id\" href=\"#link\">link</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#keyring_name_hash\">keyring_name_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#keyring_name_lock\">keyring_name_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"} <span class=\"comment\">/* end keyring_publish_name() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * initialise a keyring</span>", 
"<span class=\"comment\"> * - we object if we were given any data</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#keyring_instantiate\">keyring_instantiate</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#datalen\">datalen</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make the keyring available by name if it has one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#keyring_publish_name\">keyring_publish_name</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"} <span class=\"comment\">/* end keyring_instantiate() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * match keyrings on their name</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#keyring_match\">keyring_match</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, const void *<a class=\"id\" href=\"#description\">description</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#description\">description</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#description\">description</a>, <a class=\"id\" href=\"#description\">description</a>) == 0;", 
"", 
"} <span class=\"comment\">/* end keyring_match() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dispose of the data dangling from the corpse of a keyring</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#keyring_destroy\">keyring_destroy</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#description\">description</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#keyring_name_lock\">keyring_name_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#type_data\">type_data</a>.<a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#next\">next</a> != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#type_data\">type_data</a>.<a class=\"id\" href=\"#link\">link</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#type_data\">type_data</a>.<a class=\"id\" href=\"#link\">link</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#keyring_name_lock\">keyring_name_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a> = <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#usage\">usage</a>) == 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> - 1; <a class=\"id\" href=\"#loop\">loop</a> >= 0; <a class=\"id\" href=\"#loop\">loop</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#loop\">loop</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#klist\">klist</a>);", 
"<span class=\"ts\"/>}", 
"", 
"} <span class=\"comment\">/* end keyring_destroy() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * describe the keyring</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#keyring_describe\">keyring_describe</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#description\">description</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#description\">description</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"[anon]\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \": %u/%u\", <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>, <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#maxkeys\">maxkeys</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \": empty\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"} <span class=\"comment\">/* end keyring_describe() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * read a list of key IDs from the keyring's contents</span>", 
"<span class=\"comment\"> * - the keyring's semaphore is read-locked</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#keyring_read\">keyring_read</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#qty\">qty</a>, <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a> = <a class=\"id\" href=\"#rcu_dereference_locked_keyring\">rcu_dereference_locked_keyring</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* calculate how much data we could return */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qty\">qty</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> * sizeof(<a class=\"id\" href=\"#key_serial_t\">key_serial_t</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a> && <a class=\"id\" href=\"#buflen\">buflen</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buflen\">buflen</a> &gt; <a class=\"id\" href=\"#qty\">qty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a> = <a class=\"id\" href=\"#qty\">qty</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* copy the IDs of the subscribed keys into the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = 0; <a class=\"id\" href=\"#loop\">loop</a> &lt; <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>; <a class=\"id\" href=\"#loop\">loop</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#loop\">loop</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = sizeof(<a class=\"id\" href=\"#key_serial_t\">key_serial_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> &gt; <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tmp\">tmp</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a> -= <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buflen\">buflen</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> += <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#qty\">qty</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"} <span class=\"comment\">/* end keyring_read() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * allocate a keyring and link into the destination keyring</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring_alloc\">keyring_alloc</a>(const char *<a class=\"id\" href=\"#description\">description</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#gid_t\">gid_t</a> <a class=\"id\" href=\"#gid\">gid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#dest\">dest</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keyring\">keyring</a> = <a class=\"id\" href=\"#key_alloc\">key_alloc</a>(&amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>, <a class=\"id\" href=\"#description\">description</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#gid\">gid</a>, <a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#KEY_POS_ALL\">KEY_POS_ALL</a> &amp; ~<a class=\"id\" href=\"#KEY_POS_SETATTR\">KEY_POS_SETATTR</a>) | <a class=\"id\" href=\"#KEY_USR_ALL\">KEY_USR_ALL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#keyring\">keyring</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#key_instantiate_and_link\">key_instantiate_and_link</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#keyring\">keyring</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#keyring\">keyring</a>;", 
"", 
"} <span class=\"comment\">/* end keyring_alloc() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * search the supplied keyring tree for a key that matches the criterion</span>", 
"<span class=\"comment\"> * - perform a breadth-then-depth search up to the prescribed limit</span>", 
"<span class=\"comment\"> * - we only find keys on which we have search permission</span>", 
"<span class=\"comment\"> * - we use the supplied match function to see if the description (or other</span>", 
"<span class=\"comment\"> *   feature of interest) matches</span>", 
"<span class=\"comment\"> * - we rely on RCU to prevent the keyring lists from disappearing on us</span>", 
"<span class=\"comment\"> * - we return -EAGAIN if we didn't find any matching key</span>", 
"<span class=\"comment\"> * - we return -ENOKEY if we only found negative matching keys</span>", 
"<span class=\"comment\"> * - we propagate the possession attribute from the keyring ref to the key ref</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#keyring_search_aux\">keyring_search_aux</a>(<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const void *<a class=\"id\" href=\"#description\">description</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#key_match_func_t\">key_match_func_t</a> <a class=\"id\" href=\"#match\">match</a>)", 
"{", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#keylist\">keylist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#kix\">kix</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#KEYRING_SEARCH_MAX_DEPTH\">KEYRING_SEARCH_MAX_DEPTH</a>];", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#keylist\">keylist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#possessed\">possessed</a>, <a class=\"id\" href=\"#kflags\">kflags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, *<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#key_ref\">key_ref</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#kix\">kix</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keyring\">keyring</a> = <a class=\"id\" href=\"#key_ref_to_ptr\">key_ref_to_ptr</a>(<a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#possessed\">possessed</a> = <a class=\"id\" href=\"#is_key_possessed\">is_key_possessed</a>(<a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* top keyring must have search permission to begin the search */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#key_task_permission\">key_task_permission</a>(<a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>, <a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#KEY_SEARCH\">KEY_SEARCH</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOTDIR\">ENOTDIR</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#type\">type</a> != &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#current_kernel_time\">current_kernel_time</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* firstly we should check to see if this top-level keyring is what we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are looking for */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kflags\">kflags</a> = <a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#type\">type</a> && <a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#description\">description</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#keyring\">keyring</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check it isn't negative and hasn't expired or been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * revoked */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kflags\">kflags</a> &amp; (1 << <a class=\"id\" href=\"#KEY_FLAG_REVOKED\">KEY_FLAG_REVOKED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_2\">error_2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#expiry\">expiry</a> && <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> >= <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#expiry\">expiry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_2\">error_2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOKEY\">ENOKEY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kflags\">kflags</a> &amp; (1 << <a class=\"id\" href=\"#KEY_FLAG_NEGATIVE\">KEY_FLAG_NEGATIVE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_2\">error_2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* otherwise, the top keyring must not be revoked, expired, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * negatively instantiated if we are to search it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kflags\">kflags</a> &amp; ((1 << <a class=\"id\" href=\"#KEY_FLAG_REVOKED\">KEY_FLAG_REVOKED</a>) | (1 << <a class=\"id\" href=\"#KEY_FLAG_NEGATIVE\">KEY_FLAG_NEGATIVE</a>)) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#expiry\">expiry</a> && <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> >= <a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#expiry\">expiry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_2\">error_2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* start processing a new keyring */</span>", 
"<a class=\"id\" href=\"#descend\">descend</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_REVOKED\">KEY_FLAG_REVOKED</a>, &amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_this_keyring\">not_this_keyring</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keylist\">keylist</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#keylist\">keylist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_this_keyring\">not_this_keyring</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* iterate through the keys in this keyring first */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#kix\">kix</a> = 0; <a class=\"id\" href=\"#kix\">kix</a> &lt; <a class=\"id\" href=\"#keylist\">keylist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>; <a class=\"id\" href=\"#kix\">kix</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#keylist\">keylist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#kix\">kix</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kflags\">kflags</a> = <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ignore keys not of this type */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip revoked keys and expired keys */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kflags\">kflags</a> &amp; (1 << <a class=\"id\" href=\"#KEY_FLAG_REVOKED\">KEY_FLAG_REVOKED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#expiry\">expiry</a> && <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> >= <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#expiry\">expiry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* keys that don't match */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#description\">description</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* key must have search permissions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key_task_permission\">key_task_permission</a>(<a class=\"id\" href=\"#make_key_ref\">make_key_ref</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#possessed\">possessed</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#KEY_SEARCH\">KEY_SEARCH</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we set a different error code if we pass a negative key */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kflags\">kflags</a> &amp; (1 << <a class=\"id\" href=\"#KEY_FLAG_NEGATIVE\">KEY_FLAG_NEGATIVE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOKEY\">ENOKEY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* search through the keyrings nested in this one */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kix\">kix</a> = 0;", 
"<a class=\"id\" href=\"#ascend\">ascend</a>:", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#kix\">kix</a> &lt; <a class=\"id\" href=\"#keylist\">keylist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>; <a class=\"id\" href=\"#kix\">kix</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#keylist\">keylist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#kix\">kix</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a> != &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* recursively search nested keyrings</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * - only search keyrings for which we have search permission</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> >= <a class=\"id\" href=\"#KEYRING_SEARCH_MAX_DEPTH\">KEYRING_SEARCH_MAX_DEPTH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key_task_permission\">key_task_permission</a>(<a class=\"id\" href=\"#make_key_ref\">make_key_ref</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#possessed\">possessed</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#KEY_SEARCH\">KEY_SEARCH</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* stack the current position */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#sp\">sp</a>].<a class=\"id\" href=\"#keylist\">keylist</a> = <a class=\"id\" href=\"#keylist\">keylist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#sp\">sp</a>].<a class=\"id\" href=\"#kix\">kix</a> = <a class=\"id\" href=\"#kix\">kix</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* begin again with the new keyring */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#keyring\">keyring</a> = <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#descend\">descend</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the keyring we're looking at was disqualified or didn't contain a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * matching key */</span>", 
"<a class=\"id\" href=\"#not_this_keyring\">not_this_keyring</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* resume the processing of a keyring higher up in the tree */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#keylist\">keylist</a> = <a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#sp\">sp</a>].<a class=\"id\" href=\"#keylist\">keylist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kix\">kix</a> = <a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#sp\">sp</a>].<a class=\"id\" href=\"#kix\">kix</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ascend\">ascend</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#error_2\">error_2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we found a viable match */</span>", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#usage\">usage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#make_key_ref\">make_key_ref</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#possessed\">possessed</a>);", 
"<a class=\"id\" href=\"#error_2\">error_2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#key_ref\">key_ref</a>;", 
"", 
"} <span class=\"comment\">/* end keyring_search_aux() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * search the supplied keyring tree for a key that matches the criterion</span>", 
"<span class=\"comment\"> * - perform a breadth-then-depth search up to the prescribed limit</span>", 
"<span class=\"comment\"> * - we only find keys on which we have search permission</span>", 
"<span class=\"comment\"> * - we readlock the keyrings as we search down the tree</span>", 
"<span class=\"comment\"> * - we return -EAGAIN if we didn't find any matching key</span>", 
"<span class=\"comment\"> * - we return -ENOKEY if we only found negative matching keys</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#keyring_search\">keyring_search</a>(<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#description\">description</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#match\">match</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOKEY\">ENOKEY</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#keyring_search_aux\">keyring_search_aux</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#description\">description</a>, <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#match\">match</a>);", 
"", 
"} <span class=\"comment\">/* end keyring_search() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#keyring_search\">keyring_search</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * search the given keyring only (no recursion)</span>", 
"<span class=\"comment\"> * - keyring must be locked by caller</span>", 
"<span class=\"comment\"> * - caller must guarantee that the keyring is a keyring</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#__keyring_search_one\">__keyring_search_one</a>(<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#ktype\">ktype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#description\">description</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#key_perm_t\">key_perm_t</a> <a class=\"id\" href=\"#perm\">perm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#possessed\">possessed</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, *<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keyring\">keyring</a> = <a class=\"id\" href=\"#key_ref_to_ptr\">key_ref_to_ptr</a>(<a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#possessed\">possessed</a> = <a class=\"id\" href=\"#is_key_possessed\">is_key_possessed</a>(<a class=\"id\" href=\"#keyring_ref\">keyring_ref</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = 0; <a class=\"id\" href=\"#loop\">loop</a> &lt; <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>; <a class=\"id\" href=\"#loop\">loop</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#loop\">loop</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ktype\">ktype</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#match\">match</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#description\">description</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#key_permission\">key_permission</a>(<a class=\"id\" href=\"#make_key_ref\">make_key_ref</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#possessed\">possessed</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#perm\">perm</a>) == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_REVOKED\">KEY_FLAG_REVOKED</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    )", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOKEY\">ENOKEY</a>);", 
"", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#usage\">usage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#make_key_ref\">make_key_ref</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#possessed\">possessed</a>);", 
"", 
"} <span class=\"comment\">/* end __keyring_search_one() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find a keyring with the specified name</span>", 
"<span class=\"comment\"> * - all named keyrings are searched</span>", 
"<span class=\"comment\"> * - normally only finds keyrings with search permission for the current process</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#find_keyring_by_name\">find_keyring_by_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skip_perm_check\">skip_perm_check</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bucket\">bucket</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#keyring_hash\">keyring_hash</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#keyring_name_lock\">keyring_name_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring_name_hash\">keyring_name_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>].<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* search this hash bucket for a keyring with a matching name</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that's readable and that hasn't been revoked */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#keyring_name_hash\">keyring_name_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#type_data\">type_data</a>.<a class=\"id\" href=\"#link\">link</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#user_ns\">user_ns</a> != <a class=\"id\" href=\"#current_user_ns\">current_user_ns</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_REVOKED\">KEY_FLAG_REVOKED</a>, &amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#description\">description</a>, <a class=\"id\" href=\"#name\">name</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#skip_perm_check\">skip_perm_check</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#key_permission\">key_permission</a>(<a class=\"id\" href=\"#make_key_ref\">make_key_ref</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, 0),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#KEY_SEARCH\">KEY_SEARCH</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we've got a match but we might end up racing with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * key_cleanup() if the keyring is currently 'dead'</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (ie. it has a zero usage count) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#usage\">usage</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keyring\">keyring</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOKEY\">ENOKEY</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#keyring_name_lock\">keyring_name_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#keyring\">keyring</a>;", 
"", 
"} <span class=\"comment\">/* end find_keyring_by_name() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * see if a cycle will will be created by inserting acyclic tree B in acyclic</span>", 
"<span class=\"comment\"> * tree A at the topmost level (ie: as a direct child of A)</span>", 
"<span class=\"comment\"> * - since we are adding B to A at the top level, checking for cycles should</span>", 
"<span class=\"comment\"> *   just be a matter of seeing if node A is somewhere in tree B</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#keyring_detect_cycle\">keyring_detect_cycle</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#A\">A</a>, struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#B\">B</a>)", 
"{", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#keylist\">keylist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#kix\">kix</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#KEYRING_SEARCH_MAX_DEPTH\">KEYRING_SEARCH_MAX_DEPTH</a>];", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#keylist\">keylist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#subtree\">subtree</a>, *<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#kix\">kix</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EDEADLK\">EDEADLK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#A\">A</a> == <a class=\"id\" href=\"#B\">B</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cycle_detected\">cycle_detected</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#subtree\">subtree</a> = <a class=\"id\" href=\"#B\">B</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* start processing a new keyring */</span>", 
"<a class=\"id\" href=\"#descend\">descend</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_REVOKED\">KEY_FLAG_REVOKED</a>, &amp;<a class=\"id\" href=\"#subtree\">subtree</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_this_keyring\">not_this_keyring</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keylist\">keylist</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#subtree\">subtree</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#keylist\">keylist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_this_keyring\">not_this_keyring</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kix\">kix</a> = 0;", 
"", 
"<a class=\"id\" href=\"#ascend\">ascend</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* iterate through the remaining keys in this keyring */</span>", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#kix\">kix</a> &lt; <a class=\"id\" href=\"#keylist\">keylist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>; <a class=\"id\" href=\"#kix\">kix</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#keylist\">keylist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#kix\">kix</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a> == <a class=\"id\" href=\"#A\">A</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cycle_detected\">cycle_detected</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* recursively check nested keyrings */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a> == &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> >= <a class=\"id\" href=\"#KEYRING_SEARCH_MAX_DEPTH\">KEYRING_SEARCH_MAX_DEPTH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#too_deep\">too_deep</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* stack the current position */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#sp\">sp</a>].<a class=\"id\" href=\"#keylist\">keylist</a> = <a class=\"id\" href=\"#keylist\">keylist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#sp\">sp</a>].<a class=\"id\" href=\"#kix\">kix</a> = <a class=\"id\" href=\"#kix\">kix</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* begin again with the new keyring */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#subtree\">subtree</a> = <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#descend\">descend</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the keyring we're looking at was disqualified or didn't contain a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * matching key */</span>", 
"<a class=\"id\" href=\"#not_this_keyring\">not_this_keyring</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* resume the checking of a keyring higher up in the tree */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#keylist\">keylist</a> = <a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#sp\">sp</a>].<a class=\"id\" href=\"#keylist\">keylist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kix\">kix</a> = <a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#sp\">sp</a>].<a class=\"id\" href=\"#kix\">kix</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ascend\">ascend</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0; <span class=\"comment\">/* no cycles detected */</span>", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#too_deep\">too_deep</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ELOOP\">ELOOP</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<a class=\"id\" href=\"#cycle_detected\">cycle_detected</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EDEADLK\">EDEADLK</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"} <span class=\"comment\">/* end keyring_detect_cycle() */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dispose of a keyring list after the RCU grace period, freeing the unlinked</span>", 
"<span class=\"comment\"> * key</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#keyring_unlink_rcu_disposal\">keyring_unlink_rcu_disposal</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rcu\">rcu</a>, struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#delkey\">delkey</a> != <a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#delkey\">delkey</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#klist\">klist</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * preallocate memory so that a key can be linked into to a keyring</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__key_link_begin\">__key_link_begin</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, const struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#description\">description</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> **<a class=\"id\" href=\"#_prealloc\">_prealloc</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a>, *<a class=\"id\" href=\"#nklist\">nklist</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kenter\">kenter</a>(\"%d,%s,%s,\", <a class=\"id\" href=\"#key_serial\">key_serial</a>(<a class=\"id\" href=\"#keyring\">keyring</a>), <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#description\">description</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#type\">type</a> != &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTDIR\">ENOTDIR</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EKEYREVOKED\">EKEYREVOKED</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_REVOKED\">KEY_FLAG_REVOKED</a>, &amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_krsem\">error_krsem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* serialise link/link calls to prevent parallel calls causing a cycle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when linking two keyring in opposite orders */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#keyring_serialise_link_sem\">keyring_serialise_link_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a> = <a class=\"id\" href=\"#rcu_dereference_locked_keyring\">rcu_dereference_locked_keyring</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* see if there's a matching key we can displace */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a> && <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> - 1; <a class=\"id\" href=\"#loop\">loop</a> >= 0; <a class=\"id\" href=\"#loop\">loop</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#loop\">loop</a>]-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#type\">type</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#loop\">loop</a>]-><a class=\"id\" href=\"#description\">description</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#description\">description</a>) == 0", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* found a match - we'll replace this one with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the new key */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#key\">key</a> *) * <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#maxkeys\">maxkeys</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += sizeof(*<a class=\"id\" href=\"#klist\">klist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a> = <a class=\"id\" href=\"#kmemdup\">kmemdup</a>(<a class=\"id\" href=\"#klist\">klist</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nklist\">nklist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_sem\">error_sem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* note replacement slot */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#delkey\">delkey</a> = <a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#delkey\">delkey</a> = <a class=\"id\" href=\"#loop\">loop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check that we aren't going to overrun the user's quota */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#key_payload_reserve\">key_payload_reserve</a>(<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#datalen\">datalen</a> + <a class=\"id\" href=\"#KEYQUOTA_LINK_BYTES\">KEYQUOTA_LINK_BYTES</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_sem\">error_sem</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a> && <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> &lt; <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#maxkeys\">maxkeys</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* there's sufficient slack space to append directly */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* grow the key list */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> += <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#maxkeys\">maxkeys</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENFILE\">ENFILE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a> &gt; <a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_quota\">error_quota</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(*<a class=\"id\" href=\"#klist\">klist</a>) + sizeof(struct <a class=\"id\" href=\"#key\">key</a> *) * <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_quota\">error_quota</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nklist\">nklist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_quota\">error_quota</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#maxkeys\">maxkeys</a> = <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#keys\">keys</a>, <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(struct <a class=\"id\" href=\"#key\">key</a> *) * <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#delkey\">delkey</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#delkey\">delkey</a> = <a class=\"id\" href=\"#USHRT_MAX\">USHRT_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#delkey\">delkey</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* add the key into the new space */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#delkey\">delkey</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#_prealloc\">_prealloc</a> = <a class=\"id\" href=\"#nklist\">nklist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" = 0\");", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#error_quota\">error_quota</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* undo the quota changes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_payload_reserve\">key_payload_reserve</a>(<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#datalen\">datalen</a> - <a class=\"id\" href=\"#KEYQUOTA_LINK_BYTES\">KEYQUOTA_LINK_BYTES</a>);", 
"<a class=\"id\" href=\"#error_sem\">error_sem</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring_serialise_link_sem\">keyring_serialise_link_sem</a>);", 
"<a class=\"id\" href=\"#error_krsem\">error_krsem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" = %d\", <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * check already instantiated keys aren't going to be a problem</span>", 
"<span class=\"comment\"> * - the caller must have called __key_link_begin()</span>", 
"<span class=\"comment\"> * - don't need to call this for keys that were created since __key_link_begin()</span>", 
"<span class=\"comment\"> *   was called</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__key_link_check_live_key\">__key_link_check_live_key</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a> == &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check that we aren't going to create a cycle by linking one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * keyring to another */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#keyring_detect_cycle\">keyring_detect_cycle</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * link a key into to a keyring</span>", 
"<span class=\"comment\"> * - must be called with __key_link_begin() having being called</span>", 
"<span class=\"comment\"> * - discard already extant link to matching key if there is one</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__key_link\">__key_link</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> **<a class=\"id\" href=\"#_prealloc\">_prealloc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a>, *<a class=\"id\" href=\"#nklist\">nklist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a> = *<a class=\"id\" href=\"#_prealloc\">_prealloc</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#_prealloc\">_prealloc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kenter\">kenter</a>(\"%d,%d,%p\", <a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#serial\">serial</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a>, <a class=\"id\" href=\"#nklist\">nklist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a> = <a class=\"id\" href=\"#rcu_dereference_protected\">rcu_dereference_protected</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#rwsem_is_locked\">rwsem_is_locked</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#usage\">usage</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* there's a matching key we can displace or an empty slot in a newly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocated list we can fill */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nklist\">nklist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"replace %hu/%hu/%hu\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#delkey\">delkey</a>, <a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>, <a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#maxkeys\">maxkeys</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#delkey\">delkey</a>] = <a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>, <a class=\"id\" href=\"#nklist\">nklist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* dispose of the old keyring list and, if there was one, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * displaced key */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"dispose %hu/%hu/%hu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#delkey\">delkey</a>, <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>, <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#maxkeys\">maxkeys</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#keyring_unlink_rcu_disposal\">keyring_unlink_rcu_disposal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* there's sufficient slack space to append directly */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>] = <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * finish linking a key into to a keyring</span>", 
"<span class=\"comment\"> * - must be called with __key_link_begin() having being called</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__key_link_end\">__key_link_end</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#prealloc\">prealloc</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kenter\">kenter</a>(\"%d,%s,%p\", <a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#serial\">serial</a>, <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring_serialise_link_sem\">keyring_serialise_link_sem</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prealloc\">prealloc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_payload_reserve\">key_payload_reserve</a>(<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#datalen\">datalen</a> - <a class=\"id\" href=\"#KEYQUOTA_LINK_BYTES\">KEYQUOTA_LINK_BYTES</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * link a key to a keyring</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#key_link\">key_link</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#prealloc\">prealloc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__key_link_begin\">__key_link_begin</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#description\">description</a>, &amp;<a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__key_link_check_live_key\">__key_link_check_live_key</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__key_link\">__key_link</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#key\">key</a>, &amp;<a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__key_link_end\">__key_link_end</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#prealloc\">prealloc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#key_link\">key_link</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * unlink the first link to a key from a keyring</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#key_unlink\">key_unlink</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a>, *<a class=\"id\" href=\"#nklist\">nklist</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_check\">key_check</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOTDIR\">ENOTDIR</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#type\">type</a> != &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a> = <a class=\"id\" href=\"#rcu_dereference_locked_keyring\">rcu_dereference_locked_keyring</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* search the keyring for the key */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = 0; <a class=\"id\" href=\"#loop\">loop</a> &lt; <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>; <a class=\"id\" href=\"#loop\">loop</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#loop\">loop</a>] == <a class=\"id\" href=\"#key\">key</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#key_is_present\">key_is_present</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<a class=\"id\" href=\"#key_is_present\">key_is_present</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* we need to copy the key list for RCU purposes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#klist\">klist</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#key\">key</a> *) * <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#maxkeys\">maxkeys</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nklist\">nklist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nomem\">nomem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#maxkeys\">maxkeys</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#maxkeys\">maxkeys</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> - 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#loop\">loop</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#keys\">keys</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#loop\">loop</a> * sizeof(struct <a class=\"id\" href=\"#key\">key</a> *));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#loop\">loop</a> &lt; <a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#loop\">loop</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#loop\">loop</a> + 1],", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#nklist\">nklist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> - <a class=\"id\" href=\"#loop\">loop</a>) * sizeof(struct <a class=\"id\" href=\"#key\">key</a> *));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* adjust the user's quota */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_payload_reserve\">key_payload_reserve</a>(<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#datalen\">datalen</a> - <a class=\"id\" href=\"#KEYQUOTA_LINK_BYTES\">KEYQUOTA_LINK_BYTES</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>, <a class=\"id\" href=\"#nklist\">nklist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* schedule for later cleanup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#delkey\">delkey</a> = <a class=\"id\" href=\"#loop\">loop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#keyring_unlink_rcu_disposal\">keyring_unlink_rcu_disposal</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<a class=\"id\" href=\"#nomem\">nomem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"} <span class=\"comment\">/* end key_unlink() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#key_unlink\">key_unlink</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dispose of a keyring list after the RCU grace period, releasing the keys it</span>", 
"<span class=\"comment\"> * links to</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#keyring_clear_rcu_disposal\">keyring_clear_rcu_disposal</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rcu\">rcu</a>, struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> - 1; <a class=\"id\" href=\"#loop\">loop</a> >= 0; <a class=\"id\" href=\"#loop\">loop</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#loop\">loop</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#klist\">klist</a>);", 
"", 
"} <span class=\"comment\">/* end keyring_clear_rcu_disposal() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * clear the specified process keyring</span>", 
"<span class=\"comment\"> * - implements keyctl(KEYCTL_CLEAR)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#keyring_clear\">keyring_clear</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOTDIR\">ENOTDIR</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#type\">type</a> == &amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* detach the pointer block with the locks held */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a> = <a class=\"id\" href=\"#rcu_dereference_locked_keyring\">rcu_dereference_locked_keyring</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* adjust the quota */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_payload_reserve\">key_payload_reserve</a>(<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    sizeof(struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* free the keys after the locks have been dropped */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#keyring_clear_rcu_disposal\">keyring_clear_rcu_disposal</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"} <span class=\"comment\">/* end keyring_clear() */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#keyring_clear\">keyring_clear</a>);", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dispose of the links from a revoked keyring</span>", 
"<span class=\"comment\"> * - called with the key sem write-locked</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#keyring_revoke\">keyring_revoke</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a> = <a class=\"id\" href=\"#rcu_dereference_locked_keyring\">rcu_dereference_locked_keyring</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* adjust the quota */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_payload_reserve\">key_payload_reserve</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#klist\">klist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#keyring_clear_rcu_disposal\">keyring_clear_rcu_disposal</a>);", 
"<span class=\"ts\"/>}", 
"", 
"} <span class=\"comment\">/* end keyring_revoke() */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine whether a key is dead</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#key_is_dead\">key_is_dead</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#time_t\">time_t</a> <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_FLAG_DEAD\">KEY_FLAG_DEAD</a>, &amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#expiry\">expiry</a> &gt; 0 && <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#expiry\">expiry</a> <= <a class=\"id\" href=\"#limit\">limit</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Collect garbage from the contents of a keyring</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#keyring_gc\">keyring_gc</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#time_t\">time_t</a> <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a> *<a class=\"id\" href=\"#klist\">klist</a>, *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>, <a class=\"id\" href=\"#keep\">keep</a>, <a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kenter\">kenter</a>(\"{%x,%s}\", <a class=\"id\" href=\"#key_serial\">key_serial</a>(<a class=\"id\" href=\"#keyring\">keyring</a>), <a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#description\">description</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist\">klist</a> = <a class=\"id\" href=\"#rcu_dereference_locked_keyring\">rcu_dereference_locked_keyring</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#klist\">klist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_klist\">no_klist</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* work out how many subscriptions we're keeping */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keep\">keep</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> - 1; <a class=\"id\" href=\"#loop\">loop</a> >= 0; <a class=\"id\" href=\"#loop\">loop</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#key_is_dead\">key_is_dead</a>(<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#loop\">loop</a>], <a class=\"id\" href=\"#limit\">limit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#keep\">keep</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keep\">keep</a> == <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#just_return\">just_return</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate a new keyring payload */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#keep\">keep</a>, 4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a>) + <a class=\"id\" href=\"#max\">max</a> * sizeof(struct <a class=\"id\" href=\"#key\">key</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nomem\">nomem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#maxkeys\">maxkeys</a> = <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#delkey\">delkey</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* install the live keys</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - must take care as expired keys may be updated back to life</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keep\">keep</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> - 1; <a class=\"id\" href=\"#loop\">loop</a> >= 0; <a class=\"id\" href=\"#loop\">loop</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#loop\">loop</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#key_is_dead\">key_is_dead</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#limit\">limit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#keep\">keep</a> >= <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#discard_new\">discard_new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#keys\">keys</a>[<a class=\"id\" href=\"#keep\">keep</a>++] = <a class=\"id\" href=\"#key_get\">key_get</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> = <a class=\"id\" href=\"#keep\">keep</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* adjust the quota */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_payload_reserve\">key_payload_reserve</a>(<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    sizeof(struct <a class=\"id\" href=\"#keyring_list\">keyring_list</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#KEYQUOTA_LINK_BYTES\">KEYQUOTA_LINK_BYTES</a> * <a class=\"id\" href=\"#keep\">keep</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keep\">keep</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#subscriptions\">subscriptions</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#klist\">klist</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#keyring_clear_rcu_disposal\">keyring_clear_rcu_disposal</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" [yes]\");", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#discard_new\">discard_new</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#nkeys\">nkeys</a> = <a class=\"id\" href=\"#keep\">keep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keyring_clear_rcu_disposal\">keyring_clear_rcu_disposal</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" [discard]\");", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#just_return\">just_return</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" [no dead]\");", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#no_klist\">no_klist</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" [no_klist]\");", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#nomem\">nomem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#keyring\">keyring</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" [oom]\");", 
"}", 
];
xr_frag_insert('l/63/807e1fc86091a81af6a10e62c90e1717ebc05b.xr', __xr_tmp);
