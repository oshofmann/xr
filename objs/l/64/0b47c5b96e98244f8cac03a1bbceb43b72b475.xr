var __xr_tmp = [
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#event_list\">event_list</a>, <a class=\"id\" href=\"#event_entry\">event_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_event_task_match\">perf_event_task_match</a>(<a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_task_output\">perf_event_task_output</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#task_event\">task_event</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_task_event\">perf_event_task_event</a>(struct <a class=\"id\" href=\"#perf_task_event\">perf_task_event</a> *<a class=\"id\" href=\"#task_event\">task_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#task_event\">task_event</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_task_ctx\">perf_event_task_ctx</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#task_event\">task_event</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_task_ctx\">perf_event_task_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#task_event\">task_event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_task\">perf_event_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#task_ctx\">task_ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_task_event\">perf_task_event</a> <a class=\"id\" href=\"#task_event\">task_event</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nr_comm_events\">nr_comm_events</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nr_mmap_events\">nr_mmap_events</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nr_task_events\">nr_task_events</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_event\">task_event</a> = (struct <a class=\"id\" href=\"#perf_task_event\">perf_task_event</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#task\">task</a><span class=\"ts\"/>  = <a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#task_ctx\">task_ctx</a> = <a class=\"id\" href=\"#task_ctx\">task_ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#event_id\">event_id</a>    = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#header\">header</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#new\">new</a> ? <a class=\"id\" href=\"#PERF_RECORD_FORK\">PERF_RECORD_FORK</a> : <a class=\"id\" href=\"#PERF_RECORD_EXIT\">PERF_RECORD_EXIT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#misc\">misc</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#task_event\">task_event</a>.<a class=\"id\" href=\"#event_id\">event_id</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .pid  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .ppid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .tid  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .ptid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#perf_clock\">perf_clock</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_task_event\">perf_event_task_event</a>(&amp;<a class=\"id\" href=\"#task_event\">task_event</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_event_fork\">perf_event_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_task\">perf_event_task</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * comm tracking</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#perf_comm_event\">perf_comm_event</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#comm\">comm</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#comm_size\">comm_size</a>;", 
"", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_header\">perf_event_header</a><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid\">tid</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#event_id\">event_id</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#perf_event_comm_output\">perf_event_comm_output</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#perf_comm_event\">perf_comm_event</a> *<a class=\"id\" href=\"#comm_event\">comm_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> <a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>.<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#perf_output_begin\">perf_output_begin</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#size\">size</a>, 0, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>.<a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#perf_event_pid\">perf_event_pid</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>.<a class=\"id\" href=\"#tid\">tid</a> = <a class=\"id\" href=\"#perf_event_tid\">perf_event_tid</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_put\">perf_output_put</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_copy\">perf_output_copy</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#comm_size\">comm_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_end\">perf_output_end</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_event_comm_match\">perf_event_comm_match</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != -1 && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#comm\">comm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_comm_ctx\">perf_event_comm_ctx</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#perf_comm_event\">perf_comm_event</a> *<a class=\"id\" href=\"#comm_event\">comm_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#event_list\">event_list</a>, <a class=\"id\" href=\"#event_entry\">event_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_event_comm_match\">perf_event_comm_match</a>(<a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_comm_output\">perf_event_comm_output</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#comm_event\">comm_event</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_comm_event\">perf_event_comm_event</a>(struct <a class=\"id\" href=\"#perf_comm_event\">perf_comm_event</a> *<a class=\"id\" href=\"#comm_event\">comm_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#comm\">comm</a>[<a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#comm\">comm</a>, 0, sizeof(<a class=\"id\" href=\"#comm\">comm</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#comm\">comm</a>, sizeof(<a class=\"id\" href=\"#comm\">comm</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#comm\">comm</a>)+1, sizeof(<a class=\"id\" href=\"#u64\">u64</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#comm\">comm</a> = <a class=\"id\" href=\"#comm\">comm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#comm_size\">comm_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>.<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#comm_event\">comm_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>) + <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_comm_ctx\">perf_event_comm_ctx</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#comm_event\">comm_event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_comm_ctx\">perf_event_comm_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#comm_event\">comm_event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_event_comm\">perf_event_comm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_comm_event\">perf_comm_event</a> <a class=\"id\" href=\"#comm_event\">comm_event</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_enable_on_exec\">perf_event_enable_on_exec</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nr_comm_events\">nr_comm_events</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#comm_event\">comm_event</a> = (struct <a class=\"id\" href=\"#perf_comm_event\">perf_comm_event</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#task\">task</a><span class=\"ts\"/>= <a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .comm      */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .comm_size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#event_id\">event_id</a>  = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#header\">header</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PERF_RECORD_COMM\">PERF_RECORD_COMM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#misc\">misc</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .pid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .tid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_comm_event\">perf_event_comm_event</a>(&amp;<a class=\"id\" href=\"#comm_event\">comm_event</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mmap tracking</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#perf_mmap_event\">perf_mmap_event</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#file_name\">file_name</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_size\">file_size</a>;", 
"", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_header\">perf_event_header</a><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid\">tid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#event_id\">event_id</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#perf_event_mmap_output\">perf_event_mmap_output</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#perf_mmap_event\">perf_mmap_event</a> *<a class=\"id\" href=\"#mmap_event\">mmap_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> <a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>.<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#perf_output_begin\">perf_output_begin</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#size\">size</a>, 0, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>.<a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#perf_event_pid\">perf_event_pid</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>.<a class=\"id\" href=\"#tid\">tid</a> = <a class=\"id\" href=\"#perf_event_tid\">perf_event_tid</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_put\">perf_output_put</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_copy\">perf_output_copy</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#file_name\">file_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#file_size\">file_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_end\">perf_output_end</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_event_mmap_match\">perf_event_mmap_match</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#perf_mmap_event\">perf_mmap_event</a> *<a class=\"id\" href=\"#mmap_event\">mmap_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#executable\">executable</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != -1 && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#executable\">executable</a> && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mmap_data\">mmap_data</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#executable\">executable</a> && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mmap\">mmap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_mmap_ctx\">perf_event_mmap_ctx</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#perf_mmap_event\">perf_mmap_event</a> *<a class=\"id\" href=\"#mmap_event\">mmap_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#executable\">executable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#event_list\">event_list</a>, <a class=\"id\" href=\"#event_entry\">event_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_event_mmap_match\">perf_event_mmap_match</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#mmap_event\">mmap_event</a>, <a class=\"id\" href=\"#executable\">executable</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_mmap_output\">perf_event_mmap_output</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#mmap_event\">mmap_event</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_mmap_event\">perf_event_mmap_event</a>(struct <a class=\"id\" href=\"#perf_mmap_event\">perf_mmap_event</a> *<a class=\"id\" href=\"#mmap_event\">mmap_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[16];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, 0, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * d_path works from the end of the buffer backwards, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need to add enough zero bytes after the string to handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the 64bit alignment we do later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a> + sizeof(<a class=\"id\" href=\"#u64\">u64</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, \"//enomem\", sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_name\">got_name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#d_path\">d_path</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, \"//toolong\", sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_name\">got_name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_vma_name\">arch_vma_name</a>(<a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#vma\">vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#arch_vma_name\">arch_vma_name</a>(<a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#vma\">vma</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_name\">got_name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, \"[vdso]\", sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_name\">got_name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>-><a class=\"id\" href=\"#start_brk\">start_brk</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> >= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>-><a class=\"id\" href=\"#brk\">brk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, \"[heap]\", sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_name\">got_name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>-><a class=\"id\" href=\"#start_stack\">start_stack</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> >= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>-><a class=\"id\" href=\"#start_stack\">start_stack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, \"[stack]\", sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_name\">got_name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, \"//anon\", sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_name\">got_name</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#got_name\">got_name</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>)+1, sizeof(<a class=\"id\" href=\"#u64\">u64</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#file_name\">file_name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#file_size\">file_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>.<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#mmap_event\">mmap_event</a>-><a class=\"id\" href=\"#event_id\">event_id</a>) + <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_mmap_ctx\">perf_event_mmap_ctx</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#mmap_event\">mmap_event</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_mmap_ctx\">perf_event_mmap_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#mmap_event\">mmap_event</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_event_mmap\">perf_event_mmap</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_mmap_event\">perf_mmap_event</a> <a class=\"id\" href=\"#mmap_event\">mmap_event</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nr_mmap_events\">nr_mmap_events</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmap_event\">mmap_event</a> = (struct <a class=\"id\" href=\"#perf_mmap_event\">perf_mmap_event</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#vma\">vma</a><span class=\"ts\"/>= <a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .file_name */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .file_size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#event_id\">event_id</a>  = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#header\">header</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PERF_RECORD_MMAP\">PERF_RECORD_MMAP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#misc\">misc</a> = <a class=\"id\" href=\"#PERF_RECORD_MISC_USER\">PERF_RECORD_MISC_USER</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .pid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* .tid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a>  = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#len\">len</a>    = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#pgoff\">pgoff</a>  = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_mmap_event\">perf_event_mmap_event</a>(&amp;<a class=\"id\" href=\"#mmap_event\">mmap_event</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * IRQ throttle logging</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#perf_log_throttle\">perf_log_throttle</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> <a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_header\">perf_event_header</a><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stream_id\">stream_id</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#throttle_event\">throttle_event</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#header\">header</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PERF_RECORD_THROTTLE\">PERF_RECORD_THROTTLE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#misc\">misc</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#throttle_event\">throttle_event</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#time\">time</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_clock\">perf_clock</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#id\">id</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#primary_event_id\">primary_event_id</a>(<a class=\"id\" href=\"#event\">event</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#stream_id\">stream_id</a><span class=\"ts\"/>= <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#throttle_event\">throttle_event</a>.<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PERF_RECORD_UNTHROTTLE\">PERF_RECORD_UNTHROTTLE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#perf_output_begin\">perf_output_begin</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#event\">event</a>, sizeof(<a class=\"id\" href=\"#throttle_event\">throttle_event</a>), 1, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_put\">perf_output_put</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#throttle_event\">throttle_event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_end\">perf_output_end</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic event overflow handling, sampling.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#__perf_event_overflow\">__perf_event_overflow</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, int <a class=\"id\" href=\"#nmi\">nmi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#throttle\">throttle</a>, struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#events\">events</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#event_limit\">event_limit</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#throttle\">throttle</a> = (<a class=\"id\" href=\"#throttle\">throttle</a> && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#unthrottle\">unthrottle</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#throttle\">throttle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#interrupts\">interrupts</a>++;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#interrupts\">interrupts</a> != <a class=\"id\" href=\"#MAX_INTERRUPTS\">MAX_INTERRUPTS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#interrupts\">interrupts</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#HZ\">HZ</a> * <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#interrupts\">interrupts</a> &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#sysctl_perf_event_sample_rate\">sysctl_perf_event_sample_rate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#interrupts\">interrupts</a> = <a class=\"id\" href=\"#MAX_INTERRUPTS\">MAX_INTERRUPTS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_log_throttle\">perf_log_throttle</a>(<a class=\"id\" href=\"#event\">event</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Keep re-disabling events even though on the previous</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pass we disabled it - just in case we raced with a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sched-in and the event got enabled again:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#freq\">freq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#perf_clock\">perf_clock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#freq_time_stamp\">freq_time_stamp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#freq_time_stamp\">freq_time_stamp</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; 0 && <a class=\"id\" href=\"#delta\">delta</a> &lt; 2*<a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_adjust_period\">perf_adjust_period</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_period\">last_period</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX event_limit might not quite work as expected on inherited</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * events</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_kill\">pending_kill</a> = <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#events\">events</a> && <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#event_limit\">event_limit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_kill\">pending_kill</a> = <a class=\"id\" href=\"#POLL_HUP\">POLL_HUP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi\">nmi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_disable\">pending_disable</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_pending_queue\">perf_pending_queue</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending\">pending</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#perf_pending_event\">perf_pending_event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_disable\">perf_event_disable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#overflow_handler\">overflow_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#overflow_handler\">overflow_handler</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#nmi\">nmi</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_output\">perf_event_output</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#nmi\">nmi</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#perf_event_overflow\">perf_event_overflow</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, int <a class=\"id\" href=\"#nmi\">nmi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__perf_event_overflow\">__perf_event_overflow</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#nmi\">nmi</a>, 1, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic software event infrastructure</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We directly increment event-&gt;count and keep a second value in</span>", 
"<span class=\"comment\"> * event-&gt;hw.period_left to count intervals. This period event</span>", 
"<span class=\"comment\"> * is kept in the range [-sample_period, 0] so that we can use the</span>", 
"<span class=\"comment\"> * sign as trigger.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#perf_swevent_set_period\">perf_swevent_set_period</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_period\">last_period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_period\">last_period</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#local64_read\">local64_read</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#div64_u64\">div64_u64</a>(<a class=\"id\" href=\"#period\">period</a> + <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#period\">period</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#nr\">nr</a> * <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> -= <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local64_cmpxchg\">local64_cmpxchg</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#val\">val</a>) != <a class=\"id\" href=\"#old\">old</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_swevent_overflow\">perf_swevent_overflow</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#overflow\">overflow</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#nmi\">nmi</a>, struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#throttle\">throttle</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#last_period\">last_period</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#overflow\">overflow</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#overflow\">overflow</a> = <a class=\"id\" href=\"#perf_swevent_set_period\">perf_swevent_set_period</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#interrupts\">interrupts</a> == <a class=\"id\" href=\"#MAX_INTERRUPTS\">MAX_INTERRUPTS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#overflow\">overflow</a>; <a class=\"id\" href=\"#overflow\">overflow</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__perf_event_overflow\">__perf_event_overflow</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#nmi\">nmi</a>, <a class=\"id\" href=\"#throttle\">throttle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We inhibit the overflow from happening when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * hwc-&gt;interrupts == MAX_INTERRUPTS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#throttle\">throttle</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_swevent_add\">perf_swevent_add</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nr\">nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#nmi\">nmi</a>, struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_add\">local64_add</a>(<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#regs\">regs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> == 1 && <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a> == 1 && !<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#freq\">freq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#perf_swevent_overflow\">perf_swevent_overflow</a>(<a class=\"id\" href=\"#event\">event</a>, 1, <a class=\"id\" href=\"#nmi\">nmi</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local64_add_negative\">local64_add_negative</a>(<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_swevent_overflow\">perf_swevent_overflow</a>(<a class=\"id\" href=\"#event\">event</a>, 0, <a class=\"id\" href=\"#nmi\">nmi</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_exclude_event\">perf_exclude_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclude_user\">exclude_user</a> && <a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclude_kernel\">exclude_kernel</a> && !<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_swevent_match\">perf_swevent_match</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#perf_type_id\">perf_type_id</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event_id\">event_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#config\">config</a> != <a class=\"id\" href=\"#event_id\">event_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_exclude_event\">perf_exclude_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#swevent_hash\">swevent_hash</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event_id\">event_id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#event_id\">event_id</a> | (<a class=\"id\" href=\"#type\">type</a> << 32);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hash_64\">hash_64</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#SWEVENT_HLIST_BITS\">SWEVENT_HLIST_BITS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *", 
"<a class=\"id\" href=\"#__find_swevent_head\">__find_swevent_head</a>(struct <a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a> *<a class=\"id\" href=\"#hlist\">hlist</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event_id\">event_id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#swevent_hash\">swevent_hash</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#event_id\">event_id</a>);", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#hlist\">hlist</a>-><a class=\"id\" href=\"#heads\">heads</a>[<a class=\"id\" href=\"#hash\">hash</a>];", 
"}", 
"", 
"<span class=\"comment\">/* For the read side: events when they trigger */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *", 
"<a class=\"id\" href=\"#find_swevent_head_rcu\">find_swevent_head_rcu</a>(struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event_id\">event_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a> *<a class=\"id\" href=\"#hlist\">hlist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist\">hlist</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hlist\">hlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__find_swevent_head\">__find_swevent_head</a>(<a class=\"id\" href=\"#hlist\">hlist</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#event_id\">event_id</a>);", 
"}", 
"", 
"<span class=\"comment\">/* For the event head insertion and removal in the hlist */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *", 
"<a class=\"id\" href=\"#find_swevent_head\">find_swevent_head</a>(struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a> *<a class=\"id\" href=\"#hlist\">hlist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event_id\">event_id</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#config\">config</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Event scheduling is always serialized against hlist allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and release. Which makes the protected version suitable here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The context lock guarantees that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist\">hlist</a> = <a class=\"id\" href=\"#rcu_dereference_protected\">rcu_dereference_protected</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hlist\">hlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__find_swevent_head\">__find_swevent_head</a>(<a class=\"id\" href=\"#hlist\">hlist</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#event_id\">event_id</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_perf_sw_event\">do_perf_sw_event</a>(enum <a class=\"id\" href=\"#perf_type_id\">perf_type_id</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event_id\">event_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nr\">nr</a>, int <a class=\"id\" href=\"#nmi\">nmi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#find_swevent_head_rcu\">find_swevent_head_rcu</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#event_id\">event_id</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_swevent_match\">perf_swevent_match</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#event_id\">event_id</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_swevent_add\">perf_swevent_add</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#nmi\">nmi</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#end\">end</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"int <a class=\"id\" href=\"#perf_swevent_get_recursion_context\">perf_swevent_get_recursion_context</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rctx\">rctx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_nmi\">in_nmi</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rctx\">rctx</a> = 3;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#in_irq\">in_irq</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rctx\">rctx</a> = 2;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#in_softirq\">in_softirq</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rctx\">rctx</a> = 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rctx\">rctx</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#recursion\">recursion</a>[<a class=\"id\" href=\"#rctx\">rctx</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#recursion\">recursion</a>[<a class=\"id\" href=\"#rctx\">rctx</a>]++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rctx\">rctx</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#perf_swevent_get_recursion_context\">perf_swevent_get_recursion_context</a>);", 
"", 
"void <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#perf_swevent_put_recursion_context\">perf_swevent_put_recursion_context</a>(int <a class=\"id\" href=\"#rctx\">rctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#recursion\">recursion</a>[<a class=\"id\" href=\"#rctx\">rctx</a>]--;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__perf_sw_event\">__perf_sw_event</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event_id\">event_id</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nr\">nr</a>, int <a class=\"id\" href=\"#nmi\">nmi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rctx\">rctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable_notrace\">preempt_disable_notrace</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rctx\">rctx</a> = <a class=\"id\" href=\"#perf_swevent_get_recursion_context\">perf_swevent_get_recursion_context</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rctx\">rctx</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_sample_data_init\">perf_sample_data_init</a>(&amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_perf_sw_event\">do_perf_sw_event</a>(<a class=\"id\" href=\"#PERF_TYPE_SOFTWARE\">PERF_TYPE_SOFTWARE</a>, <a class=\"id\" href=\"#event_id\">event_id</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#nmi\">nmi</a>, &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_swevent_put_recursion_context\">perf_swevent_put_recursion_context</a>(<a class=\"id\" href=\"#rctx\">rctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_notrace\">preempt_enable_notrace</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_swevent_read\">perf_swevent_read</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_swevent_enable\">perf_swevent_enable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_period\">last_period</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_swevent_set_period\">perf_swevent_set_period</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#find_swevent_head\">find_swevent_head</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_swevent_disable\">perf_swevent_disable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_swevent_void\">perf_swevent_void</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_swevent_int\">perf_swevent_int</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#pmu\">pmu</a> <a class=\"id\" href=\"#perf_ops_generic\">perf_ops_generic</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enable\">enable</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_swevent_enable\">perf_swevent_enable</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disable\">disable</a><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_swevent_disable\">perf_swevent_disable</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_swevent_int\">perf_swevent_int</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_swevent_void\">perf_swevent_void</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_swevent_read\">perf_swevent_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unthrottle\">unthrottle</a><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_swevent_void\">perf_swevent_void</a>, <span class=\"comment\">/* hwc-&gt;interrupts already reset */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * hrtimer based swevent callback</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static enum <a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a> <a class=\"id\" href=\"#perf_swevent_hrtimer\">perf_swevent_hrtimer</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#hrtimer\">hrtimer</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#HRTIMER_RESTART\">HRTIMER_RESTART</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#period\">period</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#hrtimer\">hrtimer</a>, struct <a class=\"id\" href=\"#perf_event\">perf_event</a>, <a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#hrtimer\">hrtimer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#read\">read</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_sample_data_init\">perf_sample_data_init</a>(&amp;<a class=\"id\" href=\"#data\">data</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#last_period\">last_period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#get_irq_regs\">get_irq_regs</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a> && !<a class=\"id\" href=\"#perf_exclude_event\">perf_exclude_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclude_idle\">exclude_idle</a> && <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_event_overflow\">perf_event_overflow</a>(<a class=\"id\" href=\"#event\">event</a>, 0, &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#HRTIMER_NORESTART\">HRTIMER_NORESTART</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#u64\">u64</a>, 10000, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#sample_period\">sample_period</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_forward_now\">hrtimer_forward_now</a>(<a class=\"id\" href=\"#hrtimer\">hrtimer</a>, <a class=\"id\" href=\"#ns_to_ktime\">ns_to_ktime</a>(<a class=\"id\" href=\"#period\">period</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_swevent_start_hrtimer\">perf_swevent_start_hrtimer</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init\">hrtimer_init</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#hrtimer\">hrtimer</a>, <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>, <a class=\"id\" href=\"#HRTIMER_MODE_REL\">HRTIMER_MODE_REL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#hrtimer\">hrtimer</a>.<a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#perf_swevent_hrtimer\">perf_swevent_hrtimer</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#period\">period</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#remaining\">remaining</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#remaining\">remaining</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = 10000;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#remaining\">remaining</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#remaining\">remaining</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#u64\">u64</a>, 10000, <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__hrtimer_start_range_ns\">__hrtimer_start_range_ns</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#hrtimer\">hrtimer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns_to_ktime\">ns_to_ktime</a>(<a class=\"id\" href=\"#period\">period</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HRTIMER_MODE_REL\">HRTIMER_MODE_REL</a>, 0);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_swevent_cancel_hrtimer\">perf_swevent_cancel_hrtimer</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#remaining\">remaining</a> = <a class=\"id\" href=\"#hrtimer_get_remaining\">hrtimer_get_remaining</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#hrtimer\">hrtimer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#remaining\">remaining</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#remaining\">remaining</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#hrtimer\">hrtimer</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Software event: cpu wall time clock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#cpu_clock_perf_event_update\">cpu_clock_perf_event_update</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#cpu_clock\">cpu_clock</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#local64_xchg\">local64_xchg</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#prev_count\">prev_count</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_add\">local64_add</a>(<a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#prev\">prev</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cpu_clock_perf_event_enable\">cpu_clock_perf_event_enable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_set\">local64_set</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#prev_count\">prev_count</a>, <a class=\"id\" href=\"#cpu_clock\">cpu_clock</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_swevent_start_hrtimer\">perf_swevent_start_hrtimer</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cpu_clock_perf_event_disable\">cpu_clock_perf_event_disable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_swevent_cancel_hrtimer\">perf_swevent_cancel_hrtimer</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_clock_perf_event_update\">cpu_clock_perf_event_update</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cpu_clock_perf_event_read\">cpu_clock_perf_event_read</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_clock_perf_event_update\">cpu_clock_perf_event_update</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#pmu\">pmu</a> <a class=\"id\" href=\"#perf_ops_cpu_clock\">perf_ops_cpu_clock</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enable\">enable</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_clock_perf_event_enable\">cpu_clock_perf_event_enable</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disable\">disable</a><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_clock_perf_event_disable\">cpu_clock_perf_event_disable</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_clock_perf_event_read\">cpu_clock_perf_event_read</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Software event: task time clock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#task_clock_perf_event_update\">task_clock_perf_event_update</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#local64_xchg\">local64_xchg</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#prev_count\">prev_count</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_add\">local64_add</a>(<a class=\"id\" href=\"#delta\">delta</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#task_clock_perf_event_enable\">task_clock_perf_event_enable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_set\">local64_set</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#prev_count\">prev_count</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_swevent_start_hrtimer\">perf_swevent_start_hrtimer</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#task_clock_perf_event_disable\">task_clock_perf_event_disable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_swevent_cancel_hrtimer\">perf_swevent_cancel_hrtimer</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_clock_perf_event_update\">task_clock_perf_event_update</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a>);", 
"", 
"}", 
"", 
"static void <a class=\"id\" href=\"#task_clock_perf_event_read\">task_clock_perf_event_read</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#time\">time</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_nmi\">in_nmi</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_context_time\">update_context_time</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#perf_clock\">perf_clock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#timestamp\">timestamp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a> + <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_clock_perf_event_update\">task_clock_perf_event_update</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#time\">time</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#pmu\">pmu</a> <a class=\"id\" href=\"#perf_ops_task_clock\">perf_ops_task_clock</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enable\">enable</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#task_clock_perf_event_enable\">task_clock_perf_event_enable</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disable\">disable</a><span class=\"ts\"/>= <a class=\"id\" href=\"#task_clock_perf_event_disable\">task_clock_perf_event_disable</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#task_clock_perf_event_read\">task_clock_perf_event_read</a>,", 
"};", 
"", 
"<span class=\"comment\">/* Deref the hlist from the update side */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a> *", 
"<a class=\"id\" href=\"#swevent_hlist_deref\">swevent_hlist_deref</a>(struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_dereference_protected\">rcu_dereference_protected</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#hlist_mutex\">hlist_mutex</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#swevent_hlist_release_rcu\">swevent_hlist_release_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu_head\">rcu_head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a> *<a class=\"id\" href=\"#hlist\">hlist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist\">hlist</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rcu_head\">rcu_head</a>, struct <a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#hlist\">hlist</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#swevent_hlist_release\">swevent_hlist_release</a>(struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a> *<a class=\"id\" href=\"#hlist\">hlist</a> = <a class=\"id\" href=\"#swevent_hlist_deref\">swevent_hlist_deref</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hlist\">hlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#hlist\">hlist</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#swevent_hlist_release_rcu\">swevent_hlist_release_rcu</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#swevent_hlist_put_cpu\">swevent_hlist_put_cpu</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#hlist_mutex\">hlist_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#hlist_refcount\">hlist_refcount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swevent_hlist_release\">swevent_hlist_release</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#hlist_mutex\">hlist_mutex</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#swevent_hlist_put\">swevent_hlist_put</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swevent_hlist_put_cpu\">swevent_hlist_put_cpu</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swevent_hlist_put_cpu\">swevent_hlist_put_cpu</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#swevent_hlist_get_cpu\">swevent_hlist_get_cpu</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#hlist_mutex\">hlist_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#swevent_hlist_deref\">swevent_hlist_deref</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>) && <a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a> *<a class=\"id\" href=\"#hlist\">hlist</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist\">hlist</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#hlist\">hlist</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a>, <a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#hlist_refcount\">hlist_refcount</a>++;", 
" <a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#hlist_mutex\">hlist_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#swevent_hlist_get\">swevent_hlist_get</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#failed_cpu\">failed_cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#swevent_hlist_get_cpu\">swevent_hlist_get_cpu</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#swevent_hlist_get_cpu\">swevent_hlist_get_cpu</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#failed_cpu\">failed_cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
" <a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#failed_cpu\">failed_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swevent_hlist_put_cpu\">swevent_hlist_put_cpu</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EVENT_TRACING\">CONFIG_EVENT_TRACING</a>", 
"", 
"static const struct <a class=\"id\" href=\"#pmu\">pmu</a> <a class=\"id\" href=\"#perf_ops_tracepoint\">perf_ops_tracepoint</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enable\">enable</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_trace_enable\">perf_trace_enable</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disable\">disable</a><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_trace_disable\">perf_trace_disable</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_swevent_int\">perf_swevent_int</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_swevent_void\">perf_swevent_void</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_swevent_read\">perf_swevent_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unthrottle\">unthrottle</a><span class=\"ts\"/>= <a class=\"id\" href=\"#perf_swevent_void\">perf_swevent_void</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#perf_tp_filter_match\">perf_tp_filter_match</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#record\">record</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#raw\">raw</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#filter\">filter</a>) || <a class=\"id\" href=\"#filter_match_preds\">filter_match_preds</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#filter\">filter</a>, <a class=\"id\" href=\"#record\">record</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_tp_event_match\">perf_tp_event_match</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * All tracepoints are from kernel-space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclude_kernel\">exclude_kernel</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#perf_tp_filter_match\">perf_tp_filter_match</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_tp_event\">perf_tp_event</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#count\">count</a>, void *<a class=\"id\" href=\"#record\">record</a>, int <a class=\"id\" href=\"#entry_size\">entry_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>, int <a class=\"id\" href=\"#rctx\">rctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_raw_record\">perf_raw_record</a> <a class=\"id\" href=\"#raw\">raw</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#entry_size\">entry_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#record\">record</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_sample_data_init\">perf_sample_data_init</a>(&amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#raw\">raw</a> = &amp;<a class=\"id\" href=\"#raw\">raw</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_tp_event_match\">perf_tp_event_match</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_swevent_add\">perf_swevent_add</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#count\">count</a>, 1, &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_swevent_put_recursion_context\">perf_swevent_put_recursion_context</a>(<a class=\"id\" href=\"#rctx\">rctx</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#perf_tp_event\">perf_tp_event</a>);", 
"", 
"static void <a class=\"id\" href=\"#tp_perf_event_destroy\">tp_perf_event_destroy</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_trace_destroy\">perf_trace_destroy</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#tp_perf_event_init\">tp_perf_event_init</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Raw tracepoint data is a severe data leak, only allow root to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have these.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#sample_type\">sample_type</a> &amp; <a class=\"id\" href=\"#PERF_SAMPLE_RAW\">PERF_SAMPLE_RAW</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_paranoid_tracepoint_raw\">perf_paranoid_tracepoint_raw</a>() &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EPERM\">EPERM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#perf_trace_init\">perf_trace_init</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#destroy\">destroy</a> = <a class=\"id\" href=\"#tp_perf_event_destroy\">tp_perf_event_destroy</a>;", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#perf_ops_tracepoint\">perf_ops_tracepoint</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_event_set_filter\">perf_event_set_filter</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#filter_str\">filter_str</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#PERF_TYPE_TRACEPOINT\">PERF_TYPE_TRACEPOINT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filter_str\">filter_str</a> = <a class=\"id\" href=\"#strndup_user\">strndup_user</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#filter_str\">filter_str</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#filter_str\">filter_str</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_profile_set_filter\">ftrace_profile_set_filter</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#config\">config</a>, <a class=\"id\" href=\"#filter_str\">filter_str</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#filter_str\">filter_str</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_free_filter\">perf_event_free_filter</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_profile_free_filter\">ftrace_profile_free_filter</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"#else", 
"", 
"static const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#tp_perf_event_init\">tp_perf_event_init</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_event_set_filter\">perf_event_set_filter</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_free_filter\">perf_event_free_filter</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_EVENT_TRACING */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_HW_BREAKPOINT\">CONFIG_HAVE_HW_BREAKPOINT</a>", 
"static void <a class=\"id\" href=\"#bp_perf_event_destroy\">bp_perf_event_destroy</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_bp_slot\">release_bp_slot</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#bp_perf_event_init\">bp_perf_event_init</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_perf_hw_breakpoint\">register_perf_hw_breakpoint</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#destroy\">destroy</a> = <a class=\"id\" href=\"#bp_perf_event_destroy\">bp_perf_event_destroy</a>;", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#perf_ops_bp\">perf_ops_bp</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_bp_event\">perf_bp_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> <a class=\"id\" href=\"#sample\">sample</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_sample_data_init\">perf_sample_data_init</a>(&amp;<a class=\"id\" href=\"#sample\">sample</a>, <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_addr\">bp_addr</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#perf_exclude_event\">perf_exclude_event</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_swevent_add\">perf_swevent_add</a>(<a class=\"id\" href=\"#bp\">bp</a>, 1, 1, &amp;<a class=\"id\" href=\"#sample\">sample</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"#else", 
"static const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#bp_perf_event_init\">bp_perf_event_init</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_bp_event\">perf_bp_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>, void *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#perf_swevent_enabled\">perf_swevent_enabled</a>[<a class=\"id\" href=\"#PERF_COUNT_SW_MAX\">PERF_COUNT_SW_MAX</a>];", 
"", 
"static void <a class=\"id\" href=\"#sw_perf_event_destroy\">sw_perf_event_destroy</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#event_id\">event_id</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#config\">config</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#perf_swevent_enabled\">perf_swevent_enabled</a>[<a class=\"id\" href=\"#event_id\">event_id</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swevent_hlist_put\">swevent_hlist_put</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#sw_perf_event_init\">sw_perf_event_init</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#pmu\">pmu</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#event_id\">event_id</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#config\">config</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Software events (currently) can't in general distinguish</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * between user, kernel and hypervisor events.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * However, context switches and cpu migrations are considered</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to be kernel events, and page faults are never hypervisor</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * events.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#event_id\">event_id</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_COUNT_SW_CPU_CLOCK\">PERF_COUNT_SW_CPU_CLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a> = &amp;<a class=\"id\" href=\"#perf_ops_cpu_clock\">perf_ops_cpu_clock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_COUNT_SW_TASK_CLOCK\">PERF_COUNT_SW_TASK_CLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the user instantiates this as a per-cpu event,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * use the cpu_clock event instead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a> = &amp;<a class=\"id\" href=\"#perf_ops_task_clock\">perf_ops_task_clock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a> = &amp;<a class=\"id\" href=\"#perf_ops_cpu_clock\">perf_ops_cpu_clock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_COUNT_SW_PAGE_FAULTS\">PERF_COUNT_SW_PAGE_FAULTS</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_COUNT_SW_PAGE_FAULTS_MIN\">PERF_COUNT_SW_PAGE_FAULTS_MIN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_COUNT_SW_PAGE_FAULTS_MAJ\">PERF_COUNT_SW_PAGE_FAULTS_MAJ</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_COUNT_SW_CONTEXT_SWITCHES\">PERF_COUNT_SW_CONTEXT_SWITCHES</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_COUNT_SW_CPU_MIGRATIONS\">PERF_COUNT_SW_CPU_MIGRATIONS</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_COUNT_SW_ALIGNMENT_FAULTS\">PERF_COUNT_SW_ALIGNMENT_FAULTS</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_COUNT_SW_EMULATION_FAULTS\">PERF_COUNT_SW_EMULATION_FAULTS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#swevent_hlist_get\">swevent_hlist_get</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#perf_swevent_enabled\">perf_swevent_enabled</a>[<a class=\"id\" href=\"#event_id\">event_id</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#destroy\">destroy</a> = <a class=\"id\" href=\"#sw_perf_event_destroy\">sw_perf_event_destroy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a> = &amp;<a class=\"id\" href=\"#perf_ops_generic\">perf_ops_generic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pmu\">pmu</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate and initialize a event structure</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *", 
"<a class=\"id\" href=\"#perf_event_alloc\">perf_event_alloc</a>(struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#group_leader\">group_leader</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#parent_event\">parent_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#perf_overflow_handler_t\">perf_overflow_handler_t</a> <a class=\"id\" href=\"#overflow_handler\">overflow_handler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfpflags\">gfpflags</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#pmu\">pmu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#event\">event</a>), <a class=\"id\" href=\"#gfpflags\">gfpflags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Single events are their own group leaders, with an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * empty sibling list:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#group_leader\">group_leader</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_leader\">group_leader</a> = <a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_mutex\">child_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_list\">child_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#event_entry\">event_entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#waitq\">waitq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_mutex\">mmap_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a><span class=\"ts\"/><span class=\"ts\"/>= *<a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a><span class=\"ts\"/>= <a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#oncpu\">oncpu</a><span class=\"ts\"/><span class=\"ts\"/>= -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#parent_event\">parent_event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ns\">ns</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#get_pid_ns\">get_pid_ns</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#id\">id</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#atomic64_inc_return\">atomic64_inc_return</a>(&amp;<a class=\"id\" href=\"#perf_event_id\">perf_event_id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#overflow_handler\">overflow_handler</a> && <a class=\"id\" href=\"#parent_event\">parent_event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#overflow_handler\">overflow_handler</a> = <a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#overflow_handler\">overflow_handler</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#overflow_handler\">overflow_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#overflow_handler\">overflow_handler</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#disabled\">disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#freq\">freq</a> && <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#sample_freq\">sample_freq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_period\">last_period</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_set\">local64_set</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>, <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we currently do not support PERF_FORMAT_GROUP on inherited events</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#inherit\">inherit</a> && (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#read_format\">read_format</a> &amp; <a class=\"id\" href=\"#PERF_FORMAT_GROUP\">PERF_FORMAT_GROUP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_TYPE_RAW\">PERF_TYPE_RAW</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_TYPE_HARDWARE\">PERF_TYPE_HARDWARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_TYPE_HW_CACHE\">PERF_TYPE_HW_CACHE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a> = <a class=\"id\" href=\"#hw_perf_event_init\">hw_perf_event_init</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_TYPE_SOFTWARE\">PERF_TYPE_SOFTWARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a> = <a class=\"id\" href=\"#sw_perf_event_init\">sw_perf_event_init</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_TYPE_TRACEPOINT\">PERF_TYPE_TRACEPOINT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a> = <a class=\"id\" href=\"#tp_perf_event_init\">tp_perf_event_init</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_TYPE_BREAKPOINT\">PERF_TYPE_BREAKPOINT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a> = <a class=\"id\" href=\"#bp_perf_event_init\">bp_perf_event_init</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmu\">pmu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#pmu\">pmu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#pmu\">pmu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ns\">ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid_ns\">put_pid_ns</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a> = <a class=\"id\" href=\"#pmu\">pmu</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#nr_events\">nr_events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mmap\">mmap</a> || <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mmap_data\">mmap_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#nr_mmap_events\">nr_mmap_events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#comm\">comm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#nr_comm_events\">nr_comm_events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#nr_task_events\">nr_task_events</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_copy_attr\">perf_copy_attr</a>(struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uattr\">uattr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#uattr\">uattr</a>, <a class=\"id\" href=\"#PERF_ATTR_SIZE_VER0\">PERF_ATTR_SIZE_VER0</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * zero the full structure, so that a short copy will be nice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#attr\">attr</a>, 0, sizeof(*<a class=\"id\" href=\"#attr\">attr</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#uattr\">uattr</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)<span class=\"ts\"/><span class=\"comment\">/* silly large */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_size\">err_size</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* abi compat */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PERF_ATTR_SIZE_VER0\">PERF_ATTR_SIZE_VER0</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#PERF_ATTR_SIZE_VER0\">PERF_ATTR_SIZE_VER0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_size\">err_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're handed a bigger struct than we know of,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ensure all the unknown bits are 0 - i.e. new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * user-space does not rely on any kernel feature</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * extensions we dont know about yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; sizeof(*<a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#uattr\">uattr</a> + sizeof(*<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a>  = (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#uattr\">uattr</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#addr\">addr</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_size\">err_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(*<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#uattr\">uattr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the type exists, the corresponding creation will verify</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the attr-&gt;config.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#type\">type</a> >= <a class=\"id\" href=\"#PERF_TYPE_MAX\">PERF_TYPE_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#__reserved_1\">__reserved_1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#sample_type\">sample_type</a> &amp; ~(<a class=\"id\" href=\"#PERF_SAMPLE_MAX\">PERF_SAMPLE_MAX</a>-1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#read_format\">read_format</a> &amp; ~(<a class=\"id\" href=\"#PERF_FORMAT_MAX\">PERF_FORMAT_MAX</a>-1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#err_size\">err_size</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_user\">put_user</a>(sizeof(*<a class=\"id\" href=\"#attr\">attr</a>), &amp;<a class=\"id\" href=\"#uattr\">uattr</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#E2BIG\">E2BIG</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#perf_event_set_output\">perf_event_set_output</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#output_event\">output_event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_buffer\">perf_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#old_buffer\">old_buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#output_event\">output_event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#set\">set</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't allow circular references */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> == <a class=\"id\" href=\"#output_event\">output_event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't allow cross-cpu buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#output_event\">output_event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If its not a per-cpu buffer, it must be the same task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#output_event\">output_event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> == -1 && <a class=\"id\" href=\"#output_event\">output_event</a>-><a class=\"id\" href=\"#ctx\">ctx</a> != <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#set\">set</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_mutex\">mmap_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Can't redirect output if we've got an active mmap() */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_count\">mmap_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#output_event\">output_event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* get the buffer we want to redirect to */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#perf_buffer_get\">perf_buffer_get</a>(<a class=\"id\" href=\"#output_event\">output_event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_buffer\">old_buffer</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mmap_mutex\">mmap_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_buffer\">old_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_buffer_put\">perf_buffer_put</a>(<a class=\"id\" href=\"#old_buffer\">old_buffer</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sys_perf_event_open - open a performance event, associate it to a task/cpu</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @attr_uptr:<span class=\"ts\"/>event_id type attributes for monitoring/sampling</span>", 
"<span class=\"comment\"> * @pid:<span class=\"ts\"/><span class=\"ts\"/>target pid</span>", 
"<span class=\"comment\"> * @cpu:<span class=\"ts\"/><span class=\"ts\"/>target cpu</span>", 
"<span class=\"comment\"> * @group_fd:<span class=\"ts\"/><span class=\"ts\"/>group leader event fd</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE5\">SYSCALL_DEFINE5</a>(<a class=\"id\" href=\"#perf_event_open\">perf_event_open</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#attr_uptr\">attr_uptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a>, <a class=\"id\" href=\"#pid\">pid</a>, int, <a class=\"id\" href=\"#cpu\">cpu</a>, int, <a class=\"id\" href=\"#group_fd\">group_fd</a>, unsigned long, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, *<a class=\"id\" href=\"#group_leader\">group_leader</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#output_event\">output_event</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> <a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#event_file\">event_file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#group_file\">group_file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#event_fd\">event_fd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fput_needed\">fput_needed</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for future expandability... */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; ~(<a class=\"id\" href=\"#PERF_FLAG_FD_NO_GROUP\">PERF_FLAG_FD_NO_GROUP</a> | <a class=\"id\" href=\"#PERF_FLAG_FD_OUTPUT\">PERF_FLAG_FD_OUTPUT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#perf_copy_attr\">perf_copy_attr</a>(<a class=\"id\" href=\"#attr_uptr\">attr_uptr</a>, &amp;<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclude_kernel\">exclude_kernel</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_paranoid_kernel\">perf_paranoid_kernel</a>() && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#freq\">freq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#sample_freq\">sample_freq</a> &gt; <a class=\"id\" href=\"#sysctl_perf_event_sample_rate\">sysctl_perf_event_sample_rate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_fd\">event_fd</a> = <a class=\"id\" href=\"#get_unused_fd_flags\">get_unused_fd_flags</a>(<a class=\"id\" href=\"#O_RDWR\">O_RDWR</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event_fd\">event_fd</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#event_fd\">event_fd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the target context (task or percpu):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#find_get_context\">find_get_context</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ctx\">ctx</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_fd\">err_fd</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_fd\">group_fd</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_leader\">group_leader</a> = <a class=\"id\" href=\"#perf_fget_light\">perf_fget_light</a>(<a class=\"id\" href=\"#group_fd\">group_fd</a>, &amp;<a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#group_leader\">group_leader</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#group_leader\">group_leader</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_put_context\">err_put_context</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_file\">group_file</a> = <a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PERF_FLAG_FD_OUTPUT\">PERF_FLAG_FD_OUTPUT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#output_event\">output_event</a> = <a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PERF_FLAG_FD_NO_GROUP\">PERF_FLAG_FD_NO_GROUP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_leader\">group_leader</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Look up the group leader (we will attach this event to it):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_leader\">group_leader</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do not allow a recursive hierarchy (this new sibling</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * becoming part of another group-sibling):</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> != <a class=\"id\" href=\"#group_leader\">group_leader</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_put_context\">err_put_context</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do not allow to attach to a group in a different</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * task or CPU context:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#ctx\">ctx</a> != <a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_put_context\">err_put_context</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only a group leader can be exclusive or pinned</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclusive\">exclusive</a> || <a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#pinned\">pinned</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_put_context\">err_put_context</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#perf_event_alloc\">perf_event_alloc</a>(&amp;<a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#group_leader\">group_leader</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#event\">event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_put_context\">err_put_context</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#output_event\">output_event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#perf_event_set_output\">perf_event_set_output</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#output_event\">output_event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free_put_context\">err_free_put_context</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_file\">event_file</a> = <a class=\"id\" href=\"#anon_inode_getfile\">anon_inode_getfile</a>(\"[perf_event]\", &amp;<a class=\"id\" href=\"#perf_fops\">perf_fops</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#O_RDWR\">O_RDWR</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#event_file\">event_file</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#event_file\">event_file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free_put_context\">err_free_put_context</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#event_file\">event_file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_install_in_context\">perf_install_in_context</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#generation\">generation</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#owner_entry\">owner_entry</a>, &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_list\">perf_event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Drop the reference on the group_event after placing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new event on the sibling_list. This ensures destruction</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the group leader will find the pointer to itself in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * perf_group_detach().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#group_file\">group_file</a>, <a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd_install\">fd_install</a>(<a class=\"id\" href=\"#event_fd\">event_fd</a>, <a class=\"id\" href=\"#event_file\">event_file</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event_fd\">event_fd</a>;", 
"", 
"<a class=\"id\" href=\"#err_free_put_context\">err_free_put_context</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_event\">free_event</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<a class=\"id\" href=\"#err_put_context\">err_put_context</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#group_file\">group_file</a>, <a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_ctx\">put_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<a class=\"id\" href=\"#err_fd\">err_fd</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unused_fd\">put_unused_fd</a>(<a class=\"id\" href=\"#event_fd\">event_fd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * perf_event_create_kernel_counter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @attr: attributes of the counter to create</span>", 
"<span class=\"comment\"> * @cpu: cpu in which the counter is bound</span>", 
"<span class=\"comment\"> * @pid: task to profile</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *", 
"<a class=\"id\" href=\"#perf_event_create_kernel_counter\">perf_event_create_kernel_counter</a>(struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#perf_overflow_handler_t\">perf_overflow_handler_t</a> <a class=\"id\" href=\"#overflow_handler\">overflow_handler</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the target context (task or percpu):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#find_get_context\">find_get_context</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ctx\">ctx</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_exit\">err_exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#perf_event_alloc\">perf_event_alloc</a>(<a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#overflow_handler\">overflow_handler</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#event\">event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_put_context\">err_put_context</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_install_in_context\">perf_install_in_context</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#generation\">generation</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#owner_entry\">owner_entry</a>, &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_list\">perf_event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"", 
" <a class=\"id\" href=\"#err_put_context\">err_put_context</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_ctx\">put_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
" <a class=\"id\" href=\"#err_exit\">err_exit</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#perf_event_create_kernel_counter\">perf_event_create_kernel_counter</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * inherit a event from parent task to child task:</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *", 
"<a class=\"id\" href=\"#inherit_event\">inherit_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#parent_event\">parent_event</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#group_leader\">group_leader</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#child_ctx\">child_ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#child_event\">child_event</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Instead of creating recursive hierarchies of events,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we link inherited events back to the original parent,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which has a filp for sure, which we use as the reference</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * count:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent_event\">parent_event</a> = <a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child_event\">child_event</a> = <a class=\"id\" href=\"#perf_event_alloc\">perf_event_alloc</a>(&amp;<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#child_ctx\">child_ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#group_leader\">group_leader</a>, <a class=\"id\" href=\"#parent_event\">parent_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#child_event\">child_event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#child_event\">child_event</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_ctx\">get_ctx</a>(<a class=\"id\" href=\"#child_ctx\">child_ctx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make the child state follow the state of the parent event,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not its attr.disabled bit.  We hold the parent's mutex,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we won't race with perf_event_{en, dis}able_family.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#state\">state</a> >= <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_event\">child_event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_event\">child_event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#freq\">freq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sample_period\">sample_period</a> = <a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#child_event\">child_event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a> = <a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#last_period\">last_period</a>   = <a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local64_set\">local64_set</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>, <a class=\"id\" href=\"#sample_period\">sample_period</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child_event\">child_event</a>-><a class=\"id\" href=\"#overflow_handler\">overflow_handler</a> = <a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#overflow_handler\">overflow_handler</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Link it up in the child's context:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_event_to_ctx\">add_event_to_ctx</a>(<a class=\"id\" href=\"#child_event\">child_event</a>, <a class=\"id\" href=\"#child_ctx\">child_ctx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get a reference to the parent filp - we will fput it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when the child event exits. This is safe to do because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we are in the parent and we know that the filp still</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exists and has a nonzero count:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_inc\">atomic_long_inc</a>(&amp;<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_count\">f_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Link this into the parent event's child list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#child_mutex\">child_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#child_event\">child_event</a>-><a class=\"id\" href=\"#child_list\">child_list</a>, &amp;<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#child_list\">child_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#child_mutex\">child_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#child_event\">child_event</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#inherit_group\">inherit_group</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#parent_event\">parent_event</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#child_ctx\">child_ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#leader\">leader</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#sub\">sub</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#child_ctr\">child_ctr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#leader\">leader</a> = <a class=\"id\" href=\"#inherit_event\">inherit_event</a>(<a class=\"id\" href=\"#parent_event\">parent_event</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#child_ctx\">child_ctx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#leader\">leader</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#leader\">leader</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sub\">sub</a>, &amp;<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_ctr\">child_ctr</a> = <a class=\"id\" href=\"#inherit_event\">inherit_event</a>(<a class=\"id\" href=\"#sub\">sub</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#leader\">leader</a>, <a class=\"id\" href=\"#child_ctx\">child_ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#child_ctr\">child_ctr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#child_ctr\">child_ctr</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sync_child_event\">sync_child_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#child_event\">child_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#parent_event\">parent_event</a> = <a class=\"id\" href=\"#child_event\">child_event</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#child_val\">child_val</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#child_event\">child_event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#inherit_stat\">inherit_stat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_read_event\">perf_event_read_event</a>(<a class=\"id\" href=\"#child_event\">child_event</a>, <a class=\"id\" href=\"#child\">child</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child_val\">child_val</a> = <a class=\"id\" href=\"#perf_event_count\">perf_event_count</a>(<a class=\"id\" href=\"#child_event\">child_event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Add back the child's count to the parent's count:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic64_add\">atomic64_add</a>(<a class=\"id\" href=\"#child_val\">child_val</a>, &amp;<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#child_count\">child_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic64_add\">atomic64_add</a>(<a class=\"id\" href=\"#child_event\">child_event</a>-><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#child_total_time_enabled\">child_total_time_enabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic64_add\">atomic64_add</a>(<a class=\"id\" href=\"#child_event\">child_event</a>-><a class=\"id\" href=\"#total_time_running\">total_time_running</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#child_total_time_running\">child_total_time_running</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Remove this event from the parent's list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#child_mutex\">child_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#child_event\">child_event</a>-><a class=\"id\" href=\"#child_list\">child_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#child_mutex\">child_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Release the parent event, if this was the last</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reference to it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#parent_event\">parent_event</a>-><a class=\"id\" href=\"#filp\">filp</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#__perf_event_exit_task\">__perf_event_exit_task</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#child_event\">child_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#child_ctx\">child_ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#parent_event\">parent_event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_remove_from_context\">perf_event_remove_from_context</a>(<a class=\"id\" href=\"#child_event\">child_event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent_event\">parent_event</a> = <a class=\"id\" href=\"#child_event\">child_event</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It can happen that parent exits first, and has events</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that are still around due to the child reference. These</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * events need to be zapped - but otherwise linger.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent_event\">parent_event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_child_event\">sync_child_event</a>(<a class=\"id\" href=\"#child_event\">child_event</a>, <a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_event\">free_event</a>(<a class=\"id\" href=\"#child_event\">child_event</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When a child task exits, feed back event values to parent events.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#perf_event_exit_task\">perf_event_exit_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#child_event\">child_event</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#child_ctx\">child_ctx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_task\">perf_event_task</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can't reschedule here because interrupts are disabled,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and either child is current or it is a task that can't be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scheduled, so we are now safe from rescheduling changing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * our context.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child_ctx\">child_ctx</a> = <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_task_sched_out\">__perf_event_task_sched_out</a>(<a class=\"id\" href=\"#child_ctx\">child_ctx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Take the context lock here so that if find_get_context is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reading child-&gt;perf_event_ctxp, we wait until it has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * incremented the context's refcount before we do put_ctx below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this context is a clone; unclone it so it can't get</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * swapped to another process while we're removing all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the events from it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unclone_ctx\">unclone_ctx</a>(<a class=\"id\" href=\"#child_ctx\">child_ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_context_time\">update_context_time</a>(<a class=\"id\" href=\"#child_ctx\">child_ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Report the task dead after unscheduling the events so that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * won't get any samples after PERF_RECORD_EXIT. We can however still</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get a few PERF_RECORD_READ events.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_task\">perf_event_task</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#child_ctx\">child_ctx</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can recurse on the same lock type through:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   __perf_event_exit_task()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     sync_child_event()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       fput(parent_event-&gt;filp)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *         perf_release()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *           mutex_lock(&amp;ctx-&gt;mutex)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But since its the parent context it won't be the same instance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#child_event\">child_event</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#pinned_groups\">pinned_groups</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#group_entry\">group_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_exit_task\">__perf_event_exit_task</a>(<a class=\"id\" href=\"#child_event\">child_event</a>, <a class=\"id\" href=\"#child_ctx\">child_ctx</a>, <a class=\"id\" href=\"#child\">child</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#child_event\">child_event</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#group_entry\">group_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_exit_task\">__perf_event_exit_task</a>(<a class=\"id\" href=\"#child_event\">child_event</a>, <a class=\"id\" href=\"#child_ctx\">child_ctx</a>, <a class=\"id\" href=\"#child\">child</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the last event was a group event, it will have appended all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its siblings to the list, but we obtained 'tmp' before that which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will still point to the list head terminating the iteration.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#pinned_groups\">pinned_groups</a>) ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_ctx\">put_ctx</a>(<a class=\"id\" href=\"#child_ctx\">child_ctx</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_free_event\">perf_free_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#parent\">parent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child_mutex\">child_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#child_list\">child_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#child_mutex\">child_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#filp\">filp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_group_detach\">perf_group_detach</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_event\">list_del_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_event\">free_event</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * free an unexposed, unused context as created by inheritance by</span>", 
"<span class=\"comment\"> * init_task below, used by fork() in case of fail.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#perf_event_free_task\">perf_event_free_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#pinned_groups\">pinned_groups</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_free_event\">perf_free_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#group_entry\">group_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_free_event\">perf_free_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#pinned_groups\">pinned_groups</a>) ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_ctx\">put_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#inherit_task_group\">inherit_task_group</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   int *<a class=\"id\" href=\"#inherited_all\">inherited_all</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#child_ctx\">child_ctx</a> = <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#inherit\">inherit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#inherited_all\">inherited_all</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#child_ctx\">child_ctx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is executed from the parent task context, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * inherit events that have been marked for cloning.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * First allocate and initialize a context for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * child.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_ctx\">child_ctx</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#child_ctx\">child_ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_init_context\">__perf_event_init_context</a>(<a class=\"id\" href=\"#child_ctx\">child_ctx</a>, <a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a> = <a class=\"id\" href=\"#child_ctx\">child_ctx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#inherit_group\">inherit_group</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#child_ctx\">child_ctx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#inherited_all\">inherited_all</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize the perf_event context in task_struct</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#perf_event_init_task\">perf_event_init_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#child_ctx\">child_ctx</a>, *<a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#cloned_ctx\">cloned_ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#inherited_all\">inherited_all</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#perf_event_mutex\">perf_event_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#perf_event_list\">perf_event_list</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the parent's context is a clone, pin it so it won't get</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * swapped under us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a> = <a class=\"id\" href=\"#perf_pin_task_context\">perf_pin_task_context</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No need to check if parent_ctx != NULL here; since we saw</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it non-NULL earlier, the only reason for it to become NULL</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is if we exit, and since we're currently in the middle of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a fork we can't be exiting at the same time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Lock the parent list. No need to lock the child - not PID</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hashed yet and not running, so nobody can access it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We dont have to disable NMIs - we are only looking at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the list, not manipulating it:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>-><a class=\"id\" href=\"#pinned_groups\">pinned_groups</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#inherit_task_group\">inherit_task_group</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>, <a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#inherited_all\">inherited_all</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>-><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#inherit_task_group\">inherit_task_group</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>, <a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#inherited_all\">inherited_all</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child_ctx\">child_ctx</a> = <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#child_ctx\">child_ctx</a> && <a class=\"id\" href=\"#inherited_all\">inherited_all</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Mark the child context as a clone of the parent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * context, or of whatever the parent is a clone of.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note that if the parent is a clone, it could get</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * uncloned at any point, but that doesn't matter</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * because the list of events and the generation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * count can't have changed since we took the mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cloned_ctx\">cloned_ctx</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cloned_ctx\">cloned_ctx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a> = <a class=\"id\" href=\"#cloned_ctx\">cloned_ctx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#parent_gen\">parent_gen</a> = <a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>-><a class=\"id\" href=\"#parent_gen\">parent_gen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a> = <a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#parent_gen\">parent_gen</a> = <a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>-><a class=\"id\" href=\"#generation\">generation</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_ctx\">get_ctx</a>(<a class=\"id\" href=\"#child_ctx\">child_ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_unpin_context\">perf_unpin_context</a>(<a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#perf_event_init_all_cpus\">perf_event_init_all_cpus</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#hlist_mutex\">hlist_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_init_context\">__perf_event_init_context</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#perf_event_init_cpu\">perf_event_init_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#perf_resource_lock\">perf_resource_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#max_pertask\">max_pertask</a> = <a class=\"id\" href=\"#perf_max_events\">perf_max_events</a> - <a class=\"id\" href=\"#perf_reserved_percpu\">perf_reserved_percpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#perf_resource_lock\">perf_resource_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#hlist_mutex\">hlist_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#hlist_refcount\">hlist_refcount</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a> *<a class=\"id\" href=\"#hlist\">hlist</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist\">hlist</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#hlist\">hlist</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#swevent_hlist\">swevent_hlist</a>, <a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#hlist_mutex\">hlist_mutex</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"static void <a class=\"id\" href=\"#__perf_event_exit_cpu\">__perf_event_exit_cpu</a>(void *<a class=\"id\" href=\"#info\">info</a>)", 
];
xr_frag_insert('l/64/0b47c5b96e98244f8cac03a1bbceb43b72b475.xr', __xr_tmp);
