var __xr_tmp = [
"<span class=\"comment\"> * effectively curb the growth of dirty pages. Light dirtiers with high enough</span>", 
"<span class=\"comment\"> * dirty threshold may never get throttled.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#task_dirty_limit\">task_dirty_limit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#bdi_dirty\">bdi_dirty</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#numerator\">numerator</a>, <a class=\"id\" href=\"#denominator\">denominator</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dirty\">dirty</a> = <a class=\"id\" href=\"#bdi_dirty\">bdi_dirty</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#inv\">inv</a> = <a class=\"id\" href=\"#dirty\">dirty</a> >> 3;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_dirties_fraction\">task_dirties_fraction</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#numerator\">numerator</a>, &amp;<a class=\"id\" href=\"#denominator\">denominator</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inv\">inv</a> *= <a class=\"id\" href=\"#numerator\">numerator</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#inv\">inv</a>, <a class=\"id\" href=\"#denominator\">denominator</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dirty\">dirty</a> -= <a class=\"id\" href=\"#inv\">inv</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#dirty\">dirty</a>, <a class=\"id\" href=\"#bdi_dirty\">bdi_dirty</a>/2);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#bdi_min_ratio\">bdi_min_ratio</a>;", 
"", 
"int <a class=\"id\" href=\"#bdi_set_min_ratio\">bdi_set_min_ratio</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, unsigned int <a class=\"id\" href=\"#min_ratio\">min_ratio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#bdi_lock\">bdi_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#min_ratio\">min_ratio</a> &gt; <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#max_ratio\">max_ratio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_ratio\">min_ratio</a> -= <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#min_ratio\">min_ratio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_min_ratio\">bdi_min_ratio</a> + <a class=\"id\" href=\"#min_ratio\">min_ratio</a> &lt; 100) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_min_ratio\">bdi_min_ratio</a> += <a class=\"id\" href=\"#min_ratio\">min_ratio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#min_ratio\">min_ratio</a> += <a class=\"id\" href=\"#min_ratio\">min_ratio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#bdi_lock\">bdi_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#bdi_set_max_ratio\">bdi_set_max_ratio</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, unsigned <a class=\"id\" href=\"#max_ratio\">max_ratio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_ratio\">max_ratio</a> &gt; 100)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#bdi_lock\">bdi_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#min_ratio\">min_ratio</a> &gt; <a class=\"id\" href=\"#max_ratio\">max_ratio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#max_ratio\">max_ratio</a> = <a class=\"id\" href=\"#max_ratio\">max_ratio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#max_prop_frac\">max_prop_frac</a> = (<a class=\"id\" href=\"#PROP_FRAC_BASE\">PROP_FRAC_BASE</a> * <a class=\"id\" href=\"#max_ratio\">max_ratio</a>) / 100;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#bdi_lock\">bdi_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdi_set_max_ratio\">bdi_set_max_ratio</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Work out the current dirty-memory clamping and background writeout</span>", 
"<span class=\"comment\"> * thresholds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The main aim here is to lower them aggressively if there is a lot of mapped</span>", 
"<span class=\"comment\"> * memory around.  To avoid stressing page reclaim with lots of unreclaimable</span>", 
"<span class=\"comment\"> * pages.  It is better to clamp down on writers than to start swapping, and</span>", 
"<span class=\"comment\"> * performing lots of scanning.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We only allow 1/2 of the currently-unmapped memory to be dirtied.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We don't permit the clamping level to fall below 5% - that is getting rather</span>", 
"<span class=\"comment\"> * excessive.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We make sure that the background writeout level is below the adjusted</span>", 
"<span class=\"comment\"> * clamping level.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static unsigned long <a class=\"id\" href=\"#highmem_dirtyable_memory\">highmem_dirtyable_memory</a>(unsigned long <a class=\"id\" href=\"#total\">total</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#x\">x</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#z\">z</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>)-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#ZONE_HIGHMEM\">ZONE_HIGHMEM</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> += <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#zone_reclaimable_pages\">zone_reclaimable_pages</a>(<a class=\"id\" href=\"#z\">z</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure that the number of highmem pages is never larger</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than the number of the total dirtyable memory. This can only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * occur in very strange VM situations but we want to make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that this does not occur.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#total\">total</a>);", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * determine_dirtyable_memory - amount of memory that may be used</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the numebr of pages that can currently be freed and used</span>", 
"<span class=\"comment\"> * by the kernel for direct mappings.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#determine_dirtyable_memory\">determine_dirtyable_memory</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#x\">x</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>) + <a class=\"id\" href=\"#global_reclaimable_pages\">global_reclaimable_pages</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vm_highmem_is_dirtyable\">vm_highmem_is_dirtyable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> -= <a class=\"id\" href=\"#highmem_dirtyable_memory\">highmem_dirtyable_memory</a>(<a class=\"id\" href=\"#x\">x</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#x\">x</a> + 1;<span class=\"ts\"/><span class=\"comment\">/* Ensure that we never return 0 */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * global_dirty_limits - background-writeback and dirty-throttling thresholds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Calculate the dirty thresholds based on sysctl parameters</span>", 
"<span class=\"comment\"> * - vm.dirty_background_ratio  or  vm.dirty_background_bytes</span>", 
"<span class=\"comment\"> * - vm.dirty_ratio             or  vm.dirty_bytes</span>", 
"<span class=\"comment\"> * The dirty limits will be lifted by 1/4 for PF_LESS_THROTTLE (ie. nfsd) and</span>", 
"<span class=\"comment\"> * runtime tasks.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#global_dirty_limits\">global_dirty_limits</a>(unsigned long *<a class=\"id\" href=\"#pbackground\">pbackground</a>, unsigned long *<a class=\"id\" href=\"#pdirty\">pdirty</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#background\">background</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dirty\">dirty</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#available_memory\">available_memory</a> = <a class=\"id\" href=\"#determine_dirtyable_memory\">determine_dirtyable_memory</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_dirty_bytes\">vm_dirty_bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty\">dirty</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#vm_dirty_bytes\">vm_dirty_bytes</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dirty_ratio\">dirty_ratio</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty_ratio\">dirty_ratio</a> = <a class=\"id\" href=\"#vm_dirty_ratio\">vm_dirty_ratio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dirty_ratio\">dirty_ratio</a> &lt; 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty_ratio\">dirty_ratio</a> = 5;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty\">dirty</a> = (<a class=\"id\" href=\"#dirty_ratio\">dirty_ratio</a> * <a class=\"id\" href=\"#available_memory\">available_memory</a>) / 100;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dirty_background_bytes\">dirty_background_bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#background\">background</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#dirty_background_bytes\">dirty_background_bytes</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#background\">background</a> = (<a class=\"id\" href=\"#dirty_background_ratio\">dirty_background_ratio</a> * <a class=\"id\" href=\"#available_memory\">available_memory</a>) / 100;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#background\">background</a> >= <a class=\"id\" href=\"#dirty\">dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#background\">background</a> = <a class=\"id\" href=\"#dirty\">dirty</a> / 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_LESS_THROTTLE\">PF_LESS_THROTTLE</a> || <a class=\"id\" href=\"#rt_task\">rt_task</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#background\">background</a> += <a class=\"id\" href=\"#background\">background</a> / 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty\">dirty</a> += <a class=\"id\" href=\"#dirty\">dirty</a> / 4;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pbackground\">pbackground</a> = <a class=\"id\" href=\"#background\">background</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pdirty\">pdirty</a> = <a class=\"id\" href=\"#dirty\">dirty</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bdi_dirty_limit - @bdi's share of dirty throttling threshold</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate high/low dirty limits to fast/slow devices, in order to prevent</span>", 
"<span class=\"comment\"> * - starving fast devices</span>", 
"<span class=\"comment\"> * - piling up dirty pages (that will take long time to sync) on slow devices</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The bdi's share of dirty limit will be adapting to its throughput and</span>", 
"<span class=\"comment\"> * bounded by the bdi-&gt;min_ratio and/or bdi-&gt;max_ratio parameters, if set.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#bdi_dirty_limit\">bdi_dirty_limit</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, unsigned long <a class=\"id\" href=\"#dirty\">dirty</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#bdi_dirty\">bdi_dirty</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#numerator\">numerator</a>, <a class=\"id\" href=\"#denominator\">denominator</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calculate this BDI's share of the dirty ratio.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_writeout_fraction\">bdi_writeout_fraction</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, &amp;<a class=\"id\" href=\"#numerator\">numerator</a>, &amp;<a class=\"id\" href=\"#denominator\">denominator</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_dirty\">bdi_dirty</a> = (<a class=\"id\" href=\"#dirty\">dirty</a> * (100 - <a class=\"id\" href=\"#bdi_min_ratio\">bdi_min_ratio</a>)) / 100;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_dirty\">bdi_dirty</a> *= <a class=\"id\" href=\"#numerator\">numerator</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#bdi_dirty\">bdi_dirty</a>, <a class=\"id\" href=\"#denominator\">denominator</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_dirty\">bdi_dirty</a> += (<a class=\"id\" href=\"#dirty\">dirty</a> * <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#min_ratio\">min_ratio</a>) / 100;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_dirty\">bdi_dirty</a> &gt; (<a class=\"id\" href=\"#dirty\">dirty</a> * <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#max_ratio\">max_ratio</a>) / 100)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_dirty\">bdi_dirty</a> = <a class=\"id\" href=\"#dirty\">dirty</a> * <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#max_ratio\">max_ratio</a> / 100;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bdi_dirty\">bdi_dirty</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * balance_dirty_pages() must be called by processes which are generating dirty</span>", 
"<span class=\"comment\"> * data.  It looks at the number of dirty pages in the machine and will force</span>", 
"<span class=\"comment\"> * the caller to perform writeback if the system is over `vm_dirty_ratio'.</span>", 
"<span class=\"comment\"> * If we're over `background_thresh' then the writeback threads are woken to</span>", 
"<span class=\"comment\"> * perform some writeout.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#balance_dirty_pages\">balance_dirty_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#write_chunk\">write_chunk</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#nr_reclaimable\">nr_reclaimable</a>, <a class=\"id\" href=\"#bdi_nr_reclaimable\">bdi_nr_reclaimable</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#nr_writeback\">nr_writeback</a>, <a class=\"id\" href=\"#bdi_nr_writeback\">bdi_nr_writeback</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#background_thresh\">background_thresh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bdi_thresh\">bdi_thresh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages_written\">pages_written</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pause\">pause</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dirty_exceeded\">dirty_exceeded</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> <a class=\"id\" href=\"#wbc\">wbc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#older_than_this\">older_than_this</a> = <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a><span class=\"ts\"/>= <a class=\"id\" href=\"#write_chunk\">write_chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_cyclic\">range_cyclic</a><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_reclaimable\">nr_reclaimable</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FILE_DIRTY\">NR_FILE_DIRTY</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_UNSTABLE_NFS\">NR_UNSTABLE_NFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_writeback\">nr_writeback</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_WRITEBACK\">NR_WRITEBACK</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_dirty_limits\">global_dirty_limits</a>(&amp;<a class=\"id\" href=\"#background_thresh\">background_thresh</a>, &amp;<a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Throttle it only when the background writeback cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * catch-up. This avoids (excessively) small writeouts</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when the bdi limits are ramping up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_reclaimable\">nr_reclaimable</a> + <a class=\"id\" href=\"#nr_writeback\">nr_writeback</a> &lt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#background_thresh\">background_thresh</a> + <a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>) / 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_thresh\">bdi_thresh</a> = <a class=\"id\" href=\"#bdi_dirty_limit\">bdi_dirty_limit</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_thresh\">bdi_thresh</a> = <a class=\"id\" href=\"#task_dirty_limit\">task_dirty_limit</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#bdi_thresh\">bdi_thresh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In order to avoid the stacked BDI deadlock we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to ensure we accurately count the 'dirty' pages when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the threshold is low.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Otherwise it would be possible to get thresh+n pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reported dirty, even though there are thresh-m pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * actually dirty; with m+n sitting in the percpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * deltas.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_thresh\">bdi_thresh</a> &lt; 2*<a class=\"id\" href=\"#bdi_stat_error\">bdi_stat_error</a>(<a class=\"id\" href=\"#bdi\">bdi</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_nr_reclaimable\">bdi_nr_reclaimable</a> = <a class=\"id\" href=\"#bdi_stat_sum\">bdi_stat_sum</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#BDI_RECLAIMABLE\">BDI_RECLAIMABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_nr_writeback\">bdi_nr_writeback</a> = <a class=\"id\" href=\"#bdi_stat_sum\">bdi_stat_sum</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#BDI_WRITEBACK\">BDI_WRITEBACK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_nr_reclaimable\">bdi_nr_reclaimable</a> = <a class=\"id\" href=\"#bdi_stat\">bdi_stat</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#BDI_RECLAIMABLE\">BDI_RECLAIMABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_nr_writeback\">bdi_nr_writeback</a> = <a class=\"id\" href=\"#bdi_stat\">bdi_stat</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#BDI_WRITEBACK\">BDI_WRITEBACK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The bdi thresh is somehow \"soft\" limit derived from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * global \"hard\" limit. The former helps to prevent heavy IO</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bdi or process from holding back light ones; The latter is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the last resort safeguard.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty_exceeded\">dirty_exceeded</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#bdi_nr_reclaimable\">bdi_nr_reclaimable</a> + <a class=\"id\" href=\"#bdi_nr_writeback\">bdi_nr_writeback</a> >= <a class=\"id\" href=\"#bdi_thresh\">bdi_thresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>|| (<a class=\"id\" href=\"#nr_reclaimable\">nr_reclaimable</a> + <a class=\"id\" href=\"#nr_writeback\">nr_writeback</a> >= <a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dirty_exceeded\">dirty_exceeded</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dirty_exceeded\">dirty_exceeded</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dirty_exceeded\">dirty_exceeded</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Note: nr_reclaimable denotes nr_dirty + nr_unstable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Unstable writes are a feature of certain networked</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * filesystems (i.e. NFS) in which data may have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * written to the server's write cache, but has not yet</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * been flushed to permanent storage.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only move pages to writeback if this bdi is over its</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * threshold otherwise wait until the disk writes catch</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_wbc_balance_dirty_start\">trace_wbc_balance_dirty_start</a>(&amp;<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_nr_reclaimable\">bdi_nr_reclaimable</a> &gt; <a class=\"id\" href=\"#bdi_thresh\">bdi_thresh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeback_inodes_wb\">writeback_inodes_wb</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>, &amp;<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages_written\">pages_written</a> += <a class=\"id\" href=\"#write_chunk\">write_chunk</a> - <a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_wbc_balance_dirty_written\">trace_wbc_balance_dirty_written</a>(&amp;<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pages_written\">pages_written</a> >= <a class=\"id\" href=\"#write_chunk\">write_chunk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We've done our duty */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_wbc_balance_dirty_wait\">trace_wbc_balance_dirty_wait</a>(&amp;<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_schedule_timeout\">io_schedule_timeout</a>(<a class=\"id\" href=\"#pause\">pause</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Increase the delay for each loop, up to our previous</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * default of taking a 100ms nap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pause\">pause</a> <<= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pause\">pause</a> &gt; <a class=\"id\" href=\"#HZ\">HZ</a> / 10)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pause\">pause</a> = <a class=\"id\" href=\"#HZ\">HZ</a> / 10;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dirty_exceeded\">dirty_exceeded</a> && <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dirty_exceeded\">dirty_exceeded</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dirty_exceeded\">dirty_exceeded</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#writeback_in_progress\">writeback_in_progress</a>(<a class=\"id\" href=\"#bdi\">bdi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In laptop mode, we wait until hitting the higher threshold before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * starting background writeout, and then write out all the way down</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the lower threshold.  So slow writers cause minimal disk activity.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In normal mode, we start background writeout at the lower</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * background_thresh, to keep the amount of dirty memory low.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#laptop_mode\">laptop_mode</a> && <a class=\"id\" href=\"#pages_written\">pages_written</a>) ||", 
"<span class=\"ts\"/>    (!<a class=\"id\" href=\"#laptop_mode\">laptop_mode</a> && (<a class=\"id\" href=\"#nr_reclaimable\">nr_reclaimable</a> &gt; <a class=\"id\" href=\"#background_thresh\">background_thresh</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_start_background_writeback\">bdi_start_background_writeback</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_page_dirty_balance\">set_page_dirty_balance</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balance_dirty_pages_ratelimited\">balance_dirty_pages_ratelimited</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#bdp_ratelimits\">bdp_ratelimits</a>) = 0;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * balance_dirty_pages_ratelimited_nr - balance dirty memory state</span>", 
"<span class=\"comment\"> * @mapping: address_space which was dirtied</span>", 
"<span class=\"comment\"> * @nr_pages_dirtied: number of pages which the caller has just dirtied</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Processes which are dirtying memory should call in here once for each page</span>", 
"<span class=\"comment\"> * which was newly dirtied.  The function will periodically check the system's</span>", 
"<span class=\"comment\"> * dirty state and will initiate writeback if needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On really big machines, get_writeback_state is expensive, so try to avoid</span>", 
"<span class=\"comment\"> * calling it too often (ratelimiting).  But once we're over the dirty memory</span>", 
"<span class=\"comment\"> * limit we decrease the ratelimiting by a lot, to prevent individual processes</span>", 
"<span class=\"comment\"> * from overshooting the limit by (ratelimit_pages) each.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#balance_dirty_pages_ratelimited_nr\">balance_dirty_pages_ratelimited_nr</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages_dirtied\">nr_pages_dirtied</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ratelimit\">ratelimit</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ratelimit\">ratelimit</a> = <a class=\"id\" href=\"#ratelimit_pages\">ratelimit_pages</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>-><a class=\"id\" href=\"#dirty_exceeded\">dirty_exceeded</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ratelimit\">ratelimit</a> = 8;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check the rate limiting. Also, we do not want to throttle real-time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tasks in balance_dirty_pages(). Period.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> =  &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#bdp_ratelimits\">bdp_ratelimits</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#nr_pages_dirtied\">nr_pages_dirtied</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(*<a class=\"id\" href=\"#p\">p</a> >= <a class=\"id\" href=\"#ratelimit\">ratelimit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ratelimit\">ratelimit</a> = <a class=\"id\" href=\"#sync_writeback_pages\">sync_writeback_pages</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balance_dirty_pages\">balance_dirty_pages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#ratelimit\">ratelimit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#balance_dirty_pages_ratelimited_nr\">balance_dirty_pages_ratelimited_nr</a>);", 
"", 
"void <a class=\"id\" href=\"#throttle_vm_writeout\">throttle_vm_writeout</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#background_thresh\">background_thresh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>;", 
"", 
"        for ( ; ; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_dirty_limits\">global_dirty_limits</a>(&amp;<a class=\"id\" href=\"#background_thresh\">background_thresh</a>, &amp;<a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>);", 
"", 
"                <span class=\"comment\">/*</span>", 
"<span class=\"comment\">                 * Boost the allowable dirty threshold a bit for page</span>", 
"<span class=\"comment\">                 * allocators so they don't get DoS'ed by heavy writers</span>", 
"<span class=\"comment\">                 */</span>", 
"                <a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a> += <a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a> / 10;      <span class=\"comment\">/* wheeee... */</span>", 
"", 
"                if (<a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_UNSTABLE_NFS\">NR_UNSTABLE_NFS</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_WRITEBACK\">NR_WRITEBACK</a>) <= <a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>)", 
"                        <span class=\"ts\"/>break;", 
"                <a class=\"id\" href=\"#congestion_wait\">congestion_wait</a>(<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>, <a class=\"id\" href=\"#HZ\">HZ</a>/10);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The caller might hold locks which can prevent IO completion</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or progress in the filesystem.  So we cannot just sit here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * waiting for IO to complete.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; (<a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>|<a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a>)) != (<a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>|<a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"        }", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sysctl handler for /proc/sys/vm/dirty_writeback_centisecs</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dirty_writeback_centisecs_handler\">dirty_writeback_centisecs_handler</a>(<a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_arm_supers_timer\">bdi_arm_supers_timer</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"void <a class=\"id\" href=\"#laptop_mode_timer_fn\">laptop_mode_timer_fn</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = (struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FILE_DIRTY\">NR_FILE_DIRTY</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_UNSTABLE_NFS\">NR_UNSTABLE_NFS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We want to write everything out, not just down to the dirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * threshold</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_has_dirty_io\">bdi_has_dirty_io</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_start_writeback\">bdi_start_writeback</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We've spun up the disk and we're in laptop mode: schedule writeback</span>", 
"<span class=\"comment\"> * of all dirty data a few seconds from now.  If the flush is already scheduled</span>", 
"<span class=\"comment\"> * then push it back - the user is still using the disk.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#laptop_io_completion\">laptop_io_completion</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#laptop_mode_wb_timer\">laptop_mode_wb_timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#laptop_mode\">laptop_mode</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We're in laptop mode and we've just synced. The sync's writes will have</span>", 
"<span class=\"comment\"> * caused another writeback to be scheduled by laptop_io_completion.</span>", 
"<span class=\"comment\"> * Nothing needs to be written back anymore, so we unschedule the writeback.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#laptop_sync_completion\">laptop_sync_completion</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, &amp;<a class=\"id\" href=\"#bdi_list\">bdi_list</a>, <a class=\"id\" href=\"#bdi_list\">bdi_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#laptop_mode_wb_timer\">laptop_mode_wb_timer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If ratelimit_pages is too high then we can get into dirty-data overload</span>", 
"<span class=\"comment\"> * if a large number of processes all perform writes at the same time.</span>", 
"<span class=\"comment\"> * If it is too low then SMP machines will call the (expensive)</span>", 
"<span class=\"comment\"> * get_writeback_state too often.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Here we set ratelimit_pages to a level which ensures that when all CPUs are</span>", 
"<span class=\"comment\"> * dirtying in parallel, we cannot go more than 3% (1/32) over the dirty memory</span>", 
"<span class=\"comment\"> * thresholds before writeback cuts in.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * But the limit should not be set too high.  Because it also controls the</span>", 
"<span class=\"comment\"> * amount of memory which the balance_dirty_pages() caller has to write back.</span>", 
"<span class=\"comment\"> * If this is too large then the caller will block on the IO queue all the</span>", 
"<span class=\"comment\"> * time.  So limit it to four megabytes - the balance_dirty_pages() caller</span>", 
"<span class=\"comment\"> * will write six megabyte chunks, max.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#writeback_set_ratelimit\">writeback_set_ratelimit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ratelimit_pages\">ratelimit_pages</a> = <a class=\"id\" href=\"#vm_total_pages\">vm_total_pages</a> / (<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() * 32);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ratelimit_pages\">ratelimit_pages</a> &lt; 16)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ratelimit_pages\">ratelimit_pages</a> = 16;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ratelimit_pages\">ratelimit_pages</a> * <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> &gt; 4096 * 1024)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ratelimit_pages\">ratelimit_pages</a> = (4096 * 1024) / <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a>", 
"<a class=\"id\" href=\"#ratelimit_handler\">ratelimit_handler</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>, unsigned long <a class=\"id\" href=\"#u\">u</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writeback_set_ratelimit\">writeback_set_ratelimit</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#ratelimit_nb\">ratelimit_nb</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ratelimit_handler\">ratelimit_handler</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called early on to tune the page writeback dirty limits.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We used to scale dirty pages according to how total memory</span>", 
"<span class=\"comment\"> * related to pages that could be allocated for buffers (by</span>", 
"<span class=\"comment\"> * comparing nr_free_buffer_pages() to vm_total_pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * However, that was when we used \"dirty_ratio\" to scale with</span>", 
"<span class=\"comment\"> * all memory, and we don't do that any more. \"dirty_ratio\"</span>", 
"<span class=\"comment\"> * is now applied to total non-HIGHPAGE memory (by subtracting</span>", 
"<span class=\"comment\"> * totalhigh_pages from vm_total_pages), and as such we can't</span>", 
"<span class=\"comment\"> * get into the old insane situation any more where we had</span>", 
"<span class=\"comment\"> * large amounts of dirty pages compared to a small amount of</span>", 
"<span class=\"comment\"> * non-HIGHMEM memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * But we might still want to scale the dirty_ratio by how</span>", 
"<span class=\"comment\"> * much memory the box has..</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#page_writeback_init\">page_writeback_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shift\">shift</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writeback_set_ratelimit\">writeback_set_ratelimit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#ratelimit_nb\">ratelimit_nb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#calc_period_shift\">calc_period_shift</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_descriptor_init\">prop_descriptor_init</a>(&amp;<a class=\"id\" href=\"#vm_completions\">vm_completions</a>, <a class=\"id\" href=\"#shift\">shift</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_descriptor_init\">prop_descriptor_init</a>(&amp;<a class=\"id\" href=\"#vm_dirties\">vm_dirties</a>, <a class=\"id\" href=\"#shift\">shift</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tag_pages_for_writeback - tag pages to be written by write_cache_pages</span>", 
"<span class=\"comment\"> * @mapping: address space structure to write</span>", 
"<span class=\"comment\"> * @start: starting page index</span>", 
"<span class=\"comment\"> * @end: ending page index (inclusive)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function scans the page range from @start to @end (inclusive) and tags</span>", 
"<span class=\"comment\"> * all pages that have DIRTY tag set with a special TOWRITE tag. The idea is</span>", 
"<span class=\"comment\"> * that write_cache_pages (or whoever calls this function) will then use</span>", 
"<span class=\"comment\"> * TOWRITE tag to identify pages eligible for writeback.  This mechanism is</span>", 
"<span class=\"comment\"> * used to avoid livelocking of writeback by a process steadily creating new</span>", 
"<span class=\"comment\"> * dirty pages in the file (thus it is important for this function to be quick</span>", 
"<span class=\"comment\"> * so that it can tag pages faster than a dirtying process can create them).</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We tag pages in batches of WRITEBACK_TAG_BATCH to reduce tree_lock latency.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tag_pages_for_writeback\">tag_pages_for_writeback</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WRITEBACK_TAG_BATCH\">WRITEBACK_TAG_BATCH</a> 4096", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tagged\">tagged</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tagged\">tagged</a> = <a class=\"id\" href=\"#radix_tree_range_tag_if_tagged\">radix_tree_range_tag_if_tagged</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#WRITEBACK_TAG_BATCH\">WRITEBACK_TAG_BATCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGECACHE_TAG_DIRTY\">PAGECACHE_TAG_DIRTY</a>, <a class=\"id\" href=\"#PAGECACHE_TAG_TOWRITE\">PAGECACHE_TAG_TOWRITE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#tagged\">tagged</a> &gt; <a class=\"id\" href=\"#WRITEBACK_TAG_BATCH\">WRITEBACK_TAG_BATCH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We check 'start' to handle wrapping when end == ~0UL */</span>", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#tagged\">tagged</a> >= <a class=\"id\" href=\"#WRITEBACK_TAG_BATCH\">WRITEBACK_TAG_BATCH</a> && <a class=\"id\" href=\"#start\">start</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tag_pages_for_writeback\">tag_pages_for_writeback</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * write_cache_pages - walk the list of dirty pages of the given address space and write all of them.</span>", 
"<span class=\"comment\"> * @mapping: address space structure to write</span>", 
"<span class=\"comment\"> * @wbc: subtract the number of written pages from *@wbc-&gt;nr_to_write</span>", 
"<span class=\"comment\"> * @writepage: function called for each page</span>", 
"<span class=\"comment\"> * @data: data passed to writepage function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If a page is already under I/O, write_cache_pages() skips it, even</span>", 
"<span class=\"comment\"> * if it's dirty.  This is desirable behaviour for memory-cleaning writeback,</span>", 
"<span class=\"comment\"> * but it is INCORRECT for data-integrity system calls such as fsync().  fsync()</span>", 
"<span class=\"comment\"> * and msync() need to guarantee that all the data which was dirty at the time</span>", 
"<span class=\"comment\"> * the call was made get new I/O started against them.  If wbc-&gt;sync_mode is</span>", 
"<span class=\"comment\"> * WB_SYNC_ALL then we were called for data integrity and we must wait for</span>", 
"<span class=\"comment\"> * existing IO to complete.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To avoid livelocks (when other process dirties new pages), we first tag</span>", 
"<span class=\"comment\"> * pages which should be written back with TOWRITE tag and only then start</span>", 
"<span class=\"comment\"> * writing them. For data-integrity sync we have to be careful so that we do</span>", 
"<span class=\"comment\"> * not miss some pages (e.g., because some other process has cleared TOWRITE</span>", 
"<span class=\"comment\"> * tag we set). The rule we follow is that TOWRITE tag can be cleared only</span>", 
"<span class=\"comment\"> * by the process clearing the DIRTY tag (and submitting the page for IO).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#write_cache_pages\">write_cache_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#writepage_t\">writepage_t</a> <a class=\"id\" href=\"#writepage\">writepage</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#done\">done</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pagevec\">pagevec</a> <a class=\"id\" href=\"#pvec\">pvec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#writeback_index\">writeback_index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#end\">end</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Inclusive */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#done_index\">done_index</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cycled\">cycled</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#range_whole\">range_whole</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tag\">tag</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagevec_init\">pagevec_init</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#range_cyclic\">range_cyclic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeback_index\">writeback_index</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#writeback_index\">writeback_index</a>; <span class=\"comment\">/* prev offset */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#writeback_index\">writeback_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cycled\">cycled</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cycled\">cycled</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = -1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#range_start\">range_start</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#range_end\">range_end</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#range_start\">range_start</a> == 0 && <a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#range_end\">range_end</a> == <a class=\"id\" href=\"#LLONG_MAX\">LLONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#range_whole\">range_whole</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cycled\">cycled</a> = 1; <span class=\"comment\">/* ignore range_cyclic tests */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> == <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#PAGECACHE_TAG_TOWRITE\">PAGECACHE_TAG_TOWRITE</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#PAGECACHE_TAG_DIRTY\">PAGECACHE_TAG_DIRTY</a>;", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> == <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag_pages_for_writeback\">tag_pages_for_writeback</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#done_index\">done_index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#done\">done</a> && (<a class=\"id\" href=\"#index\">index</a> <= <a class=\"id\" href=\"#end\">end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#pagevec_lookup_tag\">pagevec_lookup_tag</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, &amp;<a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#tag\">tag</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#index\">index</a>, (<a class=\"id\" href=\"#pgoff_t\">pgoff_t</a>)<a class=\"id\" href=\"#PAGEVEC_SIZE\">PAGEVEC_SIZE</a>-1) + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pvec\">pvec</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * At this point, the page may be truncated or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * invalidated (changing page-&gt;mapping to NULL), or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * even swizzled back from swapper_space to tmpfs file</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mapping. However, page-&gt;index will not change</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * because we have a reference on the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * can't be range_cyclic (1st pass) because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * end == -1 in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done_index\">done_index</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Page truncated or invalidated. We can freely skip it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * then, even for data integrity operations: the page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * has disappeared concurrently, so there could be no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * real expectation of this data interity operation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * even if there is now a new, dirty page at the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pagecache address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#mapping\">mapping</a>)) {", 
"<a class=\"id\" href=\"#continue_unlock\">continue_unlock</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* someone wrote it for us */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#continue_unlock\">continue_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> != <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#continue_unlock\">continue_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#clear_page_dirty_for_io\">clear_page_dirty_for_io</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#continue_unlock\">continue_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_wbc_writepage\">trace_wbc_writepage</a>(<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (*<a class=\"id\" href=\"#writepage\">writepage</a>)(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#AOP_WRITEPAGE_ACTIVATE\">AOP_WRITEPAGE_ACTIVATE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * done_index is set past this page,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so media errors will not choke</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * background writeout for the entire</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * file. This has consequences for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * range_cyclic semantics (ie. it may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not be suitable for data integrity</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * writeout).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We stop writing back only if we are not doing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * integrity sync. In case of integrity sync we have to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * keep going until we have written all the pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we tagged for writeback prior to entering this loop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> <= 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> == <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagevec_release\">pagevec_release</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cycled\">cycled</a> && !<a class=\"id\" href=\"#done\">done</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * range_cyclic:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We hit the last page and there is more work to be done: wrap</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * back to the start of the file</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cycled\">cycled</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#writeback_index\">writeback_index</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#range_cyclic\">range_cyclic</a> || (<a class=\"id\" href=\"#range_whole\">range_whole</a> && <a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> &gt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#writeback_index\">writeback_index</a> = <a class=\"id\" href=\"#done_index\">done_index</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#write_cache_pages\">write_cache_pages</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function used by generic_writepages to call the real writepage</span>", 
"<span class=\"comment\"> * function and set the mapping flags on error</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__writepage\">__writepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#writepage\">writepage</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping_set_error\">mapping_set_error</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_writepages - walk the list of dirty pages of the given address space and writepage() all of them.</span>", 
"<span class=\"comment\"> * @mapping: address space structure to write</span>", 
"<span class=\"comment\"> * @wbc: subtract the number of written pages from *@wbc-&gt;nr_to_write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a library function, which implements the writepages()</span>", 
"<span class=\"comment\"> * address_space_operation.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#generic_writepages\">generic_writepages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* deal with chardevs and other special file */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#writepage\">writepage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#write_cache_pages\">write_cache_pages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#__writepage\">__writepage</a>, <a class=\"id\" href=\"#mapping\">mapping</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_writepages\">generic_writepages</a>);", 
"", 
"int <a class=\"id\" href=\"#do_writepages\">do_writepages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#writepages\">writepages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#writepages\">writepages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#generic_writepages\">generic_writepages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * write_one_page - write out a single page and optionally wait on I/O</span>", 
"<span class=\"comment\"> * @page: the page to write</span>", 
"<span class=\"comment\"> * @wait: if true, wait on writeout</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The page must be locked by the caller and will be unlocked upon return.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * write_one_page() returns a negative error code if I/O failed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#write_one_page\">write_one_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> <a class=\"id\" href=\"#wbc\">wbc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a> = <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> = 1,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wait\">wait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_page_dirty_for_io\">clear_page_dirty_for_io</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_get\">page_cache_get</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#writepage\">writepage</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0 && <a class=\"id\" href=\"#wait\">wait</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageError\">PageError</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#write_one_page\">write_one_page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For address_spaces which do not use buffers nor write back.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__set_page_dirty_no_writeback\">__set_page_dirty_no_writeback</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageDirty\">SetPageDirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper function for set_page_dirty family.</span>", 
"<span class=\"comment\"> * NOTE: This relies on being atomic wrt interrupts.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#account_page_dirtied\">account_page_dirtied</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping_cap_account_dirty\">mapping_cap_account_dirty</a>(<a class=\"id\" href=\"#mapping\">mapping</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_FILE_DIRTY\">NR_FILE_DIRTY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_bdi_stat\">__inc_bdi_stat</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>, <a class=\"id\" href=\"#BDI_RECLAIMABLE\">BDI_RECLAIMABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_dirty_inc\">task_dirty_inc</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_io_account_write\">task_io_account_write</a>(<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#account_page_dirtied\">account_page_dirtied</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For address_spaces which do not use buffers.  Just tag the page as dirty in</span>", 
"<span class=\"comment\"> * its radix tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is also used when a single buffer is being dirtied: we want to set the</span>", 
"<span class=\"comment\"> * page dirty in that case, but not all the buffers.  This is a \"bottom-up\"</span>", 
"<span class=\"comment\"> * dirtying, whereas __set_page_dirty_buffers() is a \"top-down\" dirtying.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Most callers have locked the page, which pins the address_space in memory.</span>", 
"<span class=\"comment\"> * But zap_pte_range() does not lock the page, however in that case the</span>", 
"<span class=\"comment\"> * mapping is pinned by the vma's -&gt;vm_file reference.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We take care to handle the case where the page was truncated from the</span>", 
"<span class=\"comment\"> * mapping by re-checking page_mapping() inside tree_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__set_page_dirty_nobuffers\">__set_page_dirty_nobuffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#TestSetPageDirty\">TestSetPageDirty</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping2\">mapping2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping2\">mapping2</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping2\">mapping2</a>) { <span class=\"comment\">/* Race with truncate? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#mapping2\">mapping2</a> != <a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#PagePrivate\">PagePrivate</a>(<a class=\"id\" href=\"#page\">page</a>) && !<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#account_page_dirtied\">account_page_dirtied</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_tag_set\">radix_tree_tag_set</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_index\">page_index</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#PAGECACHE_TAG_DIRTY\">PAGECACHE_TAG_DIRTY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* !PageAnon &amp;&amp; !swapper_space */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mark_inode_dirty\">__mark_inode_dirty</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#I_DIRTY_PAGES\">I_DIRTY_PAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__set_page_dirty_nobuffers\">__set_page_dirty_nobuffers</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When a writepage implementation decides that it doesn't want to write this</span>", 
"<span class=\"comment\"> * page for some reason, it should redirty the locked page via</span>", 
"<span class=\"comment\"> * redirty_page_for_writepage() and it should then unlock the page and return 0</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#redirty_page_for_writepage\">redirty_page_for_writepage</a>(struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#pages_skipped\">pages_skipped</a>++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__set_page_dirty_nobuffers\">__set_page_dirty_nobuffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#redirty_page_for_writepage\">redirty_page_for_writepage</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dirty a page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For pages with a mapping this should be done under the page lock</span>", 
"<span class=\"comment\"> * for the benefit of asynchronous memory errors who prefer a consistent</span>", 
"<span class=\"comment\"> * dirty state. This rule can be broken in some special cases,</span>", 
"<span class=\"comment\"> * but should be better not to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the mapping doesn't provide a set_page_dirty a_op, then</span>", 
"<span class=\"comment\"> * just fall through and assume that it wants buffer_heads.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#mapping\">mapping</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#spd\">spd</a>)(struct <a class=\"id\" href=\"#page\">page</a> *) = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#spd\">spd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a> = <a class=\"id\" href=\"#__set_page_dirty_buffers\">__set_page_dirty_buffers</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>return (*<a class=\"id\" href=\"#spd\">spd</a>)(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#TestSetPageDirty\">TestSetPageDirty</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * set_page_dirty() is racy if the caller has no reference against</span>", 
"<span class=\"comment\"> * page-&gt;mapping-&gt;host, and if the page is unlocked.  This is because another</span>", 
"<span class=\"comment\"> * CPU could truncate the page off the mapping and then free the mapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Usually, the page _is_ locked, or the caller is a user-space process which</span>", 
"<span class=\"comment\"> * holds a reference on the inode by having an open file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In other cases, the page should be locked before running set_page_dirty().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#set_page_dirty_lock\">set_page_dirty_lock</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page_nosync\">lock_page_nosync</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_page_dirty_lock\">set_page_dirty_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clear a page's dirty flag, while caring for dirty memory accounting.</span>", 
"<span class=\"comment\"> * Returns true if the page was previously dirty.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is for preparing to put the page under writeout.  We leave the page</span>", 
"<span class=\"comment\"> * tagged as dirty in the radix tree so that a concurrent write-for-sync</span>", 
"<span class=\"comment\"> * can discover it via a PAGECACHE_TAG_DIRTY walk.  The -&gt;writepage</span>", 
"<span class=\"comment\"> * implementation will run either set_page_writeback() or set_page_dirty(),</span>", 
"<span class=\"comment\"> * at which stage we bring the page's dirty flag and radix-tree dirty tag</span>", 
"<span class=\"comment\"> * back into sync.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This incoherency between the page's dirty flag and radix-tree tag is</span>", 
"<span class=\"comment\"> * unfortunate, but it only exists while the page is locked.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#clear_page_dirty_for_io\">clear_page_dirty_for_io</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPageReclaim\">ClearPageReclaim</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a> && <a class=\"id\" href=\"#mapping_cap_account_dirty\">mapping_cap_account_dirty</a>(<a class=\"id\" href=\"#mapping\">mapping</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Yes, Virginia, this is indeed insane.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We use this sequence to make sure that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  (a) we account for dirty stats properly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  (b) we tell the low-level filesystem to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *      mark the whole page dirty if it was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *      dirty in a pagetable. Only to then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  (c) clean the page again and return 1 to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *      cause the writeback.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This way we avoid all nasty races with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * dirty bit in multiple places and clearing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * them concurrently from different threads.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note! Normally the \"set_page_dirty(page)\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has no effect on the actual dirty bit - since</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that will already usually be set. But we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need the side effects, and it can help us</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * avoid races.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We basically use the page \"master dirty bit\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as a serialization point for all the different</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * threads doing their things.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mkclean\">page_mkclean</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We carefully synchronise fault handlers against</span>", 
];
xr_frag_insert('l/64/284f0968dc00c19bd9221ffd3882e4af5b1cb9.xr', __xr_tmp);
