var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_MM_H\">_LINUX_MM_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_MM_H\">_LINUX_MM_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmzone\">mmzone</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rbtree\">rbtree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#prio_tree\">prio_tree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debug_locks\">debug_locks</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm_types\">mm_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#range\">range</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pfn\">pfn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a>;", 
"struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a>;", 
"struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a>;", 
"struct <a class=\"id\" href=\"#user_struct\">user_struct</a>;", 
"struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a>;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_DISCONTIGMEM\">CONFIG_DISCONTIGMEM</a>          <span class=\"comment\">/* Don't use mapnrs, do it properly */</span>", 
"extern unsigned long <a class=\"id\" href=\"#max_mapnr\">max_mapnr</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern unsigned long <a class=\"id\" href=\"#num_physpages\">num_physpages</a>;", 
"extern unsigned long <a class=\"id\" href=\"#totalram_pages\">totalram_pages</a>;", 
"extern void * <a class=\"id\" href=\"#high_memory\">high_memory</a>;", 
"extern int <a class=\"id\" href=\"#page_cluster\">page_cluster</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"extern int <a class=\"id\" href=\"#sysctl_legacy_va_layout\">sysctl_legacy_va_layout</a>;", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sysctl_legacy_va_layout\">sysctl_legacy_va_layout</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nth_page\">nth_page</a>(<a class=\"id\" href=\"#page\">page</a>,<a class=\"id\" href=\"#n\">n</a>) <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>((<a class=\"id\" href=\"#page\">page</a>)) + (<a class=\"id\" href=\"#n\">n</a>))", 
"", 
"<span class=\"comment\">/* to align the pointer to the (next) page boundary */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#addr\">addr</a>) <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Linux kernel virtual memory manager primitives.</span>", 
"<span class=\"comment\"> * The idea being to have a \"virtual\" mm in the same way</span>", 
"<span class=\"comment\"> * we have a virtual fs - giving a cleaner interface to the</span>", 
"<span class=\"comment\"> * mm details, and allowing different kinds of memory mappings</span>", 
"<span class=\"comment\"> * (from shared memory to executable loading to arbitrary</span>", 
"<span class=\"comment\"> * mmap() functions).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"extern struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"extern struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#nommu_region_tree\">nommu_region_tree</a>;", 
"extern struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> <a class=\"id\" href=\"#nommu_region_sem\">nommu_region_sem</a>;", 
"", 
"extern unsigned int <a class=\"id\" href=\"#kobjsize\">kobjsize</a>(const void *<a class=\"id\" href=\"#objp\">objp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vm_flags in vm_area_struct, see mm_types.h.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_READ\">VM_READ</a><span class=\"ts\"/><span class=\"ts\"/>0x00000001<span class=\"ts\"/><span class=\"comment\">/* currently active flags */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a><span class=\"ts\"/>0x00000002", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a><span class=\"ts\"/><span class=\"ts\"/>0x00000004", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a><span class=\"ts\"/>0x00000008", 
"", 
"<span class=\"comment\">/* mprotect() hardcodes VM_MAYREAD &gt;&gt; 4 == VM_READ, and so for r/w/x bits. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_MAYREAD\">VM_MAYREAD</a><span class=\"ts\"/>0x00000010<span class=\"ts\"/><span class=\"comment\">/* limits for mprotect() etc */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_MAYWRITE\">VM_MAYWRITE</a><span class=\"ts\"/>0x00000020", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_MAYEXEC\">VM_MAYEXEC</a><span class=\"ts\"/>0x00000040", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a><span class=\"ts\"/>0x00000080", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_GROWSDOWN\">VM_GROWSDOWN</a><span class=\"ts\"/>0x00000100<span class=\"ts\"/><span class=\"comment\">/* general info on the segment */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_STACK_GROWSUP\">CONFIG_STACK_GROWSUP</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IA64\">CONFIG_IA64</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_GROWSUP\">VM_GROWSUP</a><span class=\"ts\"/>0x00000200", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_GROWSUP\">VM_GROWSUP</a><span class=\"ts\"/>0x00000000", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a><span class=\"ts\"/>0x00000400<span class=\"ts\"/><span class=\"comment\">/* Page-ranges managed without \"struct page\", just pure PFN */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_DENYWRITE\">VM_DENYWRITE</a><span class=\"ts\"/>0x00000800<span class=\"ts\"/><span class=\"comment\">/* ETXTBSY on write attempts.. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_EXECUTABLE\">VM_EXECUTABLE</a><span class=\"ts\"/>0x00001000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a><span class=\"ts\"/>0x00002000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_IO\">VM_IO</a>           0x00004000<span class=\"ts\"/><span class=\"comment\">/* Memory mapped I/O or similar */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Used by sys_madvise() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_SEQ_READ\">VM_SEQ_READ</a><span class=\"ts\"/>0x00008000<span class=\"ts\"/><span class=\"comment\">/* App will access data sequentially */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_RAND_READ\">VM_RAND_READ</a><span class=\"ts\"/>0x00010000<span class=\"ts\"/><span class=\"comment\">/* App will not benefit from clustered reads */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_DONTCOPY\">VM_DONTCOPY</a><span class=\"ts\"/>0x00020000      <span class=\"comment\">/* Do not copy this vma on fork */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_DONTEXPAND\">VM_DONTEXPAND</a><span class=\"ts\"/>0x00040000<span class=\"ts\"/><span class=\"comment\">/* Cannot expand with mremap() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_RESERVED\">VM_RESERVED</a><span class=\"ts\"/>0x00080000<span class=\"ts\"/><span class=\"comment\">/* Count as reserved_vm like IO */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_ACCOUNT\">VM_ACCOUNT</a><span class=\"ts\"/>0x00100000<span class=\"ts\"/><span class=\"comment\">/* Is a VM accounted object */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_NORESERVE\">VM_NORESERVE</a><span class=\"ts\"/>0x00200000<span class=\"ts\"/><span class=\"comment\">/* should the VM suppress accounting */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_HUGETLB\">VM_HUGETLB</a><span class=\"ts\"/>0x00400000<span class=\"ts\"/><span class=\"comment\">/* Huge TLB Page VM */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_NONLINEAR\">VM_NONLINEAR</a><span class=\"ts\"/>0x00800000<span class=\"ts\"/><span class=\"comment\">/* Is non-linear (remap_file_pages) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_MAPPED_COPY\">VM_MAPPED_COPY</a><span class=\"ts\"/>0x01000000<span class=\"ts\"/><span class=\"comment\">/* T if mapped copy of data (nommu mmap) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_INSERTPAGE\">VM_INSERTPAGE</a><span class=\"ts\"/>0x02000000<span class=\"ts\"/><span class=\"comment\">/* The vma has had \"vm_insert_page()\" done on it */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_ALWAYSDUMP\">VM_ALWAYSDUMP</a><span class=\"ts\"/>0x04000000<span class=\"ts\"/><span class=\"comment\">/* Always include in core dumps */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_CAN_NONLINEAR\">VM_CAN_NONLINEAR</a> 0x08000000<span class=\"ts\"/><span class=\"comment\">/* Has -&gt;fault &amp; does nonlinear pages */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_MIXEDMAP\">VM_MIXEDMAP</a><span class=\"ts\"/>0x10000000<span class=\"ts\"/><span class=\"comment\">/* Can contain \"struct page\" and pure PFN pages */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_SAO\">VM_SAO</a><span class=\"ts\"/><span class=\"ts\"/>0x20000000<span class=\"ts\"/><span class=\"comment\">/* Strong Access Ordering (powerpc) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_PFN_AT_MMAP\">VM_PFN_AT_MMAP</a><span class=\"ts\"/>0x40000000<span class=\"ts\"/><span class=\"comment\">/* PFNMAP vma that is fully mapped at mmap time */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_MERGEABLE\">VM_MERGEABLE</a><span class=\"ts\"/>0x80000000<span class=\"ts\"/><span class=\"comment\">/* KSM may merge identical pages */</span>", 
"", 
"<span class=\"comment\">/* Bits set in the VMA until the stack is in its final location */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_STACK_INCOMPLETE_SETUP\">VM_STACK_INCOMPLETE_SETUP</a><span class=\"ts\"/>(<a class=\"id\" href=\"#VM_RAND_READ\">VM_RAND_READ</a> | <a class=\"id\" href=\"#VM_SEQ_READ\">VM_SEQ_READ</a>)", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#VM_STACK_DEFAULT_FLAGS\">VM_STACK_DEFAULT_FLAGS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* arch can override this */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_STACK_DEFAULT_FLAGS\">VM_STACK_DEFAULT_FLAGS</a> <a class=\"id\" href=\"#VM_DATA_DEFAULT_FLAGS\">VM_DATA_DEFAULT_FLAGS</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STACK_GROWSUP\">CONFIG_STACK_GROWSUP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_STACK_FLAGS\">VM_STACK_FLAGS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#VM_GROWSUP\">VM_GROWSUP</a> | <a class=\"id\" href=\"#VM_STACK_DEFAULT_FLAGS\">VM_STACK_DEFAULT_FLAGS</a> | <a class=\"id\" href=\"#VM_ACCOUNT\">VM_ACCOUNT</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_STACK_FLAGS\">VM_STACK_FLAGS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#VM_GROWSDOWN\">VM_GROWSDOWN</a> | <a class=\"id\" href=\"#VM_STACK_DEFAULT_FLAGS\">VM_STACK_DEFAULT_FLAGS</a> | <a class=\"id\" href=\"#VM_ACCOUNT\">VM_ACCOUNT</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_READHINTMASK\">VM_READHINTMASK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#VM_SEQ_READ\">VM_SEQ_READ</a> | <a class=\"id\" href=\"#VM_RAND_READ\">VM_RAND_READ</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_ClearReadHint\">VM_ClearReadHint</a>(<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#v\">v</a>)-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= ~<a class=\"id\" href=\"#VM_READHINTMASK\">VM_READHINTMASK</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_NormalReadHint\">VM_NormalReadHint</a>(<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/><span class=\"ts\"/>(!((<a class=\"id\" href=\"#v\">v</a>)-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_READHINTMASK\">VM_READHINTMASK</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_SequentialReadHint\">VM_SequentialReadHint</a>(<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#v\">v</a>)-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SEQ_READ\">VM_SEQ_READ</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_RandomReadHint\">VM_RandomReadHint</a>(<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#v\">v</a>)-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_RAND_READ\">VM_RAND_READ</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * special vmas that are non-mergable, non-mlock()able</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_SPECIAL\">VM_SPECIAL</a> (<a class=\"id\" href=\"#VM_IO\">VM_IO</a> | <a class=\"id\" href=\"#VM_DONTEXPAND\">VM_DONTEXPAND</a> | <a class=\"id\" href=\"#VM_RESERVED\">VM_RESERVED</a> | <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mapping from the currently active vm_flags protection bits (the</span>", 
"<span class=\"comment\"> * low four bits) to a page protection mask..</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#protection_map\">protection_map</a>[16];", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a><span class=\"ts\"/>0x01<span class=\"ts\"/><span class=\"comment\">/* Fault was a write access */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FAULT_FLAG_NONLINEAR\">FAULT_FLAG_NONLINEAR</a><span class=\"ts\"/>0x02<span class=\"ts\"/><span class=\"comment\">/* Fault was via a nonlinear mapping */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FAULT_FLAG_MKWRITE\">FAULT_FLAG_MKWRITE</a><span class=\"ts\"/>0x04<span class=\"ts\"/><span class=\"comment\">/* Fault was mkwrite of existing pte */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This interface is used by x86 PAT code to identify a pfn mapping that is</span>", 
"<span class=\"comment\"> * linear over entire vma. This is to optimize PAT code that deals with</span>", 
"<span class=\"comment\"> * marking the physical region with a particular prot. This is not for generic</span>", 
"<span class=\"comment\"> * mm use. Note also that this check will not work if the pfn mapping is</span>", 
"<span class=\"comment\"> * linear for a vma starting at physical address 0. In which case PAT code</span>", 
"<span class=\"comment\"> * falls back to slow path of reserving physical range page by page.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_linear_pfn_mapping\">is_linear_pfn_mapping</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_PFN_AT_MMAP\">VM_PFN_AT_MMAP</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_pfn_mapping\">is_pfn_mapping</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vm_fault is filled by the the pagefault handler and passed to the vma's</span>", 
"<span class=\"comment\"> * -&gt;fault function. The vma's -&gt;fault is responsible for returning a bitmask</span>", 
"<span class=\"comment\"> * of VM_FAULT_xxx flags that give details about how the fault was handled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * pgoff should be used in favour of virtual_address, if possible. If pgoff</span>", 
"<span class=\"comment\"> * is used, one may set VM_CAN_NONLINEAR in the vma-&gt;vm_flags to get nonlinear</span>", 
"<span class=\"comment\"> * mapping support.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vm_fault\">vm_fault</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FAULT_FLAG_xxx flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Logical page offset based on vma */</span>", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#virtual_address\">virtual_address</a>;<span class=\"ts\"/><span class=\"comment\">/* Faulting virtual address */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* -&gt;fault handlers should return a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page here, unless VM_FAULT_NOPAGE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is set (which is also implied by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * VM_FAULT_ERROR).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are the virtual MM functions - opening of an area, closing and</span>", 
"<span class=\"comment\"> * unmapping it (needed to keep files on disk up-to-date etc), pointer</span>", 
"<span class=\"comment\"> * to the functions called when a no-page or a wp-page exception occurs. </span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vm_operations_struct\">vm_operations_struct</a> {", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#open\">open</a>)(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#area\">area</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#close\">close</a>)(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#area\">area</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fault\">fault</a>)(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_fault\">vm_fault</a> *<a class=\"id\" href=\"#vmf\">vmf</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* notification that a previously read-only page is about to become</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * writable, if an error is returned it will cause a SIGBUS */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>)(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_fault\">vm_fault</a> *<a class=\"id\" href=\"#vmf\">vmf</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* called by access_process_vm when get_user_pages() fails, typically</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for use by special VMAs that can switch between memory and hardware</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#access\">access</a>)(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#write\">write</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set_policy() op must add a reference to any non-NULL @new mempolicy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to hold the policy upon return.  Caller should pass NULL @new to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * remove a policy and fall back to surrounding context--i.e. do not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * install a MPOL_DEFAULT policy, nor the task or system default</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mempolicy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#set_policy\">set_policy</a>)(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get_policy() op must add reference [mpol_get()] to any policy at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (vma,addr) marked as MPOL_SHARED.  The shared policy infrastructure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in mm/mempolicy.c will do this automatically.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get_policy() must NOT add a ref if the policy at (vma,addr) is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * marked as MPOL_SHARED. vma policies are protected by the mmap_sem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If no [shared/vma] mempolicy exists at the addr, get_policy() op</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must return NULL--i.e., do not \"fallback\" to task or system default</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * policy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *(*<a class=\"id\" href=\"#get_policy\">get_policy</a>)(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#migrate\">migrate</a>)(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#to\">to</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a>;", 
"struct <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#private\">private</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#private\">private</a> = (<a class=\"id\" href=\"#v\">v</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * FIXME: take this include out, include page-flags.h in</span>", 
"<span class=\"comment\"> * files which need it (119 of them)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page\">page</a>-<a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Methods to modify the page usage count.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * What counts for a page usage:</span>", 
"<span class=\"comment\"> * - cache mapping   (page-&gt;mapping)</span>", 
"<span class=\"comment\"> * - private data    (page-&gt;private)</span>", 
"<span class=\"comment\"> * - page mapped in a task's page tables, each mapping</span>", 
"<span class=\"comment\"> *   is counted separately</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also, many kernel routines increase the page count before a critical</span>", 
"<span class=\"comment\"> * routine so they can be sure the page doesn't go away from under them.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Drop a ref, return true if the refcount fell to zero (the page has no users)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#put_page_testzero\">put_page_testzero</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>) == 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to grab a ref unless the page has a refcount of zero, return false if</span>", 
"<span class=\"comment\"> * that is the case.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#get_page_unless_zero\">get_page_unless_zero</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>);", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#page_is_ram\">page_is_ram</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"comment\">/* Support for virtually mapped pages */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(const void *<a class=\"id\" href=\"#addr\">addr</a>);", 
"unsigned long <a class=\"id\" href=\"#vmalloc_to_pfn\">vmalloc_to_pfn</a>(const void *<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine if an address is within the vmalloc range</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On nommu, vmalloc/vfree wrap through kmalloc/kfree directly, so there</span>", 
"<span class=\"comment\"> * is no special casing required.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_vmalloc_addr\">is_vmalloc_addr</a>(const void *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#x\">x</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> && <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>;", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"extern int <a class=\"id\" href=\"#is_vmalloc_or_module_addr\">is_vmalloc_or_module_addr</a>(const void *<a class=\"id\" href=\"#x\">x</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_vmalloc_or_module_addr\">is_vmalloc_or_module_addr</a>(const void *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#compound_head\">compound_head</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageTail\">PageTail</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#first_page\">first_page</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_count\">page_count</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#_count\">_count</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#get_page\">get_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>) == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#virt_to_head_page\">virt_to_head_page</a>(const void *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#x\">x</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup the page count before being freed into the page allocator for</span>", 
"<span class=\"comment\"> * the first time (boot or memory hotplug)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_page_count\">init_page_count</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>, 1);", 
"}", 
"", 
"void <a class=\"id\" href=\"#put_page\">put_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"void <a class=\"id\" href=\"#put_pages_list\">put_pages_list</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"void <a class=\"id\" href=\"#split_page\">split_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>);", 
"int <a class=\"id\" href=\"#split_free_page\">split_free_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Compound pages have a destructor function.  Provide a</span>", 
"<span class=\"comment\"> * prototype for that function and accessor functions.</span>", 
"<span class=\"comment\"> * These are _only_ valid on the head of a PG_compound page.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef void <a class=\"id\" href=\"#compound_page_dtor\">compound_page_dtor</a>(struct <a class=\"id\" href=\"#page\">page</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_compound_page_dtor\">set_compound_page_dtor</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#compound_page_dtor\">compound_page_dtor</a> *<a class=\"id\" href=\"#dtor\">dtor</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>[1].<a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#next\">next</a> = (void *)<a class=\"id\" href=\"#dtor\">dtor</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#compound_page_dtor\">compound_page_dtor</a> *<a class=\"id\" href=\"#get_compound_page_dtor\">get_compound_page_dtor</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#compound_page_dtor\">compound_page_dtor</a> *)<a class=\"id\" href=\"#page\">page</a>[1].<a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#compound_order\">compound_order</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageHead\">PageHead</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#page\">page</a>[1].<a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_compound_order\">set_compound_order</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>[1].<a class=\"id\" href=\"#lru\">lru</a>.<a class=\"id\" href=\"#prev\">prev</a> = (void *)<a class=\"id\" href=\"#order\">order</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Multiple processes may \"see\" the same page. E.g. for untouched</span>", 
"<span class=\"comment\"> * mappings of /dev/null, all processes see the same page full of</span>", 
"<span class=\"comment\"> * zeroes, and text pages of executables and shared libraries have</span>", 
"<span class=\"comment\"> * only one copy in memory, at most, normally.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For the non-reserved pages, page_count(page) denotes a reference count.</span>", 
"<span class=\"comment\"> *   page_count() == 0 means the page is free. page-&gt;lru is then used for</span>", 
"<span class=\"comment\"> *   freelist management in the buddy allocator.</span>", 
"<span class=\"comment\"> *   page_count() &gt; 0  means the page has been allocated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pages are allocated by the slab allocator in order to provide memory</span>", 
"<span class=\"comment\"> * to kmalloc and kmem_cache_alloc. In this case, the management of the</span>", 
"<span class=\"comment\"> * page, and the fields in 'struct page' are the responsibility of mm/slab.c</span>", 
"<span class=\"comment\"> * unless a particular usage is carefully commented. (the responsibility of</span>", 
"<span class=\"comment\"> * freeing the kmalloc memory is the caller's, of course).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A page may be used by anyone else who does a __get_free_page().</span>", 
"<span class=\"comment\"> * In this case, page_count still tracks the references, and should only</span>", 
"<span class=\"comment\"> * be used through the normal accessor functions. The top bits of page-&gt;flags</span>", 
"<span class=\"comment\"> * and page-&gt;virtual store page management information, but all other fields</span>", 
"<span class=\"comment\"> * are unused and could be used privately, carefully. The management of this</span>", 
"<span class=\"comment\"> * page is the responsibility of the one who allocated it, and those who have</span>", 
"<span class=\"comment\"> * subsequently been given references to it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The other pages (we may call them \"pagecache pages\") are completely</span>", 
"<span class=\"comment\"> * managed by the Linux memory manager: I/O, buffers, swapping etc.</span>", 
"<span class=\"comment\"> * The following discussion applies only to them.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A pagecache page contains an opaque `private' member, which belongs to the</span>", 
"<span class=\"comment\"> * page's address_space. Usually, this is the address of a circular list of</span>", 
"<span class=\"comment\"> * the page's disk buffers. PG_private must be set to tell the VM to call</span>", 
"<span class=\"comment\"> * into the filesystem to release these pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A page may belong to an inode's memory mapping. In this case, page-&gt;mapping</span>", 
"<span class=\"comment\"> * is the pointer to the inode, and page-&gt;index is the file offset of the page,</span>", 
"<span class=\"comment\"> * in units of PAGE_CACHE_SIZE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If pagecache pages are not associated with an inode, they are said to be</span>", 
"<span class=\"comment\"> * anonymous pages. These may become associated with the swapcache, and in that</span>", 
"<span class=\"comment\"> * case PG_swapcache is set, and page-&gt;private is an offset into the swapcache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In either case (swapcache or inode backed), the pagecache itself holds one</span>", 
"<span class=\"comment\"> * reference to the page. Setting PG_private should also increment the</span>", 
"<span class=\"comment\"> * refcount. The each user mapping also has a reference to the page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The pagecache pages are stored in a per-mapping radix tree, which is</span>", 
"<span class=\"comment\"> * rooted at mapping-&gt;page_tree, and indexed by offset.</span>", 
"<span class=\"comment\"> * Where 2.4 and early 2.6 kernels kept dirty/clean pages in per-address_space</span>", 
"<span class=\"comment\"> * lists, we instead now tag pages as dirty/writeback in the radix tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All pagecache pages may be subject to I/O:</span>", 
"<span class=\"comment\"> * - inode pages may need to be read from disk,</span>", 
"<span class=\"comment\"> * - inode pages which have been modified and are MAP_SHARED may need</span>", 
"<span class=\"comment\"> *   to be written back to the inode on disk,</span>", 
"<span class=\"comment\"> * - anonymous pages (including MAP_PRIVATE file mappings) which have been</span>", 
"<span class=\"comment\"> *   modified may need to be swapped out to swap space and (later) to be read</span>", 
"<span class=\"comment\"> *   back into memory.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The zone field is never updated after free_area_init_core()</span>", 
"<span class=\"comment\"> * sets it, so none of the operations on it need to be atomic.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * page-&gt;flags layout:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are three possibilities for how page-&gt;flags get</span>", 
"<span class=\"comment\"> * laid out.  The first is for the normal case, without</span>", 
"<span class=\"comment\"> * sparsemem.  The second is for sparsemem when there is</span>", 
"<span class=\"comment\"> * plenty of space for node and section.  The last is when</span>", 
"<span class=\"comment\"> * we have run out of space and have to fall back to an</span>", 
"<span class=\"comment\"> * alternate (slower) way of determining the node.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * No sparsemem or sparsemem vmemmap: |       NODE     | ZONE | ... | FLAGS |</span>", 
"<span class=\"comment\"> * classic sparse with space for node:| SECTION | NODE | ZONE | ... | FLAGS |</span>", 
"<span class=\"comment\"> * classic sparse no space for node:  | SECTION |     ZONE    | ... | FLAGS |</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SPARSEMEM\">CONFIG_SPARSEMEM</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SPARSEMEM_VMEMMAP\">CONFIG_SPARSEMEM_VMEMMAP</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTIONS_WIDTH\">SECTIONS_WIDTH</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SECTIONS_SHIFT\">SECTIONS_SHIFT</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTIONS_WIDTH\">SECTIONS_WIDTH</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONES_WIDTH\">ZONES_WIDTH</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>", 
"", 
"#if <a class=\"id\" href=\"#SECTIONS_WIDTH\">SECTIONS_WIDTH</a>+<a class=\"id\" href=\"#ZONES_WIDTH\">ZONES_WIDTH</a>+<a class=\"id\" href=\"#NODES_SHIFT\">NODES_SHIFT</a> <= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#NR_PAGEFLAGS\">NR_PAGEFLAGS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODES_WIDTH\">NODES_WIDTH</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODES_SHIFT\">NODES_SHIFT</a>", 
"#else", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_VMEMMAP\">CONFIG_SPARSEMEM_VMEMMAP</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"Vmemmap: No space for nodes field in page flags\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODES_WIDTH\">NODES_WIDTH</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Page flags: | [SECTION] | [NODE] | ZONE | ... | FLAGS | */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTIONS_PGOFF\">SECTIONS_PGOFF</a><span class=\"ts\"/><span class=\"ts\"/>((sizeof(unsigned long)*8) - <a class=\"id\" href=\"#SECTIONS_WIDTH\">SECTIONS_WIDTH</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODES_PGOFF\">NODES_PGOFF</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#SECTIONS_PGOFF\">SECTIONS_PGOFF</a> - <a class=\"id\" href=\"#NODES_WIDTH\">NODES_WIDTH</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONES_PGOFF\">ZONES_PGOFF</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#NODES_PGOFF\">NODES_PGOFF</a> - <a class=\"id\" href=\"#ZONES_WIDTH\">ZONES_WIDTH</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We are going to use the flags for the page to node mapping if its in</span>", 
"<span class=\"comment\"> * there.  This includes the case where there is no node, so it is implicit.</span>", 
"<span class=\"comment\"> */</span>", 
"#if !(<a class=\"id\" href=\"#NODES_WIDTH\">NODES_WIDTH</a> &gt; 0 || <a class=\"id\" href=\"#NODES_SHIFT\">NODES_SHIFT</a> == 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODE_NOT_IN_PAGE_FLAGS\">NODE_NOT_IN_PAGE_FLAGS</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#PFN_SECTION_SHIFT\">PFN_SECTION_SHIFT</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PFN_SECTION_SHIFT\">PFN_SECTION_SHIFT</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Define the bit shifts to access each section.  For non-existant</span>", 
"<span class=\"comment\"> * sections we define the shift as 0; that plus a 0 mask ensures</span>", 
"<span class=\"comment\"> * the compiler will optimise away reference to them.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTIONS_PGSHIFT\">SECTIONS_PGSHIFT</a><span class=\"ts\"/>(<a class=\"id\" href=\"#SECTIONS_PGOFF\">SECTIONS_PGOFF</a> * (<a class=\"id\" href=\"#SECTIONS_WIDTH\">SECTIONS_WIDTH</a> != 0))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODES_PGSHIFT\">NODES_PGSHIFT</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#NODES_PGOFF\">NODES_PGOFF</a> * (<a class=\"id\" href=\"#NODES_WIDTH\">NODES_WIDTH</a> != 0))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONES_PGSHIFT\">ZONES_PGSHIFT</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ZONES_PGOFF\">ZONES_PGOFF</a> * (<a class=\"id\" href=\"#ZONES_WIDTH\">ZONES_WIDTH</a> != 0))", 
"", 
"<span class=\"comment\">/* NODE:ZONE or SECTION:ZONE is used to ID a zone for the buddy allcator */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NODE_NOT_IN_PAGEFLAGS\">NODE_NOT_IN_PAGEFLAGS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONEID_SHIFT\">ZONEID_SHIFT</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#SECTIONS_SHIFT\">SECTIONS_SHIFT</a> + <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONEID_PGOFF\">ZONEID_PGOFF</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#SECTIONS_PGOFF\">SECTIONS_PGOFF</a> &lt; <a class=\"id\" href=\"#ZONES_PGOFF\">ZONES_PGOFF</a>)? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SECTIONS_PGOFF\">SECTIONS_PGOFF</a> : <a class=\"id\" href=\"#ZONES_PGOFF\">ZONES_PGOFF</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONEID_SHIFT\">ZONEID_SHIFT</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#NODES_SHIFT\">NODES_SHIFT</a> + <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONEID_PGOFF\">ZONEID_PGOFF</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#NODES_PGOFF\">NODES_PGOFF</a> &lt; <a class=\"id\" href=\"#ZONES_PGOFF\">ZONES_PGOFF</a>)? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODES_PGOFF\">NODES_PGOFF</a> : <a class=\"id\" href=\"#ZONES_PGOFF\">ZONES_PGOFF</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONEID_PGSHIFT\">ZONEID_PGSHIFT</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ZONEID_PGOFF\">ZONEID_PGOFF</a> * (<a class=\"id\" href=\"#ZONEID_SHIFT\">ZONEID_SHIFT</a> != 0))", 
"", 
"#if <a class=\"id\" href=\"#SECTIONS_WIDTH\">SECTIONS_WIDTH</a>+<a class=\"id\" href=\"#NODES_WIDTH\">NODES_WIDTH</a>+<a class=\"id\" href=\"#ZONES_WIDTH\">ZONES_WIDTH</a> &gt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#NR_PAGEFLAGS\">NR_PAGEFLAGS</a>", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#SECTIONS_WIDTH\">SECTIONS_WIDTH</a>+<a class=\"id\" href=\"#NODES_WIDTH\">NODES_WIDTH</a>+<a class=\"id\" href=\"#ZONES_WIDTH\">ZONES_WIDTH</a> &gt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#NR_PAGEFLAGS\">NR_PAGEFLAGS</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONES_MASK\">ZONES_MASK</a><span class=\"ts\"/><span class=\"ts\"/>((1UL << <a class=\"id\" href=\"#ZONES_WIDTH\">ZONES_WIDTH</a>) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODES_MASK\">NODES_MASK</a><span class=\"ts\"/><span class=\"ts\"/>((1UL << <a class=\"id\" href=\"#NODES_WIDTH\">NODES_WIDTH</a>) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTIONS_MASK\">SECTIONS_MASK</a><span class=\"ts\"/><span class=\"ts\"/>((1UL << <a class=\"id\" href=\"#SECTIONS_WIDTH\">SECTIONS_WIDTH</a>) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONEID_MASK\">ZONEID_MASK</a><span class=\"ts\"/><span class=\"ts\"/>((1UL << <a class=\"id\" href=\"#ZONEID_SHIFT\">ZONEID_SHIFT</a>) - 1)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#page_zonenum\">page_zonenum</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> >> <a class=\"id\" href=\"#ZONES_PGSHIFT\">ZONES_PGSHIFT</a>) &amp; <a class=\"id\" href=\"#ZONES_MASK\">ZONES_MASK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The identification function is only used by the buddy allocator for</span>", 
"<span class=\"comment\"> * determining if two pages could be buddies. We are not really</span>", 
"<span class=\"comment\"> * identifying a zone since we could be using a the section number</span>", 
"<span class=\"comment\"> * id if we have not node id available in page flags.</span>", 
"<span class=\"comment\"> * We guarantee only that it will return the same value for two</span>", 
"<span class=\"comment\"> * combinable pages in a zone.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_zone_id\">page_zone_id</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> >> <a class=\"id\" href=\"#ZONEID_PGSHIFT\">ZONEID_PGSHIFT</a>) &amp; <a class=\"id\" href=\"#ZONEID_MASK\">ZONEID_MASK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#node\">node</a>;", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NODE_NOT_IN_PAGE_FLAGS\">NODE_NOT_IN_PAGE_FLAGS</a>", 
"extern int <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> >> <a class=\"id\" href=\"#NODES_PGSHIFT\">NODES_PGSHIFT</a>) &amp; <a class=\"id\" href=\"#NODES_MASK\">NODES_MASK</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#page_zone\">page_zone</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>))-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#page_zonenum\">page_zonenum</a>(<a class=\"id\" href=\"#page\">page</a>)];", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SPARSEMEM\">CONFIG_SPARSEMEM</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SPARSEMEM_VMEMMAP\">CONFIG_SPARSEMEM_VMEMMAP</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#page_to_section\">page_to_section</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> >> <a class=\"id\" href=\"#SECTIONS_PGSHIFT\">SECTIONS_PGSHIFT</a>) &amp; <a class=\"id\" href=\"#SECTIONS_MASK\">SECTIONS_MASK</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_page_zone\">set_page_zone</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#ZONES_MASK\">ZONES_MASK</a> << <a class=\"id\" href=\"#ZONES_PGSHIFT\">ZONES_PGSHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> |= (<a class=\"id\" href=\"#zone\">zone</a> &amp; <a class=\"id\" href=\"#ZONES_MASK\">ZONES_MASK</a>) << <a class=\"id\" href=\"#ZONES_PGSHIFT\">ZONES_PGSHIFT</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_page_node\">set_page_node</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#NODES_MASK\">NODES_MASK</a> << <a class=\"id\" href=\"#NODES_PGSHIFT\">NODES_PGSHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> |= (<a class=\"id\" href=\"#node\">node</a> &amp; <a class=\"id\" href=\"#NODES_MASK\">NODES_MASK</a>) << <a class=\"id\" href=\"#NODES_PGSHIFT\">NODES_PGSHIFT</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_page_section\">set_page_section</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#section\">section</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#SECTIONS_MASK\">SECTIONS_MASK</a> << <a class=\"id\" href=\"#SECTIONS_PGSHIFT\">SECTIONS_PGSHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> |= (<a class=\"id\" href=\"#section\">section</a> &amp; <a class=\"id\" href=\"#SECTIONS_MASK\">SECTIONS_MASK</a>) << <a class=\"id\" href=\"#SECTIONS_PGSHIFT\">SECTIONS_PGSHIFT</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_page_links\">set_page_links</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node\">node</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_zone\">set_page_zone</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_node\">set_page_node</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_section\">set_page_section</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#pfn_to_section_nr\">pfn_to_section_nr</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some inline functions in vmstat.h depend on page_zone()</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmstat\">vmstat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *<a class=\"id\" href=\"#lowmem_page_address\">lowmem_page_address</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>)));", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#WANT_PAGE_VIRTUAL\">WANT_PAGE_VIRTUAL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HASHED_PAGE_VIRTUAL\">HASHED_PAGE_VIRTUAL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#WANT_PAGE_VIRTUAL\">WANT_PAGE_VIRTUAL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) ((<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#virtual\">virtual</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_page_address\">set_page_address</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#address\">address</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#virtual\">virtual</a> = (<a class=\"id\" href=\"#address\">address</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_address_init\">page_address_init</a>()  do { } while(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#HASHED_PAGE_VIRTUAL\">HASHED_PAGE_VIRTUAL</a>)", 
"void *<a class=\"id\" href=\"#page_address\">page_address</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"void <a class=\"id\" href=\"#set_page_address\">set_page_address</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#virtual\">virtual</a>);", 
"void <a class=\"id\" href=\"#page_address_init\">page_address_init</a>(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#HASHED_PAGE_VIRTUAL\">HASHED_PAGE_VIRTUAL</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#WANT_PAGE_VIRTUAL\">WANT_PAGE_VIRTUAL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) <a class=\"id\" href=\"#lowmem_page_address\">lowmem_page_address</a>(<a class=\"id\" href=\"#page\">page</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_page_address\">set_page_address</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#address\">address</a>)  do { } while(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_address_init\">page_address_init</a>()  do { } while(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On an anonymous page mapped into a user virtual memory area,</span>", 
"<span class=\"comment\"> * page-&gt;mapping points to its anon_vma, not to a struct address_space;</span>", 
"<span class=\"comment\"> * with the PAGE_MAPPING_ANON bit set to distinguish it.  See rmap.h.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On an anonymous page in a VM_MERGEABLE area, if CONFIG_KSM is enabled,</span>", 
"<span class=\"comment\"> * the PAGE_MAPPING_KSM bit may be set along with the PAGE_MAPPING_ANON bit;</span>", 
"<span class=\"comment\"> * and then page-&gt;mapping points, not to an anon_vma, but to a private</span>", 
"<span class=\"comment\"> * structure which KSM associates with that merged page.  See ksm.h.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PAGE_MAPPING_KSM without PAGE_MAPPING_ANON is currently never used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Please note that, confusingly, \"page_mapping\" refers to the inode</span>", 
"<span class=\"comment\"> * address_space which maps the page from disk; whereas \"page_mapped\"</span>", 
"<span class=\"comment\"> * refers to user virtual address space into which the page is mapped.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_MAPPING_ANON\">PAGE_MAPPING_ANON</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_MAPPING_KSM\">PAGE_MAPPING_KSM</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_MAPPING_FLAGS\">PAGE_MAPPING_FLAGS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_MAPPING_ANON\">PAGE_MAPPING_ANON</a> | <a class=\"id\" href=\"#PAGE_MAPPING_KSM\">PAGE_MAPPING_KSM</a>)", 
"", 
"extern struct <a class=\"id\" href=\"#address_space\">address_space</a> <a class=\"id\" href=\"#swapper_space\">swapper_space</a>;", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#page_mapping\">page_mapping</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageSlab\">PageSlab</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = &amp;<a class=\"id\" href=\"#swapper_space\">swapper_space</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((unsigned long)<a class=\"id\" href=\"#mapping\">mapping</a> &amp; <a class=\"id\" href=\"#PAGE_MAPPING_ANON\">PAGE_MAPPING_ANON</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mapping\">mapping</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Neutral page-&gt;mapping pointer to address_space or anon_vma or other */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#page_rmapping\">page_rmapping</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return (void *)((unsigned long)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> &amp; ~<a class=\"id\" href=\"#PAGE_MAPPING_FLAGS\">PAGE_MAPPING_FLAGS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#PageAnon\">PageAnon</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return ((unsigned long)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> &amp; <a class=\"id\" href=\"#PAGE_MAPPING_ANON\">PAGE_MAPPING_ANON</a>) != 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the pagecache index of the passed page.  Regular pagecache pages</span>", 
"<span class=\"comment\"> * use -&gt;index whereas swapcache pages use -&gt;private</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#page_index\">page_index</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The atomic page-&gt;_mapcount, like _count, starts from -1:</span>", 
"<span class=\"comment\"> * so that transitions both from it and to it can be tracked,</span>", 
"<span class=\"comment\"> * using atomic_inc_and_test and atomic_add_negative(-1).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#reset_page_mapcount\">reset_page_mapcount</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;(<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#_mapcount\">_mapcount</a>, -1);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;(<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#_mapcount\">_mapcount</a>) + 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return true if this page is mapped into pagetables.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_mapped\">page_mapped</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;(<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#_mapcount\">_mapcount</a>) >= 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Different kinds of faults, as returned by handle_mm_fault().</span>", 
"<span class=\"comment\"> * Used to decide whether a process gets delivered SIGBUS or</span>", 
"<span class=\"comment\"> * just gets major/minor fault counters bumped up.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_FAULT_MINOR\">VM_FAULT_MINOR</a><span class=\"ts\"/>0 <span class=\"comment\">/* For backwards compat. Remove me quickly. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a><span class=\"ts\"/>0x0001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a><span class=\"ts\"/>0x0002", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_FAULT_MAJOR\">VM_FAULT_MAJOR</a><span class=\"ts\"/>0x0004", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_FAULT_WRITE\">VM_FAULT_WRITE</a><span class=\"ts\"/>0x0008<span class=\"ts\"/><span class=\"comment\">/* Special case for get_user_pages */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_FAULT_HWPOISON\">VM_FAULT_HWPOISON</a> 0x0010<span class=\"ts\"/><span class=\"comment\">/* Hit poisoned page */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_FAULT_NOPAGE\">VM_FAULT_NOPAGE</a><span class=\"ts\"/>0x0100<span class=\"ts\"/><span class=\"comment\">/* -&gt;fault installed the pte, not return page */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_FAULT_LOCKED\">VM_FAULT_LOCKED</a><span class=\"ts\"/>0x0200<span class=\"ts\"/><span class=\"comment\">/* -&gt;fault locked the returned page */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_FAULT_ERROR\">VM_FAULT_ERROR</a><span class=\"ts\"/>(<a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a> | <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a> | <a class=\"id\" href=\"#VM_FAULT_HWPOISON\">VM_FAULT_HWPOISON</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Can be called by the pagefault handler when it gets a VM_FAULT_OOM.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#pagefault_out_of_memory\">pagefault_out_of_memory</a>(void);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#offset_in_page\">offset_in_page</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/>((unsigned long)(<a class=\"id\" href=\"#p\">p</a>) &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)", 
"", 
"extern void <a class=\"id\" href=\"#show_free_areas\">show_free_areas</a>(void);", 
"", 
"int <a class=\"id\" href=\"#shmem_lock\">shmem_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#lock\">lock</a>, struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#user\">user</a>);", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#shmem_file_setup\">shmem_file_setup</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"int <a class=\"id\" href=\"#shmem_zero_setup\">shmem_zero_setup</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"extern unsigned long <a class=\"id\" href=\"#shmem_get_unmapped_area\">shmem_get_unmapped_area</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern int <a class=\"id\" href=\"#can_do_mlock\">can_do_mlock</a>(void);", 
"extern int <a class=\"id\" href=\"#user_shm_lock\">user_shm_lock</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *);", 
"extern void <a class=\"id\" href=\"#user_shm_unlock\">user_shm_unlock</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Parameter block passed down to zap_pte_range in exceptional cases.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#zap_details\">zap_details</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#nonlinear_vma\">nonlinear_vma</a>;<span class=\"ts\"/><span class=\"comment\">/* Check page-&gt;index if set */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#check_mapping\">check_mapping</a>;<span class=\"ts\"/><span class=\"comment\">/* Check page-&gt;mapping if set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a><span class=\"ts\"/><a class=\"id\" href=\"#first_index\">first_index</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Lowest page-&gt;index to unmap */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#last_index\">last_index</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Highest page-&gt;index to unmap */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For unmap_mapping_range: */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#truncate_count\">truncate_count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Compare vm_truncate_count */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#vm_normal_page\">vm_normal_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"int <a class=\"id\" href=\"#zap_vma_ptes\">zap_vma_ptes</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"unsigned long <a class=\"id\" href=\"#zap_page_range\">zap_page_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, struct <a class=\"id\" href=\"#zap_details\">zap_details</a> *);", 
"unsigned long <a class=\"id\" href=\"#unmap_vmas\">unmap_vmas</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> **<a class=\"id\" href=\"#tlb\">tlb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#start_vma\">start_vma</a>, unsigned long <a class=\"id\" href=\"#start_addr\">start_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_addr\">end_addr</a>, unsigned long *<a class=\"id\" href=\"#nr_accounted\">nr_accounted</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zap_details\">zap_details</a> *);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mm_walk - callbacks for walk_page_range</span>", 
"<span class=\"comment\"> * @pgd_entry: if set, called for each non-empty PGD (top-level) entry</span>", 
"<span class=\"comment\"> * @pud_entry: if set, called for each non-empty PUD (2nd-level) entry</span>", 
"<span class=\"comment\"> * @pmd_entry: if set, called for each non-empty PMD (3rd-level) entry</span>", 
"<span class=\"comment\"> * @pte_entry: if set, called for each non-empty PTE (4th-level) entry</span>", 
"<span class=\"comment\"> * @pte_hole: if set, called for each hole at all levels</span>", 
"<span class=\"comment\"> * @hugetlb_entry: if set, called for each hugetlb entry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (see walk_page_range for more details)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mm_walk\">mm_walk</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#pgd_entry\">pgd_entry</a>)(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *, unsigned long, unsigned long, struct <a class=\"id\" href=\"#mm_walk\">mm_walk</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#pud_entry\">pud_entry</a>)(<a class=\"id\" href=\"#pud_t\">pud_t</a> *, unsigned long, unsigned long, struct <a class=\"id\" href=\"#mm_walk\">mm_walk</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#pmd_entry\">pmd_entry</a>)(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *, unsigned long, unsigned long, struct <a class=\"id\" href=\"#mm_walk\">mm_walk</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#pte_entry\">pte_entry</a>)(<a class=\"id\" href=\"#pte_t\">pte_t</a> *, unsigned long, unsigned long, struct <a class=\"id\" href=\"#mm_walk\">mm_walk</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#pte_hole\">pte_hole</a>)(unsigned long, unsigned long, struct <a class=\"id\" href=\"#mm_walk\">mm_walk</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#hugetlb_entry\">hugetlb_entry</a>)(<a class=\"id\" href=\"#pte_t\">pte_t</a> *, unsigned long,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long, unsigned long, struct <a class=\"id\" href=\"#mm_walk\">mm_walk</a> *);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>;", 
"};", 
"", 
"int <a class=\"id\" href=\"#walk_page_range\">walk_page_range</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_walk\">mm_walk</a> *<a class=\"id\" href=\"#walk\">walk</a>);", 
"void <a class=\"id\" href=\"#free_pgd_range\">free_pgd_range</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, unsigned long <a class=\"id\" href=\"#floor\">floor</a>, unsigned long <a class=\"id\" href=\"#ceiling\">ceiling</a>);", 
"int <a class=\"id\" href=\"#copy_page_range\">copy_page_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>);", 
"void <a class=\"id\" href=\"#unmap_mapping_range\">unmap_mapping_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> const <a class=\"id\" href=\"#holebegin\">holebegin</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> const <a class=\"id\" href=\"#holelen\">holelen</a>, int <a class=\"id\" href=\"#even_cows\">even_cows</a>);", 
"int <a class=\"id\" href=\"#follow_pfn\">follow_pfn</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"int <a class=\"id\" href=\"#follow_phys\">follow_phys</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>, unsigned long *<a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> *<a class=\"id\" href=\"#phys\">phys</a>);", 
"int <a class=\"id\" href=\"#generic_access_phys\">generic_access_phys</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#write\">write</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unmap_shared_mapping_range\">unmap_shared_mapping_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> const <a class=\"id\" href=\"#holebegin\">holebegin</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> const <a class=\"id\" href=\"#holelen\">holelen</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_mapping_range\">unmap_mapping_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#holebegin\">holebegin</a>, <a class=\"id\" href=\"#holelen\">holelen</a>, 0);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#truncate_pagecache\">truncate_pagecache</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#new\">new</a>);", 
"extern void <a class=\"id\" href=\"#truncate_setsize\">truncate_setsize</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#newsize\">newsize</a>);", 
"extern int <a class=\"id\" href=\"#vmtruncate\">vmtruncate</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>);", 
"extern int <a class=\"id\" href=\"#vmtruncate_range\">vmtruncate_range</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"int <a class=\"id\" href=\"#truncate_inode_page\">truncate_inode_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"int <a class=\"id\" href=\"#generic_error_remove_page\">generic_error_remove_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"int <a class=\"id\" href=\"#invalidate_inode_page\">invalidate_inode_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"extern int <a class=\"id\" href=\"#handle_mm_fault\">handle_mm_fault</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#handle_mm_fault\">handle_mm_fault</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* should never happen if there's no MMU */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern int <a class=\"id\" href=\"#make_pages_present\">make_pages_present</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"extern int <a class=\"id\" href=\"#access_process_vm\">access_process_vm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#write\">write</a>);", 
"", 
"int <a class=\"id\" href=\"#get_user_pages\">get_user_pages</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, int <a class=\"id\" href=\"#write\">write</a>, int <a class=\"id\" href=\"#force\">force</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#vmas\">vmas</a>);", 
"int <a class=\"id\" href=\"#get_user_pages_fast\">get_user_pages_fast</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>);", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#get_dump_page\">get_dump_page</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"extern int <a class=\"id\" href=\"#try_to_release_page\">try_to_release_page</a>(struct <a class=\"id\" href=\"#page\">page</a> * <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"extern void <a class=\"id\" href=\"#do_invalidatepage\">do_invalidatepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"int <a class=\"id\" href=\"#__set_page_dirty_nobuffers\">__set_page_dirty_nobuffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"int <a class=\"id\" href=\"#__set_page_dirty_no_writeback\">__set_page_dirty_no_writeback</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"int <a class=\"id\" href=\"#redirty_page_for_writepage\">redirty_page_for_writepage</a>(struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"void <a class=\"id\" href=\"#account_page_dirtied\">account_page_dirtied</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"int <a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"int <a class=\"id\" href=\"#set_page_dirty_lock\">set_page_dirty_lock</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"int <a class=\"id\" href=\"#clear_page_dirty_for_io\">clear_page_dirty_for_io</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"comment\">/* Is the vma a continuation of the stack vma above it? */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vma_stack_continue\">vma_stack_continue</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vma\">vma</a> && (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> == <a class=\"id\" href=\"#addr\">addr</a>) && (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_GROWSDOWN\">VM_GROWSDOWN</a>);", 
"}", 
"", 
"extern unsigned long <a class=\"id\" href=\"#move_page_tables\">move_page_tables</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_addr\">old_addr</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#new_vma\">new_vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_addr\">new_addr</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>);", 
"extern unsigned long <a class=\"id\" href=\"#do_mremap\">do_mremap</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#old_len\">old_len</a>, unsigned long <a class=\"id\" href=\"#new_len\">new_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#flags\">flags</a>, unsigned long <a class=\"id\" href=\"#new_addr\">new_addr</a>);", 
"extern int <a class=\"id\" href=\"#mprotect_fixup\">mprotect_fixup</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#pprev\">pprev</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#end\">end</a>, unsigned long <a class=\"id\" href=\"#newflags\">newflags</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * doesn't attempt to fault and will return short.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__get_user_pages_fast\">__get_user_pages_fast</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * per-process(per-mm_struct) statistics.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#SPLIT_RSS_COUNTING\">SPLIT_RSS_COUNTING</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The mm counters are not protected by its page_table_lock,</span>", 
"<span class=\"comment\"> * so must be incremented atomically.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_mm_counter\">set_mm_counter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>, long <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_set\">atomic_long_set</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#member\">member</a>], <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#get_mm_counter\">get_mm_counter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_mm_counter\">add_mm_counter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>, long <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_add\">atomic_long_add</a>(<a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#member\">member</a>]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inc_mm_counter\">inc_mm_counter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_inc\">atomic_long_inc</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#member\">member</a>]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dec_mm_counter\">dec_mm_counter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_dec\">atomic_long_dec</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#member\">member</a>]);", 
"}", 
"", 
"#else  <span class=\"comment\">/* !USE_SPLIT_PTLOCKS */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The mm counters are protected by its page_table_lock,</span>", 
"<span class=\"comment\"> * so can be incremented directly.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_mm_counter\">set_mm_counter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>, long <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#member\">member</a>] = <a class=\"id\" href=\"#value\">value</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#get_mm_counter\">get_mm_counter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#member\">member</a>];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_mm_counter\">add_mm_counter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>, long <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#member\">member</a>] += <a class=\"id\" href=\"#value\">value</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inc_mm_counter\">inc_mm_counter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#member\">member</a>]++;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dec_mm_counter\">dec_mm_counter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#member\">member</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>.<a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#member\">member</a>]--;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !USE_SPLIT_PTLOCKS */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#get_mm_rss\">get_mm_rss</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_mm_counter\">get_mm_counter</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_FILEPAGES\">MM_FILEPAGES</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_mm_counter\">get_mm_counter</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_ANONPAGES\">MM_ANONPAGES</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#get_mm_hiwater_rss\">get_mm_hiwater_rss</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#hiwater_rss\">hiwater_rss</a>, <a class=\"id\" href=\"#get_mm_rss\">get_mm_rss</a>(<a class=\"id\" href=\"#mm\">mm</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#get_mm_hiwater_vm\">get_mm_hiwater_vm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#hiwater_vm\">hiwater_vm</a>, <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_hiwater_rss\">update_hiwater_rss</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#_rss\">_rss</a> = <a class=\"id\" href=\"#get_mm_rss\">get_mm_rss</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#mm\">mm</a>)-><a class=\"id\" href=\"#hiwater_rss\">hiwater_rss</a> &lt; <a class=\"id\" href=\"#_rss\">_rss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#mm\">mm</a>)-><a class=\"id\" href=\"#hiwater_rss\">hiwater_rss</a> = <a class=\"id\" href=\"#_rss\">_rss</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_hiwater_vm\">update_hiwater_vm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#hiwater_vm\">hiwater_vm</a> &lt; <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#hiwater_vm\">hiwater_vm</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#setmax_mm_hiwater_rss\">setmax_mm_hiwater_rss</a>(unsigned long *<a class=\"id\" href=\"#maxrss\">maxrss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hiwater_rss\">hiwater_rss</a> = <a class=\"id\" href=\"#get_mm_hiwater_rss\">get_mm_hiwater_rss</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#maxrss\">maxrss</a> &lt; <a class=\"id\" href=\"#hiwater_rss\">hiwater_rss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#maxrss\">maxrss</a> = <a class=\"id\" href=\"#hiwater_rss\">hiwater_rss</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#SPLIT_RSS_COUNTING\">SPLIT_RSS_COUNTING</a>)", 
"void <a class=\"id\" href=\"#sync_mm_rss\">sync_mm_rss</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sync_mm_rss\">sync_mm_rss</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A callback you can register to apply pressure to ageable caches.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 'shrink' is passed a count 'nr_to_scan' and a 'gfpmask'.  It should</span>", 
"<span class=\"comment\"> * look through the least-recently-used 'nr_to_scan' entries and</span>", 
"<span class=\"comment\"> * attempt to free them up.  It should return the number of objects</span>", 
"<span class=\"comment\"> * which remain in the cache.  If it returns -1, it means it cannot do</span>", 
"<span class=\"comment\"> * any scanning at this time (eg. there is a risk of deadlock).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The 'gfpmask' refers to the allocation we are currently trying to</span>", 
"<span class=\"comment\"> * fulfil.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that 'shrink' will be passed nr_to_scan == 0 when the VM is</span>", 
"<span class=\"comment\"> * querying the cache size, so a fastpath for that case is appropriate.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#shrinker\">shrinker</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#shrink\">shrink</a>)(struct <a class=\"id\" href=\"#shrinker\">shrinker</a> *, int <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#seeks\">seeks</a>;<span class=\"ts\"/><span class=\"comment\">/* seeks to recreate an obj */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* These are for internal use */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#nr\">nr</a>;<span class=\"ts\"/><span class=\"comment\">/* objs pending delete */</span>", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFAULT_SEEKS\">DEFAULT_SEEKS</a> 2 <span class=\"comment\">/* A good number if you don't know better. */</span>", 
"extern void <a class=\"id\" href=\"#register_shrinker\">register_shrinker</a>(struct <a class=\"id\" href=\"#shrinker\">shrinker</a> *);", 
"extern void <a class=\"id\" href=\"#unregister_shrinker\">unregister_shrinker</a>(struct <a class=\"id\" href=\"#shrinker\">shrinker</a> *);", 
"", 
"int <a class=\"id\" href=\"#vma_wants_writenotify\">vma_wants_writenotify</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"extern <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#get_locked_pte\">get_locked_pte</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> **<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__PAGETABLE_PUD_FOLDED\">__PAGETABLE_PUD_FOLDED</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__pud_alloc\">__pud_alloc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"int <a class=\"id\" href=\"#__pud_alloc\">__pud_alloc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__PAGETABLE_PMD_FOLDED\">__PAGETABLE_PMD_FOLDED</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__pmd_alloc\">__pmd_alloc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"int <a class=\"id\" href=\"#__pmd_alloc\">__pmd_alloc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#__pte_alloc\">__pte_alloc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"int <a class=\"id\" href=\"#__pte_alloc_kernel\">__pte_alloc_kernel</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following ifdef needed to get the 4level-fixup.h header to work.</span>", 
"<span class=\"comment\"> * Remove it when 4level-fixup.h has been removed.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__ARCH_HAS_4LEVEL_HACK\">__ARCH_HAS_4LEVEL_HACK</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud_alloc\">pud_alloc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>)) && <a class=\"id\" href=\"#__pud_alloc\">__pud_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>))?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>: <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd_alloc\">pmd_alloc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pud_none\">pud_none</a>(*<a class=\"id\" href=\"#pud\">pud</a>)) && <a class=\"id\" href=\"#__pmd_alloc\">__pmd_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>))?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>: <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MMU &amp;&amp; !__ARCH_HAS_4LEVEL_HACK */</span>", 
"", 
"#if <a class=\"id\" href=\"#USE_SPLIT_PTLOCKS\">USE_SPLIT_PTLOCKS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We tuck a spinlock to guard each pagetable page into its struct page,</span>", 
"<span class=\"comment\"> * at page-&gt;private, with BUILD_BUG_ON to make sure that this will not</span>", 
"<span class=\"comment\"> * overflow into the next struct page (as it might with DEBUG_SPINLOCK).</span>", 
"<span class=\"comment\"> * When freeing, reset page-&gt;mapping so free_pages_check won't complain.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__pte_lockptr\">__pte_lockptr</a>(<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/>&amp;((<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#ptl\">ptl</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_lock_init\">pte_lock_init</a>(<a class=\"id\" href=\"#_page\">_page</a>)<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(<a class=\"id\" href=\"#__pte_lockptr\">__pte_lockptr</a>(<a class=\"id\" href=\"#_page\">_page</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_lock_deinit\">pte_lock_deinit</a>(<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_lockptr\">pte_lockptr</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>)<span class=\"ts\"/>({(void)(<a class=\"id\" href=\"#mm\">mm</a>); <a class=\"id\" href=\"#__pte_lockptr\">__pte_lockptr</a>(<a class=\"id\" href=\"#pmd_page\">pmd_page</a>(*(<a class=\"id\" href=\"#pmd\">pmd</a>)));})", 
"#else<span class=\"ts\"/><span class=\"comment\">/* !USE_SPLIT_PTLOCKS */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We use mm-&gt;page_table_lock to guard all pagetable pages of the mm.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_lock_init\">pte_lock_init</a>(<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_lock_deinit\">pte_lock_deinit</a>(<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_lockptr\">pte_lockptr</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>)<span class=\"ts\"/>({(void)(<a class=\"id\" href=\"#pmd\">pmd</a>); &amp;(<a class=\"id\" href=\"#mm\">mm</a>)-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>;})", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* USE_SPLIT_PTLOCKS */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pgtable_page_ctor\">pgtable_page_ctor</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_lock_init\">pte_lock_init</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_zone_page_state\">inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_PAGETABLE\">NR_PAGETABLE</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pgtable_page_dtor\">pgtable_page_dtor</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_lock_deinit\">pte_lock_deinit</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_zone_page_state\">dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_PAGETABLE\">NR_PAGETABLE</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptlp\">ptlp</a>)<span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#__ptl\">__ptl</a> = <a class=\"id\" href=\"#pte_lockptr\">pte_lockptr</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#__pte\">__pte</a> = <a class=\"id\" href=\"#pte_offset_map\">pte_offset_map</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#ptlp\">ptlp</a>) = <a class=\"id\" href=\"#__ptl\">__ptl</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#__ptl\">__ptl</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#ptl\">ptl</a>)<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#ptl\">ptl</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#pte\">pte</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_alloc_map\">pte_alloc_map</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*(<a class=\"id\" href=\"#pmd\">pmd</a>))) && <a class=\"id\" href=\"#__pte_alloc\">__pte_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>))? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>: <a class=\"id\" href=\"#pte_offset_map\">pte_offset_map</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_alloc_map_lock\">pte_alloc_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptlp\">ptlp</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*(<a class=\"id\" href=\"#pmd\">pmd</a>))) && <a class=\"id\" href=\"#__pte_alloc\">__pte_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>))? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>: <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptlp\">ptlp</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_alloc_kernel\">pte_alloc_kernel</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*(<a class=\"id\" href=\"#pmd\">pmd</a>))) && <a class=\"id\" href=\"#__pte_alloc_kernel\">__pte_alloc_kernel</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>))? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>: <a class=\"id\" href=\"#pte_offset_kernel\">pte_offset_kernel</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>))", 
"", 
"extern void <a class=\"id\" href=\"#free_area_init\">free_area_init</a>(unsigned long * <a class=\"id\" href=\"#zones_size\">zones_size</a>);", 
"extern void <a class=\"id\" href=\"#free_area_init_node\">free_area_init_node</a>(int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long * <a class=\"id\" href=\"#zones_size\">zones_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>, unsigned long *<a class=\"id\" href=\"#zholes_size\">zholes_size</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_POPULATES_NODE_MAP\">CONFIG_ARCH_POPULATES_NODE_MAP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * With CONFIG_ARCH_POPULATES_NODE_MAP set, an architecture may initialise its</span>", 
"<span class=\"comment\"> * zones, allocate the backing mem_map and account for memory holes in a more</span>", 
"<span class=\"comment\"> * architecture independent manner. This is a substitute for creating the</span>", 
"<span class=\"comment\"> * zone_sizes[] and zholes_size[] arrays and passing them to</span>", 
"<span class=\"comment\"> * free_area_init_node()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * An architecture is expected to register range of page frames backed by</span>", 
"<span class=\"comment\"> * physical memory with add_active_range() before calling</span>", 
"<span class=\"comment\"> * free_area_init_nodes() passing in the PFN each zone ends at. At a basic</span>", 
"<span class=\"comment\"> * usage, an architecture is expected to do something like</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * unsigned long max_zone_pfns[MAX_NR_ZONES] = {max_dma, max_normal_pfn,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> max_highmem_pfn};</span>", 
"<span class=\"comment\"> * for_each_valid_physical_page_range()</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>add_active_range(node_id, start_pfn, end_pfn)</span>", 
"<span class=\"comment\"> * free_area_init_nodes(max_zone_pfns);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the architecture guarantees that there are no holes in the ranges</span>", 
"<span class=\"comment\"> * registered with add_active_range(), free_bootmem_active_regions()</span>", 
"<span class=\"comment\"> * will call free_bootmem_node() for each registered physical page range.</span>", 
"<span class=\"comment\"> * Similarly sparse_memory_present_with_active_regions() calls</span>", 
"<span class=\"comment\"> * memory_present() for each range when SPARSEMEM is enabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See mm/page_alloc.c for more information on each function exposed by</span>", 
"<span class=\"comment\"> * CONFIG_ARCH_POPULATES_NODE_MAP</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#free_area_init_nodes\">free_area_init_nodes</a>(unsigned long *<a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>);", 
"extern void <a class=\"id\" href=\"#add_active_range\">add_active_range</a>(unsigned int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"extern void <a class=\"id\" href=\"#remove_active_range\">remove_active_range</a>(unsigned int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"extern void <a class=\"id\" href=\"#remove_all_active_ranges\">remove_all_active_ranges</a>(void);", 
"void <a class=\"id\" href=\"#sort_node_map\">sort_node_map</a>(void);", 
"unsigned long <a class=\"id\" href=\"#__absent_pages_in_range\">__absent_pages_in_range</a>(int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"extern unsigned long <a class=\"id\" href=\"#absent_pages_in_range\">absent_pages_in_range</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"extern void <a class=\"id\" href=\"#get_pfn_range_for_nid\">get_pfn_range_for_nid</a>(unsigned int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long *<a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"extern unsigned long <a class=\"id\" href=\"#find_min_pfn_with_active_regions\">find_min_pfn_with_active_regions</a>(void);", 
"extern void <a class=\"id\" href=\"#free_bootmem_with_active_regions\">free_bootmem_with_active_regions</a>(int <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a>);", 
"int <a class=\"id\" href=\"#add_from_early_node_map\">add_from_early_node_map</a>(struct <a class=\"id\" href=\"#range\">range</a> *<a class=\"id\" href=\"#range\">range</a>, int <a class=\"id\" href=\"#az\">az</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#nr_range\">nr_range</a>, int <a class=\"id\" href=\"#nid\">nid</a>);", 
"void *<a class=\"id\" href=\"#__alloc_memory_core_early\">__alloc_memory_core_early</a>(int <a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#limit\">limit</a>);", 
"typedef int (*<a class=\"id\" href=\"#work_fn_t\">work_fn_t</a>)(unsigned long, unsigned long, void *);", 
"extern void <a class=\"id\" href=\"#work_with_active_regions\">work_with_active_regions</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#work_fn_t\">work_fn_t</a> <a class=\"id\" href=\"#work_fn\">work_fn</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern void <a class=\"id\" href=\"#sparse_memory_present_with_active_regions\">sparse_memory_present_with_active_regions</a>(int <a class=\"id\" href=\"#nid\">nid</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ARCH_POPULATES_NODE_MAP */</span>", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ARCH_POPULATES_NODE_MAP\">CONFIG_ARCH_POPULATES_NODE_MAP</a>) && \\", 
"    !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_HAVE_ARCH_EARLY_PFN_TO_NID\">CONFIG_HAVE_ARCH_EARLY_PFN_TO_NID</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__early_pfn_to_nid\">__early_pfn_to_nid</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"<span class=\"comment\">/* please see mm/page_alloc.c */</span>", 
"extern int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#early_pfn_to_nid\">early_pfn_to_nid</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_ARCH_EARLY_PFN_TO_NID\">CONFIG_HAVE_ARCH_EARLY_PFN_TO_NID</a>", 
"<span class=\"comment\">/* there is a per-arch backend function. */</span>", 
"extern int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#__early_pfn_to_nid\">__early_pfn_to_nid</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HAVE_ARCH_EARLY_PFN_TO_NID */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#set_dma_reserve\">set_dma_reserve</a>(unsigned long <a class=\"id\" href=\"#new_dma_reserve\">new_dma_reserve</a>);", 
"extern void <a class=\"id\" href=\"#memmap_init_zone\">memmap_init_zone</a>(unsigned long, int, unsigned long,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long, enum <a class=\"id\" href=\"#memmap_context\">memmap_context</a>);", 
"extern void <a class=\"id\" href=\"#setup_per_zone_wmarks\">setup_per_zone_wmarks</a>(void);", 
"extern void <a class=\"id\" href=\"#calculate_zone_inactive_ratio\">calculate_zone_inactive_ratio</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>);", 
"extern void <a class=\"id\" href=\"#mem_init\">mem_init</a>(void);", 
"extern void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#mmap_init\">mmap_init</a>(void);", 
"extern void <a class=\"id\" href=\"#show_mem\">show_mem</a>(void);", 
"extern void <a class=\"id\" href=\"#si_meminfo\">si_meminfo</a>(struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> * <a class=\"id\" href=\"#val\">val</a>);", 
"extern void <a class=\"id\" href=\"#si_meminfo_node\">si_meminfo_node</a>(struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> *<a class=\"id\" href=\"#val\">val</a>, int <a class=\"id\" href=\"#nid\">nid</a>);", 
"extern int <a class=\"id\" href=\"#after_bootmem\">after_bootmem</a>;", 
"", 
"extern void <a class=\"id\" href=\"#setup_per_cpu_pageset\">setup_per_cpu_pageset</a>(void);", 
"", 
"extern void <a class=\"id\" href=\"#zone_pcp_update\">zone_pcp_update</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"comment\">/* nommu.c */</span>", 
"extern <a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#mmap_pages_allocated\">mmap_pages_allocated</a>;", 
"extern int <a class=\"id\" href=\"#nommu_shrink_inode_mappings\">nommu_shrink_inode_mappings</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"", 
"<span class=\"comment\">/* prio_tree.c */</span>", 
"void <a class=\"id\" href=\"#vma_prio_tree_add\">vma_prio_tree_add</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#old\">old</a>);", 
"void <a class=\"id\" href=\"#vma_prio_tree_insert\">vma_prio_tree_insert</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *);", 
"void <a class=\"id\" href=\"#vma_prio_tree_remove\">vma_prio_tree_remove</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *);", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma_prio_tree_next\">vma_prio_tree_next</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#vma_prio_tree_foreach\">vma_prio_tree_foreach</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#begin\">begin</a>, <a class=\"id\" href=\"#end\">end</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#prio_tree_iter_init\">prio_tree_iter_init</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#begin\">begin</a>, <a class=\"id\" href=\"#end\">end</a>), <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma_prio_tree_next\">vma_prio_tree_next</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#iter\">iter</a>)); )", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#vma_nonlinear_insert\">vma_nonlinear_insert</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"<span class=\"comment\">/* mmap.c */</span>", 
"extern int <a class=\"id\" href=\"#__vm_enough_memory\">__vm_enough_memory</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, long <a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#cap_sys_admin\">cap_sys_admin</a>);", 
"extern int <a class=\"id\" href=\"#vma_adjust\">vma_adjust</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#insert\">insert</a>);", 
"extern struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma_merge\">vma_merge</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>, struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *, struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *);", 
"extern struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#find_mergeable_anon_vma\">find_mergeable_anon_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"extern int <a class=\"id\" href=\"#split_vma\">split_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#new_below\">new_below</a>);", 
"extern int <a class=\"id\" href=\"#insert_vm_struct\">insert_vm_struct</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"extern void <a class=\"id\" href=\"#__vma_link_rb\">__vma_link_rb</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **, struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *);", 
"extern void <a class=\"id\" href=\"#unlink_file_vma\">unlink_file_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *);", 
"extern struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#copy_vma\">copy_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>);", 
"extern void <a class=\"id\" href=\"#exit_mmap\">exit_mmap</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *);", 
"", 
"extern int <a class=\"id\" href=\"#mm_take_all_locks\">mm_take_all_locks</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"extern void <a class=\"id\" href=\"#mm_drop_all_locks\">mm_drop_all_locks</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"comment\">/* From fs/proc/base.c. callers must _not_ hold the mm's exe_file_lock */</span>", 
"extern void <a class=\"id\" href=\"#added_exe_file_vma\">added_exe_file_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"extern void <a class=\"id\" href=\"#removed_exe_file_vma\">removed_exe_file_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#added_exe_file_vma\">added_exe_file_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#removed_exe_file_vma\">removed_exe_file_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
"", 
"extern int <a class=\"id\" href=\"#may_expand_vm\">may_expand_vm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#npages\">npages</a>);", 
"extern int <a class=\"id\" href=\"#install_special_mapping\">install_special_mapping</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"extern unsigned long <a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a>(struct <a class=\"id\" href=\"#file\">file</a> *, unsigned long, unsigned long, unsigned long, unsigned long);", 
"", 
"extern unsigned long <a class=\"id\" href=\"#do_mmap_pgoff\">do_mmap_pgoff</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#len\">len</a>, unsigned long <a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flag\">flag</a>, unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>);", 
"extern unsigned long <a class=\"id\" href=\"#mmap_region\">mmap_region</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#len\">len</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#vm_flags\">vm_flags</a>, unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#do_mmap\">do_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#len\">len</a>, unsigned long <a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flag\">flag</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#len\">len</a>)) &lt; <a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#offset\">offset</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_mmap_pgoff\">do_mmap_pgoff</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#flag\">flag</a>, <a class=\"id\" href=\"#offset\">offset</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#do_munmap\">do_munmap</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *, unsigned long, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"", 
"extern unsigned long <a class=\"id\" href=\"#do_brk\">do_brk</a>(unsigned long, unsigned long);", 
"", 
"<span class=\"comment\">/* filemap.c */</span>", 
"extern unsigned long <a class=\"id\" href=\"#page_unuse\">page_unuse</a>(struct <a class=\"id\" href=\"#page\">page</a> *);", 
"extern void <a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a>);", 
"extern void <a class=\"id\" href=\"#truncate_inode_pages_range\">truncate_inode_pages_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#lstart\">lstart</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#lend\">lend</a>);", 
"", 
"<span class=\"comment\">/* generic vm_area_ops exported for stackable file systems */</span>", 
"extern int <a class=\"id\" href=\"#filemap_fault\">filemap_fault</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, struct <a class=\"id\" href=\"#vm_fault\">vm_fault</a> *);", 
"", 
"<span class=\"comment\">/* mm/page-writeback.c */</span>", 
"int <a class=\"id\" href=\"#write_one_page\">write_one_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#wait\">wait</a>);", 
"void <a class=\"id\" href=\"#task_dirty_inc\">task_dirty_inc</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"comment\">/* readahead.c */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_MAX_READAHEAD\">VM_MAX_READAHEAD</a><span class=\"ts\"/>128<span class=\"ts\"/><span class=\"comment\">/* kbytes */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_MIN_READAHEAD\">VM_MIN_READAHEAD</a><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"comment\">/* kbytes (includes current page) */</span>", 
"", 
"int <a class=\"id\" href=\"#force_page_cache_readahead\">force_page_cache_readahead</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#nr_to_read\">nr_to_read</a>);", 
"", 
"void <a class=\"id\" href=\"#page_cache_sync_readahead\">page_cache_sync_readahead</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"void <a class=\"id\" href=\"#page_cache_async_readahead\">page_cache_async_readahead</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pg\">pg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#max_sane_readahead\">max_sane_readahead</a>(unsigned long <a class=\"id\" href=\"#nr\">nr</a>);", 
"unsigned long <a class=\"id\" href=\"#ra_submit\">ra_submit</a>(struct <a class=\"id\" href=\"#file_ra_state\">file_ra_state</a> *<a class=\"id\" href=\"#ra\">ra</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>);", 
"", 
"<span class=\"comment\">/* Do stack extension */</span>", 
"extern int <a class=\"id\" href=\"#expand_stack\">expand_stack</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"#if <a class=\"id\" href=\"#VM_GROWSUP\">VM_GROWSUP</a>", 
"extern int <a class=\"id\" href=\"#expand_upwards\">expand_upwards</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"#else", 
"  #<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#expand_upwards\">expand_upwards</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"extern int <a class=\"id\" href=\"#expand_stack_downwards\">expand_stack_downwards</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"comment\">/* Look up the first VMA which satisfies  addr &lt; vm_end,  NULL if none. */</span>", 
"extern struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#find_vma\">find_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"extern struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#find_vma_prev\">find_vma_prev</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#pprev\">pprev</a>);", 
"", 
"<span class=\"comment\">/* Look up the first VMA which intersects the interval start_addr..end_addr-1,</span>", 
"<span class=\"comment\">   NULL if none.  Assume start_addr &lt; end_addr. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#find_vma_intersection\">find_vma_intersection</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#start_addr\">start_addr</a>, unsigned long <a class=\"id\" href=\"#end_addr\">end_addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>,<a class=\"id\" href=\"#start_addr\">start_addr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#end_addr\">end_addr</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vma\">vma</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#vma_pages\">vma_pages</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"<a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#vm_get_page_prot\">vm_get_page_prot</a>(unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#vm_get_page_prot\">vm_get_page_prot</a>(unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#find_extend_vma\">find_extend_vma</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *, unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"int <a class=\"id\" href=\"#remap_pfn_range\">remap_pfn_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a>);", 
"int <a class=\"id\" href=\"#vm_insert_page\">vm_insert_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, struct <a class=\"id\" href=\"#page\">page</a> *);", 
"int <a class=\"id\" href=\"#vm_insert_pfn\">vm_insert_pfn</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"int <a class=\"id\" href=\"#vm_insert_mixed\">vm_insert_mixed</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#follow_page\">follow_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#foll_flags\">foll_flags</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a><span class=\"ts\"/>0x01<span class=\"ts\"/><span class=\"comment\">/* check pte is writable */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FOLL_TOUCH\">FOLL_TOUCH</a><span class=\"ts\"/>0x02<span class=\"ts\"/><span class=\"comment\">/* mark page accessed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a><span class=\"ts\"/>0x04<span class=\"ts\"/><span class=\"comment\">/* do get_page on page */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FOLL_DUMP\">FOLL_DUMP</a><span class=\"ts\"/>0x08<span class=\"ts\"/><span class=\"comment\">/* give error on hole if it would be zero */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FOLL_FORCE\">FOLL_FORCE</a><span class=\"ts\"/>0x10<span class=\"ts\"/><span class=\"comment\">/* get_user_pages read/write w/o permission */</span>", 
"", 
"typedef int (*<a class=\"id\" href=\"#pte_fn_t\">pte_fn_t</a>)(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#pgtable_t\">pgtable_t</a> <a class=\"id\" href=\"#token\">token</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern int <a class=\"id\" href=\"#apply_to_page_range\">apply_to_page_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#pte_fn_t\">pte_fn_t</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"void <a class=\"id\" href=\"#vm_stat_account\">vm_stat_account</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *, unsigned long, struct <a class=\"id\" href=\"#file\">file</a> *, long);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#vm_stat_account\">vm_stat_account</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PAGEALLOC\">CONFIG_DEBUG_PAGEALLOC</a>", 
"extern int <a class=\"id\" href=\"#debug_pagealloc_enabled\">debug_pagealloc_enabled</a>;", 
"", 
"extern void <a class=\"id\" href=\"#kernel_map_pages\">kernel_map_pages</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>, int <a class=\"id\" href=\"#enable\">enable</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#enable_debug_pagealloc\">enable_debug_pagealloc</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_pagealloc_enabled\">debug_pagealloc_enabled</a> = 1;", 
"}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIBERNATION\">CONFIG_HIBERNATION</a>", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#kernel_page_present\">kernel_page_present</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIBERNATION */</span>", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#kernel_map_pages\">kernel_map_pages</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>, int <a class=\"id\" href=\"#enable\">enable</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#enable_debug_pagealloc\">enable_debug_pagealloc</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIBERNATION\">CONFIG_HIBERNATION</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#kernel_page_present\">kernel_page_present</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>) { return <a class=\"id\" href=\"#true\">true</a>; }", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIBERNATION */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#get_gate_vma\">get_gate_vma</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#__HAVE_ARCH_GATE_AREA\">__HAVE_ARCH_GATE_AREA</a>", 
"int <a class=\"id\" href=\"#in_gate_area_no_task\">in_gate_area_no_task</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"int <a class=\"id\" href=\"#in_gate_area\">in_gate_area</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"#else", 
"int <a class=\"id\" href=\"#in_gate_area_no_task\">in_gate_area_no_task</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#in_gate_area\">in_gate_area</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#addr\">addr</a>) ({(void)<a class=\"id\" href=\"#task\">task</a>; <a class=\"id\" href=\"#in_gate_area_no_task\">in_gate_area_no_task</a>(<a class=\"id\" href=\"#addr\">addr</a>);})", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __HAVE_ARCH_GATE_AREA */</span>", 
"", 
"int <a class=\"id\" href=\"#drop_caches_sysctl_handler\">drop_caches_sysctl_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"unsigned long <a class=\"id\" href=\"#shrink_slab\">shrink_slab</a>(unsigned long <a class=\"id\" href=\"#scanned\">scanned</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lru_pages\">lru_pages</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#randomize_va_space\">randomize_va_space</a> 0", 
"#else", 
"extern int <a class=\"id\" href=\"#randomize_va_space\">randomize_va_space</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"const char * <a class=\"id\" href=\"#arch_vma_name\">arch_vma_name</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>);", 
"void <a class=\"id\" href=\"#print_vma_addr\">print_vma_addr</a>(char *<a class=\"id\" href=\"#prefix\">prefix</a>, unsigned long <a class=\"id\" href=\"#rip\">rip</a>);", 
"", 
"void <a class=\"id\" href=\"#sparse_mem_maps_populate_node\">sparse_mem_maps_populate_node</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#map_map\">map_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#pnum_end\">pnum_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#map_count\">map_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#sparse_mem_map_populate\">sparse_mem_map_populate</a>(unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>, int <a class=\"id\" href=\"#nid\">nid</a>);", 
"<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#vmemmap_pgd_populate\">vmemmap_pgd_populate</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"<a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#vmemmap_pud_populate\">vmemmap_pud_populate</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#vmemmap_pmd_populate\">vmemmap_pmd_populate</a>(<a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#vmemmap_pte_populate\">vmemmap_pte_populate</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"void *<a class=\"id\" href=\"#vmemmap_alloc_block\">vmemmap_alloc_block</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"void *<a class=\"id\" href=\"#vmemmap_alloc_block_buf\">vmemmap_alloc_block_buf</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"void <a class=\"id\" href=\"#vmemmap_verify\">vmemmap_verify</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *, int, unsigned long, unsigned long);", 
"int <a class=\"id\" href=\"#vmemmap_populate_basepages\">vmemmap_populate_basepages</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#start_page\">start_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"int <a class=\"id\" href=\"#vmemmap_populate\">vmemmap_populate</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#start_page\">start_page</a>, unsigned long <a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"void <a class=\"id\" href=\"#vmemmap_populate_print_last\">vmemmap_populate_print_last</a>(void);", 
"", 
"", 
"enum <a class=\"id\" href=\"#mf_flags\">mf_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MF_COUNT_INCREASED\">MF_COUNT_INCREASED</a> = 1 << 0,", 
"};", 
"extern void <a class=\"id\" href=\"#memory_failure\">memory_failure</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, int <a class=\"id\" href=\"#trapno\">trapno</a>);", 
"extern int <a class=\"id\" href=\"#__memory_failure\">__memory_failure</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, int <a class=\"id\" href=\"#trapno\">trapno</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern int <a class=\"id\" href=\"#unpoison_memory\">unpoison_memory</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"extern int <a class=\"id\" href=\"#sysctl_memory_failure_early_kill\">sysctl_memory_failure_early_kill</a>;", 
"extern int <a class=\"id\" href=\"#sysctl_memory_failure_recovery\">sysctl_memory_failure_recovery</a>;", 
"extern void <a class=\"id\" href=\"#shake_page\">shake_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#access\">access</a>);", 
"extern <a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#mce_bad_pages\">mce_bad_pages</a>;", 
"extern int <a class=\"id\" href=\"#soft_offline_page\">soft_offline_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_FAILURE\">CONFIG_MEMORY_FAILURE</a>", 
"int <a class=\"id\" href=\"#is_hwpoison_address\">is_hwpoison_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_hwpoison_address\">is_hwpoison_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#dump_page\">dump_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_MM_H */</span>", 
];
xr_frag_insert('l/64/6e4575e50a15e3b1a303016d0514dc49fd97f9.xr', __xr_tmp);
