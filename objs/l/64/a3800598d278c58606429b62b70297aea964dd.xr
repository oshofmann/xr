var __xr_tmp = [
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hrtimers_init\">hrtimers_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cpu_notify\">hrtimer_cpu_notify</a>(&amp;<a class=\"id\" href=\"#hrtimers_nb\">hrtimers_nb</a>, (unsigned long)<a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (void *)(long)<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#hrtimers_nb\">hrtimers_nb</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGH_RES_TIMERS\">CONFIG_HIGH_RES_TIMERS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_softirq\">open_softirq</a>(<a class=\"id\" href=\"#HRTIMER_SOFTIRQ\">HRTIMER_SOFTIRQ</a>, <a class=\"id\" href=\"#run_hrtimer_softirq\">run_hrtimer_softirq</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * schedule_hrtimeout_range_clock - sleep until timeout</span>", 
"<span class=\"comment\"> * @expires:<span class=\"ts\"/>timeout value (ktime_t)</span>", 
"<span class=\"comment\"> * @delta:<span class=\"ts\"/>slack in expires timeout (ktime_t)</span>", 
"<span class=\"comment\"> * @mode:<span class=\"ts\"/>timer mode, HRTIMER_MODE_ABS or HRTIMER_MODE_REL</span>", 
"<span class=\"comment\"> * @clock:<span class=\"ts\"/>timer clock, CLOCK_MONOTONIC or CLOCK_REALTIME</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#schedule_hrtimeout_range_clock\">schedule_hrtimeout_range_clock</a>(<a class=\"id\" href=\"#ktime_t\">ktime_t</a> *<a class=\"id\" href=\"#expires\">expires</a>, unsigned long <a class=\"id\" href=\"#delta\">delta</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#clock\">clock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer_sleeper\">hrtimer_sleeper</a> <a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Optimize when a zero timeout value is given. It does not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * matter whether this is an absolute or a relative time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#expires\">expires</a> && !<a class=\"id\" href=\"#expires\">expires</a>-><a class=\"id\" href=\"#tv64\">tv64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A NULL parameter means \"inifinte\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#expires\">expires</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init_on_stack\">hrtimer_init_on_stack</a>(&amp;<a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#clock\">clock</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_set_expires_range_ns\">hrtimer_set_expires_range_ns</a>(&amp;<a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#timer\">timer</a>, *<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init_sleeper\">hrtimer_init_sleeper</a>(&amp;<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_start_expires\">hrtimer_start_expires</a>(&amp;<a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hrtimer_active\">hrtimer_active</a>(&amp;<a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#timer\">timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(&amp;<a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_hrtimer_on_stack\">destroy_hrtimer_on_stack</a>(&amp;<a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#task\">task</a> ? 0 : -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * schedule_hrtimeout_range - sleep until timeout</span>", 
"<span class=\"comment\"> * @expires:<span class=\"ts\"/>timeout value (ktime_t)</span>", 
"<span class=\"comment\"> * @delta:<span class=\"ts\"/>slack in expires timeout (ktime_t)</span>", 
"<span class=\"comment\"> * @mode:<span class=\"ts\"/>timer mode, HRTIMER_MODE_ABS or HRTIMER_MODE_REL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Make the current task sleep until the given expiry time has</span>", 
"<span class=\"comment\"> * elapsed. The routine will return immediately unless</span>", 
"<span class=\"comment\"> * the current task state has been set (see set_current_state()).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The @delta argument gives the kernel the freedom to schedule the</span>", 
"<span class=\"comment\"> * actual wakeup to a time that is both power and performance friendly.</span>", 
"<span class=\"comment\"> * The kernel give the normal best effort behavior for \"@expires+@delta\",</span>", 
"<span class=\"comment\"> * but may decide to fire the timer earlier, but no earlier than @expires.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You can set the task state as follows -</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %TASK_UNINTERRUPTIBLE - at least @timeout time is guaranteed to</span>", 
"<span class=\"comment\"> * pass before the routine returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %TASK_INTERRUPTIBLE - the routine may return early if a signal is</span>", 
"<span class=\"comment\"> * delivered to the current task.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The current task state is guaranteed to be TASK_RUNNING when this</span>", 
"<span class=\"comment\"> * routine returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 when the timer has expired otherwise -EINTR</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#schedule_hrtimeout_range\">schedule_hrtimeout_range</a>(<a class=\"id\" href=\"#ktime_t\">ktime_t</a> *<a class=\"id\" href=\"#expires\">expires</a>, unsigned long <a class=\"id\" href=\"#delta\">delta</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#schedule_hrtimeout_range_clock\">schedule_hrtimeout_range_clock</a>(<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#schedule_hrtimeout_range\">schedule_hrtimeout_range</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * schedule_hrtimeout - sleep until timeout</span>", 
"<span class=\"comment\"> * @expires:<span class=\"ts\"/>timeout value (ktime_t)</span>", 
"<span class=\"comment\"> * @mode:<span class=\"ts\"/>timer mode, HRTIMER_MODE_ABS or HRTIMER_MODE_REL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Make the current task sleep until the given expiry time has</span>", 
"<span class=\"comment\"> * elapsed. The routine will return immediately unless</span>", 
"<span class=\"comment\"> * the current task state has been set (see set_current_state()).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You can set the task state as follows -</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %TASK_UNINTERRUPTIBLE - at least @timeout time is guaranteed to</span>", 
"<span class=\"comment\"> * pass before the routine returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %TASK_INTERRUPTIBLE - the routine may return early if a signal is</span>", 
"<span class=\"comment\"> * delivered to the current task.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The current task state is guaranteed to be TASK_RUNNING when this</span>", 
"<span class=\"comment\"> * routine returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 when the timer has expired otherwise -EINTR</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#schedule_hrtimeout\">schedule_hrtimeout</a>(<a class=\"id\" href=\"#ktime_t\">ktime_t</a> *<a class=\"id\" href=\"#expires\">expires</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#schedule_hrtimeout_range\">schedule_hrtimeout_range</a>(<a class=\"id\" href=\"#expires\">expires</a>, 0, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#schedule_hrtimeout\">schedule_hrtimeout</a>);", 
];
xr_frag_insert('l/64/a3800598d278c58606429b62b70297aea964dd.xr', __xr_tmp);
