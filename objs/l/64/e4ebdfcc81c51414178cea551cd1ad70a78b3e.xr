var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  pm.h - Power management interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2000 Andrew Henroid</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> *  (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_PM_H\">_LINUX_PM_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_PM_H\">_LINUX_PM_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Callbacks for platform drivers to implement.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void (*<a class=\"id\" href=\"#pm_idle\">pm_idle</a>)(void);", 
"extern void (*<a class=\"id\" href=\"#pm_power_off\">pm_power_off</a>)(void);", 
"extern void (*<a class=\"id\" href=\"#pm_power_off_prepare\">pm_power_off_prepare</a>)(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Device power management</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#device\">device</a>;", 
"", 
"typedef struct <a class=\"id\" href=\"#pm_message\">pm_message</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#event\">event</a>;", 
"} <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct dev_pm_ops - device PM callbacks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Several driver power state transitions are externally visible, affecting</span>", 
"<span class=\"comment\"> * the state of pending I/O queues and (for drivers that touch hardware)</span>", 
"<span class=\"comment\"> * interrupts, wakeups, DMA, and other hardware state.  There may also be</span>", 
"<span class=\"comment\"> * internal transitions to various low power modes, which are transparent</span>", 
"<span class=\"comment\"> * to the rest of the driver stack (such as a driver that's ON gating off</span>", 
"<span class=\"comment\"> * clocks which are not in active use).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The externally visible transitions are handled with the help of the following</span>", 
"<span class=\"comment\"> * callbacks included in this structure:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @prepare: Prepare the device for the upcoming transition, but do NOT change</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>its hardware state.  Prevent new children of the device from being</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>registered after @prepare() returns (the driver's subsystem and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>generally the rest of the kernel is supposed to prevent new calls to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>probe method from being made too once @prepare() has succeeded).  If</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prepare() detects a situation it cannot handle (e.g. registration of a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>child already in progress), it may return -EAGAIN, so that the PM core</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>can execute it once again (e.g. after the new child has been registered)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to recover from the race condition.  This method is executed for all</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kinds of suspend transitions and is followed by one of the suspend</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>callbacks: @suspend(), @freeze(), or @poweroff().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The PM core executes @prepare() for all devices before starting to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>execute suspend callbacks for any of them, so drivers may assume all of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the other devices to be present and functional while @prepare() is being</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>executed.  In particular, it is safe to make GFP_KERNEL memory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocations from within @prepare().  However, drivers may NOT assume</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>anything about the availability of the user space at that time and it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is not correct to request firmware from within @prepare() (it's too</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>late to do that).  [To work around this limitation, drivers may</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register suspend and hibernation notifiers that are executed before the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>freezing of tasks.]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @complete: Undo the changes made by @prepare().  This method is executed for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>all kinds of resume transitions, following one of the resume callbacks:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@resume(), @thaw(), @restore().  Also called if the state transition</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fails before the driver's suspend callback (@suspend(), @freeze(),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@poweroff()) can be executed (e.g. if the suspend callback fails for one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of the other devices that the PM core has unsuccessfully attempted to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>suspend earlier).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The PM core executes @complete() after it has executed the appropriate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>resume callback for all devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @suspend: Executed before putting the system into a sleep state in which the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>contents of main memory are preserved.  Quiesce the device, put it into</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a low power state appropriate for the upcoming system state (such as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PCI_D3hot), and enable wakeup events as appropriate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @resume: Executed after waking the system up from a sleep state in which the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>contents of main memory were preserved.  Put the device into the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>appropriate state, according to the information saved in memory by the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>preceding @suspend().  The driver starts working again, responding to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hardware events and software requests.  The hardware may have gone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>through a power-off reset, or it may have maintained state from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>previous suspend() which the driver may rely on while resuming.  On most</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platforms, there are no restrictions on availability of resources like</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>clocks during @resume().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @freeze: Hibernation-specific, executed before creating a hibernation image.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Quiesce operations so that a consistent image can be created, but do NOT</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>otherwise put the device into a low power device state and do NOT emit</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>system wakeup events.  Save in main memory the device settings to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>used by @restore() during the subsequent resume from hibernation or by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the subsequent @thaw(), if the creation of the image or the restoration</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of main memory contents from it fails.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @thaw: Hibernation-specific, executed after creating a hibernation image OR</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if the creation of the image fails.  Also executed after a failing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>attempt to restore the contents of main memory from such an image.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Undo the changes made by the preceding @freeze(), so the device can be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>operated in the same way as immediately before the call to @freeze().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @poweroff: Hibernation-specific, executed after saving a hibernation image.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Quiesce the device, put it into a low power state appropriate for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>upcoming system state (such as PCI_D3hot), and enable wakeup events as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>appropriate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @restore: Hibernation-specific, executed after restoring the contents of main</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>memory from a hibernation image.  Driver starts working again,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>responding to hardware events and software requests.  Drivers may NOT</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>make ANY assumptions about the hardware state right prior to @restore().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On most platforms, there are no restrictions on availability of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>resources like clocks during @restore().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @suspend_noirq: Complete the operations of -&gt;suspend() by carrying out any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>actions required for suspending the device that need interrupts to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disabled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @resume_noirq: Prepare for the execution of -&gt;resume() by carrying out any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>actions required for resuming the device that need interrupts to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disabled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @freeze_noirq: Complete the operations of -&gt;freeze() by carrying out any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>actions required for freezing the device that need interrupts to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disabled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @thaw_noirq: Prepare for the execution of -&gt;thaw() by carrying out any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>actions required for thawing the device that need interrupts to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disabled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @poweroff_noirq: Complete the operations of -&gt;poweroff() by carrying out any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>actions required for handling the device that need interrupts to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disabled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @restore_noirq: Prepare for the execution of -&gt;restore() by carrying out any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>actions required for restoring the operations of the device that need</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interrupts to be disabled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All of the above callbacks, except for @complete(), return error codes.</span>", 
"<span class=\"comment\"> * However, the error codes returned by the resume operations, @resume(),</span>", 
"<span class=\"comment\"> * @thaw(), @restore(), @resume_noirq(), @thaw_noirq(), and @restore_noirq() do</span>", 
"<span class=\"comment\"> * not cause the PM core to abort the resume transition during which they are</span>", 
"<span class=\"comment\"> * returned.  The error codes returned in that cases are only printed by the PM</span>", 
"<span class=\"comment\"> * core to the system logs for debugging purposes.  Still, it is recommended</span>", 
"<span class=\"comment\"> * that drivers only return error codes from their resume methods in case of an</span>", 
"<span class=\"comment\"> * unrecoverable failure (i.e. when the device being handled refuses to resume</span>", 
"<span class=\"comment\"> * and becomes unusable) to allow us to modify the PM core in the future, so</span>", 
"<span class=\"comment\"> * that it can avoid attempting to handle devices that failed to resume and</span>", 
"<span class=\"comment\"> * their children.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is allowed to unregister devices while the above callbacks are being</span>", 
"<span class=\"comment\"> * executed.  However, it is not allowed to unregister a device from within any</span>", 
"<span class=\"comment\"> * of its own callbacks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There also are the following callbacks related to run-time power management</span>", 
"<span class=\"comment\"> * of devices:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @runtime_suspend: Prepare the device for a condition in which it won't be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>able to communicate with the CPU(s) and RAM due to power management.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This need not mean that the device should be put into a low power state.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>For example, if the device is behind a link which is about to be turned</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>off, the device may remain at full power.  If the device does go to low</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>power and is capable of generating run-time wake-up events, remote</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>wake-up (i.e., a hardware mechanism allowing the device to request a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>change of its power state via a wake-up event, such as PCI PME) should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be enabled for it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @runtime_resume: Put the device into the fully active state in response to a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>wake-up event generated by hardware or at the request of software.  If</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>necessary, put the device into the full power state and restore its</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>registers, so that it is fully operational.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @runtime_idle: Device appears to be inactive and it might be put into a low</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>power state if all of the necessary conditions are satisfied.  Check</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>these conditions and handle the device as appropriate, possibly queueing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a suspend request for it.  The return value is ignored by the PM core.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#prepare\">prepare</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#complete\">complete</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#suspend\">suspend</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#resume\">resume</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#freeze\">freeze</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#thaw\">thaw</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#poweroff\">poweroff</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#restore\">restore</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#suspend_noirq\">suspend_noirq</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#resume_noirq\">resume_noirq</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#freeze_noirq\">freeze_noirq</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#thaw_noirq\">thaw_noirq</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#poweroff_noirq\">poweroff_noirq</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#restore_noirq\">restore_noirq</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#runtime_suspend\">runtime_suspend</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#runtime_resume\">runtime_resume</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#runtime_idle\">runtime_idle</a>)(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SET_SYSTEM_SLEEP_PM_OPS\">SET_SYSTEM_SLEEP_PM_OPS</a>(<a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, <a class=\"id\" href=\"#resume_fn\">resume_fn</a>) \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#suspend\">suspend</a> = <a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a> = <a class=\"id\" href=\"#resume_fn\">resume_fn</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#freeze\">freeze</a> = <a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#thaw\">thaw</a> = <a class=\"id\" href=\"#resume_fn\">resume_fn</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poweroff\">poweroff</a> = <a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#restore\">restore</a> = <a class=\"id\" href=\"#resume_fn\">resume_fn</a>,", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SET_SYSTEM_SLEEP_PM_OPS\">SET_SYSTEM_SLEEP_PM_OPS</a>(<a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, <a class=\"id\" href=\"#resume_fn\">resume_fn</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_RUNTIME\">CONFIG_PM_RUNTIME</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SET_RUNTIME_PM_OPS\">SET_RUNTIME_PM_OPS</a>(<a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, <a class=\"id\" href=\"#resume_fn\">resume_fn</a>, <a class=\"id\" href=\"#idle_fn\">idle_fn</a>) \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#runtime_suspend\">runtime_suspend</a> = <a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#runtime_resume\">runtime_resume</a> = <a class=\"id\" href=\"#resume_fn\">resume_fn</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#runtime_idle\">runtime_idle</a> = <a class=\"id\" href=\"#idle_fn\">idle_fn</a>,", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SET_RUNTIME_PM_OPS\">SET_RUNTIME_PM_OPS</a>(<a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, <a class=\"id\" href=\"#resume_fn\">resume_fn</a>, <a class=\"id\" href=\"#idle_fn\">idle_fn</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use this if you want to use the same suspend and resume callbacks for suspend</span>", 
"<span class=\"comment\"> * to RAM and hibernation.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIMPLE_DEV_PM_OPS\">SIMPLE_DEV_PM_OPS</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, <a class=\"id\" href=\"#resume_fn\">resume_fn</a>) \\", 
"const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> <a class=\"id\" href=\"#name\">name</a> = { \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_SYSTEM_SLEEP_PM_OPS\">SET_SYSTEM_SLEEP_PM_OPS</a>(<a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, <a class=\"id\" href=\"#resume_fn\">resume_fn</a>) \\", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use this for defining a set of PM operations to be used in all situations</span>", 
"<span class=\"comment\"> * (sustem suspend, hibernation or runtime PM).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UNIVERSAL_DEV_PM_OPS\">UNIVERSAL_DEV_PM_OPS</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, <a class=\"id\" href=\"#resume_fn\">resume_fn</a>, <a class=\"id\" href=\"#idle_fn\">idle_fn</a>) \\", 
"const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> <a class=\"id\" href=\"#name\">name</a> = { \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_SYSTEM_SLEEP_PM_OPS\">SET_SYSTEM_SLEEP_PM_OPS</a>(<a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, <a class=\"id\" href=\"#resume_fn\">resume_fn</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_RUNTIME_PM_OPS\">SET_RUNTIME_PM_OPS</a>(<a class=\"id\" href=\"#suspend_fn\">suspend_fn</a>, <a class=\"id\" href=\"#resume_fn\">resume_fn</a>, <a class=\"id\" href=\"#idle_fn\">idle_fn</a>) \\", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use this for subsystems (bus types, device types, device classes) that don't</span>", 
"<span class=\"comment\"> * need any special suspend/resume handling in addition to invoking the PM</span>", 
"<span class=\"comment\"> * callbacks provided by device drivers supporting both the system sleep PM and</span>", 
"<span class=\"comment\"> * runtime PM, make the pm member point to generic_subsys_pm_ops.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_OPS\">CONFIG_PM_OPS</a>", 
"extern struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> <a class=\"id\" href=\"#generic_subsys_pm_ops\">generic_subsys_pm_ops</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GENERIC_SUBSYS_PM_OPS\">GENERIC_SUBSYS_PM_OPS</a><span class=\"ts\"/>(&amp;<a class=\"id\" href=\"#generic_subsys_pm_ops\">generic_subsys_pm_ops</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GENERIC_SUBSYS_PM_OPS\">GENERIC_SUBSYS_PM_OPS</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * PM_EVENT_ messages</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The following PM_EVENT_ messages are defined for the internal use of the PM</span>", 
"<span class=\"comment\"> * core, in order to provide a mechanism allowing the high level suspend and</span>", 
"<span class=\"comment\"> * hibernation code to convey the necessary information to the device PM core</span>", 
"<span class=\"comment\"> * code:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ON<span class=\"ts\"/><span class=\"ts\"/>No transition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FREEZE <span class=\"ts\"/>System is going to hibernate, call -&gt;prepare() and -&gt;freeze()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>for all devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SUSPEND<span class=\"ts\"/>System is going to suspend, call -&gt;prepare() and -&gt;suspend()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>for all devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * HIBERNATE<span class=\"ts\"/>Hibernation image has been saved, call -&gt;prepare() and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>-&gt;poweroff() for all devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * QUIESCE<span class=\"ts\"/>Contents of main memory are going to be restored from a (loaded)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>hibernation image, call -&gt;prepare() and -&gt;freeze() for all</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RESUME<span class=\"ts\"/>System is resuming, call -&gt;resume() and -&gt;complete() for all</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * THAW<span class=\"ts\"/><span class=\"ts\"/>Hibernation image has been created, call -&gt;thaw() and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>-&gt;complete() for all devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RESTORE<span class=\"ts\"/>Contents of main memory have been restored from a hibernation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>image, call -&gt;restore() and -&gt;complete() for all devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RECOVER<span class=\"ts\"/>Creation of a hibernation image or restoration of the main</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>memory contents from a hibernation image has failed, call</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>-&gt;thaw() and -&gt;complete() for all devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The following PM_EVENT_ messages are defined for internal use by</span>", 
"<span class=\"comment\"> * kernel subsystems.  They are never issued by the PM core.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * USER_SUSPEND<span class=\"ts\"/><span class=\"ts\"/>Manual selective suspend was issued by userspace.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * USER_RESUME<span class=\"ts\"/><span class=\"ts\"/>Manual selective resume was issued by userspace.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * REMOTE_WAKEUP<span class=\"ts\"/>Remote-wakeup request was received from the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * AUTO_SUSPEND<span class=\"ts\"/><span class=\"ts\"/>Automatic (device idle) runtime suspend was</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>initiated by the subsystem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * AUTO_RESUME<span class=\"ts\"/><span class=\"ts\"/>Automatic (device needed) runtime resume was</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>requested by a driver.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_ON\">PM_EVENT_ON</a><span class=\"ts\"/><span class=\"ts\"/>0x0000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_FREEZE\">PM_EVENT_FREEZE</a> <span class=\"ts\"/>0x0001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_SUSPEND\">PM_EVENT_SUSPEND</a><span class=\"ts\"/>0x0002", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_HIBERNATE\">PM_EVENT_HIBERNATE</a><span class=\"ts\"/>0x0004", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_QUIESCE\">PM_EVENT_QUIESCE</a><span class=\"ts\"/>0x0008", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_RESUME\">PM_EVENT_RESUME</a><span class=\"ts\"/><span class=\"ts\"/>0x0010", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_THAW\">PM_EVENT_THAW</a><span class=\"ts\"/><span class=\"ts\"/>0x0020", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_RESTORE\">PM_EVENT_RESTORE</a><span class=\"ts\"/>0x0040", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_RECOVER\">PM_EVENT_RECOVER</a><span class=\"ts\"/>0x0080", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_USER\">PM_EVENT_USER</a><span class=\"ts\"/><span class=\"ts\"/>0x0100", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_REMOTE\">PM_EVENT_REMOTE</a><span class=\"ts\"/><span class=\"ts\"/>0x0200", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_AUTO\">PM_EVENT_AUTO</a><span class=\"ts\"/><span class=\"ts\"/>0x0400", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_SLEEP\">PM_EVENT_SLEEP</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#PM_EVENT_SUSPEND\">PM_EVENT_SUSPEND</a> | <a class=\"id\" href=\"#PM_EVENT_HIBERNATE\">PM_EVENT_HIBERNATE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_USER_SUSPEND\">PM_EVENT_USER_SUSPEND</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PM_EVENT_USER\">PM_EVENT_USER</a> | <a class=\"id\" href=\"#PM_EVENT_SUSPEND\">PM_EVENT_SUSPEND</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_USER_RESUME\">PM_EVENT_USER_RESUME</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PM_EVENT_USER\">PM_EVENT_USER</a> | <a class=\"id\" href=\"#PM_EVENT_RESUME\">PM_EVENT_RESUME</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_REMOTE_RESUME\">PM_EVENT_REMOTE_RESUME</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PM_EVENT_REMOTE\">PM_EVENT_REMOTE</a> | <a class=\"id\" href=\"#PM_EVENT_RESUME\">PM_EVENT_RESUME</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_AUTO_SUSPEND\">PM_EVENT_AUTO_SUSPEND</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PM_EVENT_AUTO\">PM_EVENT_AUTO</a> | <a class=\"id\" href=\"#PM_EVENT_SUSPEND\">PM_EVENT_SUSPEND</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_AUTO_RESUME\">PM_EVENT_AUTO_RESUME</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PM_EVENT_AUTO\">PM_EVENT_AUTO</a> | <a class=\"id\" href=\"#PM_EVENT_RESUME\">PM_EVENT_RESUME</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_ON\">PMSG_ON</a><span class=\"ts\"/><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>){ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_ON\">PM_EVENT_ON</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_FREEZE\">PMSG_FREEZE</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>){ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_FREEZE\">PM_EVENT_FREEZE</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_QUIESCE\">PMSG_QUIESCE</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>){ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_QUIESCE\">PM_EVENT_QUIESCE</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_SUSPEND\">PMSG_SUSPEND</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>){ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_SUSPEND\">PM_EVENT_SUSPEND</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_HIBERNATE\">PMSG_HIBERNATE</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>){ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_HIBERNATE\">PM_EVENT_HIBERNATE</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_RESUME\">PMSG_RESUME</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>){ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_RESUME\">PM_EVENT_RESUME</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_THAW\">PMSG_THAW</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>){ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_THAW\">PM_EVENT_THAW</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_RESTORE\">PMSG_RESTORE</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>){ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_RESTORE\">PM_EVENT_RESTORE</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_RECOVER\">PMSG_RECOVER</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>){ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_RECOVER\">PM_EVENT_RECOVER</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_USER_SUSPEND\">PMSG_USER_SUSPEND</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_USER_SUSPEND\">PM_EVENT_USER_SUSPEND</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_USER_RESUME\">PMSG_USER_RESUME</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_USER_RESUME\">PM_EVENT_USER_RESUME</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_REMOTE_RESUME\">PMSG_REMOTE_RESUME</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_REMOTE_RESUME\">PM_EVENT_REMOTE_RESUME</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_AUTO_SUSPEND\">PMSG_AUTO_SUSPEND</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_AUTO_SUSPEND\">PM_EVENT_AUTO_SUSPEND</a>, })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMSG_AUTO_RESUME\">PMSG_AUTO_RESUME</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#pm_message\">pm_message</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#PM_EVENT_AUTO_RESUME\">PM_EVENT_AUTO_RESUME</a>, })", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Device power management states</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These state labels are used internally by the PM core to indicate the current</span>", 
"<span class=\"comment\"> * status of a device with respect to the PM core operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DPM_ON<span class=\"ts\"/><span class=\"ts\"/>Device is regarded as operational.  Set this way</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>initially and when -&gt;complete() is about to be called.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Also set when -&gt;prepare() fails.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DPM_PREPARING<span class=\"ts\"/>Device is going to be prepared for a PM transition.  Set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>when -&gt;prepare() is about to be called.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DPM_RESUMING<span class=\"ts\"/><span class=\"ts\"/>Device is going to be resumed.  Set when -&gt;resume(),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-&gt;thaw(), or -&gt;restore() is about to be called.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DPM_SUSPENDING<span class=\"ts\"/>Device has been prepared for a power transition.  Set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>when -&gt;prepare() has just succeeded.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DPM_OFF<span class=\"ts\"/><span class=\"ts\"/>Device is regarded as inactive.  Set immediately after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-&gt;suspend(), -&gt;freeze(), or -&gt;poweroff() has succeeded.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Also set when -&gt;resume()_noirq, -&gt;thaw_noirq(), or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-&gt;restore_noirq() is about to be called.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DPM_OFF_IRQ<span class=\"ts\"/><span class=\"ts\"/>Device is in a \"deep sleep\".  Set immediately after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-&gt;suspend_noirq(), -&gt;freeze_noirq(), or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-&gt;poweroff_noirq() has just succeeded.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum <a class=\"id\" href=\"#dpm_state\">dpm_state</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPM_INVALID\">DPM_INVALID</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPM_ON\">DPM_ON</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPM_PREPARING\">DPM_PREPARING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPM_RESUMING\">DPM_RESUMING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPM_SUSPENDING\">DPM_SUSPENDING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPM_OFF\">DPM_OFF</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPM_OFF_IRQ\">DPM_OFF_IRQ</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Device run-time power management status.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These status labels are used internally by the PM core to indicate the</span>", 
"<span class=\"comment\"> * current status of a device with respect to the PM core operations.  They do</span>", 
"<span class=\"comment\"> * not reflect the actual power state of the device or its status as seen by the</span>", 
"<span class=\"comment\"> * driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RPM_ACTIVE<span class=\"ts\"/><span class=\"ts\"/>Device is fully operational.  Indicates that the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>bus type's -&gt;runtime_resume() callback has completed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>successfully.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RPM_SUSPENDED<span class=\"ts\"/>Device bus type's -&gt;runtime_suspend() callback has</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>completed successfully.  The device is regarded as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>suspended.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RPM_RESUMING<span class=\"ts\"/><span class=\"ts\"/>Device bus type's -&gt;runtime_resume() callback is being</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>executed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RPM_SUSPENDING<span class=\"ts\"/>Device bus type's -&gt;runtime_suspend() callback is being</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>executed.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum <a class=\"id\" href=\"#rpm_status\">rpm_status</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPM_ACTIVE\">RPM_ACTIVE</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPM_RESUMING\">RPM_RESUMING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPM_SUSPENDED\">RPM_SUSPENDED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPM_SUSPENDING\">RPM_SUSPENDING</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Device run-time power management request types.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RPM_REQ_NONE<span class=\"ts\"/><span class=\"ts\"/>Do nothing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RPM_REQ_IDLE<span class=\"ts\"/><span class=\"ts\"/>Run the device bus type's -&gt;runtime_idle() callback</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RPM_REQ_SUSPEND<span class=\"ts\"/>Run the device bus type's -&gt;runtime_suspend() callback</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RPM_REQ_RESUME<span class=\"ts\"/>Run the device bus type's -&gt;runtime_resume() callback</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum <a class=\"id\" href=\"#rpm_request\">rpm_request</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPM_REQ_NONE\">RPM_REQ_NONE</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPM_REQ_IDLE\">RPM_REQ_IDLE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPM_REQ_SUSPEND\">RPM_REQ_SUSPEND</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RPM_REQ_RESUME\">RPM_REQ_RESUME</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dev_pm_info\">dev_pm_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_message_t\">pm_message_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power_state\">power_state</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#can_wakeup\">can_wakeup</a>:1;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#should_wakeup\">should_wakeup</a>:1;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#async_suspend\">async_suspend</a>:1;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#dpm_state\">dpm_state</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Owned by the PM core */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a><span class=\"ts\"/><a class=\"id\" href=\"#completion\">completion</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wakeup_count\">wakeup_count</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_RUNTIME\">CONFIG_PM_RUNTIME</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a><span class=\"ts\"/><a class=\"id\" href=\"#suspend_timer\">suspend_timer</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_expires\">timer_expires</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a><span class=\"ts\"/><a class=\"id\" href=\"#wait_queue\">wait_queue</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usage_count\">usage_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_count\">child_count</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_depth\">disable_depth</a>:3;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ignore_children\">ignore_children</a>:1;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idle_notification\">idle_notification</a>:1;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_pending\">request_pending</a>:1;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deferred_resume\">deferred_resume</a>:1;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#run_wake\">run_wake</a>:1;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#runtime_auto\">runtime_auto</a>:1;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#rpm_request\">rpm_request</a><span class=\"ts\"/><a class=\"id\" href=\"#request\">request</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#rpm_status\">rpm_status</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#runtime_status\">runtime_status</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#runtime_error\">runtime_error</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active_jiffies\">active_jiffies</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#suspended_jiffies\">suspended_jiffies</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#accounting_timestamp\">accounting_timestamp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"extern void <a class=\"id\" href=\"#update_pm_runtime_accounting\">update_pm_runtime_accounting</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The PM_EVENT_ messages are also used by drivers implementing the legacy</span>", 
"<span class=\"comment\"> * suspend framework, based on the -&gt;suspend() and -&gt;resume() callbacks common</span>", 
"<span class=\"comment\"> * for suspend and hibernation transitions, according to the rules below.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Necessary, because several drivers use PM_EVENT_PRETHAW */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_EVENT_PRETHAW\">PM_EVENT_PRETHAW</a> <a class=\"id\" href=\"#PM_EVENT_QUIESCE\">PM_EVENT_QUIESCE</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * One transition is triggered by resume(), after a suspend() call; the</span>", 
"<span class=\"comment\"> * message is implicit:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ON<span class=\"ts\"/><span class=\"ts\"/>Driver starts working again, responding to hardware events</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>and software requests.  The hardware may have gone through</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>a power-off reset, or it may have maintained state from the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>previous suspend() which the driver will rely on while</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>resuming.  On most platforms, there are no restrictions on</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>availability of resources like clocks during resume().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Other transitions are triggered by messages sent using suspend().  All</span>", 
"<span class=\"comment\"> * these transitions quiesce the driver, so that I/O queues are inactive.</span>", 
"<span class=\"comment\"> * That commonly entails turning off IRQs and DMA; there may be rules</span>", 
"<span class=\"comment\"> * about how to quiesce that are specific to the bus or the device's type.</span>", 
"<span class=\"comment\"> * (For example, network drivers mark the link state.)  Other details may</span>", 
"<span class=\"comment\"> * differ according to the message:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SUSPEND<span class=\"ts\"/>Quiesce, enter a low power device state appropriate for</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>the upcoming system state (such as PCI_D3hot), and enable</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>wakeup events as appropriate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * HIBERNATE<span class=\"ts\"/>Enter a low power device state appropriate for the hibernation</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>state (eg. ACPI S4) and enable wakeup events as appropriate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FREEZE<span class=\"ts\"/>Quiesce operations so that a consistent image can be saved;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>but do NOT otherwise enter a low power device state, and do</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>NOT emit system wakeup events.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PRETHAW<span class=\"ts\"/>Quiesce as if for FREEZE; additionally, prepare for restoring</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>the system from a snapshot taken after an earlier FREEZE.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>Some drivers will need to reset their hardware state instead</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>of preserving it, to ensure that it's never mistaken for the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>state which that earlier snapshot had set up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A minimally power-aware driver treats all messages as SUSPEND, fully</span>", 
"<span class=\"comment\"> * reinitializes its device during resume() -- whether or not it was reset</span>", 
"<span class=\"comment\"> * during the suspend/resume cycle -- and can't issue wakeup events.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * More power-aware drivers may also use low power states at runtime as</span>", 
"<span class=\"comment\"> * well as during system sleep states like PM_SUSPEND_STANDBY.  They may</span>", 
"<span class=\"comment\"> * be able to use wakeup events to exit from runtime low-power states,</span>", 
"<span class=\"comment\"> * or from system low-power states such as standby or suspend-to-RAM.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"extern void <a class=\"id\" href=\"#device_pm_lock\">device_pm_lock</a>(void);", 
"extern int <a class=\"id\" href=\"#sysdev_resume\">sysdev_resume</a>(void);", 
"extern void <a class=\"id\" href=\"#dpm_resume_noirq\">dpm_resume_noirq</a>(<a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>);", 
"extern void <a class=\"id\" href=\"#dpm_resume_end\">dpm_resume_end</a>(<a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>);", 
"", 
"extern void <a class=\"id\" href=\"#device_pm_unlock\">device_pm_unlock</a>(void);", 
"extern int <a class=\"id\" href=\"#sysdev_suspend\">sysdev_suspend</a>(<a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>);", 
"extern int <a class=\"id\" href=\"#dpm_suspend_noirq\">dpm_suspend_noirq</a>(<a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>);", 
"extern int <a class=\"id\" href=\"#dpm_suspend_start\">dpm_suspend_start</a>(<a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>);", 
"", 
"extern void <a class=\"id\" href=\"#__suspend_report_result\">__suspend_report_result</a>(const char *<a class=\"id\" href=\"#function\">function</a>, void *<a class=\"id\" href=\"#fn\">fn</a>, int <a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#suspend_report_result\">suspend_report_result</a>(<a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#ret\">ret</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__suspend_report_result\">__suspend_report_result</a>(<a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#ret\">ret</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"extern void <a class=\"id\" href=\"#device_pm_wait_for_dev\">device_pm_wait_for_dev</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#sub\">sub</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"comment\">/* drivers/base/power/wakeup.c */</span>", 
"extern void <a class=\"id\" href=\"#pm_wakeup_event\">pm_wakeup_event</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#msec\">msec</a>);", 
"extern void <a class=\"id\" href=\"#pm_stay_awake\">pm_stay_awake</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern void <a class=\"id\" href=\"#pm_relax\">pm_relax</a>(void);", 
"#else <span class=\"comment\">/* !CONFIG_PM_SLEEP */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#device_pm_lock\">device_pm_lock</a>() do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#device_pm_unlock\">device_pm_unlock</a>() do {} while (0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#dpm_suspend_start\">dpm_suspend_start</a>(<a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#suspend_report_result\">suspend_report_result</a>(<a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#ret\">ret</a>)<span class=\"ts\"/><span class=\"ts\"/>do {} while (0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#device_pm_wait_for_dev\">device_pm_wait_for_dev</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#b\">b</a>) {}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pm_wakeup_event\">pm_wakeup_event</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#msec\">msec</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pm_stay_awake\">pm_stay_awake</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pm_relax\">pm_relax</a>(void) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_PM_SLEEP */</span>", 
"", 
"<span class=\"comment\">/* How to reorder dpm_list after device_move() */</span>", 
"enum <a class=\"id\" href=\"#dpm_order\">dpm_order</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPM_ORDER_NONE\">DPM_ORDER_NONE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPM_ORDER_DEV_AFTER_PARENT\">DPM_ORDER_DEV_AFTER_PARENT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPM_ORDER_PARENT_BEFORE_DEV\">DPM_ORDER_PARENT_BEFORE_DEV</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPM_ORDER_DEV_LAST\">DPM_ORDER_DEV_LAST</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Global Power Management flags</span>", 
"<span class=\"comment\"> * Used to keep APM and ACPI from both being active</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#pm_flags\">pm_flags</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_APM\">PM_APM</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PM_ACPI\">PM_ACPI</a><span class=\"ts\"/>2", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_PM_H */</span>", 
];
xr_frag_insert('l/64/e4ebdfcc81c51414178cea551cd1ad70a78b3e.xr', __xr_tmp);
