var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_head_cache\">jbd2_journal_head_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * journal_head splicing and dicing</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#journal_alloc_journal_head\">journal_alloc_journal_head</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#last_warning\">last_warning</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_JBD2_DEBUG\">CONFIG_JBD2_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#nr_journal_heads\">nr_journal_heads</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#jbd2_journal_head_cache\">jbd2_journal_head_cache</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(1, \"out of memory for journal_head\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#last_warning\">last_warning</a> + 5*<a class=\"id\" href=\"#HZ\">HZ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"ENOMEM in %s, retrying.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_warning\">last_warning</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#yield\">yield</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#jbd2_journal_head_cache\">jbd2_journal_head_cache</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#journal_free_journal_head\">journal_free_journal_head</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_JBD2_DEBUG\">CONFIG_JBD2_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#nr_journal_heads\">nr_journal_heads</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#JBD2_POISON_FREE\">JBD2_POISON_FREE</a>, sizeof(*<a class=\"id\" href=\"#jh\">jh</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#jbd2_journal_head_cache\">jbd2_journal_head_cache</a>, <a class=\"id\" href=\"#jh\">jh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A journal_head is attached to a buffer_head whenever JBD has an</span>", 
"<span class=\"comment\"> * interest in the buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Whenever a buffer has an attached journal_head, its -&gt;b_state:BH_JBD bit</span>", 
"<span class=\"comment\"> * is set.  This bit is tested in core kernel code where we need to take</span>", 
"<span class=\"comment\"> * JBD-specific actions.  Testing the zeroness of -&gt;b_private is not reliable</span>", 
"<span class=\"comment\"> * there.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When a buffer has its BH_JBD bit set, its -&gt;b_count is elevated by one.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When a buffer has its BH_JBD bit set it is immune from being released by</span>", 
"<span class=\"comment\"> * core kernel code, mainly via -&gt;b_count.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A journal_head may be detached from its buffer_head when the journal_head's</span>", 
"<span class=\"comment\"> * b_transaction, b_cp_transaction and b_next_transaction pointers are NULL.</span>", 
"<span class=\"comment\"> * Various places in JBD call jbd2_journal_remove_journal_head() to indicate that the</span>", 
"<span class=\"comment\"> * journal_head can be dropped if needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Various places in the kernel want to attach a journal_head to a buffer_head</span>", 
"<span class=\"comment\"> * _before_ attaching the journal_head to a transaction.  To protect the</span>", 
"<span class=\"comment\"> * journal_head in this situation, jbd2_journal_add_journal_head elevates the</span>", 
"<span class=\"comment\"> * journal_head's b_jcount refcount by one.  The caller must call</span>", 
"<span class=\"comment\"> * jbd2_journal_put_journal_head() to undo this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So the typical usage would be:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(Attach a journal_head if needed.  Increments b_jcount)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct journal_head *jh = jbd2_journal_add_journal_head(bh);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>...</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>jh-&gt;b_transaction = xxx;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>jbd2_journal_put_journal_head(jh);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Now, the journal_head's b_jcount is zero, but it is safe from being released</span>", 
"<span class=\"comment\"> * because it has a non-zero b_transaction.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Give a buffer_head a journal_head.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Doesn't need the journal lock.</span>", 
"<span class=\"comment\"> * May sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jbd2_journal_add_journal_head\">jbd2_journal_add_journal_head</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#new_jh\">new_jh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_jh\">new_jh</a> = <a class=\"id\" href=\"#journal_alloc_journal_head\">journal_alloc_journal_head</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#new_jh\">new_jh</a>, 0, sizeof(*<a class=\"id\" href=\"#new_jh\">new_jh</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_journal_head\">jbd_lock_bh_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_BH\">J_ASSERT_BH</a>(<a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_count\">b_count</a>) &gt; 0) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_page\">b_page</a> && <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_page\">b_page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_jh\">new_jh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_journal_head\">jbd_unlock_bh_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#new_jh\">new_jh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_jh\">new_jh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We consumed it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_jbd\">set_buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_private\">b_private</a> = <a class=\"id\" href=\"#jh\">jh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_bh\">b_bh</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"added journal_head\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jcount\">b_jcount</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_journal_head\">jbd_unlock_bh_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_jh\">new_jh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_free_journal_head\">journal_free_journal_head</a>(<a class=\"id\" href=\"#new_jh\">new_jh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_private\">b_private</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Grab a ref against this buffer_head's journal_head.  If it ended up not</span>", 
"<span class=\"comment\"> * having a journal_head, return NULL</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jbd2_journal_grab_journal_head\">jbd2_journal_grab_journal_head</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_journal_head\">jbd_lock_bh_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jcount\">b_jcount</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_journal_head\">jbd_unlock_bh_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#jh\">jh</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__journal_remove_journal_head\">__journal_remove_journal_head</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jcount\">b_jcount</a> >= 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jcount\">b_jcount</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_cp_transaction\">b_cp_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#BJ_None\">BJ_None</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_BH\">J_ASSERT_BH</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_BH\">J_ASSERT_BH</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>) == <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"remove journal_head\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_frozen_data\">b_frozen_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: freeing \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"b_frozen_data\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_free\">jbd2_free</a>(<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_frozen_data\">b_frozen_data</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: freeing \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"b_committed_data\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_free\">jbd2_free</a>(<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_private\">b_private</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_bh\">b_bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"comment\">/* debug, really */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_jbd\">clear_buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_free_journal_head\">journal_free_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"journal_head was locked\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * jbd2_journal_remove_journal_head(): if the buffer isn't attached to a transaction</span>", 
"<span class=\"comment\"> * and has a zero b_jcount then remove and release its journal_head.   If we did</span>", 
"<span class=\"comment\"> * see that the buffer is not used by any transaction we also \"logically\"</span>", 
"<span class=\"comment\"> * decrement -&gt;b_count.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We in fact take an additional increment on -&gt;b_count as a convenience,</span>", 
"<span class=\"comment\"> * because the caller usually wants to do additional things with the bh</span>", 
"<span class=\"comment\"> * after calling here.</span>", 
"<span class=\"comment\"> * The caller of jbd2_journal_remove_journal_head() *must* run __brelse(bh) at some</span>", 
"<span class=\"comment\"> * time.  Once the caller has run __brelse(), the buffer is eligible for</span>", 
"<span class=\"comment\"> * reaping by try_to_free_buffers().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#jbd2_journal_remove_journal_head\">jbd2_journal_remove_journal_head</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_journal_head\">jbd_lock_bh_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__journal_remove_journal_head\">__journal_remove_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_journal_head\">jbd_unlock_bh_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Drop a reference on the passed journal_head.  If it fell to zero then try to</span>", 
"<span class=\"comment\"> * release the journal_head from the buffer_head.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#jbd2_journal_put_journal_head\">jbd2_journal_put_journal_head</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_journal_head\">jbd_lock_bh_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jcount\">b_jcount</a> &gt; 0);", 
"<span class=\"ts\"/>--<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jcount\">b_jcount</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jcount\">b_jcount</a> && !<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_remove_journal_head\">__journal_remove_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_journal_head\">jbd_unlock_bh_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize jbd inode head</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#jbd2_journal_init_jbd_inode\">jbd2_journal_init_jbd_inode</a>(struct <a class=\"id\" href=\"#jbd2_inode\">jbd2_inode</a> *<a class=\"id\" href=\"#jinode\">jinode</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_transaction\">i_transaction</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_next_transaction\">i_next_transaction</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_vfs_inode\">i_vfs_inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function to be called before we start removing inode from memory (i.e.,</span>", 
"<span class=\"comment\"> * clear_inode() is a fine place to be called from). It removes inode from</span>", 
"<span class=\"comment\"> * transaction's lists.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#jbd2_journal_release_jbd_inode\">jbd2_journal_release_jbd_inode</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#jbd2_inode\">jbd2_inode</a> *<a class=\"id\" href=\"#jinode\">jinode</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#journal\">journal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Is commit writing out inode - we have to wait */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#JI_COMMIT_RUNNING\">JI_COMMIT_RUNNING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wq\">wq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT_BIT\">DEFINE_WAIT_BIT</a>(<a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a>, <a class=\"id\" href=\"#__JI_COMMIT_RUNNING\">__JI_COMMIT_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#bit_waitqueue\">bit_waitqueue</a>(&amp;<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a>, <a class=\"id\" href=\"#__JI_COMMIT_RUNNING\">__JI_COMMIT_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_transaction\">i_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_transaction\">i_transaction</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * debugfs tunables</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_JBD2_DEBUG\">CONFIG_JBD2_DEBUG</a>", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#jbd2_journal_enable_debug\">jbd2_journal_enable_debug</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#jbd2_journal_enable_debug\">jbd2_journal_enable_debug</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#JBD2_DEBUG_NAME\">JBD2_DEBUG_NAME</a> \"jbd2-debug\"", 
"", 
"static struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#jbd2_debugfs_dir\">jbd2_debugfs_dir</a>;", 
"static struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#jbd2_debug\">jbd2_debug</a>;", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#jbd2_create_debugfs_entry\">jbd2_create_debugfs_entry</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_debugfs_dir\">jbd2_debugfs_dir</a> = <a class=\"id\" href=\"#debugfs_create_dir\">debugfs_create_dir</a>(\"jbd2\", <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jbd2_debugfs_dir\">jbd2_debugfs_dir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_debug\">jbd2_debug</a> = <a class=\"id\" href=\"#debugfs_create_u8\">debugfs_create_u8</a>(<a class=\"id\" href=\"#JBD2_DEBUG_NAME\">JBD2_DEBUG_NAME</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#jbd2_debugfs_dir\">jbd2_debugfs_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#jbd2_journal_enable_debug\">jbd2_journal_enable_debug</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#jbd2_remove_debugfs_entry\">jbd2_remove_debugfs_entry</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#jbd2_debug\">jbd2_debug</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#jbd2_debugfs_dir\">jbd2_debugfs_dir</a>);", 
"}", 
"", 
"#else", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#jbd2_create_debugfs_entry\">jbd2_create_debugfs_entry</a>(void)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#jbd2_remove_debugfs_entry\">jbd2_remove_debugfs_entry</a>(void)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#JBD2_STATS_PROC_NAME\">JBD2_STATS_PROC_NAME</a> \"fs/jbd2\"", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#jbd2_create_jbd_stats_proc_entry\">jbd2_create_jbd_stats_proc_entry</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_jbd2_stats\">proc_jbd2_stats</a> = <a class=\"id\" href=\"#proc_mkdir\">proc_mkdir</a>(<a class=\"id\" href=\"#JBD2_STATS_PROC_NAME\">JBD2_STATS_PROC_NAME</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#jbd2_remove_jbd_stats_proc_entry\">jbd2_remove_jbd_stats_proc_entry</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#proc_jbd2_stats\">proc_jbd2_stats</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_proc_entry\">remove_proc_entry</a>(<a class=\"id\" href=\"#JBD2_STATS_PROC_NAME\">JBD2_STATS_PROC_NAME</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#jbd2_create_jbd_stats_proc_entry\">jbd2_create_jbd_stats_proc_entry</a>() do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#jbd2_remove_jbd_stats_proc_entry\">jbd2_remove_jbd_stats_proc_entry</a>() do {} while (0)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#jbd2_handle_cache\">jbd2_handle_cache</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#journal_init_handle_cache\">journal_init_handle_cache</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_handle_cache\">jbd2_handle_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"jbd2_journal_handle\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#handle_t\">handle_t</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* offset */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_TEMPORARY\">SLAB_TEMPORARY</a>,<span class=\"ts\"/><span class=\"comment\">/* flags */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ctor */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jbd2_handle_cache\">jbd2_handle_cache</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"JBD: failed to create handle cache\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#jbd2_journal_destroy_handle_cache\">jbd2_journal_destroy_handle_cache</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jbd2_handle_cache\">jbd2_handle_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#jbd2_handle_cache\">jbd2_handle_cache</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Module startup and shutdown</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#journal_init_caches\">journal_init_caches</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#jbd2_journal_init_revoke_caches\">jbd2_journal_init_revoke_caches</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#journal_init_jbd2_journal_head_cache\">journal_init_jbd2_journal_head_cache</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#journal_init_handle_cache\">journal_init_handle_cache</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#jbd2_journal_destroy_caches\">jbd2_journal_destroy_caches</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_destroy_revoke_caches\">jbd2_journal_destroy_revoke_caches</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_destroy_jbd2_journal_head_cache\">jbd2_journal_destroy_jbd2_journal_head_cache</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_destroy_handle_cache\">jbd2_journal_destroy_handle_cache</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_destroy_slabs\">jbd2_journal_destroy_slabs</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#journal_init\">journal_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(sizeof(struct <a class=\"id\" href=\"#journal_superblock_s\">journal_superblock_s</a>) != 1024);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#journal_init_caches\">journal_init_caches</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_create_debugfs_entry\">jbd2_create_debugfs_entry</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_create_jbd_stats_proc_entry\">jbd2_create_jbd_stats_proc_entry</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_destroy_caches\">jbd2_journal_destroy_caches</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#journal_exit\">journal_exit</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_JBD2_DEBUG\">CONFIG_JBD2_DEBUG</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nr_journal_heads\">nr_journal_heads</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"JBD: leaked %d journal_heads!\\n\", <a class=\"id\" href=\"#n\">n</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_remove_debugfs_entry\">jbd2_remove_debugfs_entry</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_remove_jbd_stats_proc_entry\">jbd2_remove_jbd_stats_proc_entry</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_destroy_caches\">jbd2_journal_destroy_caches</a>();", 
"}", 
"", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> * jbd2_dev_to_name is a utility function used by the jbd2 and ext4 </span>", 
"<span class=\"comment\"> * tracing infrastructure to map a dev_t to a device name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller should use rcu_read_lock() in order to make sure the</span>", 
"<span class=\"comment\"> * device name stays valid until its done with it.  We use</span>", 
"<span class=\"comment\"> * rcu_read_lock() as well to make sure we're safe in case the caller</span>", 
"<span class=\"comment\"> * gets sloppy, and because rcu_read_lock() is cheap and can be safely</span>", 
"<span class=\"comment\"> * nested.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#devname_cache\">devname_cache</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><a class=\"id\" href=\"#rcu\">rcu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devname\">devname</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CACHE_SIZE_BITS\">CACHE_SIZE_BITS</a> 6", 
"static struct <a class=\"id\" href=\"#devname_cache\">devname_cache</a> *<a class=\"id\" href=\"#devcache\">devcache</a>[1 << <a class=\"id\" href=\"#CACHE_SIZE_BITS\">CACHE_SIZE_BITS</a>];", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#devname_cache_lock\">devname_cache_lock</a>);", 
"", 
"static void <a class=\"id\" href=\"#free_devcache\">free_devcache</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#rcu\">rcu</a>);", 
"}", 
"", 
"const char *<a class=\"id\" href=\"#jbd2_dev_to_name\">jbd2_dev_to_name</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#hash_32\">hash_32</a>(<a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#CACHE_SIZE_BITS\">CACHE_SIZE_BITS</a>);", 
"<span class=\"ts\"/>char<span class=\"ts\"/>*<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bd\">bd</a>;", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#devname_cache\">devname_cache</a> *<a class=\"id\" href=\"#new_dev\">new_dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>] && <a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#device\">device</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#devname\">devname</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_dev\">new_dev</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#devname_cache\">devname_cache</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_dev\">new_dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return \"NODEV-ALLOCFAILURE\"; <span class=\"comment\">/* Something non-NULL */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#devname_cache_lock\">devname_cache_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#device\">device</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new_dev\">new_dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#devname\">devname</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#devname_cache_lock\">devname_cache_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#free_devcache\">free_devcache</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#new_dev\">new_dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#bdget\">bdget</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bd\">bd</a>, <a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#devname\">devname</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdput\">bdput</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bdevname\">__bdevname</a>(<a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#devname\">devname</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#devcache\">devcache</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#devname\">devname</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#devname_cache_lock\">devname_cache_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#jbd2_dev_to_name\">jbd2_dev_to_name</a>);", 
"", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#journal_init\">journal_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#journal_exit\">journal_exit</a>);", 
"", 
];
xr_frag_insert('l/65/33d5bf54ffe3247afa0241a01cd5a54ef0cd8c.xr', __xr_tmp);
