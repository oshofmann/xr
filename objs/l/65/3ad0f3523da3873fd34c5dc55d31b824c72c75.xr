var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * atomicio.c - ACPI IO memory pre-mapping/post-unmapping, then</span>", 
"<span class=\"comment\"> * accessing in atomic context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is used for NMI handler to access IO memory area, because</span>", 
"<span class=\"comment\"> * ioremap/iounmap can not be used in NMI handler. The IO memory area</span>", 
"<span class=\"comment\"> * is pre-mapped in process context and accessed in NMI handler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2009-2010, Intel Corp.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Author: Huang Ying &lt;ying.huang@intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License version</span>", 
"<span class=\"comment\"> * 2 as published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kref\">kref</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#atomicio\">atomicio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_PFX\">ACPI_PFX</a> \"ACPI: \"", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#acpi_iomaps\">acpi_iomaps</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Used for mutual exclusion between writers of acpi_iomaps list, for</span>", 
"<span class=\"comment\"> * synchronization between readers and writer, RCU is used.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#acpi_iomaps_lock\">acpi_iomaps_lock</a>);", 
"", 
"struct <a class=\"id\" href=\"#acpi_iomap\">acpi_iomap</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kref\">kref</a> <a class=\"id\" href=\"#ref\">ref</a>;", 
"};", 
"", 
"<span class=\"comment\">/* acpi_iomaps_lock or RCU read lock must be held before calling */</span>", 
"static struct <a class=\"id\" href=\"#acpi_iomap\">acpi_iomap</a> *<a class=\"id\" href=\"#__acpi_find_iomap\">__acpi_find_iomap</a>(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_iomap\">acpi_iomap</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#map\">map</a>, &amp;<a class=\"id\" href=\"#acpi_iomaps\">acpi_iomaps</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#size\">size</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#paddr\">paddr</a> <= <a class=\"id\" href=\"#paddr\">paddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Atomic \"ioremap\" used by NMI handler, if the specified IO memory</span>", 
"<span class=\"comment\"> * area is not pre-mapped, NULL will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * acpi_iomaps_lock or RCU read lock must be held before calling</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#__acpi_ioremap_fast\">__acpi_ioremap_fast</a>(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_iomap\">acpi_iomap</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#__acpi_find_iomap\">__acpi_find_iomap</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a> + (<a class=\"id\" href=\"#paddr\">paddr</a> - <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#paddr\">paddr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* acpi_iomaps_lock must be held before calling */</span>", 
"static void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#__acpi_try_ioremap\">__acpi_try_ioremap</a>(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_iomap\">acpi_iomap</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#__acpi_find_iomap\">__acpi_find_iomap</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_get\">kref_get</a>(&amp;<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#ref\">ref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a> + (<a class=\"id\" href=\"#paddr\">paddr</a> - <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#paddr\">paddr</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Used to pre-map the specified IO memory area. First try to find</span>", 
"<span class=\"comment\"> * whether the area is already pre-mapped, if it is, increase the</span>", 
"<span class=\"comment\"> * reference count (in __acpi_try_ioremap) and return; otherwise, do</span>", 
"<span class=\"comment\"> * the real ioremap, and add the mapping into acpi_iomaps list.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#acpi_pre_map\">acpi_pre_map</a>(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_iomap\">acpi_iomap</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pg_sz\">pg_sz</a>, <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#pg_off\">pg_off</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#acpi_iomaps_lock\">acpi_iomaps_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#__acpi_try_ioremap\">__acpi_try_ioremap</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#acpi_iomaps_lock\">acpi_iomaps_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_off\">pg_off</a> = <a class=\"id\" href=\"#paddr\">paddr</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_sz\">pg_sz</a> = ((<a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) - <a class=\"id\" href=\"#pg_off\">pg_off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#ioremap\">ioremap</a>(<a class=\"id\" href=\"#pg_off\">pg_off</a>, <a class=\"id\" href=\"#pg_sz\">pg_sz</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#map\">map</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#map\">map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_unmap\">err_unmap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#pg_off\">pg_off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#pg_sz\">pg_sz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_init\">kref_init</a>(&amp;<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#ref\">ref</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#acpi_iomaps_lock\">acpi_iomaps_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#__acpi_try_ioremap\">__acpi_try_ioremap</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vaddr\">vaddr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#acpi_iomaps_lock\">acpi_iomaps_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#acpi_iomaps\">acpi_iomaps</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#acpi_iomaps_lock\">acpi_iomaps_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a> + (<a class=\"id\" href=\"#paddr\">paddr</a> - <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#paddr\">paddr</a>);", 
"<a class=\"id\" href=\"#err_unmap\">err_unmap</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* acpi_iomaps_lock must be held before calling */</span>", 
"static void <a class=\"id\" href=\"#__acpi_kref_del_iomap\">__acpi_kref_del_iomap</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#ref\">ref</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_iomap\">acpi_iomap</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ref\">ref</a>, struct <a class=\"id\" href=\"#acpi_iomap\">acpi_iomap</a>, <a class=\"id\" href=\"#ref\">ref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Used to post-unmap the specified IO memory area. The iounmap is</span>", 
"<span class=\"comment\"> * done only if the reference count goes zero.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#acpi_post_unmap\">acpi_post_unmap</a>(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_iomap\">acpi_iomap</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#del\">del</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#acpi_iomaps_lock\">acpi_iomaps_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#__acpi_find_iomap\">__acpi_find_iomap</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del\">del</a> = <a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#ref\">ref</a>, <a class=\"id\" href=\"#__acpi_kref_del_iomap\">__acpi_kref_del_iomap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#acpi_iomaps_lock\">acpi_iomaps_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#del\">del</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"}", 
"", 
"<span class=\"comment\">/* In NMI handler, should set silent = 1 */</span>", 
"static int <a class=\"id\" href=\"#acpi_check_gar\">acpi_check_gar</a>(struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#reg\">reg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#paddr\">paddr</a>, int <a class=\"id\" href=\"#silent\">silent</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#width\">width</a>, <a class=\"id\" href=\"#space_id\">space_id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#width\">width</a> = <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#space_id\">space_id</a> = <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Handle possible alignment issues */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, &amp;<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#address\">address</a>, sizeof(*<a class=\"id\" href=\"#paddr\">paddr</a>));", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#paddr\">paddr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#silent\">silent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(<a class=\"id\" href=\"#FW_BUG\">FW_BUG</a> <a class=\"id\" href=\"#ACPI_PFX\">ACPI_PFX</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Invalid physical address in GAR [0x%llx/%u/%u]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   *<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#width\">width</a>, <a class=\"id\" href=\"#space_id\">space_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#width\">width</a> != 8) && (<a class=\"id\" href=\"#width\">width</a> != 16) && (<a class=\"id\" href=\"#width\">width</a> != 32) && (<a class=\"id\" href=\"#width\">width</a> != 64)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#silent\">silent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(<a class=\"id\" href=\"#FW_BUG\">FW_BUG</a> <a class=\"id\" href=\"#ACPI_PFX\">ACPI_PFX</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"Invalid bit width in GAR [0x%llx/%u/%u]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   *<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#width\">width</a>, <a class=\"id\" href=\"#space_id\">space_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#space_id\">space_id</a> != <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_MEMORY\">ACPI_ADR_SPACE_SYSTEM_MEMORY</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#space_id\">space_id</a> != <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_IO\">ACPI_ADR_SPACE_SYSTEM_IO</a>) {", 
];
xr_frag_insert('l/65/3ad0f3523da3873fd34c5dc55d31b824c72c75.xr', __xr_tmp);
