var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2001 Anton Blanchard &lt;anton@au.ibm.com&gt;, IBM</span>", 
"<span class=\"comment\"> * Copyright (C) 2001 Paul Mackerras &lt;paulus@au.ibm.com&gt;, IBM</span>", 
"<span class=\"comment\"> * Copyright (C) 2004 Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;, IBM Corp.</span>", 
"<span class=\"comment\"> * Copyright (C) 2004 IBM Corporation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Additional Author(s):</span>", 
"<span class=\"comment\"> *  Ryan S. Arnold &lt;rsa@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#console\">console</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kbd_kern\">kbd_kern</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#major\">major</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysrq\">sysrq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty_flip\">tty_flip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"hvc_console.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HVC_MAJOR\">HVC_MAJOR</a><span class=\"ts\"/>229", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HVC_MINOR\">HVC_MINOR</a><span class=\"ts\"/>0", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wait this long per iteration while trying to push buffered data to the</span>", 
"<span class=\"comment\"> * hypervisor before allowing the tty to complete a close operation.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HVC_CLOSE_WAIT\">HVC_CLOSE_WAIT</a> (<a class=\"id\" href=\"#HZ\">HZ</a>/100) <span class=\"comment\">/* 1/10 of a second */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These sizes are most efficient for vio, because they are the</span>", 
"<span class=\"comment\"> * native transfer size. We could make them selectable in the</span>", 
"<span class=\"comment\"> * future to better deal with backends that want other buffer sizes.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#N_OUTBUF\">N_OUTBUF</a><span class=\"ts\"/>16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#N_INBUF\">N_INBUF</a><span class=\"ts\"/><span class=\"ts\"/>16", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__ALIGNED__\">__ALIGNED__</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__aligned__\">__aligned__</a>(sizeof(long))))", 
"", 
"static struct <a class=\"id\" href=\"#tty_driver\">tty_driver</a> *<a class=\"id\" href=\"#hvc_driver\">hvc_driver</a>;", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#hvc_task\">hvc_task</a>;", 
"", 
"<span class=\"comment\">/* Picks up late kicks after list walk but before schedule() */</span>", 
"static int <a class=\"id\" href=\"#hvc_kicked\">hvc_kicked</a>;", 
"", 
"static int <a class=\"id\" href=\"#hvc_init\">hvc_init</a>(void);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MAGIC_SYSRQ\">CONFIG_MAGIC_SYSRQ</a>", 
"static int <a class=\"id\" href=\"#sysrq_pressed\">sysrq_pressed</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* dynamic list of hvc_struct instances */</span>", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#hvc_structs\">hvc_structs</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Protect the list of hvc_struct instances from inserts and removals during</span>", 
"<span class=\"comment\"> * list traversal.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#hvc_structs_lock\">hvc_structs_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This value is used to assign a tty-&gt;index value to a hvc_struct based</span>", 
"<span class=\"comment\"> * upon order of exposure via hvc_probe(), when we can not match it to</span>", 
"<span class=\"comment\"> * a console candidate registered with hvc_instantiate().</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#last_hvc\">last_hvc</a> = -1;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do not call this function with either the hvc_structs_lock or the hvc_struct</span>", 
"<span class=\"comment\"> * lock held.  If successful, this function increments the kref reference</span>", 
"<span class=\"comment\"> * count against the target hvc_struct so it should be released when finished.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hvc_get_by_index\">hvc_get_by_index</a>(int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hvc_structs_lock\">hvc_structs_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#hp\">hp</a>, &amp;<a class=\"id\" href=\"#hvc_structs\">hvc_structs</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#index\">index</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_get\">kref_get</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hvc_structs_lock\">hvc_structs_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#hp\">hp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hvc_structs_lock\">hvc_structs_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hp\">hp</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initial console vtermnos for console API usage prior to full console</span>", 
"<span class=\"comment\"> * initialization.  Any vty adapter outside this range will not have usable</span>", 
"<span class=\"comment\"> * console interfaces but can still be used as a tty device.  This has to be</span>", 
"<span class=\"comment\"> * static because kmalloc will not work during early console init.</span>", 
"<span class=\"comment\"> */</span>", 
"static const struct <a class=\"id\" href=\"#hv_ops\">hv_ops</a> *<a class=\"id\" href=\"#cons_ops\">cons_ops</a>[<a class=\"id\" href=\"#MAX_NR_HVC_CONSOLES\">MAX_NR_HVC_CONSOLES</a>];", 
"static <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#vtermnos\">vtermnos</a>[<a class=\"id\" href=\"#MAX_NR_HVC_CONSOLES\">MAX_NR_HVC_CONSOLES</a>] =", 
"<span class=\"ts\"/>{[0 ... <a class=\"id\" href=\"#MAX_NR_HVC_CONSOLES\">MAX_NR_HVC_CONSOLES</a> - 1] = -1};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Console APIs, NOT TTY.  These APIs are available immediately when</span>", 
"<span class=\"comment\"> * hvc_console_setup() finds adapters.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#hvc_console_print\">hvc_console_print</a>(struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#co\">co</a>, const char *<a class=\"id\" href=\"#b\">b</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a>[<a class=\"id\" href=\"#N_OUTBUF\">N_OUTBUF</a>] <a class=\"id\" href=\"#__ALIGNED__\">__ALIGNED__</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#n\">n</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#donecr\">donecr</a> = 0, <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#co\">co</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Console access attempt outside of acceptable console range. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#MAX_NR_HVC_CONSOLES\">MAX_NR_HVC_CONSOLES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This console adapter was removed so it is not usable. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vtermnos\">vtermnos</a>[<a class=\"id\" href=\"#index\">index</a>] == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &gt; 0 || <a class=\"id\" href=\"#i\">i</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; 0 && <a class=\"id\" href=\"#i\">i</a> &lt; sizeof(<a class=\"id\" href=\"#c\">c</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#n\">n</a>] == '\\n' && !<a class=\"id\" href=\"#donecr\">donecr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>[<a class=\"id\" href=\"#i\">i</a>++] = '\\r';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#donecr\">donecr</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>[<a class=\"id\" href=\"#i\">i</a>++] = <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#n\">n</a>++];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#donecr\">donecr</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#cons_ops\">cons_ops</a>[<a class=\"id\" href=\"#index\">index</a>]-><a class=\"id\" href=\"#put_chars\">put_chars</a>(<a class=\"id\" href=\"#vtermnos\">vtermnos</a>[<a class=\"id\" href=\"#index\">index</a>], <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* throw away chars on error */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#r\">r</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> -= <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#c\">c</a>+<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#tty_driver\">tty_driver</a> *<a class=\"id\" href=\"#hvc_console_device\">hvc_console_device</a>(struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#c\">c</a>, int *<a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vtermnos\">vtermnos</a>[<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#index\">index</a>] == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hvc_driver\">hvc_driver</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hvc_console_setup\">hvc_console_setup</a>(struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#co\">co</a>, char *<a class=\"id\" href=\"#options\">options</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#co\">co</a>-><a class=\"id\" href=\"#index\">index</a> &lt; 0 || <a class=\"id\" href=\"#co\">co</a>-><a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#MAX_NR_HVC_CONSOLES\">MAX_NR_HVC_CONSOLES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vtermnos\">vtermnos</a>[<a class=\"id\" href=\"#co\">co</a>-><a class=\"id\" href=\"#index\">index</a>] == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#console\">console</a> <a class=\"id\" href=\"#hvc_console\">hvc_console</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"hvc\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#hvc_console_print\">hvc_console_print</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#hvc_console_device\">hvc_console_device</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#setup\">setup</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#hvc_console_setup\">hvc_console_setup</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#CON_PRINTBUFFER\">CON_PRINTBUFFER</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#index\">index</a><span class=\"ts\"/><span class=\"ts\"/>= -1,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Early console initialization.  Precedes driver initialization.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (1) we are first, and the user specified another driver</span>", 
"<span class=\"comment\"> * -- index will remain -1</span>", 
"<span class=\"comment\"> * (2) we are first and the user specified no driver</span>", 
"<span class=\"comment\"> * -- index will be set to 0, then we will fail setup.</span>", 
"<span class=\"comment\"> * (3)  we are first and the user specified our driver</span>", 
"<span class=\"comment\"> * -- index will be set to user specified driver, and we will fail</span>", 
"<span class=\"comment\"> * (4) we are after driver, and this initcall will register us</span>", 
"<span class=\"comment\"> * -- if the user didn't specify a driver then the console will match</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that for cases 2 and 3, we will match later when the io driver</span>", 
"<span class=\"comment\"> * calls hvc_instantiate() and call register again.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hvc_console_init\">hvc_console_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_console\">register_console</a>(&amp;<a class=\"id\" href=\"#hvc_console\">hvc_console</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#console_initcall\">console_initcall</a>(<a class=\"id\" href=\"#hvc_console_init\">hvc_console_init</a>);", 
"", 
"<span class=\"comment\">/* callback when the kboject ref count reaches zero. */</span>", 
"static void <a class=\"id\" href=\"#destroy_hvc_struct\">destroy_hvc_struct</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kref\">kref</a>, struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a>, <a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hvc_structs_lock\">hvc_structs_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;(<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#next\">next</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hvc_structs_lock\">hvc_structs_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#hp\">hp</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * hvc_instantiate() is an early console discovery method which locates</span>", 
"<span class=\"comment\"> * consoles * prior to the vio subsystem discovering them.  Hotplugged</span>", 
"<span class=\"comment\"> * vty adapters do NOT get an hvc_instantiate() callback since they</span>", 
"<span class=\"comment\"> * appear after early console init.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#hvc_instantiate\">hvc_instantiate</a>(<a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#vtermno\">vtermno</a>, int <a class=\"id\" href=\"#index\">index</a>, const struct <a class=\"id\" href=\"#hv_ops\">hv_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &lt; 0 || <a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#MAX_NR_HVC_CONSOLES\">MAX_NR_HVC_CONSOLES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vtermnos\">vtermnos</a>[<a class=\"id\" href=\"#index\">index</a>] != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure no no tty has been registered in this index */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a> = <a class=\"id\" href=\"#hvc_get_by_index\">hvc_get_by_index</a>(<a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#kref\">kref</a>, <a class=\"id\" href=\"#destroy_hvc_struct\">destroy_hvc_struct</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vtermnos\">vtermnos</a>[<a class=\"id\" href=\"#index\">index</a>] = <a class=\"id\" href=\"#vtermno\">vtermno</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cons_ops\">cons_ops</a>[<a class=\"id\" href=\"#index\">index</a>] = <a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* reserve all indices up to and including this index */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last_hvc\">last_hvc</a> &lt; <a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_hvc\">last_hvc</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if this index is what the user requested, then register</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * now (setup won't fail at this point).  It's ok to just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call register again if previously .setup failed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#hvc_console\">hvc_console</a>.<a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_console\">register_console</a>(&amp;<a class=\"id\" href=\"#hvc_console\">hvc_console</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hvc_instantiate\">hvc_instantiate</a>);", 
"", 
"<span class=\"comment\">/* Wake the sleeping khvcd */</span>", 
"void <a class=\"id\" href=\"#hvc_kick\">hvc_kick</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hvc_kicked\">hvc_kicked</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#hvc_task\">hvc_task</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hvc_kick\">hvc_kick</a>);", 
"", 
"static void <a class=\"id\" href=\"#hvc_unthrottle\">hvc_unthrottle</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hvc_kick\">hvc_kick</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The TTY interface won't be used until after the vio layer has exposed the vty</span>", 
"<span class=\"comment\"> * adapter to the kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hvc_open\">hvc_open</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Auto increments kref reference if found. */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#hp\">hp</a> = <a class=\"id\" href=\"#hvc_get_by_index\">hvc_get_by_index</a>(<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#index\">index</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Check and then increment for fast path open. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#count\">count</a>++ &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_kref_get\">tty_kref_get</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hvc_kick\">hvc_kick</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} <span class=\"comment\">/* else count == 0 */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a> = <a class=\"id\" href=\"#hp\">hp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#tty_kref_get\">tty_kref_get</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#notifier_add\">notifier_add</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#notifier_add\">notifier_add</a>(<a class=\"id\" href=\"#hp\">hp</a>, <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the notifier fails we return an error.  The tty layer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will call hvc_close() after a failed open but we don't want to clean</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up there so we'll clean up here and clear out the previously set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tty fields and return the kref reference.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_kref_put\">tty_kref_put</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#kref\">kref</a>, <a class=\"id\" href=\"#destroy_hvc_struct\">destroy_hvc_struct</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"hvc_open: request_irq failed with rc %d.\\n\", <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Force wakeup of the polling thread */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hvc_kick\">hvc_kick</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#hvc_close\">hvc_close</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tty_hung_up_p\">tty_hung_up_p</a>(<a class=\"id\" href=\"#filp\">filp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No driver_data means that this close was issued after a failed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hvc_open by the tty layer's release_dev() function and we can just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exit cleanly because the kref reference wasn't made.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#count\">count</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We are done with the tty pointer now. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#notifier_del\">notifier_del</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#notifier_del\">notifier_del</a>(<a class=\"id\" href=\"#hp\">hp</a>, <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cancel pending tty resize work */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cancel_work_sync\">cancel_work_sync</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty_resize\">tty_resize</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Chain calls chars_in_buffer() and returns immediately if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * there is no buffered data otherwise sleeps on a wait queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * waking periodically to check chars_in_buffer().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_wait_until_sent\">tty_wait_until_sent</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#HVC_CLOSE_WAIT\">HVC_CLOSE_WAIT</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#count\">count</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"hvc_close %X: oops, count is %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#vtermno\">vtermno</a>, <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_kref_put\">tty_kref_put</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#kref\">kref</a>, <a class=\"id\" href=\"#destroy_hvc_struct\">destroy_hvc_struct</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#hvc_hangup\">hvc_hangup</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#temp_open_count\">temp_open_count</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hp\">hp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cancel pending tty resize work */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cancel_work_sync\">cancel_work_sync</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty_resize\">tty_resize</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The N_TTY line discipline has problems such that in a close vs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * open-&gt;hangup case this can be called after the final close so prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that from happening for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#count\">count</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#temp_open_count\">temp_open_count</a> = <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#notifier_hangup\">notifier_hangup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#notifier_hangup\">notifier_hangup</a>(<a class=\"id\" href=\"#hp\">hp</a>, <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/>while(<a class=\"id\" href=\"#temp_open_count\">temp_open_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#temp_open_count\">temp_open_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_kref_put\">tty_kref_put</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#kref\">kref</a>, <a class=\"id\" href=\"#destroy_hvc_struct\">destroy_hvc_struct</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Push buffered characters whether they were just recently buffered or waiting</span>", 
"<span class=\"comment\"> * on a blocked hypervisor.  Call this function with hp-&gt;lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hvc_push\">hvc_push</a>(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#put_chars\">put_chars</a>(<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#vtermno\">vtermno</a>, <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#outbuf\">outbuf</a>, <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#do_wakeup\">do_wakeup</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* throw away output on error; this happens when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   there is no session connected to the vterm. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a> = 0;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#outbuf\">outbuf</a>, <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#outbuf\">outbuf</a> + <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#do_wakeup\">do_wakeup</a> = 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#hvc_write\">hvc_write</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>, const unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rsize\">rsize</a>, <a class=\"id\" href=\"#written\">written</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This write was probably executed during a tty close. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hp\">hp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPIPE\">EPIPE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#count\">count</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Push pending writes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hvc_push\">hvc_push</a>(<a class=\"id\" href=\"#hp\">hp</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &gt; 0 && (<a class=\"id\" href=\"#rsize\">rsize</a> = <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#outbuf_size\">outbuf_size</a> - <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rsize\">rsize</a> &gt; <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsize\">rsize</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#outbuf\">outbuf</a> + <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#rsize\">rsize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#rsize\">rsize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#rsize\">rsize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a> += <a class=\"id\" href=\"#rsize\">rsize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#written\">written</a> += <a class=\"id\" href=\"#rsize\">rsize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hvc_push\">hvc_push</a>(<a class=\"id\" href=\"#hp\">hp</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Racy, but harmless, kick thread if there is still pending data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hvc_kick\">hvc_kick</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#written\">written</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hvc_set_winsz() - Resize the hvc tty terminal window.</span>", 
"<span class=\"comment\"> * @work:<span class=\"ts\"/>work structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The routine shall not be called within an atomic context because it</span>", 
"<span class=\"comment\"> * might sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking:<span class=\"ts\"/>hp-&gt;lock</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#hvc_set_winsz\">hvc_set_winsz</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hvc_flags\">hvc_flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#winsize\">winsize</a> <a class=\"id\" href=\"#ws\">ws</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a>, <a class=\"id\" href=\"#tty_resize\">tty_resize</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#hvc_flags\">hvc_flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty\">tty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#hvc_flags\">hvc_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ws\">ws</a>  = <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ws\">ws</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#tty_kref_get\">tty_kref_get</a>(<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#hvc_flags\">hvc_flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_do_resize\">tty_do_resize</a>(<a class=\"id\" href=\"#tty\">tty</a>, &amp;<a class=\"id\" href=\"#ws\">ws</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_kref_put\">tty_kref_put</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is actually a contract between the driver and the tty layer outlining</span>", 
"<span class=\"comment\"> * how much write room the driver can guarantee will be sent OR BUFFERED.  This</span>", 
"<span class=\"comment\"> * driver MUST honor the return value.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hvc_write_room\">hvc_write_room</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hp\">hp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#outbuf_size\">outbuf_size</a> - <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#hvc_chars_in_buffer\">hvc_chars_in_buffer</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hp\">hp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * timeout will vary between the MIN and MAX values defined here.  By default</span>", 
"<span class=\"comment\"> * and during console activity we will use a default MIN_TIMEOUT of 10.  When</span>", 
"<span class=\"comment\"> * the console is idle, we increase the timeout value on each pass through</span>", 
"<span class=\"comment\"> * msleep until we reach the max.  This may be noticeable as a brief (average</span>", 
"<span class=\"comment\"> * one second) delay on the console before the console responds to input when</span>", 
"<span class=\"comment\"> * there has been no input for some time.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MIN_TIMEOUT\">MIN_TIMEOUT</a><span class=\"ts\"/><span class=\"ts\"/>(10)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_TIMEOUT\">MAX_TIMEOUT</a><span class=\"ts\"/><span class=\"ts\"/>(2000)", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#MIN_TIMEOUT\">MIN_TIMEOUT</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HVC_POLL_READ\">HVC_POLL_READ</a><span class=\"ts\"/>0x00000001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HVC_POLL_WRITE\">HVC_POLL_WRITE</a><span class=\"ts\"/>0x00000002", 
"", 
"int <a class=\"id\" href=\"#hvc_poll\">hvc_poll</a>(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#poll_mask\">poll_mask</a> = 0;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#N_INBUF\">N_INBUF</a>] <a class=\"id\" href=\"#__ALIGNED__\">__ALIGNED__</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#read_total\">read_total</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#written_total\">written_total</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Push pending writes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#written_total\">written_total</a> = <a class=\"id\" href=\"#hvc_push\">hvc_push</a>(<a class=\"id\" href=\"#hp\">hp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reschedule us if still some write pending */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#n_outbuf\">n_outbuf</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_mask\">poll_mask</a> |= <a class=\"id\" href=\"#HVC_POLL_WRITE\">HVC_POLL_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If hvc_push() was not able to write, sleep a few msecs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = (<a class=\"id\" href=\"#written_total\">written_total</a>) ? 0 : <a class=\"id\" href=\"#MIN_TIMEOUT\">MIN_TIMEOUT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No tty attached, just skip */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#tty_kref_get\">tty_kref_get</a>(<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tty\">tty</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bail\">bail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now check if we can get data (are we throttled ?) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#TTY_THROTTLED\">TTY_THROTTLED</a>, &amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#throttled\">throttled</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we aren't notifier driven and aren't throttled, we always</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * request a reschedule</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#irq_requested\">irq_requested</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_mask\">poll_mask</a> |= <a class=\"id\" href=\"#HVC_POLL_READ\">HVC_POLL_READ</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Read data if any */</span>", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#tty_buffer_request_room\">tty_buffer_request_room</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#N_INBUF\">N_INBUF</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If flip is full, just reschedule a later read */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_mask\">poll_mask</a> |= <a class=\"id\" href=\"#HVC_POLL_READ\">HVC_POLL_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get_chars\">get_chars</a>(<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#vtermno\">vtermno</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Hangup the tty when disconnected from host */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == -<a class=\"id\" href=\"#EPIPE\">EPIPE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_hangup\">tty_hangup</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if ( <a class=\"id\" href=\"#n\">n</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a> ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Some back-ends can only ensure a certain min</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * num of bytes read, which may be &gt; 'count'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Let the tty clear the flip buff to make room.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_mask\">poll_mask</a> |= <a class=\"id\" href=\"#HVC_POLL_READ\">HVC_POLL_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MAGIC_SYSRQ\">CONFIG_MAGIC_SYSRQ</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#hvc_console\">hvc_console</a>.<a class=\"id\" href=\"#index\">index</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Handle the SysRq Hack */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* XXX should support a sequence */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a>] == '\\x0f') {<span class=\"ts\"/><span class=\"comment\">/* ^O */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if ^O is pressed again, reset</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sysrq_pressed and flip ^O char */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysrq_pressed\">sysrq_pressed</a> = !<a class=\"id\" href=\"#sysrq_pressed\">sysrq_pressed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sysrq_pressed\">sysrq_pressed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#sysrq_pressed\">sysrq_pressed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle_sysrq\">handle_sysrq</a>(<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysrq_pressed\">sysrq_pressed</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MAGIC_SYSRQ */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_insert_flip_char\">tty_insert_flip_char</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a>], 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_total\">read_total</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#throttled\">throttled</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Wakeup write queue if necessary */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#do_wakeup\">do_wakeup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#do_wakeup\">do_wakeup</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_wakeup\">tty_wakeup</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#bail\">bail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_total\">read_total</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Activity is occurring, so reset the polling backoff value to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   a minimum for performance. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#MIN_TIMEOUT\">MIN_TIMEOUT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_flip_buffer_push\">tty_flip_buffer_push</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tty\">tty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_kref_put\">tty_kref_put</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#poll_mask\">poll_mask</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hvc_poll\">hvc_poll</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __hvc_resize() - Update terminal window size information.</span>", 
"<span class=\"comment\"> * @hp:<span class=\"ts\"/><span class=\"ts\"/>HVC console pointer</span>", 
"<span class=\"comment\"> * @ws:<span class=\"ts\"/><span class=\"ts\"/>Terminal window size structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Stores the specified window size information in the hvc structure of @hp.</span>", 
"<span class=\"comment\"> * The function schedule the tty resize update.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking:<span class=\"ts\"/>Locking free; the function MUST be called holding hp-&gt;lock</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__hvc_resize\">__hvc_resize</a>(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>, struct <a class=\"id\" href=\"#winsize\">winsize</a> <a class=\"id\" href=\"#ws\">ws</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ws\">ws</a> = <a class=\"id\" href=\"#ws\">ws</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty_resize\">tty_resize</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__hvc_resize\">__hvc_resize</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This kthread is either polling or interrupt driven.  This is determined by</span>", 
"<span class=\"comment\"> * calling hvc_poll() who determines whether a console adapter support</span>", 
"<span class=\"comment\"> * interrupts.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#khvcd\">khvcd</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#poll_mask\">poll_mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_freezable\">set_freezable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_mask\">poll_mask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hvc_kicked\">hvc_kicked</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wmb\">wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpus_are_in_xmon\">cpus_are_in_xmon</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hvc_structs_lock\">hvc_structs_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#hp\">hp</a>, &amp;<a class=\"id\" href=\"#hvc_structs\">hvc_structs</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_mask\">poll_mask</a> |= <a class=\"id\" href=\"#hvc_poll\">hvc_poll</a>(<a class=\"id\" href=\"#hp\">hp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hvc_structs_lock\">hvc_structs_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_mask\">poll_mask</a> |= <a class=\"id\" href=\"#HVC_POLL_READ\">HVC_POLL_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hvc_kicked\">hvc_kicked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hvc_kicked\">hvc_kicked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#poll_mask\">poll_mask</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a> &lt; <a class=\"id\" href=\"#MAX_TIMEOUT\">MAX_TIMEOUT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> += (<a class=\"id\" href=\"#timeout\">timeout</a> >> 6) + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep_interruptible\">msleep_interruptible</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>());", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#tty_operations\">tty_operations</a> <a class=\"id\" href=\"#hvc_ops\">hvc_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#hvc_open\">hvc_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#close\">close</a> = <a class=\"id\" href=\"#hvc_close\">hvc_close</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#hvc_write\">hvc_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#hangup\">hangup</a> = <a class=\"id\" href=\"#hvc_hangup\">hvc_hangup</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unthrottle\">unthrottle</a> = <a class=\"id\" href=\"#hvc_unthrottle\">hvc_unthrottle</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_room\">write_room</a> = <a class=\"id\" href=\"#hvc_write_room\">hvc_write_room</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#chars_in_buffer\">chars_in_buffer</a> = <a class=\"id\" href=\"#hvc_chars_in_buffer\">hvc_chars_in_buffer</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hvc_alloc\">hvc_alloc</a>(<a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#vtermno\">vtermno</a>, int <a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#hv_ops\">hv_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#outbuf_size\">outbuf_size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We wait until a driver actually comes along */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hvc_driver\">hvc_driver</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#hvc_init\">hvc_init</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#ALIGN\">ALIGN</a>(sizeof(*<a class=\"id\" href=\"#hp\">hp</a>), sizeof(long)) + <a class=\"id\" href=\"#outbuf_size\">outbuf_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hp\">hp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#vtermno\">vtermno</a> = <a class=\"id\" href=\"#vtermno\">vtermno</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#outbuf_size\">outbuf_size</a> = <a class=\"id\" href=\"#outbuf_size\">outbuf_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#outbuf\">outbuf</a> = &amp;((char *)<a class=\"id\" href=\"#hp\">hp</a>)[<a class=\"id\" href=\"#ALIGN\">ALIGN</a>(sizeof(*<a class=\"id\" href=\"#hp\">hp</a>), sizeof(long))];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_init\">kref_init</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#kref\">kref</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty_resize\">tty_resize</a>, <a class=\"id\" href=\"#hvc_set_winsz\">hvc_set_winsz</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hvc_structs_lock\">hvc_structs_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * find index to use:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * see if this vterm id matches one registered for console.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_HVC_CONSOLES\">MAX_NR_HVC_CONSOLES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vtermnos\">vtermnos</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#vtermno\">vtermno</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cons_ops\">cons_ops</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#ops\">ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no matching slot, just use a counter */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#MAX_NR_HVC_CONSOLES\">MAX_NR_HVC_CONSOLES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = ++<a class=\"id\" href=\"#last_hvc\">last_hvc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;(<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#next\">next</a>), &amp;<a class=\"id\" href=\"#hvc_structs\">hvc_structs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hvc_structs_lock\">hvc_structs_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hp\">hp</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hvc_alloc\">hvc_alloc</a>);", 
"", 
"int <a class=\"id\" href=\"#hvc_remove\">hvc_remove</a>(struct <a class=\"id\" href=\"#hvc_struct\">hvc_struct</a> *<a class=\"id\" href=\"#hp\">hp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#tty_kref_get\">tty_kref_get</a>(<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#tty\">tty</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#index\">index</a> &lt; <a class=\"id\" href=\"#MAX_NR_HVC_CONSOLES\">MAX_NR_HVC_CONSOLES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vtermnos\">vtermnos</a>[<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#index\">index</a>] = -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't whack hp-&gt;irq because tty_hangup() will need to free the irq. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We 'put' the instance that was grabbed when the kref instance</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was initialized using kref_init().  Let the last holder of this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kref cause it to be removed, which will probably be the tty_vhangup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#hp\">hp</a>-><a class=\"id\" href=\"#kref\">kref</a>, <a class=\"id\" href=\"#destroy_hvc_struct\">destroy_hvc_struct</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This function call will auto chain call hvc_hangup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tty\">tty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_vhangup\">tty_vhangup</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_kref_put\">tty_kref_put</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hvc_remove\">hvc_remove</a>);", 
"", 
"<span class=\"comment\">/* Driver initialization: called as soon as someone uses hvc_alloc(). */</span>", 
"static int <a class=\"id\" href=\"#hvc_init\">hvc_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_driver\">tty_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We need more than hvc_count adapters due to hotplug additions. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#alloc_tty_driver\">alloc_tty_driver</a>(<a class=\"id\" href=\"#HVC_ALLOC_TTY_ADAPTERS\">HVC_ALLOC_TTY_ADAPTERS</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#drv\">drv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver_name\">driver_name</a> = \"hvc\";", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#name\">name</a> = \"hvc\";", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#major\">major</a> = <a class=\"id\" href=\"#HVC_MAJOR\">HVC_MAJOR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#minor_start\">minor_start</a> = <a class=\"id\" href=\"#HVC_MINOR\">HVC_MINOR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#TTY_DRIVER_TYPE_SYSTEM\">TTY_DRIVER_TYPE_SYSTEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#init_termios\">init_termios</a> = <a class=\"id\" href=\"#tty_std_termios\">tty_std_termios</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#TTY_DRIVER_REAL_RAW\">TTY_DRIVER_REAL_RAW</a> | <a class=\"id\" href=\"#TTY_DRIVER_RESET_TERMIOS\">TTY_DRIVER_RESET_TERMIOS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_set_operations\">tty_set_operations</a>(<a class=\"id\" href=\"#drv\">drv</a>, &amp;<a class=\"id\" href=\"#hvc_ops\">hvc_ops</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Always start the kthread because there can be hotplug vty adapters</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * added later. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hvc_task\">hvc_task</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#khvcd\">khvcd</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"khvcd\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#hvc_task\">hvc_task</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Couldn't create kthread for console.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#hvc_task\">hvc_task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put_tty\">put_tty</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#tty_register_driver\">tty_register_driver</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Couldn't register hvc console driver\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#stop_thread\">stop_thread</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure tty is fully registered before allowing it to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * found by hvc_console_device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hvc_driver\">hvc_driver</a> = <a class=\"id\" href=\"#drv\">drv</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#stop_thread\">stop_thread</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#hvc_task\">hvc_task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hvc_task\">hvc_task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#put_tty\">put_tty</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_tty_driver\">put_tty_driver</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* This isn't particularly necessary due to this being a console driver</span>", 
"<span class=\"comment\"> * but it is nice to be thorough.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#hvc_exit\">hvc_exit</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hvc_driver\">hvc_driver</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#hvc_task\">hvc_task</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_unregister_driver\">tty_unregister_driver</a>(<a class=\"id\" href=\"#hvc_driver\">hvc_driver</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* return tty_struct instances allocated in hvc_init(). */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_tty_driver\">put_tty_driver</a>(<a class=\"id\" href=\"#hvc_driver\">hvc_driver</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_console\">unregister_console</a>(&amp;<a class=\"id\" href=\"#hvc_console\">hvc_console</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#hvc_exit\">hvc_exit</a>);", 
];
xr_frag_insert('l/65/943483a1af953dc56981f3a9cf054cdcc8a90a.xr', __xr_tmp);
