var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 Casey Schaufler &lt;casey@schaufler-ca.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *      it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *      the Free Software Foundation, version 2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author:</span>", 
"<span class=\"comment\"> *      Casey Schaufler &lt;casey@schaufler-ca.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"smack.h\"", 
"", 
"struct <a class=\"id\" href=\"#smack_known\">smack_known</a> <a class=\"id\" href=\"#smack_known_huh\">smack_known_huh</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_known\">smk_known</a><span class=\"ts\"/>= \"?\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_secid\">smk_secid</a><span class=\"ts\"/>= 2,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_cipso\">smk_cipso</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#smack_known\">smack_known</a> <a class=\"id\" href=\"#smack_known_hat\">smack_known_hat</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_known\">smk_known</a><span class=\"ts\"/>= \"^\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_secid\">smk_secid</a><span class=\"ts\"/>= 3,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_cipso\">smk_cipso</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#smack_known\">smack_known</a> <a class=\"id\" href=\"#smack_known_star\">smack_known_star</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_known\">smk_known</a><span class=\"ts\"/>= \"*\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_secid\">smk_secid</a><span class=\"ts\"/>= 4,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_cipso\">smk_cipso</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#smack_known\">smack_known</a> <a class=\"id\" href=\"#smack_known_floor\">smack_known_floor</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_known\">smk_known</a><span class=\"ts\"/>= \"_\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_secid\">smk_secid</a><span class=\"ts\"/>= 5,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_cipso\">smk_cipso</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#smack_known\">smack_known</a> <a class=\"id\" href=\"#smack_known_invalid\">smack_known_invalid</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_known\">smk_known</a><span class=\"ts\"/>= \"\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_secid\">smk_secid</a><span class=\"ts\"/>= 6,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_cipso\">smk_cipso</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#smack_known\">smack_known</a> <a class=\"id\" href=\"#smack_known_web\">smack_known_web</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_known\">smk_known</a><span class=\"ts\"/>= \"@\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_secid\">smk_secid</a><span class=\"ts\"/>= 7,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#smk_cipso\">smk_cipso</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#smack_known_list\">smack_known_list</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The initial value needs to be bigger than any of the</span>", 
"<span class=\"comment\"> * known values above.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#smack_next_secid\">smack_next_secid</a> = 10;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * what events do we log</span>", 
"<span class=\"comment\"> * can be overwritten at run-time by /smack/logging</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#log_policy\">log_policy</a> = <a class=\"id\" href=\"#SMACK_AUDIT_DENIED\">SMACK_AUDIT_DENIED</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_access - determine if a subject has a specific access to an object</span>", 
"<span class=\"comment\"> * @subject_label: a pointer to the subject's Smack label</span>", 
"<span class=\"comment\"> * @object_label: a pointer to the object's Smack label</span>", 
"<span class=\"comment\"> * @request: the access requested, in \"MAY\" format</span>", 
"<span class=\"comment\"> * @a : a pointer to the audit data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function looks up the subject/object pair in the</span>", 
"<span class=\"comment\"> * access rule list and returns 0 if the access is permitted,</span>", 
"<span class=\"comment\"> * non zero otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Even though Smack labels are usually shared on smack_list</span>", 
"<span class=\"comment\"> * labels that come in off the network can't be imported</span>", 
"<span class=\"comment\"> * and added to the list for locking reasons.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Therefore, it is necessary to check the contents of the labels,</span>", 
"<span class=\"comment\"> * not just the pointer values. Of course, in most cases the labels</span>", 
"<span class=\"comment\"> * will be on the list, so checking the pointers may be a worthwhile</span>", 
"<span class=\"comment\"> * optimization.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#smk_access\">smk_access</a>(char *<a class=\"id\" href=\"#subject_label\">subject_label</a>, char *<a class=\"id\" href=\"#object_label\">object_label</a>, int <a class=\"id\" href=\"#request\">request</a>,", 
"<span class=\"ts\"/>       struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> *<a class=\"id\" href=\"#a\">a</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#MAY_NOT\">MAY_NOT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_rule\">smack_rule</a> *<a class=\"id\" href=\"#srp\">srp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hardcoded comparisons.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A star subject can't access any object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#subject_label\">subject_label</a> == <a class=\"id\" href=\"#smack_known_star\">smack_known_star</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#subject_label\">subject_label</a>, <a class=\"id\" href=\"#smack_known_star\">smack_known_star</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_audit\">out_audit</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * An internet object can be accessed by any subject.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tasks cannot be assigned the internet label.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * An internet subject can access any object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#object_label\">object_label</a> == <a class=\"id\" href=\"#smack_known_web\">smack_known_web</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#subject_label\">subject_label</a> == <a class=\"id\" href=\"#smack_known_web\">smack_known_web</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#object_label\">object_label</a>, <a class=\"id\" href=\"#smack_known_web\">smack_known_web</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>) == 0 ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#subject_label\">subject_label</a>, <a class=\"id\" href=\"#smack_known_web\">smack_known_web</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_audit\">out_audit</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A star object can be accessed by any subject.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#object_label\">object_label</a> == <a class=\"id\" href=\"#smack_known_star\">smack_known_star</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#object_label\">object_label</a>, <a class=\"id\" href=\"#smack_known_star\">smack_known_star</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_audit\">out_audit</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * An object can be accessed in any way by a subject</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with the same label.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#subject_label\">subject_label</a> == <a class=\"id\" href=\"#object_label\">object_label</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#subject_label\">subject_label</a>, <a class=\"id\" href=\"#object_label\">object_label</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_audit\">out_audit</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A hat subject can read any object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A floor object can be read by any subject.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#request\">request</a> &amp; <a class=\"id\" href=\"#MAY_ANYREAD\">MAY_ANYREAD</a>) == <a class=\"id\" href=\"#request\">request</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#object_label\">object_label</a> == <a class=\"id\" href=\"#smack_known_floor\">smack_known_floor</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#object_label\">object_label</a>, <a class=\"id\" href=\"#smack_known_floor\">smack_known_floor</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_audit\">out_audit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#subject_label\">subject_label</a> == <a class=\"id\" href=\"#smack_known_hat\">smack_known_hat</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#subject_label\">subject_label</a>, <a class=\"id\" href=\"#smack_known_hat\">smack_known_hat</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_audit\">out_audit</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Beyond here an explicit relationship is required.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the requested access is contained in the available</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * access (e.g. read is included in readwrite) it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * good.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#srp\">srp</a>, &amp;<a class=\"id\" href=\"#smack_rule_list\">smack_rule_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_subject\">smk_subject</a> == <a class=\"id\" href=\"#subject_label\">subject_label</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_subject\">smk_subject</a>, <a class=\"id\" href=\"#subject_label\">subject_label</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_object\">smk_object</a> == <a class=\"id\" href=\"#object_label\">object_label</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_object\">smk_object</a>, <a class=\"id\" href=\"#object_label\">object_label</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is a bit map operation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#request\">request</a> &amp; <a class=\"id\" href=\"#may\">may</a>) == <a class=\"id\" href=\"#request\">request</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_audit\">out_audit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<a class=\"id\" href=\"#out_audit\">out_audit</a>:", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_log\">smack_log</a>(<a class=\"id\" href=\"#subject_label\">subject_label</a>, <a class=\"id\" href=\"#object_label\">object_label</a>, <a class=\"id\" href=\"#request\">request</a>, <a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#a\">a</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_curacc - determine if current has a specific access to an object</span>", 
"<span class=\"comment\"> * @obj_label: a pointer to the object's Smack label</span>", 
"<span class=\"comment\"> * @mode: the access requested, in \"MAY\" format</span>", 
"<span class=\"comment\"> * @a : common audit data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function checks the current subject label/object label pair</span>", 
"<span class=\"comment\"> * in the access rule list and returns 0 if the access is permitted,</span>", 
"<span class=\"comment\"> * non zero otherwise. It allows that current may have the capability</span>", 
"<span class=\"comment\"> * to override the rules.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(char *<a class=\"id\" href=\"#obj_label\">obj_label</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mode\">mode</a>, struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> *<a class=\"id\" href=\"#a\">a</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#obj_label\">obj_label</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_audit\">out_audit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Return if a specific label has been designated as the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only one that gets privilege and current does not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have that label.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smack_onlycap\">smack_onlycap</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#smack_onlycap\">smack_onlycap</a> != <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_audit\">out_audit</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_OVERRIDE\">CAP_MAC_OVERRIDE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_audit\">out_audit</a>:", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_log\">smack_log</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#obj_label\">obj_label</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#a\">a</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_str_from_perm : helper to transalate an int to a</span>", 
"<span class=\"comment\"> * readable string</span>", 
"<span class=\"comment\"> * @string : the string to fill</span>", 
"<span class=\"comment\"> * @access : the int</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#smack_str_from_perm\">smack_str_from_perm</a>(char *<a class=\"id\" href=\"#string\">string</a>, int <a class=\"id\" href=\"#access\">access</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#access\">access</a> &amp; <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>++] = 'r';", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#access\">access</a> &amp; <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>++] = 'w';", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#access\">access</a> &amp; <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>++] = 'x';", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#access\">access</a> &amp; <a class=\"id\" href=\"#MAY_APPEND\">MAY_APPEND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>++] = 'a';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>] = '\\0';", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_log_callback - SMACK specific information</span>", 
"<span class=\"comment\"> * will be called by generic audit code</span>", 
"<span class=\"comment\"> * @ab : the audit_buffer</span>", 
"<span class=\"comment\"> * @a  : audit_data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_log_callback\">smack_log_callback</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, void *<a class=\"id\" href=\"#a\">a</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> *<a class=\"id\" href=\"#ad\">ad</a> = <a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_audit_data\">smack_audit_data</a> *<a class=\"id\" href=\"#sad\">sad</a> = &amp;<a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#smack_audit_data\">smack_audit_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \"lsm=SMACK fn=%s action=%s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#smack_audit_data\">smack_audit_data</a>.<a class=\"id\" href=\"#function\">function</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sad\">sad</a>-><a class=\"id\" href=\"#result\">result</a> ? \"denied\" : \"granted\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" subject=\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_untrustedstring\">audit_log_untrustedstring</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#sad\">sad</a>-><a class=\"id\" href=\"#subject\">subject</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" object=\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_untrustedstring\">audit_log_untrustedstring</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#sad\">sad</a>-><a class=\"id\" href=\"#object\">object</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" requested=%s\", <a class=\"id\" href=\"#sad\">sad</a>-><a class=\"id\" href=\"#request\">request</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *  smack_log - Audit the granting or denial of permissions.</span>", 
"<span class=\"comment\"> *  @subject_label : smack label of the requester</span>", 
"<span class=\"comment\"> *  @object_label  : smack label of the object being accessed</span>", 
"<span class=\"comment\"> *  @request: requested permissions</span>", 
"<span class=\"comment\"> *  @result: result from smk_access</span>", 
"<span class=\"comment\"> *  @a:  auxiliary audit data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Audit the granting or denial of permissions in accordance</span>", 
"<span class=\"comment\"> * with the policy.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#smack_log\">smack_log</a>(char *<a class=\"id\" href=\"#subject_label\">subject_label</a>, char *<a class=\"id\" href=\"#object_label\">object_label</a>, int <a class=\"id\" href=\"#request\">request</a>,", 
"<span class=\"ts\"/>       int <a class=\"id\" href=\"#result\">result</a>, struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> *<a class=\"id\" href=\"#ad\">ad</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#request_buffer\">request_buffer</a>[<a class=\"id\" href=\"#SMK_NUM_ACCESS_TYPE\">SMK_NUM_ACCESS_TYPE</a> + 1];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_audit_data\">smack_audit_data</a> *<a class=\"id\" href=\"#sad\">sad</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> *<a class=\"id\" href=\"#a\">a</a> = &amp;<a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#a\">a</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check if we have to log the current event */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> != 0 && (<a class=\"id\" href=\"#log_policy\">log_policy</a> &amp; <a class=\"id\" href=\"#SMACK_AUDIT_DENIED\">SMACK_AUDIT_DENIED</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> == 0 && (<a class=\"id\" href=\"#log_policy\">log_policy</a> &amp; <a class=\"id\" href=\"#SMACK_AUDIT_ACCEPT\">SMACK_AUDIT_ACCEPT</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#smack_audit_data\">smack_audit_data</a>.<a class=\"id\" href=\"#function\">function</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#smack_audit_data\">smack_audit_data</a>.<a class=\"id\" href=\"#function\">function</a> = \"unknown\";", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* end preparing the audit data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sad\">sad</a> = &amp;<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#smack_audit_data\">smack_audit_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smack_str_from_perm\">smack_str_from_perm</a>(<a class=\"id\" href=\"#request_buffer\">request_buffer</a>, <a class=\"id\" href=\"#request\">request</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sad\">sad</a>-><a class=\"id\" href=\"#subject\">subject</a> = <a class=\"id\" href=\"#subject_label\">subject_label</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sad\">sad</a>-><a class=\"id\" href=\"#object\">object</a>  = <a class=\"id\" href=\"#object_label\">object_label</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sad\">sad</a>-><a class=\"id\" href=\"#request\">request</a> = <a class=\"id\" href=\"#request_buffer\">request_buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sad\">sad</a>-><a class=\"id\" href=\"#result\">result</a>  = <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#lsm_pre_audit\">lsm_pre_audit</a> = <a class=\"id\" href=\"#smack_log_callback\">smack_log_callback</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#common_lsm_audit\">common_lsm_audit</a>(<a class=\"id\" href=\"#a\">a</a>);", 
"}", 
"#else <span class=\"comment\">/* #ifdef CONFIG_AUDIT */</span>", 
"void <a class=\"id\" href=\"#smack_log\">smack_log</a>(char *<a class=\"id\" href=\"#subject_label\">subject_label</a>, char *<a class=\"id\" href=\"#object_label\">object_label</a>, int <a class=\"id\" href=\"#request\">request</a>,", 
"               int <a class=\"id\" href=\"#result\">result</a>, struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> *<a class=\"id\" href=\"#ad\">ad</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#smack_known_lock\">smack_known_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_import_entry - import a label, return the list entry</span>", 
"<span class=\"comment\"> * @string: a text string that might be a Smack label</span>", 
"<span class=\"comment\"> * @len: the maximum size, or zero if it is NULL terminated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the entry in the label list that</span>", 
"<span class=\"comment\"> * matches the passed string, adding it if necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#smack_known\">smack_known</a> *<a class=\"id\" href=\"#smk_import_entry\">smk_import_entry</a>(const char *<a class=\"id\" href=\"#string\">string</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_known\">smack_known</a> *<a class=\"id\" href=\"#skp\">skp</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#smack\">smack</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> <= 0 || <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#SMK_MAXLEN\">SMK_MAXLEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#SMK_MAXLEN\">SMK_MAXLEN</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#found\">found</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack\">smack</a>[<a class=\"id\" href=\"#i\">i</a>] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#len\">len</a> || <a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>] &gt; '~' || <a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>] <= ' ' ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>] == '/' || <a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>] == '\"' ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>] == '\\\\' || <a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>] == '\\'') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack\">smack</a>[<a class=\"id\" href=\"#i\">i</a>] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack\">smack</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smack\">smack</a>[0] == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#smack_known_lock\">smack_known_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#skp\">skp</a>, &amp;<a class=\"id\" href=\"#smack_known_list\">smack_known_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_known\">smk_known</a>, <a class=\"id\" href=\"#smack\">smack</a>, <a class=\"id\" href=\"#SMK_MAXLEN\">SMK_MAXLEN</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skp\">skp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#smack_known\">smack_known</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skp\">skp</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_known\">smk_known</a>, <a class=\"id\" href=\"#smack\">smack</a>, <a class=\"id\" href=\"#SMK_MAXLEN\">SMK_MAXLEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_secid\">smk_secid</a> = <a class=\"id\" href=\"#smack_next_secid\">smack_next_secid</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_cipso\">smk_cipso</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_cipsolock\">smk_cipsolock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Make sure that the entry is actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * filled before putting it on the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#smack_known_list\">smack_known_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#smack_known_lock\">smack_known_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skp\">skp</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_import - import a smack label</span>", 
"<span class=\"comment\"> * @string: a text string that might be a Smack label</span>", 
"<span class=\"comment\"> * @len: the maximum size, or zero if it is NULL terminated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the label in the label list that</span>", 
"<span class=\"comment\"> * matches the passed string, adding it if necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#smk_import\">smk_import</a>(const char *<a class=\"id\" href=\"#string\">string</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_known\">smack_known</a> *<a class=\"id\" href=\"#skp\">skp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* labels cannot begin with a '-' */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#string\">string</a>[0] == '-')", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skp\">skp</a> = <a class=\"id\" href=\"#smk_import_entry\">smk_import_entry</a>(<a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skp\">skp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_from_secid - find the Smack label associated with a secid</span>", 
"<span class=\"comment\"> * @secid: an integer that might be associated with a Smack label</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the appropraite Smack label if there is one,</span>", 
"<span class=\"comment\"> * otherwise a pointer to the invalid Smack label.</span>", 
"<span class=\"comment\"> */</span>", 
];
xr_frag_insert('l/66/191cec35417445844cc6bea4c8360c7ff61cae.xr', __xr_tmp);
