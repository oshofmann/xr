var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixmap.h: compile-time virtual memory allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is subject to the terms and conditions of the GNU General Public</span>", 
"<span class=\"comment\"> * License.  See the file \"COPYING\" in the main directory of this archive</span>", 
"<span class=\"comment\"> * for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1998 Ingo Molnar</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Support of BIGMEM added by Gerhard Wichert, Siemens AG, July 1999</span>", 
"<span class=\"comment\"> * x86_32 and x86_64 integration by Gustavo F. Padovan, February 2009</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_FIXMAP_H\">_ASM_X86_FIXMAP_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_FIXMAP_H\">_ASM_X86_FIXMAP_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apicdef\">apicdef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#threads\">threads</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#kmap_types\">kmap_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#vsyscall\">vsyscall</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We can't declare FIXADDR_TOP as variable for x86_64 because vsyscall</span>", 
"<span class=\"comment\"> * uses fixmaps that relies on FIXADDR_TOP for proper address calculation.</span>", 
"<span class=\"comment\"> * Because of this, FIXADDR_TOP x86 integration was left as later work.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"comment\">/* used by vmalloc.c, vsyscall.lds.S.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Leave one empty page between vmalloc'ed areas and</span>", 
"<span class=\"comment\"> * the start of the fixmap.</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned long <a class=\"id\" href=\"#__FIXADDR_TOP\">__FIXADDR_TOP</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXADDR_TOP\">FIXADDR_TOP</a><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#__FIXADDR_TOP\">__FIXADDR_TOP</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXADDR_USER_START\">FIXADDR_USER_START</a>     <a class=\"id\" href=\"#__fix_to_virt\">__fix_to_virt</a>(<a class=\"id\" href=\"#FIX_VDSO\">FIX_VDSO</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXADDR_USER_END\">FIXADDR_USER_END</a>       <a class=\"id\" href=\"#__fix_to_virt\">__fix_to_virt</a>(<a class=\"id\" href=\"#FIX_VDSO\">FIX_VDSO</a> - 1)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXADDR_TOP\">FIXADDR_TOP</a><span class=\"ts\"/>(<a class=\"id\" href=\"#VSYSCALL_END\">VSYSCALL_END</a>-<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"", 
"<span class=\"comment\">/* Only covers 32bit vsyscalls currently. Need another set for 64bit. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXADDR_USER_START\">FIXADDR_USER_START</a><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#VSYSCALL32_VSYSCALL\">VSYSCALL32_VSYSCALL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXADDR_USER_END\">FIXADDR_USER_END</a><span class=\"ts\"/>(<a class=\"id\" href=\"#FIXADDR_USER_START\">FIXADDR_USER_START</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Here we define all the compile-time 'special' virtual</span>", 
"<span class=\"comment\"> * addresses. The point is to have a constant address at</span>", 
"<span class=\"comment\"> * compile time, but to set the physical address only</span>", 
"<span class=\"comment\"> * in the boot process.</span>", 
"<span class=\"comment\"> * for x86_32: We allocate these special addresses</span>", 
"<span class=\"comment\"> * from the end of virtual memory (0xfffff000) backwards.</span>", 
"<span class=\"comment\"> * Also this lets us do fail-safe vmalloc(), we</span>", 
"<span class=\"comment\"> * can guarantee that these special addresses and</span>", 
"<span class=\"comment\"> * vmalloc()-ed addresses never overlap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These 'compile-time allocated' memory buffers are</span>", 
"<span class=\"comment\"> * fixed-size 4k pages (or larger if used with an increment</span>", 
"<span class=\"comment\"> * higher than 1). Use set_fixmap(idx,phys) to associate</span>", 
"<span class=\"comment\"> * physical memory with fixmap indices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TLB entries of such buffers will not be flushed across</span>", 
"<span class=\"comment\"> * task switches.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#fixed_addresses\">fixed_addresses</a> {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_HOLE\">FIX_HOLE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_VDSO\">FIX_VDSO</a>,", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VSYSCALL_LAST_PAGE\">VSYSCALL_LAST_PAGE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VSYSCALL_FIRST_PAGE\">VSYSCALL_FIRST_PAGE</a> = <a class=\"id\" href=\"#VSYSCALL_LAST_PAGE\">VSYSCALL_LAST_PAGE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    + ((<a class=\"id\" href=\"#VSYSCALL_END\">VSYSCALL_END</a>-<a class=\"id\" href=\"#VSYSCALL_START\">VSYSCALL_START</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) - 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VSYSCALL_HPET\">VSYSCALL_HPET</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_DBGP_BASE\">FIX_DBGP_BASE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_EARLYCON_MEM_BASE\">FIX_EARLYCON_MEM_BASE</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVIDE_OHCI1394_DMA_INIT\">CONFIG_PROVIDE_OHCI1394_DMA_INIT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_OHCI1394_BASE\">FIX_OHCI1394_BASE</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_APIC_BASE\">FIX_APIC_BASE</a>,<span class=\"ts\"/><span class=\"comment\">/* local (CPU) APIC) -- required for SMP or not */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_IO_APIC_BASE_0\">FIX_IO_APIC_BASE_0</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_IO_APIC_BASE_END\">FIX_IO_APIC_BASE_END</a> = <a class=\"id\" href=\"#FIX_IO_APIC_BASE_0\">FIX_IO_APIC_BASE_0</a> + <a class=\"id\" href=\"#MAX_IO_APICS\">MAX_IO_APICS</a> - 1,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_VISWS_APIC\">CONFIG_X86_VISWS_APIC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_CO_CPU\">FIX_CO_CPU</a>,<span class=\"ts\"/><span class=\"comment\">/* Cobalt timer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_CO_APIC\">FIX_CO_APIC</a>,<span class=\"ts\"/><span class=\"comment\">/* Cobalt APIC Redirection Table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_LI_PCIA\">FIX_LI_PCIA</a>,<span class=\"ts\"/><span class=\"comment\">/* Lithium PCI Bridge A */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_LI_PCIB\">FIX_LI_PCIB</a>,<span class=\"ts\"/><span class=\"comment\">/* Lithium PCI Bridge B */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_F00F_BUG\">CONFIG_X86_F00F_BUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_F00F_IDT\">FIX_F00F_IDT</a>,<span class=\"ts\"/><span class=\"comment\">/* Virtual mapping for IDT */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_CYCLONE_TIMER\">CONFIG_X86_CYCLONE_TIMER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_CYCLONE_TIMER\">FIX_CYCLONE_TIMER</a>, <span class=\"comment\">/*cyclone timer register*/</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_KMAP_BEGIN\">FIX_KMAP_BEGIN</a>,<span class=\"ts\"/><span class=\"comment\">/* reserved pte's for temporary kernel mappings */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_KMAP_END\">FIX_KMAP_END</a> = <a class=\"id\" href=\"#FIX_KMAP_BEGIN\">FIX_KMAP_BEGIN</a>+(<a class=\"id\" href=\"#KM_TYPE_NR\">KM_TYPE_NR</a>*<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)-1,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI_MMCONFIG\">CONFIG_PCI_MMCONFIG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_PCIE_MCFG\">FIX_PCIE_MCFG</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PARAVIRT\">CONFIG_PARAVIRT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_PARAVIRT_BOOTMAP\">FIX_PARAVIRT_BOOTMAP</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_TEXT_POKE1\">FIX_TEXT_POKE1</a>,<span class=\"ts\"/><span class=\"comment\">/* reserve 2 pages for text_poke() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_TEXT_POKE0\">FIX_TEXT_POKE0</a>, <span class=\"comment\">/* first page is last, because allocation is backward */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__end_of_permanent_fixed_addresses\">__end_of_permanent_fixed_addresses</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 256 temporary boot-time mappings, used by early_ioremap(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before ioremap() is functional.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If necessary we round it up to the next 256 pages boundary so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that we can have a single pgd entry and a single pte table:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NR_FIX_BTMAPS\">NR_FIX_BTMAPS</a><span class=\"ts\"/><span class=\"ts\"/>64", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIX_BTMAPS_SLOTS\">FIX_BTMAPS_SLOTS</a><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TOTAL_FIX_BTMAPS\">TOTAL_FIX_BTMAPS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#NR_FIX_BTMAPS\">NR_FIX_BTMAPS</a> * <a class=\"id\" href=\"#FIX_BTMAPS_SLOTS\">FIX_BTMAPS_SLOTS</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_BTMAP_END\">FIX_BTMAP_END</a> =", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#__end_of_permanent_fixed_addresses\">__end_of_permanent_fixed_addresses</a> ^", 
"<span class=\"ts\"/>  (<a class=\"id\" href=\"#__end_of_permanent_fixed_addresses\">__end_of_permanent_fixed_addresses</a> + <a class=\"id\" href=\"#TOTAL_FIX_BTMAPS\">TOTAL_FIX_BTMAPS</a> - 1)) &amp;", 
"<span class=\"ts\"/> -<a class=\"id\" href=\"#PTRS_PER_PTE\">PTRS_PER_PTE</a>", 
"<span class=\"ts\"/> ? <a class=\"id\" href=\"#__end_of_permanent_fixed_addresses\">__end_of_permanent_fixed_addresses</a> + <a class=\"id\" href=\"#TOTAL_FIX_BTMAPS\">TOTAL_FIX_BTMAPS</a> -", 
"<span class=\"ts\"/>   (<a class=\"id\" href=\"#__end_of_permanent_fixed_addresses\">__end_of_permanent_fixed_addresses</a> &amp; (<a class=\"id\" href=\"#TOTAL_FIX_BTMAPS\">TOTAL_FIX_BTMAPS</a> - 1))", 
"<span class=\"ts\"/> : <a class=\"id\" href=\"#__end_of_permanent_fixed_addresses\">__end_of_permanent_fixed_addresses</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_BTMAP_BEGIN\">FIX_BTMAP_BEGIN</a> = <a class=\"id\" href=\"#FIX_BTMAP_END\">FIX_BTMAP_END</a> + <a class=\"id\" href=\"#TOTAL_FIX_BTMAPS\">TOTAL_FIX_BTMAPS</a> - 1,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_WP_TEST\">FIX_WP_TEST</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INTEL_TXT\">CONFIG_INTEL_TXT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIX_TBOOT_BASE\">FIX_TBOOT_BASE</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__end_of_fixed_addresses\">__end_of_fixed_addresses</a>", 
"};", 
"", 
"", 
"extern void <a class=\"id\" href=\"#reserve_top_address\">reserve_top_address</a>(unsigned long <a class=\"id\" href=\"#reserve\">reserve</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXADDR_SIZE\">FIXADDR_SIZE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__end_of_permanent_fixed_addresses\">__end_of_permanent_fixed_addresses</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXADDR_BOOT_SIZE\">FIXADDR_BOOT_SIZE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__end_of_fixed_addresses\">__end_of_fixed_addresses</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXADDR_START\">FIXADDR_START</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#FIXADDR_TOP\">FIXADDR_TOP</a> - <a class=\"id\" href=\"#FIXADDR_SIZE\">FIXADDR_SIZE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXADDR_BOOT_START\">FIXADDR_BOOT_START</a><span class=\"ts\"/>(<a class=\"id\" href=\"#FIXADDR_TOP\">FIXADDR_TOP</a> - <a class=\"id\" href=\"#FIXADDR_BOOT_SIZE\">FIXADDR_BOOT_SIZE</a>)", 
"", 
"extern int <a class=\"id\" href=\"#fixmaps_set\">fixmaps_set</a>;", 
"", 
"extern <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#kmap_pte\">kmap_pte</a>;", 
"extern <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#kmap_prot\">kmap_prot</a>;", 
"extern <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pkmap_page_table\">pkmap_page_table</a>;", 
"", 
"void <a class=\"id\" href=\"#__native_set_fixmap\">__native_set_fixmap</a>(enum <a class=\"id\" href=\"#fixed_addresses\">fixed_addresses</a> <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>);", 
"void <a class=\"id\" href=\"#native_set_fixmap\">native_set_fixmap</a>(enum <a class=\"id\" href=\"#fixed_addresses\">fixed_addresses</a> <a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_PARAVIRT\">CONFIG_PARAVIRT</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__set_fixmap\">__set_fixmap</a>(enum <a class=\"id\" href=\"#fixed_addresses\">fixed_addresses</a> <a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_set_fixmap\">native_set_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_fixmap\">set_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#phys\">phys</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_fixmap\">__set_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some hardware wants to get fixmapped without caching.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_fixmap_nocache\">set_fixmap_nocache</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#phys\">phys</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_fixmap\">__set_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#PAGE_KERNEL_NOCACHE\">PAGE_KERNEL_NOCACHE</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#clear_fixmap\">clear_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_fixmap\">__set_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>, 0, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__fix_to_virt\">__fix_to_virt</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#FIXADDR_TOP\">FIXADDR_TOP</a> - ((<a class=\"id\" href=\"#x\">x</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__virt_to_fix\">__virt_to_fix</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#FIXADDR_TOP\">FIXADDR_TOP</a> - ((<a class=\"id\" href=\"#x\">x</a>)&amp;<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"", 
"extern void <a class=\"id\" href=\"#__this_fixmap_does_not_exist\">__this_fixmap_does_not_exist</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 'index to address' translation. If anyone tries to use the idx</span>", 
"<span class=\"comment\"> * directly without translation, we catch the bug with a NULL-deference</span>", 
"<span class=\"comment\"> * kernel oops. Illegal ranges of incoming indices are caught too.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> unsigned long <a class=\"id\" href=\"#fix_to_virt\">fix_to_virt</a>(const unsigned int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this branch gets completely eliminated after inlining,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * except when someone tries to use fixaddr indices in an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * illegal way. (such as mixing up address types or using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * out-of-range indices).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it doesn't get removed, the linker will complain</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * loudly with a reasonably clear error message..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#__end_of_fixed_addresses\">__end_of_fixed_addresses</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__this_fixmap_does_not_exist\">__this_fixmap_does_not_exist</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__fix_to_virt\">__fix_to_virt</a>(<a class=\"id\" href=\"#idx\">idx</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#virt_to_fix\">virt_to_fix</a>(const unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a> >= <a class=\"id\" href=\"#FIXADDR_TOP\">FIXADDR_TOP</a> || <a class=\"id\" href=\"#vaddr\">vaddr</a> &lt; <a class=\"id\" href=\"#FIXADDR_START\">FIXADDR_START</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__virt_to_fix\">__virt_to_fix</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !__ASSEMBLY__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_FIXMAP_H */</span>", 
];
xr_frag_insert('l/66/efe57e4752f65c4b5d179071ee194bad756482.xr', __xr_tmp);
