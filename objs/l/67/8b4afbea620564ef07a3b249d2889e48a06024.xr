var __xr_tmp = [
"<span class=\"comment\">/* calibrate.c: default delay calibration</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Excised from init/main.c</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timex\">timex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"unsigned long <a class=\"id\" href=\"#lpj_fine\">lpj_fine</a>;", 
"unsigned long <a class=\"id\" href=\"#preset_lpj\">preset_lpj</a>;", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#lpj_setup\">lpj_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preset_lpj\">preset_lpj</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>,<a class=\"id\" href=\"#NULL\">NULL</a>,0);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"lpj=\", <a class=\"id\" href=\"#lpj_setup\">lpj_setup</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_HAS_READ_CURRENT_TIMER\">ARCH_HAS_READ_CURRENT_TIMER</a>", 
"", 
"<span class=\"comment\">/* This routine uses the read_current_timer() routine and gets the</span>", 
"<span class=\"comment\"> * loops per jiffy directly, instead of guessing it using delay().</span>", 
"<span class=\"comment\"> * Also, this code tries to handle non-maskable asynchronous events</span>", 
"<span class=\"comment\"> * (like SMIs)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DELAY_CALIBRATION_TICKS\">DELAY_CALIBRATION_TICKS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#HZ\">HZ</a> &lt; 100) ? 1 : (<a class=\"id\" href=\"#HZ\">HZ</a>/100))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_DIRECT_CALIBRATION_RETRIES\">MAX_DIRECT_CALIBRATION_RETRIES</a><span class=\"ts\"/><span class=\"ts\"/>5", 
"", 
"static unsigned long <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#calibrate_delay_direct\">calibrate_delay_direct</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pre_start\">pre_start</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#post_start\">post_start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pre_end\">pre_end</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#post_end\">post_end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_jiffies\">start_jiffies</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timer_rate_min\">timer_rate_min</a>, <a class=\"id\" href=\"#timer_rate_max\">timer_rate_max</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#good_timer_sum\">good_timer_sum</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#good_timer_count\">good_timer_count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_current_timer\">read_current_timer</a>(&amp;<a class=\"id\" href=\"#pre_start\">pre_start</a>) &lt; 0 )", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A simple loop like</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>while ( jiffies &lt; start_jiffies+1)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>start = read_current_timer();</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will not do. As we don't really know whether jiffy switch</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * happened first or timer_value was read first. And some asynchronous</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * event can happen between these two events introducing errors in lpj.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So, we do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1. pre_start &lt;- When we are sure that jiffy switch hasn't happened</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2. check jiffy switch</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3. start &lt;- timer value before or after jiffy switch</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 4. post_start &lt;- When we are sure that jiffy switch has happened</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note, we don't know anything about order of 2 and 3.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now, by looking at post_start and pre_start difference, we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check whether any asynchronous event happened or not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_DIRECT_CALIBRATION_RETRIES\">MAX_DIRECT_CALIBRATION_RETRIES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pre_start\">pre_start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_current_timer\">read_current_timer</a>(&amp;<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_jiffies\">start_jiffies</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#jiffies\">jiffies</a> <= (<a class=\"id\" href=\"#start_jiffies\">start_jiffies</a> + 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pre_start\">pre_start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_current_timer\">read_current_timer</a>(&amp;<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_current_timer\">read_current_timer</a>(&amp;<a class=\"id\" href=\"#post_start\">post_start</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pre_end\">pre_end</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#post_start\">post_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#jiffies\">jiffies</a> <=", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#start_jiffies\">start_jiffies</a> + 1 + <a class=\"id\" href=\"#DELAY_CALIBRATION_TICKS\">DELAY_CALIBRATION_TICKS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pre_end\">pre_end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_current_timer\">read_current_timer</a>(&amp;<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_current_timer\">read_current_timer</a>(&amp;<a class=\"id\" href=\"#post_end\">post_end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_rate_max\">timer_rate_max</a> = (<a class=\"id\" href=\"#post_end\">post_end</a> - <a class=\"id\" href=\"#pre_start\">pre_start</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DELAY_CALIBRATION_TICKS\">DELAY_CALIBRATION_TICKS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer_rate_min\">timer_rate_min</a> = (<a class=\"id\" href=\"#pre_end\">pre_end</a> - <a class=\"id\" href=\"#post_start\">post_start</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DELAY_CALIBRATION_TICKS\">DELAY_CALIBRATION_TICKS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the upper limit and lower limit of the timer_rate is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * &gt;= 12.5% apart, redo calibration.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pre_start\">pre_start</a> != 0 && <a class=\"id\" href=\"#pre_end\">pre_end</a> != 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#timer_rate_max\">timer_rate_max</a> - <a class=\"id\" href=\"#timer_rate_min\">timer_rate_min</a>) &lt; (<a class=\"id\" href=\"#timer_rate_max\">timer_rate_max</a> >> 3)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#good_timer_count\">good_timer_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#good_timer_sum\">good_timer_sum</a> += <a class=\"id\" href=\"#timer_rate_max\">timer_rate_max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#good_timer_count\">good_timer_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#good_timer_sum\">good_timer_sum</a>/<a class=\"id\" href=\"#good_timer_count\">good_timer_count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"calibrate_delay_direct() failed to get a good \"", 
"<span class=\"ts\"/>       \"estimate for loops_per_jiffy.\\nProbably due to long platform interrupts. Consider using \\\"lpj=\\\" boot option.\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"static unsigned long <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#calibrate_delay_direct\">calibrate_delay_direct</a>(void) {return 0;}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the number of bits of precision for the loops_per_jiffy.  Each</span>", 
"<span class=\"comment\"> * bit takes on average 1.5/HZ seconds.  This (like the original) is a little</span>", 
"<span class=\"comment\"> * better than 1%</span>", 
"<span class=\"comment\"> * For the boot cpu we can skip the delay calibration and assign it a value</span>", 
"<span class=\"comment\"> * calculated based on the timer frequency.</span>", 
"<span class=\"comment\"> * For the rest of the CPUs we cannot assume that the timer frequency is same as</span>", 
"<span class=\"comment\"> * the cpu frequency, hence do the calibration for those.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LPS_PREC\">LPS_PREC</a> 8", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#calibrate_delay\">calibrate_delay</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ticks\">ticks</a>, <a class=\"id\" href=\"#loopbit\">loopbit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lps_precision\">lps_precision</a> = <a class=\"id\" href=\"#LPS_PREC\">LPS_PREC</a>;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#printed\">printed</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preset_lpj\">preset_lpj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> = <a class=\"id\" href=\"#preset_lpj\">preset_lpj</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#printed\">printed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Calibrating delay loop (skipped) \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"preset value.. \");", 
"<span class=\"ts\"/>} else if ((!<a class=\"id\" href=\"#printed\">printed</a>) && <a class=\"id\" href=\"#lpj_fine\">lpj_fine</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> = <a class=\"id\" href=\"#lpj_fine\">lpj_fine</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Calibrating delay loop (skipped), \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"value calculated using timer frequency.. \");", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> = <a class=\"id\" href=\"#calibrate_delay_direct\">calibrate_delay_direct</a>()) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#printed\">printed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Calibrating delay using timer \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"specific routine.. \");", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> = (1<<12);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#printed\">printed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Calibrating delay loop... \");", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> <<= 1) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* wait for \"start of\" clock tick */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ticks\">ticks</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#ticks\">ticks</a> == <a class=\"id\" href=\"#jiffies\">jiffies</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing */</span>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Go .. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ticks\">ticks</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__delay\">__delay</a>(<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ticks\">ticks</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#ticks\">ticks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ticks\">ticks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do a binary approximation to get loops_per_jiffy set to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * equal one clock (up to lps_precision bits)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loopbit\">loopbit</a> = <a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#lps_precision\">lps_precision</a>-- && (<a class=\"id\" href=\"#loopbit\">loopbit</a> >>= 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> |= <a class=\"id\" href=\"#loopbit\">loopbit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ticks\">ticks</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#ticks\">ticks</a> == <a class=\"id\" href=\"#jiffies\">jiffies</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing */</span>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ticks\">ticks</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__delay\">__delay</a>(<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jiffies\">jiffies</a> != <a class=\"id\" href=\"#ticks\">ticks</a>)<span class=\"ts\"/><span class=\"comment\">/* longer than 1 tick */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> &= ~<a class=\"id\" href=\"#loopbit\">loopbit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#printed\">printed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_cont\">pr_cont</a>(\"%lu.%02lu BogoMIPS (lpj=%lu)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>/(500000/<a class=\"id\" href=\"#HZ\">HZ</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>/(5000/<a class=\"id\" href=\"#HZ\">HZ</a>)) % 100, <a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printed\">printed</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
];
xr_frag_insert('l/67/8b4afbea620564ef07a3b249d2889e48a06024.xr', __xr_tmp);
