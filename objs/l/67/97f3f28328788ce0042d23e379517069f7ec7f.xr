var __xr_tmp = [
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>; <a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#PIDTYPE_MAX\">PIDTYPE_MAX</a>; ++<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#links\">links</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#node\">node</a>); <span class=\"comment\">/* not really needed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#links\">links</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#pid\">pid</a> = &amp;<a class=\"id\" href=\"#init_struct_pid\">init_struct_pid</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> * <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#fork_idle\">fork_idle</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> <a class=\"id\" href=\"#regs\">regs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#copy_process\">copy_process</a>(<a class=\"id\" href=\"#CLONE_VM\">CLONE_VM</a>, 0, <a class=\"id\" href=\"#idle_regs\">idle_regs</a>(&amp;<a class=\"id\" href=\"#regs\">regs</a>), 0, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#init_struct_pid\">init_struct_pid</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#task\">task</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_idle_pids\">init_idle_pids</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pids\">pids</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_idle\">init_idle</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Ok, this is the main fork-routine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It copies the process, and if successful kick-starts</span>", 
"<span class=\"comment\"> * it and waits for it to finish using the VM if required.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#do_fork\">do_fork</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>,", 
"<span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#stack_start\">stack_start</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#stack_size\">stack_size</a>,", 
"<span class=\"ts\"/>      int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#parent_tidptr\">parent_tidptr</a>,", 
"<span class=\"ts\"/>      int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#child_tidptr\">child_tidptr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#trace\">trace</a> = 0;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do some preliminary argument and permissions checking before we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * actually start allocating stuff</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWUSER\">CLONE_NEWUSER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hopefully this check will go away when userns support is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * complete</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>) || !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SETUID\">CAP_SETUID</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SETGID\">CAP_SETGID</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We hope to recycle these flags after 2.6.26</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_STOPPED\">CLONE_STOPPED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>static int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#count\">count</a> = 100;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; 0 && <a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#comm\">comm</a>[<a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"fork(): process `%s' used deprecated \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"clone flags 0x%lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_comm\">get_task_comm</a>(<a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#current\">current</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_STOPPED\">CLONE_STOPPED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When called from kernel_thread, don't do user tracing stuff.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a> = <a class=\"id\" href=\"#tracehook_prepare_clone\">tracehook_prepare_clone</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#copy_process\">copy_process</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#stack_start\">stack_start</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#stack_size\">stack_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#child_tidptr\">child_tidptr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#trace\">trace</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do this prior waking up the new thread - the thread pointer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might get invalid after that point, if the thread exits quickly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#vfork\">vfork</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_process_fork\">trace_sched_process_fork</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_PARENT_SETTID\">CLONE_PARENT_SETTID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#parent_tidptr\">parent_tidptr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_VFORK\">CLONE_VFORK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#vfork_done\">vfork_done</a> = &amp;<a class=\"id\" href=\"#vfork\">vfork</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#vfork\">vfork</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_finish_fork\">audit_finish_fork</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracehook_report_clone\">tracehook_report_clone</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We set PF_STARTING at creation in case tracing wants to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * use this to distinguish a fully live task from one that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hasn't gotten to tracehook_report_clone() yet.  Now we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * clear it and set the child going.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_STARTING\">PF_STARTING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_STOPPED\">CLONE_STOPPED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We'll start up with an immediate SIGSTOP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigaddset\">sigaddset</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pending\">pending</a>.<a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#SIGSTOP\">SIGSTOP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_task_state\">__set_task_state</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TASK_STOPPED\">TASK_STOPPED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_new_task\">wake_up_new_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#clone_flags\">clone_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracehook_report_clone_complete\">tracehook_report_clone_complete</a>(<a class=\"id\" href=\"#trace\">trace</a>, <a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_VFORK\">CLONE_VFORK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freezer_do_not_count\">freezer_do_not_count</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#vfork\">vfork</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freezer_count\">freezer_count</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracehook_report_vfork_done\">tracehook_report_vfork_done</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_MIN_MMSTRUCT_ALIGN\">ARCH_MIN_MMSTRUCT_ALIGN</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_MIN_MMSTRUCT_ALIGN\">ARCH_MIN_MMSTRUCT_ALIGN</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#sighand_ctor\">sighand_ctor</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#sighand\">sighand</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#signalfd_wqh\">signalfd_wqh</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#proc_caches_init\">proc_caches_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sighand_cachep\">sighand_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"sighand_cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>|<a class=\"id\" href=\"#SLAB_DESTROY_BY_RCU\">SLAB_DESTROY_BY_RCU</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a>, <a class=\"id\" href=\"#sighand_ctor\">sighand_ctor</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#signal_cachep\">signal_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"signal_cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>|<a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#files_cachep\">files_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"files_cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#files_struct\">files_struct</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>|<a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fs_cachep\">fs_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"fs_cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#fs_struct\">fs_struct</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>|<a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_cachep\">mm_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"mm_struct\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a>), <a class=\"id\" href=\"#ARCH_MIN_MMSTRUCT_ALIGN\">ARCH_MIN_MMSTRUCT_ALIGN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>|<a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a> = <a class=\"id\" href=\"#KMEM_CACHE\">KMEM_CACHE</a>(<a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmap_init\">mmap_init</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check constraints on flags passed to the unshare system call and</span>", 
"<span class=\"comment\"> * force unsharing of additional process context as appropriate.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#check_unshare_flags\">check_unshare_flags</a>(unsigned long *<a class=\"id\" href=\"#flags_ptr\">flags_ptr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If unsharing a thread from a thread group, must also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unshare vm.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#flags_ptr\">flags_ptr</a> &amp; <a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#flags_ptr\">flags_ptr</a> |= <a class=\"id\" href=\"#CLONE_VM\">CLONE_VM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If unsharing vm, must also unshare signal handlers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#flags_ptr\">flags_ptr</a> &amp; <a class=\"id\" href=\"#CLONE_VM\">CLONE_VM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#flags_ptr\">flags_ptr</a> |= <a class=\"id\" href=\"#CLONE_SIGHAND\">CLONE_SIGHAND</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If unsharing namespace, must also unshare filesystem information.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#flags_ptr\">flags_ptr</a> &amp; <a class=\"id\" href=\"#CLONE_NEWNS\">CLONE_NEWNS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#flags_ptr\">flags_ptr</a> |= <a class=\"id\" href=\"#CLONE_FS\">CLONE_FS</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unsharing of tasks created with CLONE_THREAD is not supported yet</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unshare_thread\">unshare_thread</a>(unsigned long <a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a> &amp; <a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unshare the filesystem structure if it is being shared</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unshare_fs\">unshare_fs</a>(unsigned long <a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>, struct <a class=\"id\" href=\"#fs_struct\">fs_struct</a> **<a class=\"id\" href=\"#new_fsp\">new_fsp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fs_struct\">fs_struct</a> *<a class=\"id\" href=\"#fs\">fs</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a> &amp; <a class=\"id\" href=\"#CLONE_FS\">CLONE_FS</a>) || !<a class=\"id\" href=\"#fs\">fs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't need lock here; in the worst case we'll do useless copy */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#users\">users</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#new_fsp\">new_fsp</a> = <a class=\"id\" href=\"#copy_fs_struct\">copy_fs_struct</a>(<a class=\"id\" href=\"#fs\">fs</a>);", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#new_fsp\">new_fsp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unsharing of sighand is not supported yet</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unshare_sighand\">unshare_sighand</a>(unsigned long <a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>, struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> **<a class=\"id\" href=\"#new_sighp\">new_sighp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#sigh\">sigh</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a> &amp; <a class=\"id\" href=\"#CLONE_SIGHAND\">CLONE_SIGHAND</a>) && <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sigh\">sigh</a>-><a class=\"id\" href=\"#count\">count</a>) &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unshare vm if it is being shared</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unshare_vm\">unshare_vm</a>(unsigned long <a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> **<a class=\"id\" href=\"#new_mmp\">new_mmp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a> &amp; <a class=\"id\" href=\"#CLONE_VM\">CLONE_VM</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#mm\">mm</a> && <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>) &gt; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unshare file descriptor table if it is being shared</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unshare_fd\">unshare_fd</a>(unsigned long <a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>, struct <a class=\"id\" href=\"#files_struct\">files_struct</a> **<a class=\"id\" href=\"#new_fdp\">new_fdp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a> &amp; <a class=\"id\" href=\"#CLONE_FILES\">CLONE_FILES</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#fd\">fd</a> && <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#fd\">fd</a>-><a class=\"id\" href=\"#count\">count</a>) &gt; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new_fdp\">new_fdp</a> = <a class=\"id\" href=\"#dup_fd\">dup_fd</a>(<a class=\"id\" href=\"#fd\">fd</a>, &amp;<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#new_fdp\">new_fdp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * unshare allows a process to 'unshare' part of the process</span>", 
"<span class=\"comment\"> * context which was originally shared using clone.  copy_*</span>", 
"<span class=\"comment\"> * functions used by do_fork() cannot be used here directly</span>", 
"<span class=\"comment\"> * because they modify an inactive task_struct that is being</span>", 
"<span class=\"comment\"> * constructed. Here we are modifying the current, active,</span>", 
"<span class=\"comment\"> * task_struct.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#unshare\">unshare</a>, unsigned long, <a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fs_struct\">fs_struct</a> *<a class=\"id\" href=\"#fs\">fs</a>, *<a class=\"id\" href=\"#new_fs\">new_fs</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#new_sigh\">new_sigh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, *<a class=\"id\" href=\"#new_mm\">new_mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#active_mm\">active_mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#fd\">fd</a>, *<a class=\"id\" href=\"#new_fd\">new_fd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#new_nsproxy\">new_nsproxy</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#do_sysvsem\">do_sysvsem</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_unshare_flags\">check_unshare_flags</a>(&amp;<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return -EINVAL for all unsupported flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a> &amp; ~(<a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>|<a class=\"id\" href=\"#CLONE_FS\">CLONE_FS</a>|<a class=\"id\" href=\"#CLONE_NEWNS\">CLONE_NEWNS</a>|<a class=\"id\" href=\"#CLONE_SIGHAND\">CLONE_SIGHAND</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CLONE_VM\">CLONE_VM</a>|<a class=\"id\" href=\"#CLONE_FILES\">CLONE_FILES</a>|<a class=\"id\" href=\"#CLONE_SYSVSEM\">CLONE_SYSVSEM</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CLONE_NEWUTS\">CLONE_NEWUTS</a>|<a class=\"id\" href=\"#CLONE_NEWIPC\">CLONE_NEWIPC</a>|<a class=\"id\" href=\"#CLONE_NEWNET\">CLONE_NEWNET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_unshare_out\">bad_unshare_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CLONE_NEWIPC must also detach from the undolist: after switching</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to a new ipc namespace, the semaphore arrays from the old</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * namespace are unreachable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a> &amp; (<a class=\"id\" href=\"#CLONE_NEWIPC\">CLONE_NEWIPC</a>|<a class=\"id\" href=\"#CLONE_SYSVSEM\">CLONE_SYSVSEM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_sysvsem\">do_sysvsem</a> = 1;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#unshare_thread\">unshare_thread</a>(<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_unshare_out\">bad_unshare_out</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#unshare_fs\">unshare_fs</a>(<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>, &amp;<a class=\"id\" href=\"#new_fs\">new_fs</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_unshare_cleanup_thread\">bad_unshare_cleanup_thread</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#unshare_sighand\">unshare_sighand</a>(<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>, &amp;<a class=\"id\" href=\"#new_sigh\">new_sigh</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_unshare_cleanup_fs\">bad_unshare_cleanup_fs</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#unshare_vm\">unshare_vm</a>(<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>, &amp;<a class=\"id\" href=\"#new_mm\">new_mm</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_unshare_cleanup_sigh\">bad_unshare_cleanup_sigh</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#unshare_fd\">unshare_fd</a>(<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>, &amp;<a class=\"id\" href=\"#new_fd\">new_fd</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_unshare_cleanup_vm\">bad_unshare_cleanup_vm</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#unshare_nsproxy_namespaces\">unshare_nsproxy_namespaces</a>(<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>, &amp;<a class=\"id\" href=\"#new_nsproxy\">new_nsproxy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fs\">new_fs</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_unshare_cleanup_fd\">bad_unshare_cleanup_fd</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fs\">new_fs</a> ||  <a class=\"id\" href=\"#new_mm\">new_mm</a> || <a class=\"id\" href=\"#new_fd\">new_fd</a> || <a class=\"id\" href=\"#do_sysvsem\">do_sysvsem</a> || <a class=\"id\" href=\"#new_nsproxy\">new_nsproxy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_sysvsem\">do_sysvsem</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * CLONE_SYSVSEM is equivalent to sys_exit().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exit_sem\">exit_sem</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_nsproxy\">new_nsproxy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#switch_task_namespaces\">switch_task_namespaces</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#new_nsproxy\">new_nsproxy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_nsproxy\">new_nsproxy</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fs\">new_fs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fs\">fs</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a> = <a class=\"id\" href=\"#new_fs\">new_fs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#users\">users</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fs\">new_fs</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fs\">new_fs</a> = <a class=\"id\" href=\"#fs\">fs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_mm\">new_mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active_mm\">active_mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#new_mm\">new_mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> = <a class=\"id\" href=\"#new_mm\">new_mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#activate_mm\">activate_mm</a>(<a class=\"id\" href=\"#active_mm\">active_mm</a>, <a class=\"id\" href=\"#new_mm\">new_mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_mm\">new_mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fd\">new_fd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#new_fd\">new_fd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fd\">new_fd</a> = <a class=\"id\" href=\"#fd\">fd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_nsproxy\">new_nsproxy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_nsproxy\">put_nsproxy</a>(<a class=\"id\" href=\"#new_nsproxy\">new_nsproxy</a>);", 
"", 
"<a class=\"id\" href=\"#bad_unshare_cleanup_fd\">bad_unshare_cleanup_fd</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fd\">new_fd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_files_struct\">put_files_struct</a>(<a class=\"id\" href=\"#new_fd\">new_fd</a>);", 
"", 
"<a class=\"id\" href=\"#bad_unshare_cleanup_vm\">bad_unshare_cleanup_vm</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_mm\">new_mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#new_mm\">new_mm</a>);", 
"", 
"<a class=\"id\" href=\"#bad_unshare_cleanup_sigh\">bad_unshare_cleanup_sigh</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_sigh\">new_sigh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#new_sigh\">new_sigh</a>-><a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#sighand_cachep\">sighand_cachep</a>, <a class=\"id\" href=\"#new_sigh\">new_sigh</a>);", 
"", 
"<a class=\"id\" href=\"#bad_unshare_cleanup_fs\">bad_unshare_cleanup_fs</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fs\">new_fs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_fs_struct\">free_fs_struct</a>(<a class=\"id\" href=\"#new_fs\">new_fs</a>);", 
"", 
"<a class=\"id\" href=\"#bad_unshare_cleanup_thread\">bad_unshare_cleanup_thread</a>:", 
"<a class=\"id\" href=\"#bad_unshare_out\">bad_unshare_out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Helper to unshare the files of the current task.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We don't want to expose copy_files internals to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the exec layer of the kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#unshare_files\">unshare_files</a>(struct <a class=\"id\" href=\"#files_struct\">files_struct</a> **<a class=\"id\" href=\"#displaced\">displaced</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#unshare_fd\">unshare_fd</a>(<a class=\"id\" href=\"#CLONE_FILES\">CLONE_FILES</a>, &amp;<a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> || !<a class=\"id\" href=\"#copy\">copy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#displaced\">displaced</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#displaced\">displaced</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/67/97f3f28328788ce0042d23e379517069f7ec7f.xr', __xr_tmp);
