var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * consolemap.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mapping from internal code (such as Latin-1 or Unicode or IBM PC code)</span>", 
"<span class=\"comment\"> * to font positions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * aeb, 950210</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Support for multiple unimaps by Jakub Jelinek &lt;jj@ultra.linux.cz&gt;, July 1998</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fix bug in inverse translation. Stanislav Voronyi &lt;stas@cnti.uanet.kharkov.ua&gt;, Dec 1998</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kd\">kd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#consolemap\">consolemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vt_kern\">vt_kern</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static unsigned short <a class=\"id\" href=\"#translations\">translations</a>[][256] = {", 
"  <span class=\"comment\">/* 8-bit Latin-1 mapped to Unicode -- trivial mapping */</span>", 
"  {", 
"    0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,", 
"    0x0008, 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f,", 
"    0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,", 
"    0x0018, 0x0019, 0x001a, 0x001b, 0x001c, 0x001d, 0x001e, 0x001f,", 
"    0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,", 
"    0x0028, 0x0029, 0x002a, 0x002b, 0x002c, 0x002d, 0x002e, 0x002f,", 
"    0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,", 
"    0x0038, 0x0039, 0x003a, 0x003b, 0x003c, 0x003d, 0x003e, 0x003f,", 
"    0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,", 
"    0x0048, 0x0049, 0x004a, 0x004b, 0x004c, 0x004d, 0x004e, 0x004f,", 
"    0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,", 
"    0x0058, 0x0059, 0x005a, 0x005b, 0x005c, 0x005d, 0x005e, 0x005f,", 
"    0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,", 
"    0x0068, 0x0069, 0x006a, 0x006b, 0x006c, 0x006d, 0x006e, 0x006f,", 
"    0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,", 
"    0x0078, 0x0079, 0x007a, 0x007b, 0x007c, 0x007d, 0x007e, 0x007f,", 
"    0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,", 
"    0x0088, 0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f,", 
"    0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,", 
"    0x0098, 0x0099, 0x009a, 0x009b, 0x009c, 0x009d, 0x009e, 0x009f,", 
"    0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6, 0x00a7,", 
"    0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af,", 
"    0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7,", 
"    0x00b8, 0x00b9, 0x00ba, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf,", 
"    0x00c0, 0x00c1, 0x00c2, 0x00c3, 0x00c4, 0x00c5, 0x00c6, 0x00c7,", 
"    0x00c8, 0x00c9, 0x00ca, 0x00cb, 0x00cc, 0x00cd, 0x00ce, 0x00cf,", 
"    0x00d0, 0x00d1, 0x00d2, 0x00d3, 0x00d4, 0x00d5, 0x00d6, 0x00d7,", 
"    0x00d8, 0x00d9, 0x00da, 0x00db, 0x00dc, 0x00dd, 0x00de, 0x00df,", 
"    0x00e0, 0x00e1, 0x00e2, 0x00e3, 0x00e4, 0x00e5, 0x00e6, 0x00e7,", 
"    0x00e8, 0x00e9, 0x00ea, 0x00eb, 0x00ec, 0x00ed, 0x00ee, 0x00ef,", 
"    0x00f0, 0x00f1, 0x00f2, 0x00f3, 0x00f4, 0x00f5, 0x00f6, 0x00f7,", 
"    0x00f8, 0x00f9, 0x00fa, 0x00fb, 0x00fc, 0x00fd, 0x00fe, 0x00ff", 
"  }, ", 
"  <span class=\"comment\">/* VT100 graphics mapped to Unicode */</span>", 
"  {", 
"    0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,", 
"    0x0008, 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f,", 
"    0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,", 
"    0x0018, 0x0019, 0x001a, 0x001b, 0x001c, 0x001d, 0x001e, 0x001f,", 
"    0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,", 
"    0x0028, 0x0029, 0x002a, 0x2192, 0x2190, 0x2191, 0x2193, 0x002f,", 
"    0x2588, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,", 
"    0x0038, 0x0039, 0x003a, 0x003b, 0x003c, 0x003d, 0x003e, 0x003f,", 
"    0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,", 
"    0x0048, 0x0049, 0x004a, 0x004b, 0x004c, 0x004d, 0x004e, 0x004f,", 
"    0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,", 
"    0x0058, 0x0059, 0x005a, 0x005b, 0x005c, 0x005d, 0x005e, 0x00a0,", 
"    0x25c6, 0x2592, 0x2409, 0x240c, 0x240d, 0x240a, 0x00b0, 0x00b1,", 
"    0x2591, 0x240b, 0x2518, 0x2510, 0x250c, 0x2514, 0x253c, 0x23ba,", 
"    0x23bb, 0x2500, 0x23bc, 0x23bd, 0x251c, 0x2524, 0x2534, 0x252c,", 
"    0x2502, 0x2264, 0x2265, 0x03c0, 0x2260, 0x00a3, 0x00b7, 0x007f,", 
"    0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,", 
"    0x0088, 0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f,", 
"    0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,", 
"    0x0098, 0x0099, 0x009a, 0x009b, 0x009c, 0x009d, 0x009e, 0x009f,", 
"    0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6, 0x00a7,", 
"    0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af,", 
"    0x00b0, 0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7,", 
"    0x00b8, 0x00b9, 0x00ba, 0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf,", 
"    0x00c0, 0x00c1, 0x00c2, 0x00c3, 0x00c4, 0x00c5, 0x00c6, 0x00c7,", 
"    0x00c8, 0x00c9, 0x00ca, 0x00cb, 0x00cc, 0x00cd, 0x00ce, 0x00cf,", 
"    0x00d0, 0x00d1, 0x00d2, 0x00d3, 0x00d4, 0x00d5, 0x00d6, 0x00d7,", 
"    0x00d8, 0x00d9, 0x00da, 0x00db, 0x00dc, 0x00dd, 0x00de, 0x00df,", 
"    0x00e0, 0x00e1, 0x00e2, 0x00e3, 0x00e4, 0x00e5, 0x00e6, 0x00e7,", 
"    0x00e8, 0x00e9, 0x00ea, 0x00eb, 0x00ec, 0x00ed, 0x00ee, 0x00ef,", 
"    0x00f0, 0x00f1, 0x00f2, 0x00f3, 0x00f4, 0x00f5, 0x00f6, 0x00f7,", 
"    0x00f8, 0x00f9, 0x00fa, 0x00fb, 0x00fc, 0x00fd, 0x00fe, 0x00ff", 
"  },", 
"  <span class=\"comment\">/* IBM Codepage 437 mapped to Unicode */</span>", 
"  {", 
"    0x0000, 0x263a, 0x263b, 0x2665, 0x2666, 0x2663, 0x2660, 0x2022, ", 
"    0x25d8, 0x25cb, 0x25d9, 0x2642, 0x2640, 0x266a, 0x266b, 0x263c,", 
"    0x25b6, 0x25c0, 0x2195, 0x203c, 0x00b6, 0x00a7, 0x25ac, 0x21a8,", 
"    0x2191, 0x2193, 0x2192, 0x2190, 0x221f, 0x2194, 0x25b2, 0x25bc,", 
"    0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,", 
"    0x0028, 0x0029, 0x002a, 0x002b, 0x002c, 0x002d, 0x002e, 0x002f,", 
"    0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,", 
"    0x0038, 0x0039, 0x003a, 0x003b, 0x003c, 0x003d, 0x003e, 0x003f,", 
"    0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,", 
"    0x0048, 0x0049, 0x004a, 0x004b, 0x004c, 0x004d, 0x004e, 0x004f,", 
"    0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,", 
"    0x0058, 0x0059, 0x005a, 0x005b, 0x005c, 0x005d, 0x005e, 0x005f,", 
"    0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,", 
"    0x0068, 0x0069, 0x006a, 0x006b, 0x006c, 0x006d, 0x006e, 0x006f,", 
"    0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,", 
"    0x0078, 0x0079, 0x007a, 0x007b, 0x007c, 0x007d, 0x007e, 0x2302,", 
"    0x00c7, 0x00fc, 0x00e9, 0x00e2, 0x00e4, 0x00e0, 0x00e5, 0x00e7,", 
"    0x00ea, 0x00eb, 0x00e8, 0x00ef, 0x00ee, 0x00ec, 0x00c4, 0x00c5,", 
"    0x00c9, 0x00e6, 0x00c6, 0x00f4, 0x00f6, 0x00f2, 0x00fb, 0x00f9,", 
"    0x00ff, 0x00d6, 0x00dc, 0x00a2, 0x00a3, 0x00a5, 0x20a7, 0x0192,", 
"    0x00e1, 0x00ed, 0x00f3, 0x00fa, 0x00f1, 0x00d1, 0x00aa, 0x00ba,", 
"    0x00bf, 0x2310, 0x00ac, 0x00bd, 0x00bc, 0x00a1, 0x00ab, 0x00bb,", 
"    0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,", 
"    0x2555, 0x2563, 0x2551, 0x2557, 0x255d, 0x255c, 0x255b, 0x2510,", 
"    0x2514, 0x2534, 0x252c, 0x251c, 0x2500, 0x253c, 0x255e, 0x255f,", 
"    0x255a, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256c, 0x2567,", 
"    0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256b,", 
"    0x256a, 0x2518, 0x250c, 0x2588, 0x2584, 0x258c, 0x2590, 0x2580,", 
"    0x03b1, 0x00df, 0x0393, 0x03c0, 0x03a3, 0x03c3, 0x00b5, 0x03c4,", 
"    0x03a6, 0x0398, 0x03a9, 0x03b4, 0x221e, 0x03c6, 0x03b5, 0x2229,", 
"    0x2261, 0x00b1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00f7, 0x2248,", 
"    0x00b0, 0x2219, 0x00b7, 0x221a, 0x207f, 0x00b2, 0x25a0, 0x00a0", 
"  }, ", 
"  <span class=\"comment\">/* User mapping -- default to codes for direct font mapping */</span>", 
"  {", 
"    0xf000, 0xf001, 0xf002, 0xf003, 0xf004, 0xf005, 0xf006, 0xf007,", 
"    0xf008, 0xf009, 0xf00a, 0xf00b, 0xf00c, 0xf00d, 0xf00e, 0xf00f,", 
"    0xf010, 0xf011, 0xf012, 0xf013, 0xf014, 0xf015, 0xf016, 0xf017,", 
"    0xf018, 0xf019, 0xf01a, 0xf01b, 0xf01c, 0xf01d, 0xf01e, 0xf01f,", 
"    0xf020, 0xf021, 0xf022, 0xf023, 0xf024, 0xf025, 0xf026, 0xf027,", 
"    0xf028, 0xf029, 0xf02a, 0xf02b, 0xf02c, 0xf02d, 0xf02e, 0xf02f,", 
"    0xf030, 0xf031, 0xf032, 0xf033, 0xf034, 0xf035, 0xf036, 0xf037,", 
"    0xf038, 0xf039, 0xf03a, 0xf03b, 0xf03c, 0xf03d, 0xf03e, 0xf03f,", 
"    0xf040, 0xf041, 0xf042, 0xf043, 0xf044, 0xf045, 0xf046, 0xf047,", 
"    0xf048, 0xf049, 0xf04a, 0xf04b, 0xf04c, 0xf04d, 0xf04e, 0xf04f,", 
"    0xf050, 0xf051, 0xf052, 0xf053, 0xf054, 0xf055, 0xf056, 0xf057,", 
"    0xf058, 0xf059, 0xf05a, 0xf05b, 0xf05c, 0xf05d, 0xf05e, 0xf05f,", 
"    0xf060, 0xf061, 0xf062, 0xf063, 0xf064, 0xf065, 0xf066, 0xf067,", 
"    0xf068, 0xf069, 0xf06a, 0xf06b, 0xf06c, 0xf06d, 0xf06e, 0xf06f,", 
"    0xf070, 0xf071, 0xf072, 0xf073, 0xf074, 0xf075, 0xf076, 0xf077,", 
"    0xf078, 0xf079, 0xf07a, 0xf07b, 0xf07c, 0xf07d, 0xf07e, 0xf07f,", 
"    0xf080, 0xf081, 0xf082, 0xf083, 0xf084, 0xf085, 0xf086, 0xf087,", 
"    0xf088, 0xf089, 0xf08a, 0xf08b, 0xf08c, 0xf08d, 0xf08e, 0xf08f,", 
"    0xf090, 0xf091, 0xf092, 0xf093, 0xf094, 0xf095, 0xf096, 0xf097,", 
"    0xf098, 0xf099, 0xf09a, 0xf09b, 0xf09c, 0xf09d, 0xf09e, 0xf09f,", 
"    0xf0a0, 0xf0a1, 0xf0a2, 0xf0a3, 0xf0a4, 0xf0a5, 0xf0a6, 0xf0a7,", 
"    0xf0a8, 0xf0a9, 0xf0aa, 0xf0ab, 0xf0ac, 0xf0ad, 0xf0ae, 0xf0af,", 
"    0xf0b0, 0xf0b1, 0xf0b2, 0xf0b3, 0xf0b4, 0xf0b5, 0xf0b6, 0xf0b7,", 
"    0xf0b8, 0xf0b9, 0xf0ba, 0xf0bb, 0xf0bc, 0xf0bd, 0xf0be, 0xf0bf,", 
"    0xf0c0, 0xf0c1, 0xf0c2, 0xf0c3, 0xf0c4, 0xf0c5, 0xf0c6, 0xf0c7,", 
"    0xf0c8, 0xf0c9, 0xf0ca, 0xf0cb, 0xf0cc, 0xf0cd, 0xf0ce, 0xf0cf,", 
"    0xf0d0, 0xf0d1, 0xf0d2, 0xf0d3, 0xf0d4, 0xf0d5, 0xf0d6, 0xf0d7,", 
"    0xf0d8, 0xf0d9, 0xf0da, 0xf0db, 0xf0dc, 0xf0dd, 0xf0de, 0xf0df,", 
"    0xf0e0, 0xf0e1, 0xf0e2, 0xf0e3, 0xf0e4, 0xf0e5, 0xf0e6, 0xf0e7,", 
"    0xf0e8, 0xf0e9, 0xf0ea, 0xf0eb, 0xf0ec, 0xf0ed, 0xf0ee, 0xf0ef,", 
"    0xf0f0, 0xf0f1, 0xf0f2, 0xf0f3, 0xf0f4, 0xf0f5, 0xf0f6, 0xf0f7,", 
"    0xf0f8, 0xf0f9, 0xf0fa, 0xf0fb, 0xf0fc, 0xf0fd, 0xf0fe, 0xf0ff", 
"  }", 
"};", 
"", 
"<span class=\"comment\">/* The standard kernel character-to-font mappings are not invertible</span>", 
"<span class=\"comment\">   -- this is just a best effort. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_GLYPH\">MAX_GLYPH</a> 512<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Max possible glyph value */</span>", 
"", 
"static int <a class=\"id\" href=\"#inv_translate\">inv_translate</a>[<a class=\"id\" href=\"#MAX_NR_CONSOLES\">MAX_NR_CONSOLES</a>];", 
"", 
"struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <span class=\"ts\"/><span class=\"ts\"/>**<a class=\"id\" href=\"#uni_pgdir\">uni_pgdir</a>[32];", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#refcount\">refcount</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a>;", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/>*<a class=\"id\" href=\"#inverse_translations\">inverse_translations</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#inverse_trans_unicode\">inverse_trans_unicode</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#readonly\">readonly</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#dflt\">dflt</a>;", 
"", 
"static void <a class=\"id\" href=\"#set_inverse_transl\">set_inverse_transl</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#conp\">conp</a>, struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#glyph\">glyph</a>;", 
"<span class=\"ts\"/>unsigned short *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#translations\">translations</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>) return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_translations\">inverse_translations</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_translations\">inverse_translations</a>[<a class=\"id\" href=\"#i\">i</a>] = (unsigned char *) ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#MAX_GLYPH\">MAX_GLYPH</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>) return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#q\">q</a>, 0, <a class=\"id\" href=\"#MAX_GLYPH\">MAX_GLYPH</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#E_TABSZ\">E_TABSZ</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#glyph\">glyph</a> = <a class=\"id\" href=\"#conv_uni_to_pc\">conv_uni_to_pc</a>(<a class=\"id\" href=\"#conp\">conp</a>, <a class=\"id\" href=\"#t\">t</a>[<a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#glyph\">glyph</a> >= 0 && <a class=\"id\" href=\"#glyph\">glyph</a> &lt; <a class=\"id\" href=\"#MAX_GLYPH\">MAX_GLYPH</a> && <a class=\"id\" href=\"#q\">q</a>[<a class=\"id\" href=\"#glyph\">glyph</a>] &lt; 32) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* prefer '-' above SHY etc. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>  <span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>[<a class=\"id\" href=\"#glyph\">glyph</a>] = <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_inverse_trans_unicode\">set_inverse_trans_unicode</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#conp\">conp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#glyph\">glyph</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> **<a class=\"id\" href=\"#p1\">p1</a>, *<a class=\"id\" href=\"#p2\">p2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>) return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_trans_unicode\">inverse_trans_unicode</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_trans_unicode\">inverse_trans_unicode</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#MAX_GLYPH\">MAX_GLYPH</a> * sizeof(<a class=\"id\" href=\"#u16\">u16</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#q\">q</a>, 0, <a class=\"id\" href=\"#MAX_GLYPH\">MAX_GLYPH</a> * sizeof(<a class=\"id\" href=\"#u16\">u16</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 32; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p1\">p1</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#uni_pgdir\">uni_pgdir</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p1\">p1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 32; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p2\">p2</a> = <a class=\"id\" href=\"#p1\">p1</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p2\">p2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; 64; <a class=\"id\" href=\"#k\">k</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#glyph\">glyph</a> = <a class=\"id\" href=\"#p2\">p2</a>[<a class=\"id\" href=\"#k\">k</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#glyph\">glyph</a> >= 0 && <a class=\"id\" href=\"#glyph\">glyph</a> &lt; <a class=\"id\" href=\"#MAX_GLYPH\">MAX_GLYPH</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       && <a class=\"id\" href=\"#q\">q</a>[<a class=\"id\" href=\"#glyph\">glyph</a>] &lt; 32)", 
"<span class=\"ts\"/><span class=\"ts\"/>  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>[<a class=\"id\" href=\"#glyph\">glyph</a>] = (<a class=\"id\" href=\"#i\">i</a> << 11) + (<a class=\"id\" href=\"#j\">j</a> << 6) + <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"unsigned short *<a class=\"id\" href=\"#set_translate\">set_translate</a>(int <a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inv_translate\">inv_translate</a>[<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_num\">vc_num</a>] = <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#translations\">translations</a>[<a class=\"id\" href=\"#m\">m</a>];", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Inverse translation is impossible for several reasons:</span>", 
"<span class=\"comment\"> * 1. The font&lt;-&gt;character maps are not 1-1.</span>", 
"<span class=\"comment\"> * 2. The text may have been written while a different translation map</span>", 
"<span class=\"comment\"> *    was active.</span>", 
"<span class=\"comment\"> * Still, it is now possible to a certain extent to cut and paste non-ASCII.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#inverse_translate\">inverse_translate</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#conp\">conp</a>, int <a class=\"id\" href=\"#glyph\">glyph</a>, int <a class=\"id\" href=\"#use_unicode\">use_unicode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#glyph\">glyph</a> &lt; 0 || <a class=\"id\" href=\"#glyph\">glyph</a> >= <a class=\"id\" href=\"#MAX_GLYPH\">MAX_GLYPH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>else if (!(<a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#conp\">conp</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#glyph\">glyph</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#use_unicode\">use_unicode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_trans_unicode\">inverse_trans_unicode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#glyph\">glyph</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_trans_unicode\">inverse_trans_unicode</a>[<a class=\"id\" href=\"#glyph\">glyph</a>];", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#inv_translate\">inv_translate</a>[<a class=\"id\" href=\"#conp\">conp</a>-><a class=\"id\" href=\"#vc_num\">vc_num</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_translations\">inverse_translations</a>[<a class=\"id\" href=\"#m\">m</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#glyph\">glyph</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_translations\">inverse_translations</a>[<a class=\"id\" href=\"#m\">m</a>][<a class=\"id\" href=\"#glyph\">glyph</a>];", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#inverse_translate\">inverse_translate</a>);", 
"", 
"static void <a class=\"id\" href=\"#update_user_maps\">update_user_maps</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_CONSOLES\">MAX_NR_CONSOLES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vc_cons_allocated\">vc_cons_allocated</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> && <a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#q\">q</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_inverse_transl\">set_inverse_transl</a>(<a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#USER_MAP\">USER_MAP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_inverse_trans_unicode\">set_inverse_trans_unicode</a>(<a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Load customizable translation table</span>", 
"<span class=\"comment\"> * arg points to a 256 byte translation table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The \"old\" variants are for translation directly to font (using the</span>", 
"<span class=\"comment\"> * 0xf000-0xf0ff \"transparent\" Unicodes) whereas the \"new\" variants set</span>", 
"<span class=\"comment\"> * Unicodes explicitly.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#con_set_trans_old\">con_set_trans_old</a>(unsigned char <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned short *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#translations\">translations</a>[<a class=\"id\" href=\"#USER_MAP\">USER_MAP</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#E_TABSZ\">E_TABSZ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a>&lt;<a class=\"id\" href=\"#E_TABSZ\">E_TABSZ</a> ; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#uc\">uc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#uc\">uc</a>, <a class=\"id\" href=\"#arg\">arg</a>+<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#UNI_DIRECT_BASE\">UNI_DIRECT_BASE</a> | <a class=\"id\" href=\"#uc\">uc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_user_maps\">update_user_maps</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#con_get_trans_old\">con_get_trans_old</a>(unsigned char <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/>unsigned short *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#translations\">translations</a>[<a class=\"id\" href=\"#USER_MAP\">USER_MAP</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#E_TABSZ\">E_TABSZ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a>&lt;<a class=\"id\" href=\"#E_TABSZ\">E_TABSZ</a> ; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/>  {", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ch\">ch</a> = <a class=\"id\" href=\"#conv_uni_to_pc\">conv_uni_to_pc</a>(<a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#fg_console\">fg_console</a>].<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#p\">p</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#__put_user\">__put_user</a>((<a class=\"id\" href=\"#ch\">ch</a> &amp; ~0xff) ? 0 : <a class=\"id\" href=\"#ch\">ch</a>, <a class=\"id\" href=\"#arg\">arg</a>+<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>  }", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#con_set_trans_new\">con_set_trans_new</a>(<a class=\"id\" href=\"#ushort\">ushort</a> <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned short *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#translations\">translations</a>[<a class=\"id\" href=\"#USER_MAP\">USER_MAP</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#E_TABSZ\">E_TABSZ</a>*sizeof(unsigned short)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a>&lt;<a class=\"id\" href=\"#E_TABSZ\">E_TABSZ</a> ; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#us\">us</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#us\">us</a>, <a class=\"id\" href=\"#arg\">arg</a>+<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#us\">us</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_user_maps\">update_user_maps</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#con_get_trans_new\">con_get_trans_new</a>(<a class=\"id\" href=\"#ushort\">ushort</a> <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned short *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#translations\">translations</a>[<a class=\"id\" href=\"#USER_MAP\">USER_MAP</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#E_TABSZ\">E_TABSZ</a>*sizeof(unsigned short)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a>&lt;<a class=\"id\" href=\"#E_TABSZ\">E_TABSZ</a> ; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/>  <a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#p\">p</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#arg\">arg</a>+<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unicode -&gt; current font conversion </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A font has at most 512 chars, usually 256.</span>", 
"<span class=\"comment\"> * But one font position may represent several Unicode chars.</span>", 
"<span class=\"comment\"> * A hashtable is somewhat of a pain to deal with, so use a</span>", 
"<span class=\"comment\"> * \"paged table\" instead.  Simulation has shown the memory cost of</span>", 
"<span class=\"comment\"> * this 3-level paged table scheme to be comparable to a hash table.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"extern <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#dfont_unicount\">dfont_unicount</a>[];<span class=\"ts\"/><span class=\"comment\">/* Defined in console_defmap.c */</span>", 
"extern <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#dfont_unitable\">dfont_unitable</a>[];", 
"", 
"static void <a class=\"id\" href=\"#con_release_unimap\">con_release_unimap</a>(struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> **<a class=\"id\" href=\"#p1\">p1</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#dflt\">dflt</a>) <a class=\"id\" href=\"#dflt\">dflt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;  ", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 32; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p1\">p1</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#uni_pgdir\">uni_pgdir</a>[<a class=\"id\" href=\"#i\">i</a>]) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 32; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p1\">p1</a>[<a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p1\">p1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#uni_pgdir\">uni_pgdir</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_translations\">inverse_translations</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_translations\">inverse_translations</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_trans_unicode\">inverse_trans_unicode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_trans_unicode\">inverse_trans_unicode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inverse_trans_unicode\">inverse_trans_unicode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#con_free_unimap\">con_free_unimap</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a> = 0;", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcount\">refcount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#con_release_unimap\">con_release_unimap</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"  ", 
"static int <a class=\"id\" href=\"#con_unify_unimap\">con_unify_unimap</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#conp\">conp</a>, struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_CONSOLES\">MAX_NR_CONSOLES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vc_cons_allocated\">vc_cons_allocated</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a> || <a class=\"id\" href=\"#q\">q</a> == <a class=\"id\" href=\"#p\">p</a> || <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sum\">sum</a> != <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sum\">sum</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 32; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> **<a class=\"id\" href=\"#p1\">p1</a>, **<a class=\"id\" href=\"#q1\">q1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p1\">p1</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#uni_pgdir\">uni_pgdir</a>[<a class=\"id\" href=\"#j\">j</a>]; <a class=\"id\" href=\"#q1\">q1</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#uni_pgdir\">uni_pgdir</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p1\">p1</a> && !<a class=\"id\" href=\"#q1\">q1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p1\">p1</a> || !<a class=\"id\" href=\"#q1\">q1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; 32; <a class=\"id\" href=\"#k\">k</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p1\">p1</a>[<a class=\"id\" href=\"#k\">k</a>] && !<a class=\"id\" href=\"#q1\">q1</a>[<a class=\"id\" href=\"#k\">k</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p1\">p1</a>[<a class=\"id\" href=\"#k\">k</a>] || !<a class=\"id\" href=\"#q1\">q1</a>[<a class=\"id\" href=\"#k\">k</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#p1\">p1</a>[<a class=\"id\" href=\"#k\">k</a>], <a class=\"id\" href=\"#q1\">q1</a>[<a class=\"id\" href=\"#k\">k</a>], 64*sizeof(<a class=\"id\" href=\"#u16\">u16</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &lt; 32)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a> == 32) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#refcount\">refcount</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#conp\">conp</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a> = (unsigned long)<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_release_unimap\">con_release_unimap</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#con_insert_unipair\">con_insert_unipair</a>(struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#u_short\">u_short</a> <a class=\"id\" href=\"#unicode\">unicode</a>, <a class=\"id\" href=\"#u_short\">u_short</a> <a class=\"id\" href=\"#fontpos\">fontpos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> **<a class=\"id\" href=\"#p1\">p1</a>, *<a class=\"id\" href=\"#p2\">p2</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#p1\">p1</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#uni_pgdir\">uni_pgdir</a>[<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#unicode\">unicode</a> >> 11])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p1\">p1</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#uni_pgdir\">uni_pgdir</a>[<a class=\"id\" href=\"#n\">n</a>] = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(32*sizeof(<a class=\"id\" href=\"#u16\">u16</a> *), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p1\">p1</a>) return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 32; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p1\">p1</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#p2\">p2</a> = <a class=\"id\" href=\"#p1\">p1</a>[<a class=\"id\" href=\"#n\">n</a> = (<a class=\"id\" href=\"#unicode\">unicode</a> >> 6) &amp; 0x1f])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p2\">p2</a> = <a class=\"id\" href=\"#p1\">p1</a>[<a class=\"id\" href=\"#n\">n</a>] = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(64*sizeof(<a class=\"id\" href=\"#u16\">u16</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p2\">p2</a>) return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#p2\">p2</a>, 0xff, 64*sizeof(<a class=\"id\" href=\"#u16\">u16</a>)); <span class=\"comment\">/* No glyphs for the characters (yet) */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p2\">p2</a>[<a class=\"id\" href=\"#unicode\">unicode</a> &amp; 0x3f] = <a class=\"id\" href=\"#fontpos\">fontpos</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sum\">sum</a> += (<a class=\"id\" href=\"#fontpos\">fontpos</a> << 20) + <a class=\"id\" href=\"#unicode\">unicode</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* ui is a leftover from using a hashtable, but might be used again */</span>", 
"int <a class=\"id\" href=\"#con_clear_unimap\">con_clear_unimap</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, struct <a class=\"id\" href=\"#unimapinit\">unimapinit</a> *<a class=\"id\" href=\"#ui\">ui</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a>;", 
"  ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#readonly\">readonly</a>) return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a> || --<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcount\">refcount</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcount\">refcount</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#refcount\">refcount</a>=1;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a> = (unsigned long)<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#dflt\">dflt</a>) <a class=\"id\" href=\"#dflt\">dflt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcount\">refcount</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sum\">sum</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_release_unimap\">con_release_unimap</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#con_set_unimap\">con_set_unimap</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#ushort\">ushort</a> <a class=\"id\" href=\"#ct\">ct</a>, struct <a class=\"id\" href=\"#unipair\">unipair</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0, <a class=\"id\" href=\"#err1\">err1</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#readonly\">readonly</a>) return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ct\">ct</a>) return 0;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcount\">refcount</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> **<a class=\"id\" href=\"#p1\">p1</a>, *<a class=\"id\" href=\"#p2\">p2</a>, <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err1\">err1</a> = <a class=\"id\" href=\"#con_clear_unimap\">con_clear_unimap</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err1\">err1</a>) return <a class=\"id\" href=\"#err1\">err1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#l\">l</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 32; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p1\">p1</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#uni_pgdir\">uni_pgdir</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 32; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p2\">p2</a> = <a class=\"id\" href=\"#p1\">p1</a>[<a class=\"id\" href=\"#j\">j</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; 64; <a class=\"id\" href=\"#k\">k</a>++, <a class=\"id\" href=\"#l\">l</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p2\">p2</a>[<a class=\"id\" href=\"#k\">k</a>] != 0xffff) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err1\">err1</a> = <a class=\"id\" href=\"#con_insert_unipair\">con_insert_unipair</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#p2\">p2</a>[<a class=\"id\" href=\"#k\">k</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err1\">err1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcount\">refcount</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a> = (unsigned long)<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_release_unimap\">con_release_unimap</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err1\">err1</a>; ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"              <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"              <span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#dflt\">dflt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dflt\">dflt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ct\">ct</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#unicode\">unicode</a>, <a class=\"id\" href=\"#fontpos\">fontpos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#unicode\">unicode</a>, &amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#unicode\">unicode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#fontpos\">fontpos</a>, &amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#fontpos\">fontpos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#err1\">err1</a> = <a class=\"id\" href=\"#con_insert_unipair\">con_insert_unipair</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#unicode\">unicode</a>,<a class=\"id\" href=\"#fontpos\">fontpos</a>)) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#err1\">err1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#con_unify_unimap\">con_unify_unimap</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= 3; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_inverse_transl\">set_inverse_transl</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#i\">i</a>); <span class=\"comment\">/* Update all inverse translations */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_inverse_trans_unicode\">set_inverse_trans_unicode</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"  ", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Loads the unimap for the hardware font, as defined in uni_hash.tbl.</span>", 
"<span class=\"comment\">   The representation used was the most compact I could come up</span>", 
"<span class=\"comment\">   with.  This routine is executed at sys_setup time, and when the</span>", 
"<span class=\"comment\">   PIO_FONTRESET ioctl is called. */</span>", 
"", 
"int <a class=\"id\" href=\"#con_set_default_unimap\">con_set_default_unimap</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#err\">err</a> = 0, <a class=\"id\" href=\"#err1\">err1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dflt\">dflt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#dflt\">dflt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dflt\">dflt</a>-><a class=\"id\" href=\"#refcount\">refcount</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a> = (unsigned long)<a class=\"id\" href=\"#dflt\">dflt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> && --<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcount\">refcount</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_release_unimap\">con_release_unimap</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"comment\">/* The default font is always 256 characters */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#con_clear_unimap\">con_clear_unimap</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) return <a class=\"id\" href=\"#err\">err</a>;", 
"    ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#dfont_unitable\">dfont_unitable</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 256; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#dfont_unicount\">dfont_unicount</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#j\">j</a>; <a class=\"id\" href=\"#j\">j</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err1\">err1</a> = <a class=\"id\" href=\"#con_insert_unipair\">con_insert_unipair</a>(<a class=\"id\" href=\"#p\">p</a>, *(<a class=\"id\" href=\"#q\">q</a>++), <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err1\">err1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#err1\">err1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#con_unify_unimap\">con_unify_unimap</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dflt\">dflt</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= 3; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_inverse_transl\">set_inverse_transl</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#i\">i</a>);<span class=\"ts\"/><span class=\"comment\">/* Update all inverse translations */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_inverse_trans_unicode\">set_inverse_trans_unicode</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dflt\">dflt</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#con_set_default_unimap\">con_set_default_unimap</a>);", 
"", 
"int <a class=\"id\" href=\"#con_copy_unimap\">con_copy_unimap</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#dst_vc\">dst_vc</a>, struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#src_vc\">src_vc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#src_vc\">src_vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#dst_vc\">dst_vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a> == *<a class=\"id\" href=\"#src_vc\">src_vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#con_free_unimap\">con_free_unimap</a>(<a class=\"id\" href=\"#dst_vc\">dst_vc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#src_vc\">src_vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#refcount\">refcount</a>++;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dst_vc\">dst_vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a> = (long)<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#con_get_unimap\">con_get_unimap</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#ushort\">ushort</a> <a class=\"id\" href=\"#ct\">ct</a>, <a class=\"id\" href=\"#ushort\">ushort</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uct\">uct</a>, struct <a class=\"id\" href=\"#unipair\">unipair</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#ect\">ect</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> **<a class=\"id\" href=\"#p1\">p1</a>, *<a class=\"id\" href=\"#p2\">p2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ect\">ect</a> = 0;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 32; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p1\">p1</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#uni_pgdir\">uni_pgdir</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 32; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p2\">p2</a> = *(<a class=\"id\" href=\"#p1\">p1</a>++)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; 64; <a class=\"id\" href=\"#k\">k</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p2\">p2</a> &lt; <a class=\"id\" href=\"#MAX_GLYPH\">MAX_GLYPH</a> && <a class=\"id\" href=\"#ect\">ect</a>++ &lt; <a class=\"id\" href=\"#ct\">ct</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user\">__put_user</a>((<a class=\"id\" href=\"#u_short\">u_short</a>)((<a class=\"id\" href=\"#i\">i</a><<11)+(<a class=\"id\" href=\"#j\">j</a><<6)+<a class=\"id\" href=\"#k\">k</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#unicode\">unicode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user\">__put_user</a>((<a class=\"id\" href=\"#u_short\">u_short</a>) *<a class=\"id\" href=\"#p2\">p2</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#fontpos\">fontpos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p2\">p2</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#ect\">ect</a>, <a class=\"id\" href=\"#uct\">uct</a>);", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#ect\">ect</a> <= <a class=\"id\" href=\"#ct\">ct</a>) ? 0 : -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#con_protect_unimap\">con_protect_unimap</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, int <a class=\"id\" href=\"#rdonly\">rdonly</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#readonly\">readonly</a> = <a class=\"id\" href=\"#rdonly\">rdonly</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Always use USER_MAP. These functions are used by the keyboard,</span>", 
"<span class=\"comment\"> * which shouldn't be affected by G0/G1 switching, etc.</span>", 
"<span class=\"comment\"> * If the user map still contains default values, i.e. the</span>", 
"<span class=\"comment\"> * direct-to-font mapping, then assume user is using Latin1.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* may be called during an interrupt */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#conv_8bit_to_uni\">conv_8bit_to_uni</a>(unsigned char <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#uni\">uni</a> = <a class=\"id\" href=\"#translations\">translations</a>[<a class=\"id\" href=\"#USER_MAP\">USER_MAP</a>][<a class=\"id\" href=\"#c\">c</a>];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#uni\">uni</a> == (0xf000 | <a class=\"id\" href=\"#c\">c</a>) ? <a class=\"id\" href=\"#c\">c</a> : <a class=\"id\" href=\"#uni\">uni</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#conv_uni_to_8bit\">conv_uni_to_8bit</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#uni\">uni</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#c\">c</a> = 0; <a class=\"id\" href=\"#c\">c</a> &lt; 0x100; <a class=\"id\" href=\"#c\">c</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#translations\">translations</a>[<a class=\"id\" href=\"#USER_MAP\">USER_MAP</a>][<a class=\"id\" href=\"#c\">c</a>] == <a class=\"id\" href=\"#uni\">uni</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#translations\">translations</a>[<a class=\"id\" href=\"#USER_MAP\">USER_MAP</a>][<a class=\"id\" href=\"#c\">c</a>] == (<a class=\"id\" href=\"#c\">c</a> | 0xf000) && <a class=\"id\" href=\"#uni\">uni</a> == <a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"int", 
"<a class=\"id\" href=\"#conv_uni_to_pc\">conv_uni_to_pc</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#conp\">conp</a>, long <a class=\"id\" href=\"#ucs\">ucs</a>) ", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> **<a class=\"id\" href=\"#p1\">p1</a>, *<a class=\"id\" href=\"#p2\">p2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"  ", 
"<span class=\"ts\"/><span class=\"comment\">/* Only 16-bit codes supported at this time */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ucs\">ucs</a> &gt; 0xffff)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -4;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not found */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#ucs\">ucs</a> &lt; 0x20)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not a printable character */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#ucs\">ucs</a> == 0xfeff || (<a class=\"id\" href=\"#ucs\">ucs</a> >= 0x200b && <a class=\"id\" href=\"#ucs\">ucs</a> <= 0x200f))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -2;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Zero-width space */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * UNI_DIRECT_BASE indicates the start of the region in the User Zone</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which always has a 1:1 mapping to the currently loaded font.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * UNI_DIRECT_MASK indicates the bit span of the region.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>else if ((<a class=\"id\" href=\"#ucs\">ucs</a> &amp; ~<a class=\"id\" href=\"#UNI_DIRECT_MASK\">UNI_DIRECT_MASK</a>) == <a class=\"id\" href=\"#UNI_DIRECT_BASE\">UNI_DIRECT_BASE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ucs\">ucs</a> &amp; <a class=\"id\" href=\"#UNI_DIRECT_MASK\">UNI_DIRECT_MASK</a>;", 
"  ", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#conp\">conp</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -3;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#uni_pagedir\">uni_pagedir</a> *)*<a class=\"id\" href=\"#conp\">conp</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>;  ", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#p1\">p1</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#uni_pgdir\">uni_pgdir</a>[<a class=\"id\" href=\"#ucs\">ucs</a> >> 11]) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#p2\">p2</a> = <a class=\"id\" href=\"#p1\">p1</a>[(<a class=\"id\" href=\"#ucs\">ucs</a> >> 6) &amp; 0x1f]) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#p2\">p2</a>[<a class=\"id\" href=\"#ucs\">ucs</a> &amp; 0x3f]) &lt; <a class=\"id\" href=\"#MAX_GLYPH\">MAX_GLYPH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/>return -4;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* not found */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is called at sys_setup time, after memory and the console are</span>", 
"<span class=\"comment\"> * initialized.  It must be possible to call kmalloc(..., GFP_KERNEL)</span>", 
"<span class=\"comment\"> * from this function, hence the call from sys_setup.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> ", 
"<a class=\"id\" href=\"#console_map_init\">console_map_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_CONSOLES\">MAX_NR_CONSOLES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vc_cons_allocated\">vc_cons_allocated</a>(<a class=\"id\" href=\"#i\">i</a>) && !*<a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#vc_uni_pagedir_loc\">vc_uni_pagedir_loc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_set_default_unimap\">con_set_default_unimap</a>(<a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#d\">d</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#con_copy_unimap\">con_copy_unimap</a>);", 
];
xr_frag_insert('l/67/f258b7fe0668e674ec633f574ade9215dfbeba.xr', __xr_tmp);
