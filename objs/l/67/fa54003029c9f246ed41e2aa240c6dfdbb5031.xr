var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Backlight Lowlevel Control Abstraction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2003,2004 Hewlett-Packard Company</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_BACKLIGHT_H\">_LINUX_BACKLIGHT_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_BACKLIGHT_H\">_LINUX_BACKLIGHT_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Notes on locking:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * backlight_device-&gt;ops_lock is an internal backlight lock protecting the</span>", 
"<span class=\"comment\"> * ops pointer and no code outside the core should need to touch it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Access to update_status() is serialised by the update_lock mutex since</span>", 
"<span class=\"comment\"> * most drivers seem to need this and historically get it wrong.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Most drivers don't need locking on their get_brightness() method.</span>", 
"<span class=\"comment\"> * If yours does, you need to implement it in the driver. You can use the</span>", 
"<span class=\"comment\"> * update_lock mutex if appropriate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any other use of the locks below is probably wrong.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum <a class=\"id\" href=\"#backlight_update_reason\">backlight_update_reason</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BACKLIGHT_UPDATE_HOTKEY\">BACKLIGHT_UPDATE_HOTKEY</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BACKLIGHT_UPDATE_SYSFS\">BACKLIGHT_UPDATE_SYSFS</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a>;", 
"struct <a class=\"id\" href=\"#fb_info\">fb_info</a>;", 
"", 
"struct <a class=\"id\" href=\"#backlight_ops\">backlight_ops</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#options\">options</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BL_CORE_SUSPENDRESUME\">BL_CORE_SUSPENDRESUME</a><span class=\"ts\"/>(1 << 0)", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Notify the backlight driver some property has changed */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#update_status\">update_status</a>)(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *);", 
"<span class=\"ts\"/><span class=\"comment\">/* Return the current backlight brightness (accounting for power,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   fb_blank etc.) */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get_brightness\">get_brightness</a>)(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *);", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if given framebuffer device is the one bound to this backlight;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   return 0 if not, !=0 if it is. If NULL, backlight always matches the fb. */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#check_fb\">check_fb</a>)(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *, struct <a class=\"id\" href=\"#fb_info\">fb_info</a> *);", 
"};", 
"", 
"<span class=\"comment\">/* This structure defines all the properties of a backlight */</span>", 
"struct <a class=\"id\" href=\"#backlight_properties\">backlight_properties</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Current User requested brightness (0 - max_brightness) */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#brightness\">brightness</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Maximal value for brightness (read-only) */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_brightness\">max_brightness</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Current FB Power mode (0: full on, 1..3: power saving</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   modes; 4: full off), see FB_BLANK_XXX */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#power\">power</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* FB Blanking active? (values as for power) */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Due to be removed, please use (state &amp; BL_CORE_FBBLANK) */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fb_blank\">fb_blank</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Flags used to signal drivers of state changes */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Upper 4 bits are reserved for driver internal use */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#state\">state</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BL_CORE_SUSPENDED\">BL_CORE_SUSPENDED</a><span class=\"ts\"/>(1 << 0)<span class=\"ts\"/><span class=\"comment\">/* backlight is suspended */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BL_CORE_FBBLANK\">BL_CORE_FBBLANK</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 1)<span class=\"ts\"/><span class=\"comment\">/* backlight is under an fb blank event */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BL_CORE_DRIVER4\">BL_CORE_DRIVER4</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 28)<span class=\"ts\"/><span class=\"comment\">/* reserved for driver specific use */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BL_CORE_DRIVER3\">BL_CORE_DRIVER3</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 29)<span class=\"ts\"/><span class=\"comment\">/* reserved for driver specific use */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BL_CORE_DRIVER2\">BL_CORE_DRIVER2</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 30)<span class=\"ts\"/><span class=\"comment\">/* reserved for driver specific use */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BL_CORE_DRIVER1\">BL_CORE_DRIVER1</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 31)<span class=\"ts\"/><span class=\"comment\">/* reserved for driver specific use */</span>", 
"", 
"};", 
"", 
"struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Backlight properties */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_properties\">backlight_properties</a> <a class=\"id\" href=\"#props\">props</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Serialise access to update_status method */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#update_lock\">update_lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This protects the 'ops' field. If 'ops' is NULL, the driver that</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   registered this device has been unloaded, and if class_get_devdata()</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   points to something in the body of that driver, it is also invalid. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#ops_lock\">ops_lock</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#backlight_ops\">backlight_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The framebuffer notifier block */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#fb_notif\">fb_notif</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#dev\">dev</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#backlight_update_status\">backlight_update_status</a>(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#update_lock\">update_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a> && <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#update_status\">update_status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#update_status\">update_status</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#update_lock\">update_lock</a>);", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#backlight_device_register\">backlight_device_register</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#devdata\">devdata</a>, const struct <a class=\"id\" href=\"#backlight_ops\">backlight_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#backlight_properties\">backlight_properties</a> *<a class=\"id\" href=\"#props\">props</a>);", 
"extern void <a class=\"id\" href=\"#backlight_device_unregister\">backlight_device_unregister</a>(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a>);", 
"extern void <a class=\"id\" href=\"#backlight_force_update\">backlight_force_update</a>(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   enum <a class=\"id\" href=\"#backlight_update_reason\">backlight_update_reason</a> <a class=\"id\" href=\"#reason\">reason</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_backlight_device\">to_backlight_device</a>(<a class=\"id\" href=\"#obj\">obj</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#obj\">obj</a>, struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void * <a class=\"id\" href=\"#bl_get_data\">bl_get_data</a>(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bl_dev\">bl_dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(&amp;<a class=\"id\" href=\"#bl_dev\">bl_dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#generic_bl_info\">generic_bl_info</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_intensity\">max_intensity</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#default_intensity\">default_intensity</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#limit_mask\">limit_mask</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_bl_intensity\">set_bl_intensity</a>)(int <a class=\"id\" href=\"#intensity\">intensity</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#kick_battery\">kick_battery</a>)(void);", 
"};", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/67/fa54003029c9f246ed41e2aa240c6dfdbb5031.xr', __xr_tmp);
