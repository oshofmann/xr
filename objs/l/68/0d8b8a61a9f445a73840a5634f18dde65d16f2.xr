var __xr_tmp = [
"<span class=\"comment\"> * Returns the ancestor dentry of p2 which is a child of p1, if p1 is</span>", 
"<span class=\"comment\"> * an ancestor of p2, else NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_ancestor\">d_ancestor</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#p1\">p1</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#p2\">p2</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p2\">p2</a>; !<a class=\"id\" href=\"#IS_ROOT\">IS_ROOT</a>(<a class=\"id\" href=\"#p\">p</a>); <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> == <a class=\"id\" href=\"#p1\">p1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This helper attempts to cope with remotely renamed directories</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It assumes that the caller is already holding</span>", 
"<span class=\"comment\"> * dentry-&gt;d_parent-&gt;d_inode-&gt;i_mutex and the dcache_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: If ever the locking in lock_rename() changes, then please</span>", 
"<span class=\"comment\"> * remember to update this too...</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#__d_unalias\">__d_unalias</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#alias\">alias</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#m1\">m1</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#m2\">m2</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If alias and dentry share a parent, then no extra locks required */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alias\">alias</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> == <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unalias\">out_unalias</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for loops */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ELOOP\">ELOOP</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d_ancestor\">d_ancestor</a>(<a class=\"id\" href=\"#alias\">alias</a>, <a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* See lock_rename() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EBUSY\">EBUSY</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mutex_trylock\">mutex_trylock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a>-><a class=\"id\" href=\"#s_vfs_rename_mutex\">s_vfs_rename_mutex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m1\">m1</a> = &amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a>-><a class=\"id\" href=\"#s_vfs_rename_mutex\">s_vfs_rename_mutex</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mutex_trylock\">mutex_trylock</a>(&amp;<a class=\"id\" href=\"#alias\">alias</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m2\">m2</a> = &amp;<a class=\"id\" href=\"#alias\">alias</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>;", 
"<a class=\"id\" href=\"#out_unalias\">out_unalias</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_move_locked\">d_move_locked</a>(<a class=\"id\" href=\"#alias\">alias</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#alias\">alias</a>;", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m2\">m2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(<a class=\"id\" href=\"#m2\">m2</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m1\">m1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(<a class=\"id\" href=\"#m1\">m1</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prepare an anonymous dentry for life in the superblock's dentry tree as a</span>", 
"<span class=\"comment\"> * named dentry in place of the dentry to be replaced.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__d_materialise_dentry\">__d_materialise_dentry</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#anon\">anon</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dparent\">dparent</a>, *<a class=\"id\" href=\"#aparent\">aparent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#switch_names\">switch_names</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#anon\">anon</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap\">swap</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#anon\">anon</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#hash\">hash</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dparent\">dparent</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aparent\">aparent</a> = <a class=\"id\" href=\"#anon\">anon</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> = (<a class=\"id\" href=\"#aparent\">aparent</a> == <a class=\"id\" href=\"#anon\">anon</a>) ? <a class=\"id\" href=\"#dentry\">dentry</a> : <a class=\"id\" href=\"#aparent\">aparent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ROOT\">IS_ROOT</a>(<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>, &amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon\">anon</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> = (<a class=\"id\" href=\"#dparent\">dparent</a> == <a class=\"id\" href=\"#dentry\">dentry</a>) ? <a class=\"id\" href=\"#anon\">anon</a> : <a class=\"id\" href=\"#dparent\">dparent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#anon\">anon</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ROOT\">IS_ROOT</a>(<a class=\"id\" href=\"#anon\">anon</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#anon\">anon</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>, &amp;<a class=\"id\" href=\"#anon\">anon</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#anon\">anon</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon\">anon</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> &= ~<a class=\"id\" href=\"#DCACHE_DISCONNECTED\">DCACHE_DISCONNECTED</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_materialise_unique - introduce an inode into the tree</span>", 
"<span class=\"comment\"> * @dentry: candidate dentry</span>", 
"<span class=\"comment\"> * @inode: inode to bind to the dentry, to which aliases may be attached</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Introduces an dentry into the tree, substituting an extant disconnected</span>", 
"<span class=\"comment\"> * root directory alias in its place if there is one</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_materialise_unique\">d_materialise_unique</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#actual\">actual</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#d_unhashed\">d_unhashed</a>(<a class=\"id\" href=\"#dentry\">dentry</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#actual\">actual</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__d_instantiate\">__d_instantiate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_lock\">found_lock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#alias\">alias</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Does an aliased dentry already exist? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alias\">alias</a> = <a class=\"id\" href=\"#__d_find_alias\">__d_find_alias</a>(<a class=\"id\" href=\"#inode\">inode</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alias\">alias</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#actual\">actual</a> = <a class=\"id\" href=\"#alias\">alias</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Is this an anonymous mountpoint that we could splice</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * into our tree? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ROOT\">IS_ROOT</a>(<a class=\"id\" href=\"#alias\">alias</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#alias\">alias</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__d_materialise_dentry\">__d_materialise_dentry</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#alias\">alias</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__d_drop\">__d_drop</a>(<a class=\"id\" href=\"#alias\">alias</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Nope, but we must(!) avoid directory aliasing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#actual\">actual</a> = <a class=\"id\" href=\"#__d_unalias\">__d_unalias</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#alias\">alias</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#actual\">actual</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#alias\">alias</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nolock\">out_nolock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add a unique reference */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#actual\">actual</a> = <a class=\"id\" href=\"#__d_instantiate_unique\">__d_instantiate_unique</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#actual\">actual</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#actual\">actual</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#d_unhashed\">d_unhashed</a>(<a class=\"id\" href=\"#actual\">actual</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#shouldnt_be_hashed\">shouldnt_be_hashed</a>;", 
"", 
"<a class=\"id\" href=\"#found_lock\">found_lock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#actual\">actual</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_d_rehash\">_d_rehash</a>(<a class=\"id\" href=\"#actual\">actual</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#actual\">actual</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<a class=\"id\" href=\"#out_nolock\">out_nolock</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#actual\">actual</a> == <a class=\"id\" href=\"#dentry\">dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_d_instantiate\">security_d_instantiate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#actual\">actual</a>;", 
"", 
"<a class=\"id\" href=\"#shouldnt_be_hashed\">shouldnt_be_hashed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#d_materialise_unique\">d_materialise_unique</a>);", 
"", 
"static int <a class=\"id\" href=\"#prepend\">prepend</a>(char **<a class=\"id\" href=\"#buffer\">buffer</a>, int *<a class=\"id\" href=\"#buflen\">buflen</a>, const char *<a class=\"id\" href=\"#str\">str</a>, int <a class=\"id\" href=\"#namelen\">namelen</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buflen\">buflen</a> -= <a class=\"id\" href=\"#namelen\">namelen</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#buflen\">buflen</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENAMETOOLONG\">ENAMETOOLONG</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buffer\">buffer</a> -= <a class=\"id\" href=\"#namelen\">namelen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(*<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#namelen\">namelen</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#prepend_name\">prepend_name</a>(char **<a class=\"id\" href=\"#buffer\">buffer</a>, int *<a class=\"id\" href=\"#buflen\">buflen</a>, struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#prepend\">prepend</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, <a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Prepend path string to a buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @path: the dentry/vfsmount to report</span>", 
"<span class=\"comment\"> * @root: root vfsmnt/dentry (may be modified by this function)</span>", 
"<span class=\"comment\"> * @buffer: pointer to the end of the buffer</span>", 
"<span class=\"comment\"> * @buflen: pointer to buffer length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller holds the dcache_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If path is not reachable from the supplied root, then the value of</span>", 
"<span class=\"comment\"> * root is changed (without modifying refcounts).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#prepend_path\">prepend_path</a>(const struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char **<a class=\"id\" href=\"#buffer\">buffer</a>, int *<a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#vfsmnt\">vfsmnt</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#slash\">slash</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_lock\">br_read_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#dentry\">dentry</a> != <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#dentry\">dentry</a> || <a class=\"id\" href=\"#vfsmnt\">vfsmnt</a> != <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a> == <a class=\"id\" href=\"#vfsmnt\">vfsmnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a> || <a class=\"id\" href=\"#IS_ROOT\">IS_ROOT</a>(<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Global root? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vfsmnt\">vfsmnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> == <a class=\"id\" href=\"#vfsmnt\">vfsmnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#global_root\">global_root</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#vfsmnt\">vfsmnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfsmnt\">vfsmnt</a> = <a class=\"id\" href=\"#vfsmnt\">vfsmnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#prepend_name\">prepend_name</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, &amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#prepend\">prepend</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, \"/\", 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slash\">slash</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a> && !<a class=\"id\" href=\"#slash\">slash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#prepend\">prepend</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, \"/\", 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_unlock\">br_read_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<a class=\"id\" href=\"#global_root\">global_root</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Filesystems needing to implement special \"root names\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should do so with -&gt;d_dname()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ROOT\">IS_ROOT</a>(<a class=\"id\" href=\"#dentry\">dentry</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#len\">len</a> != 1 || <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a>[0] != '/')) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"Root dentry has weird name <%.*s>\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     (int) <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#vfsmnt\">vfsmnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __d_path - return the path of a dentry</span>", 
"<span class=\"comment\"> * @path: the dentry/vfsmount to report</span>", 
"<span class=\"comment\"> * @root: root vfsmnt/dentry (may be modified by this function)</span>", 
"<span class=\"comment\"> * @buf: buffer to return value in</span>", 
"<span class=\"comment\"> * @buflen: buffer length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Convert a dentry into an ASCII path name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer into the buffer or an error code if the</span>", 
"<span class=\"comment\"> * path was too long.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * \"buflen\" should be positive. Caller holds the dcache_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If path is not reachable from the supplied root, then the value of</span>", 
"<span class=\"comment\"> * root is changed (without modifying refcounts).</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#__d_path\">__d_path</a>(const struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/>       char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepend\">prepend</a>(&amp;<a class=\"id\" href=\"#res\">res</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>, \"\\0\", 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#prepend_path\">prepend_path</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#root\">root</a>, &amp;<a class=\"id\" href=\"#res\">res</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * same as __d_path but appends \"(deleted)\" for unlinked files.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#path_with_deleted\">path_with_deleted</a>(const struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char **<a class=\"id\" href=\"#buf\">buf</a>, int *<a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepend\">prepend</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, \"\\0\", 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d_unlinked\">d_unlinked</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#prepend\">prepend</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, \" (deleted)\", 10);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#prepend_path\">prepend_path</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#prepend_unreachable\">prepend_unreachable</a>(char **<a class=\"id\" href=\"#buffer\">buffer</a>, int *<a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#prepend\">prepend</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, \"(unreachable)\", 13);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_path - return the path of a dentry</span>", 
"<span class=\"comment\"> * @path: path to report</span>", 
"<span class=\"comment\"> * @buf: buffer to return value in</span>", 
"<span class=\"comment\"> * @buflen: buffer length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Convert a dentry into an ASCII path name. If the entry has been deleted</span>", 
"<span class=\"comment\"> * the string \" (deleted)\" is appended. Note that this is ambiguous.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer into the buffer or an error code if the path was</span>", 
"<span class=\"comment\"> * too long. Note: Callers should use the returned pointer, not the passed</span>", 
"<span class=\"comment\"> * in buffer, to use the name! The implementation often starts at an offset</span>", 
"<span class=\"comment\"> * into the buffer, and may leave 0 bytes at the start.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * \"buflen\" should be positive.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#d_path\">d_path</a>(const struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have various synthetic filesystems that never get mounted.  On</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * these filesystems dentries are never used for lookup purposes, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thus don't need to be hashed.  They also don't need a name until a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * user wants to identify the object in /proc/pid/fd/.  The little hack</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * below allows us to generate a name for these objects on demand:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a> && <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_dname\">d_dname</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_dname\">d_dname</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_fs_root\">get_fs_root</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>, &amp;<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#path_with_deleted\">path_with_deleted</a>(<a class=\"id\" href=\"#path\">path</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#res\">res</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_path\">d_path</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_path_with_unreachable - return the path of a dentry</span>", 
"<span class=\"comment\"> * @path: path to report</span>", 
"<span class=\"comment\"> * @buf: buffer to return value in</span>", 
"<span class=\"comment\"> * @buflen: buffer length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The difference from d_path() is that this prepends \"(unreachable)\"</span>", 
"<span class=\"comment\"> * to paths which are unreachable from the current process' root.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#d_path_with_unreachable\">d_path_with_unreachable</a>(const struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a> && <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_dname\">d_dname</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_dname\">d_dname</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_fs_root\">get_fs_root</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>, &amp;<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#path_with_deleted\">path_with_deleted</a>(<a class=\"id\" href=\"#path\">path</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#res\">res</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a> && !<a class=\"id\" href=\"#path_equal\">path_equal</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#root\">root</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#prepend_unreachable\">prepend_unreachable</a>(&amp;<a class=\"id\" href=\"#res\">res</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> =  <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper function for dentry_operations.d_dname() members</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#dynamic_dname\">dynamic_dname</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#temp\">temp</a>[64];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sz\">sz</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#temp\">temp</a>, sizeof(<a class=\"id\" href=\"#temp\">temp</a>), <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sz\">sz</a> &gt; sizeof(<a class=\"id\" href=\"#temp\">temp</a>) || <a class=\"id\" href=\"#sz\">sz</a> &gt; <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENAMETOOLONG\">ENAMETOOLONG</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> += <a class=\"id\" href=\"#buflen\">buflen</a> - <a class=\"id\" href=\"#sz\">sz</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#temp\">temp</a>, <a class=\"id\" href=\"#sz\">sz</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write full pathname from the root of the filesystem into the buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#__dentry_path\">__dentry_path</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepend\">prepend</a>(&amp;<a class=\"id\" href=\"#end\">end</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>, \"\\0\", 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buflen\">buflen</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Elong\">Elong</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Get '/' right */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#end\">end</a>-1;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#retval\">retval</a> = '/';", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#IS_ROOT\">IS_ROOT</a>(<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#prepend_name\">prepend_name</a>(&amp;<a class=\"id\" href=\"#end\">end</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>, &amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>) != 0) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#prepend\">prepend</a>(&amp;<a class=\"id\" href=\"#end\">end</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>, \"/\", 1) != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Elong\">Elong</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<a class=\"id\" href=\"#Elong\">Elong</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENAMETOOLONG\">ENAMETOOLONG</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__dentry_path\">__dentry_path</a>);", 
"", 
"char *<a class=\"id\" href=\"#dentry_path\">dentry_path</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d_unlinked\">d_unlinked</a>(<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prepend\">prepend</a>(&amp;<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>, \"//deleted\", 10) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Elong\">Elong</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#__dentry_path\">__dentry_path</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#retval\">retval</a>) && <a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = '/';<span class=\"ts\"/><span class=\"comment\">/* restore '/' overriden with '\\0' */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<a class=\"id\" href=\"#Elong\">Elong</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENAMETOOLONG\">ENAMETOOLONG</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE! The user-level library version returns a</span>", 
"<span class=\"comment\"> * character pointer. The kernel system call just</span>", 
"<span class=\"comment\"> * returns the length of the buffer filled (which</span>", 
"<span class=\"comment\"> * includes the ending '\\0' character), or a negative</span>", 
"<span class=\"comment\"> * error value. So libc would do something like</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>char *getcwd(char * buf, size_t size)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>{</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>int retval;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>retval = sys_getcwd(buf, size);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>if (retval &gt;= 0)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return buf;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>errno = -retval;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>return NULL;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>}</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#getcwd\">getcwd</a>, char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#buf\">buf</a>, unsigned long, <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#pwd\">pwd</a>, <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#page\">page</a> = (char *) <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_USER\">GFP_USER</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_fs_root_and_pwd\">get_fs_root_and_pwd</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>, &amp;<a class=\"id\" href=\"#root\">root</a>, &amp;<a class=\"id\" href=\"#pwd\">pwd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#d_unlinked\">d_unlinked</a>(<a class=\"id\" href=\"#pwd\">pwd</a>.<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#cwd\">cwd</a> = <a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#buflen\">buflen</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepend\">prepend</a>(&amp;<a class=\"id\" href=\"#cwd\">cwd</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>, \"\\0\", 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#prepend_path\">prepend_path</a>(&amp;<a class=\"id\" href=\"#pwd\">pwd</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#cwd\">cwd</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unreachable from current root */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#path_equal\">path_equal</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#root\">root</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#prepend_unreachable\">prepend_unreachable</a>(&amp;<a class=\"id\" href=\"#cwd\">cwd</a>, &amp;<a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> + <a class=\"id\" href=\"#page\">page</a> - <a class=\"id\" href=\"#cwd\">cwd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#cwd\">cwd</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#pwd\">pwd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long) <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test whether new_dentry is a subdirectory of old_dentry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Trivially implemented using the dcache structure</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_subdir - is new dentry a subdirectory of old_dentry</span>", 
"<span class=\"comment\"> * @new_dentry: new dentry</span>", 
"<span class=\"comment\"> * @old_dentry: old dentry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if new_dentry is a subdirectory of the parent (at any depth).</span>", 
"<span class=\"comment\"> * Returns 0 otherwise.</span>", 
"<span class=\"comment\"> * Caller must ensure that \"new_dentry\" is pinned before calling is_subdir()</span>", 
"<span class=\"comment\"> */</span>", 
"  ", 
"int <a class=\"id\" href=\"#is_subdir\">is_subdir</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_dentry\">new_dentry</a> == <a class=\"id\" href=\"#old_dentry\">old_dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need rcu_readlock to protect against the d_parent trashing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * due to d_move</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for restarting inner loop in case of seq retry */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#rename_lock\">rename_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d_ancestor\">d_ancestor</a>(<a class=\"id\" href=\"#old_dentry\">old_dentry</a>, <a class=\"id\" href=\"#new_dentry\">new_dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#rename_lock\">rename_lock</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#path_is_under\">path_is_under</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path1\">path1</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path2\">path2</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#path1\">path1</a>-><a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#path1\">path1</a>-><a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_lock\">br_read_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a> != <a class=\"id\" href=\"#path2\">path2</a>-><a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> == <a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_read_unlock\">br_read_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> == <a class=\"id\" href=\"#path2\">path2</a>-><a class=\"id\" href=\"#mnt\">mnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#is_subdir\">is_subdir</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#path2\">path2</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_unlock\">br_read_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#path_is_under\">path_is_under</a>);", 
"", 
"void <a class=\"id\" href=\"#d_genocide\">d_genocide</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#this_parent\">this_parent</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#this_parent\">this_parent</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<a class=\"id\" href=\"#resume\">resume</a>:", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#next\">next</a> != &amp;<a class=\"id\" href=\"#this_parent\">this_parent</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d_unhashed\">d_unhashed</a>(<a class=\"id\" href=\"#dentry\">dentry</a>)||!<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_parent\">this_parent</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_count\">d_count</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_parent\">this_parent</a> != <a class=\"id\" href=\"#root\">root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#this_parent\">this_parent</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#this_parent\">this_parent</a>-><a class=\"id\" href=\"#d_count\">d_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_parent\">this_parent</a> = <a class=\"id\" href=\"#this_parent\">this_parent</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#resume\">resume</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_inode_number - check for dentry with name</span>", 
"<span class=\"comment\"> * @dir: directory to check</span>", 
"<span class=\"comment\"> * @name: Name to find.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check whether a dentry already exists for the given name,</span>", 
"<span class=\"comment\"> * and return the inode number if it has an inode. Otherwise</span>", 
"<span class=\"comment\"> * 0 is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine is used to post-process directory listings for</span>", 
"<span class=\"comment\"> * filesystems using synthetic inode numbers, and is necessary</span>", 
"<span class=\"comment\"> * to keep getcwd() working.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"<a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#find_inode_number\">find_inode_number</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#ino\">ino</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_hash_and_lookup\">d_hash_and_lookup</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ino\">ino</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ino\">ino</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#find_inode_number\">find_inode_number</a>);", 
"", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> unsigned long <a class=\"id\" href=\"#dhash_entries\">dhash_entries</a>;", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_dhash_entries\">set_dhash_entries</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dhash_entries\">dhash_entries</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#str\">str</a>, 0);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"dhash_entries=\", <a class=\"id\" href=\"#set_dhash_entries\">set_dhash_entries</a>);", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dcache_init_early\">dcache_init_early</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If hashes are distributed across NUMA nodes, defer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hash allocation until vmalloc space is available.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hashdist\">hashdist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry_hashtable\">dentry_hashtable</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_large_system_hash\">alloc_large_system_hash</a>(\"Dentry cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dhash_entries\">dhash_entries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>13,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HASH_EARLY\">HASH_EARLY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#d_hash_shift\">d_hash_shift</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#d_hash_mask\">d_hash_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = 0; <a class=\"id\" href=\"#loop\">loop</a> &lt; (1 << <a class=\"id\" href=\"#d_hash_shift\">d_hash_shift</a>); <a class=\"id\" href=\"#loop\">loop</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dentry_hashtable\">dentry_hashtable</a>[<a class=\"id\" href=\"#loop\">loop</a>]);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dcache_init\">dcache_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A constructor could be added for stable state like the lists,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but it is probably not worth it because of the cache nature</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the dcache. </span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry_cache\">dentry_cache</a> = <a class=\"id\" href=\"#KMEM_CACHE\">KMEM_CACHE</a>(<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>|<a class=\"id\" href=\"#SLAB_MEM_SPREAD\">SLAB_MEM_SPREAD</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_shrinker\">register_shrinker</a>(&amp;<a class=\"id\" href=\"#dcache_shrinker\">dcache_shrinker</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hash may have been set up in dcache_init_early */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hashdist\">hashdist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry_hashtable\">dentry_hashtable</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_large_system_hash\">alloc_large_system_hash</a>(\"Dentry cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dhash_entries\">dhash_entries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>13,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#d_hash_shift\">d_hash_shift</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#d_hash_mask\">d_hash_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = 0; <a class=\"id\" href=\"#loop\">loop</a> &lt; (1 << <a class=\"id\" href=\"#d_hash_shift\">d_hash_shift</a>); <a class=\"id\" href=\"#loop\">loop</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dentry_hashtable\">dentry_hashtable</a>[<a class=\"id\" href=\"#loop\">loop</a>]);", 
"}", 
"", 
"<span class=\"comment\">/* SLAB cache for __getname() consumers */</span>", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#names_cachep\">names_cachep</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#names_cachep\">names_cachep</a>);", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_genocide\">d_genocide</a>);", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vfs_caches_init_early\">vfs_caches_init_early</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dcache_init_early\">dcache_init_early</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_init_early\">inode_init_early</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vfs_caches_init\">vfs_caches_init</a>(unsigned long <a class=\"id\" href=\"#mempages\">mempages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reserve\">reserve</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Base hash sizes on available memory, with a reserve equal to</span>", 
"<span class=\"comment\">           150% of current kernel size */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reserve\">reserve</a> = <a class=\"id\" href=\"#min\">min</a>((<a class=\"id\" href=\"#mempages\">mempages</a> - <a class=\"id\" href=\"#nr_free_pages\">nr_free_pages</a>()) * 3/2, <a class=\"id\" href=\"#mempages\">mempages</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempages\">mempages</a> -= <a class=\"id\" href=\"#reserve\">reserve</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#names_cachep\">names_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"names_cache\", <a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dcache_init\">dcache_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_init\">inode_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#files_init\">files_init</a>(<a class=\"id\" href=\"#mempages\">mempages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_init\">mnt_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev_cache_init\">bdev_cache_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chrdev_init\">chrdev_init</a>();", 
"}", 
];
xr_frag_insert('l/68/0d8b8a61a9f445a73840a5634f18dde65d16f2.xr', __xr_tmp);
