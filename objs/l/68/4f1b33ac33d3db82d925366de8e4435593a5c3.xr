var __xr_tmp = [
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: hwgpe - Low level GPE enable/disable/clear functions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acevents.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_HARDWARE\">ACPI_HARDWARE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"hwgpe\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_enable_wakeup_gpe_block\">acpi_hw_enable_wakeup_gpe_block</a>(struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a> *<a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_block_info\">acpi_gpe_block_info</a> *<a class=\"id\" href=\"#gpe_block\">gpe_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#context\">context</a>);", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:<span class=\"ts\"/>acpi_hw_get_gpe_register_bit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:<span class=\"ts\"/>gpe_event_info<span class=\"ts\"/>    - Info block for the GPE</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>gpe_register_info   - Info block for the GPE register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:<span class=\"ts\"/>Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION:<span class=\"ts\"/>Compute GPE enable mask with one bit corresponding to the given</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>GPE set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_hw_get_gpe_register_bit\">acpi_hw_get_gpe_register_bit</a>(struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#acpi_gpe_register_info\">acpi_gpe_register_info</a> *<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u32\">u32</a>)1 << (<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#gpe_number\">gpe_number</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#base_gpe_number\">base_gpe_number</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:<span class=\"ts\"/>acpi_hw_low_set_gpe</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:<span class=\"ts\"/>gpe_event_info<span class=\"ts\"/>    - Info block for the GPE to be disabled</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>action<span class=\"ts\"/><span class=\"ts\"/>    - Enable or disable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:<span class=\"ts\"/>Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Enable or disable a single GPE in its enable register.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_low_set_gpe\">acpi_hw_low_set_gpe</a>(struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#action\">action</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_register_info\">acpi_gpe_register_info</a> *<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#enable_mask\">enable_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_bit\">register_bit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the info block for the entire GPE register */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a> = <a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#register_info\">register_info</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_NOT_EXIST\">AE_NOT_EXIST</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get current value of the enable register that contains this GPE */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read\">acpi_hw_read</a>(&amp;<a class=\"id\" href=\"#enable_mask\">enable_mask</a>, &amp;<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#enable_address\">enable_address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set ot clear just the bit that corresponds to this GPE */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_bit\">register_bit</a> = <a class=\"id\" href=\"#acpi_hw_get_gpe_register_bit\">acpi_hw_get_gpe_register_bit</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_GPE_COND_ENABLE\">ACPI_GPE_COND_ENABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#register_bit\">register_bit</a> &amp; <a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#enable_for_run\">enable_for_run</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_GPE_ENABLE\">ACPI_GPE_ENABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_SET_BIT\">ACPI_SET_BIT</a>(<a class=\"id\" href=\"#enable_mask\">enable_mask</a>, <a class=\"id\" href=\"#register_bit\">register_bit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_GPE_DISABLE\">ACPI_GPE_DISABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_CLEAR_BIT\">ACPI_CLEAR_BIT</a>(<a class=\"id\" href=\"#enable_mask\">enable_mask</a>, <a class=\"id\" href=\"#register_bit\">register_bit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Invalid action\\n\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Write the updated enable mask */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write\">acpi_hw_write</a>(<a class=\"id\" href=\"#enable_mask\">enable_mask</a>, &amp;<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#enable_address\">enable_address</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_clear_gpe</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_event_info      - Info block for the GPE to be cleared</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Clear the status bit for a single GPE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_hw_clear_gpe\">acpi_hw_clear_gpe</a>(struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> * <a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_register_info\">acpi_gpe_register_info</a> *<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_bit\">register_bit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the info block for the entire GPE register */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a> = <a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#register_info\">register_info</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_NOT_EXIST\">AE_NOT_EXIST</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_bit\">register_bit</a> = <a class=\"id\" href=\"#acpi_hw_get_gpe_register_bit\">acpi_hw_get_gpe_register_bit</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Write a one to the appropriate bit in the status register to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * clear this GPE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write\">acpi_hw_write</a>(<a class=\"id\" href=\"#register_bit\">register_bit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#status_address\">status_address</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_get_gpe_status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_event_info      - Info block for the GPE to queried</span>", 
"<span class=\"comment\"> *              event_status        - Where the GPE status is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Return the status of a single GPE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_get_gpe_status\">acpi_hw_get_gpe_status</a>(struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> * <a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#acpi_event_status\">acpi_event_status</a> * <a class=\"id\" href=\"#event_status\">event_status</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#in_byte\">in_byte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_bit\">register_bit</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_register_info\">acpi_gpe_register_info</a> *<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_event_status\">acpi_event_status</a> <a class=\"id\" href=\"#local_event_status\">local_event_status</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event_status\">event_status</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the info block for the entire GPE register */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a> = <a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#register_info\">register_info</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the register bitmask for this GPE */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_bit\">register_bit</a> = <a class=\"id\" href=\"#acpi_hw_get_gpe_register_bit\">acpi_hw_get_gpe_register_bit</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* GPE currently enabled? (enabled for runtime?) */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_bit\">register_bit</a> &amp; <a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#enable_for_run\">enable_for_run</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_event_status\">local_event_status</a> |= <a class=\"id\" href=\"#ACPI_EVENT_FLAG_ENABLED\">ACPI_EVENT_FLAG_ENABLED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* GPE enabled for wake? */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_bit\">register_bit</a> &amp; <a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#enable_for_wake\">enable_for_wake</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_event_status\">local_event_status</a> |= <a class=\"id\" href=\"#ACPI_EVENT_FLAG_WAKE_ENABLED\">ACPI_EVENT_FLAG_WAKE_ENABLED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* GPE currently active (status bit == 1)? */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read\">acpi_hw_read</a>(&amp;<a class=\"id\" href=\"#in_byte\">in_byte</a>, &amp;<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#status_address\">status_address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_bit\">register_bit</a> &amp; <a class=\"id\" href=\"#in_byte\">in_byte</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_event_status\">local_event_status</a> |= <a class=\"id\" href=\"#ACPI_EVENT_FLAG_SET\">ACPI_EVENT_FLAG_SET</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set return value */</span>", 
"", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#event_status\">event_status</a>) = <a class=\"id\" href=\"#local_event_status\">local_event_status</a>;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_disable_gpe_block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_xrupt_info      - GPE Interrupt info</span>", 
"<span class=\"comment\"> *              gpe_block           - Gpe Block info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Disable all GPEs within a single GPE block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_disable_gpe_block\">acpi_hw_disable_gpe_block</a>(struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a> *<a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#acpi_gpe_block_info\">acpi_gpe_block_info</a> *<a class=\"id\" href=\"#gpe_block\">gpe_block</a>, void *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Examine each GPE Register within the block */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#register_count\">register_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable all GPEs in this register */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_write\">acpi_hw_write</a>(0x00,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#register_info\">register_info</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#enable_address\">enable_address</a>);", 
];
xr_frag_insert('l/68/4f1b33ac33d3db82d925366de8e4435593a5c3.xr', __xr_tmp);
