var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kernel/power/hibernate.c - Hibernation (a.k.a suspend-to-disk) support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2003 Patrick Mochel</span>", 
"<span class=\"comment\"> * Copyright (c) 2003 Open Source Development Lab</span>", 
"<span class=\"comment\"> * Copyright (c) 2004 Pavel Machek &lt;pavel@ucw.cz&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2009 Rafael J. Wysocki, Novell Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#reboot\">reboot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#console\">console</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_scan\">scsi_scan</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"power.h\"", 
"", 
"", 
"static int <a class=\"id\" href=\"#noresume\">noresume</a> = 0;", 
"static char <a class=\"id\" href=\"#resume_file\">resume_file</a>[256] = <a class=\"id\" href=\"#CONFIG_PM_STD_PARTITION\">CONFIG_PM_STD_PARTITION</a>;", 
"<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#swsusp_resume_device\">swsusp_resume_device</a>;", 
"<a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#swsusp_resume_block\">swsusp_resume_block</a>;", 
"int <a class=\"id\" href=\"#in_suspend\">in_suspend</a> <a class=\"id\" href=\"#__nosavedata\">__nosavedata</a> = 0;", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HIBERNATION_INVALID\">HIBERNATION_INVALID</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HIBERNATION_PLATFORM\">HIBERNATION_PLATFORM</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HIBERNATION_TEST\">HIBERNATION_TEST</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HIBERNATION_TESTPROC\">HIBERNATION_TESTPROC</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HIBERNATION_SHUTDOWN\">HIBERNATION_SHUTDOWN</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HIBERNATION_REBOOT\">HIBERNATION_REBOOT</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* keep last */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__HIBERNATION_AFTER_LAST\">__HIBERNATION_AFTER_LAST</a>", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HIBERNATION_MAX\">HIBERNATION_MAX</a> (<a class=\"id\" href=\"#__HIBERNATION_AFTER_LAST\">__HIBERNATION_AFTER_LAST</a>-1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HIBERNATION_FIRST\">HIBERNATION_FIRST</a> (<a class=\"id\" href=\"#HIBERNATION_INVALID\">HIBERNATION_INVALID</a> + 1)", 
"", 
"static int <a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a> = <a class=\"id\" href=\"#HIBERNATION_SHUTDOWN\">HIBERNATION_SHUTDOWN</a>;", 
"", 
"static struct <a class=\"id\" href=\"#platform_hibernation_ops\">platform_hibernation_ops</a> *<a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hibernation_set_ops - set the global hibernate operations</span>", 
"<span class=\"comment\"> * @ops: the hibernation operations to use in subsequent hibernation transitions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#hibernation_set_ops\">hibernation_set_ops</a>(struct <a class=\"id\" href=\"#platform_hibernation_ops\">platform_hibernation_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a> && !(<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#begin\">begin</a> && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#end\">end</a> &&  <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#pre_snapshot\">pre_snapshot</a>", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#prepare\">prepare</a> && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#finish\">finish</a> && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#enter\">enter</a> && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#pre_restore\">pre_restore</a>", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#restore_cleanup\">restore_cleanup</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a> = <a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a> = <a class=\"id\" href=\"#HIBERNATION_PLATFORM\">HIBERNATION_PLATFORM</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a> == <a class=\"id\" href=\"#HIBERNATION_PLATFORM\">HIBERNATION_PLATFORM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a> = <a class=\"id\" href=\"#HIBERNATION_SHUTDOWN\">HIBERNATION_SHUTDOWN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#entering_platform_hibernation\">entering_platform_hibernation</a>;", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#system_entering_hibernation\">system_entering_hibernation</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#entering_platform_hibernation\">entering_platform_hibernation</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#system_entering_hibernation\">system_entering_hibernation</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_DEBUG\">CONFIG_PM_DEBUG</a>", 
"static void <a class=\"id\" href=\"#hibernation_debug_sleep\">hibernation_debug_sleep</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"hibernation debug: Waiting for 5 seconds.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(5000);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#hibernation_testmode\">hibernation_testmode</a>(int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hibernation_mode\">hibernation_mode</a> == <a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_debug_sleep\">hibernation_debug_sleep</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#hibernation_test\">hibernation_test</a>(int <a class=\"id\" href=\"#level\">level</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_test_level\">pm_test_level</a> == <a class=\"id\" href=\"#level\">level</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_debug_sleep\">hibernation_debug_sleep</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_PM_DEBUG */</span>", 
"static int <a class=\"id\" href=\"#hibernation_testmode\">hibernation_testmode</a>(int <a class=\"id\" href=\"#mode\">mode</a>) { return 0; }", 
"static int <a class=\"id\" href=\"#hibernation_test\">hibernation_test</a>(int <a class=\"id\" href=\"#level\">level</a>) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_PM_DEBUG */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platform_begin - tell the platform driver that we're starting</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hibernation</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#platform_begin\">platform_begin</a>(int <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#platform_mode\">platform_mode</a> && <a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#begin\">begin</a>() : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platform_end - tell the platform driver that we've entered the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>working state</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#platform_end\">platform_end</a>(int <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#platform_mode\">platform_mode</a> && <a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#end\">end</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platform_pre_snapshot - prepare the machine for hibernation using the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platform driver if so configured and return an error code if it fails</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#platform_pre_snapshot\">platform_pre_snapshot</a>(int <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#platform_mode\">platform_mode</a> && <a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#pre_snapshot\">pre_snapshot</a>() : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platform_leave - prepare the machine for switching to the normal mode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of operation using the platform driver (called with interrupts disabled)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#platform_leave\">platform_leave</a>(int <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#platform_mode\">platform_mode</a> && <a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#leave\">leave</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platform_finish - switch the machine to the normal mode of operation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>using the platform driver (must be called after platform_prepare())</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#platform_finish\">platform_finish</a>(int <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#platform_mode\">platform_mode</a> && <a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#finish\">finish</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platform_pre_restore - prepare the platform for the restoration from a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hibernation image.  If the restore fails after this function has been</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called, platform_restore_cleanup() must be called.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#platform_pre_restore\">platform_pre_restore</a>(int <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#platform_mode\">platform_mode</a> && <a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#pre_restore\">pre_restore</a>() : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platform_restore_cleanup - switch the platform to the normal mode of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>operation after a failing restore.  If platform_pre_restore() has been</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called before the failing restore, this function must be called too,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>regardless of the result of platform_pre_restore().</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#platform_restore_cleanup\">platform_restore_cleanup</a>(int <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#platform_mode\">platform_mode</a> && <a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#restore_cleanup\">restore_cleanup</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platform_recover - recover the platform from a failure to suspend</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>devices.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#platform_recover\">platform_recover</a>(int <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#platform_mode\">platform_mode</a> && <a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a> && <a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#recover\">recover</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hibernation_ops\">hibernation_ops</a>-><a class=\"id\" href=\"#recover\">recover</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>swsusp_show_speed - print the time elapsed between two events.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@start: Starting event.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@stop: Final event.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_pages -<span class=\"ts\"/>number of pages processed between @start and @stop</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msg -<span class=\"ts\"/><span class=\"ts\"/>introductory message to print</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#swsusp_show_speed\">swsusp_show_speed</a>(struct <a class=\"id\" href=\"#timeval\">timeval</a> *<a class=\"id\" href=\"#start\">start</a>, struct <a class=\"id\" href=\"#timeval\">timeval</a> *<a class=\"id\" href=\"#stop\">stop</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, char *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#elapsed_centisecs64\">elapsed_centisecs64</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#centisecs\">centisecs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#kps\">kps</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elapsed_centisecs64\">elapsed_centisecs64</a> = <a class=\"id\" href=\"#timeval_to_ns\">timeval_to_ns</a>(<a class=\"id\" href=\"#stop\">stop</a>) - <a class=\"id\" href=\"#timeval_to_ns\">timeval_to_ns</a>(<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#elapsed_centisecs64\">elapsed_centisecs64</a>, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> / 100);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#centisecs\">centisecs</a> = <a class=\"id\" href=\"#elapsed_centisecs64\">elapsed_centisecs64</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#centisecs\">centisecs</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#centisecs\">centisecs</a> = 1;<span class=\"ts\"/><span class=\"comment\">/* avoid div-by-zero */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a> * (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / 1024);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kps\">kps</a> = (<a class=\"id\" href=\"#k\">k</a> * 100) / <a class=\"id\" href=\"#centisecs\">centisecs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PM: %s %d kbytes in %d.%02d seconds (%d.%02d MB/s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#k\">k</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#centisecs\">centisecs</a> / 100, <a class=\"id\" href=\"#centisecs\">centisecs</a> % 100,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kps\">kps</a> / 1000, (<a class=\"id\" href=\"#kps\">kps</a> % 1000) / 10);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>create_image - freeze devices that need to be frozen with interrupts</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>off, create the hibernation image and thaw those devices.  Control</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reappears in this routine after a restore.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#create_image\">create_image</a>(int <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#arch_prepare_suspend\">arch_prepare_suspend</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* At this point, dpm_suspend_start() has been called, but *not*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dpm_suspend_noirq(). We *must* call dpm_suspend_noirq() now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, drivers for some devices (e.g. interrupt controllers)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * become desynchronized with the actual state of the hardware</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at resume time, and evil weirdness ensues.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dpm_suspend_noirq\">dpm_suspend_noirq</a>(<a class=\"id\" href=\"#PMSG_FREEZE\">PMSG_FREEZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PM: Some devices failed to power down, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"aborting hibernation\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#platform_pre_snapshot\">platform_pre_snapshot</a>(<a class=\"id\" href=\"#platform_mode\">platform_mode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> || <a class=\"id\" href=\"#hibernation_test\">hibernation_test</a>(<a class=\"id\" href=\"#TEST_PLATFORM\">TEST_PLATFORM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Platform_finish\">Platform_finish</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#disable_nonboot_cpus\">disable_nonboot_cpus</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> || <a class=\"id\" href=\"#hibernation_test\">hibernation_test</a>(<a class=\"id\" href=\"#TEST_CPUS\">TEST_CPUS</a>)", 
"<span class=\"ts\"/>    || <a class=\"id\" href=\"#hibernation_testmode\">hibernation_testmode</a>(<a class=\"id\" href=\"#HIBERNATION_TEST\">HIBERNATION_TEST</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Enable_cpus\">Enable_cpus</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysdev_suspend\">sysdev_suspend</a>(<a class=\"id\" href=\"#PMSG_FREEZE\">PMSG_FREEZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PM: Some system devices failed to power down, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"aborting hibernation\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Enable_irqs\">Enable_irqs</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hibernation_test\">hibernation_test</a>(<a class=\"id\" href=\"#TEST_CORE\">TEST_CORE</a>) || !<a class=\"id\" href=\"#pm_check_wakeup_events\">pm_check_wakeup_events</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Power_up\">Power_up</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_suspend\">in_suspend</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_processor_state\">save_processor_state</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#swsusp_arch_suspend\">swsusp_arch_suspend</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PM: Error %d creating hibernation image\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Restore control flow magically appears here */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restore_processor_state\">restore_processor_state</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_suspend\">in_suspend</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events_check_enabled\">events_check_enabled</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#platform_leave\">platform_leave</a>(<a class=\"id\" href=\"#platform_mode\">platform_mode</a>);", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#Power_up\">Power_up</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysdev_resume\">sysdev_resume</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTE:  dpm_resume_noirq() is just a resume() for devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that suspended with irqs off ... no overall powerup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
" <a class=\"id\" href=\"#Enable_irqs\">Enable_irqs</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
" <a class=\"id\" href=\"#Enable_cpus\">Enable_cpus</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_nonboot_cpus\">enable_nonboot_cpus</a>();", 
"", 
" <a class=\"id\" href=\"#Platform_finish\">Platform_finish</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#platform_finish\">platform_finish</a>(<a class=\"id\" href=\"#platform_mode\">platform_mode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dpm_resume_noirq\">dpm_resume_noirq</a>(<a class=\"id\" href=\"#in_suspend\">in_suspend</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#error\">error</a> ? <a class=\"id\" href=\"#PMSG_RECOVER\">PMSG_RECOVER</a> : <a class=\"id\" href=\"#PMSG_THAW\">PMSG_THAW</a>) : <a class=\"id\" href=\"#PMSG_RESTORE\">PMSG_RESTORE</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hibernation_snapshot - quiesce devices and create the hibernation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>snapshot image.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@platform_mode - if set, use the platform driver, if available, to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> prepare the platform firmware for the power transition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must be called with pm_mutex held</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#hibernation_snapshot\">hibernation_snapshot</a>(int <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#saved_mask\">saved_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#platform_begin\">platform_begin</a>(<a class=\"id\" href=\"#platform_mode\">platform_mode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Close\">Close</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Preallocate image memory before shutting down devices. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#hibernate_preallocate_memory\">hibernate_preallocate_memory</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Close\">Close</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_console\">suspend_console</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_mask\">saved_mask</a> = <a class=\"id\" href=\"#clear_gfp_allowed_mask\">clear_gfp_allowed_mask</a>(<a class=\"id\" href=\"#GFP_IOFS\">GFP_IOFS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dpm_suspend_start\">dpm_suspend_start</a>(<a class=\"id\" href=\"#PMSG_FREEZE\">PMSG_FREEZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Recover_platform\">Recover_platform</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hibernation_test\">hibernation_test</a>(<a class=\"id\" href=\"#TEST_DEVICES\">TEST_DEVICES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Recover_platform\">Recover_platform</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#create_image\">create_image</a>(<a class=\"id\" href=\"#platform_mode\">platform_mode</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Control returns here after successful restore */</span>", 
"", 
" <a class=\"id\" href=\"#Resume_devices\">Resume_devices</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* We may need to release the preallocated image pages here. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> || !<a class=\"id\" href=\"#in_suspend\">in_suspend</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_free\">swsusp_free</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dpm_resume_end\">dpm_resume_end</a>(<a class=\"id\" href=\"#in_suspend\">in_suspend</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#error\">error</a> ? <a class=\"id\" href=\"#PMSG_RECOVER\">PMSG_RECOVER</a> : <a class=\"id\" href=\"#PMSG_THAW\">PMSG_THAW</a>) : <a class=\"id\" href=\"#PMSG_RESTORE\">PMSG_RESTORE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_gfp_allowed_mask\">set_gfp_allowed_mask</a>(<a class=\"id\" href=\"#saved_mask\">saved_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resume_console\">resume_console</a>();", 
" <a class=\"id\" href=\"#Close\">Close</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#platform_end\">platform_end</a>(<a class=\"id\" href=\"#platform_mode\">platform_mode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
" <a class=\"id\" href=\"#Recover_platform\">Recover_platform</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#platform_recover\">platform_recover</a>(<a class=\"id\" href=\"#platform_mode\">platform_mode</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#Resume_devices\">Resume_devices</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>resume_target_kernel - prepare devices that need to be suspended with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interrupts off, restore the contents of highmem that have not been</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>restored yet from the image and run the low level code that will restore</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the remaining contents of memory and switch to the just restored target</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#resume_target_kernel\">resume_target_kernel</a>(<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dpm_suspend_noirq\">dpm_suspend_noirq</a>(<a class=\"id\" href=\"#PMSG_QUIESCE\">PMSG_QUIESCE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PM: Some devices failed to power down, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"aborting resume\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#platform_pre_restore\">platform_pre_restore</a>(<a class=\"id\" href=\"#platform_mode\">platform_mode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Cleanup\">Cleanup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#disable_nonboot_cpus\">disable_nonboot_cpus</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Enable_cpus\">Enable_cpus</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysdev_suspend\">sysdev_suspend</a>(<a class=\"id\" href=\"#PMSG_QUIESCE\">PMSG_QUIESCE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Enable_irqs\">Enable_irqs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We'll ignore saved state, but this gets preempt count (etc) right */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_processor_state\">save_processor_state</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#restore_highmem\">restore_highmem</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#swsusp_arch_resume\">swsusp_arch_resume</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The code below is only ever reached in case of a failure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Otherwise execution continues at place where</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * swsusp_arch_suspend() was called</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This call to restore_highmem() undos the previous one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restore_highmem\">restore_highmem</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The only reason why swsusp_arch_resume() can fail is memory being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * very tight, so we have to free it as soon as we can to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * subsequent failures</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swsusp_free\">swsusp_free</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restore_processor_state\">restore_processor_state</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_softlockup_watchdog\">touch_softlockup_watchdog</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysdev_resume\">sysdev_resume</a>();", 
"", 
" <a class=\"id\" href=\"#Enable_irqs\">Enable_irqs</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
" <a class=\"id\" href=\"#Enable_cpus\">Enable_cpus</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_nonboot_cpus\">enable_nonboot_cpus</a>();", 
"", 
" <a class=\"id\" href=\"#Cleanup\">Cleanup</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#platform_restore_cleanup\">platform_restore_cleanup</a>(<a class=\"id\" href=\"#platform_mode\">platform_mode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dpm_resume_noirq\">dpm_resume_noirq</a>(<a class=\"id\" href=\"#PMSG_RECOVER\">PMSG_RECOVER</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hibernation_restore - quiesce devices and restore the hibernation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>snapshot image.  If successful, control returns in hibernation_snaphot()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@platform_mode - if set, use the platform driver, if available, to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> prepare the platform firmware for the transition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must be called with pm_mutex held</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#hibernation_restore\">hibernation_restore</a>(int <a class=\"id\" href=\"#platform_mode\">platform_mode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#saved_mask\">saved_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_prepare_console\">pm_prepare_console</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_console\">suspend_console</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_mask\">saved_mask</a> = <a class=\"id\" href=\"#clear_gfp_allowed_mask\">clear_gfp_allowed_mask</a>(<a class=\"id\" href=\"#GFP_IOFS\">GFP_IOFS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dpm_suspend_start\">dpm_suspend_start</a>(<a class=\"id\" href=\"#PMSG_QUIESCE\">PMSG_QUIESCE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#resume_target_kernel\">resume_target_kernel</a>(<a class=\"id\" href=\"#platform_mode\">platform_mode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dpm_resume_end\">dpm_resume_end</a>(<a class=\"id\" href=\"#PMSG_RECOVER\">PMSG_RECOVER</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_gfp_allowed_mask\">set_gfp_allowed_mask</a>(<a class=\"id\" href=\"#saved_mask\">saved_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resume_console\">resume_console</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_restore_console\">pm_restore_console</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hibernation_platform_enter - enter the hibernation state using the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>platform driver (if available)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#hibernation_platform_enter\">hibernation_platform_enter</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#saved_mask\">saved_mask</a>;", 
"", 
];
xr_frag_insert('l/68/656e4fcefb53f8967995b512bf8997d0fbc583.xr', __xr_tmp);
