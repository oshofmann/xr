var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Implementation of the multi-level security (MLS) policy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author : Stephen Smalley, &lt;sds@epoch.ncsc.mil&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Updated: Trusted Computer Solutions, Inc. &lt;dgoeddel@trustedcs.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Support for enhanced MLS infrastructure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2004-2006 Trusted Computer Solutions, Inc.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Updated: Hewlett-Packard &lt;paul.moore@hp.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      Added support to import/export the MLS label from NetLabel</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (c) Copyright Hewlett-Packard Development Company, L.P., 2006</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netlabel\">netlabel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"sidtab.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"mls.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"policydb.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"services.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the length in bytes for the MLS fields of the</span>", 
"<span class=\"comment\"> * security context string representation of `context'.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mls_compute_context_len\">mls_compute_context_len</a>(struct <a class=\"id\" href=\"#context\">context</a> *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#nm\">nm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e\">e</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#policydb\">policydb</a>.<a class=\"id\" href=\"#mls_enabled\">mls_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 1; <span class=\"comment\">/* for the beginning \":\" */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#l\">l</a> = 0; <a class=\"id\" href=\"#l\">l</a> &lt; 2; <a class=\"id\" href=\"#l\">l</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#index_sens\">index_sens</a> = <a class=\"id\" href=\"#context\">context</a>-><a class=\"id\" href=\"#range\">range</a>.<a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#l\">l</a>].<a class=\"id\" href=\"#sens\">sens</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#policydb\">policydb</a>.<a class=\"id\" href=\"#p_sens_val_to_name\">p_sens_val_to_name</a>[<a class=\"id\" href=\"#index_sens\">index_sens</a> - 1]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* categories */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = -2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = -2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a> = &amp;<a class=\"id\" href=\"#context\">context</a>-><a class=\"id\" href=\"#range\">range</a>.<a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#l\">l</a>].<a class=\"id\" href=\"#cat\">cat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ebitmap_for_each_positive_bit\">ebitmap_for_each_positive_bit</a>(<a class=\"id\" href=\"#e\">e</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> - <a class=\"id\" href=\"#prev\">prev</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* one or more negative bits are skipped */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a> != <a class=\"id\" href=\"#prev\">prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nm\">nm</a> = <a class=\"id\" href=\"#policydb\">policydb</a>.<a class=\"id\" href=\"#p_cat_val_to_name\">p_cat_val_to_name</a>[<a class=\"id\" href=\"#prev\">prev</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#nm\">nm</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nm\">nm</a> = <a class=\"id\" href=\"#policydb\">policydb</a>.<a class=\"id\" href=\"#p_cat_val_to_name\">p_cat_val_to_name</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#nm\">nm</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nm\">nm</a> = <a class=\"id\" href=\"#policydb\">policydb</a>.<a class=\"id\" href=\"#p_cat_val_to_name\">p_cat_val_to_name</a>[<a class=\"id\" href=\"#prev\">prev</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#nm\">nm</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l\">l</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mls_level_eq\">mls_level_eq</a>(&amp;<a class=\"id\" href=\"#context\">context</a>-><a class=\"id\" href=\"#range\">range</a>.<a class=\"id\" href=\"#level\">level</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#context\">context</a>-><a class=\"id\" href=\"#range\">range</a>.<a class=\"id\" href=\"#level\">level</a>[1]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write the security context string representation of</span>", 
"<span class=\"comment\"> * the MLS fields of `context' into the string `*scontext'.</span>", 
"<span class=\"comment\"> * Update `*scontext' to point to the end of the MLS fields.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mls_sid_to_context\">mls_sid_to_context</a>(struct <a class=\"id\" href=\"#context\">context</a> *<a class=\"id\" href=\"#context\">context</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char **<a class=\"id\" href=\"#scontext\">scontext</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#scontextp\">scontextp</a>, *<a class=\"id\" href=\"#nm\">nm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e\">e</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#policydb\">policydb</a>.<a class=\"id\" href=\"#mls_enabled\">mls_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scontextp\">scontextp</a> = *<a class=\"id\" href=\"#scontext\">scontext</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#scontextp\">scontextp</a> = ':';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scontextp\">scontextp</a>++;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#l\">l</a> = 0; <a class=\"id\" href=\"#l\">l</a> &lt; 2; <a class=\"id\" href=\"#l\">l</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#scontextp\">scontextp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#policydb\">policydb</a>.<a class=\"id\" href=\"#p_sens_val_to_name\">p_sens_val_to_name</a>[<a class=\"id\" href=\"#context\">context</a>-><a class=\"id\" href=\"#range\">range</a>.<a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#l\">l</a>].<a class=\"id\" href=\"#sens\">sens</a> - 1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scontextp\">scontextp</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#scontextp\">scontextp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* categories */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = -2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = -2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a> = &amp;<a class=\"id\" href=\"#context\">context</a>-><a class=\"id\" href=\"#range\">range</a>.<a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#l\">l</a>].<a class=\"id\" href=\"#cat\">cat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ebitmap_for_each_positive_bit\">ebitmap_for_each_positive_bit</a>(<a class=\"id\" href=\"#e\">e</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> - <a class=\"id\" href=\"#prev\">prev</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* one or more negative bits are skipped */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> - <a class=\"id\" href=\"#head\">head</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#scontextp\">scontextp</a>++ = '.';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#scontextp\">scontextp</a>++ = ',';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nm\">nm</a> = <a class=\"id\" href=\"#policydb\">policydb</a>.<a class=\"id\" href=\"#p_cat_val_to_name\">p_cat_val_to_name</a>[<a class=\"id\" href=\"#prev\">prev</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#scontextp\">scontextp</a>, <a class=\"id\" href=\"#nm\">nm</a>);", 
];
xr_frag_insert('l/68/90e7284d77ac3ec3b9563b957dc93a2080f91e.xr', __xr_tmp);
