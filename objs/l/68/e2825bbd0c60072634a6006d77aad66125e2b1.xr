var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_stop_count\">trace_stop_count</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Prevent the buffers from switching */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_max_lock\">ftrace_max_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#global_trace\">global_trace</a>.<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_record_disable\">ring_buffer_record_disable</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#max_tr\">max_tr</a>.<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_record_disable\">ring_buffer_record_disable</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_max_lock\">ftrace_max_lock</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tracing_start_lock\">tracing_start_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#trace_stop_cmdline_recording\">trace_stop_cmdline_recording</a>(void);", 
"", 
"static void <a class=\"id\" href=\"#trace_save_cmdline\">trace_save_cmdline</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a> || <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a> &gt; <a class=\"id\" href=\"#PID_MAX_DEFAULT\">PID_MAX_DEFAULT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's not the end of the world if we don't get</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the lock, but we also don't want to spin</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nor do we want to disable interrupts,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so if we miss here, then better luck next time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#arch_spin_trylock\">arch_spin_trylock</a>(&amp;<a class=\"id\" href=\"#trace_cmdline_lock\">trace_cmdline_lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#map_pid_to_cmdline\">map_pid_to_cmdline</a>[<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#NO_CMDLINE_MAP\">NO_CMDLINE_MAP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = (<a class=\"id\" href=\"#cmdline_idx\">cmdline_idx</a> + 1) % <a class=\"id\" href=\"#SAVED_CMDLINES\">SAVED_CMDLINES</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check whether the cmdline buffer at idx has a pid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mapped. We are going to overwrite that entry so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need to clear the map_pid_to_cmdline. Otherwise we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * would read the new comm for the old pid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#map_cmdline_to_pid\">map_cmdline_to_pid</a>[<a class=\"id\" href=\"#idx\">idx</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> != <a class=\"id\" href=\"#NO_CMDLINE_MAP\">NO_CMDLINE_MAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_pid_to_cmdline\">map_pid_to_cmdline</a>[<a class=\"id\" href=\"#pid\">pid</a>] = <a class=\"id\" href=\"#NO_CMDLINE_MAP\">NO_CMDLINE_MAP</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_cmdline_to_pid\">map_cmdline_to_pid</a>[<a class=\"id\" href=\"#idx\">idx</a>] = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_pid_to_cmdline\">map_pid_to_cmdline</a>[<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>] = <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmdline_idx\">cmdline_idx</a> = <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#saved_cmdlines\">saved_cmdlines</a>[<a class=\"id\" href=\"#idx\">idx</a>], <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#trace_cmdline_lock\">trace_cmdline_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#trace_find_cmdline\">trace_find_cmdline</a>(int <a class=\"id\" href=\"#pid\">pid</a>, char <a class=\"id\" href=\"#comm\">comm</a>[])", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pid\">pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#comm\">comm</a>, \"<idle>\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#pid\">pid</a> &lt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#comm\">comm</a>, \"<XXX>\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> &gt; <a class=\"id\" href=\"#PID_MAX_DEFAULT\">PID_MAX_DEFAULT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#comm\">comm</a>, \"<...>\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#trace_cmdline_lock\">trace_cmdline_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#map_pid_to_cmdline\">map_pid_to_cmdline</a>[<a class=\"id\" href=\"#pid\">pid</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a> != <a class=\"id\" href=\"#NO_CMDLINE_MAP\">NO_CMDLINE_MAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#saved_cmdlines\">saved_cmdlines</a>[<a class=\"id\" href=\"#map\">map</a>]);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#comm\">comm</a>, \"<...>\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#trace_cmdline_lock\">trace_cmdline_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#tracing_record_cmdline\">tracing_record_cmdline</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#trace_record_cmdline_disabled\">trace_record_cmdline_disabled</a>) || !<a class=\"id\" href=\"#tracer_enabled\">tracer_enabled</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#tracing_is_on\">tracing_is_on</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_save_cmdline\">trace_save_cmdline</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#tracing_generic_entry_update\">tracing_generic_entry_update</a>(struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#preempt_count\">preempt_count</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pc\">pc</a> &amp; 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#pid\">pid</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#tsk\">tsk</a>) ? <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a> : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#lock_depth\">lock_depth</a><span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#tsk\">tsk</a>) ? <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#lock_depth\">lock_depth</a> : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#flags\">flags</a> =", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACE_IRQFLAGS_SUPPORT\">CONFIG_TRACE_IRQFLAGS_SUPPORT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#irqs_disabled_flags\">irqs_disabled_flags</a>(<a class=\"id\" href=\"#flags\">flags</a>) ? <a class=\"id\" href=\"#TRACE_FLAG_IRQS_OFF\">TRACE_FLAG_IRQS_OFF</a> : 0) |", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TRACE_FLAG_IRQS_NOSUPPORT\">TRACE_FLAG_IRQS_NOSUPPORT</a> |", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#pc\">pc</a> &amp; <a class=\"id\" href=\"#HARDIRQ_MASK\">HARDIRQ_MASK</a>) ? <a class=\"id\" href=\"#TRACE_FLAG_HARDIRQ\">TRACE_FLAG_HARDIRQ</a> : 0) |", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#pc\">pc</a> &amp; <a class=\"id\" href=\"#SOFTIRQ_MASK\">SOFTIRQ_MASK</a>) ? <a class=\"id\" href=\"#TRACE_FLAG_SOFTIRQ\">TRACE_FLAG_SOFTIRQ</a> : 0) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#need_resched\">need_resched</a>() ? <a class=\"id\" href=\"#TRACE_FLAG_NEED_RESCHED\">TRACE_FLAG_NEED_RESCHED</a> : 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tracing_generic_entry_update\">tracing_generic_entry_update</a>);", 
"", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#trace_buffer_lock_reserve\">trace_buffer_lock_reserve</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#ring_buffer_lock_reserve\">ring_buffer_lock_reserve</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *<a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracing_generic_entry_update\">tracing_generic_entry_update</a>(<a class=\"id\" href=\"#ent\">ent</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__trace_buffer_unlock_commit\">__trace_buffer_unlock_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#pc\">pc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#wake\">wake</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_unlock_commit\">ring_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_stack\">ftrace_trace_stack</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#flags\">flags</a>, 6, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_userstack\">ftrace_trace_userstack</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wake\">wake</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_wake_up\">trace_wake_up</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#trace_buffer_unlock_commit\">trace_buffer_unlock_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__trace_buffer_unlock_commit\">__trace_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>, 1);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#trace_current_buffer_lock_reserve\">trace_current_buffer_lock_reserve</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> **<a class=\"id\" href=\"#current_rb\">current_rb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#type\">type</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#current_rb\">current_rb</a> = <a class=\"id\" href=\"#global_trace\">global_trace</a>.<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#trace_buffer_lock_reserve\">trace_buffer_lock_reserve</a>(*<a class=\"id\" href=\"#current_rb\">current_rb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#trace_current_buffer_lock_reserve\">trace_current_buffer_lock_reserve</a>);", 
"", 
"void <a class=\"id\" href=\"#trace_current_buffer_unlock_commit\">trace_current_buffer_unlock_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__trace_buffer_unlock_commit\">__trace_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#trace_current_buffer_unlock_commit\">trace_current_buffer_unlock_commit</a>);", 
"", 
"void <a class=\"id\" href=\"#trace_nowake_buffer_unlock_commit\">trace_nowake_buffer_unlock_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__trace_buffer_unlock_commit\">__trace_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#trace_nowake_buffer_unlock_commit\">trace_nowake_buffer_unlock_commit</a>);", 
"", 
"void <a class=\"id\" href=\"#trace_current_buffer_discard_commit\">trace_current_buffer_discard_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_discard_commit\">ring_buffer_discard_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#trace_current_buffer_discard_commit\">trace_current_buffer_discard_commit</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#trace_function\">trace_function</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>,", 
"<span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/>       int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#event_function\">event_function</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_entry\">ftrace_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we are reading the ring buffer, don't trace */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#__this_cpu_read\">__this_cpu_read</a>(<a class=\"id\" href=\"#ftrace_cpu_disabled\">ftrace_cpu_disabled</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#trace_buffer_lock_reserve\">trace_buffer_lock_reserve</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#TRACE_FN\">TRACE_FN</a>, sizeof(*<a class=\"id\" href=\"#entry\">entry</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ip\">ip</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#parent_ip\">parent_ip</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#parent_ip\">parent_ip</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filter_check_discard\">filter_check_discard</a>(<a class=\"id\" href=\"#call\">call</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_unlock_commit\">ring_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#ftrace\">ftrace</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>, struct <a class=\"id\" href=\"#trace_array_cpu\">trace_array_cpu</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"       unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"       int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_function\">trace_function</a>(<a class=\"id\" href=\"#tr\">tr</a>, <a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#parent_ip\">parent_ip</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STACKTRACE\">CONFIG_STACKTRACE</a>", 
"static void <a class=\"id\" href=\"#__ftrace_trace_stack\">__ftrace_trace_stack</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#skip\">skip</a>, int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#event_kernel_stack\">event_kernel_stack</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stack_entry\">stack_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stack_trace\">stack_trace</a> <a class=\"id\" href=\"#trace\">trace</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#trace_buffer_lock_reserve\">trace_buffer_lock_reserve</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#TRACE_STACK\">TRACE_STACK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  sizeof(*<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#caller\">caller</a>, 0, sizeof(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#caller\">caller</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#nr_entries\">nr_entries</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#max_entries\">max_entries</a><span class=\"ts\"/>= <a class=\"id\" href=\"#FTRACE_STACK_ENTRIES\">FTRACE_STACK_ENTRIES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#skip\">skip</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#skip\">skip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#entries\">entries</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#caller\">caller</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_stack_trace\">save_stack_trace</a>(&amp;<a class=\"id\" href=\"#trace\">trace</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filter_check_discard\">filter_check_discard</a>(<a class=\"id\" href=\"#call\">call</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_unlock_commit\">ring_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ftrace_trace_stack\">ftrace_trace_stack</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#skip\">skip</a>, int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#trace_flags\">trace_flags</a> &amp; <a class=\"id\" href=\"#TRACE_ITER_STACKTRACE\">TRACE_ITER_STACKTRACE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ftrace_trace_stack\">__ftrace_trace_stack</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#skip\">skip</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__trace_stack\">__trace_stack</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#skip\">skip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ftrace_trace_stack\">__ftrace_trace_stack</a>(<a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#skip\">skip</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * trace_dump_stack - record a stack back trace in the trace buffer</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#trace_dump_stack\">trace_dump_stack</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tracing_disabled\">tracing_disabled</a> || <a class=\"id\" href=\"#tracing_selftest_running\">tracing_selftest_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_save_flags\">local_save_flags</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* skipping 3 traces, seems to get us at the caller of this function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ftrace_trace_stack\">__ftrace_trace_stack</a>(<a class=\"id\" href=\"#global_trace\">global_trace</a>.<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#flags\">flags</a>, 3, <a class=\"id\" href=\"#preempt_count\">preempt_count</a>());", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#ftrace_trace_userstack\">ftrace_trace_userstack</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#event_user_stack\">event_user_stack</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#userstack_entry\">userstack_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stack_trace\">stack_trace</a> <a class=\"id\" href=\"#trace\">trace</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#trace_flags\">trace_flags</a> &amp; <a class=\"id\" href=\"#TRACE_ITER_USERSTACKTRACE\">TRACE_ITER_USERSTACKTRACE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NMIs can not handle page faults, even with fix ups.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The save user stack can (and often does) fault.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#in_nmi\">in_nmi</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#trace_buffer_lock_reserve\">trace_buffer_lock_reserve</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#TRACE_USER_STACK\">TRACE_USER_STACK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  sizeof(*<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#tgid\">tgid</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#caller\">caller</a>, 0, sizeof(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#caller\">caller</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#nr_entries\">nr_entries</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#max_entries\">max_entries</a><span class=\"ts\"/>= <a class=\"id\" href=\"#FTRACE_STACK_ENTRIES\">FTRACE_STACK_ENTRIES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#skip\">skip</a><span class=\"ts\"/><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#entries\">entries</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#caller\">caller</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_stack_trace_user\">save_stack_trace_user</a>(&amp;<a class=\"id\" href=\"#trace\">trace</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filter_check_discard\">filter_check_discard</a>(<a class=\"id\" href=\"#call\">call</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_unlock_commit\">ring_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#UNUSED\">UNUSED</a>", 
"static void <a class=\"id\" href=\"#__trace_userstack\">__trace_userstack</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_userstack\">ftrace_trace_userstack</a>(<a class=\"id\" href=\"#tr\">tr</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#preempt_count\">preempt_count</a>());", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* UNUSED */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_STACKTRACE */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * trace_vbprintk - write binary msg to tracing buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#trace_vbprintk\">trace_vbprintk</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> <a class=\"id\" href=\"#trace_buf_lock\">trace_buf_lock</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a>)<a class=\"id\" href=\"#__ARCH_SPIN_LOCK_UNLOCKED\">__ARCH_SPIN_LOCK_UNLOCKED</a>;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#trace_buf\">trace_buf</a>[<a class=\"id\" href=\"#TRACE_BUF_SIZE\">TRACE_BUF_SIZE</a>];", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#event_bprint\">event_bprint</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a> = &amp;<a class=\"id\" href=\"#global_trace\">global_trace</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array_cpu\">trace_array_cpu</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bprint_entry\">bprint_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#disable\">disable</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#len\">len</a> = 0, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tracing_selftest_running\">tracing_selftest_running</a> || <a class=\"id\" href=\"#tracing_disabled\">tracing_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't pollute graph traces with trace_vprintk internals */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pause_graph_tracing\">pause_graph_tracing</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable_notrace\">preempt_disable_notrace</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable\">disable</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#disable\">disable</a> != 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lockdep uses trace_printk for lock tracing */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#trace_buf_lock\">trace_buf_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#vbin_printf\">vbin_printf</a>(<a class=\"id\" href=\"#trace_buf\">trace_buf</a>, <a class=\"id\" href=\"#TRACE_BUF_SIZE\">TRACE_BUF_SIZE</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#TRACE_BUF_SIZE\">TRACE_BUF_SIZE</a> || <a class=\"id\" href=\"#len\">len</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(*<a class=\"id\" href=\"#entry\">entry</a>) + sizeof(<a class=\"id\" href=\"#u32\">u32</a>) * <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#trace_buffer_lock_reserve\">trace_buffer_lock_reserve</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#TRACE_BPRINT\">TRACE_BPRINT</a>, <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
];
xr_frag_insert('l/68/e2825bbd0c60072634a6006d77aad66125e2b1.xr', __xr_tmp);
