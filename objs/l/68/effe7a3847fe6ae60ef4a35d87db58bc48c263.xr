var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/> * if one state of type C2 or C3 is available, mark this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU as being \"idle manageable\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_POWER\">ACPI_PROCESSOR_MAX_POWER</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#valid\">valid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a> >= <a class=\"id\" href=\"#ACPI_STATE_C2\">ACPI_STATE_C2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#power\">power</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_idle_bm_check - checks if bus master activity was detected</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_idle_bm_check\">acpi_idle_bm_check</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bm_status\">bm_status</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bm_check_disable\">bm_check_disable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_read_bit_register\">acpi_read_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_BUS_MASTER_STATUS\">ACPI_BITREG_BUS_MASTER_STATUS</a>, &amp;<a class=\"id\" href=\"#bm_status\">bm_status</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bm_status\">bm_status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_BUS_MASTER_STATUS\">ACPI_BITREG_BUS_MASTER_STATUS</a>, 1);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PIIX4 Erratum #18: Note that BM_STS doesn't always reflect</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the true state of bus mastering activity; forcing us to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * manually check the BMIDEA bit of each IDE channel.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#errata\">errata</a>.<a class=\"id\" href=\"#piix4\">piix4</a>.<a class=\"id\" href=\"#bmisx\">bmisx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#inb_p\">inb_p</a>(<a class=\"id\" href=\"#errata\">errata</a>.<a class=\"id\" href=\"#piix4\">piix4</a>.<a class=\"id\" href=\"#bmisx\">bmisx</a> + 0x02) &amp; 0x01)", 
"<span class=\"ts\"/><span class=\"ts\"/>    || (<a class=\"id\" href=\"#inb_p\">inb_p</a>(<a class=\"id\" href=\"#errata\">errata</a>.<a class=\"id\" href=\"#piix4\">piix4</a>.<a class=\"id\" href=\"#bmisx\">bmisx</a> + 0x0A) &amp; 0x01))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bm_status\">bm_status</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bm_status\">bm_status</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_idle_do_entry - a helper function that does C2 and C3 type entry</span>", 
"<span class=\"comment\"> * @cx: cstate data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller disables interrupt before call and enables interrupt after return.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#acpi_idle_do_entry\">acpi_idle_do_entry</a>(struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't trace irqs off for idle */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stop_critical_timings\">stop_critical_timings</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#entry_method\">entry_method</a> == <a class=\"id\" href=\"#ACPI_CSTATE_FFH\">ACPI_CSTATE_FFH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Call into architectural FFH based C-state */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_ffh_cstate_enter\">acpi_processor_ffh_cstate_enter</a>(<a class=\"id\" href=\"#cx\">cx</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#entry_method\">entry_method</a> == <a class=\"id\" href=\"#ACPI_CSTATE_HALT\">ACPI_CSTATE_HALT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_safe_halt\">acpi_safe_halt</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* IO port based C-state */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inb\">inb</a>(<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Dummy wait op - must do something useless after P_LVL2 read</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   because chipsets cannot guarantee that STPCLK# signal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   gets asserted in time to freeze execution properly. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inl\">inl</a>(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xpm_timer_block\">xpm_timer_block</a>.<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_critical_timings\">start_critical_timings</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_idle_enter_c1 - enters an ACPI C1 state-type</span>", 
"<span class=\"comment\"> * @dev: the target CPU</span>", 
"<span class=\"comment\"> * @state: the state data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is equivalent to the HALT instruction.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_idle_enter_c1\">acpi_idle_enter_c1</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cpuidle_state\">cpuidle_state</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a>  <a class=\"id\" href=\"#kt1\">kt1</a>, <a class=\"id\" href=\"#kt2\">kt2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#idle_time\">idle_time</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a> = <a class=\"id\" href=\"#cpuidle_get_statedata\">cpuidle_get_statedata</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#processors\">processors</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pr\">pr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do not access any ACPI IO ports in suspend path */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_idle_suspend\">acpi_idle_suspend</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_timer_state_broadcast\">lapic_timer_state_broadcast</a>(<a class=\"id\" href=\"#pr\">pr</a>, <a class=\"id\" href=\"#cx\">cx</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kt1\">kt1</a> = <a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_idle_do_entry\">acpi_idle_do_entry</a>(<a class=\"id\" href=\"#cx\">cx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kt2\">kt2</a> = <a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idle_time\">idle_time</a> =  <a class=\"id\" href=\"#ktime_to_us\">ktime_to_us</a>(<a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#kt2\">kt2</a>, <a class=\"id\" href=\"#kt1\">kt1</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#usage\">usage</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_timer_state_broadcast\">lapic_timer_state_broadcast</a>(<a class=\"id\" href=\"#pr\">pr</a>, <a class=\"id\" href=\"#cx\">cx</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#idle_time\">idle_time</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_idle_enter_simple - enters an ACPI state without BM handling</span>", 
"<span class=\"comment\"> * @dev: the target CPU</span>", 
"<span class=\"comment\"> * @state: the state data</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_idle_enter_simple\">acpi_idle_enter_simple</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#cpuidle_state\">cpuidle_state</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a> = <a class=\"id\" href=\"#cpuidle_get_statedata\">cpuidle_get_statedata</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a>  <a class=\"id\" href=\"#kt1\">kt1</a>, <a class=\"id\" href=\"#kt2\">kt2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#idle_time_ns\">idle_time_ns</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#idle_time\">idle_time</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#processors\">processors</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pr\">pr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_idle_suspend\">acpi_idle_suspend</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return(<a class=\"id\" href=\"#acpi_idle_enter_c1\">acpi_idle_enter_c1</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#state\">state</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#entry_method\">entry_method</a> != <a class=\"id\" href=\"#ACPI_CSTATE_FFH\">ACPI_CSTATE_FFH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> &= ~<a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TS_POLLING-cleared state must be visible before we test</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NEED_RESCHED:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#need_resched\">need_resched</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must be done before busmaster disable as we might need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * access HPET !</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_timer_state_broadcast\">lapic_timer_state_broadcast</a>(<a class=\"id\" href=\"#pr\">pr</a>, <a class=\"id\" href=\"#cx\">cx</a>, 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_STATE_C3\">ACPI_STATE_C3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FLUSH_CPU_CACHE\">ACPI_FLUSH_CPU_CACHE</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kt1\">kt1</a> = <a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Tell the scheduler that we are going deep-idle: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_idle_sleep_event\">sched_clock_idle_sleep_event</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_idle_do_entry\">acpi_idle_do_entry</a>(<a class=\"id\" href=\"#cx\">cx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kt2\">kt2</a> = <a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idle_time_ns\">idle_time_ns</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#kt2\">kt2</a>, <a class=\"id\" href=\"#kt1\">kt1</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idle_time\">idle_time</a> = <a class=\"id\" href=\"#idle_time_ns\">idle_time_ns</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#idle_time\">idle_time</a>, <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tell the scheduler how much we idled: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_idle_wakeup_event\">sched_clock_idle_wakeup_event</a>(<a class=\"id\" href=\"#idle_time_ns\">idle_time_ns</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#entry_method\">entry_method</a> != <a class=\"id\" href=\"#ACPI_CSTATE_FFH\">ACPI_CSTATE_FFH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#usage\">usage</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_timer_state_broadcast\">lapic_timer_state_broadcast</a>(<a class=\"id\" href=\"#pr\">pr</a>, <a class=\"id\" href=\"#cx\">cx</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#time\">time</a> += <a class=\"id\" href=\"#idle_time\">idle_time</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#idle_time\">idle_time</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#c3_cpu_count\">c3_cpu_count</a>;", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#c3_lock\">c3_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_idle_enter_bm - enters C3 with proper BM handling</span>", 
"<span class=\"comment\"> * @dev: the target CPU</span>", 
"<span class=\"comment\"> * @state: the state data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If BM is detected, the deepest non-C3 idle state is entered instead.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_idle_enter_bm\">acpi_idle_enter_bm</a>(struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cpuidle_state\">cpuidle_state</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a> = <a class=\"id\" href=\"#cpuidle_get_statedata\">cpuidle_get_statedata</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a>  <a class=\"id\" href=\"#kt1\">kt1</a>, <a class=\"id\" href=\"#kt2\">kt2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#idle_time_ns\">idle_time_ns</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#idle_time\">idle_time</a>;", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#processors\">processors</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pr\">pr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_idle_suspend\">acpi_idle_suspend</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return(<a class=\"id\" href=\"#acpi_idle_enter_c1\">acpi_idle_enter_c1</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#state\">state</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#bm_sts_skip\">bm_sts_skip</a> && <a class=\"id\" href=\"#acpi_idle_bm_check\">acpi_idle_bm_check</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#safe_state\">safe_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#last_state\">last_state</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#safe_state\">safe_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#safe_state\">safe_state</a>-><a class=\"id\" href=\"#enter\">enter</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#safe_state\">safe_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_safe_halt\">acpi_safe_halt</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#entry_method\">entry_method</a> != <a class=\"id\" href=\"#ACPI_CSTATE_FFH\">ACPI_CSTATE_FFH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> &= ~<a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TS_POLLING-cleared state must be visible before we test</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NEED_RESCHED:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#need_resched\">need_resched</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_unlazy_tlb\">acpi_unlazy_tlb</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tell the scheduler that we are going deep-idle: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_idle_sleep_event\">sched_clock_idle_sleep_event</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must be done before busmaster disable as we might need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * access HPET !</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_timer_state_broadcast\">lapic_timer_state_broadcast</a>(<a class=\"id\" href=\"#pr\">pr</a>, <a class=\"id\" href=\"#cx\">cx</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kt1\">kt1</a> = <a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disable bus master</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bm_check implies we need ARB_DIS</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * !bm_check implies we need cache flush</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bm_control implies whether we can do ARB_DIS</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * That leaves a case where bm_check is set and bm_control is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not set. In that case we cannot do much, we enter C3</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * without doing anything.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_check\">bm_check</a> && <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_control\">bm_control</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#c3_lock\">c3_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c3_cpu_count\">c3_cpu_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable bus master arbitration when all CPUs are in C3 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c3_cpu_count\">c3_cpu_count</a> == <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_ARB_DISABLE\">ACPI_BITREG_ARB_DISABLE</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#c3_lock\">c3_lock</a>);", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_check\">bm_check</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FLUSH_CPU_CACHE\">ACPI_FLUSH_CPU_CACHE</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_idle_do_entry\">acpi_idle_do_entry</a>(<a class=\"id\" href=\"#cx\">cx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Re-enable bus master arbitration */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_check\">bm_check</a> && <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_control\">bm_control</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#c3_lock\">c3_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_ARB_DISABLE\">ACPI_BITREG_ARB_DISABLE</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c3_cpu_count\">c3_cpu_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#c3_lock\">c3_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kt2\">kt2</a> = <a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idle_time_ns\">idle_time_ns</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#kt2\">kt2</a>, <a class=\"id\" href=\"#kt1\">kt1</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idle_time\">idle_time</a> = <a class=\"id\" href=\"#idle_time_ns\">idle_time_ns</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#idle_time\">idle_time</a>, <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tell the scheduler how much we idled: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_idle_wakeup_event\">sched_clock_idle_wakeup_event</a>(<a class=\"id\" href=\"#idle_time_ns\">idle_time_ns</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#entry_method\">entry_method</a> != <a class=\"id\" href=\"#ACPI_CSTATE_FFH\">ACPI_CSTATE_FFH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#usage\">usage</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_timer_state_broadcast\">lapic_timer_state_broadcast</a>(<a class=\"id\" href=\"#pr\">pr</a>, <a class=\"id\" href=\"#cx\">cx</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#time\">time</a> += <a class=\"id\" href=\"#idle_time\">idle_time</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#idle_time\">idle_time</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#cpuidle_driver\">cpuidle_driver</a> <a class=\"id\" href=\"#acpi_idle_driver\">acpi_idle_driver</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> =<span class=\"ts\"/><span class=\"ts\"/>\"acpi_idle\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a> =<span class=\"ts\"/><a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_processor_setup_cpuidle - prepares and configures CPUIDLE</span>", 
"<span class=\"comment\"> * @pr: the ACPI processor</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_processor_setup_cpuidle\">acpi_processor_setup_cpuidle</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#CPUIDLE_DRIVER_STATE_START\">CPUIDLE_DRIVER_STATE_START</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuidle_state\">cpuidle_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuidle_device\">cpuidle_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = &amp;<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#power_setup_done\">power_setup_done</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#power\">power</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CPUIDLE_STATE_MAX\">CPUIDLE_STATE_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>[0] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#desc\">desc</a>[0] = '\\0';", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_cstate\">max_cstate</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_cstate\">max_cstate</a> = 1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_POWER\">ACPI_PROCESSOR_MAX_POWER</a> && <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#max_cstate\">max_cstate</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a> = &amp;<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#count\">count</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#valid\">valid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>) && (<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() &gt; 1) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#has_cst\">has_cst</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_FADT_C2_MP_SUPPORTED\">ACPI_FADT_C2_MP_SUPPORTED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_set_statedata\">cpuidle_set_statedata</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#cx\">cx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#CPUIDLE_NAME_LEN\">CPUIDLE_NAME_LEN</a>, \"C%d\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#CPUIDLE_DESC_LEN\">CPUIDLE_DESC_LEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#exit_latency\">exit_latency</a> = <a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#latency\">latency</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#target_residency\">target_residency</a> = <a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#latency\">latency</a> * <a class=\"id\" href=\"#latency_factor\">latency_factor</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#power_usage\">power_usage</a> = <a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#power\">power</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CPUIDLE_FLAG_SHALLOW\">CPUIDLE_FLAG_SHALLOW</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#entry_method\">entry_method</a> == <a class=\"id\" href=\"#ACPI_CSTATE_FFH\">ACPI_CSTATE_FFH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CPUIDLE_FLAG_TIME_VALID\">CPUIDLE_FLAG_TIME_VALID</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#enter\">enter</a> = <a class=\"id\" href=\"#acpi_idle_enter_c1\">acpi_idle_enter_c1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#safe_state\">safe_state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_C2\">ACPI_STATE_C2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CPUIDLE_FLAG_BALANCED\">CPUIDLE_FLAG_BALANCED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CPUIDLE_FLAG_TIME_VALID\">CPUIDLE_FLAG_TIME_VALID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#enter\">enter</a> = <a class=\"id\" href=\"#acpi_idle_enter_simple\">acpi_idle_enter_simple</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#safe_state\">safe_state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_C3\">ACPI_STATE_C3</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CPUIDLE_FLAG_DEEP\">CPUIDLE_FLAG_DEEP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CPUIDLE_FLAG_TIME_VALID\">CPUIDLE_FLAG_TIME_VALID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CPUIDLE_FLAG_CHECK_BM\">CPUIDLE_FLAG_CHECK_BM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#enter\">enter</a> = <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_check\">bm_check</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_idle_enter_bm\">acpi_idle_enter_bm</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_idle_enter_simple\">acpi_idle_enter_simple</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#CPUIDLE_STATE_MAX\">CPUIDLE_STATE_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state_count\">state_count</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#acpi_processor_cst_has_changed\">acpi_processor_cst_has_changed</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_option_idle_override\">boot_option_idle_override</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pr\">pr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nocst\">nocst</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#power_setup_done\">power_setup_done</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_pause_and_lock\">cpuidle_pause_and_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_disable_device\">cpuidle_disable_device</a>(&amp;<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_get_power_info\">acpi_processor_get_power_info</a>(<a class=\"id\" href=\"#pr\">pr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#power\">power</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_setup_cpuidle\">acpi_processor_setup_cpuidle</a>(<a class=\"id\" href=\"#pr\">pr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cpuidle_enable_device\">cpuidle_enable_device</a>(&amp;<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_resume_and_unlock\">cpuidle_resume_and_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#acpi_processor_power_init\">acpi_processor_power_init</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = 0;", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#first_run\">first_run</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_option_idle_override\">boot_option_idle_override</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#first_run\">first_run</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idle_halt\">idle_halt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * When the boot option of \"idle=halt\" is added, halt</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is used for CPU IDLE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * In such case C2/C3 is meaningless. So the max_cstate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is set to one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_cstate\">max_cstate</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_check_system\">dmi_check_system</a>(<a class=\"id\" href=\"#processor_power_dmi_table\">processor_power_dmi_table</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_cstate\">max_cstate</a> = <a class=\"id\" href=\"#acpi_processor_cstate_check\">acpi_processor_cstate_check</a>(<a class=\"id\" href=\"#max_cstate\">max_cstate</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max_cstate\">max_cstate</a> &lt; <a class=\"id\" href=\"#ACPI_C_STATES_MAX\">ACPI_C_STATES_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"ACPI: processor limited to max C-state %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#max_cstate\">max_cstate</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_run\">first_run</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pr\">pr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#cst_control\">cst_control</a> && !<a class=\"id\" href=\"#nocst\">nocst</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_write_port\">acpi_os_write_port</a>(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#smi_command\">smi_command</a>, <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#cst_control\">cst_control</a>, 8);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Notifying BIOS of _CST ability failed\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_get_power_info\">acpi_processor_get_power_info</a>(<a class=\"id\" href=\"#pr\">pr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#power_setup_done\">power_setup_done</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Install the idle handler if processor power management is supported.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that we use previously set idle handler will be used on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * platforms that only support C1.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#power\">power</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_setup_cpuidle\">acpi_processor_setup_cpuidle</a>(<a class=\"id\" href=\"#pr\">pr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuidle_register_device\">cpuidle_register_device</a>(&amp;<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#acpi_processor_power_exit\">acpi_processor_power_exit</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_option_idle_override\">boot_option_idle_override</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuidle_unregister_device\">cpuidle_unregister_device</a>(&amp;<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#power_setup_done\">power_setup_done</a> = 0;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/68/effe7a3847fe6ae60ef4a35d87db58bc48c263.xr', __xr_tmp);
