var __xr_tmp = [
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#xcurrent\">xcurrent</a>, <a class=\"id\" href=\"#previous\">previous</a>, <a class=\"id\" href=\"#gotcount\">gotcount</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If last read was short due to end of file, return last block now */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCount\">writeCount</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCount\">writeCount</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gotcount\">gotcount</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbuf\">dbuf</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dbuf\">dbuf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writePos\">writePos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xcurrent\">xcurrent</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCurrent\">writeCurrent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We will always have pending decoded data to write into the output</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   buffer unless this is the very first call (in which case we haven't</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Huffman-decoded a block into the intermediate buffer yet). */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCopies\">writeCopies</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Inside the loop, writeCopies means extra copies (beyond 1) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCopies\">writeCopies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Loop outputting bytes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the output buffer is full, snapshot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * state and return */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gotcount\">gotcount</a> >= <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writePos\">writePos</a> = <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCurrent\">writeCurrent</a> = <a class=\"id\" href=\"#xcurrent\">xcurrent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCopies\">writeCopies</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write next byte into output buffer, updating CRC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outbuf\">outbuf</a>[<a class=\"id\" href=\"#gotcount\">gotcount</a>++] = <a class=\"id\" href=\"#xcurrent\">xcurrent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCRC\">writeCRC</a> = (((<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCRC\">writeCRC</a>) << 8)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>^<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#crc32Table\">crc32Table</a>[((<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCRC\">writeCRC</a>) >> 24)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>^<a class=\"id\" href=\"#xcurrent\">xcurrent</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Loop now if we're outputting multiple</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * copies of this byte */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCopies\">writeCopies</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCopies\">writeCopies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#decode_next_byte\">decode_next_byte</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCount\">writeCount</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Follow sequence vector to undo</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Burrows-Wheeler transform */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#previous\">previous</a> = <a class=\"id\" href=\"#xcurrent\">xcurrent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#dbuf\">dbuf</a>[<a class=\"id\" href=\"#pos\">pos</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xcurrent\">xcurrent</a> = <a class=\"id\" href=\"#pos\">pos</a>&amp;0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> >>= 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* After 3 consecutive copies of the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   byte, the 4th is a repeat count.  We count</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   down from 4 instead *of counting up because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   testing for non-zero is faster */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeRunCountdown\">writeRunCountdown</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#xcurrent\">xcurrent</a> != <a class=\"id\" href=\"#previous\">previous</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeRunCountdown\">writeRunCountdown</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have a repeated run, this byte</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * indicates the count */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCopies\">writeCopies</a> = <a class=\"id\" href=\"#xcurrent\">xcurrent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xcurrent\">xcurrent</a> = <a class=\"id\" href=\"#previous\">previous</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeRunCountdown\">writeRunCountdown</a> = 5;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Sometimes there are just 3 bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (run length 0) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCopies\">writeCopies</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#decode_next_byte\">decode_next_byte</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Subtract the 1 copy we'd output</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * anyway to get extras */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCopies\">writeCopies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Decompression of this block completed successfully */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCRC\">writeCRC</a> = ~<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCRC\">writeCRC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#totalCRC\">totalCRC</a> = ((<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#totalCRC\">totalCRC</a> << 1) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#totalCRC\">totalCRC</a> >> 31)) ^ <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCRC\">writeCRC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If this block had a CRC error, force file level CRC error. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCRC\">writeCRC</a> != <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#headerCRC\">headerCRC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#totalCRC\">totalCRC</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#headerCRC\">headerCRC</a>+1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_LAST_BLOCK\">RETVAL_LAST_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Refill the intermediate buffer by Huffman-decoding next</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * block of input */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* (previous is just a convenient unused temp variable here) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#previous\">previous</a> = <a class=\"id\" href=\"#get_next_block\">get_next_block</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#previous\">previous</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCount\">writeCount</a> = <a class=\"id\" href=\"#previous\">previous</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#previous\">previous</a> != <a class=\"id\" href=\"#RETVAL_LAST_BLOCK\">RETVAL_LAST_BLOCK</a>) ? <a class=\"id\" href=\"#previous\">previous</a> : <a class=\"id\" href=\"#gotcount\">gotcount</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCRC\">writeCRC</a> = 0xffffffffUL;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writePos\">writePos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xcurrent\">xcurrent</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCurrent\">writeCurrent</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#decode_next_byte\">decode_next_byte</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#nofill\">nofill</a>(void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/* Allocate the structure, read file header.  If in_fd ==-1, inbuf must contain</span>", 
"<span class=\"comment\">   a complete bunzip file (len bytes long).  If in_fd!=-1, inbuf and len are</span>", 
"<span class=\"comment\">   ignored, and data is read from file handle into temporary buffer. */</span>", 
"static int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#start_bunzip\">start_bunzip</a>(struct <a class=\"id\" href=\"#bunzip_data\">bunzip_data</a> **<a class=\"id\" href=\"#bdp\">bdp</a>, void *<a class=\"id\" href=\"#inbuf\">inbuf</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int (*<a class=\"id\" href=\"#fill\">fill</a>)(void*, unsigned int))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bunzip_data\">bunzip_data</a> *<a class=\"id\" href=\"#bd\">bd</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>const unsigned int <a class=\"id\" href=\"#BZh0\">BZh0</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>(((unsigned int)'B') << 24)+(((unsigned int)'Z') << 16)", 
"<span class=\"ts\"/><span class=\"ts\"/>+(((unsigned int)'h') << 8)+(unsigned int)'0';", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Figure out how much data to allocate */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = sizeof(struct <a class=\"id\" href=\"#bunzip_data\">bunzip_data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate bunzip_data.  Most fields initialize to zero. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a> = *<a class=\"id\" href=\"#bdp\">bdp</a> = <a class=\"id\" href=\"#malloc\">malloc</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bd\">bd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_OUT_OF_MEMORY\">RETVAL_OUT_OF_MEMORY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bd\">bd</a>, 0, sizeof(struct <a class=\"id\" href=\"#bunzip_data\">bunzip_data</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup input buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbuf\">inbuf</a> = <a class=\"id\" href=\"#inbuf\">inbuf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufCount\">inbufCount</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fill\">fill</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#fill\">fill</a> = <a class=\"id\" href=\"#fill\">fill</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#fill\">fill</a> = <a class=\"id\" href=\"#nofill\">nofill</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Init the CRC32 table (big endian) */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 256; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#i\">i</a> << 24;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 8; <a class=\"id\" href=\"#j\">j</a>; <a class=\"id\" href=\"#j\">j</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#c\">c</a>&amp;0x80000000 ? (<a class=\"id\" href=\"#c\">c</a> << 1)^0x04c11db7 : (<a class=\"id\" href=\"#c\">c</a> << 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#crc32Table\">crc32Table</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure that file starts with \"BZh['1'-'9'].\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 32);", 
"<span class=\"ts\"/>if (((unsigned int)(<a class=\"id\" href=\"#i\">i</a>-<a class=\"id\" href=\"#BZh0\">BZh0</a>-1)) >= 9)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_NOT_BZIP_DATA\">RETVAL_NOT_BZIP_DATA</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fourth byte (ascii '1'-'9'), indicates block size in units of 100k of</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   uncompressed data.  Allocate intermediate buffer for block. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dbufSize\">dbufSize</a> = 100000*(<a class=\"id\" href=\"#i\">i</a>-<a class=\"id\" href=\"#BZh0\">BZh0</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dbuf\">dbuf</a> = <a class=\"id\" href=\"#large_malloc\">large_malloc</a>(<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dbufSize\">dbufSize</a> * sizeof(int));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dbuf\">dbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_OUT_OF_MEMORY\">RETVAL_OUT_OF_MEMORY</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_OK\">RETVAL_OK</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Example usage: decompress src_fd to dst_fd.  (Stops at end of bzip2 data,</span>", 
"<span class=\"comment\">   not end of file.) */</span>", 
"<a class=\"id\" href=\"#STATIC\">STATIC</a> int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#bunzip2\">bunzip2</a>(unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int(*<a class=\"id\" href=\"#fill\">fill</a>)(void*, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int(*<a class=\"id\" href=\"#flush\">flush</a>)(void*, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#outbuf\">outbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void(*<a class=\"id\" href=\"#error_fn\">error_fn</a>)(char *<a class=\"id\" href=\"#x\">x</a>))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bunzip_data\">bunzip_data</a> *<a class=\"id\" href=\"#bd\">bd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = -1;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#inbuf\">inbuf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_error_fn\">set_error_fn</a>(<a class=\"id\" href=\"#error_fn\">error_fn</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flush\">flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outbuf\">outbuf</a> = <a class=\"id\" href=\"#malloc\">malloc</a>(<a class=\"id\" href=\"#BZIP2_IOBUF_SIZE\">BZIP2_IOBUF_SIZE</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#outbuf\">outbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"Could not allocate output bufer\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_OUT_OF_MEMORY\">RETVAL_OUT_OF_MEMORY</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inbuf\">inbuf</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inbuf\">inbuf</a> = <a class=\"id\" href=\"#malloc\">malloc</a>(<a class=\"id\" href=\"#BZIP2_IOBUF_SIZE\">BZIP2_IOBUF_SIZE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inbuf\">inbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"Could not allocate input bufer\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#RETVAL_OUT_OF_MEMORY\">RETVAL_OUT_OF_MEMORY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_0\">exit_0</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#start_bunzip\">start_bunzip</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>, <a class=\"id\" href=\"#inbuf\">inbuf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#fill\">fill</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#read_bunzip\">read_bunzip</a>(<a class=\"id\" href=\"#bd\">bd</a>, <a class=\"id\" href=\"#outbuf\">outbuf</a>, <a class=\"id\" href=\"#BZIP2_IOBUF_SIZE\">BZIP2_IOBUF_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#flush\">flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outbuf\">outbuf</a> += <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#flush\">flush</a>(<a class=\"id\" href=\"#outbuf\">outbuf</a>, <a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#RETVAL_UNEXPECTED_OUTPUT_EOF\">RETVAL_UNEXPECTED_OUTPUT_EOF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Check CRC and release memory */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#RETVAL_LAST_BLOCK\">RETVAL_LAST_BLOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#headerCRC\">headerCRC</a> != <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#totalCRC\">totalCRC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"Data integrity error when decompressing.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#RETVAL_OK\">RETVAL_OK</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#RETVAL_UNEXPECTED_OUTPUT_EOF\">RETVAL_UNEXPECTED_OUTPUT_EOF</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"Compressed file ends unexpectedly\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bd\">bd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_1\">exit_1</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dbuf\">dbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#large_free\">large_free</a>(<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dbuf\">dbuf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufPos\">inbufPos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"<a class=\"id\" href=\"#exit_1\">exit_1</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#inbuf\">inbuf</a>);", 
"<a class=\"id\" href=\"#exit_0\">exit_0</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flush\">flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#outbuf\">outbuf</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#PREBOOT\">PREBOOT</a>", 
"<a class=\"id\" href=\"#STATIC\">STATIC</a> int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#decompress\">decompress</a>(unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int(*<a class=\"id\" href=\"#fill\">fill</a>)(void*, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int(*<a class=\"id\" href=\"#flush\">flush</a>)(void*, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#outbuf\">outbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void(*<a class=\"id\" href=\"#error_fn\">error_fn</a>)(char *<a class=\"id\" href=\"#x\">x</a>))", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bunzip2\">bunzip2</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a> - 4, <a class=\"id\" href=\"#fill\">fill</a>, <a class=\"id\" href=\"#flush\">flush</a>, <a class=\"id\" href=\"#outbuf\">outbuf</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#error_fn\">error_fn</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/69/4766a95c7e99b9d75cb4686d6015e3b445dabb.xr', __xr_tmp);
