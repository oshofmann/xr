var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * arch/x86_64/lib/csum-partial.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains network checksum routines that are better done</span>", 
"<span class=\"comment\"> * in an architecture-specific manner due to speed.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#checksum\">checksum</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned short <a class=\"id\" href=\"#from32to16\">from32to16</a>(unsigned <a class=\"id\" href=\"#a\">a</a>) ", 
"{", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#a\">a</a> >> 16; ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"addw %w2,%w0\\n\\t\"", 
"<span class=\"ts\"/>    \"adcw $0,%w0\\n\" ", 
"<span class=\"ts\"/>    : \"=r\" (<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/>    : \"0\" (<a class=\"id\" href=\"#b\">b</a>), \"r\" (<a class=\"id\" href=\"#a\">a</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#b\">b</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do a 64-bit checksum on an arbitrary memory area.</span>", 
"<span class=\"comment\"> * Returns a 32bit checksum.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This isn't as time critical as it used to be because many NICs</span>", 
"<span class=\"comment\"> * do hardware checksumming these days.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Things tried and found to not make it faster:</span>", 
"<span class=\"comment\"> * Manual Prefetching</span>", 
"<span class=\"comment\"> * Unrolling to an 128 bytes inner loop.</span>", 
"<span class=\"comment\"> * Using interleaving with more registers to break the carry chains.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned <a class=\"id\" href=\"#do_csum\">do_csum</a>(const unsigned char *<a class=\"id\" href=\"#buff\">buff</a>, unsigned <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#odd\">odd</a>, <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#len\">len</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>; ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#odd\">odd</a> = 1 &amp; (unsigned long) <a class=\"id\" href=\"#buff\">buff</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#odd\">odd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = *<a class=\"id\" href=\"#buff\">buff</a> << 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#len\">len</a> >> 1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nr of 16-bit words.. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (2 &amp; (unsigned long) <a class=\"id\" href=\"#buff\">buff</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += *(unsigned short *)<a class=\"id\" href=\"#buff\">buff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> >>= 1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nr of 32-bit words.. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#zero\">zero</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#count64\">count64</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (4 &amp; (unsigned long) <a class=\"id\" href=\"#buff\">buff</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += *(unsigned int *) <a class=\"id\" href=\"#buff\">buff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a> += 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> >>= 1;<span class=\"ts\"/><span class=\"comment\">/* nr of 64-bit words.. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* main loop using 64byte blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zero\">zero</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count64\">count64</a> = <a class=\"id\" href=\"#count\">count</a> >> 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count64\">count64</a>) { ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"addq 0*8(%[src]),%[res]\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"adcq 1*8(%[src]),%[res]\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"adcq 2*8(%[src]),%[res]\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"adcq 3*8(%[src]),%[res]\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"adcq 4*8(%[src]),%[res]\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"adcq 5*8(%[src]),%[res]\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"adcq 6*8(%[src]),%[res]\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"adcq 7*8(%[src]),%[res]\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"adcq %[zero],%[res]\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    : [<a class=\"id\" href=\"#res\">res</a>] \"=r\" (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    : [<a class=\"id\" href=\"#src\">src</a>] \"r\" (<a class=\"id\" href=\"#buff\">buff</a>), [<a class=\"id\" href=\"#zero\">zero</a>] \"r\" (<a class=\"id\" href=\"#zero\">zero</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"[res]\" (<a class=\"id\" href=\"#result\">result</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a> += 64;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count64\">count64</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* last upto 7 8byte blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> %= 8; ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>) { ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"addq %1,%0\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"adcq %2,%0\\n\" ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    : \"=r\" (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    : \"m\" (*(unsigned long *)<a class=\"id\" href=\"#buff\">buff</a>), ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"r\" (<a class=\"id\" href=\"#zero\">zero</a>),  \"0\" (<a class=\"id\" href=\"#result\">result</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#count\">count</a>; ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a> += 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#add32_with_carry\">add32_with_carry</a>(<a class=\"id\" href=\"#result\">result</a>>>32,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#result\">result</a>&amp;0xffffffff); ", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &amp; 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += *(unsigned int *) <a class=\"id\" href=\"#buff\">buff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a> += 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &amp; 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += *(unsigned short *) <a class=\"id\" href=\"#buff\">buff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &amp; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += *<a class=\"id\" href=\"#buff\">buff</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#add32_with_carry\">add32_with_carry</a>(<a class=\"id\" href=\"#result\">result</a>>>32, <a class=\"id\" href=\"#result\">result</a> &amp; 0xffffffff); ", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#odd\">odd</a>)) { ", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#from32to16\">from32to16</a>(<a class=\"id\" href=\"#result\">result</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = ((<a class=\"id\" href=\"#result\">result</a> >> 8) &amp; 0xff) | ((<a class=\"id\" href=\"#result\">result</a> &amp; 0xff) << 8);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * computes the checksum of a memory block at buff, length len,</span>", 
"<span class=\"comment\"> * and adds in \"sum\" (32-bit)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns a 32-bit number suitable for feeding into itself</span>", 
"<span class=\"comment\"> * or csum_tcpudp_magic</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this function must be called with even lengths, except</span>", 
"<span class=\"comment\"> * for the last fragment, which may be odd</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * it's best to have buff aligned on a 64-bit boundary</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum_partial\">csum_partial</a>(const void *<a class=\"id\" href=\"#buff\">buff</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#sum\">sum</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__wsum\">__wsum</a>)<a class=\"id\" href=\"#add32_with_carry\">add32_with_carry</a>(<a class=\"id\" href=\"#do_csum\">do_csum</a>(<a class=\"id\" href=\"#buff\">buff</a>, <a class=\"id\" href=\"#len\">len</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#sum\">sum</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * this routine is used for miscellaneous IP-like checksums, mainly</span>", 
"<span class=\"comment\"> * in icmp.c</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#ip_compute_csum\">ip_compute_csum</a>(const void *<a class=\"id\" href=\"#buff\">buff</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#csum_fold\">csum_fold</a>(<a class=\"id\" href=\"#csum_partial\">csum_partial</a>(<a class=\"id\" href=\"#buff\">buff</a>,<a class=\"id\" href=\"#len\">len</a>,0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ip_compute_csum\">ip_compute_csum</a>);", 
"", 
];
xr_frag_insert('l/69/573555ff3b8b11a3eafbdeff6531978a97b9bf.xr', __xr_tmp);
