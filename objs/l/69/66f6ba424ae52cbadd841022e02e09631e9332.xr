var __xr_tmp = [
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_load_sub\">update_load_sub</a>(struct <a class=\"id\" href=\"#load_weight\">load_weight</a> *<a class=\"id\" href=\"#lw\">lw</a>, unsigned long <a class=\"id\" href=\"#dec\">dec</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#weight\">weight</a> -= <a class=\"id\" href=\"#dec\">dec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lw\">lw</a>-><a class=\"id\" href=\"#inv_weight\">inv_weight</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * To aid in avoiding the subversion of \"niceness\" due to uneven distribution</span>", 
"<span class=\"comment\"> * of tasks with abnormal \"nice\" values across CPUs the contribution that</span>", 
"<span class=\"comment\"> * each task makes to its run queue's load is weighted according to its</span>", 
"<span class=\"comment\"> * scheduling class and \"nice\" value. For SCHED_NORMAL tasks this is just a</span>", 
"<span class=\"comment\"> * scaled version of the new time slice allocation that they receive on time</span>", 
"<span class=\"comment\"> * slice expiry etc.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WEIGHT_IDLEPRIO\">WEIGHT_IDLEPRIO</a>                3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WMULT_IDLEPRIO\">WMULT_IDLEPRIO</a>         1431655765", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Nice levels are multiplicative, with a gentle 10% change for every</span>", 
"<span class=\"comment\"> * nice level changed. I.e. when a CPU-bound task goes from nice 0 to</span>", 
"<span class=\"comment\"> * nice 1, it will get ~10% less CPU time than another CPU-bound task</span>", 
"<span class=\"comment\"> * that remained on nice 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The \"10% effect\" is relative and cumulative: from _any_ nice level,</span>", 
"<span class=\"comment\"> * if you go up 1 level, it's -10% CPU usage, if you go down 1 level</span>", 
"<span class=\"comment\"> * it's +10% CPU usage. (to achieve that we use a multiplier of 1.25.</span>", 
"<span class=\"comment\"> * If a task goes up by ~10% and another task goes down by ~10% then</span>", 
"<span class=\"comment\"> * the relative distance between them is ~25%.)</span>", 
"<span class=\"comment\"> */</span>", 
"static const int <a class=\"id\" href=\"#prio_to_weight\">prio_to_weight</a>[40] = {", 
" <span class=\"comment\">/* -20 */</span>     88761,     71755,     56483,     46273,     36291,", 
" <span class=\"comment\">/* -15 */</span>     29154,     23254,     18705,     14949,     11916,", 
" <span class=\"comment\">/* -10 */</span>      9548,      7620,      6100,      4904,      3906,", 
" <span class=\"comment\">/*  -5 */</span>      3121,      2501,      1991,      1586,      1277,", 
" <span class=\"comment\">/*   0 */</span>      1024,       820,       655,       526,       423,", 
" <span class=\"comment\">/*   5 */</span>       335,       272,       215,       172,       137,", 
" <span class=\"comment\">/*  10 */</span>       110,        87,        70,        56,        45,", 
" <span class=\"comment\">/*  15 */</span>        36,        29,        23,        18,        15,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Inverse (2^32/x) values of the prio_to_weight[] array, precalculated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In cases where the weight does not change often, we can use the</span>", 
"<span class=\"comment\"> * precalculated inverse to speed up arithmetics by turning divisions</span>", 
"<span class=\"comment\"> * into multiplications:</span>", 
"<span class=\"comment\"> */</span>", 
"static const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#prio_to_wmult\">prio_to_wmult</a>[40] = {", 
" <span class=\"comment\">/* -20 */</span>     48388,     59856,     76040,     92818,    118348,", 
" <span class=\"comment\">/* -15 */</span>    147320,    184698,    229616,    287308,    360437,", 
" <span class=\"comment\">/* -10 */</span>    449829,    563644,    704093,    875809,   1099582,", 
" <span class=\"comment\">/*  -5 */</span>   1376151,   1717300,   2157191,   2708050,   3363326,", 
" <span class=\"comment\">/*   0 */</span>   4194304,   5237765,   6557202,   8165337,  10153587,", 
" <span class=\"comment\">/*   5 */</span>  12820798,  15790321,  19976592,  24970740,  31350126,", 
" <span class=\"comment\">/*  10 */</span>  39045157,  49367440,  61356676,  76695844,  95443717,", 
" <span class=\"comment\">/*  15 */</span> 119304647, 148102320, 186737708, 238609294, 286331153,", 
"};", 
"", 
"<span class=\"comment\">/* Time spent by the tasks of the cpu accounting group executing in ... */</span>", 
"enum <a class=\"id\" href=\"#cpuacct_stat_index\">cpuacct_stat_index</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CPUACCT_STAT_USER\">CPUACCT_STAT_USER</a>,<span class=\"ts\"/><span class=\"comment\">/* ... user mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CPUACCT_STAT_SYSTEM\">CPUACCT_STAT_SYSTEM</a>,<span class=\"ts\"/><span class=\"comment\">/* ... kernel mode */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CPUACCT_STAT_NSTATS\">CPUACCT_STAT_NSTATS</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_CPUACCT\">CONFIG_CGROUP_CPUACCT</a>", 
"static void <a class=\"id\" href=\"#cpuacct_charge\">cpuacct_charge</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cputime\">cputime</a>);", 
"static void <a class=\"id\" href=\"#cpuacct_update_stats\">cpuacct_update_stats</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#cpuacct_stat_index\">cpuacct_stat_index</a> <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#val\">val</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpuacct_charge\">cpuacct_charge</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cputime\">cputime</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpuacct_update_stats\">cpuacct_update_stats</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#cpuacct_stat_index\">cpuacct_stat_index</a> <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#val\">val</a>) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inc_cpu_load\">inc_cpu_load</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, unsigned long <a class=\"id\" href=\"#load\">load</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_load_add\">update_load_add</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#load\">load</a>, <a class=\"id\" href=\"#load\">load</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dec_cpu_load\">dec_cpu_load</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, unsigned long <a class=\"id\" href=\"#load\">load</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_load_sub\">update_load_sub</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#load\">load</a>, <a class=\"id\" href=\"#load\">load</a>);", 
"}", 
"", 
"#if (<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>)) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>)", 
"typedef int (*<a class=\"id\" href=\"#tg_visitor\">tg_visitor</a>)(struct <a class=\"id\" href=\"#task_group\">task_group</a> *, void *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Iterate the full tree, calling @down when first entering a node and @up when</span>", 
"<span class=\"comment\"> * leaving it for the final time.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#walk_tg_tree\">walk_tg_tree</a>(<a class=\"id\" href=\"#tg_visitor\">tg_visitor</a> <a class=\"id\" href=\"#down\">down</a>, <a class=\"id\" href=\"#tg_visitor\">tg_visitor</a> <a class=\"id\" href=\"#up\">up</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#parent\">parent</a>, *<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = &amp;<a class=\"id\" href=\"#root_task_group\">root_task_group</a>;", 
"<a class=\"id\" href=\"#down\">down</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (*<a class=\"id\" href=\"#down\">down</a>)(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#child\">child</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#children\">children</a>, <a class=\"id\" href=\"#siblings\">siblings</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#down\">down</a>;", 
"", 
"<a class=\"id\" href=\"#up\">up</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (*<a class=\"id\" href=\"#up\">up</a>)(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#up\">up</a>;", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tg_nop\">tg_nop</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/* Used instead of source_load when we know the type == 0 */</span>", 
"static unsigned long <a class=\"id\" href=\"#weighted_cpuload\">weighted_cpuload</a>(const int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return a low guess at the load of a migration-source cpu weighted</span>", 
"<span class=\"comment\"> * according to the scheduling class and \"nice\" value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We want to under-estimate the load of migration sources, to</span>", 
"<span class=\"comment\"> * balance conservatively.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#source_load\">source_load</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total\">total</a> = <a class=\"id\" href=\"#weighted_cpuload\">weighted_cpuload</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == 0 || !<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#LB_BIAS\">LB_BIAS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#total\">total</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu_load\">cpu_load</a>[<a class=\"id\" href=\"#type\">type</a>-1], <a class=\"id\" href=\"#total\">total</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return a high guess at the load of a migration-target cpu weighted</span>", 
"<span class=\"comment\"> * according to the scheduling class and \"nice\" value.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#target_load\">target_load</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total\">total</a> = <a class=\"id\" href=\"#weighted_cpuload\">weighted_cpuload</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == 0 || !<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#LB_BIAS\">LB_BIAS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#total\">total</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu_load\">cpu_load</a>[<a class=\"id\" href=\"#type\">type</a>-1], <a class=\"id\" href=\"#total\">total</a>);", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#power_of\">power_of</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#task_hot\">task_hot</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a>, struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>);", 
"", 
"static unsigned long <a class=\"id\" href=\"#cpu_avg_load_per_task\">cpu_avg_load_per_task</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_running\">nr_running</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_running\">nr_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#avg_load_per_task\">avg_load_per_task</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> / <a class=\"id\" href=\"#nr_running\">nr_running</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#avg_load_per_task\">avg_load_per_task</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#avg_load_per_task\">avg_load_per_task</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"", 
"static <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> unsigned long <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#update_shares_data\">update_shares_data</a>;", 
"", 
"static void <a class=\"id\" href=\"#__set_se_shares\">__set_se_shares</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>, unsigned long <a class=\"id\" href=\"#shares\">shares</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate and set the cpu's group shares.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#update_group_shares_cpu\">update_group_shares_cpu</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#sd_shares\">sd_shares</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#sd_rq_weight\">sd_rq_weight</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#usd_rq_weight\">usd_rq_weight</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#shares\">shares</a>, <a class=\"id\" href=\"#rq_weight\">rq_weight</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#boost\">boost</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_weight\">rq_weight</a> = <a class=\"id\" href=\"#usd_rq_weight\">usd_rq_weight</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq_weight\">rq_weight</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boost\">boost</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_weight\">rq_weight</a> = <a class=\"id\" href=\"#NICE_0_LOAD\">NICE_0_LOAD</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *             \\Sum_j shares_j * rq_weight_i</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * shares_i =  -----------------------------</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *                  \\Sum_j rq_weight_j</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shares\">shares</a> = (<a class=\"id\" href=\"#sd_shares\">sd_shares</a> * <a class=\"id\" href=\"#rq_weight\">rq_weight</a>) / <a class=\"id\" href=\"#sd_rq_weight\">sd_rq_weight</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shares\">shares</a> = <a class=\"id\" href=\"#clamp_t\">clamp_t</a>(unsigned long, <a class=\"id\" href=\"#shares\">shares</a>, <a class=\"id\" href=\"#MIN_SHARES\">MIN_SHARES</a>, <a class=\"id\" href=\"#MAX_SHARES\">MAX_SHARES</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#abs\">abs</a>(<a class=\"id\" href=\"#shares\">shares</a> - <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>) &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_sched_shares_thresh\">sysctl_sched_shares_thresh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]-><a class=\"id\" href=\"#rq_weight\">rq_weight</a> = <a class=\"id\" href=\"#boost\">boost</a> ? 0 : <a class=\"id\" href=\"#rq_weight\">rq_weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]-><a class=\"id\" href=\"#shares\">shares</a> = <a class=\"id\" href=\"#boost\">boost</a> ? 0 : <a class=\"id\" href=\"#shares\">shares</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_se_shares\">__set_se_shares</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a>[<a class=\"id\" href=\"#cpu\">cpu</a>], <a class=\"id\" href=\"#shares\">shares</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Re-compute the task group their per cpu shares over the given domain.</span>", 
"<span class=\"comment\"> * This needs to be done in a bottom-up fashion because the rq weight of a</span>", 
"<span class=\"comment\"> * parent group depends on the shares of its child groups.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tg_shares_up\">tg_shares_up</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#weight\">weight</a>, <a class=\"id\" href=\"#rq_weight\">rq_weight</a> = 0, <a class=\"id\" href=\"#sum_weight\">sum_weight</a> = 0, <a class=\"id\" href=\"#shares\">shares</a> = 0;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#usd_rq_weight\">usd_rq_weight</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usd_rq_weight\">usd_rq_weight</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#update_shares_data\">update_shares_data</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usd_rq_weight\">usd_rq_weight</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_weight\">rq_weight</a> += <a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If there are currently no tasks on the cpu pretend there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is one of average load so that when a new task gets to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * run here it will not get delayed by group starvation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#weight\">weight</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#NICE_0_LOAD\">NICE_0_LOAD</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum_weight\">sum_weight</a> += <a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shares\">shares</a> += <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#shares\">shares</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq_weight\">rq_weight</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_weight\">rq_weight</a> = <a class=\"id\" href=\"#sum_weight\">sum_weight</a>;", 
"", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#shares\">shares</a> && <a class=\"id\" href=\"#rq_weight\">rq_weight</a>) || <a class=\"id\" href=\"#shares\">shares</a> &gt; <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#shares\">shares</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shares\">shares</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#shares\">shares</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a> || !(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_LOAD_BALANCE\">SD_LOAD_BALANCE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shares\">shares</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#shares\">shares</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_group_shares_cpu\">update_group_shares_cpu</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#shares\">shares</a>, <a class=\"id\" href=\"#rq_weight\">rq_weight</a>, <a class=\"id\" href=\"#usd_rq_weight\">usd_rq_weight</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Compute the cpu's hierarchical load factor for each task group.</span>", 
"<span class=\"comment\"> * This needs to be done in a top-down fashion because the load of a child</span>", 
"<span class=\"comment\"> * group is a fraction of its parents load.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tg_load_down\">tg_load_down</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#load\">load</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#cpu\">cpu</a> = (long)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]-><a class=\"id\" href=\"#h_load\">h_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> *= <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]-><a class=\"id\" href=\"#shares\">shares</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> /= <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> + 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]-><a class=\"id\" href=\"#h_load\">h_load</a> = <a class=\"id\" href=\"#load\">load</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_shares\">update_shares</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#elapsed\">elapsed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root_task_group_empty\">root_task_group_empty</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#local_clock\">local_clock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elapsed\">elapsed</a> = <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#last_update\">last_update</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elapsed\">elapsed</a> >= (<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#sysctl_sched_shares_ratelimit\">sysctl_sched_shares_ratelimit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#last_update\">last_update</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_tg_tree\">walk_tg_tree</a>(<a class=\"id\" href=\"#tg_nop\">tg_nop</a>, <a class=\"id\" href=\"#tg_shares_up\">tg_shares_up</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_h_load\">update_h_load</a>(long <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk_tg_tree\">walk_tg_tree</a>(<a class=\"id\" href=\"#tg_load_down\">tg_load_down</a>, <a class=\"id\" href=\"#tg_nop\">tg_nop</a>, (void *)<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_shares\">update_shares</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"", 
"static void <a class=\"id\" href=\"#double_rq_lock\">double_rq_lock</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq1\">rq1</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq2\">rq2</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fair double_lock_balance: Safely acquires both rq-&gt;locks in a fair</span>", 
"<span class=\"comment\"> * way at the expense of forcing extra atomic operations in all</span>", 
"<span class=\"comment\"> * invocations.  This assures that the double_lock is acquired using the</span>", 
"<span class=\"comment\"> * same underlying policy as the spinlock_t on this architecture, which</span>", 
"<span class=\"comment\"> * reduces latency compared to the unfair variant below.  However, it</span>", 
"<span class=\"comment\"> * also adds more overhead and therefore may reduce throughput.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#_double_lock_balance\">_double_lock_balance</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest\">busiest</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_rq_lock\">double_rq_lock</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#busiest\">busiest</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#else", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unfair double_lock_balance: Optimizes throughput at the expense of</span>", 
"<span class=\"comment\"> * latency by eliminating extra atomic operations when the locks are</span>", 
"<span class=\"comment\"> * already in proper order on entry.  This favors lower cpu-ids and will</span>", 
"<span class=\"comment\"> * grant the double lock to lower cpus over higher ids under contention,</span>", 
"<span class=\"comment\"> * regardless of entry order into the function.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#_double_lock_balance\">_double_lock_balance</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest\">busiest</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#raw_spin_trylock\">raw_spin_trylock</a>(&amp;<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#lock\">lock</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#busiest\">busiest</a> &lt; <a class=\"id\" href=\"#this_rq\">this_rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_nested\">raw_spin_lock_nested</a>(&amp;<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_nested\">raw_spin_lock_nested</a>(&amp;<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PREEMPT */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * double_lock_balance - lock the busiest runqueue, this_rq is locked already.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#double_lock_balance\">double_lock_balance</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest\">busiest</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* printk() doesn't work good under rq-&gt;lock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#_double_lock_balance\">_double_lock_balance</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#busiest\">busiest</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#double_unlock_balance\">double_unlock_balance</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest\">busiest</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_set_subclass\">lock_set_subclass</a>(&amp;<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#dep_map\">dep_map</a>, 0, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * double_rq_lock - safely lock two runqueues</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note this does not disable interrupts like task_rq_lock,</span>", 
"<span class=\"comment\"> * you need to do so manually before calling.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#double_rq_lock\">double_rq_lock</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq1\">rq1</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq2\">rq2</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#rq1\">rq1</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#rq2\">rq2</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq1\">rq1</a> == <a class=\"id\" href=\"#rq2\">rq2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq1\">rq1</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#rq2\">rq2</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"comment\">/* Fake it out ;) */</span>", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq1\">rq1</a> &lt; <a class=\"id\" href=\"#rq2\">rq2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq1\">rq1</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_nested\">raw_spin_lock_nested</a>(&amp;<a class=\"id\" href=\"#rq2\">rq2</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq2\">rq2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_nested\">raw_spin_lock_nested</a>(&amp;<a class=\"id\" href=\"#rq1\">rq1</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * double_rq_unlock - safely unlock two runqueues</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note this does not restore interrupts like task_rq_unlock,</span>", 
"<span class=\"comment\"> * you need to do so manually after calling.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#double_rq_unlock\">double_rq_unlock</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq1\">rq1</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq2\">rq2</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#rq1\">rq1</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#rq2\">rq2</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rq1\">rq1</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq1\">rq1</a> != <a class=\"id\" href=\"#rq2\">rq2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rq2\">rq2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__release\">__release</a>(<a class=\"id\" href=\"#rq2\">rq2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"static void <a class=\"id\" href=\"#cfs_rq_set_shares\">cfs_rq_set_shares</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, unsigned long <a class=\"id\" href=\"#shares\">shares</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#shares\">shares</a> = <a class=\"id\" href=\"#shares\">shares</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#calc_load_account_idle\">calc_load_account_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>);", 
"static void <a class=\"id\" href=\"#update_sysctl\">update_sysctl</a>(void);", 
"static int <a class=\"id\" href=\"#get_update_sysctl_factor\">get_update_sysctl_factor</a>(void);", 
"static void <a class=\"id\" href=\"#update_cpu_load\">update_cpu_load</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__set_task_cpu\">__set_task_cpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_task_rq\">set_task_rq</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * After -&gt;cpu is set up to a new value, task_rq_lock(p, ...) can be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * successfuly executed on another CPU. We must ensure that updates of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * per-task data have been completed by this moment.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> <a class=\"id\" href=\"#rt_sched_class\">rt_sched_class</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sched_class_highest\">sched_class_highest</a> (&amp;<a class=\"id\" href=\"#rt_sched_class\">rt_sched_class</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_class\">for_each_class</a>(<a class=\"id\" href=\"#class\">class</a>) \\", 
"   for (<a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#sched_class_highest\">sched_class_highest</a>; <a class=\"id\" href=\"#class\">class</a>; <a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"sched_stats.h\"", 
"", 
"static void <a class=\"id\" href=\"#inc_nr_running\">inc_nr_running</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>++;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dec_nr_running\">dec_nr_running</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>--;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_load_weight\">set_load_weight</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_has_rt_policy\">task_has_rt_policy</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#inv_weight\">inv_weight</a> = <a class=\"id\" href=\"#WMULT_CONST\">WMULT_CONST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SCHED_IDLE tasks get minimal weight:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#policy\">policy</a> == <a class=\"id\" href=\"#SCHED_IDLE\">SCHED_IDLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#WEIGHT_IDLEPRIO\">WEIGHT_IDLEPRIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#inv_weight\">inv_weight</a> = <a class=\"id\" href=\"#WMULT_IDLEPRIO\">WMULT_IDLEPRIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#prio_to_weight\">prio_to_weight</a>[<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#static_prio\">static_prio</a> - <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#inv_weight\">inv_weight</a> = <a class=\"id\" href=\"#prio_to_wmult\">prio_to_wmult</a>[<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#static_prio\">static_prio</a> - <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>];", 
"}", 
"", 
"static void <a class=\"id\" href=\"#enqueue_task\">enqueue_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_rq_clock\">update_rq_clock</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_info_queued\">sched_info_queued</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#enqueue_task\">enqueue_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a> = 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dequeue_task\">dequeue_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_rq_clock\">update_rq_clock</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_info_dequeued\">sched_info_dequeued</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#dequeue_task\">dequeue_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * activate_task - move a task to the runqueue.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#activate_task\">activate_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_contributes_to_load\">task_contributes_to_load</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enqueue_task\">enqueue_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_nr_running\">inc_nr_running</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * deactivate_task - remove a task from the runqueue.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#deactivate_task\">deactivate_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_contributes_to_load\">task_contributes_to_load</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dequeue_task\">dequeue_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_nr_running\">dec_nr_running</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"sched_idletask.c\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"sched_fair.c\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"sched_rt.c\"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"# <a class=\"id\" href=\"#include\">include</a> \"sched_debug.c\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __normal_prio - return the priority that is based on the static prio</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__normal_prio\">__normal_prio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#static_prio\">static_prio</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the expected normal priority: i.e. priority</span>", 
"<span class=\"comment\"> * without taking RT-inheritance into account. Might be</span>", 
"<span class=\"comment\"> * boosted by interactivity modifiers. Changes upon fork,</span>", 
"<span class=\"comment\"> * setprio syscalls, and whenever the interactivity</span>", 
"<span class=\"comment\"> * estimator recalculates.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#normal_prio\">normal_prio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prio\">prio</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_has_rt_policy\">task_has_rt_policy</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>-1 - <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt_priority\">rt_priority</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#__normal_prio\">__normal_prio</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#prio\">prio</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the current priority, i.e. the priority</span>", 
"<span class=\"comment\"> * taken into account by the scheduler. This value might</span>", 
"<span class=\"comment\"> * be boosted by RT tasks, or might be boosted by</span>", 
"<span class=\"comment\"> * interactivity modifiers. Will be RT if the task got</span>", 
"<span class=\"comment\"> * RT-boosted. If not then it returns p-&gt;normal_prio.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#effective_prio\">effective_prio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#normal_prio\">normal_prio</a> = <a class=\"id\" href=\"#normal_prio\">normal_prio</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are RT tasks or we were boosted to RT priority,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * keep the priority unchanged. Otherwise, update priority</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the normal priority:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_prio\">rt_prio</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#normal_prio\">normal_prio</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * task_curr - is this task currently executing on a CPU?</span>", 
"<span class=\"comment\"> * @p: the task in question.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#task_curr\">task_curr</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_curr\">cpu_curr</a>(<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>)) == <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#check_class_changed\">check_class_changed</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> *<a class=\"id\" href=\"#prev_class\">prev_class</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#oldprio\">oldprio</a>, int <a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev_class\">prev_class</a> != <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev_class\">prev_class</a>-><a class=\"id\" href=\"#switched_from\">switched_from</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_class\">prev_class</a>-><a class=\"id\" href=\"#switched_from\">switched_from</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#running\">running</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#switched_to\">switched_to</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#running\">running</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#prio_changed\">prio_changed</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#oldprio\">oldprio</a>, <a class=\"id\" href=\"#running\">running</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Is this task likely cache-hot:</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#task_hot\">task_hot</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a>, struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a> != &amp;<a class=\"id\" href=\"#fair_sched_class\">fair_sched_class</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Buddy candidates are cache hot:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#CACHE_HOT_BUDDY\">CACHE_HOT_BUDDY</a>) && <a class=\"id\" href=\"#this_rq\">this_rq</a>()-><a class=\"id\" href=\"#nr_running\">nr_running</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a> == <a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>)-><a class=\"id\" href=\"#next\">next</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a> == <a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>)-><a class=\"id\" href=\"#last\">last</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_sched_migration_cost\">sysctl_sched_migration_cost</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_sched_migration_cost\">sysctl_sched_migration_cost</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#exec_start\">exec_start</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#delta\">delta</a> &lt; (<a class=\"id\" href=\"#s64\">s64</a>)<a class=\"id\" href=\"#sysctl_sched_migration_cost\">sysctl_sched_migration_cost</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_task_cpu\">set_task_cpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#new_cpu\">new_cpu</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We should never call set_task_cpu() on a blocked task,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ttwu() will sort out the placement.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a> && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#TASK_WAKING\">TASK_WAKING</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!(<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#preempt_count\">preempt_count</a> &amp; <a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_migrate_task\">trace_sched_migrate_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#new_cpu\">new_cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>) != <a class=\"id\" href=\"#new_cpu\">new_cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#nr_migrations\">nr_migrations</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_sw_event\">perf_sw_event</a>(<a class=\"id\" href=\"#PERF_COUNT_SW_CPU_MIGRATIONS\">PERF_COUNT_SW_CPU_MIGRATIONS</a>, 1, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_task_cpu\">__set_task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#new_cpu\">new_cpu</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#migration_arg\">migration_arg</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#migration_cpu_stop\">migration_cpu_stop</a>(void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The task's runqueue lock must be held.</span>", 
"<span class=\"comment\"> * Returns true if you have to wait for migration thread.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#migrate_task\">migrate_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the task is not on a runqueue (and not running), then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the next wake-up will properly place the task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a> || <a class=\"id\" href=\"#task_running\">task_running</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * wait_task_inactive - wait for a thread to unschedule.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @match_state is nonzero, it's the @p-&gt;state value just checked and</span>", 
"<span class=\"comment\"> * not expected to change.  If it changes, i.e. @p might have woken up,</span>", 
"<span class=\"comment\"> * then return zero.  When we succeed in waiting for @p to be off its CPU,</span>", 
"<span class=\"comment\"> * we return a positive number (its total switch count).  If a second call</span>", 
"<span class=\"comment\"> * a short while later returns the same number, the caller can be sure that</span>", 
"<span class=\"comment\"> * @p has remained unscheduled the whole time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must ensure that the task *will* unschedule sometime soon,</span>", 
"<span class=\"comment\"> * else this function might spin for a *long* time. This function can't</span>", 
"<span class=\"comment\"> * be called with interrupts off, or it may introduce deadlock with</span>", 
"<span class=\"comment\"> * smp_call_function() if an IPI is sent by the same process we are</span>", 
"<span class=\"comment\"> * waiting to become inactive.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#wait_task_inactive\">wait_task_inactive</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, long <a class=\"id\" href=\"#match_state\">match_state</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#running\">running</a>, <a class=\"id\" href=\"#on_rq\">on_rq</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ncsw\">ncsw</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We do the initial early heuristics without holding</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * any task-queue locks at all. We'll only try to get</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the runqueue lock when things look like they will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * work out!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the task is actively running on another CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * still, just relax and busy-wait without holding</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * any locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NOTE! Since we don't hold any locks, it's not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * even sure that \"rq\" stays as the right runqueue!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But we don't care, since \"task_running()\" will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return false if the runqueue has changed and p</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is actually now running somewhere else!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#task_running\">task_running</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match_state\">match_state</a> && <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#match_state\">match_state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ok, time to look more closely! We need the rq</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lock now, to be *sure*. If we're wrong, we'll</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * just go back and repeat.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_wait_task\">trace_sched_wait_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#running\">running</a> = <a class=\"id\" href=\"#task_running\">task_running</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#on_rq\">on_rq</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ncsw\">ncsw</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#match_state\">match_state</a> || <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#match_state\">match_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ncsw\">ncsw</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nvcsw\">nvcsw</a> | <a class=\"id\" href=\"#LONG_MIN\">LONG_MIN</a>; <span class=\"comment\">/* sets MSB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If it changed from the expected state, bail out now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ncsw\">ncsw</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Was it really running after all now that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * checked with the proper locks actually held?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Oops. Go back and try again..</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#running\">running</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It's not enough that it's not actively running,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it must be off the runqueue _entirely_, and not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * preempted!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So if it was still runnable (but just not actively</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * running right now), it's preempted, and we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * yield - it could be a while.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#on_rq\">on_rq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout_uninterruptible\">schedule_timeout_uninterruptible</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ahh, all good. It wasn't running, and it wasn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * runnable, which means that it will never become</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * running in the future either. We're all done!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ncsw\">ncsw</a>;", 
"}", 
"", 
"<span class=\"comment\">/***</span>", 
"<span class=\"comment\"> * kick_process - kick a running thread to enter/exit the kernel</span>", 
"<span class=\"comment\"> * @p: the to-be-kicked thread</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Cause a process which is running on another CPU to enter</span>", 
"<span class=\"comment\"> * kernel-mode, without any delay. (to get signals handled.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: this function doesnt have to take the runqueue lock,</span>", 
"<span class=\"comment\"> * because all it wants to ensure is that the remote task enters</span>", 
"<span class=\"comment\"> * the kernel. If the IPI races and the task has been migrated</span>", 
"<span class=\"comment\"> * to another CPU then no harm is done and the purpose has been</span>", 
"<span class=\"comment\"> * achieved as well.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kick_process\">kick_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()) && <a class=\"id\" href=\"#task_curr\">task_curr</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_send_reschedule\">smp_send_reschedule</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kick_process\">kick_process</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * task_oncpu_function_call - call a function on the cpu on which a task runs</span>", 
"<span class=\"comment\"> * @p:<span class=\"ts\"/><span class=\"ts\"/>the task to evaluate</span>", 
"<span class=\"comment\"> * @func:<span class=\"ts\"/>the function to be called</span>", 
"<span class=\"comment\"> * @info:<span class=\"ts\"/>the function call argument</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Calls the function @func when the task is currently running. This might</span>", 
"<span class=\"comment\"> * be on the current CPU, which just calls the function directly</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#task_oncpu_function_call\">task_oncpu_function_call</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#func\">func</a>) (void *<a class=\"id\" href=\"#info\">info</a>), void *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_curr\">task_curr</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#info\">info</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * -&gt;cpus_allowed is protected by either TASK_WAKING or rq-&gt;lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#select_fallback_rq\">select_fallback_rq</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a> = <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Look for allowed, online CPU in same node. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu_and\">for_each_cpu_and</a>(<a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Any allowed, online CPU? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest_cpu\">dest_cpu</a> = <a class=\"id\" href=\"#cpumask_any_and\">cpumask_any_and</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dest_cpu\">dest_cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No more Mr. Nice Guy. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dest_cpu\">dest_cpu</a> >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest_cpu\">dest_cpu</a> = <a class=\"id\" href=\"#cpuset_cpus_allowed_fallback\">cpuset_cpus_allowed_fallback</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't tell them about moving exiting tasks or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kernel threads (both mm NULL), since they never</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * leave kernel.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a> && <a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"process %d (%s) no \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"longer affine to cpu%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The caller (fork, wakeup) owns TASK_WAKING, -&gt;cpus_allowed is stable.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"int <a class=\"id\" href=\"#select_task_rq\">select_task_rq</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#sd_flags\">sd_flags</a>, int <a class=\"id\" href=\"#wake_flags\">wake_flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#select_task_rq\">select_task_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#sd_flags\">sd_flags</a>, <a class=\"id\" href=\"#wake_flags\">wake_flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In order not to call set_task_cpu() on a blocking task we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to rely on ttwu() to place the task on a valid -&gt;cpus_allowed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since this is common to all placement strategies, this lives here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * [ this allows -&gt;select_task() to simply return task_cpu(p) and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   not worry about this generic constraint ]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     !<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#select_fallback_rq\">select_fallback_rq</a>(<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_avg\">update_avg</a>(<a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#avg\">avg</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sample\">sample</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#diff\">diff</a> = <a class=\"id\" href=\"#sample\">sample</a> - *<a class=\"id\" href=\"#avg\">avg</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#avg\">avg</a> += <a class=\"id\" href=\"#diff\">diff</a> >> 3;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ttwu_activate\">ttwu_activate</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_sync\">is_sync</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_migrate\">is_migrate</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_local\">is_local</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#en_flags\">en_flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#nr_wakeups\">nr_wakeups</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_sync\">is_sync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#nr_wakeups_sync\">nr_wakeups_sync</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_migrate\">is_migrate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#nr_wakeups_migrate\">nr_wakeups_migrate</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_local\">is_local</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#nr_wakeups_local\">nr_wakeups_local</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#nr_wakeups_remote\">nr_wakeups_remote</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#activate_task\">activate_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#en_flags\">en_flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ttwu_post_activation\">ttwu_post_activation</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#wake_flags\">wake_flags</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#success\">success</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_wakeup\">trace_sched_wakeup</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#success\">success</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#wake_flags\">wake_flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#task_woken\">task_woken</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#task_woken\">task_woken</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle_stamp\">idle_stamp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#clock\">clock</a> - <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle_stamp\">idle_stamp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#max\">max</a> = 2*<a class=\"id\" href=\"#sysctl_sched_migration_cost\">sysctl_sched_migration_cost</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#avg_idle\">avg_idle</a> = <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_avg\">update_avg</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#avg_idle\">avg_idle</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle_stamp\">idle_stamp</a> = 0;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* if a worker is waking up, notify workqueue */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_WQ_WORKER\">PF_WQ_WORKER</a>) && <a class=\"id\" href=\"#success\">success</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wq_worker_waking_up\">wq_worker_waking_up</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * try_to_wake_up - wake up a thread</span>", 
"<span class=\"comment\"> * @p: the thread to be awakened</span>", 
"<span class=\"comment\"> * @state: the mask of task states that can be woken</span>", 
"<span class=\"comment\"> * @wake_flags: wake modifier flags (WF_*)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Put it on the run-queue if it's not already there. The \"current\"</span>", 
"<span class=\"comment\"> * thread is always on the run-queue (except when the actual</span>", 
"<span class=\"comment\"> * re-schedule is in progress), and as such you're allowed to do</span>", 
"<span class=\"comment\"> * the simpler \"current-&gt;state = TASK_RUNNING\" to mark yourself</span>", 
"<span class=\"comment\"> * runnable without the overhead of this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns %true if @p was woken up, %false if it was already running</span>", 
"<span class=\"comment\"> * or @state didn't match @p's state.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#try_to_wake_up\">try_to_wake_up</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#wake_flags\">wake_flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#orig_cpu\">orig_cpu</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#success\">success</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#en_flags\">en_flags</a> = <a class=\"id\" href=\"#ENQUEUE_WAKEUP\">ENQUEUE_WAKEUP</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_running\">out_running</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#orig_cpu\">orig_cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#task_running\">task_running</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_activate\">out_activate</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In order to handle concurrent wakeups and release the rq-&gt;lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we put the task in TASK_WAKING state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First fix up the nr_uninterruptible count:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_contributes_to_load\">task_contributes_to_load</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#orig_cpu\">orig_cpu</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>()-><a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_WAKING\">TASK_WAKING</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#task_waking\">task_waking</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#task_waking\">task_waking</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#en_flags\">en_flags</a> |= <a class=\"id\" href=\"#ENQUEUE_WAKING\">ENQUEUE_WAKING</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#select_task_rq\">select_task_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#SD_BALANCE_WAKE\">SD_BALANCE_WAKE</a>, <a class=\"id\" href=\"#wake_flags\">wake_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#orig_cpu\">orig_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_task_cpu\">set_task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__task_rq_unlock\">__task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We migrated the task without holding either rq-&gt;lock, however</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since the task is not on the task list itself, nobody else</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will try and migrate the task, hence the rq should match the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpu we just moved it to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>) != <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#TASK_WAKING\">TASK_WAKING</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#ttwu_count\">ttwu_count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#ttwu_local\">ttwu_local</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#ttwu_wake_remote\">ttwu_wake_remote</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SCHEDSTATS */</span>", 
"", 
"<a class=\"id\" href=\"#out_activate\">out_activate</a>:", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ttwu_activate\">ttwu_activate</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#wake_flags\">wake_flags</a> &amp; <a class=\"id\" href=\"#WF_SYNC\">WF_SYNC</a>, <a class=\"id\" href=\"#orig_cpu\">orig_cpu</a> != <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#en_flags\">en_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#success\">success</a> = 1;", 
"<a class=\"id\" href=\"#out_running\">out_running</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ttwu_post_activation\">ttwu_post_activation</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#wake_flags\">wake_flags</a>, <a class=\"id\" href=\"#success\">success</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#success\">success</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * try_to_wake_up_local - try to wake up a local task with rq lock held</span>", 
"<span class=\"comment\"> * @p: the thread to be awakened</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Put @p on the run-queue if it's not alredy there.  The caller must</span>", 
"<span class=\"comment\"> * ensure that this_rq() is locked, @p is bound to this_rq() and not</span>", 
"<span class=\"comment\"> * the current task.  this_rq() stays locked over invocation.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#try_to_wake_up_local\">try_to_wake_up_local</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#success\">success</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#rq\">rq</a> != <a class=\"id\" href=\"#this_rq\">this_rq</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_assert_held\">lockdep_assert_held</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#task_running\">task_running</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#ttwu_count\">ttwu_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#ttwu_local\">ttwu_local</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ttwu_activate\">ttwu_activate</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#ENQUEUE_WAKEUP\">ENQUEUE_WAKEUP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#success\">success</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ttwu_post_activation\">ttwu_post_activation</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rq\">rq</a>, 0, <a class=\"id\" href=\"#success\">success</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wake_up_process - Wake up a specific process</span>", 
"<span class=\"comment\"> * @p: The process to be woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attempt to wake up the nominated process and move it to the set of runnable</span>", 
"<span class=\"comment\"> * processes.  Returns 1 if the process was woken up, 0 if it was already</span>", 
"<span class=\"comment\"> * running.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It may be assumed that this function implies a write memory barrier before</span>", 
"<span class=\"comment\"> * changing the task state if and only if any tasks are woken up.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#try_to_wake_up\">try_to_wake_up</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TASK_ALL\">TASK_ALL</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>);", 
"", 
"int <a class=\"id\" href=\"#wake_up_state\">wake_up_state</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#try_to_wake_up\">try_to_wake_up</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#state\">state</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Perform scheduler related setup for a newly forked process p.</span>", 
"<span class=\"comment\"> * p is forked by current.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __sched_fork() is basic setup used by init_idle() too:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__sched_fork\">__sched_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#exec_start\">exec_start</a><span class=\"ts\"/><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a><span class=\"ts\"/><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#prev_sum_exec_runtime\">prev_sum_exec_runtime</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#nr_migrations\">nr_migrations</a><span class=\"ts\"/><span class=\"ts\"/>= 0;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>, 0, sizeof(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#run_list\">run_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#group_node\">group_node</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT_NOTIFIERS\">CONFIG_PREEMPT_NOTIFIERS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#preempt_notifiers\">preempt_notifiers</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fork()/clone()-time setup:</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sched_fork\">sched_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#clone_flags\">clone_flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sched_fork\">__sched_fork</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We mark the process as running here. This guarantees that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nobody will actually run it, and a signal or other external</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * event cannot wake it up and insert it on the runqueue either.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Revert to default priority/policy on fork if requested.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_reset_on_fork\">sched_reset_on_fork</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#policy\">policy</a> == <a class=\"id\" href=\"#SCHED_FIFO\">SCHED_FIFO</a> || <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#policy\">policy</a> == <a class=\"id\" href=\"#SCHED_RR\">SCHED_RR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#policy\">policy</a> = <a class=\"id\" href=\"#SCHED_NORMAL\">SCHED_NORMAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#normal_prio\">normal_prio</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#static_prio\">static_prio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PRIO_TO_NICE\">PRIO_TO_NICE</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#static_prio\">static_prio</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#static_prio\">static_prio</a> = <a class=\"id\" href=\"#NICE_TO_PRIO\">NICE_TO_PRIO</a>(0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#normal_prio\">normal_prio</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#static_prio\">static_prio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_load_weight\">set_load_weight</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We don't need the reset flag anymore after the fork. It has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fulfilled its duty:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_reset_on_fork\">sched_reset_on_fork</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure we do not leak PI boosting priority to the child.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#normal_prio\">normal_prio</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_prio\">rt_prio</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a> = &amp;<a class=\"id\" href=\"#fair_sched_class\">fair_sched_class</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#task_fork\">task_fork</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#task_fork\">task_fork</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The child is not yet in the pid-hash so no cgroup attach races,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and the cgroup is pinned to this child due to cgroup_fork()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is ran before sched_fork().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Silence PROVE_RCU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_task_cpu\">set_task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TASK_DELAY_ACCT\">CONFIG_TASK_DELAY_ACCT</a>)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#sched_info_on\">sched_info_on</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>, 0, sizeof(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__ARCH_WANT_UNLOCKED_CTXSW\">__ARCH_WANT_UNLOCKED_CTXSW</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#oncpu\">oncpu</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Want to start with kernel preemption disabled. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#preempt_count\">preempt_count</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_node_init\">plist_node_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pushable_tasks\">pushable_tasks</a>, <a class=\"id\" href=\"#MAX_PRIO\">MAX_PRIO</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * wake_up_new_task - wake up a newly created task for the first time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will do some initial scheduler statistics housekeeping</span>", 
"<span class=\"comment\"> * that must be done for every newly created context, then puts the task</span>", 
"<span class=\"comment\"> * on the runqueue and wakes it.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wake_up_new_task\">wake_up_new_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> <a class=\"id\" href=\"#__maybe_unused\">__maybe_unused</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_WAKING\">TASK_WAKING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fork balancing, do it here and not earlier because:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - cpus_allowed can change in the fork path</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - any previously selected cpu might disappear through hotplug</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We set TASK_WAKING so that select_task_rq() can drop rq-&gt;lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * without people poking at -&gt;cpus_allowed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#select_task_rq\">select_task_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#SD_BALANCE_FORK\">SD_BALANCE_FORK</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_task_cpu\">set_task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#activate_task\">activate_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_wakeup_new\">trace_sched_wakeup_new</a>(<a class=\"id\" href=\"#p\">p</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#WF_FORK\">WF_FORK</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#task_woken\">task_woken</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#task_woken\">task_woken</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT_NOTIFIERS\">CONFIG_PREEMPT_NOTIFIERS</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * preempt_notifier_register - tell me when current is being preempted &amp; rescheduled</span>", 
"<span class=\"comment\"> * @notifier: notifier struct to register</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#preempt_notifier_register\">preempt_notifier_register</a>(struct <a class=\"id\" href=\"#preempt_notifier\">preempt_notifier</a> *<a class=\"id\" href=\"#notifier\">notifier</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#notifier\">notifier</a>-><a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#preempt_notifiers\">preempt_notifiers</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#preempt_notifier_register\">preempt_notifier_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * preempt_notifier_unregister - no longer interested in preemption notifications</span>", 
"<span class=\"comment\"> * @notifier: notifier struct to unregister</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is safe to call from within a preemption notifier.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#preempt_notifier_unregister\">preempt_notifier_unregister</a>(struct <a class=\"id\" href=\"#preempt_notifier\">preempt_notifier</a> *<a class=\"id\" href=\"#notifier\">notifier</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#notifier\">notifier</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#preempt_notifier_unregister\">preempt_notifier_unregister</a>);", 
"", 
"static void <a class=\"id\" href=\"#fire_sched_in_preempt_notifiers\">fire_sched_in_preempt_notifiers</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#preempt_notifier\">preempt_notifier</a> *<a class=\"id\" href=\"#notifier\">notifier</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#notifier\">notifier</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#preempt_notifiers\">preempt_notifiers</a>, <a class=\"id\" href=\"#link\">link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notifier\">notifier</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sched_in\">sched_in</a>(<a class=\"id\" href=\"#notifier\">notifier</a>, <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#fire_sched_out_preempt_notifiers\">fire_sched_out_preempt_notifiers</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#preempt_notifier\">preempt_notifier</a> *<a class=\"id\" href=\"#notifier\">notifier</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#notifier\">notifier</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#preempt_notifiers\">preempt_notifiers</a>, <a class=\"id\" href=\"#link\">link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notifier\">notifier</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sched_out\">sched_out</a>(<a class=\"id\" href=\"#notifier\">notifier</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_PREEMPT_NOTIFIERS */</span>", 
"", 
"static void <a class=\"id\" href=\"#fire_sched_in_preempt_notifiers\">fire_sched_in_preempt_notifiers</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a>)", 
"{", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#fire_sched_out_preempt_notifiers\">fire_sched_out_preempt_notifiers</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PREEMPT_NOTIFIERS */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * prepare_task_switch - prepare to switch tasks</span>", 
"<span class=\"comment\"> * @rq: the runqueue preparing to switch</span>", 
"<span class=\"comment\"> * @prev: the current task that is being switched out</span>", 
"<span class=\"comment\"> * @next: the task we are going to switch to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called with the rq lock held and interrupts off. It must</span>", 
"<span class=\"comment\"> * be paired with a subsequent finish_task_switch after the context</span>", 
"<span class=\"comment\"> * switch.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * prepare_task_switch sets up locking and calls architecture specific</span>", 
"<span class=\"comment\"> * hooks.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#prepare_task_switch\">prepare_task_switch</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fire_sched_out_preempt_notifiers\">fire_sched_out_preempt_notifiers</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepare_lock_switch\">prepare_lock_switch</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepare_arch_switch\">prepare_arch_switch</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * finish_task_switch - clean up after a task-switch</span>", 
"<span class=\"comment\"> * @rq: runqueue associated with task-switch</span>", 
"<span class=\"comment\"> * @prev: the thread we just switched away from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * finish_task_switch must be called after the context switch, paired</span>", 
"<span class=\"comment\"> * with a prepare_task_switch call before the context switch.</span>", 
"<span class=\"comment\"> * finish_task_switch will reconcile locking set up by prepare_task_switch,</span>", 
"<span class=\"comment\"> * and do any other architecture-specific cleanup actions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that we may have delayed dropping an mm in context_switch(). If</span>", 
"<span class=\"comment\"> * so, we finish that here outside of the runqueue lock. (Doing it</span>", 
"<span class=\"comment\"> * with the lock held can cause deadlocks; see schedule() for</span>", 
"<span class=\"comment\"> * details.)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#finish_task_switch\">finish_task_switch</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#prev_mm\">prev_mm</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#prev_state\">prev_state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#prev_mm\">prev_mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A task struct has one reference for the use as \"current\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If a task dies, then it sets TASK_DEAD in tsk-&gt;state and calls</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * schedule one last time. The schedule call will never return, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the scheduled task must drop that reference.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The test for TASK_DEAD must occur while the runqueue locks are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * still held, otherwise prev could be scheduled on another cpu, die</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there before we look at prev-&gt;state, and then the reference would</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be dropped twice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>Manfred Spraul &lt;manfred@colorfullife.com&gt;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_state\">prev_state</a> = <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_arch_switch\">finish_arch_switch</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_INTERRUPTS_ON_CTXSW\">__ARCH_WANT_INTERRUPTS_ON_CTXSW</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __ARCH_WANT_INTERRUPTS_ON_CTXSW */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_task_sched_in\">perf_event_task_sched_in</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_INTERRUPTS_ON_CTXSW\">__ARCH_WANT_INTERRUPTS_ON_CTXSW</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __ARCH_WANT_INTERRUPTS_ON_CTXSW */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_lock_switch\">finish_lock_switch</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fire_sched_in_preempt_notifiers\">fire_sched_in_preempt_notifiers</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmdrop\">mmdrop</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#prev_state\">prev_state</a> == <a class=\"id\" href=\"#TASK_DEAD\">TASK_DEAD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remove function-return probe instances associated with this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * task and put them back on the free list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobe_flush_task\">kprobe_flush_task</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"<span class=\"comment\">/* assumes rq-&gt;lock is held */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pre_schedule\">pre_schedule</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#pre_schedule\">pre_schedule</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#pre_schedule\">pre_schedule</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"}", 
"", 
"<span class=\"comment\">/* rq-&gt;lock is NOT held, but preemption is disabled */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#post_schedule\">post_schedule</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#post_schedule\">post_schedule</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#post_schedule\">post_schedule</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#post_schedule\">post_schedule</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#post_schedule\">post_schedule</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pre_schedule\">pre_schedule</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#post_schedule\">post_schedule</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * schedule_tail - first thing a freshly forked thread must call.</span>", 
"<span class=\"comment\"> * @prev: the thread we just switched away from.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#schedule_tail\">schedule_tail</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_task_switch\">finish_task_switch</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * FIXME: do we need to worry about rq being invalidated by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task_switch?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#post_schedule\">post_schedule</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_UNLOCKED_CTXSW\">__ARCH_WANT_UNLOCKED_CTXSW</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* In this case, finish_task_switch does not reenable preemption */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#set_child_tid\">set_child_tid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>), <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#set_child_tid\">set_child_tid</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * context_switch - switch to the new MM and the new</span>", 
"<span class=\"comment\"> * thread's register state.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#context_switch\">context_switch</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/>       struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, *<a class=\"id\" href=\"#oldmm\">oldmm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepare_task_switch\">prepare_task_switch</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_switch\">trace_sched_switch</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldmm\">oldmm</a> = <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For paravirt, this is coupled with an exit in switch_to to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * combine the page table reload and the switch backend into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one hypercall.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_start_context_switch\">arch_start_context_switch</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#mm\">mm</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> = <a class=\"id\" href=\"#oldmm\">oldmm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#oldmm\">oldmm</a>-><a class=\"id\" href=\"#mm_count\">mm_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enter_lazy_tlb\">enter_lazy_tlb</a>(<a class=\"id\" href=\"#oldmm\">oldmm</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#switch_mm\">switch_mm</a>(<a class=\"id\" href=\"#oldmm\">oldmm</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#mm\">mm</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#prev_mm\">prev_mm</a> = <a class=\"id\" href=\"#oldmm\">oldmm</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since the runqueue lock will be released by the next</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task (which is an invalid locking op but in the case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the scheduler it's an obvious special-case), so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do an early lockdep release here:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ARCH_WANT_UNLOCKED_CTXSW\">__ARCH_WANT_UNLOCKED_CTXSW</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_release\">spin_release</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#dep_map\">dep_map</a>, 1, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Here we just switch the register state and the stack. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#switch_to\">switch_to</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this_rq must be evaluated again because prev may have moved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPUs since it called schedule(), thus the 'rq' on its stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * frame will be invalid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_task_switch\">finish_task_switch</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>(), <a class=\"id\" href=\"#prev\">prev</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * nr_running, nr_uninterruptible and nr_context_switches:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * externally visible scheduler statistics: current number of runnable</span>", 
"<span class=\"comment\"> * threads, current number of uninterruptible-sleeping threads, total</span>", 
"<span class=\"comment\"> * number of context switches performed since bootup.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#nr_running\">nr_running</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sum\">sum</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> += <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#nr_running\">nr_running</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sum\">sum</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sum\">sum</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> += <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since we read the counters lockless, it might be slightly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inaccurate. Do not allow it to go below zero though:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((long)<a class=\"id\" href=\"#sum\">sum</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sum\">sum</a>;", 
"}", 
"", 
"unsigned long long <a class=\"id\" href=\"#nr_context_switches\">nr_context_switches</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#sum\">sum</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> += <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#nr_switches\">nr_switches</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sum\">sum</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#nr_iowait\">nr_iowait</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sum\">sum</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> += <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#nr_iowait\">nr_iowait</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sum\">sum</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#nr_iowait_cpu\">nr_iowait_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#nr_iowait\">nr_iowait</a>);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#this_cpu_load\">this_cpu_load</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#cpu_load\">cpu_load</a>[0];", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Variables and functions for calc_load */</span>", 
"static <a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#calc_load_tasks\">calc_load_tasks</a>;", 
"static unsigned long <a class=\"id\" href=\"#calc_load_update\">calc_load_update</a>;", 
"unsigned long <a class=\"id\" href=\"#avenrun\">avenrun</a>[3];", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#avenrun\">avenrun</a>);", 
"", 
"static long <a class=\"id\" href=\"#calc_load_fold_active\">calc_load_fold_active</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#nr_active\">nr_active</a>, <a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_active\">nr_active</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_active\">nr_active</a> += (long) <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_active\">nr_active</a> != <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#calc_load_active\">calc_load_active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#nr_active\">nr_active</a> - <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#calc_load_active\">calc_load_active</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#calc_load_active\">calc_load_active</a> = <a class=\"id\" href=\"#nr_active\">nr_active</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#delta\">delta</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For NO_HZ we delay the active fold to the next LOAD_FREQ update.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When making the ILB scale, we should try to pull this in as well.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#calc_load_tasks_idle\">calc_load_tasks_idle</a>;", 
"", 
"static void <a class=\"id\" href=\"#calc_load_account_idle\">calc_load_account_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#calc_load_fold_active\">calc_load_fold_active</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_add\">atomic_long_add</a>(<a class=\"id\" href=\"#delta\">delta</a>, &amp;<a class=\"id\" href=\"#calc_load_tasks_idle\">calc_load_tasks_idle</a>);", 
"}", 
"", 
"static long <a class=\"id\" href=\"#calc_load_fold_idle\">calc_load_fold_idle</a>(void)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Its got a race, we don't care...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;<a class=\"id\" href=\"#calc_load_tasks_idle\">calc_load_tasks_idle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#atomic_long_xchg\">atomic_long_xchg</a>(&amp;<a class=\"id\" href=\"#calc_load_tasks_idle\">calc_load_tasks_idle</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#delta\">delta</a>;", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#calc_load_account_idle\">calc_load_account_idle</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#calc_load_fold_idle\">calc_load_fold_idle</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_avenrun - get the load average array</span>", 
"<span class=\"comment\"> * @loads:<span class=\"ts\"/>pointer to dest load array</span>", 
"<span class=\"comment\"> * @offset:<span class=\"ts\"/>offset to add</span>", 
"<span class=\"comment\"> * @shift:<span class=\"ts\"/>shift count to shift the result left</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These values are estimates at best, so no need for locking.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#get_avenrun\">get_avenrun</a>(unsigned long *<a class=\"id\" href=\"#loads\">loads</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#shift\">shift</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loads\">loads</a>[0] = (<a class=\"id\" href=\"#avenrun\">avenrun</a>[0] + <a class=\"id\" href=\"#offset\">offset</a>) << <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loads\">loads</a>[1] = (<a class=\"id\" href=\"#avenrun\">avenrun</a>[1] + <a class=\"id\" href=\"#offset\">offset</a>) << <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loads\">loads</a>[2] = (<a class=\"id\" href=\"#avenrun\">avenrun</a>[2] + <a class=\"id\" href=\"#offset\">offset</a>) << <a class=\"id\" href=\"#shift\">shift</a>;", 
"}", 
"", 
"static unsigned long", 
"<a class=\"id\" href=\"#calc_load\">calc_load</a>(unsigned long <a class=\"id\" href=\"#load\">load</a>, unsigned long <a class=\"id\" href=\"#exp\">exp</a>, unsigned long <a class=\"id\" href=\"#active\">active</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> *= <a class=\"id\" href=\"#exp\">exp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> += <a class=\"id\" href=\"#active\">active</a> * (<a class=\"id\" href=\"#FIXED_1\">FIXED_1</a> - <a class=\"id\" href=\"#exp\">exp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#load\">load</a> >> <a class=\"id\" href=\"#FSHIFT\">FSHIFT</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * calc_load - update the avenrun load estimates 10 ticks after the</span>", 
"<span class=\"comment\"> * CPUs have updated calc_load_tasks.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#calc_global_load\">calc_global_load</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#upd\">upd</a> = <a class=\"id\" href=\"#calc_load_update\">calc_load_update</a> + 10;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#active\">active</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#upd\">upd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#active\">active</a> = <a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;<a class=\"id\" href=\"#calc_load_tasks\">calc_load_tasks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#active\">active</a> = <a class=\"id\" href=\"#active\">active</a> &gt; 0 ? <a class=\"id\" href=\"#active\">active</a> * <a class=\"id\" href=\"#FIXED_1\">FIXED_1</a> : 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avenrun\">avenrun</a>[0] = <a class=\"id\" href=\"#calc_load\">calc_load</a>(<a class=\"id\" href=\"#avenrun\">avenrun</a>[0], <a class=\"id\" href=\"#EXP_1\">EXP_1</a>, <a class=\"id\" href=\"#active\">active</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avenrun\">avenrun</a>[1] = <a class=\"id\" href=\"#calc_load\">calc_load</a>(<a class=\"id\" href=\"#avenrun\">avenrun</a>[1], <a class=\"id\" href=\"#EXP_5\">EXP_5</a>, <a class=\"id\" href=\"#active\">active</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avenrun\">avenrun</a>[2] = <a class=\"id\" href=\"#calc_load\">calc_load</a>(<a class=\"id\" href=\"#avenrun\">avenrun</a>[2], <a class=\"id\" href=\"#EXP_15\">EXP_15</a>, <a class=\"id\" href=\"#active\">active</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calc_load_update\">calc_load_update</a> += <a class=\"id\" href=\"#LOAD_FREQ\">LOAD_FREQ</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from update_cpu_load() to periodically update this CPU's</span>", 
"<span class=\"comment\"> * active count.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#calc_load_account_active\">calc_load_account_active</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#calc_load_update\">calc_load_update</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a>  = <a class=\"id\" href=\"#calc_load_fold_active\">calc_load_fold_active</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> += <a class=\"id\" href=\"#calc_load_fold_idle\">calc_load_fold_idle</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_add\">atomic_long_add</a>(<a class=\"id\" href=\"#delta\">delta</a>, &amp;<a class=\"id\" href=\"#calc_load_tasks\">calc_load_tasks</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#calc_load_update\">calc_load_update</a> += <a class=\"id\" href=\"#LOAD_FREQ\">LOAD_FREQ</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The exact cpuload at various idx values, calculated at every tick would be</span>", 
"<span class=\"comment\"> * load = (2^idx - 1) / 2^idx * load + 1 / 2^idx * cur_load</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If a cpu misses updates for n-1 ticks (as it was idle) and update gets called</span>", 
"<span class=\"comment\"> * on nth tick when cpu may be busy, then we have:</span>", 
"<span class=\"comment\"> * load = ((2^idx - 1) / 2^idx)^(n-1) * load</span>", 
"<span class=\"comment\"> * load = (2^idx - 1) / 2^idx) * load + 1 / 2^idx * cur_load</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * decay_load_missed() below does efficient calculation of</span>", 
"<span class=\"comment\"> * load = ((2^idx - 1) / 2^idx)^(n-1) * load</span>", 
"<span class=\"comment\"> * avoiding 0..n-1 loop doing load = ((2^idx - 1) / 2^idx) * load</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The calculation is approximated on a 128 point scale.</span>", 
"<span class=\"comment\"> * degrade_zero_ticks is the number of ticks after which load at any</span>", 
"<span class=\"comment\"> * particular idx is approximated to be zero.</span>", 
"<span class=\"comment\"> * degrade_factor is a precomputed table, a row for each load idx.</span>", 
"<span class=\"comment\"> * Each column corresponds to degradation factor for a power of two ticks,</span>", 
"<span class=\"comment\"> * based on 128 point scale.</span>", 
"<span class=\"comment\"> * Example:</span>", 
"<span class=\"comment\"> * row 2, col 3 (=12) says that the degradation at load idx 2 after</span>", 
"<span class=\"comment\"> * 8 ticks is 12/128 (which is an approximation of exact factor 3^8/4^8).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * With this power of 2 load factors, we can degrade the load n times</span>", 
"<span class=\"comment\"> * by looking at 1 bits in n and doing as many mult/shift instead of</span>", 
"<span class=\"comment\"> * n mult/shifts needed by the exact degradation.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEGRADE_SHIFT\">DEGRADE_SHIFT</a><span class=\"ts\"/><span class=\"ts\"/>7", 
"static const unsigned char", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#degrade_zero_ticks\">degrade_zero_ticks</a>[<a class=\"id\" href=\"#CPU_LOAD_IDX_MAX\">CPU_LOAD_IDX_MAX</a>] = {0, 8, 32, 64, 128};", 
"static const unsigned char", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#degrade_factor\">degrade_factor</a>[<a class=\"id\" href=\"#CPU_LOAD_IDX_MAX\">CPU_LOAD_IDX_MAX</a>][<a class=\"id\" href=\"#DEGRADE_SHIFT\">DEGRADE_SHIFT</a> + 1] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{0, 0, 0, 0, 0, 0, 0, 0},", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{64, 32, 8, 0, 0, 0, 0, 0},", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{96, 72, 40, 12, 1, 0, 0},", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{112, 98, 75, 43, 15, 1, 0},", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{120, 112, 98, 76, 45, 16, 2} };", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update cpu_load for any missed ticks, due to tickless idle. The backlog</span>", 
"<span class=\"comment\"> * would be when CPU is idle and so we just decay the old load without</span>", 
"<span class=\"comment\"> * adding any new load.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long", 
"<a class=\"id\" href=\"#decay_load_missed\">decay_load_missed</a>(unsigned long <a class=\"id\" href=\"#load\">load</a>, unsigned long <a class=\"id\" href=\"#missed_updates\">missed_updates</a>, int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#missed_updates\">missed_updates</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#load\">load</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#missed_updates\">missed_updates</a> >= <a class=\"id\" href=\"#degrade_zero_ticks\">degrade_zero_ticks</a>[<a class=\"id\" href=\"#idx\">idx</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#load\">load</a> >> <a class=\"id\" href=\"#missed_updates\">missed_updates</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#missed_updates\">missed_updates</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#missed_updates\">missed_updates</a> % 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> = (<a class=\"id\" href=\"#load\">load</a> * <a class=\"id\" href=\"#degrade_factor\">degrade_factor</a>[<a class=\"id\" href=\"#idx\">idx</a>][<a class=\"id\" href=\"#j\">j</a>]) >> <a class=\"id\" href=\"#DEGRADE_SHIFT\">DEGRADE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#missed_updates\">missed_updates</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#load\">load</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update rq-&gt;cpu_load[] statistics. This function is usually called every</span>", 
"<span class=\"comment\"> * scheduler tick (TICK_NSEC). With tickless idle this will not be called</span>", 
"<span class=\"comment\"> * every tick. We fix it up based on jiffies.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#update_cpu_load\">update_cpu_load</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#this_load\">this_load</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#curr_jiffies\">curr_jiffies</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pending_updates\">pending_updates</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#scale\">scale</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#nr_load_updates\">nr_load_updates</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Avoid repeated calls on same jiffy, when moving in and out of idle */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#curr_jiffies\">curr_jiffies</a> == <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#last_load_update_tick\">last_load_update_tick</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pending_updates\">pending_updates</a> = <a class=\"id\" href=\"#curr_jiffies\">curr_jiffies</a> - <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#last_load_update_tick\">last_load_update_tick</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#last_load_update_tick\">last_load_update_tick</a> = <a class=\"id\" href=\"#curr_jiffies\">curr_jiffies</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update our load: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#cpu_load\">cpu_load</a>[0] = <a class=\"id\" href=\"#this_load\">this_load</a>; <span class=\"comment\">/* Fasttrack for idx 0 */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1, <a class=\"id\" href=\"#scale\">scale</a> = 2; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CPU_LOAD_IDX_MAX\">CPU_LOAD_IDX_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#scale\">scale</a> += <a class=\"id\" href=\"#scale\">scale</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_load\">old_load</a>, <a class=\"id\" href=\"#new_load\">new_load</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* scale is effectively 1 &lt;&lt; i now, and &gt;&gt; i divides by scale */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_load\">old_load</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#cpu_load\">cpu_load</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_load\">old_load</a> = <a class=\"id\" href=\"#decay_load_missed\">decay_load_missed</a>(<a class=\"id\" href=\"#old_load\">old_load</a>, <a class=\"id\" href=\"#pending_updates\">pending_updates</a> - 1, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_load\">new_load</a> = <a class=\"id\" href=\"#this_load\">this_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Round up the averaging division if load is increasing. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * prevents us from getting stuck on 9 if the load is 10, for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * example.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_load\">new_load</a> &gt; <a class=\"id\" href=\"#old_load\">old_load</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_load\">new_load</a> += <a class=\"id\" href=\"#scale\">scale</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#cpu_load\">cpu_load</a>[<a class=\"id\" href=\"#i\">i</a>] = (<a class=\"id\" href=\"#old_load\">old_load</a> * (<a class=\"id\" href=\"#scale\">scale</a> - 1) + <a class=\"id\" href=\"#new_load\">new_load</a>) >> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_avg_update\">sched_avg_update</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_cpu_load_active\">update_cpu_load_active</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_cpu_load\">update_cpu_load</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calc_load_account_active\">calc_load_account_active</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sched_exec - execve() is a valuable balancing opportunity, because at</span>", 
"<span class=\"comment\"> * this point the task has the smallest effective memory and cache footprint.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sched_exec\">sched_exec</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest_cpu\">dest_cpu</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#select_task_rq\">select_task_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#SD_BALANCE_EXEC\">SD_BALANCE_EXEC</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dest_cpu\">dest_cpu</a> == <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * select_task_rq() can race against -&gt;cpus_allowed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cpu_active\">cpu_active</a>(<a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>)) && <a class=\"id\" href=\"#migrate_task\">migrate_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#migration_arg\">migration_arg</a> <a class=\"id\" href=\"#arg\">arg</a> = { <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dest_cpu\">dest_cpu</a> };", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_one_cpu\">stop_one_cpu</a>(<a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#rq\">rq</a>), <a class=\"id\" href=\"#migration_cpu_stop\">migration_cpu_stop</a>, &amp;<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>, <a class=\"id\" href=\"#kstat\">kstat</a>);", 
"", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#kstat\">kstat</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return any ns on the sched_clock that have not yet been accounted in</span>", 
"<span class=\"comment\"> * @p in case that task is currently running.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with task_rq_lock() held on @rq.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#do_task_delta_exec\">do_task_delta_exec</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ns\">ns</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_current\">task_current</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_rq_clock\">update_rq_clock</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#clock\">clock</a> - <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#exec_start\">exec_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#s64\">s64</a>)<a class=\"id\" href=\"#ns\">ns</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"unsigned long long <a class=\"id\" href=\"#task_delta_exec\">task_delta_exec</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ns\">ns</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#do_task_delta_exec\">do_task_delta_exec</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return accounted runtime for the task.</span>", 
"<span class=\"comment\"> * In case the task is currently running, return the runtime plus current's</span>", 
"<span class=\"comment\"> * pending runtime that have not been accounted yet.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long long <a class=\"id\" href=\"#task_sched_runtime\">task_sched_runtime</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ns\">ns</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> + <a class=\"id\" href=\"#do_task_delta_exec\">do_task_delta_exec</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return sum_exec_runtime for the thread group.</span>", 
"<span class=\"comment\"> * In case the task is currently running, return the sum plus current's</span>", 
"<span class=\"comment\"> * pending runtime that have not been accounted yet.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that the thread group might have other running tasks as well,</span>", 
"<span class=\"comment\"> * so the return value not includes other pending runtime that other</span>", 
"<span class=\"comment\"> * running tasks might have.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long long <a class=\"id\" href=\"#thread_group_sched_runtime\">thread_group_sched_runtime</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#totals\">totals</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ns\">ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread_group_cputime\">thread_group_cputime</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#totals\">totals</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#totals\">totals</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> + <a class=\"id\" href=\"#do_task_delta_exec\">do_task_delta_exec</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Account user cpu time to a process.</span>", 
"<span class=\"comment\"> * @p: the process that the cpu time gets accounted to</span>", 
"<span class=\"comment\"> * @cputime: the cpu time spent in user space since the last update</span>", 
"<span class=\"comment\"> * @cputime_scaled: cputime scaled by cpu frequency</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#account_user_time\">account_user_time</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cputime\">cputime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cputime_scaled\">cputime_scaled</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_usage_stat\">cpu_usage_stat</a> *<a class=\"id\" href=\"#cpustat\">cpustat</a> = &amp;<a class=\"id\" href=\"#kstat_this_cpu\">kstat_this_cpu</a>.<a class=\"id\" href=\"#cpustat\">cpustat</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime64_t\">cputime64_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add user time to process. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utimescaled\">utimescaled</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utimescaled\">utimescaled</a>, <a class=\"id\" href=\"#cputime_scaled\">cputime_scaled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_group_user_time\">account_group_user_time</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime\">cputime</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add user time to cpustat. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#cputime_to_cputime64\">cputime_to_cputime64</a>(<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TASK_NICE\">TASK_NICE</a>(<a class=\"id\" href=\"#p\">p</a>) &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#nice\">nice</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#nice\">nice</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuacct_update_stats\">cpuacct_update_stats</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#CPUACCT_STAT_USER\">CPUACCT_STAT_USER</a>, <a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Account for user time used */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acct_update_integrals\">acct_update_integrals</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Account guest cpu time to a process.</span>", 
"<span class=\"comment\"> * @p: the process that the cpu time gets accounted to</span>", 
"<span class=\"comment\"> * @cputime: the cpu time spent in virtual machine since the last update</span>", 
"<span class=\"comment\"> * @cputime_scaled: cputime scaled by cpu frequency</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#account_guest_time\">account_guest_time</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cputime\">cputime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cputime_scaled\">cputime_scaled</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime64_t\">cputime64_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_usage_stat\">cpu_usage_stat</a> *<a class=\"id\" href=\"#cpustat\">cpustat</a> = &amp;<a class=\"id\" href=\"#kstat_this_cpu\">kstat_this_cpu</a>.<a class=\"id\" href=\"#cpustat\">cpustat</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#cputime_to_cputime64\">cputime_to_cputime64</a>(<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add guest time to process. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utimescaled\">utimescaled</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utimescaled\">utimescaled</a>, <a class=\"id\" href=\"#cputime_scaled\">cputime_scaled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_group_user_time\">account_group_user_time</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#gtime\">gtime</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#gtime\">gtime</a>, <a class=\"id\" href=\"#cputime\">cputime</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add guest time to cpustat. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TASK_NICE\">TASK_NICE</a>(<a class=\"id\" href=\"#p\">p</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#nice\">nice</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#nice\">nice</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#guest_nice\">guest_nice</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#guest_nice\">guest_nice</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#guest\">guest</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#guest\">guest</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Account system cpu time to a process.</span>", 
"<span class=\"comment\"> * @p: the process that the cpu time gets accounted to</span>", 
"<span class=\"comment\"> * @hardirq_offset: the offset to subtract from hardirq_count()</span>", 
"<span class=\"comment\"> * @cputime: the cpu time spent in kernel space since the last update</span>", 
"<span class=\"comment\"> * @cputime_scaled: cputime scaled by cpu frequency</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#account_system_time\">account_system_time</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#hardirq_offset\">hardirq_offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cputime\">cputime</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cputime_scaled\">cputime_scaled</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_usage_stat\">cpu_usage_stat</a> *<a class=\"id\" href=\"#cpustat\">cpustat</a> = &amp;<a class=\"id\" href=\"#kstat_this_cpu\">kstat_this_cpu</a>.<a class=\"id\" href=\"#cpustat\">cpustat</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime64_t\">cputime64_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_VCPU\">PF_VCPU</a>) && (<a class=\"id\" href=\"#irq_count\">irq_count</a>() - <a class=\"id\" href=\"#hardirq_offset\">hardirq_offset</a> == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#account_guest_time\">account_guest_time</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime\">cputime</a>, <a class=\"id\" href=\"#cputime_scaled\">cputime_scaled</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add system time to process. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#stime\">stime</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#stimescaled\">stimescaled</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#stimescaled\">stimescaled</a>, <a class=\"id\" href=\"#cputime_scaled\">cputime_scaled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_group_system_time\">account_group_system_time</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime\">cputime</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add system time to cpustat. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#cputime_to_cputime64\">cputime_to_cputime64</a>(<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hardirq_count\">hardirq_count</a>() - <a class=\"id\" href=\"#hardirq_offset\">hardirq_offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#softirq_count\">softirq_count</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#softirq\">softirq</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#softirq\">softirq</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#system\">system</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#system\">system</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuacct_update_stats\">cpuacct_update_stats</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#CPUACCT_STAT_SYSTEM\">CPUACCT_STAT_SYSTEM</a>, <a class=\"id\" href=\"#cputime\">cputime</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Account for system time used */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acct_update_integrals\">acct_update_integrals</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Account for involuntary wait time.</span>", 
"<span class=\"comment\"> * @steal: the cpu time spent in involuntary wait</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#account_steal_time\">account_steal_time</a>(<a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cputime\">cputime</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_usage_stat\">cpu_usage_stat</a> *<a class=\"id\" href=\"#cpustat\">cpustat</a> = &amp;<a class=\"id\" href=\"#kstat_this_cpu\">kstat_this_cpu</a>.<a class=\"id\" href=\"#cpustat\">cpustat</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime64_t\">cputime64_t</a> <a class=\"id\" href=\"#cputime64\">cputime64</a> = <a class=\"id\" href=\"#cputime_to_cputime64\">cputime_to_cputime64</a>(<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#steal\">steal</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#steal\">steal</a>, <a class=\"id\" href=\"#cputime64\">cputime64</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Account for idle time.</span>", 
"<span class=\"comment\"> * @cputime: the cpu time spent in idle wait</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#account_idle_time\">account_idle_time</a>(<a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cputime\">cputime</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_usage_stat\">cpu_usage_stat</a> *<a class=\"id\" href=\"#cpustat\">cpustat</a> = &amp;<a class=\"id\" href=\"#kstat_this_cpu\">kstat_this_cpu</a>.<a class=\"id\" href=\"#cpustat\">cpustat</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime64_t\">cputime64_t</a> <a class=\"id\" href=\"#cputime64\">cputime64</a> = <a class=\"id\" href=\"#cputime_to_cputime64\">cputime_to_cputime64</a>(<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_iowait\">nr_iowait</a>) &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#iowait\">iowait</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#iowait\">iowait</a>, <a class=\"id\" href=\"#cputime64\">cputime64</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#idle\">idle</a> = <a class=\"id\" href=\"#cputime64_add\">cputime64_add</a>(<a class=\"id\" href=\"#cpustat\">cpustat</a>-><a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#cputime64\">cputime64</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_VIRT_CPU_ACCOUNTING\">CONFIG_VIRT_CPU_ACCOUNTING</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Account a single tick of cpu time.</span>", 
"<span class=\"comment\"> * @p: the process that the cpu time gets accounted to</span>", 
"<span class=\"comment\"> * @user_tick: indicates if the tick is a user or a system tick</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#account_process_tick\">account_process_tick</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#user_tick\">user_tick</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#one_jiffy_scaled\">one_jiffy_scaled</a> = <a class=\"id\" href=\"#cputime_to_scaled\">cputime_to_scaled</a>(<a class=\"id\" href=\"#cputime_one_jiffy\">cputime_one_jiffy</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#user_tick\">user_tick</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#account_user_time\">account_user_time</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime_one_jiffy\">cputime_one_jiffy</a>, <a class=\"id\" href=\"#one_jiffy_scaled\">one_jiffy_scaled</a>);", 
"<span class=\"ts\"/>else if ((<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>) || (<a class=\"id\" href=\"#irq_count\">irq_count</a>() != <a class=\"id\" href=\"#HARDIRQ_OFFSET\">HARDIRQ_OFFSET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#account_system_time\">account_system_time</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#HARDIRQ_OFFSET\">HARDIRQ_OFFSET</a>, <a class=\"id\" href=\"#cputime_one_jiffy\">cputime_one_jiffy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#one_jiffy_scaled\">one_jiffy_scaled</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#account_idle_time\">account_idle_time</a>(<a class=\"id\" href=\"#cputime_one_jiffy\">cputime_one_jiffy</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Account multiple ticks of steal time.</span>", 
"<span class=\"comment\"> * @p: the process from which the cpu time has been stolen</span>", 
"<span class=\"comment\"> * @ticks: number of stolen ticks</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#account_steal_ticks\">account_steal_ticks</a>(unsigned long <a class=\"id\" href=\"#ticks\">ticks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_steal_time\">account_steal_time</a>(<a class=\"id\" href=\"#jiffies_to_cputime\">jiffies_to_cputime</a>(<a class=\"id\" href=\"#ticks\">ticks</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Account multiple ticks of idle time.</span>", 
"<span class=\"comment\"> * @ticks: number of stolen ticks</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#account_idle_ticks\">account_idle_ticks</a>(unsigned long <a class=\"id\" href=\"#ticks\">ticks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_idle_time\">account_idle_time</a>(<a class=\"id\" href=\"#jiffies_to_cputime\">jiffies_to_cputime</a>(<a class=\"id\" href=\"#ticks\">ticks</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use precise platform statistics if available:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_VIRT_CPU_ACCOUNTING\">CONFIG_VIRT_CPU_ACCOUNTING</a>", 
"void <a class=\"id\" href=\"#task_times\">task_times</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#ut\">ut</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#st\">st</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ut\">ut</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utime\">utime</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#st\">st</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#stime\">stime</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#thread_group_times\">thread_group_times</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#ut\">ut</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#st\">st</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#cputime\">cputime</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread_group_cputime\">thread_group_cputime</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ut\">ut</a> = <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#utime\">utime</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#st\">st</a> = <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#stime\">stime</a>;", 
"}", 
"#else", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#nsecs_to_cputime\">nsecs_to_cputime</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nsecs_to_cputime\">nsecs_to_cputime</a>(<a class=\"id\" href=\"#__nsecs\">__nsecs</a>)<span class=\"ts\"/><a class=\"id\" href=\"#nsecs_to_jiffies\">nsecs_to_jiffies</a>(<a class=\"id\" href=\"#__nsecs\">__nsecs</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#task_times\">task_times</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#ut\">ut</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#st\">st</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#rtime\">rtime</a>, <a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#total\">total</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#stime\">stime</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use CFS's precise accounting:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtime\">rtime</a> = <a class=\"id\" href=\"#nsecs_to_cputime\">nsecs_to_cputime</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#total\">total</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#temp\">temp</a> = <a class=\"id\" href=\"#rtime\">rtime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a> *= <a class=\"id\" href=\"#utime\">utime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#temp\">temp</a>, <a class=\"id\" href=\"#total\">total</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#utime\">utime</a> = (<a class=\"id\" href=\"#cputime_t\">cputime_t</a>)<a class=\"id\" href=\"#temp\">temp</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#rtime\">rtime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Compare with previous values, to keep monotonicity:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prev_utime\">prev_utime</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prev_utime\">prev_utime</a>, <a class=\"id\" href=\"#utime\">utime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prev_stime\">prev_stime</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prev_stime\">prev_stime</a>, <a class=\"id\" href=\"#cputime_sub\">cputime_sub</a>(<a class=\"id\" href=\"#rtime\">rtime</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prev_utime\">prev_utime</a>));", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ut\">ut</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prev_utime\">prev_utime</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#st\">st</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prev_stime\">prev_stime</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Must be called with siglock held.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#thread_group_times\">thread_group_times</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#ut\">ut</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#st\">st</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#cputime\">cputime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#rtime\">rtime</a>, <a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#total\">total</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread_group_cputime\">thread_group_cputime</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#stime\">stime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtime\">rtime</a> = <a class=\"id\" href=\"#nsecs_to_cputime\">nsecs_to_cputime</a>(<a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#total\">total</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#temp\">temp</a> = <a class=\"id\" href=\"#rtime\">rtime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a> *= <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#utime\">utime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#temp\">temp</a>, <a class=\"id\" href=\"#total\">total</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#utime\">utime</a> = (<a class=\"id\" href=\"#cputime_t\">cputime_t</a>)<a class=\"id\" href=\"#temp\">temp</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#rtime\">rtime</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#prev_utime\">prev_utime</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#prev_utime\">prev_utime</a>, <a class=\"id\" href=\"#utime\">utime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#prev_stime\">prev_stime</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#prev_stime\">prev_stime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#cputime_sub\">cputime_sub</a>(<a class=\"id\" href=\"#rtime\">rtime</a>, <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#prev_utime\">prev_utime</a>));", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ut\">ut</a> = <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#prev_utime\">prev_utime</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#st\">st</a> = <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#prev_stime\">prev_stime</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function gets called by the timer code, with HZ frequency.</span>", 
"<span class=\"comment\"> * We call it with interrupts disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It also gets called by the fork code, when changing the parent's</span>", 
"<span class=\"comment\"> * timeslices.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scheduler_tick\">scheduler_tick</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_tick\">sched_clock_tick</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_rq_clock\">update_rq_clock</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_cpu_load_active\">update_cpu_load_active</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#task_tick\">task_tick</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#curr\">curr</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_task_tick\">perf_event_task_tick</a>(<a class=\"id\" href=\"#curr\">curr</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle_at_tick\">idle_at_tick</a> = <a class=\"id\" href=\"#idle_cpu\">idle_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trigger_load_balance\">trigger_load_balance</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<a class=\"id\" href=\"#notrace\">notrace</a> unsigned long <a class=\"id\" href=\"#get_parent_ip\">get_parent_ip</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_lock_functions\">in_lock_functions</a>(<a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#CALLER_ADDR2\">CALLER_ADDR2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_lock_functions\">in_lock_functions</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#CALLER_ADDR3\">CALLER_ADDR3</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>) && (<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_PREEMPT\">CONFIG_DEBUG_PREEMPT</a>) || \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PREEMPT_TRACER\">CONFIG_PREEMPT_TRACER</a>))", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#add_preempt_count\">add_preempt_count</a>(int <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PREEMPT\">CONFIG_DEBUG_PREEMPT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Underflow?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#DEBUG_LOCKS_WARN_ON\">DEBUG_LOCKS_WARN_ON</a>((<a class=\"id\" href=\"#preempt_count\">preempt_count</a>() &lt; 0)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_count\">preempt_count</a>() += <a class=\"id\" href=\"#val\">val</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PREEMPT\">CONFIG_DEBUG_PREEMPT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Spinlock count overflowing soon?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_LOCKS_WARN_ON\">DEBUG_LOCKS_WARN_ON</a>((<a class=\"id\" href=\"#preempt_count\">preempt_count</a>() &amp; <a class=\"id\" href=\"#PREEMPT_MASK\">PREEMPT_MASK</a>) >=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PREEMPT_MASK\">PREEMPT_MASK</a> - 10);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preempt_count\">preempt_count</a>() == <a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_preempt_off\">trace_preempt_off</a>(<a class=\"id\" href=\"#CALLER_ADDR0\">CALLER_ADDR0</a>, <a class=\"id\" href=\"#get_parent_ip\">get_parent_ip</a>(<a class=\"id\" href=\"#CALLER_ADDR1\">CALLER_ADDR1</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#add_preempt_count\">add_preempt_count</a>);", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#sub_preempt_count\">sub_preempt_count</a>(int <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PREEMPT\">CONFIG_DEBUG_PREEMPT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Underflow?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#DEBUG_LOCKS_WARN_ON\">DEBUG_LOCKS_WARN_ON</a>(<a class=\"id\" href=\"#val\">val</a> &gt; <a class=\"id\" href=\"#preempt_count\">preempt_count</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Is the spinlock portion underflowing?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#DEBUG_LOCKS_WARN_ON\">DEBUG_LOCKS_WARN_ON</a>((<a class=\"id\" href=\"#val\">val</a> &lt; <a class=\"id\" href=\"#PREEMPT_MASK\">PREEMPT_MASK</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!(<a class=\"id\" href=\"#preempt_count\">preempt_count</a>() &amp; <a class=\"id\" href=\"#PREEMPT_MASK\">PREEMPT_MASK</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preempt_count\">preempt_count</a>() == <a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_preempt_on\">trace_preempt_on</a>(<a class=\"id\" href=\"#CALLER_ADDR0\">CALLER_ADDR0</a>, <a class=\"id\" href=\"#get_parent_ip\">get_parent_ip</a>(<a class=\"id\" href=\"#CALLER_ADDR1\">CALLER_ADDR1</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_count\">preempt_count</a>() -= <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sub_preempt_count\">sub_preempt_count</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Print scheduling while atomic bug:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void <a class=\"id\" href=\"#__schedule_bug\">__schedule_bug</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#get_irq_regs\">get_irq_regs</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"BUG: scheduling while atomic: %s/%d/0x%08x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#preempt_count\">preempt_count</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_show_held_locks\">debug_show_held_locks</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_modules\">print_modules</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_irqtrace_events\">print_irqtrace_events</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_regs\">show_regs</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Various schedule()-time debugging checks and statistics:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#schedule_debug\">schedule_debug</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Test if we are atomic. Since do_exit() needs to call into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * schedule() atomically, we ignore that path for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, whine if we are scheduling when we should not be.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#in_atomic_preempt_off\">in_atomic_preempt_off</a>() && !<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__schedule_bug\">__schedule_bug</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#profile_hit\">profile_hit</a>(<a class=\"id\" href=\"#SCHED_PROFILING\">SCHED_PROFILING</a>, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>(), <a class=\"id\" href=\"#sched_count\">sched_count</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#lock_depth\">lock_depth</a> >= 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>(), <a class=\"id\" href=\"#bkl_count\">bkl_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#bkl_count\">bkl_count</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#put_prev_task\">put_prev_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_rq_clock\">update_rq_clock</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#skip_clock_update\">skip_clock_update</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#put_prev_task\">put_prev_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pick up the highest-prio task:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *", 
"<a class=\"id\" href=\"#pick_next_task\">pick_next_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> *<a class=\"id\" href=\"#class\">class</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Optimization: we know that if all tasks are in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the fair class we can call that function directly:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> == <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cfs\">cfs</a>.<a class=\"id\" href=\"#nr_running\">nr_running</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#fair_sched_class\">fair_sched_class</a>.<a class=\"id\" href=\"#pick_next_task\">pick_next_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#sched_class_highest\">sched_class_highest</a>;", 
"<span class=\"ts\"/>for ( ; ; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#pick_next_task\">pick_next_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Will never be NULL as the idle class always</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * returns a non-NULL p:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * schedule() is the main scheduler function.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#schedule\">schedule</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#switch_count\">switch_count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<a class=\"id\" href=\"#need_resched\">need_resched</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_note_context_switch\">rcu_note_context_switch</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_kernel_lock\">release_kernel_lock</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"<a class=\"id\" href=\"#need_resched_nonpreemptible\">need_resched_nonpreemptible</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_debug\">schedule_debug</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#HRTICK\">HRTICK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtick_clear\">hrtick_clear</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_need_resched\">clear_tsk_need_resched</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#switch_count\">switch_count</a> = &amp;<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#nivcsw\">nivcsw</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#state\">state</a> && !(<a class=\"id\" href=\"#preempt_count\">preempt_count</a>() &amp; <a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#signal_pending_state\">signal_pending_state</a>(<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#prev\">prev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If a worker is going to sleep, notify and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ask workqueue whether it wants to wake up a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * task to maintain concurrency.  If so, wake</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * up the task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_WQ_WORKER\">PF_WQ_WORKER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#to_wakeup\">to_wakeup</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_wakeup\">to_wakeup</a> = <a class=\"id\" href=\"#wq_worker_sleeping\">wq_worker_sleeping</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#to_wakeup\">to_wakeup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_wake_up_local\">try_to_wake_up_local</a>(<a class=\"id\" href=\"#to_wakeup\">to_wakeup</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_task\">deactivate_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#DEQUEUE_SLEEP\">DEQUEUE_SLEEP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#switch_count\">switch_count</a> = &amp;<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#nvcsw\">nvcsw</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pre_schedule\">pre_schedule</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idle_balance\">idle_balance</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_prev_task\">put_prev_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pick_next_task\">pick_next_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#next\">next</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_info_switch\">sched_info_switch</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_task_sched_out\">perf_event_task_sched_out</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_switches\">nr_switches</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>++*<a class=\"id\" href=\"#switch_count\">switch_count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#context_switch\">context_switch</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>); <span class=\"comment\">/* unlocks the rq */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The context switch have flipped the stack from under us</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and restored the local variables which were saved when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this task called schedule() in the past. prev == current</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is still correct, but it can be moved to another cpu/rq.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#post_schedule\">post_schedule</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#reacquire_kernel_lock\">reacquire_kernel_lock</a>(<a class=\"id\" href=\"#prev\">prev</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#need_resched_nonpreemptible\">need_resched_nonpreemptible</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#need_resched\">need_resched</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#schedule\">schedule</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MUTEX_SPIN_ON_OWNER\">CONFIG_MUTEX_SPIN_ON_OWNER</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Look out! \"owner\" is an entirely speculative pointer</span>", 
"<span class=\"comment\"> * access and not reliable.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mutex_spin_on_owner\">mutex_spin_on_owner</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#owner\">owner</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#OWNER_SPIN\">OWNER_SPIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PAGEALLOC\">CONFIG_DEBUG_PAGEALLOC</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need to access the cpu field knowing that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * DEBUG_PAGEALLOC could have unmapped it if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the mutex owner just released it and exited.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_kernel_address\">probe_kernel_address</a>(&amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Even if the access succeeded (likely case),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the cpu field may no longer be valid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> >= <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to validate that we can do a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get_cpu() and that we have the percpu area.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Owner changed, break to re-assess state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a> != <a class=\"id\" href=\"#owner\">owner</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the lock has switched to a different owner,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we likely have heavy contention. Return 0 to quit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * optimistic spinning and not contend further:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#owner\">owner</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Is that owner really running on that cpu?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>) != <a class=\"id\" href=\"#owner\">owner</a> || <a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * this is the entry point to schedule() from in-kernel preemption</span>", 
"<span class=\"comment\"> * off of preempt_enable. Kernel preemptions off return from interrupt</span>", 
"<span class=\"comment\"> * occur there and call schedule directly.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#preempt_schedule\">preempt_schedule</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there is a non-zero preempt_count or interrupts are disabled,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we do not want to preempt the current task. Just return..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#preempt_count\">preempt_count</a> || <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_preempt_count_notrace\">add_preempt_count_notrace</a>(<a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sub_preempt_count_notrace\">sub_preempt_count_notrace</a>(<a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check again in case we missed a preemption opportunity</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * between schedule and now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#need_resched\">need_resched</a>());", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#preempt_schedule\">preempt_schedule</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * this is the entry point to schedule() from kernel preemption</span>", 
"<span class=\"comment\"> * off of irq context.</span>", 
"<span class=\"comment\"> * Note, that this is called and return with irqs disabled. This will</span>", 
"<span class=\"comment\"> * protect us against recursive calling from irq.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#preempt_schedule_irq\">preempt_schedule_irq</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Catch callers which need to be fixed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#preempt_count\">preempt_count</a> || !<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_preempt_count\">add_preempt_count</a>(<a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sub_preempt_count\">sub_preempt_count</a>(<a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check again in case we missed a preemption opportunity</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * between schedule and now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#need_resched\">need_resched</a>());", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PREEMPT */</span>", 
"", 
"int <a class=\"id\" href=\"#default_wake_function\">default_wake_function</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#curr\">curr</a>, unsigned <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#wake_flags\">wake_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#try_to_wake_up\">try_to_wake_up</a>(<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#private\">private</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#wake_flags\">wake_flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#default_wake_function\">default_wake_function</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The core wakeup function. Non-exclusive wakeups (nr_exclusive == 0) just</span>", 
"<span class=\"comment\"> * wake everything up. If it's an exclusive wakeup (nr_exclusive == small +ve</span>", 
"<span class=\"comment\"> * number) then we wake all the non-exclusive tasks and one exclusive task.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are circumstances in which we can try to wake a task which has already</span>", 
"<span class=\"comment\"> * started to run but is not in state TASK_RUNNING. try_to_wake_up() returns</span>", 
"<span class=\"comment\"> * zero in this (rare) case, and we handle it by continuing to scan the queue.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__wake_up_common\">__wake_up_common</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_exclusive\">nr_exclusive</a>, int <a class=\"id\" href=\"#wake_flags\">wake_flags</a>, void *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#curr\">curr</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#curr\">curr</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#task_list\">task_list</a>, <a class=\"id\" href=\"#task_list\">task_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#curr\">curr</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#wake_flags\">wake_flags</a>, <a class=\"id\" href=\"#key\">key</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_FLAG_EXCLUSIVE\">WQ_FLAG_EXCLUSIVE</a>) && !--<a class=\"id\" href=\"#nr_exclusive\">nr_exclusive</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __wake_up - wake up threads blocked on a waitqueue.</span>", 
"<span class=\"comment\"> * @q: the waitqueue</span>", 
"<span class=\"comment\"> * @mode: which threads</span>", 
"<span class=\"comment\"> * @nr_exclusive: how many wake-one or wake-many threads to wake up</span>", 
"<span class=\"comment\"> * @key: is directly passed to the wakeup function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It may be assumed that this function implies a write memory barrier before</span>", 
"<span class=\"comment\"> * changing the task state if and only if any tasks are woken up.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__wake_up\">__wake_up</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_exclusive\">nr_exclusive</a>, void *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_common\">__wake_up_common</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#nr_exclusive\">nr_exclusive</a>, 0, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__wake_up\">__wake_up</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Same as __wake_up but called with the spinlock in wait_queue_head_t held.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__wake_up_locked\">__wake_up_locked</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_common\">__wake_up_common</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#mode\">mode</a>, 1, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__wake_up_locked\">__wake_up_locked</a>);", 
"", 
"void <a class=\"id\" href=\"#__wake_up_locked_key\">__wake_up_locked_key</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>, void *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_common\">__wake_up_common</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#mode\">mode</a>, 1, 0, <a class=\"id\" href=\"#key\">key</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __wake_up_sync_key - wake up threads blocked on a waitqueue.</span>", 
"<span class=\"comment\"> * @q: the waitqueue</span>", 
"<span class=\"comment\"> * @mode: which threads</span>", 
"<span class=\"comment\"> * @nr_exclusive: how many wake-one or wake-many threads to wake up</span>", 
"<span class=\"comment\"> * @key: opaque value to be passed to wakeup targets</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The sync wakeup differs that the waker knows that it will schedule</span>", 
"<span class=\"comment\"> * away soon, so while the target thread will be woken up, it will not</span>", 
"<span class=\"comment\"> * be migrated to another CPU - ie. the two threads are 'synchronized'</span>", 
"<span class=\"comment\"> * with each other. This can prevent needless bouncing between CPUs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On UP it can prevent extra preemption.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It may be assumed that this function implies a write memory barrier before</span>", 
"<span class=\"comment\"> * changing the task state if and only if any tasks are woken up.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__wake_up_sync_key\">__wake_up_sync_key</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_exclusive\">nr_exclusive</a>, void *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#wake_flags\">wake_flags</a> = <a class=\"id\" href=\"#WF_SYNC\">WF_SYNC</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#nr_exclusive\">nr_exclusive</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_flags\">wake_flags</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_common\">__wake_up_common</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#nr_exclusive\">nr_exclusive</a>, <a class=\"id\" href=\"#wake_flags\">wake_flags</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__wake_up_sync_key\">__wake_up_sync_key</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __wake_up_sync - see __wake_up_sync_key()</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__wake_up_sync\">__wake_up_sync</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#nr_exclusive\">nr_exclusive</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_sync_key\">__wake_up_sync_key</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#nr_exclusive\">nr_exclusive</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__wake_up_sync\">__wake_up_sync</a>);<span class=\"ts\"/><span class=\"comment\">/* For internal use only */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * complete: - signals a single thread waiting on this completion</span>", 
"<span class=\"comment\"> * @x:  holds the state of this particular completion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This will wake up a single thread waiting on this completion. Threads will be</span>", 
"<span class=\"comment\"> * awakened in the same order in which they were queued.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See also complete_all(), wait_for_completion() and related routines.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It may be assumed that this function implies a write memory barrier before</span>", 
"<span class=\"comment\"> * changing the task state if and only if any tasks are woken up.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#complete\">complete</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#done\">done</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_common\">__wake_up_common</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>, 1, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#complete\">complete</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * complete_all: - signals all threads waiting on this completion</span>", 
"<span class=\"comment\"> * @x:  holds the state of this particular completion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This will wake up all threads waiting on this particular completion event.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It may be assumed that this function implies a write memory barrier before</span>", 
"<span class=\"comment\"> * changing the task state if and only if any tasks are woken up.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#complete_all\">complete_all</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#done\">done</a> += <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>/2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_common\">__wake_up_common</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>, 0, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#complete_all\">complete_all</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#do_wait_for_common\">do_wait_for_common</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>, long <a class=\"id\" href=\"#timeout\">timeout</a>, int <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#done\">done</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue_tail_exclusive\">__add_wait_queue_tail_exclusive</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending_state\">signal_pending_state</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (!<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#done\">done</a> && <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_wait_queue\">__remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#done\">done</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#done\">done</a>--;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#timeout\">timeout</a> ?: 1;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#wait_for_common\">wait_for_common</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>, long <a class=\"id\" href=\"#timeout\">timeout</a>, int <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#do_wait_for_common\">do_wait_for_common</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_for_completion: - waits for completion of a task</span>", 
"<span class=\"comment\"> * @x:  holds the state of this particular completion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This waits to be signaled for completion of a specific task. It is NOT</span>", 
"<span class=\"comment\"> * interruptible and there is no timeout.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See also similar routines (i.e. wait_for_completion_timeout()) with timeout</span>", 
"<span class=\"comment\"> * and interrupt capability. Also see complete().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_common\">wait_for_common</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_for_completion_timeout: - waits for completion of a task (w/timeout)</span>", 
"<span class=\"comment\"> * @x:  holds the state of this particular completion</span>", 
"<span class=\"comment\"> * @timeout:  timeout value in jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This waits for either a completion of a specific task to be signaled or for a</span>", 
"<span class=\"comment\"> * specified timeout to expire. The timeout is in jiffies. It is not</span>", 
"<span class=\"comment\"> * interruptible.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#wait_for_completion_timeout\">wait_for_completion_timeout</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>, unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wait_for_common\">wait_for_common</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#wait_for_completion_timeout\">wait_for_completion_timeout</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_for_completion_interruptible: - waits for completion of a task (w/intr)</span>", 
"<span class=\"comment\"> * @x:  holds the state of this particular completion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This waits for completion of a specific task to be signaled. It is</span>", 
"<span class=\"comment\"> * interruptible.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#wait_for_completion_interruptible\">wait_for_completion_interruptible</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#wait_for_common\">wait_for_common</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> == -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#wait_for_completion_interruptible\">wait_for_completion_interruptible</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_for_completion_interruptible_timeout: - waits for completion (w/(to,intr))</span>", 
"<span class=\"comment\"> * @x:  holds the state of this particular completion</span>", 
"<span class=\"comment\"> * @timeout:  timeout value in jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This waits for either a completion of a specific task to be signaled or for a</span>", 
"<span class=\"comment\"> * specified timeout to expire. It is interruptible. The timeout is in jiffies.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#wait_for_completion_interruptible_timeout\">wait_for_completion_interruptible_timeout</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wait_for_common\">wait_for_common</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#wait_for_completion_interruptible_timeout\">wait_for_completion_interruptible_timeout</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_for_completion_killable: - waits for completion of a task (killable)</span>", 
"<span class=\"comment\"> * @x:  holds the state of this particular completion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This waits to be signaled for completion of a specific task. It can be</span>", 
"<span class=\"comment\"> * interrupted by a kill signal.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#wait_for_completion_killable\">wait_for_completion_killable</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#wait_for_common\">wait_for_common</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>, <a class=\"id\" href=\"#TASK_KILLABLE\">TASK_KILLABLE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> == -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#wait_for_completion_killable\">wait_for_completion_killable</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_for_completion_killable_timeout: - waits for completion of a task (w/(to,killable))</span>", 
"<span class=\"comment\"> * @x:  holds the state of this particular completion</span>", 
"<span class=\"comment\"> * @timeout:  timeout value in jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This waits for either a completion of a specific task to be</span>", 
"<span class=\"comment\"> * signaled or for a specified timeout to expire. It can be</span>", 
"<span class=\"comment\"> * interrupted by a kill signal. The timeout is in jiffies.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#wait_for_completion_killable_timeout\">wait_for_completion_killable_timeout</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wait_for_common\">wait_for_common</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#TASK_KILLABLE\">TASK_KILLABLE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#wait_for_completion_killable_timeout\">wait_for_completion_killable_timeout</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>try_wait_for_completion - try to decrement a completion without blocking</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@x:<span class=\"ts\"/>completion structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns: 0 if a decrement cannot be done without blocking</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/> 1 if a decrement succeeded.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If a completion is being used as a counting completion,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>attempt to decrement the counter without blocking. This</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>enables us to avoid waiting if the resource the completion</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is protecting is not available.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#try_wait_for_completion\">try_wait_for_completion</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#done\">done</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#done\">done</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#try_wait_for_completion\">try_wait_for_completion</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>completion_done - Test to see if a completion has any waiters</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@x:<span class=\"ts\"/>completion structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns: 0 if there are waiters (wait_for_completion() in progress)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/> 1 if there are no waiters.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#completion_done\">completion_done</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#done\">done</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#completion_done\">completion_done</a>);", 
"", 
"static long <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#sleep_on_common\">sleep_on_common</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#state\">state</a>, long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_entry\">init_waitqueue_entry</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue\">__add_wait_queue</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__remove_wait_queue\">__remove_wait_queue</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#interruptible_sleep_on\">interruptible_sleep_on</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sleep_on_common\">sleep_on_common</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#interruptible_sleep_on\">interruptible_sleep_on</a>);", 
"", 
"long <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#interruptible_sleep_on_timeout\">interruptible_sleep_on_timeout</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sleep_on_common\">sleep_on_common</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#interruptible_sleep_on_timeout\">interruptible_sleep_on_timeout</a>);", 
"", 
"void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#sleep_on\">sleep_on</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sleep_on_common\">sleep_on_common</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>, <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sleep_on\">sleep_on</a>);", 
"", 
"long <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#sleep_on_timeout\">sleep_on_timeout</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sleep_on_common\">sleep_on_common</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sleep_on_timeout\">sleep_on_timeout</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_MUTEXES\">CONFIG_RT_MUTEXES</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rt_mutex_setprio - set the current priority of a task</span>", 
"<span class=\"comment\"> * @p: task</span>", 
"<span class=\"comment\"> * @prio: prio value (kernel-internal form)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function changes the 'effective' priority of a task. It does</span>", 
"<span class=\"comment\"> * not touch -&gt;normal_prio like __setscheduler().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used by the rt_mutex code to implement priority inheritance logic.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rt_mutex_setprio\">rt_mutex_setprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#prio\">prio</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oldprio\">oldprio</a>, <a class=\"id\" href=\"#on_rq\">on_rq</a>, <a class=\"id\" href=\"#running\">running</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> *<a class=\"id\" href=\"#prev_class\">prev_class</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#prio\">prio</a> &lt; 0 || <a class=\"id\" href=\"#prio\">prio</a> &gt; <a class=\"id\" href=\"#MAX_PRIO\">MAX_PRIO</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldprio\">oldprio</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_class\">prev_class</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_rq\">on_rq</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#running\">running</a> = <a class=\"id\" href=\"#task_current\">task_current</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dequeue_task\">dequeue_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#running\">running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#put_prev_task\">put_prev_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_prio\">rt_prio</a>(<a class=\"id\" href=\"#prio\">prio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a> = &amp;<a class=\"id\" href=\"#rt_sched_class\">rt_sched_class</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a> = &amp;<a class=\"id\" href=\"#fair_sched_class\">fair_sched_class</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#prio\">prio</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#running\">running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#set_curr_task\">set_curr_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rq\">on_rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_task\">enqueue_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#oldprio\">oldprio</a> &lt; <a class=\"id\" href=\"#prio\">prio</a> ? <a class=\"id\" href=\"#ENQUEUE_HEAD\">ENQUEUE_HEAD</a> : 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_class_changed\">check_class_changed</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#prev_class\">prev_class</a>, <a class=\"id\" href=\"#oldprio\">oldprio</a>, <a class=\"id\" href=\"#running\">running</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, long <a class=\"id\" href=\"#nice\">nice</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_prio\">old_prio</a>, <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#on_rq\">on_rq</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TASK_NICE\">TASK_NICE</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#nice\">nice</a> || <a class=\"id\" href=\"#nice\">nice</a> &lt; -20 || <a class=\"id\" href=\"#nice\">nice</a> &gt; 19)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have to be careful, if called from sys_setpriority(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the task might be in the middle of scheduling on another CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The RT priorities are set via sched_setscheduler(), but we still</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allow the 'normal' nice value to be set - but as expected</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it wont have any effect on scheduling until the task is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SCHED_FIFO/SCHED_RR:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_has_rt_policy\">task_has_rt_policy</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#static_prio\">static_prio</a> = <a class=\"id\" href=\"#NICE_TO_PRIO\">NICE_TO_PRIO</a>(<a class=\"id\" href=\"#nice\">nice</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_rq\">on_rq</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dequeue_task\">dequeue_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#static_prio\">static_prio</a> = <a class=\"id\" href=\"#NICE_TO_PRIO\">NICE_TO_PRIO</a>(<a class=\"id\" href=\"#nice\">nice</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_load_weight\">set_load_weight</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_prio\">old_prio</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#effective_prio\">effective_prio</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> - <a class=\"id\" href=\"#old_prio\">old_prio</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rq\">on_rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_task\">enqueue_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the task increased its priority or is running and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lowered its priority, then reschedule its CPU:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; 0 || (<a class=\"id\" href=\"#delta\">delta</a> &gt; 0 && <a class=\"id\" href=\"#task_running\">task_running</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * can_nice - check if a task can reduce its nice value</span>", 
"<span class=\"comment\"> * @p: task</span>", 
"<span class=\"comment\"> * @nice: nice value</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#can_nice\">can_nice</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, const int <a class=\"id\" href=\"#nice\">nice</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* convert nice value [19,-20] to rlimit style value [1,40] */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nice_rlim\">nice_rlim</a> = 20 - <a class=\"id\" href=\"#nice\">nice</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#nice_rlim\">nice_rlim</a> <= <a class=\"id\" href=\"#task_rlimit\">task_rlimit</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#RLIMIT_NICE\">RLIMIT_NICE</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_NICE\">CAP_SYS_NICE</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_SYS_NICE\">__ARCH_WANT_SYS_NICE</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sys_nice - change the priority of the current process.</span>", 
"<span class=\"comment\"> * @increment: priority increment</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * sys_setpriority is a more generic, but much slower function that</span>", 
"<span class=\"comment\"> * does similar things.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#nice\">nice</a>, int, <a class=\"id\" href=\"#increment\">increment</a>)", 
];
xr_frag_insert('l/69/66f6ba424ae52cbadd841022e02e09631e9332.xr', __xr_tmp);
