var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_pg\">got_pg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The oom killer is not called for high-order</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * allocations that may fail, so if no progress</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is being made, there are no other options and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * retrying is unlikely to help.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &gt; <a class=\"id\" href=\"#PAGE_ALLOC_COSTLY_ORDER\">PAGE_ALLOC_COSTLY_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nopage\">nopage</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The oom killer is not called for lowmem</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * allocations to prevent needlessly killing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * innocent tasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a> &lt; <a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nopage\">nopage</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if we should retry the allocation */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages_reclaimed\">pages_reclaimed</a> += <a class=\"id\" href=\"#did_some_progress\">did_some_progress</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#should_alloc_retry\">should_alloc_retry</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#pages_reclaimed\">pages_reclaimed</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Wait for some write requests to complete then retry */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#congestion_wait\">congestion_wait</a>(<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>, <a class=\"id\" href=\"#HZ\">HZ</a>/50);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#rebalance\">rebalance</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#nopage\">nopage</a>:", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>) && <a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: page allocation failure.\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" order:%d, mode:0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_mem\">show_mem</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<a class=\"id\" href=\"#got_pg\">got_pg</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kmemcheck_enabled\">kmemcheck_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_pagealloc_alloc\">kmemcheck_pagealloc_alloc</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the 'heart' of the zoned buddy allocator.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__alloc_pages_nodemask\">__alloc_pages_nodemask</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a> = <a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a> = <a class=\"id\" href=\"#allocflags_to_migratetype\">allocflags_to_migratetype</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &= <a class=\"id\" href=\"#gfp_allowed_mask\">gfp_allowed_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_trace_alloc\">lockdep_trace_alloc</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep_if\">might_sleep_if</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#should_fail_alloc_page\">should_fail_alloc_page</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check the zones suitable for the gfp_mask contain at least one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * valid zone. It's possible to have an empty zonelist as a result</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of GFP_THISNODE and a memoryless node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>-><a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_mems_allowed\">get_mems_allowed</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* The preferred zone is used for statistics later */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_zones_zonelist\">first_zones_zonelist</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>, &amp;<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_mems_allowed\">put_mems_allowed</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First allocation attempt */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#get_page_from_freelist\">get_page_from_freelist</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>|<a class=\"id\" href=\"#__GFP_HARDWALL\">__GFP_HARDWALL</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>, <a class=\"id\" href=\"#ALLOC_WMARK_LOW\">ALLOC_WMARK_LOW</a>|<a class=\"id\" href=\"#ALLOC_CPUSET\">ALLOC_CPUSET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__alloc_pages_slowpath\">__alloc_pages_slowpath</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_mems_allowed\">put_mems_allowed</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_page_alloc\">trace_mm_page_alloc</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__alloc_pages_nodemask\">__alloc_pages_nodemask</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Common helper functions.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __get_free_pages() returns a 32-bit address, which cannot represent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a highmem page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>((<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>) != 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return (unsigned long) <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>);", 
"", 
"void <a class=\"id\" href=\"#__pagevec_free\">__pagevec_free</a>(struct <a class=\"id\" href=\"#pagevec\">pagevec</a> *<a class=\"id\" href=\"#pvec\">pvec</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#pagevec_count\">pagevec_count</a>(<a class=\"id\" href=\"#pvec\">pvec</a>);", 
"", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#i\">i</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_pagevec_free\">trace_mm_pagevec_free</a>(<a class=\"id\" href=\"#pvec\">pvec</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#pvec\">pvec</a>-><a class=\"id\" href=\"#cold\">cold</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_hot_cold_page\">free_hot_cold_page</a>(<a class=\"id\" href=\"#pvec\">pvec</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#pvec\">pvec</a>-><a class=\"id\" href=\"#cold\">cold</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__free_pages\">__free_pages</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#put_page_testzero\">put_page_testzero</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_hot_cold_page\">free_hot_cold_page</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_ok\">__free_pages_ok</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__free_pages\">__free_pages</a>);", 
"", 
"void <a class=\"id\" href=\"#free_pages\">free_pages</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#virt_addr_valid\">virt_addr_valid</a>((void *)<a class=\"id\" href=\"#addr\">addr</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages\">__free_pages</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>((void *)<a class=\"id\" href=\"#addr\">addr</a>), <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#free_pages\">free_pages</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * alloc_pages_exact - allocate an exact number physically-contiguous pages.</span>", 
"<span class=\"comment\"> * @size: the number of bytes to allocate</span>", 
"<span class=\"comment\"> * @gfp_mask: GFP flags for the allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is similar to alloc_pages(), except that it allocates the</span>", 
"<span class=\"comment\"> * minimum number of pages to satisfy the request.  alloc_pages() can only</span>", 
"<span class=\"comment\"> * allocate memory in power-of-two pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is also limited by MAX_ORDER.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Memory allocated by this function must be released by free_pages_exact().</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#alloc_pages_exact\">alloc_pages_exact</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#alloc_end\">alloc_end</a> = <a class=\"id\" href=\"#addr\">addr</a> + (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> << <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#used\">used</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#split_page\">split_page</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>((void *)<a class=\"id\" href=\"#addr\">addr</a>), <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#used\">used</a> &lt; <a class=\"id\" href=\"#alloc_end\">alloc_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>(<a class=\"id\" href=\"#used\">used</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#used\">used</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (void *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_pages_exact\">alloc_pages_exact</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * free_pages_exact - release memory allocated via alloc_pages_exact()</span>", 
"<span class=\"comment\"> * @virt: the value returned by alloc_pages_exact.</span>", 
"<span class=\"comment\"> * @size: size of allocation, same value as passed to alloc_pages_exact().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Release the memory allocated by a previous call to alloc_pages_exact.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_pages_exact\">free_pages_exact</a>(void *<a class=\"id\" href=\"#virt\">virt</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#virt\">virt</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#free_pages_exact\">free_pages_exact</a>);", 
"", 
"static unsigned int <a class=\"id\" href=\"#nr_free_zone_pages\">nr_free_zone_pages</a>(int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Just pick one node, since fallback list is circular */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sum\">sum</a> = 0;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a> = <a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(<a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>(), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist\">for_each_zone_zonelist</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#high\">high</a> = <a class=\"id\" href=\"#high_wmark_pages\">high_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#high\">high</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> += <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#high\">high</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sum\">sum</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Amount of free RAM allocatable within ZONE_DMA and ZONE_NORMAL</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#nr_free_buffer_pages\">nr_free_buffer_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_free_zone_pages\">nr_free_zone_pages</a>(<a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#GFP_USER\">GFP_USER</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#nr_free_buffer_pages\">nr_free_buffer_pages</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Amount of free RAM allocatable within all zones</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#nr_free_pagecache_pages\">nr_free_pagecache_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_free_zone_pages\">nr_free_zone_pages</a>(<a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#show_node\">show_node</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NUMA_BUILD\">NUMA_BUILD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Node %d \", <a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#si_meminfo\">si_meminfo</a>(struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#totalram\">totalram</a> = <a class=\"id\" href=\"#totalram_pages\">totalram_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#sharedram\">sharedram</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#freeram\">freeram</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#bufferram\">bufferram</a> = <a class=\"id\" href=\"#nr_blockdev_pages\">nr_blockdev_pages</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#totalhigh\">totalhigh</a> = <a class=\"id\" href=\"#totalhigh_pages\">totalhigh_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#freehigh\">freehigh</a> = <a class=\"id\" href=\"#nr_free_highpages\">nr_free_highpages</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#mem_unit\">mem_unit</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#si_meminfo\">si_meminfo</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"void <a class=\"id\" href=\"#si_meminfo_node\">si_meminfo_node</a>(struct <a class=\"id\" href=\"#sysinfo\">sysinfo</a> *<a class=\"id\" href=\"#val\">val</a>, int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#totalram\">totalram</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_present_pages\">node_present_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#freeram\">freeram</a> = <a class=\"id\" href=\"#node_page_state\">node_page_state</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#totalhigh\">totalhigh</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#ZONE_HIGHMEM\">ZONE_HIGHMEM</a>].<a class=\"id\" href=\"#present_pages\">present_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#freehigh\">freehigh</a> = <a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#ZONE_HIGHMEM\">ZONE_HIGHMEM</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#totalhigh\">totalhigh</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#freehigh\">freehigh</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>-><a class=\"id\" href=\"#mem_unit\">mem_unit</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#x\">x</a>) ((<a class=\"id\" href=\"#x\">x</a>) << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>-10))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Show free area list (used inside shift_scroll-lock stuff)</span>", 
"<span class=\"comment\"> * We also calculate the percentage fragmentation. We do this by counting the</span>", 
"<span class=\"comment\"> * memory on each free list with the exception of the first item on the list.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#show_free_areas\">show_free_areas</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_node\">show_node</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s per-cpu:\\n\", <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#per_cpu_pageset\">per_cpu_pageset</a> *<a class=\"id\" href=\"#pageset\">pageset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pageset\">pageset</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageset\">pageset</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"CPU %4d: hi:%5d, btch:%4d usd:%4d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#pageset\">pageset</a>-><a class=\"id\" href=\"#pcp\">pcp</a>.<a class=\"id\" href=\"#high\">high</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pageset\">pageset</a>-><a class=\"id\" href=\"#pcp\">pcp</a>.<a class=\"id\" href=\"#batch\">batch</a>, <a class=\"id\" href=\"#pageset\">pageset</a>-><a class=\"id\" href=\"#pcp\">pcp</a>.<a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"active_anon:%lu inactive_anon:%lu isolated_anon:%lu\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" active_file:%lu inactive_file:%lu isolated_file:%lu\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" unevictable:%lu\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" dirty:%lu writeback:%lu unstable:%lu\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" free:%lu slab_reclaimable:%lu slab_unreclaimable:%lu\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" mapped:%lu shmem:%lu pagetables:%lu bounce:%lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_ACTIVE_ANON\">NR_ACTIVE_ANON</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_INACTIVE_ANON\">NR_INACTIVE_ANON</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_ACTIVE_FILE\">NR_ACTIVE_FILE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_INACTIVE_FILE\">NR_INACTIVE_FILE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_ISOLATED_FILE\">NR_ISOLATED_FILE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_UNEVICTABLE\">NR_UNEVICTABLE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FILE_DIRTY\">NR_FILE_DIRTY</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_WRITEBACK\">NR_WRITEBACK</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_UNSTABLE_NFS\">NR_UNSTABLE_NFS</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_SLAB_RECLAIMABLE\">NR_SLAB_RECLAIMABLE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_SLAB_UNRECLAIMABLE\">NR_SLAB_UNRECLAIMABLE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FILE_MAPPED\">NR_FILE_MAPPED</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_SHMEM\">NR_SHMEM</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_PAGETABLE\">NR_PAGETABLE</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_BOUNCE\">NR_BOUNCE</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_node\">show_node</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" free:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" min:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" low:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" high:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" active_anon:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" inactive_anon:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" active_file:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" inactive_file:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" unevictable:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" isolated(anon):%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" isolated(file):%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" present:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" mlocked:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" dirty:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" writeback:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" mapped:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" shmem:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" slab_reclaimable:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" slab_unreclaimable:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" kernel_stack:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" pagetables:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" unstable:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" bounce:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" writeback_tmp:%lukB\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" pages_scanned:%lu\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" all_unreclaimable? %s\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_nr_free_pages\">zone_nr_free_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#min_wmark_pages\">min_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#low_wmark_pages\">low_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#high_wmark_pages\">high_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ACTIVE_ANON\">NR_ACTIVE_ANON</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_ANON\">NR_INACTIVE_ANON</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ACTIVE_FILE\">NR_ACTIVE_FILE</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_INACTIVE_FILE\">NR_INACTIVE_FILE</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_UNEVICTABLE\">NR_UNEVICTABLE</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_ISOLATED_FILE\">NR_ISOLATED_FILE</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_MLOCK\">NR_MLOCK</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FILE_DIRTY\">NR_FILE_DIRTY</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_WRITEBACK\">NR_WRITEBACK</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FILE_MAPPED\">NR_FILE_MAPPED</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_SHMEM\">NR_SHMEM</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_SLAB_RECLAIMABLE\">NR_SLAB_RECLAIMABLE</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_SLAB_UNRECLAIMABLE\">NR_SLAB_UNRECLAIMABLE</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_KERNEL_STACK\">NR_KERNEL_STACK</a>) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a> / 1024,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_PAGETABLE\">NR_PAGETABLE</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_UNSTABLE_NFS\">NR_UNSTABLE_NFS</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_BOUNCE\">NR_BOUNCE</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#zone_page_state\">zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_WRITEBACK_TEMP\">NR_WRITEBACK_TEMP</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pages_scanned\">pages_scanned</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a> ? \"yes\" : \"no\")", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"lowmem_reserve[]:\");", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" %lu\", <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lowmem_reserve\">lowmem_reserve</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
" <span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>], <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#total\">total</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_node\">show_node</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s: \", <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#order\">order</a> = 0; <a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>; <a class=\"id\" href=\"#order\">order</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#order\">order</a>] = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#order\">order</a>].<a class=\"id\" href=\"#nr_free\">nr_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#order\">order</a>] << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#order\">order</a> = 0; <a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>; <a class=\"id\" href=\"#order\">order</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%lu*%lukB \", <a class=\"id\" href=\"#nr\">nr</a>[<a class=\"id\" href=\"#order\">order</a>], <a class=\"id\" href=\"#K\">K</a>(1UL) << <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"= %lukB\\n\", <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#total\">total</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%ld total pagecache pages\\n\", <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FILE_PAGES\">NR_FILE_PAGES</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_swap_cache_info\">show_swap_cache_info</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#zoneref_set_zone\">zoneref_set_zone</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#zoneref\">zoneref</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zoneref\">zoneref</a>-><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zoneref\">zoneref</a>-><a class=\"id\" href=\"#zone_idx\">zone_idx</a> = <a class=\"id\" href=\"#zone_idx\">zone_idx</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Builds allocation fallback zone lists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Add all populated zones of a node to the zonelist.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#build_zonelists_node\">build_zonelists_node</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_zones\">nr_zones</a>, enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#zone_type\">zone_type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#zone_type\">zone_type</a> >= <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_type\">zone_type</a>++;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_type\">zone_type</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zones\">node_zones</a> + <a class=\"id\" href=\"#zone_type\">zone_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zoneref_set_zone\">zoneref_set_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#nr_zones\">nr_zones</a>++]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_highest_zone\">check_highest_zone</a>(<a class=\"id\" href=\"#zone_type\">zone_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#zone_type\">zone_type</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_zones\">nr_zones</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  zonelist_order:</span>", 
"<span class=\"comment\"> *  0 = automatic detection of better ordering.</span>", 
"<span class=\"comment\"> *  1 = order by ([node] distance, -zonetype)</span>", 
"<span class=\"comment\"> *  2 = order by (-zonetype, [node] distance)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  If not NUMA, ZONELIST_ORDER_ZONE and ZONELIST_ORDER_NODE will create</span>", 
"<span class=\"comment\"> *  the same zonelist. So only NUMA can configure this param.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONELIST_ORDER_DEFAULT\">ZONELIST_ORDER_DEFAULT</a>  0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONELIST_ORDER_NODE\">ZONELIST_ORDER_NODE</a>     1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONELIST_ORDER_ZONE\">ZONELIST_ORDER_ZONE</a>     2", 
"", 
"<span class=\"comment\">/* zonelist order in the kernel.</span>", 
"<span class=\"comment\"> * set_zonelist_order() will set this to NODE or ZONE.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#current_zonelist_order\">current_zonelist_order</a> = <a class=\"id\" href=\"#ZONELIST_ORDER_DEFAULT\">ZONELIST_ORDER_DEFAULT</a>;", 
"static char <a class=\"id\" href=\"#zonelist_order_name\">zonelist_order_name</a>[3][8] = {\"Default\", \"Node\", \"Zone\"};", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/* The value user specified ....changed by config */</span>", 
"static int <a class=\"id\" href=\"#user_zonelist_order\">user_zonelist_order</a> = <a class=\"id\" href=\"#ZONELIST_ORDER_DEFAULT\">ZONELIST_ORDER_DEFAULT</a>;", 
"<span class=\"comment\">/* string for sysctl */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NUMA_ZONELIST_ORDER_LEN\">NUMA_ZONELIST_ORDER_LEN</a><span class=\"ts\"/>16", 
"char <a class=\"id\" href=\"#numa_zonelist_order\">numa_zonelist_order</a>[16] = \"default\";", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * interface for configure zonelist ordering.</span>", 
"<span class=\"comment\"> * command line option \"numa_zonelist_order\"</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>= \"[dD]efault<span class=\"ts\"/>- default, automatic configuration.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>= \"[nN]ode <span class=\"ts\"/>- order by node locality, then by zone within node</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>= \"[zZ]one      - order by zone, then by locality within zone</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#__parse_numa_zonelist_order\">__parse_numa_zonelist_order</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#s\">s</a> == 'd' || *<a class=\"id\" href=\"#s\">s</a> == 'D') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user_zonelist_order\">user_zonelist_order</a> = <a class=\"id\" href=\"#ZONELIST_ORDER_DEFAULT\">ZONELIST_ORDER_DEFAULT</a>;", 
"<span class=\"ts\"/>} else if (*<a class=\"id\" href=\"#s\">s</a> == 'n' || *<a class=\"id\" href=\"#s\">s</a> == 'N') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user_zonelist_order\">user_zonelist_order</a> = <a class=\"id\" href=\"#ZONELIST_ORDER_NODE\">ZONELIST_ORDER_NODE</a>;", 
"<span class=\"ts\"/>} else if (*<a class=\"id\" href=\"#s\">s</a> == 'z' || *<a class=\"id\" href=\"#s\">s</a> == 'Z') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user_zonelist_order\">user_zonelist_order</a> = <a class=\"id\" href=\"#ZONELIST_ORDER_ZONE\">ZONELIST_ORDER_ZONE</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Ignoring invalid numa_zonelist_order value:  \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%s\\n\", <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#setup_numa_zonelist_order\">setup_numa_zonelist_order</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__parse_numa_zonelist_order\">__parse_numa_zonelist_order</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"numa_zonelist_order\", <a class=\"id\" href=\"#setup_numa_zonelist_order\">setup_numa_zonelist_order</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sysctl handler for numa_zonelist_order</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#numa_zonelist_order_handler\">numa_zonelist_order_handler</a>(<a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#saved_string\">saved_string</a>[<a class=\"id\" href=\"#NUMA_ZONELIST_ORDER_LEN\">NUMA_ZONELIST_ORDER_LEN</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#zl_order_mutex\">zl_order_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#zl_order_mutex\">zl_order_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#saved_string\">saved_string</a>, (char*)<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#proc_dostring\">proc_dostring</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#oldval\">oldval</a> = <a class=\"id\" href=\"#user_zonelist_order\">user_zonelist_order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__parse_numa_zonelist_order\">__parse_numa_zonelist_order</a>((char*)<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * bogus value.  restore saved string</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>((char*)<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#saved_string\">saved_string</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NUMA_ZONELIST_ORDER_LEN\">NUMA_ZONELIST_ORDER_LEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user_zonelist_order\">user_zonelist_order</a> = <a class=\"id\" href=\"#oldval\">oldval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#oldval\">oldval</a> != <a class=\"id\" href=\"#user_zonelist_order\">user_zonelist_order</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#zonelists_mutex\">zonelists_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#build_all_zonelists\">build_all_zonelists</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#zonelists_mutex\">zonelists_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#zl_order_mutex\">zl_order_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_NODE_LOAD\">MAX_NODE_LOAD</a> (<a class=\"id\" href=\"#nr_online_nodes\">nr_online_nodes</a>)", 
"static int <a class=\"id\" href=\"#node_load\">node_load</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>];", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_next_best_node - find the next node that should appear in a given node's fallback list</span>", 
"<span class=\"comment\"> * @node: node whose fallback list we're appending</span>", 
"<span class=\"comment\"> * @used_node_mask: nodemask_t of already used nodes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use a number of factors to determine which is the next node that should</span>", 
"<span class=\"comment\"> * appear on a given node's fallback list.  The node should not have appeared</span>", 
"<span class=\"comment\"> * already in @node's fallback list, and it should be the next closest node</span>", 
"<span class=\"comment\"> * according to the distance array (which contains arbitrary distance values</span>", 
"<span class=\"comment\"> * from each node to each node in the system), and should also prefer nodes</span>", 
"<span class=\"comment\"> * with no CPUs, since presumably they'll have very little allocation pressure</span>", 
"<span class=\"comment\"> * on them otherwise.</span>", 
"<span class=\"comment\"> * It returns -1 if no node is found.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#find_next_best_node\">find_next_best_node</a>(int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#used_node_mask\">used_node_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#min_val\">min_val</a> = <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#best_node\">best_node</a> = -1;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use the local node if we haven't already */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#used_node_mask\">used_node_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#used_node_mask\">used_node_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't want a node to appear more than once */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#n\">n</a>, *<a class=\"id\" href=\"#used_node_mask\">used_node_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Use the distance array to find the distance */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#node_distance\">node_distance</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Penalize nodes under us (\"prefer the next node\") */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> += (<a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Give preference to headless and unused nodes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#tmp\">tmp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> += <a class=\"id\" href=\"#PENALTY_FOR_NODE_WITH_CPUS\">PENALTY_FOR_NODE_WITH_CPUS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Slight preference for less loaded node */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> *= (<a class=\"id\" href=\"#MAX_NODE_LOAD\">MAX_NODE_LOAD</a>*<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> += <a class=\"id\" href=\"#node_load\">node_load</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; <a class=\"id\" href=\"#min_val\">min_val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_val\">min_val</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best_node\">best_node</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#best_node\">best_node</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#best_node\">best_node</a>, *<a class=\"id\" href=\"#used_node_mask\">used_node_mask</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#best_node\">best_node</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Build zonelists ordered by node and zones within node.</span>", 
"<span class=\"comment\"> * This results in maximum locality--normal zone overflows into local</span>", 
"<span class=\"comment\"> * DMA zone, if any--but risks exhausting DMA zone.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#build_zonelists_in_node_order\">build_zonelists_in_node_order</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a> = &amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zonelists\">node_zonelists</a>[0];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#zone\">zone</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#build_zonelists_node\">build_zonelists_node</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>), <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#j\">j</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#zone_idx\">zone_idx</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Build gfp_thisnode zonelists</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#build_thisnode_zonelists\">build_thisnode_zonelists</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a> = &amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zonelists\">node_zonelists</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#build_zonelists_node\">build_zonelists_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, 0, <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#zone_idx\">zone_idx</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Build zonelists ordered by zone and nodes within zones.</span>", 
"<span class=\"comment\"> * This results in conserving DMA zone[s] until all Normal memory is</span>", 
"<span class=\"comment\"> * exhausted, but results in overflowing to remote node while memory</span>", 
"<span class=\"comment\"> * may still exist in local DMA zone.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#node_order\">node_order</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>];", 
"", 
"static void <a class=\"id\" href=\"#build_zonelists_in_zone_order\">build_zonelists_in_zone_order</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, int <a class=\"id\" href=\"#nr_nodes\">nr_nodes</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zone_type\">zone_type</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* needs to be signed */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a> = &amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zonelists\">node_zonelists</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#zone_type\">zone_type</a> = <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a> - 1; <a class=\"id\" href=\"#zone_type\">zone_type</a> >= 0; <a class=\"id\" href=\"#zone_type\">zone_type</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#nr_nodes\">nr_nodes</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#node_order\">node_order</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#z\">z</a> = &amp;<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>)-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#zone_type\">zone_type</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#z\">z</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zoneref_set_zone\">zoneref_set_zone</a>(<a class=\"id\" href=\"#z\">z</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#pos\">pos</a>++]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_highest_zone\">check_highest_zone</a>(<a class=\"id\" href=\"#zone_type\">zone_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#pos\">pos</a>].<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#pos\">pos</a>].<a class=\"id\" href=\"#zone_idx\">zone_idx</a> = 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#default_zonelist_order\">default_zonelist_order</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#zone_type\">zone_type</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#low_kmem_size\">low_kmem_size</a>,<a class=\"id\" href=\"#total_size\">total_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#average_size\">average_size</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\">         * ZONE_DMA and ZONE_DMA32 can be very small area in the system.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If they are really small and used heavily, the system can fall</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * into OOM very easily.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This function detect ZONE_DMA/DMA32 size and configures zone order.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Is there ZONE_NORMAL ? (ex. ppc has only DMA zone..) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#low_kmem_size\">low_kmem_size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_size\">total_size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#zone_type\">zone_type</a> = 0; <a class=\"id\" href=\"#zone_type\">zone_type</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#zone_type\">zone_type</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#z\">z</a> = &amp;<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#zone_type\">zone_type</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#z\">z</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_type\">zone_type</a> &lt; <a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#low_kmem_size\">low_kmem_size</a> += <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_size\">total_size</a> += <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#zone_type\">zone_type</a> == <a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If any node has only lowmem, then node order</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is preferred to allow kernel allocations</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * locally; otherwise, they can easily infringe</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * on other nodes when there is an abundance of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * lowmem available to allocate from.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZONELIST_ORDER_NODE\">ZONELIST_ORDER_NODE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#low_kmem_size\">low_kmem_size</a> ||  <span class=\"comment\">/* there are no DMA area. */</span>", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#low_kmem_size\">low_kmem_size</a> &gt; <a class=\"id\" href=\"#total_size\">total_size</a>/2) <span class=\"comment\">/* DMA/DMA32 is big. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZONELIST_ORDER_NODE\">ZONELIST_ORDER_NODE</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * look into each node's config.</span>", 
"<span class=\"comment\">  <span class=\"ts\"/> * If there is a node whose DMA/DMA32 memory is very big area on</span>", 
"<span class=\"comment\"> <span class=\"ts\"/> * local memory, NODE_ORDER may be suitable.</span>", 
"<span class=\"comment\">         */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#average_size\">average_size</a> = <a class=\"id\" href=\"#total_size\">total_size</a> /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#nodes_weight\">nodes_weight</a>(<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]) + 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#low_kmem_size\">low_kmem_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_size\">total_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#zone_type\">zone_type</a> = 0; <a class=\"id\" href=\"#zone_type\">zone_type</a> &lt; <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>; <a class=\"id\" href=\"#zone_type\">zone_type</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#z\">z</a> = &amp;<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#zone_type\">zone_type</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#populated_zone\">populated_zone</a>(<a class=\"id\" href=\"#z\">z</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_type\">zone_type</a> &lt; <a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#low_kmem_size\">low_kmem_size</a> += <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_size\">total_size</a> += <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#low_kmem_size\">low_kmem_size</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#total_size\">total_size</a> &gt; <a class=\"id\" href=\"#average_size\">average_size</a> && <span class=\"comment\">/* ignore small node */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#low_kmem_size\">low_kmem_size</a> &gt; <a class=\"id\" href=\"#total_size\">total_size</a> * 70/100)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZONELIST_ORDER_NODE\">ZONELIST_ORDER_NODE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ZONELIST_ORDER_ZONE\">ZONELIST_ORDER_ZONE</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_zonelist_order\">set_zonelist_order</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#user_zonelist_order\">user_zonelist_order</a> == <a class=\"id\" href=\"#ZONELIST_ORDER_DEFAULT\">ZONELIST_ORDER_DEFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_zonelist_order\">current_zonelist_order</a> = <a class=\"id\" href=\"#default_zonelist_order\">default_zonelist_order</a>();", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_zonelist_order\">current_zonelist_order</a> = <a class=\"id\" href=\"#user_zonelist_order\">user_zonelist_order</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#build_zonelists\">build_zonelists</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#load\">load</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#used_mask\">used_mask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#local_node\">local_node</a>, <a class=\"id\" href=\"#prev_node\">prev_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#current_zonelist_order\">current_zonelist_order</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* initialize zonelists */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_ZONELISTS\">MAX_ZONELISTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zonelists\">node_zonelists</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[0].<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[0].<a class=\"id\" href=\"#zone_idx\">zone_idx</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NUMA-aware ordering of nodes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_node\">local_node</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> = <a class=\"id\" href=\"#nr_online_nodes\">nr_online_nodes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_node\">prev_node</a> = <a class=\"id\" href=\"#local_node\">local_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#used_mask\">used_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#node_order\">node_order</a>, 0, sizeof(<a class=\"id\" href=\"#node_order\">node_order</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = 0;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#find_next_best_node\">find_next_best_node</a>(<a class=\"id\" href=\"#local_node\">local_node</a>, &amp;<a class=\"id\" href=\"#used_mask\">used_mask</a>)) >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#distance\">distance</a> = <a class=\"id\" href=\"#node_distance\">node_distance</a>(<a class=\"id\" href=\"#local_node\">local_node</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If another node is sufficiently far away then it is better</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to reclaim pages in a zone before going off node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#distance\">distance</a> &gt; <a class=\"id\" href=\"#RECLAIM_DISTANCE\">RECLAIM_DISTANCE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone_reclaim_mode\">zone_reclaim_mode</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We don't want to pressure a particular node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So adding penalty to the first node in same</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * distance group to make it round-robin.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#distance\">distance</a> != <a class=\"id\" href=\"#node_distance\">node_distance</a>(<a class=\"id\" href=\"#local_node\">local_node</a>, <a class=\"id\" href=\"#prev_node\">prev_node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_load\">node_load</a>[<a class=\"id\" href=\"#node\">node</a>] = <a class=\"id\" href=\"#load\">load</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_node\">prev_node</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> == <a class=\"id\" href=\"#ZONELIST_ORDER_NODE\">ZONELIST_ORDER_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#build_zonelists_in_node_order\">build_zonelists_in_node_order</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_order\">node_order</a>[<a class=\"id\" href=\"#j\">j</a>++] = <a class=\"id\" href=\"#node\">node</a>;<span class=\"ts\"/><span class=\"comment\">/* remember order */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> == <a class=\"id\" href=\"#ZONELIST_ORDER_ZONE\">ZONELIST_ORDER_ZONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* calculate node order -- i.e., DMA last! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#build_zonelists_in_zone_order\">build_zonelists_in_zone_order</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#j\">j</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#build_thisnode_zonelists\">build_thisnode_zonelists</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Construct the zonelist performance cache - see further mmzone.h */</span>", 
"static void <a class=\"id\" href=\"#build_zonelist_cache\">build_zonelist_cache</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist_cache\">zonelist_cache</a> *<a class=\"id\" href=\"#zlc\">zlc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a> = &amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zonelists\">node_zonelists</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#zlcache_ptr\">zlcache_ptr</a> = <a class=\"id\" href=\"#zlc\">zlc</a> = &amp;<a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#zlcache\">zlcache</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#zlc\">zlc</a>-><a class=\"id\" href=\"#fullzones\">fullzones</a>, <a class=\"id\" href=\"#MAX_ZONES_PER_ZONELIST\">MAX_ZONES_PER_ZONELIST</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#z\">z</a> = <a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>; <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#zone\">zone</a>; <a class=\"id\" href=\"#z\">z</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zlc\">zlc</a>-><a class=\"id\" href=\"#z_to_n\">z_to_n</a>[<a class=\"id\" href=\"#z\">z</a> - <a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>] = <a class=\"id\" href=\"#zonelist_node_idx\">zonelist_node_idx</a>(<a class=\"id\" href=\"#z\">z</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_MEMORYLESS_NODES\">CONFIG_HAVE_MEMORYLESS_NODES</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return node id of node used for \"local\" allocations.</span>", 
"<span class=\"comment\"> * I.e., first node id of first zone in arg node's generic zonelist.</span>", 
"<span class=\"comment\"> * Used for initializing percpu 'numa_mem', which is used primarily</span>", 
"<span class=\"comment\"> * for kernel allocations, so use GFP_KERNEL flags to locate zonelist.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#local_memory_node\">local_memory_node</a>(int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#first_zones_zonelist\">first_zones_zonelist</a>(<a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#node\">node</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"static void <a class=\"id\" href=\"#set_zonelist_order\">set_zonelist_order</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_zonelist_order\">current_zonelist_order</a> = <a class=\"id\" href=\"#ZONELIST_ORDER_ZONE\">ZONELIST_ORDER_ZONE</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#build_zonelists\">build_zonelists</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#local_node\">local_node</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_node\">local_node</a> = <a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_id\">node_id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a> = &amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zonelists\">node_zonelists</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#build_zonelists_node\">build_zonelists_node</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, 0, <a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a> - 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now we build the zonelist so that it contains the zones</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of all the other nodes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't want to pressure a particular node, so when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * building the zones for node N, we make sure that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * zones coming right after the local ones are those from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * node N+1 (modulo N)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#local_node\">local_node</a> + 1; <a class=\"id\" href=\"#node\">node</a> &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>; <a class=\"id\" href=\"#node\">node</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#build_zonelists_node\">build_zonelists_node</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>), <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#j\">j</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a> - 1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#node\">node</a> = 0; <a class=\"id\" href=\"#node\">node</a> &lt; <a class=\"id\" href=\"#local_node\">local_node</a>; <a class=\"id\" href=\"#node\">node</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#build_zonelists_node\">build_zonelists_node</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>), <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#j\">j</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a> - 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#zone_idx\">zone_idx</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/* non-NUMA variant of zonelist performance cache - just NULL zlcache_ptr */</span>", 
"static void <a class=\"id\" href=\"#build_zonelist_cache\">build_zonelist_cache</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_zonelists\">node_zonelists</a>[0].<a class=\"id\" href=\"#zlcache_ptr\">zlcache_ptr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Boot pageset table. One per cpu which is going to be used for all</span>", 
"<span class=\"comment\"> * zones and all nodes. The parameters will be set in such a way</span>", 
"<span class=\"comment\"> * that an item put on a list will immediately be handed over to</span>", 
"<span class=\"comment\"> * the buddy list. This is safe since pageset manipulation is done</span>", 
"<span class=\"comment\"> * with interrupts disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The boot_pagesets must be kept even after bootup is complete for</span>", 
"<span class=\"comment\"> * unused processors and/or zones. They do play a role for bootstrapping</span>", 
"<span class=\"comment\"> * hotplugged processors.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * zoneinfo_show() and maybe other functions do</span>", 
"<span class=\"comment\"> * not check if the processor is online before following the pageset pointer.</span>", 
"<span class=\"comment\"> * Other parts of the kernel may not check if the zone is available.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#setup_pageset\">setup_pageset</a>(struct <a class=\"id\" href=\"#per_cpu_pageset\">per_cpu_pageset</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#batch\">batch</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#per_cpu_pageset\">per_cpu_pageset</a>, <a class=\"id\" href=\"#boot_pageset\">boot_pageset</a>);", 
"static void <a class=\"id\" href=\"#setup_zone_pageset\">setup_zone_pageset</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Global mutex to protect against size modification of zonelists</span>", 
"<span class=\"comment\"> * as well as to serialize pageset setup for the new populated zone.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#zonelists_mutex\">zonelists_mutex</a>);", 
"", 
"<span class=\"comment\">/* return values int ....just for stop_machine() */</span>", 
"static <a class=\"id\" href=\"#__init_refok\">__init_refok</a> int <a class=\"id\" href=\"#__build_all_zonelists\">__build_all_zonelists</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#node_load\">node_load</a>, 0, sizeof(<a class=\"id\" href=\"#node_load\">node_load</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#build_zonelists\">build_zonelists</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#build_zonelist_cache\">build_zonelist_cache</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup real pagesets for the new zone */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_zone_pageset\">setup_zone_pageset</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize the boot_pagesets that are going to be used</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for bootstrapping processors. The real pagesets for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * each zone will be allocated later when the per cpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocator is available.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * boot_pagesets are used also for bootstrapping offline</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpus if the system is already booted because the pagesets</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are needed to initialize allocators on a specific cpu too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * F.e. the percpu allocator needs the page allocator which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * needs the percpu allocator in order to allocate its pagesets</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (a chicken-egg dilemma).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_pageset\">setup_pageset</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#boot_pageset\">boot_pageset</a>, <a class=\"id\" href=\"#cpu\">cpu</a>), 0);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_MEMORYLESS_NODES\">CONFIG_HAVE_MEMORYLESS_NODES</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We now know the \"local memory node\" for each node--</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * i.e., the node of the first zone in the generic zonelist.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Set up numa_mem percpu variable for on-line cpus.  During</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * boot, only the boot cpu should be on-line;  we'll init the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * secondary cpus' numa_mem as they come on-line.  During</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * node/memory hotplug, we'll fixup all on-line cpus.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_numa_mem\">set_cpu_numa_mem</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#local_memory_node\">local_memory_node</a>(<a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with zonelists_mutex held always</span>", 
"<span class=\"comment\"> * unless system_state == SYSTEM_BOOTING.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#build_all_zonelists\">build_all_zonelists</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_zonelist_order\">set_zonelist_order</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__build_all_zonelists\">__build_all_zonelists</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mminit_verify_zonelist\">mminit_verify_zonelist</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuset_init_current_mems_allowed\">cpuset_init_current_mems_allowed</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we have to stop all cpus to guarantee there is no user</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   of zonelist */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_machine\">stop_machine</a>(<a class=\"id\" href=\"#__build_all_zonelists\">__build_all_zonelists</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cpuset refresh routine should be here */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_total_pages\">vm_total_pages</a> = <a class=\"id\" href=\"#nr_free_pagecache_pages\">nr_free_pagecache_pages</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable grouping by mobility if the number of pages in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * system is too low to allow the mechanism to work. It would be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * more accurate, but expensive to check per-zone. This check is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * made on memory-hotadd so a system can start with mobility</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disabled and enable it later</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_total_pages\">vm_total_pages</a> &lt; (<a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a> * <a class=\"id\" href=\"#MIGRATE_TYPES\">MIGRATE_TYPES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_group_by_mobility_disabled\">page_group_by_mobility_disabled</a> = 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_group_by_mobility_disabled\">page_group_by_mobility_disabled</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Built %i zonelists in %s order, mobility grouping %s.  \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Total pages: %ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_online_nodes\">nr_online_nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist_order_name\">zonelist_order_name</a>[<a class=\"id\" href=\"#current_zonelist_order\">current_zonelist_order</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_group_by_mobility_disabled\">page_group_by_mobility_disabled</a> ? \"off\" : \"on\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_total_pages\">vm_total_pages</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Policy zone: %s\\n\", <a class=\"id\" href=\"#zone_names\">zone_names</a>[<a class=\"id\" href=\"#policy_zone\">policy_zone</a>]);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper functions to size the waitqueue hash table.</span>", 
"<span class=\"comment\"> * Essentially these want to choose hash table sizes sufficiently</span>", 
"<span class=\"comment\"> * large so that collisions trying to wait on pages are rare.</span>", 
"<span class=\"comment\"> * But in fact, the number of active page waitqueues on typical</span>", 
"<span class=\"comment\"> * systems is ridiculously low, less than 200. So this is even</span>", 
"<span class=\"comment\"> * conservative, even though it seems large.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The constant PAGES_PER_WAITQUEUE specifies the ratio of pages to</span>", 
"<span class=\"comment\"> * waitqueues, i.e. the size of the waitq table given the number of pages.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGES_PER_WAITQUEUE\">PAGES_PER_WAITQUEUE</a><span class=\"ts\"/>256", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#wait_table_hash_nr_entries\">wait_table_hash_nr_entries</a>(unsigned long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> /= <a class=\"id\" href=\"#PAGES_PER_WAITQUEUE\">PAGES_PER_WAITQUEUE</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> <<= 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Once we have dozens or even hundreds of threads sleeping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on IO we've got bigger problems than wait queue collision.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Limit the size of the wait table to a reasonable size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#size\">size</a>, 4096UL);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#size\">size</a>, 4UL);", 
"}", 
"#else", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A zone's size might be changed by hot-add, so it is not possible to determine</span>", 
"<span class=\"comment\"> * a suitable size for its wait_table.  So we use the maximum size now.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The max wait table size = 4096 x sizeof(wait_queue_head_t).   ie:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    i386 (preemption config)    : 4096 x 16 = 64Kbyte.</span>", 
"<span class=\"comment\"> *    ia64, x86-64 (no preemption): 4096 x 20 = 80Kbyte.</span>", 
"<span class=\"comment\"> *    ia64, x86-64 (preemption)   : 4096 x 24 = 96Kbyte.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The maximum entries are prepared when a zone's memory is (512K + 256) pages</span>", 
"<span class=\"comment\"> * or more by the traditional way. (See above).  It equals:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    i386, x86-64, powerpc(4K page size) : =  ( 2G + 1M)byte.</span>", 
"<span class=\"comment\"> *    ia64(16K page size)                 : =  ( 8G + 4M)byte.</span>", 
"<span class=\"comment\"> *    powerpc (64K page size)             : =  (32G +16M)byte.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#wait_table_hash_nr_entries\">wait_table_hash_nr_entries</a>(unsigned long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>return 4096UL;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is an integer logarithm so that shifts can be used later</span>", 
"<span class=\"comment\"> * to extract the more random high bits from the multiplicative</span>", 
"<span class=\"comment\"> * hash function before the remainder is taken.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#wait_table_bits\">wait_table_bits</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ffz\">ffz</a>(~<a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LONG_ALIGN\">LONG_ALIGN</a>(<a class=\"id\" href=\"#x\">x</a>) (((<a class=\"id\" href=\"#x\">x</a>)+(sizeof(long))-1)&amp;~((sizeof(long))-1))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mark a number of pageblocks as MIGRATE_RESERVE. The number</span>", 
"<span class=\"comment\"> * of blocks reserved is based on min_wmark_pages(zone). The memory within</span>", 
"<span class=\"comment\"> * the reserve will tend to store contiguous free pages. Setting min_free_kbytes</span>", 
"<span class=\"comment\"> * higher will lead to a bigger reserve which will get freed as contiguous</span>", 
"<span class=\"comment\"> * blocks as reclaim kicks in</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#setup_zone_migrate_reserve\">setup_zone_migrate_reserve</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#block_migratetype\">block_migratetype</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#reserve\">reserve</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the start pfn, end pfn and the number of blocks to reserve */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reserve\">reserve</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#min_wmark_pages\">min_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>), <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>) >>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pageblock_order\">pageblock_order</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reserve blocks are generally in place to help high-order atomic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocations that are short-lived. A min_free_kbytes value that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * would result in more than 2 reserve blocks for atomic allocations</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is assumed to be in place to help anti-fragmentation for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * future allocation of hugepages at runtime.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reserve\">reserve</a> = <a class=\"id\" href=\"#min\">min</a>(2, <a class=\"id\" href=\"#reserve\">reserve</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Watch out for overlapping nodes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Blocks with reserved pages will never free, skip them. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_migratetype\">block_migratetype</a> = <a class=\"id\" href=\"#get_pageblock_migratetype\">get_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If this block is reserved, account for it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reserve\">reserve</a> &gt; 0 && <a class=\"id\" href=\"#block_migratetype\">block_migratetype</a> == <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve\">reserve</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Suitable for reserving if this block is movable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reserve\">reserve</a> &gt; 0 && <a class=\"id\" href=\"#block_migratetype\">block_migratetype</a> == <a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pageblock_migratetype\">set_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#move_freepages_block\">move_freepages_block</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve\">reserve</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the reserve is met and this is a previous reserved block,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * take it back</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_migratetype\">block_migratetype</a> == <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pageblock_migratetype\">set_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#move_freepages_block\">move_freepages_block</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initially all pages are reserved - free ones are freed</span>", 
"<span class=\"comment\"> * up by free_all_bootmem() once the early boot process is</span>", 
"<span class=\"comment\"> * done. Non-atomic initialization, single-pass.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#memmap_init_zone\">memmap_init_zone</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#nid\">nid</a>, unsigned long <a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, enum <a class=\"id\" href=\"#memmap_context\">memmap_context</a> <a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#highest_memmap_pfn\">highest_memmap_pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#highest_memmap_pfn\">highest_memmap_pfn</a> = <a class=\"id\" href=\"#end_pfn\">end_pfn</a> - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#z\">z</a> = &amp;<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#zone\">zone</a>];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There can be holes in boot-time mem_map[]s</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handed to this function.  They do not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * exist on hotplugged memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#context\">context</a> == <a class=\"id\" href=\"#MEMMAP_EARLY\">MEMMAP_EARLY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#early_pfn_valid\">early_pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#early_pfn_in_nid\">early_pfn_in_nid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#nid\">nid</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
];
xr_frag_insert('l/69/68b6f975a9e4f9134782d075cc5f6bb1012585.xr', __xr_tmp);
