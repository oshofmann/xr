var __xr_tmp = [
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#clients\">clients</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Walk the adapters that are already present */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_for_each_dev\">bus_for_each_dev</a>(&amp;<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#driver\">driver</a>, <a class=\"id\" href=\"#__process_new_driver\">__process_new_driver</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_register_driver\">i2c_register_driver</a>);", 
"", 
"static int <a class=\"id\" href=\"#__process_removed_driver\">__process_removed_driver</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> != &amp;<a class=\"id\" href=\"#i2c_adapter_type\">i2c_adapter_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_do_del_adapter\">i2c_do_del_adapter</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_del_driver - unregister I2C driver</span>", 
"<span class=\"comment\"> * @driver: the driver being unregistered</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#i2c_del_driver\">i2c_del_driver</a>(struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_for_each_dev\">bus_for_each_dev</a>(&amp;<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#driver\">driver</a>, <a class=\"id\" href=\"#__process_removed_driver\">__process_removed_driver</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#core_lock\">core_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver_unregister\">driver_unregister</a>(&amp;<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"i2c-core: driver [%s] unregistered\\n\", <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_del_driver\">i2c_del_driver</a>);", 
"", 
"<span class=\"comment\">/* ------------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_use_client - increments the reference count of the i2c client structure</span>", 
"<span class=\"comment\"> * @client: the client being referenced</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each live reference to a client should be refcounted. The driver model does</span>", 
"<span class=\"comment\"> * that automatically as part of driver binding, so that most drivers don't</span>", 
"<span class=\"comment\"> * need to do this explicitly: they hold a reference until they're unbound</span>", 
"<span class=\"comment\"> * from the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A pointer to the client with the incremented reference counter is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#i2c_use_client\">i2c_use_client</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#client\">client</a> && <a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#client\">client</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_use_client\">i2c_use_client</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_release_client - release a use of the i2c client structure</span>", 
"<span class=\"comment\"> * @client: the client being no longer referenced</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called when a user of a client is finished with it.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#i2c_release_client\">i2c_release_client</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#client\">client</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_release_client\">i2c_release_client</a>);", 
"", 
"struct <a class=\"id\" href=\"#i2c_cmd_arg\">i2c_cmd_arg</a> {", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#arg\">arg</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#i2c_cmd\">i2c_cmd</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#_arg\">_arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a><span class=\"ts\"/>*<a class=\"id\" href=\"#client\">client</a> = <a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_cmd_arg\">i2c_cmd_arg</a><span class=\"ts\"/>*<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#_arg\">_arg</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#client\">client</a> && <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#driver\">driver</a> && <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#command\">command</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#command\">command</a>(<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#i2c_clients_command\">i2c_clients_command</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_cmd_arg\">i2c_cmd_arg</a><span class=\"ts\"/><a class=\"id\" href=\"#cmd_arg\">cmd_arg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd_arg\">cmd_arg</a>.<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd_arg\">cmd_arg</a>.<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_for_each_child\">device_for_each_child</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#cmd_arg\">cmd_arg</a>, <a class=\"id\" href=\"#i2c_cmd\">i2c_cmd</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_clients_command\">i2c_clients_command</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#i2c_init\">i2c_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#bus_register\">bus_register</a>(&amp;<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_I2C_COMPAT\">CONFIG_I2C_COMPAT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i2c_adapter_compat_class\">i2c_adapter_compat_class</a> = <a class=\"id\" href=\"#class_compat_register\">class_compat_register</a>(\"i2c-adapter\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#i2c_adapter_compat_class\">i2c_adapter_compat_class</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bus_err\">bus_err</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#i2c_add_driver\">i2c_add_driver</a>(&amp;<a class=\"id\" href=\"#dummy_driver\">dummy_driver</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#class_err\">class_err</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#class_err\">class_err</a>:", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_I2C_COMPAT\">CONFIG_I2C_COMPAT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_compat_unregister\">class_compat_unregister</a>(<a class=\"id\" href=\"#i2c_adapter_compat_class\">i2c_adapter_compat_class</a>);", 
"<a class=\"id\" href=\"#bus_err\">bus_err</a>:", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_unregister\">bus_unregister</a>(&amp;<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#i2c_exit\">i2c_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i2c_del_driver\">i2c_del_driver</a>(&amp;<a class=\"id\" href=\"#dummy_driver\">dummy_driver</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_I2C_COMPAT\">CONFIG_I2C_COMPAT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_compat_unregister\">class_compat_unregister</a>(<a class=\"id\" href=\"#i2c_adapter_compat_class\">i2c_adapter_compat_class</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_unregister\">bus_unregister</a>(&amp;<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>);", 
"}", 
"", 
"<span class=\"comment\">/* We must initialize early, because some subsystems register i2c drivers</span>", 
"<span class=\"comment\"> * in subsys_initcall() code, but are linked (and initialized) before i2c.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#postcore_initcall\">postcore_initcall</a>(<a class=\"id\" href=\"#i2c_init\">i2c_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#i2c_exit\">i2c_exit</a>);", 
"", 
"<span class=\"comment\">/* ----------------------------------------------------</span>", 
"<span class=\"comment\"> * the functional interface to the i2c busses.</span>", 
"<span class=\"comment\"> * ----------------------------------------------------</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_transfer - execute a single or combined I2C message</span>", 
"<span class=\"comment\"> * @adap: Handle to I2C bus</span>", 
"<span class=\"comment\"> * @msgs: One or more messages to execute before STOP is issued to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>terminate the operation; each message begins with a START.</span>", 
"<span class=\"comment\"> * @num: Number of messages to be executed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns negative errno, else the number of messages executed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that there is no requirement that each message be sent to</span>", 
"<span class=\"comment\"> * the same slave address, although that is the most common model.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#i2c_transfer\">i2c_transfer</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>, struct <a class=\"id\" href=\"#i2c_msg\">i2c_msg</a> *<a class=\"id\" href=\"#msgs\">msgs</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#orig_jiffies\">orig_jiffies</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#try\">try</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* REVISIT the fault reporting model here is weak:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - When we get an error after receiving N bytes from a slave,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    there is no way to report \"N\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - When we get a NAK after transmitting N bytes to a slave,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    there is no way to report \"N\" ... or to let the master</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    continue executing the rest of this combined message, if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    that's the appropriate response.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - When for example \"num\" is two and we successfully complete</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    the first message but get an error part way through the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    second, it's unclear whether that should be reported as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    one (discarding status on the second message) or errno</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    (discarding status on the first one).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#algo\">algo</a>-><a class=\"id\" href=\"#master_xfer\">master_xfer</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#ret\">ret</a> = 0; <a class=\"id\" href=\"#ret\">ret</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#ret\">ret</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"master_xfer[%d] %c, addr=0x%02x, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"len=%d%s\\n\", <a class=\"id\" href=\"#ret\">ret</a>, (<a class=\"id\" href=\"#msgs\">msgs</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_M_RD\">I2C_M_RD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>? 'R' : 'W', <a class=\"id\" href=\"#msgs\">msgs</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#msgs\">msgs</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#msgs\">msgs</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_M_RECV_LEN\">I2C_M_RECV_LEN</a>) ? \"+\" : \"\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_atomic\">in_atomic</a>() || <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#i2c_trylock_adapter\">i2c_trylock_adapter</a>(<a class=\"id\" href=\"#adap\">adap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* I2C activity is ongoing. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_lock_adapter\">i2c_lock_adapter</a>(<a class=\"id\" href=\"#adap\">adap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Retry automatically on arbitration loss */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#orig_jiffies\">orig_jiffies</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#try\">try</a> = 0; <a class=\"id\" href=\"#try\">try</a> <= <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#retries\">retries</a>; <a class=\"id\" href=\"#try\">try</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#algo\">algo</a>-><a class=\"id\" href=\"#master_xfer\">master_xfer</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#msgs\">msgs</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#orig_jiffies\">orig_jiffies</a> + <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#timeout\">timeout</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i2c_unlock_adapter\">i2c_unlock_adapter</a>(<a class=\"id\" href=\"#adap\">adap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"I2C level transfers not supported\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_transfer\">i2c_transfer</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_master_send - issue a single I2C message in master transmit mode</span>", 
"<span class=\"comment\"> * @client: Handle to slave device</span>", 
"<span class=\"comment\"> * @buf: Data that will be written to the slave</span>", 
"<span class=\"comment\"> * @count: How many bytes to write, must be less than 64k since msg.len is u16</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns negative errno, or else the number of bytes written.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#i2c_master_send\">i2c_master_send</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a> = <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_msg\">i2c_msg</a> <a class=\"id\" href=\"#msg\">msg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_M_TEN\">I2C_M_TEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#buf\">buf</a> = (char *)<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#i2c_transfer\">i2c_transfer</a>(<a class=\"id\" href=\"#adap\">adap</a>, &amp;<a class=\"id\" href=\"#msg\">msg</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If everything went ok (i.e. 1 msg transmitted), return #bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   transmitted, else error code. */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ret\">ret</a> == 1) ? <a class=\"id\" href=\"#count\">count</a> : <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_master_send\">i2c_master_send</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_master_recv - issue a single I2C message in master receive mode</span>", 
"<span class=\"comment\"> * @client: Handle to slave device</span>", 
"<span class=\"comment\"> * @buf: Where to store data read from slave</span>", 
"<span class=\"comment\"> * @count: How many bytes to read, must be less than 64k since msg.len is u16</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns negative errno, or else the number of bytes read.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#i2c_master_recv\">i2c_master_recv</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a> = <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_msg\">i2c_msg</a> <a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#client\">client</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#I2C_M_TEN\">I2C_M_TEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#I2C_M_RD\">I2C_M_RD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#i2c_transfer\">i2c_transfer</a>(<a class=\"id\" href=\"#adap\">adap</a>, &amp;<a class=\"id\" href=\"#msg\">msg</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If everything went ok (i.e. 1 msg transmitted), return #bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   transmitted, else error code. */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ret\">ret</a> == 1) ? <a class=\"id\" href=\"#count\">count</a> : <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#i2c_master_recv\">i2c_master_recv</a>);", 
"", 
"<span class=\"comment\">/* ----------------------------------------------------</span>", 
"<span class=\"comment\"> * the i2c address scanning function</span>", 
"<span class=\"comment\"> * Will not work for 10-bit addresses!</span>", 
"<span class=\"comment\"> * ----------------------------------------------------</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Legacy default probe function, mostly relevant for SMBus. The default</span>", 
"<span class=\"comment\"> * probe method is a quick write, but it is known to corrupt the 24RF08</span>", 
"<span class=\"comment\"> * EEPROMs due to a state machine bug, and could also irreversibly</span>", 
"<span class=\"comment\"> * write-protect some EEPROMs, so for address ranges 0x30-0x37 and 0x50-0x5f,</span>", 
"<span class=\"comment\"> * we use a short byte read instead. Also, some bus drivers don't implement</span>", 
"<span class=\"comment\"> * quick write, so we fallback to a byte read in that case too.</span>", 
"<span class=\"comment\"> * On x86, there is another special case for FSC hardware monitoring chips,</span>", 
"<span class=\"comment\"> * which want regular byte reads (address 0x73.) Fortunately, these are the</span>", 
"<span class=\"comment\"> * only known chips using this I2C address on PC hardware.</span>", 
"<span class=\"comment\"> * Returns 1 if probe succeeded, 0 if not.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#i2c_default_probe\">i2c_default_probe</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>, unsigned short <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> <a class=\"id\" href=\"#dummy\">dummy</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86\">CONFIG_X86</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> == 0x73 && (<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#class\">class</a> &amp; <a class=\"id\" href=\"#I2C_CLASS_HWMON\">I2C_CLASS_HWMON</a>)", 
"<span class=\"ts\"/> && <a class=\"id\" href=\"#i2c_check_functionality\">i2c_check_functionality</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_BYTE_DATA\">I2C_FUNC_SMBUS_READ_BYTE_DATA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0, <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#I2C_SMBUS_BYTE_DATA\">I2C_SMBUS_BYTE_DATA</a>, &amp;<a class=\"id\" href=\"#dummy\">dummy</a>);", 
"<span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (!((<a class=\"id\" href=\"#addr\">addr</a> &amp; ~0x07) == 0x30 || (<a class=\"id\" href=\"#addr\">addr</a> &amp; ~0x0f) == 0x50)", 
"<span class=\"ts\"/> && <a class=\"id\" href=\"#i2c_check_functionality\">i2c_check_functionality</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#I2C_FUNC_SMBUS_QUICK\">I2C_FUNC_SMBUS_QUICK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0, <a class=\"id\" href=\"#I2C_SMBUS_WRITE\">I2C_SMBUS_WRITE</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#I2C_SMBUS_QUICK\">I2C_SMBUS_QUICK</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#i2c_check_functionality\">i2c_check_functionality</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_BYTE\">I2C_FUNC_SMBUS_READ_BYTE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0, <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#I2C_SMBUS_BYTE\">I2C_SMBUS_BYTE</a>, &amp;<a class=\"id\" href=\"#dummy\">dummy</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"No suitable probing method supported\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a> >= 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i2c_detect_address\">i2c_detect_address</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#temp_client\">temp_client</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a> = <a class=\"id\" href=\"#temp_client\">temp_client</a>-><a class=\"id\" href=\"#adapter\">adapter</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#temp_client\">temp_client</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure the address is valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#i2c_check_addr_validity\">i2c_check_addr_validity</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Invalid probe address 0x%02x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
];
xr_frag_insert('l/69/7cba8afffeb1670ae42acb9f5220e6a98f1791.xr', __xr_tmp);
