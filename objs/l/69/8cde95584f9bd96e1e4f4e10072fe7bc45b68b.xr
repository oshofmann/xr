var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_IPI_H\">_ASM_X86_IPI_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_IPI_H\">_ASM_X86_IPI_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright 2004 James Cleverdon, IBM.</span>", 
"<span class=\"comment\"> * Subject to the GNU Public License, v.2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Generic APIC InterProcessor Interrupt code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Moved to include file by James Cleverdon from</span>", 
"<span class=\"comment\"> * arch/x86-64/kernel/smp.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyrights from kernel/smp.c:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (c) 1995 Alan Cox, Building #3 &lt;alan@redhat.com&gt;</span>", 
"<span class=\"comment\"> * (c) 1998-99, 2000 Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> * (c) 2002,2003 Andi Kleen, SuSE Labs.</span>", 
"<span class=\"comment\"> * Subject to the GNU Public License, v.2</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#hw_irq\">hw_irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the following functions deal with sending IPIs between CPUs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use 'broadcast', CPU-&gt;CPU IPIs and self-IPIs too.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#__prepare_ICR\">__prepare_ICR</a>(unsigned int <a class=\"id\" href=\"#shortcut\">shortcut</a>, int <a class=\"id\" href=\"#vector\">vector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#dest\">dest</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#icr\">icr</a> = <a class=\"id\" href=\"#shortcut\">shortcut</a> | <a class=\"id\" href=\"#dest\">dest</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#vector\">vector</a>) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icr\">icr</a> |= <a class=\"id\" href=\"#APIC_DM_FIXED\">APIC_DM_FIXED</a> | <a class=\"id\" href=\"#vector\">vector</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NMI_VECTOR\">NMI_VECTOR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icr\">icr</a> |= <a class=\"id\" href=\"#APIC_DM_NMI\">APIC_DM_NMI</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#icr\">icr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__prepare_ICR2\">__prepare_ICR2</a>(unsigned int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SET_APIC_DEST_FIELD\">SET_APIC_DEST_FIELD</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__xapic_wait_icr_idle\">__xapic_wait_icr_idle</a>(void)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#native_apic_mem_read\">native_apic_mem_read</a>(<a class=\"id\" href=\"#APIC_ICR\">APIC_ICR</a>) &amp; <a class=\"id\" href=\"#APIC_ICR_BUSY\">APIC_ICR_BUSY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__default_send_IPI_shortcut\">__default_send_IPI_shortcut</a>(unsigned int <a class=\"id\" href=\"#shortcut\">shortcut</a>, int <a class=\"id\" href=\"#vector\">vector</a>, unsigned int <a class=\"id\" href=\"#dest\">dest</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Subtle. In the case of the 'never do double writes' workaround</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we have to lock out interrupts to be safe.  As we don't care</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the value read we use an atomic rmw access to avoid costly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cli/sti.  Otherwise we use an even cheaper single atomic write</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the APIC.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cfg\">cfg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for idle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__xapic_wait_icr_idle\">__xapic_wait_icr_idle</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No need to touch the target chip field</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfg\">cfg</a> = <a class=\"id\" href=\"#__prepare_ICR\">__prepare_ICR</a>(<a class=\"id\" href=\"#shortcut\">shortcut</a>, <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#dest\">dest</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Send the IPI. The write to APIC_ICR fires this off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_apic_mem_write\">native_apic_mem_write</a>(<a class=\"id\" href=\"#APIC_ICR\">APIC_ICR</a>, <a class=\"id\" href=\"#cfg\">cfg</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is used to send an IPI with no shorthand notation (the destination is</span>", 
"<span class=\"comment\"> * specified in bits 56 to 63 of the ICR).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
" <a class=\"id\" href=\"#__default_send_IPI_dest_field\">__default_send_IPI_dest_field</a>(unsigned int <a class=\"id\" href=\"#mask\">mask</a>, int <a class=\"id\" href=\"#vector\">vector</a>, unsigned int <a class=\"id\" href=\"#dest\">dest</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cfg\">cfg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for idle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#vector\">vector</a> == <a class=\"id\" href=\"#NMI_VECTOR\">NMI_VECTOR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#safe_apic_wait_icr_idle\">safe_apic_wait_icr_idle</a>();", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__xapic_wait_icr_idle\">__xapic_wait_icr_idle</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prepare target chip field</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfg\">cfg</a> = <a class=\"id\" href=\"#__prepare_ICR2\">__prepare_ICR2</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_apic_mem_write\">native_apic_mem_write</a>(<a class=\"id\" href=\"#APIC_ICR2\">APIC_ICR2</a>, <a class=\"id\" href=\"#cfg\">cfg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * program the ICR</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfg\">cfg</a> = <a class=\"id\" href=\"#__prepare_ICR\">__prepare_ICR</a>(0, <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#dest\">dest</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Send the IPI. The write to APIC_ICR fires this off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_apic_mem_write\">native_apic_mem_write</a>(<a class=\"id\" href=\"#APIC_ICR\">APIC_ICR</a>, <a class=\"id\" href=\"#cfg\">cfg</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#default_send_IPI_mask_sequence_phys\">default_send_IPI_mask_sequence_phys</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#vector\">vector</a>);", 
"extern void <a class=\"id\" href=\"#default_send_IPI_mask_allbutself_phys\">default_send_IPI_mask_allbutself_phys</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#vector\">vector</a>);", 
"extern void <a class=\"id\" href=\"#default_send_IPI_mask_sequence_logical\">default_send_IPI_mask_sequence_logical</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#vector\">vector</a>);", 
"extern void <a class=\"id\" href=\"#default_send_IPI_mask_allbutself_logical\">default_send_IPI_mask_allbutself_logical</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#vector\">vector</a>);", 
"", 
"<span class=\"comment\">/* Avoid include hell */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NMI_VECTOR\">NMI_VECTOR</a> 0x02", 
"", 
"extern int <a class=\"id\" href=\"#no_broadcast\">no_broadcast</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__default_local_send_IPI_allbutself\">__default_local_send_IPI_allbutself</a>(int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#no_broadcast\">no_broadcast</a> || <a class=\"id\" href=\"#vector\">vector</a> == <a class=\"id\" href=\"#NMI_VECTOR\">NMI_VECTOR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_mask_allbutself\">send_IPI_mask_allbutself</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, <a class=\"id\" href=\"#vector\">vector</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__default_send_IPI_shortcut\">__default_send_IPI_shortcut</a>(<a class=\"id\" href=\"#APIC_DEST_ALLBUT\">APIC_DEST_ALLBUT</a>, <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#dest_logical\">dest_logical</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__default_local_send_IPI_all\">__default_local_send_IPI_all</a>(int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#no_broadcast\">no_broadcast</a> || <a class=\"id\" href=\"#vector\">vector</a> == <a class=\"id\" href=\"#NMI_VECTOR\">NMI_VECTOR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_mask\">send_IPI_mask</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, <a class=\"id\" href=\"#vector\">vector</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__default_send_IPI_shortcut\">__default_send_IPI_shortcut</a>(<a class=\"id\" href=\"#APIC_DEST_ALLINC\">APIC_DEST_ALLINC</a>, <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#dest_logical\">dest_logical</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"extern void <a class=\"id\" href=\"#default_send_IPI_mask_logical\">default_send_IPI_mask_logical</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#vector\">vector</a>);", 
"extern void <a class=\"id\" href=\"#default_send_IPI_allbutself\">default_send_IPI_allbutself</a>(int <a class=\"id\" href=\"#vector\">vector</a>);", 
"extern void <a class=\"id\" href=\"#default_send_IPI_all\">default_send_IPI_all</a>(int <a class=\"id\" href=\"#vector\">vector</a>);", 
"extern void <a class=\"id\" href=\"#default_send_IPI_self\">default_send_IPI_self</a>(int <a class=\"id\" href=\"#vector\">vector</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_IPI_H */</span>", 
];
xr_frag_insert('l/69/8cde95584f9bd96e1e4f4e10072fe7bc45b68b.xr', __xr_tmp);
