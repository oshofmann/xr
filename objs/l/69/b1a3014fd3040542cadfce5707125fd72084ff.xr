var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#log2\">log2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pfn\">pfn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#sections\">sections</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCPU_SLOT_BASE_SHIFT\">PCPU_SLOT_BASE_SHIFT</a><span class=\"ts\"/><span class=\"ts\"/>5<span class=\"ts\"/><span class=\"comment\">/* 1-31 shares the same slot */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCPU_DFL_MAP_ALLOC\">PCPU_DFL_MAP_ALLOC</a><span class=\"ts\"/><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"comment\">/* start a map with 16 ents */</span>", 
"", 
"<span class=\"comment\">/* default addr &lt;-&gt; pcpu_ptr mapping, override in asm/percpu.h if necessary */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__addr_to_pcpu_ptr\">__addr_to_pcpu_ptr</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__addr_to_pcpu_ptr\">__addr_to_pcpu_ptr</a>(<a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(void <a class=\"id\" href=\"#__percpu\">__percpu</a> *)((unsigned long)(<a class=\"id\" href=\"#addr\">addr</a>) -<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (unsigned long)<a class=\"id\" href=\"#pcpu_base_addr\">pcpu_base_addr</a><span class=\"ts\"/>+<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (unsigned long)<a class=\"id\" href=\"#__per_cpu_start\">__per_cpu_start</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__pcpu_ptr_to_addr\">__pcpu_ptr_to_addr</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__pcpu_ptr_to_addr\">__pcpu_ptr_to_addr</a>(<a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(void <a class=\"id\" href=\"#__force\">__force</a> *)((unsigned long)(<a class=\"id\" href=\"#ptr\">ptr</a>) +<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long)<a class=\"id\" href=\"#pcpu_base_addr\">pcpu_base_addr</a> -<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long)<a class=\"id\" href=\"#__per_cpu_start\">__per_cpu_start</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* linked to pcpu_slot lists */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_size\">free_size</a>;<span class=\"ts\"/><span class=\"comment\">/* free bytes in the chunk */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#contig_hint\">contig_hint</a>;<span class=\"ts\"/><span class=\"comment\">/* max contiguous size hint */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#base_addr\">base_addr</a>;<span class=\"ts\"/><span class=\"comment\">/* base address of this chunk */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_used\">map_used</a>;<span class=\"ts\"/><span class=\"comment\">/* # of map entries used */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_alloc\">map_alloc</a>;<span class=\"ts\"/><span class=\"comment\">/* # of map entries allocated */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#map\">map</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allocation map */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* chunk data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#immutable\">immutable</a>;<span class=\"ts\"/><span class=\"comment\">/* no [de]population allowed */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#populated\">populated</a>[];<span class=\"ts\"/><span class=\"comment\">/* populated bitmap */</span>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static int <a class=\"id\" href=\"#pcpu_unit_size\">pcpu_unit_size</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static int <a class=\"id\" href=\"#pcpu_nr_units\">pcpu_nr_units</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static int <a class=\"id\" href=\"#pcpu_atom_size\">pcpu_atom_size</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static int <a class=\"id\" href=\"#pcpu_nr_slots\">pcpu_nr_slots</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#pcpu_chunk_struct_size\">pcpu_chunk_struct_size</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/* cpus with the lowest and highest unit numbers */</span>", 
"static unsigned int <a class=\"id\" href=\"#pcpu_first_unit_cpu\">pcpu_first_unit_cpu</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static unsigned int <a class=\"id\" href=\"#pcpu_last_unit_cpu\">pcpu_last_unit_cpu</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/* the address of the first chunk which starts with the kernel static area */</span>", 
"void *<a class=\"id\" href=\"#pcpu_base_addr\">pcpu_base_addr</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pcpu_base_addr\">pcpu_base_addr</a>);", 
"", 
"static const int *<a class=\"id\" href=\"#pcpu_unit_map\">pcpu_unit_map</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cpu -&gt; unit */</span>", 
"const unsigned long *<a class=\"id\" href=\"#pcpu_unit_offsets\">pcpu_unit_offsets</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;<span class=\"ts\"/><span class=\"comment\">/* cpu -&gt; unit offset */</span>", 
"", 
"<span class=\"comment\">/* group information, used for vm allocation */</span>", 
"static int <a class=\"id\" href=\"#pcpu_nr_groups\">pcpu_nr_groups</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static const unsigned long *<a class=\"id\" href=\"#pcpu_group_offsets\">pcpu_group_offsets</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static const <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#pcpu_group_sizes\">pcpu_group_sizes</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The first chunk which always exists.  Note that unlike other</span>", 
"<span class=\"comment\"> * chunks, this one can be allocated and mapped in several different</span>", 
"<span class=\"comment\"> * ways and thus often doesn't live in the vmalloc area.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#pcpu_first_chunk\">pcpu_first_chunk</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Optional reserved chunk.  This chunk reserves part of the first</span>", 
"<span class=\"comment\"> * chunk and serves it for reserved allocations.  The amount of</span>", 
"<span class=\"comment\"> * reserved offset is in pcpu_reserved_chunk_limit.  When reserved</span>", 
"<span class=\"comment\"> * area doesn't exist, the following variables contain NULL and 0</span>", 
"<span class=\"comment\"> * respectively.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#pcpu_reserved_chunk\">pcpu_reserved_chunk</a>;", 
"static int <a class=\"id\" href=\"#pcpu_reserved_chunk_limit\">pcpu_reserved_chunk_limit</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Synchronization rules.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are two locks - pcpu_alloc_mutex and pcpu_lock.  The former</span>", 
"<span class=\"comment\"> * protects allocation/reclaim paths, chunks, populated bitmap and</span>", 
"<span class=\"comment\"> * vmalloc mapping.  The latter is a spinlock and protects the index</span>", 
"<span class=\"comment\"> * data structures - chunk slots, chunks and area maps in chunks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * During allocation, pcpu_alloc_mutex is kept locked all the time and</span>", 
"<span class=\"comment\"> * pcpu_lock is grabbed and released as necessary.  All actual memory</span>", 
"<span class=\"comment\"> * allocations are done using GFP_KERNEL with pcpu_lock released.  In</span>", 
"<span class=\"comment\"> * general, percpu memory can't be allocated with irq off but</span>", 
"<span class=\"comment\"> * irqsave/restore are still used in alloc path so that it can be used</span>", 
"<span class=\"comment\"> * from early init path - sched_init() specifically.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free path accesses and alters only the index data structures, so it</span>", 
"<span class=\"comment\"> * can be safely called from atomic context.  When memory needs to be</span>", 
"<span class=\"comment\"> * returned to the system, free path schedules reclaim_work which</span>", 
"<span class=\"comment\"> * grabs both pcpu_alloc_mutex and pcpu_lock, unlinks chunks to be</span>", 
"<span class=\"comment\"> * reclaimed, release both locks and frees the chunks.  Note that it's</span>", 
"<span class=\"comment\"> * necessary to grab both locks to remove a chunk from circulation as</span>", 
"<span class=\"comment\"> * allocation path might be referencing the chunk with only</span>", 
"<span class=\"comment\"> * pcpu_alloc_mutex locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#pcpu_alloc_mutex\">pcpu_alloc_mutex</a>);<span class=\"ts\"/><span class=\"comment\">/* protects whole alloc and reclaim */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>);<span class=\"ts\"/><span class=\"comment\">/* protects index data structures */</span>", 
"", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pcpu_slot\">pcpu_slot</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>; <span class=\"comment\">/* chunk list slots */</span>", 
"", 
"<span class=\"comment\">/* reclaim work to release fully free chunks, scheduled from free path */</span>", 
"static void <a class=\"id\" href=\"#pcpu_reclaim\">pcpu_reclaim</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"static <a class=\"id\" href=\"#DECLARE_WORK\">DECLARE_WORK</a>(<a class=\"id\" href=\"#pcpu_reclaim_work\">pcpu_reclaim_work</a>, <a class=\"id\" href=\"#pcpu_reclaim\">pcpu_reclaim</a>);", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pcpu_addr_in_first_chunk\">pcpu_addr_in_first_chunk</a>(void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#first_start\">first_start</a> = <a class=\"id\" href=\"#pcpu_first_chunk\">pcpu_first_chunk</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#first_start\">first_start</a> && <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#first_start\">first_start</a> + <a class=\"id\" href=\"#pcpu_unit_size\">pcpu_unit_size</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pcpu_addr_in_reserved_chunk\">pcpu_addr_in_reserved_chunk</a>(void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#first_start\">first_start</a> = <a class=\"id\" href=\"#pcpu_first_chunk\">pcpu_first_chunk</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#first_start\">first_start</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#first_start\">first_start</a> + <a class=\"id\" href=\"#pcpu_reserved_chunk_limit\">pcpu_reserved_chunk_limit</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__pcpu_size_to_slot\">__pcpu_size_to_slot</a>(int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#highbit\">highbit</a> = <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#size\">size</a>);<span class=\"ts\"/><span class=\"comment\">/* size is in bytes */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#highbit\">highbit</a> - <a class=\"id\" href=\"#PCPU_SLOT_BASE_SHIFT\">PCPU_SLOT_BASE_SHIFT</a> + 2, 1);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pcpu_size_to_slot\">pcpu_size_to_slot</a>(int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> == <a class=\"id\" href=\"#pcpu_unit_size\">pcpu_unit_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pcpu_nr_slots\">pcpu_nr_slots</a> - 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pcpu_size_to_slot\">__pcpu_size_to_slot</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pcpu_chunk_slot\">pcpu_chunk_slot</a>(const struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a> &lt; sizeof(int) || <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a> &lt; sizeof(int))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pcpu_size_to_slot\">pcpu_size_to_slot</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a>);", 
"}", 
"", 
"<span class=\"comment\">/* set the pointer to a chunk in a page struct */</span>", 
"static void <a class=\"id\" href=\"#pcpu_set_page_chunk\">pcpu_set_page_chunk</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#pcpu\">pcpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> = (unsigned long)<a class=\"id\" href=\"#pcpu\">pcpu</a>;", 
"}", 
"", 
"<span class=\"comment\">/* obtain pointer to a chunk from a page struct */</span>", 
"static struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#pcpu_get_page_chunk\">pcpu_get_page_chunk</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__maybe_unused\">__maybe_unused</a> <a class=\"id\" href=\"#pcpu_page_idx\">pcpu_page_idx</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#page_idx\">page_idx</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pcpu_unit_map\">pcpu_unit_map</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] * <a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a> + <a class=\"id\" href=\"#page_idx\">page_idx</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#pcpu_chunk_addr\">pcpu_chunk_addr</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#page_idx\">page_idx</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a> + <a class=\"id\" href=\"#pcpu_unit_offsets\">pcpu_unit_offsets</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] +", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#page_idx\">page_idx</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__maybe_unused\">__maybe_unused</a> <a class=\"id\" href=\"#pcpu_next_unpop\">pcpu_next_unpop</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int *<a class=\"id\" href=\"#rs\">rs</a>, int *<a class=\"id\" href=\"#re\">re</a>, int <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rs\">rs</a> = <a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#end\">end</a>, *<a class=\"id\" href=\"#rs\">rs</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#re\">re</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#end\">end</a>, *<a class=\"id\" href=\"#rs\">rs</a> + 1);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__maybe_unused\">__maybe_unused</a> <a class=\"id\" href=\"#pcpu_next_pop\">pcpu_next_pop</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int *<a class=\"id\" href=\"#rs\">rs</a>, int *<a class=\"id\" href=\"#re\">re</a>, int <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rs\">rs</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#end\">end</a>, *<a class=\"id\" href=\"#rs\">rs</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#re\">re</a> = <a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#end\">end</a>, *<a class=\"id\" href=\"#rs\">rs</a> + 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * (Un)populated page region iterators.  Iterate over (un)populated</span>", 
"<span class=\"comment\"> * page regions betwen @start and @end in @chunk.  @rs and @re should</span>", 
"<span class=\"comment\"> * be integer variables and will be set to start and end page index of</span>", 
"<span class=\"comment\"> * the current region.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pcpu_for_each_unpop_region\">pcpu_for_each_unpop_region</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>)<span class=\"ts\"/><span class=\"ts\"/>    \\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#rs\">rs</a>) = (<a class=\"id\" href=\"#start\">start</a>), <a class=\"id\" href=\"#pcpu_next_unpop\">pcpu_next_unpop</a>((<a class=\"id\" href=\"#chunk\">chunk</a>), &amp;(<a class=\"id\" href=\"#rs\">rs</a>), &amp;(<a class=\"id\" href=\"#re\">re</a>), (<a class=\"id\" href=\"#end\">end</a>)); \\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#rs\">rs</a>) &lt; (<a class=\"id\" href=\"#re\">re</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#rs\">rs</a>) = (<a class=\"id\" href=\"#re\">re</a>) + 1, <a class=\"id\" href=\"#pcpu_next_unpop\">pcpu_next_unpop</a>((<a class=\"id\" href=\"#chunk\">chunk</a>), &amp;(<a class=\"id\" href=\"#rs\">rs</a>), &amp;(<a class=\"id\" href=\"#re\">re</a>), (<a class=\"id\" href=\"#end\">end</a>)))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pcpu_for_each_pop_region\">pcpu_for_each_pop_region</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#rs\">rs</a>, <a class=\"id\" href=\"#re\">re</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>)<span class=\"ts\"/><span class=\"ts\"/>    \\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#rs\">rs</a>) = (<a class=\"id\" href=\"#start\">start</a>), <a class=\"id\" href=\"#pcpu_next_pop\">pcpu_next_pop</a>((<a class=\"id\" href=\"#chunk\">chunk</a>), &amp;(<a class=\"id\" href=\"#rs\">rs</a>), &amp;(<a class=\"id\" href=\"#re\">re</a>), (<a class=\"id\" href=\"#end\">end</a>));   \\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#rs\">rs</a>) &lt; (<a class=\"id\" href=\"#re\">re</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \\", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#rs\">rs</a>) = (<a class=\"id\" href=\"#re\">re</a>) + 1, <a class=\"id\" href=\"#pcpu_next_pop\">pcpu_next_pop</a>((<a class=\"id\" href=\"#chunk\">chunk</a>), &amp;(<a class=\"id\" href=\"#rs\">rs</a>), &amp;(<a class=\"id\" href=\"#re\">re</a>), (<a class=\"id\" href=\"#end\">end</a>)))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_mem_alloc - allocate memory</span>", 
"<span class=\"comment\"> * @size: bytes to allocate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate @size bytes.  If @size is smaller than PAGE_SIZE,</span>", 
"<span class=\"comment\"> * kzalloc() is used; otherwise, vmalloc() is used.  The returned</span>", 
"<span class=\"comment\"> * memory is always zeroed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Does GFP_KERNEL allocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to the allocated area on success, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#pcpu_mem_alloc\">pcpu_mem_alloc</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_mem_free - free memory</span>", 
"<span class=\"comment\"> * @ptr: memory to free</span>", 
"<span class=\"comment\"> * @size: size of the area</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free @ptr.  @ptr should have been allocated using pcpu_mem_alloc().</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_mem_free\">pcpu_mem_free</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_chunk_relocate - put chunk in the appropriate chunk slot</span>", 
"<span class=\"comment\"> * @chunk: chunk of interest</span>", 
"<span class=\"comment\"> * @oslot: the previous slot it was on</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called after an allocation or free changed @chunk.</span>", 
"<span class=\"comment\"> * New slot according to the changed state is determined and @chunk is</span>", 
"<span class=\"comment\"> * moved to the slot.  Note that the reserved chunk is never put on</span>", 
"<span class=\"comment\"> * chunk slots.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * pcpu_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_chunk_relocate\">pcpu_chunk_relocate</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, int <a class=\"id\" href=\"#oslot\">oslot</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nslot\">nslot</a> = <a class=\"id\" href=\"#pcpu_chunk_slot\">pcpu_chunk_slot</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a> != <a class=\"id\" href=\"#pcpu_reserved_chunk\">pcpu_reserved_chunk</a> && <a class=\"id\" href=\"#oslot\">oslot</a> != <a class=\"id\" href=\"#nslot\">nslot</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#oslot\">oslot</a> &lt; <a class=\"id\" href=\"#nslot\">nslot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#pcpu_slot\">pcpu_slot</a>[<a class=\"id\" href=\"#nslot\">nslot</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#pcpu_slot\">pcpu_slot</a>[<a class=\"id\" href=\"#nslot\">nslot</a>]);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_need_to_extend - determine whether chunk area map needs to be extended</span>", 
"<span class=\"comment\"> * @chunk: chunk of interest</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine whether area map of @chunk needs to be extended to</span>", 
"<span class=\"comment\"> * accomodate a new allocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * pcpu_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * New target map allocation length if extension is necessary, 0</span>", 
"<span class=\"comment\"> * otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pcpu_need_to_extend\">pcpu_need_to_extend</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#new_alloc\">new_alloc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_alloc\">map_alloc</a> >= <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a> + 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_alloc\">new_alloc</a> = <a class=\"id\" href=\"#PCPU_DFL_MAP_ALLOC\">PCPU_DFL_MAP_ALLOC</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#new_alloc\">new_alloc</a> &lt; <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a> + 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_alloc\">new_alloc</a> *= 2;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_alloc\">new_alloc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_extend_area_map - extend area map of a chunk</span>", 
"<span class=\"comment\"> * @chunk: chunk of interest</span>", 
"<span class=\"comment\"> * @new_alloc: new target allocation length of the area map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Extend area map of @chunk to have @new_alloc entries.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Does GFP_KERNEL allocation.  Grabs and releases pcpu_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pcpu_extend_area_map\">pcpu_extend_area_map</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, int <a class=\"id\" href=\"#new_alloc\">new_alloc</a>)", 
"{", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#old_size\">old_size</a> = 0, <a class=\"id\" href=\"#new_size\">new_size</a> = <a class=\"id\" href=\"#new_alloc\">new_alloc</a> * sizeof(<a class=\"id\" href=\"#new\">new</a>[0]);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#pcpu_mem_alloc\">pcpu_mem_alloc</a>(<a class=\"id\" href=\"#new_size\">new_size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* acquire pcpu_lock and switch to new area map */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_alloc\">new_alloc</a> <= <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_alloc\">map_alloc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_size\">old_size</a> = <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_alloc\">map_alloc</a> * sizeof(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#old_size\">old_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_alloc\">map_alloc</a> = <a class=\"id\" href=\"#new_alloc\">new_alloc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pcpu_mem_free() might end up calling vfree() which uses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IRQ-unsafe lock and thus can't be called under pcpu_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_mem_free\">pcpu_mem_free</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#old_size\">old_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_mem_free\">pcpu_mem_free</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#new_size\">new_size</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_split_block - split a map block</span>", 
"<span class=\"comment\"> * @chunk: chunk of interest</span>", 
"<span class=\"comment\"> * @i: index of map block to split</span>", 
"<span class=\"comment\"> * @head: head size in bytes (can be 0)</span>", 
"<span class=\"comment\"> * @tail: tail size in bytes (can be 0)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Split the @i'th map block into two or three blocks.  If @head is</span>", 
"<span class=\"comment\"> * non-zero, @head bytes block is inserted before block @i moving it</span>", 
"<span class=\"comment\"> * to @i+1 and reducing its size by @head bytes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @tail is non-zero, the target block, which can be @i or @i+1</span>", 
"<span class=\"comment\"> * depending on @head, is reduced by @tail bytes and @tail byte block</span>", 
"<span class=\"comment\"> * is inserted after the target block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @chunk-&gt;map must have enough free slots to accomodate the split.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * pcpu_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcpu_split_block\">pcpu_split_block</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, int <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#head\">head</a>, int <a class=\"id\" href=\"#tail\">tail</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_extra\">nr_extra</a> = !!<a class=\"id\" href=\"#head\">head</a> + !!<a class=\"id\" href=\"#tail\">tail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_alloc\">map_alloc</a> &lt; <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a> + <a class=\"id\" href=\"#nr_extra\">nr_extra</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* insert new subblocks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#nr_extra\">nr_extra</a>], &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[0]) * (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a> - <a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a> += <a class=\"id\" href=\"#nr_extra\">nr_extra</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> + 1] = <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>] - <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>++] = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tail\">tail</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>++] -= <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_alloc_area - allocate area from a pcpu_chunk</span>", 
"<span class=\"comment\"> * @chunk: chunk of interest</span>", 
"<span class=\"comment\"> * @size: wanted size in bytes</span>", 
"<span class=\"comment\"> * @align: wanted align</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Try to allocate @size bytes area aligned at @align from @chunk.</span>", 
"<span class=\"comment\"> * Note that this function only allocates the offset.  It doesn't</span>", 
"<span class=\"comment\"> * populate or map the area.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @chunk-&gt;map must have at least two free slots.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * pcpu_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Allocated offset in @chunk on success, -1 if no matching area is</span>", 
"<span class=\"comment\"> * found.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pcpu_alloc_area\">pcpu_alloc_area</a>(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, int <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oslot\">oslot</a> = <a class=\"id\" href=\"#pcpu_chunk_slot\">pcpu_chunk_slot</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_contig\">max_contig</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#off\">off</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a>; <a class=\"id\" href=\"#off\">off</a> += <a class=\"id\" href=\"#abs\">abs</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>++])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_last\">is_last</a> = <a class=\"id\" href=\"#i\">i</a> + 1 == <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#tail\">tail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* extra for alignment requirement */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#align\">align</a>) - <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#i\">i</a> == 0 && <a class=\"id\" href=\"#head\">head</a> != 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>] &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>] &lt; <a class=\"id\" href=\"#head\">head</a> + <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_contig\">max_contig</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#max_contig\">max_contig</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If head is small or the previous block is free,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * merge'em.  Note that 'small' is defined as smaller</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * than sizeof(int), which is very small but isn't too</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * uncommon for percpu allocations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a> && (<a class=\"id\" href=\"#head\">head</a> &lt; sizeof(int) || <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> - 1] &gt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> - 1] &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> - 1] += <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> - 1] -= <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a> -= <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>] -= <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> += <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if tail is small, just keep it around */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>] - <a class=\"id\" href=\"#head\">head</a> - <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tail\">tail</a> &lt; sizeof(int))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* split if warranted */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a> || <a class=\"id\" href=\"#tail\">tail</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_split_block\">pcpu_split_block</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#tail\">tail</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> += <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_contig\">max_contig</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> - 1], <a class=\"id\" href=\"#max_contig\">max_contig</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tail\">tail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_contig\">max_contig</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a> + 1], <a class=\"id\" href=\"#max_contig\">max_contig</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* update hint and mark allocated */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_last\">is_last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a> = <a class=\"id\" href=\"#max_contig\">max_contig</a>; <span class=\"comment\">/* fully scanned */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#max_contig\">max_contig</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a> -= <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>] = -<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_relocate\">pcpu_chunk_relocate</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#oslot\">oslot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a> = <a class=\"id\" href=\"#max_contig\">max_contig</a>;<span class=\"ts\"/><span class=\"comment\">/* fully scanned */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_relocate\">pcpu_chunk_relocate</a>(<a class=\"id\" href=\"#chunk\">chunk</a>, <a class=\"id\" href=\"#oslot\">oslot</a>);", 
];
xr_frag_insert('l/69/b1a3014fd3040542cadfce5707125fd72084ff.xr', __xr_tmp);
