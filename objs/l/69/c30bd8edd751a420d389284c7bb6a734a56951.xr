var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_GENERIC_PGTABLE_H\">_ASM_GENERIC_PGTABLE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_GENERIC_PGTABLE_H\">_ASM_GENERIC_PGTABLE_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PTEP_SET_ACCESS_FLAGS\">__HAVE_ARCH_PTEP_SET_ACCESS_FLAGS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Largely same as above, but only sets the access flags (dirty,</span>", 
"<span class=\"comment\"> * accessed, and writable). Furthermore, we know it always gets set</span>", 
"<span class=\"comment\"> * to a \"more permissive\" setting, which allows most architectures</span>", 
"<span class=\"comment\"> * to optimize this. We return whether the PTE actually changed, which</span>", 
"<span class=\"comment\"> * in turn instructs the caller to do things like update__mmu_cache.</span>", 
"<span class=\"comment\"> * This used to be done in the caller, but sparc needs minor faults to</span>", 
"<span class=\"comment\"> * force that call on sun4c so we changed this macro slightly</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ptep_set_access_flags\">ptep_set_access_flags</a>(<a class=\"id\" href=\"#__vma\">__vma</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>, <a class=\"id\" href=\"#__entry\">__entry</a>, <a class=\"id\" href=\"#__dirty\">__dirty</a>) \\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__changed\">__changed</a> = !<a class=\"id\" href=\"#pte_same\">pte_same</a>(*(<a class=\"id\" href=\"#__ptep\">__ptep</a>), <a class=\"id\" href=\"#__entry\">__entry</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__changed\">__changed</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>((<a class=\"id\" href=\"#__vma\">__vma</a>)-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, (<a class=\"id\" href=\"#__address\">__address</a>), <a class=\"id\" href=\"#__ptep\">__ptep</a>, <a class=\"id\" href=\"#__entry\">__entry</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_page\">flush_tlb_page</a>(<a class=\"id\" href=\"#__vma\">__vma</a>, <a class=\"id\" href=\"#__address\">__address</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__changed\">__changed</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PTEP_TEST_AND_CLEAR_YOUNG\">__HAVE_ARCH_PTEP_TEST_AND_CLEAR_YOUNG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ptep_test_and_clear_young\">ptep_test_and_clear_young</a>(<a class=\"id\" href=\"#__vma\">__vma</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#__pte\">__pte</a> = *(<a class=\"id\" href=\"#__ptep\">__ptep</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = 1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_young\">pte_young</a>(<a class=\"id\" href=\"#__pte\">__pte</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>((<a class=\"id\" href=\"#__vma\">__vma</a>)-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, (<a class=\"id\" href=\"#__address\">__address</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#__ptep\">__ptep</a>), <a class=\"id\" href=\"#pte_mkold\">pte_mkold</a>(<a class=\"id\" href=\"#__pte\">__pte</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PTEP_CLEAR_YOUNG_FLUSH\">__HAVE_ARCH_PTEP_CLEAR_YOUNG_FLUSH</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ptep_clear_flush_young\">ptep_clear_flush_young</a>(<a class=\"id\" href=\"#__vma\">__vma</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__young\">__young</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__young\">__young</a> = <a class=\"id\" href=\"#ptep_test_and_clear_young\">ptep_test_and_clear_young</a>(<a class=\"id\" href=\"#__vma\">__vma</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__young\">__young</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_page\">flush_tlb_page</a>(<a class=\"id\" href=\"#__vma\">__vma</a>, <a class=\"id\" href=\"#__address\">__address</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__young\">__young</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PTEP_GET_AND_CLEAR\">__HAVE_ARCH_PTEP_GET_AND_CLEAR</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ptep_get_and_clear\">ptep_get_and_clear</a>(<a class=\"id\" href=\"#__mm\">__mm</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#__pte\">__pte</a> = *(<a class=\"id\" href=\"#__ptep\">__ptep</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_clear\">pte_clear</a>((<a class=\"id\" href=\"#__mm\">__mm</a>), (<a class=\"id\" href=\"#__address\">__address</a>), (<a class=\"id\" href=\"#__ptep\">__ptep</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PTEP_GET_AND_CLEAR_FULL\">__HAVE_ARCH_PTEP_GET_AND_CLEAR_FULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ptep_get_and_clear_full\">ptep_get_and_clear_full</a>(<a class=\"id\" href=\"#__mm\">__mm</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>, <a class=\"id\" href=\"#__full\">__full</a>)<span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#__pte\">__pte</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> = <a class=\"id\" href=\"#ptep_get_and_clear\">ptep_get_and_clear</a>((<a class=\"id\" href=\"#__mm\">__mm</a>), (<a class=\"id\" href=\"#__address\">__address</a>), (<a class=\"id\" href=\"#__ptep\">__ptep</a>));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some architectures may be able to avoid expensive synchronization</span>", 
"<span class=\"comment\"> * primitives when modifications are made to PTE's which are already</span>", 
"<span class=\"comment\"> * not present, or in the process of an address space destruction.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PTE_CLEAR_NOT_PRESENT_FULL\">__HAVE_ARCH_PTE_CLEAR_NOT_PRESENT_FULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_clear_not_present_full\">pte_clear_not_present_full</a>(<a class=\"id\" href=\"#__mm\">__mm</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>, <a class=\"id\" href=\"#__full\">__full</a>)<span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_clear\">pte_clear</a>((<a class=\"id\" href=\"#__mm\">__mm</a>), (<a class=\"id\" href=\"#__address\">__address</a>), (<a class=\"id\" href=\"#__ptep\">__ptep</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PTEP_CLEAR_FLUSH\">__HAVE_ARCH_PTEP_CLEAR_FLUSH</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ptep_clear_flush\">ptep_clear_flush</a>(<a class=\"id\" href=\"#__vma\">__vma</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#__pte\">__pte</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> = <a class=\"id\" href=\"#ptep_get_and_clear\">ptep_get_and_clear</a>((<a class=\"id\" href=\"#__vma\">__vma</a>)-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_page\">flush_tlb_page</a>(<a class=\"id\" href=\"#__vma\">__vma</a>, <a class=\"id\" href=\"#__address\">__address</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PTEP_SET_WRPROTECT\">__HAVE_ARCH_PTEP_SET_WRPROTECT</a>", 
"struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a>;", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ptep_set_wrprotect\">ptep_set_wrprotect</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#old_pte\">old_pte</a> = *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_wrprotect\">pte_wrprotect</a>(<a class=\"id\" href=\"#old_pte\">old_pte</a>));", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PTE_SAME\">__HAVE_ARCH_PTE_SAME</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_same\">pte_same</a>(<a class=\"id\" href=\"#A\">A</a>,<a class=\"id\" href=\"#B\">B</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#pte_val\">pte_val</a>(<a class=\"id\" href=\"#A\">A</a>) == <a class=\"id\" href=\"#pte_val\">pte_val</a>(<a class=\"id\" href=\"#B\">B</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PAGE_TEST_DIRTY\">__HAVE_ARCH_PAGE_TEST_DIRTY</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_test_dirty\">page_test_dirty</a>(<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PAGE_CLEAR_DIRTY\">__HAVE_ARCH_PAGE_CLEAR_DIRTY</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_clear_dirty\">page_clear_dirty</a>(<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PAGE_TEST_DIRTY\">__HAVE_ARCH_PAGE_TEST_DIRTY</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_maybe_dirty\">pte_maybe_dirty</a>(<a class=\"id\" href=\"#pte\">pte</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_dirty\">pte_dirty</a>(<a class=\"id\" href=\"#pte\">pte</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pte_maybe_dirty\">pte_maybe_dirty</a>(<a class=\"id\" href=\"#pte\">pte</a>)<span class=\"ts\"/><span class=\"ts\"/>(1)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PAGE_TEST_AND_CLEAR_YOUNG\">__HAVE_ARCH_PAGE_TEST_AND_CLEAR_YOUNG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_test_and_clear_young\">page_test_and_clear_young</a>(<a class=\"id\" href=\"#page\">page</a>) (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PGD_OFFSET_GATE\">__HAVE_ARCH_PGD_OFFSET_GATE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pgd_offset_gate\">pgd_offset_gate</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_MOVE_PTE\">__HAVE_ARCH_MOVE_PTE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#move_pte\">move_pte</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#old_addr\">old_addr</a>, <a class=\"id\" href=\"#new_addr\">new_addr</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#pte\">pte</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#pgprot_noncached\">pgprot_noncached</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pgprot_noncached\">pgprot_noncached</a>(<a class=\"id\" href=\"#prot\">prot</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#prot\">prot</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#pgprot_writecombine\">pgprot_writecombine</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pgprot_writecombine\">pgprot_writecombine</a> <a class=\"id\" href=\"#pgprot_noncached\">pgprot_noncached</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When walking page tables, get the address of the next boundary,</span>", 
"<span class=\"comment\"> * or the end address of the range if that comes earlier.  Although no</span>", 
"<span class=\"comment\"> * vma end wraps to 0, rounded up __boundary may wrap to 0 throughout.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pgd_addr_end\">pgd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__boundary\">__boundary</a> = ((<a class=\"id\" href=\"#addr\">addr</a>) + <a class=\"id\" href=\"#PGDIR_SIZE\">PGDIR_SIZE</a>) &amp; <a class=\"id\" href=\"#PGDIR_MASK\">PGDIR_MASK</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__boundary\">__boundary</a> - 1 &lt; (<a class=\"id\" href=\"#end\">end</a>) - 1)? <a class=\"id\" href=\"#__boundary\">__boundary</a>: (<a class=\"id\" href=\"#end\">end</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#pud_addr_end\">pud_addr_end</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pud_addr_end\">pud_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__boundary\">__boundary</a> = ((<a class=\"id\" href=\"#addr\">addr</a>) + <a class=\"id\" href=\"#PUD_SIZE\">PUD_SIZE</a>) &amp; <a class=\"id\" href=\"#PUD_MASK\">PUD_MASK</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__boundary\">__boundary</a> - 1 &lt; (<a class=\"id\" href=\"#end\">end</a>) - 1)? <a class=\"id\" href=\"#__boundary\">__boundary</a>: (<a class=\"id\" href=\"#end\">end</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#pmd_addr_end\">pmd_addr_end</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pmd_addr_end\">pmd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__boundary\">__boundary</a> = ((<a class=\"id\" href=\"#addr\">addr</a>) + <a class=\"id\" href=\"#PMD_SIZE\">PMD_SIZE</a>) &amp; <a class=\"id\" href=\"#PMD_MASK\">PMD_MASK</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__boundary\">__boundary</a> - 1 &lt; (<a class=\"id\" href=\"#end\">end</a>) - 1)? <a class=\"id\" href=\"#__boundary\">__boundary</a>: (<a class=\"id\" href=\"#end\">end</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When walking page tables, we usually want to skip any p?d_none entries;</span>", 
"<span class=\"comment\"> * and any p?d_bad entries - reporting the error before resetting to none.</span>", 
"<span class=\"comment\"> * Do the tests inline, but report and clear the bad entry in mm/memory.c.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pgd_clear_bad\">pgd_clear_bad</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *);", 
"void <a class=\"id\" href=\"#pud_clear_bad\">pud_clear_bad</a>(<a class=\"id\" href=\"#pud_t\">pud_t</a> *);", 
"void <a class=\"id\" href=\"#pmd_clear_bad\">pmd_clear_bad</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pgd_none_or_clear_bad\">pgd_none_or_clear_bad</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pgd_bad\">pgd_bad</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_clear_bad\">pgd_clear_bad</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pud_none_or_clear_bad\">pud_none_or_clear_bad</a>(<a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none\">pud_none</a>(*<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pud_bad\">pud_bad</a>(*<a class=\"id\" href=\"#pud\">pud</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud_clear_bad\">pud_clear_bad</a>(<a class=\"id\" href=\"#pud\">pud</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pmd_none_or_clear_bad\">pmd_none_or_clear_bad</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none\">pmd_none</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pmd_bad\">pmd_bad</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_clear_bad\">pmd_clear_bad</a>(<a class=\"id\" href=\"#pmd\">pmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#__ptep_modify_prot_start\">__ptep_modify_prot_start</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the current pte state, but zero it out to make it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * non-present, preventing the hardware from asynchronously</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * updating it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ptep_get_and_clear\">ptep_get_and_clear</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__ptep_modify_prot_commit\">__ptep_modify_prot_commit</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The pte is non-present, so there's no hardware state to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * preserve.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_PTEP_MODIFY_PROT_TRANSACTION\">__HAVE_ARCH_PTEP_MODIFY_PROT_TRANSACTION</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Start a pte protection read-modify-write transaction, which</span>", 
"<span class=\"comment\"> * protects against asynchronous hardware modifications to the pte.</span>", 
"<span class=\"comment\"> * The intention is not to prevent the hardware from making pte</span>", 
"<span class=\"comment\"> * updates, but to prevent any updates it may make from being lost.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This does not protect against other software modifications of the</span>", 
"<span class=\"comment\"> * pte; the appropriate pte lock must be held over the transation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this interface is intended to be batchable, meaning that</span>", 
"<span class=\"comment\"> * ptep_modify_prot_commit may not actually update the pte, but merely</span>", 
"<span class=\"comment\"> * queue the update to be done at some later time.  The update must be</span>", 
"<span class=\"comment\"> * actually committed before the pte lock is released, however.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#ptep_modify_prot_start\">ptep_modify_prot_start</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ptep_modify_prot_start\">__ptep_modify_prot_start</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Commit an update to a pte, leaving any hardware-controlled bits in</span>", 
"<span class=\"comment\"> * the PTE unmodified.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ptep_modify_prot_commit\">ptep_modify_prot_commit</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ptep_modify_prot_commit\">__ptep_modify_prot_commit</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __HAVE_ARCH_PTEP_MODIFY_PROT_TRANSACTION */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MMU */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A facility to provide lazy MMU batching.  This allows PTE updates and</span>", 
"<span class=\"comment\"> * page invalidations to be delayed until a call to leave lazy MMU mode</span>", 
"<span class=\"comment\"> * is issued.  Some architectures may benefit from doing this, and it is</span>", 
"<span class=\"comment\"> * beneficial for both shadow and direct mode hypervisors, which may batch</span>", 
"<span class=\"comment\"> * the PTE updates which happen during this window.  Note that using this</span>", 
"<span class=\"comment\"> * interface requires that read hazards be removed from the code.  A read</span>", 
"<span class=\"comment\"> * hazard could result in the direct mode hypervisor case, since the actual</span>", 
"<span class=\"comment\"> * write to the page tables may not yet have taken place, so reads though</span>", 
"<span class=\"comment\"> * a raw PTE pointer after it has been modified are not guaranteed to be</span>", 
"<span class=\"comment\"> * up to date.  This mode can only be entered and left under the protection of</span>", 
"<span class=\"comment\"> * the page table locks for all page tables which may be modified.  In the UP</span>", 
"<span class=\"comment\"> * case, this is required so that preemption is disabled, and in the SMP case,</span>", 
"<span class=\"comment\"> * it must synchronize the delayed page table writes properly on other CPUs.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_ENTER_LAZY_MMU_MODE\">__HAVE_ARCH_ENTER_LAZY_MMU_MODE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_enter_lazy_mmu_mode\">arch_enter_lazy_mmu_mode</a>()<span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_leave_lazy_mmu_mode\">arch_leave_lazy_mmu_mode</a>()<span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_flush_lazy_mmu_mode\">arch_flush_lazy_mmu_mode</a>()<span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A facility to provide batching of the reload of page tables and</span>", 
"<span class=\"comment\"> * other process state with the actual context switch code for</span>", 
"<span class=\"comment\"> * paravirtualized guests.  By convention, only one of the batched</span>", 
"<span class=\"comment\"> * update (lazy) modes (CPU, MMU) should be active at any given time,</span>", 
"<span class=\"comment\"> * entry should never be nested, and entry and exits should always be</span>", 
"<span class=\"comment\"> * paired.  This is for sanity of maintaining and reasoning about the</span>", 
"<span class=\"comment\"> * kernel code.  In this case, the exit (end of the context switch) is</span>", 
"<span class=\"comment\"> * in architecture-specific code, and so doesn't need a generic</span>", 
"<span class=\"comment\"> * definition.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_START_CONTEXT_SWITCH\">__HAVE_ARCH_START_CONTEXT_SWITCH</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_start_context_switch\">arch_start_context_switch</a>(<a class=\"id\" href=\"#prev\">prev</a>)<span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_PFNMAP_TRACKING\">__HAVE_PFNMAP_TRACKING</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interface that can be used by architecture code to keep track of</span>", 
"<span class=\"comment\"> * memory type of pfn mappings (remap_pfn_range, vm_insert_pfn)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * track_pfn_vma_new is called when a _new_ pfn mapping is being established</span>", 
"<span class=\"comment\"> * for physical range indicated by pfn and size.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#track_pfn_vma_new\">track_pfn_vma_new</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> *<a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interface that can be used by architecture code to keep track of</span>", 
"<span class=\"comment\"> * memory type of pfn mappings (remap_pfn_range, vm_insert_pfn)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * track_pfn_vma_copy is called when vma that is covering the pfnmap gets</span>", 
"<span class=\"comment\"> * copied through copy_page_range().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#track_pfn_vma_copy\">track_pfn_vma_copy</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interface that can be used by architecture code to keep track of</span>", 
"<span class=\"comment\"> * memory type of pfn mappings (remap_pfn_range, vm_insert_pfn)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * untrack_pfn_vma is called while unmapping a pfnmap for a region.</span>", 
"<span class=\"comment\"> * untrack can be called for a specific region indicated by pfn and size or</span>", 
"<span class=\"comment\"> * can be for the entire vma (in which case size can be zero).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#untrack_pfn_vma\">untrack_pfn_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"}", 
"#else", 
"extern int <a class=\"id\" href=\"#track_pfn_vma_new\">track_pfn_vma_new</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> *<a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"extern int <a class=\"id\" href=\"#track_pfn_vma_copy\">track_pfn_vma_copy</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>);", 
"extern void <a class=\"id\" href=\"#untrack_pfn_vma\">untrack_pfn_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !__ASSEMBLY__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_GENERIC_PGTABLE_H */</span>", 
];
xr_frag_insert('l/69/c30bd8edd751a420d389284c7bb6a734a56951.xr', __xr_tmp);
