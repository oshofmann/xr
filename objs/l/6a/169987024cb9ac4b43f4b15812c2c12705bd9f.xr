var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>radix tree @root. This is useful for update-if-exists operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function can be called under rcu_read_lock iff the slot is not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modified by radix_tree_replace_slot, otherwise it must be called</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>exclusive from other writers. Any dereference of the slot must be done</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>using radix_tree_deref_slot.</span>", 
"<span class=\"comment\"> */</span>", 
"void **<a class=\"id\" href=\"#radix_tree_lookup_slot\">radix_tree_lookup_slot</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, unsigned long <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>return (void **)<a class=\"id\" href=\"#radix_tree_lookup_element\">radix_tree_lookup_element</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#index\">index</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_lookup_slot\">radix_tree_lookup_slot</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_lookup    -    perform lookup operation on a radix tree</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@index:<span class=\"ts\"/><span class=\"ts\"/>index key</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Lookup the item at the position @index in the radix tree @root.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function can be called under rcu_read_lock, however the caller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>must manage lifetimes of leaf nodes (eg. RCU may also be used to free</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>them safely). No RCU barriers are required to access or modify the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returned item, however.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#radix_tree_lookup\">radix_tree_lookup</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, unsigned long <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#radix_tree_lookup_element\">radix_tree_lookup_element</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#index\">index</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_lookup\">radix_tree_lookup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_tag_set - set a tag on a radix tree node</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@index:<span class=\"ts\"/><span class=\"ts\"/>index key</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tag: <span class=\"ts\"/><span class=\"ts\"/>tag index</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Set the search tag (which must be &lt; RADIX_TREE_MAX_TAGS)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>corresponding to @index in the radix tree.  From</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the root all the way down to the leaf node.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns the address of the tagged item.   Setting a tag on a not-present</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>item is a bug.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#radix_tree_tag_set\">radix_tree_tag_set</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#height\">height</a>, <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#slot\">slot</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#height\">height</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = (<a class=\"id\" href=\"#height\">height</a> - 1) * <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#height\">height</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#index\">index</a> >> <a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tag_get\">tag_get</a>(<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#offset\">offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag_set\">tag_set</a>(<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#offset\">offset</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#slot\">slot</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> -= <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set the root's tag bit */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> && !<a class=\"id\" href=\"#root_tag_get\">root_tag_get</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#tag\">tag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_tag_set\">root_tag_set</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#slot\">slot</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_tag_set\">radix_tree_tag_set</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_tag_clear - clear a tag on a radix tree node</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
];
xr_frag_insert('l/6a/169987024cb9ac4b43f4b15812c2c12705bd9f.xr', __xr_tmp);
