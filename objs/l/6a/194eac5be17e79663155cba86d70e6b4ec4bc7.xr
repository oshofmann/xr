var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_SLHC_H\">_SLHC_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_SLHC_H\">_SLHC_H</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Definitions for tcp compression routines.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * $Header: slcompress.h,v 1.10 89/12/31 08:53:02 van Exp $</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 1989 Regents of the University of California.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms are permitted</span>", 
"<span class=\"comment\"> * provided that the above copyright notice and this paragraph are</span>", 
"<span class=\"comment\"> * duplicated in all such forms and that any documentation,</span>", 
"<span class=\"comment\"> * advertising materials, and other materials related to such</span>", 
"<span class=\"comment\"> * distribution and use acknowledge that the software was developed</span>", 
"<span class=\"comment\"> * by the University of California, Berkeley.  The name of the</span>", 
"<span class=\"comment\"> * University may not be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> * from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR</span>", 
"<span class=\"comment\"> * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED</span>", 
"<span class=\"comment\"> * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Van Jacobson (van@helios.ee.lbl.gov), Dec 31, 1989:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Initial distribution.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * modified for KA9Q Internet Software Package by</span>", 
"<span class=\"comment\"> * Katie Stevens (dkstevens@ucdavis.edu)</span>", 
"<span class=\"comment\"> * University of California, Davis</span>", 
"<span class=\"comment\"> * Computing Services</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- 01-31-90<span class=\"ts\"/>initial adaptation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Feb 1991<span class=\"ts\"/>Bill_Simpson@um.cc.umich.edu</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>variable number of conversation slots</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>allow zero or one slots</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>separate routines</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>status display</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Compressed packet format:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The first octet contains the packet type (top 3 bits), TCP</span>", 
"<span class=\"comment\"> * 'push' bit, and flags that indicate which of the 4 TCP sequence</span>", 
"<span class=\"comment\"> * numbers have changed (bottom 5 bits).  The next octet is a</span>", 
"<span class=\"comment\"> * conversation number that associates a saved IP/TCP header with</span>", 
"<span class=\"comment\"> * the compressed packet.  The next two octets are the TCP checksum</span>", 
"<span class=\"comment\"> * from the original datagram.  The next 0 to 15 octets are</span>", 
"<span class=\"comment\"> * sequence number changes, one change per bit set in the header</span>", 
"<span class=\"comment\"> * (there may be no changes and there are two special cases where</span>", 
"<span class=\"comment\"> * the receiver implicitly knows what changed -- see below).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are 5 numbers which can change (they are always inserted</span>", 
"<span class=\"comment\"> * in the following order): TCP urgent pointer, window,</span>", 
"<span class=\"comment\"> * acknowledgment, sequence number and IP ID.  (The urgent pointer</span>", 
"<span class=\"comment\"> * is different from the others in that its value is sent, not the</span>", 
"<span class=\"comment\"> * change in value.)  Since typical use of SLIP links is biased</span>", 
"<span class=\"comment\"> * toward small packets (see comments on MTU/MSS below), changes</span>", 
"<span class=\"comment\"> * use a variable length coding with one octet for numbers in the</span>", 
"<span class=\"comment\"> * range 1 - 255 and 3 octets (0, MSB, LSB) for numbers in the</span>", 
"<span class=\"comment\"> * range 256 - 65535 or 0.  (If the change in sequence number or</span>", 
"<span class=\"comment\"> * ack is more than 65535, an uncompressed packet is sent.)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Packet types (must not conflict with IP protocol version)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The top nibble of the first octet is the packet type.  There are</span>", 
"<span class=\"comment\"> * three possible types: IP (not proto TCP or tcp with one of the</span>", 
"<span class=\"comment\"> * control flags set); uncompressed TCP (a normal IP/TCP packet but</span>", 
"<span class=\"comment\"> * with the 8-bit protocol field replaced by an 8-bit connection id --</span>", 
"<span class=\"comment\"> * this type of packet syncs the sender &amp; receiver); and compressed</span>", 
"<span class=\"comment\"> * TCP (described above).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LSB of 4-bit field is TCP \"PUSH\" bit (a worthless anachronism) and</span>", 
"<span class=\"comment\"> * is logically part of the 4-bit \"changes\" field that follows.  Top</span>", 
"<span class=\"comment\"> * three bits are actual packet type.  For backward compatibility</span>", 
"<span class=\"comment\"> * and in the interest of conserving bits, numbers are chosen so the</span>", 
"<span class=\"comment\"> * IP protocol version number (4) which normally appears in this nibble</span>", 
"<span class=\"comment\"> * means \"IP packet\".</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tcp\">tcp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* SLIP compression masks for len/vers byte */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SL_TYPE_IP\">SL_TYPE_IP</a> 0x40", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SL_TYPE_UNCOMPRESSED_TCP\">SL_TYPE_UNCOMPRESSED_TCP</a> 0x70", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SL_TYPE_COMPRESSED_TCP\">SL_TYPE_COMPRESSED_TCP</a> 0x80", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SL_TYPE_ERROR\">SL_TYPE_ERROR</a> 0x00", 
"", 
"<span class=\"comment\">/* Bits in first octet of compressed packet */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NEW_C\">NEW_C</a><span class=\"ts\"/>0x40<span class=\"ts\"/><span class=\"comment\">/* flag bits for what changed in a packet */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NEW_I\">NEW_I</a><span class=\"ts\"/>0x20", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NEW_S\">NEW_S</a><span class=\"ts\"/>0x08", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NEW_A\">NEW_A</a><span class=\"ts\"/>0x04", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NEW_W\">NEW_W</a><span class=\"ts\"/>0x02", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NEW_U\">NEW_U</a><span class=\"ts\"/>0x01", 
"", 
"<span class=\"comment\">/* reserved, special-case values of above */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPECIAL_I\">SPECIAL_I</a> (<a class=\"id\" href=\"#NEW_S\">NEW_S</a>|<a class=\"id\" href=\"#NEW_W\">NEW_W</a>|<a class=\"id\" href=\"#NEW_U\">NEW_U</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* echoed interactive traffic */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPECIAL_D\">SPECIAL_D</a> (<a class=\"id\" href=\"#NEW_S\">NEW_S</a>|<a class=\"id\" href=\"#NEW_A\">NEW_A</a>|<a class=\"id\" href=\"#NEW_W\">NEW_W</a>|<a class=\"id\" href=\"#NEW_U\">NEW_U</a>)<span class=\"ts\"/><span class=\"comment\">/* unidirectional data */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPECIALS_MASK\">SPECIALS_MASK</a> (<a class=\"id\" href=\"#NEW_S\">NEW_S</a>|<a class=\"id\" href=\"#NEW_A\">NEW_A</a>|<a class=\"id\" href=\"#NEW_W\">NEW_W</a>|<a class=\"id\" href=\"#NEW_U\">NEW_U</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TCP_PUSH_BIT\">TCP_PUSH_BIT</a> 0x10", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * data type and sizes conversion assumptions:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>VJ code<span class=\"ts\"/><span class=\"ts\"/>KA9Q style<span class=\"ts\"/>generic</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>u_char<span class=\"ts\"/><span class=\"ts\"/>byte_t<span class=\"ts\"/><span class=\"ts\"/>unsigned char<span class=\"ts\"/> 8 bits</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>u_short<span class=\"ts\"/><span class=\"ts\"/>int16<span class=\"ts\"/><span class=\"ts\"/>unsigned short<span class=\"ts\"/>16 bits</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>u_int<span class=\"ts\"/><span class=\"ts\"/>int16<span class=\"ts\"/><span class=\"ts\"/>unsigned short<span class=\"ts\"/>16 bits</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>u_long<span class=\"ts\"/><span class=\"ts\"/>unsigned long<span class=\"ts\"/>unsigned long<span class=\"ts\"/>32 bits</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>int32<span class=\"ts\"/><span class=\"ts\"/>long<span class=\"ts\"/><span class=\"ts\"/>32 bits</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"typedef <a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#byte_t\">byte_t</a>;", 
"typedef <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#int32\">int32</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * \"state\" data for each active tcp conversation on the wire.  This is</span>", 
"<span class=\"comment\"> * basically a copy of the entire IP/TCP header from the last packet</span>", 
"<span class=\"comment\"> * we saw from the conversation together with a small identifier</span>", 
"<span class=\"comment\"> * the transmit &amp; receive ends of the line use to locate saved header.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cstate\">cstate</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#byte_t\">byte_t</a><span class=\"ts\"/><a class=\"id\" href=\"#cs_this\">cs_this</a>;<span class=\"ts\"/><span class=\"comment\">/* connection id number (xmit) */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cstate\">cstate</a> *<a class=\"id\" href=\"#next\">next</a>;<span class=\"ts\"/><span class=\"comment\">/* next in ring (xmit) */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> <a class=\"id\" href=\"#cs_ip\">cs_ip</a>;<span class=\"ts\"/><span class=\"comment\">/* ip/tcp hdr from most recent packet */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> <a class=\"id\" href=\"#cs_tcp\">cs_tcp</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#cs_ipopt\">cs_ipopt</a>[64];", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#cs_tcpopt\">cs_tcpopt</a>[64];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cs_hsize\">cs_hsize</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NULLSLSTATE\">NULLSLSTATE</a><span class=\"ts\"/>(struct <a class=\"id\" href=\"#cstate\">cstate</a> *)0", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * all the state data for one serial line (we need one of these per line).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#slcompress\">slcompress</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cstate\">cstate</a> *<a class=\"id\" href=\"#tstate\">tstate</a>;<span class=\"ts\"/><span class=\"comment\">/* transmit connection states (array)*/</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cstate\">cstate</a> *<a class=\"id\" href=\"#rstate\">rstate</a>;<span class=\"ts\"/><span class=\"comment\">/* receive connection states (array)*/</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#byte_t\">byte_t</a> <a class=\"id\" href=\"#tslot_limit\">tslot_limit</a>;<span class=\"ts\"/><span class=\"comment\">/* highest transmit slot id (0-l)*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#byte_t\">byte_t</a> <a class=\"id\" href=\"#rslot_limit\">rslot_limit</a>;<span class=\"ts\"/><span class=\"comment\">/* highest receive slot id (0-l)*/</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#byte_t\">byte_t</a> <a class=\"id\" href=\"#xmit_oldest\">xmit_oldest</a>;<span class=\"ts\"/><span class=\"comment\">/* oldest xmit in ring */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#byte_t\">byte_t</a> <a class=\"id\" href=\"#xmit_current\">xmit_current</a>;<span class=\"ts\"/><span class=\"comment\">/* most recent xmit id */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#byte_t\">byte_t</a> <a class=\"id\" href=\"#recv_current\">recv_current</a>;<span class=\"ts\"/><span class=\"comment\">/* most recent rcvd id */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#byte_t\">byte_t</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLF_TOSS\">SLF_TOSS</a><span class=\"ts\"/>0x01<span class=\"ts\"/><span class=\"comment\">/* tossing rcvd frames until id received */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_o_nontcp\">sls_o_nontcp</a>;<span class=\"ts\"/><span class=\"comment\">/* outbound non-TCP packets */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_o_tcp\">sls_o_tcp</a>;<span class=\"ts\"/><span class=\"comment\">/* outbound TCP packets */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_o_uncompressed\">sls_o_uncompressed</a>;<span class=\"ts\"/><span class=\"comment\">/* outbound uncompressed packets */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_o_compressed\">sls_o_compressed</a>;<span class=\"ts\"/><span class=\"comment\">/* outbound compressed packets */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_o_searches\">sls_o_searches</a>;<span class=\"ts\"/><span class=\"comment\">/* searches for connection state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_o_misses\">sls_o_misses</a>;<span class=\"ts\"/><span class=\"comment\">/* times couldn't find conn. state */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_i_uncompressed\">sls_i_uncompressed</a>;<span class=\"ts\"/><span class=\"comment\">/* inbound uncompressed packets */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_i_compressed\">sls_i_compressed</a>;<span class=\"ts\"/><span class=\"comment\">/* inbound compressed packets */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_i_error\">sls_i_error</a>;<span class=\"ts\"/><span class=\"comment\">/* inbound error packets */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_i_tossed\">sls_i_tossed</a>;<span class=\"ts\"/><span class=\"comment\">/* inbound packets tossed because of error */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_i_runt\">sls_i_runt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int32\">int32</a> <a class=\"id\" href=\"#sls_i_badcheck\">sls_i_badcheck</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NULLSLCOMPR\">NULLSLCOMPR</a><span class=\"ts\"/>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *)0", 
"", 
"<span class=\"comment\">/* In slhc.c: */</span>", 
"struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#slhc_init\">slhc_init</a>(int <a class=\"id\" href=\"#rslots\">rslots</a>, int <a class=\"id\" href=\"#tslots\">tslots</a>);", 
"void <a class=\"id\" href=\"#slhc_free\">slhc_free</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>);", 
"", 
"int <a class=\"id\" href=\"#slhc_compress\">slhc_compress</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>, unsigned char *<a class=\"id\" href=\"#icp\">icp</a>, int <a class=\"id\" href=\"#isize\">isize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned char *<a class=\"id\" href=\"#ocp\">ocp</a>, unsigned char **<a class=\"id\" href=\"#cpp\">cpp</a>, int <a class=\"id\" href=\"#compress_cid\">compress_cid</a>);", 
"int <a class=\"id\" href=\"#slhc_uncompress\">slhc_uncompress</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>, unsigned char *<a class=\"id\" href=\"#icp\">icp</a>, int <a class=\"id\" href=\"#isize\">isize</a>);", 
"int <a class=\"id\" href=\"#slhc_remember\">slhc_remember</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>, unsigned char *<a class=\"id\" href=\"#icp\">icp</a>, int <a class=\"id\" href=\"#isize\">isize</a>);", 
"int <a class=\"id\" href=\"#slhc_toss\">slhc_toss</a>(struct <a class=\"id\" href=\"#slcompress\">slcompress</a> *<a class=\"id\" href=\"#comp\">comp</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _SLHC_H */</span>", 
];
xr_frag_insert('l/6a/194eac5be17e79663155cba86d70e6b4ec4bc7.xr', __xr_tmp);
