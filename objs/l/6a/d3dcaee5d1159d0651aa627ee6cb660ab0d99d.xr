var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  fs/eventfd.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2007  Davide Libenzi &lt;davidel@xmailserver.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#anon_inodes\">anon_inodes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kref\">kref</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#eventfd\">eventfd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kref\">kref</a> <a class=\"id\" href=\"#kref\">kref</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#wqh\">wqh</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Every time that a write(2) is performed on an eventfd, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * value of the __u64 being written is added to \"count\" and a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wakeup is performed on \"wqh\". A read(2) will return the \"count\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * value to userspace, and will reset \"count\" to zero. The kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * side eventfd_signal() also, adds to the \"count\" counter and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * issue a wakeup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eventfd_signal - Adds @n to the eventfd counter.</span>", 
"<span class=\"comment\"> * @ctx: [in] Pointer to the eventfd context.</span>", 
"<span class=\"comment\"> * @n: [in] Value of the counter to be added to the eventfd internal counter.</span>", 
"<span class=\"comment\"> *          The value cannot be negative.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is supposed to be called by the kernel in paths that do not</span>", 
"<span class=\"comment\"> * allow sleeping. In this function we allow the counter to reach the ULLONG_MAX</span>", 
"<span class=\"comment\"> * value, and we signal this as overflow condition by returining a POLLERR</span>", 
"<span class=\"comment\"> * to poll(2).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns @n in case of success, a non-negative number lower than @n in case</span>", 
"<span class=\"comment\"> * of overflow, or the following error codes:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * -EINVAL    : The value of @n is negative.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#eventfd_signal\">eventfd_signal</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a> - <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = (int) (<a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a> - <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_locked_poll\">wake_up_locked_poll</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, <a class=\"id\" href=\"#POLLIN\">POLLIN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#eventfd_signal\">eventfd_signal</a>);", 
"", 
"static void <a class=\"id\" href=\"#eventfd_free_ctx\">eventfd_free_ctx</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#eventfd_free\">eventfd_free</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kref\">kref</a>, struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a>, <a class=\"id\" href=\"#kref\">kref</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eventfd_free_ctx\">eventfd_free_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eventfd_ctx_get - Acquires a reference to the internal eventfd context.</span>", 
"<span class=\"comment\"> * @ctx: [in] Pointer to the eventfd context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: In case of success, returns a pointer to the eventfd context.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd_ctx_get\">eventfd_ctx_get</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_get\">kref_get</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#eventfd_ctx_get\">eventfd_ctx_get</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eventfd_ctx_put - Releases a reference to the internal eventfd context.</span>", 
"<span class=\"comment\"> * @ctx: [in] Pointer to eventfd context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The eventfd context reference must have been previously acquired either</span>", 
"<span class=\"comment\"> * with eventfd_ctx_get() or eventfd_ctx_fdget()).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#eventfd_ctx_put\">eventfd_ctx_put</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#kref\">kref</a>, <a class=\"id\" href=\"#eventfd_free\">eventfd_free</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#eventfd_ctx_put\">eventfd_ctx_put</a>);", 
"", 
"static int <a class=\"id\" href=\"#eventfd_release\">eventfd_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_poll\">wake_up_poll</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, <a class=\"id\" href=\"#POLLHUP\">POLLHUP</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eventfd_ctx_put\">eventfd_ctx_put</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#eventfd_poll\">eventfd_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#events\">events</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_wait\">poll_wait</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events\">events</a> |= <a class=\"id\" href=\"#POLLIN\">POLLIN</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events\">events</a> |= <a class=\"id\" href=\"#POLLERR\">POLLERR</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a> - 1 &gt; <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events\">events</a> |= <a class=\"id\" href=\"#POLLOUT\">POLLOUT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#events\">events</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#eventfd_ctx_do_read\">eventfd_ctx_do_read</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#__u64\">__u64</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cnt\">cnt</a> = (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EFD_SEMAPHORE\">EFD_SEMAPHORE</a>) ? 1 : <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a> -= *<a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eventfd_ctx_remove_wait_queue - Read the current counter and removes wait queue.</span>", 
"<span class=\"comment\"> * @ctx: [in] Pointer to eventfd context.</span>", 
"<span class=\"comment\"> * @wait: [in] Wait queue to be removed.</span>", 
"<span class=\"comment\"> * @cnt: [out] Pointer to the 64bit conter value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero if successful, or the following error codes:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * -EAGAIN      : The operation would have blocked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is used to atomically remove a wait queue entry from the eventfd wait</span>", 
"<span class=\"comment\"> * queue head, and read/reset the counter value.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#eventfd_ctx_remove_wait_queue\">eventfd_ctx_remove_wait_queue</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__u64\">__u64</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eventfd_ctx_do_read\">eventfd_ctx_do_read</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#cnt\">cnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__remove_wait_queue\">__remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#cnt\">cnt</a> != 0 && <a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_locked_poll\">wake_up_locked_poll</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, <a class=\"id\" href=\"#POLLOUT\">POLLOUT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#cnt\">cnt</a> != 0 ? 0 : -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#eventfd_ctx_remove_wait_queue\">eventfd_ctx_remove_wait_queue</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eventfd_ctx_read - Reads the eventfd counter or wait if it is zero.</span>", 
"<span class=\"comment\"> * @ctx: [in] Pointer to eventfd context.</span>", 
"<span class=\"comment\"> * @no_wait: [in] Different from zero if the operation should not block.</span>", 
"<span class=\"comment\"> * @cnt: [out] Pointer to the 64bit conter value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero if successful, or the following error codes:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * -EAGAIN      : The operation would have blocked but @no_wait was nonzero.</span>", 
"<span class=\"comment\"> * -ERESTARTSYS : A signal interrupted the wait operation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @no_wait is zero, the function might sleep until the eventfd internal</span>", 
"<span class=\"comment\"> * counter becomes greater than zero.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#eventfd_ctx_read\">eventfd_ctx_read</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, int <a class=\"id\" href=\"#no_wait\">no_wait</a>, <a class=\"id\" href=\"#__u64\">__u64</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cnt\">cnt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#no_wait\">no_wait</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue\">__add_wait_queue</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_wait_queue\">__remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#res\">res</a> == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eventfd_ctx_do_read\">eventfd_ctx_do_read</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#cnt\">cnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_locked_poll\">wake_up_locked_poll</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, <a class=\"id\" href=\"#POLLOUT\">POLLOUT</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#eventfd_ctx_read\">eventfd_ctx_read</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#eventfd_read\">eventfd_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &lt; sizeof(<a class=\"id\" href=\"#cnt\">cnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#eventfd_ctx_read\">eventfd_ctx_read</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>, &amp;<a class=\"id\" href=\"#cnt\">cnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#cnt\">cnt</a>, (<a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#buf\">buf</a>) ? -<a class=\"id\" href=\"#EFAULT\">EFAULT</a> : sizeof(<a class=\"id\" href=\"#cnt\">cnt</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#eventfd_write\">eventfd_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#ucnt\">ucnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &lt; sizeof(<a class=\"id\" href=\"#ucnt\">ucnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#ucnt\">ucnt</a>, <a class=\"id\" href=\"#buf\">buf</a>, sizeof(<a class=\"id\" href=\"#ucnt\">ucnt</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ucnt\">ucnt</a> == <a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a> - <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#ucnt\">ucnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = sizeof(<a class=\"id\" href=\"#ucnt\">ucnt</a>);", 
"<span class=\"ts\"/>else if (!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue\">__add_wait_queue</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#res\">res</a> = 0;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a> - <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#ucnt\">ucnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = sizeof(<a class=\"id\" href=\"#ucnt\">ucnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_wait_queue\">__remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#res\">res</a> &gt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#ucnt\">ucnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_locked_poll\">wake_up_locked_poll</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>, <a class=\"id\" href=\"#POLLIN\">POLLIN</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#eventfd_fops\">eventfd_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#eventfd_release\">eventfd_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#eventfd_poll\">eventfd_poll</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#eventfd_read\">eventfd_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#eventfd_write\">eventfd_write</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eventfd_fget - Acquire a reference of an eventfd file descriptor.</span>", 
"<span class=\"comment\"> * @fd: [in] Eventfd file descriptor.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the eventfd file structure in case of success, or the</span>", 
"<span class=\"comment\"> * following error pointer:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * -EBADF    : Invalid @fd file descriptor.</span>", 
"<span class=\"comment\"> * -EINVAL   : The @fd file descriptor is not an eventfd file.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#eventfd_fget\">eventfd_fget</a>(int <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EBADF\">EBADF</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> != &amp;<a class=\"id\" href=\"#eventfd_fops\">eventfd_fops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file\">file</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#eventfd_fget\">eventfd_fget</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eventfd_ctx_fdget - Acquires a reference to the internal eventfd context.</span>", 
"<span class=\"comment\"> * @fd: [in] Eventfd file descriptor.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the internal eventfd context, otherwise the error</span>", 
"<span class=\"comment\"> * pointers returned by the following functions:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * eventfd_fget</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd_ctx_fdget\">eventfd_ctx_fdget</a>(int <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#eventfd_fget\">eventfd_fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *) <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#eventfd_ctx_get\">eventfd_ctx_get</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#eventfd_ctx_fdget\">eventfd_ctx_fdget</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eventfd_ctx_fileget - Acquires a reference to the internal eventfd context.</span>", 
"<span class=\"comment\"> * @file: [in] Eventfd file pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the internal eventfd context, otherwise the error</span>", 
"<span class=\"comment\"> * pointer:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * -EINVAL   : The @fd file descriptor is not an eventfd file.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd_ctx_fileget\">eventfd_ctx_fileget</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> != &amp;<a class=\"id\" href=\"#eventfd_fops\">eventfd_fops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#eventfd_ctx_get\">eventfd_ctx_get</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#eventfd_ctx_fileget\">eventfd_ctx_fileget</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eventfd_file_create - Creates an eventfd file pointer.</span>", 
"<span class=\"comment\"> * @count: Initial eventfd counter value.</span>", 
"<span class=\"comment\"> * @flags: Flags for the eventfd file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates an eventfd file pointer, w/out installing it into</span>", 
"<span class=\"comment\"> * the fd table. This is useful when the eventfd file is used during the</span>", 
"<span class=\"comment\"> * initialization of data structures that require extra setup after the eventfd</span>", 
"<span class=\"comment\"> * creation. So the eventfd creation is split into the file pointer creation</span>", 
"<span class=\"comment\"> * phase, and the file descriptor installation phase.</span>", 
"<span class=\"comment\"> * In this way races with userspace closing the newly installed file descriptor</span>", 
"<span class=\"comment\"> * can be avoided.</span>", 
"<span class=\"comment\"> * Returns an eventfd file pointer, or a proper error pointer.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#eventfd_file_create\">eventfd_file_create</a>(unsigned int <a class=\"id\" href=\"#count\">count</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the EFD_* constants for consistency.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#EFD_CLOEXEC\">EFD_CLOEXEC</a> != <a class=\"id\" href=\"#O_CLOEXEC\">O_CLOEXEC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#EFD_NONBLOCK\">EFD_NONBLOCK</a> != <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#EFD_FLAGS_SET\">EFD_FLAGS_SET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#ctx\">ctx</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_init\">kref_init</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wqh\">wqh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#anon_inode_getfile\">anon_inode_getfile</a>(\"[eventfd]\", &amp;<a class=\"id\" href=\"#eventfd_fops\">eventfd_fops</a>, <a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#O_RDWR\">O_RDWR</a> | (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EFD_SHARED_FCNTL_FLAGS\">EFD_SHARED_FCNTL_FLAGS</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eventfd_free_ctx\">eventfd_free_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file\">file</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#eventfd2\">eventfd2</a>, unsigned int, <a class=\"id\" href=\"#count\">count</a>, int, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_unused_fd_flags\">get_unused_fd_flags</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EFD_SHARED_FCNTL_FLAGS\">EFD_SHARED_FCNTL_FLAGS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#eventfd_file_create\">eventfd_file_create</a>(<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#file\">file</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_put_unused_fd\">err_put_unused_fd</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd_install\">fd_install</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fd\">fd</a>;", 
"", 
"<a class=\"id\" href=\"#err_put_unused_fd\">err_put_unused_fd</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unused_fd\">put_unused_fd</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#eventfd\">eventfd</a>, unsigned int, <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_eventfd2\">sys_eventfd2</a>(<a class=\"id\" href=\"#count\">count</a>, 0);", 
"}", 
"", 
];
xr_frag_insert('l/6a/d3dcaee5d1159d0651aa627ee6cb660ab0d99d.xr', __xr_tmp);
