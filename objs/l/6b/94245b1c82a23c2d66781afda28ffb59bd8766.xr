var __xr_tmp = [
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fcheck_files\">fcheck_files</a>(<a class=\"id\" href=\"#files\">files</a>, <a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_long_inc_not_zero\">atomic_long_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_count\">f_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* File object ref couldn't be taken */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file\">file</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#fget\">fget</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lightweight file lookup - no refcnt increment if fd table isn't shared.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You can use this instead of fget if you satisfy all of the following</span>", 
"<span class=\"comment\"> * conditions:</span>", 
"<span class=\"comment\"> * 1) You must call fput_light before exiting the syscall and returning control</span>", 
"<span class=\"comment\"> *    to userspace (i.e. you cannot remember the returned struct file * after</span>", 
"<span class=\"comment\"> *    returning to userspace).</span>", 
"<span class=\"comment\"> * 2) You must not call filp_close on the returned struct file * in between</span>", 
"<span class=\"comment\"> *    calls to fget_light and fput_light.</span>", 
"<span class=\"comment\"> * 3) You must not clone the current task in between the calls to fget_light</span>", 
"<span class=\"comment\"> *    and fput_light.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The fput_needed flag returned by fget_light should be passed to the</span>", 
"<span class=\"comment\"> * corresponding fput_light.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#fget_light\">fget_light</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, int *<a class=\"id\" href=\"#fput_needed\">fput_needed</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#fput_needed\">fput_needed</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>((<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#count\">count</a>) == 1))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fcheck_files\">fcheck_files</a>(<a class=\"id\" href=\"#files\">files</a>, <a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fcheck_files\">fcheck_files</a>(<a class=\"id\" href=\"#files\">files</a>, <a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_long_inc_not_zero\">atomic_long_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_count\">f_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#fput_needed\">fput_needed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Didn't get the reference, someone's freed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file\">file</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#put_filp\">put_filp</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_long_dec_and_test\">atomic_long_dec_and_test</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_count\">f_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_file_free\">security_file_free</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_sb_list_del\">file_sb_list_del</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_free\">file_free</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#file_list_cpu\">file_list_cpu</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_sb_list_cpu\">f_sb_list_cpu</a>;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* helper for file_sb_list_add to reduce ifdefs */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__file_sb_list_add\">__file_sb_list_add</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_sb_list_cpu\">f_sb_list_cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_files\">s_files</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_files\">s_files</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_u\">f_u</a>.<a class=\"id\" href=\"#fu_list\">fu_list</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * file_sb_list_add - add a file to the sb's file list</span>", 
"<span class=\"comment\"> * @file: file to add</span>", 
"<span class=\"comment\"> * @sb: sb to add it to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use this function to associate a file with the superblock of the inode it</span>", 
"<span class=\"comment\"> * refers to.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#file_sb_list_add\">file_sb_list_add</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lg_local_lock\">lg_local_lock</a>(<a class=\"id\" href=\"#files_lglock\">files_lglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__file_sb_list_add\">__file_sb_list_add</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lg_local_unlock\">lg_local_unlock</a>(<a class=\"id\" href=\"#files_lglock\">files_lglock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * file_sb_list_del - remove a file from the sb's file list</span>", 
"<span class=\"comment\"> * @file: file to remove</span>", 
"<span class=\"comment\"> * @sb: sb to remove it from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use this function to remove a file from its superblock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#file_sb_list_del\">file_sb_list_del</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_u\">f_u</a>.<a class=\"id\" href=\"#fu_list\">fu_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lg_local_lock_cpu\">lg_local_lock_cpu</a>(<a class=\"id\" href=\"#files_lglock\">files_lglock</a>, <a class=\"id\" href=\"#file_list_cpu\">file_list_cpu</a>(<a class=\"id\" href=\"#file\">file</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_u\">f_u</a>.<a class=\"id\" href=\"#fu_list\">fu_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lg_local_unlock_cpu\">lg_local_unlock_cpu</a>(<a class=\"id\" href=\"#files_lglock\">files_lglock</a>, <a class=\"id\" href=\"#file_list_cpu\">file_list_cpu</a>(<a class=\"id\" href=\"#file\">file</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These macros iterate all files on all CPUs for a given superblock.</span>", 
"<span class=\"comment\"> * files_lglock must be held globally.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_file_list_for_each_entry\">do_file_list_for_each_entry</a>(<a class=\"id\" href=\"#__sb\">__sb</a>, <a class=\"id\" href=\"#__file\">__file</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>((<a class=\"id\" href=\"#__sb\">__sb</a>)-><a class=\"id\" href=\"#s_files\">s_files</a>, <a class=\"id\" href=\"#i\">i</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>((<a class=\"id\" href=\"#__file\">__file</a>), <a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#f_u\">f_u</a>.<a class=\"id\" href=\"#fu_list\">fu_list</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#while_file_list_for_each_entry\">while_file_list_for_each_entry</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_file_list_for_each_entry\">do_file_list_for_each_entry</a>(<a class=\"id\" href=\"#__sb\">__sb</a>, <a class=\"id\" href=\"#__file\">__file</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_files\">s_files</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>((<a class=\"id\" href=\"#__file\">__file</a>), <a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#f_u\">f_u</a>.<a class=\"id\" href=\"#fu_list\">fu_list</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#while_file_list_for_each_entry\">while_file_list_for_each_entry</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#fs_may_remount_ro\">fs_may_remount_ro</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Check that no files are currently opened for writing. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lg_global_lock\">lg_global_lock</a>(<a class=\"id\" href=\"#files_lglock\">files_lglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_file_list_for_each_entry\">do_file_list_for_each_entry</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* File with pending delete? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#too_bad\">too_bad</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Writeable file? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#too_bad\">too_bad</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_file_list_for_each_entry\">while_file_list_for_each_entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lg_global_unlock\">lg_global_unlock</a>(<a class=\"id\" href=\"#files_lglock\">files_lglock</a>);", 
"<span class=\"ts\"/>return 1; <span class=\"comment\">/* Tis' cool bro. */</span>", 
"<a class=\"id\" href=\"#too_bad\">too_bad</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lg_global_unlock\">lg_global_unlock</a>(<a class=\"id\" href=\"#files_lglock\">files_lglock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mark_files_ro - mark all files read-only</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb: superblock in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>All files are marked read-only.  We don't care about pending</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>delete files so this should be used in 'force' mode only.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mark_files_ro\">mark_files_ro</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lg_global_lock\">lg_global_lock</a>(<a class=\"id\" href=\"#files_lglock\">files_lglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_file_list_for_each_entry\">do_file_list_for_each_entry</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#f\">f</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>       continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#file_count\">file_count</a>(<a class=\"id\" href=\"#f\">f</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &= ~<a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file_check_writeable\">file_check_writeable</a>(<a class=\"id\" href=\"#f\">f</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_release_write\">file_release_write</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This can sleep, so we can't hold the spinlock. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lg_global_unlock\">lg_global_unlock</a>(<a class=\"id\" href=\"#files_lglock\">files_lglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_file_list_for_each_entry\">while_file_list_for_each_entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lg_global_unlock\">lg_global_unlock</a>(<a class=\"id\" href=\"#files_lglock\">files_lglock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#files_init\">files_init</a>(unsigned long <a class=\"id\" href=\"#mempages\">mempages</a>)", 
"{ ", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>; ", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp_cachep\">filp_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"filp\", sizeof(struct <a class=\"id\" href=\"#file\">file</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a> | <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * One file with associated inode and dcache is very roughly 1K.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Per default don't use more than 10% of our memory for files. </span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span> ", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = (<a class=\"id\" href=\"#mempages\">mempages</a> * (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / 1024)) / 10;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#files_stat\">files_stat</a>.<a class=\"id\" href=\"#max_files\">max_files</a> = <a class=\"id\" href=\"#n\">n</a>; ", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#files_stat\">files_stat</a>.<a class=\"id\" href=\"#max_files\">max_files</a> &lt; <a class=\"id\" href=\"#NR_FILE\">NR_FILE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#files_stat\">files_stat</a>.<a class=\"id\" href=\"#max_files\">max_files</a> = <a class=\"id\" href=\"#NR_FILE\">NR_FILE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#files_defer_init\">files_defer_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lg_lock_init\">lg_lock_init</a>(<a class=\"id\" href=\"#files_lglock\">files_lglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_init\">percpu_counter_init</a>(&amp;<a class=\"id\" href=\"#nr_files\">nr_files</a>, 0);", 
"} ", 
];
xr_frag_insert('l/6b/94245b1c82a23c2d66781afda28ffb59bd8766.xr', __xr_tmp);
