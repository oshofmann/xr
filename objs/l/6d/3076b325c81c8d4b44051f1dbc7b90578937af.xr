var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cgroup_freezer.c -  control group freezer subsystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright IBM Corporation, 2007</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author : Cedric Le Goater &lt;clg@fr.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify it</span>", 
"<span class=\"comment\"> * under the terms of version 2.1 of the GNU Lesser General Public License</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it would be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroup\">cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"enum <a class=\"id\" href=\"#freezer_state\">freezer_state</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CGROUP_THAWED\">CGROUP_THAWED</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CGROUP_FREEZING\">CGROUP_FREEZING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CGROUP_FROZEN\">CGROUP_FROZEN</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#freezer\">freezer</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> <a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#freezer_state\">freezer_state</a> <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>; <span class=\"comment\">/* protects _writes_ to state */</span>", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#freezer\">freezer</a> *<a class=\"id\" href=\"#cgroup_freezer\">cgroup_freezer</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>, <a class=\"id\" href=\"#freezer_subsys_id\">freezer_subsys_id</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#freezer\">freezer</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#freezer\">freezer</a> *<a class=\"id\" href=\"#task_freezer\">task_freezer</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#task_subsys_state\">task_subsys_state</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#freezer_subsys_id\">freezer_subsys_id</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#freezer\">freezer</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#cgroup_freezing_or_frozen\">cgroup_freezing_or_frozen</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#freezer\">freezer</a> *<a class=\"id\" href=\"#freezer\">freezer</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#freezer_state\">freezer_state</a> <a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freezer\">freezer</a> = <a class=\"id\" href=\"#task_freezer\">task_freezer</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#css\">css</a>.<a class=\"id\" href=\"#cgroup\">cgroup</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#CGROUP_THAWED\">CGROUP_THAWED</a>; <span class=\"comment\">/* root cgroup can't be frozen */</span>", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#CGROUP_FREEZING\">CGROUP_FREEZING</a>) || (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#CGROUP_FROZEN\">CGROUP_FROZEN</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cgroups_write_string() limits the size of freezer state strings to</span>", 
"<span class=\"comment\"> * CGROUP_LOCAL_BUFFER_SIZE</span>", 
"<span class=\"comment\"> */</span>", 
"static const char *<a class=\"id\" href=\"#freezer_state_strs\">freezer_state_strs</a>[] = {", 
"<span class=\"ts\"/>\"THAWED\",", 
"<span class=\"ts\"/>\"FREEZING\",", 
"<span class=\"ts\"/>\"FROZEN\",", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * State diagram</span>", 
"<span class=\"comment\"> * Transitions are caused by userspace writes to the freezer.state file.</span>", 
"<span class=\"comment\"> * The values in parenthesis are state labels. The rest are edge labels.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (THAWED) --FROZEN--&gt; (FREEZING) --FROZEN--&gt; (FROZEN)</span>", 
"<span class=\"comment\"> *    ^ ^                    |                     |</span>", 
"<span class=\"comment\"> *    | \\_______THAWED_______/                     |</span>", 
"<span class=\"comment\"> *    \\__________________________THAWED____________/</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> <a class=\"id\" href=\"#freezer_subsys\">freezer_subsys</a>;", 
"", 
"<span class=\"comment\">/* Locks taken and their ordering</span>", 
"<span class=\"comment\"> * ------------------------------</span>", 
"<span class=\"comment\"> * cgroup_mutex (AKA cgroup_lock)</span>", 
"<span class=\"comment\"> * freezer-&gt;lock</span>", 
"<span class=\"comment\"> * css_set_lock</span>", 
"<span class=\"comment\"> * task-&gt;alloc_lock (AKA task_lock)</span>", 
"<span class=\"comment\"> * task-&gt;sighand-&gt;siglock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cgroup code forces css_set_lock to be taken before task-&gt;alloc_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * freezer_create(), freezer_destroy():</span>", 
"<span class=\"comment\"> * cgroup_mutex [ by cgroup core ]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * freezer_can_attach():</span>", 
"<span class=\"comment\"> * cgroup_mutex (held by caller of can_attach)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cgroup_freezing_or_frozen():</span>", 
"<span class=\"comment\"> * task-&gt;alloc_lock (to get task's cgroup)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * freezer_fork() (preserving fork() performance means can't take cgroup_mutex):</span>", 
"<span class=\"comment\"> * freezer-&gt;lock</span>", 
"<span class=\"comment\"> *  sighand-&gt;siglock (if the cgroup is freezing)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * freezer_read():</span>", 
"<span class=\"comment\"> * cgroup_mutex</span>", 
"<span class=\"comment\"> *  freezer-&gt;lock</span>", 
"<span class=\"comment\"> *   write_lock css_set_lock (cgroup iterator start)</span>", 
"<span class=\"comment\"> *    task-&gt;alloc_lock</span>", 
"<span class=\"comment\"> *   read_lock css_set_lock (cgroup iterator start)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * freezer_write() (freeze):</span>", 
"<span class=\"comment\"> * cgroup_mutex</span>", 
"<span class=\"comment\"> *  freezer-&gt;lock</span>", 
"<span class=\"comment\"> *   write_lock css_set_lock (cgroup iterator start)</span>", 
"<span class=\"comment\"> *    task-&gt;alloc_lock</span>", 
"<span class=\"comment\"> *   read_lock css_set_lock (cgroup iterator start)</span>", 
"<span class=\"comment\"> *    sighand-&gt;siglock (fake signal delivery inside freeze_task())</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * freezer_write() (unfreeze):</span>", 
"<span class=\"comment\"> * cgroup_mutex</span>", 
"<span class=\"comment\"> *  freezer-&gt;lock</span>", 
"<span class=\"comment\"> *   write_lock css_set_lock (cgroup iterator start)</span>", 
"<span class=\"comment\"> *    task-&gt;alloc_lock</span>", 
"<span class=\"comment\"> *   read_lock css_set_lock (cgroup iterator start)</span>", 
"<span class=\"comment\"> *    task-&gt;alloc_lock (inside thaw_process(), prevents race with refrigerator())</span>", 
"<span class=\"comment\"> *     sighand-&gt;siglock</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#freezer_create\">freezer_create</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#freezer\">freezer</a> *<a class=\"id\" href=\"#freezer\">freezer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freezer\">freezer</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#freezer\">freezer</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#freezer\">freezer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#CGROUP_THAWED\">CGROUP_THAWED</a>;", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#css\">css</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#freezer_destroy\">freezer_destroy</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cgroup_freezer\">cgroup_freezer</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>));", 
"}", 
"", 
"<span class=\"comment\">/* Task is frozen or will freeze immediately when next it gets woken */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_task_frozen_enough\">is_task_frozen_enough</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#frozen\">frozen</a>(<a class=\"id\" href=\"#task\">task</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#task_is_stopped_or_traced\">task_is_stopped_or_traced</a>(<a class=\"id\" href=\"#task\">task</a>) && <a class=\"id\" href=\"#freezing\">freezing</a>(<a class=\"id\" href=\"#task\">task</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The call to cgroup_lock() in the freezer.state write method prevents</span>", 
"<span class=\"comment\"> * a write to that file racing against an attach, and hence the</span>", 
"<span class=\"comment\"> * can_attach() result will remain valid until the attach completes.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#freezer_can_attach\">freezer_can_attach</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#new_cgroup\">new_cgroup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#threadgroup\">threadgroup</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#freezer\">freezer</a> *<a class=\"id\" href=\"#freezer\">freezer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Anything frozen can't move or be moved to/from.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since orig_freezer-&gt;state == FROZEN means that @task has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * frozen, so it's sufficient to check the latter condition.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_task_frozen_enough\">is_task_frozen_enough</a>(<a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freezer\">freezer</a> = <a class=\"id\" href=\"#cgroup_freezer\">cgroup_freezer</a>(<a class=\"id\" href=\"#new_cgroup\">new_cgroup</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#CGROUP_FROZEN\">CGROUP_FROZEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#threadgroup\">threadgroup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#c\">c</a>, &amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread_group\">thread_group</a>, <a class=\"id\" href=\"#thread_group\">thread_group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_task_frozen_enough\">is_task_frozen_enough</a>(<a class=\"id\" href=\"#c\">c</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#freezer_fork\">freezer_fork</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#freezer\">freezer</a> *<a class=\"id\" href=\"#freezer\">freezer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No lock is needed, since the task isn't on tasklist yet,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so it can't be moved to another cgroup, which means the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * freezer won't be removed and will be valid during this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * function call.  Nevertheless, apply RCU read-side critical</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * section to suppress RCU lockdep false positives.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freezer\">freezer</a> = <a class=\"id\" href=\"#task_freezer\">task_freezer</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The root cgroup is non-freezable, so we can skip the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * following check.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#css\">css</a>.<a class=\"id\" href=\"#cgroup\">cgroup</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#CGROUP_FROZEN\">CGROUP_FROZEN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Locking avoids race with FREEZING -&gt; THAWED transitions. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#CGROUP_FREEZING\">CGROUP_FREEZING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freeze_task\">freeze_task</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * caller must hold freezer-&gt;lock</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#update_freezer_state\">update_freezer_state</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#freezer\">freezer</a> *<a class=\"id\" href=\"#freezer\">freezer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> <a class=\"id\" href=\"#it\">it</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nfrozen\">nfrozen</a> = 0, <a class=\"id\" href=\"#ntotal\">ntotal</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_iter_start\">cgroup_iter_start</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>, &amp;<a class=\"id\" href=\"#it\">it</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#cgroup_iter_next\">cgroup_iter_next</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>, &amp;<a class=\"id\" href=\"#it\">it</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ntotal\">ntotal</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_task_frozen_enough\">is_task_frozen_enough</a>(<a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nfrozen\">nfrozen</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Transition to FROZEN when no new tasks can be added ensures</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that we never exist in the FROZEN state while there are unfrozen</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nfrozen\">nfrozen</a> == <a class=\"id\" href=\"#ntotal\">ntotal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#CGROUP_FROZEN\">CGROUP_FROZEN</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#nfrozen\">nfrozen</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#CGROUP_FREEZING\">CGROUP_FREEZING</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#CGROUP_THAWED\">CGROUP_THAWED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_iter_end\">cgroup_iter_end</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>, &amp;<a class=\"id\" href=\"#it\">it</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#freezer_read\">freezer_read</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#freezer\">freezer</a> *<a class=\"id\" href=\"#freezer\">freezer</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#freezer_state\">freezer_state</a> <a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgroup_lock_live_group\">cgroup_lock_live_group</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freezer\">freezer</a> = <a class=\"id\" href=\"#cgroup_freezer\">cgroup_freezer</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#CGROUP_FREEZING\">CGROUP_FREEZING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We change from FREEZING to FROZEN lazily if the cgroup was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only partially frozen when we exitted write. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_freezer_state\">update_freezer_state</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>, <a class=\"id\" href=\"#freezer\">freezer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#freezer\">freezer</a>-><a class=\"id\" href=\"#state\">state</a>;", 
];
xr_frag_insert('l/6d/3076b325c81c8d4b44051f1dbc7b90578937af.xr', __xr_tmp);
