var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_SCSI_SCSI_TCQ_H\">_SCSI_SCSI_TCQ_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_SCSI_SCSI_TCQ_H\">_SCSI_SCSI_TCQ_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_device\">scsi_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_host\">scsi_host</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MSG_SIMPLE_TAG\">MSG_SIMPLE_TAG</a><span class=\"ts\"/>0x20", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MSG_HEAD_TAG\">MSG_HEAD_TAG</a><span class=\"ts\"/>0x21", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MSG_ORDERED_TAG\">MSG_ORDERED_TAG</a><span class=\"ts\"/>0x22", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCSI_NO_TAG\">SCSI_NO_TAG</a><span class=\"ts\"/>(-1)    <span class=\"comment\">/* identify no tag in use */</span>", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_get_tag_type - get the type of tag the device supports</span>", 
"<span class=\"comment\"> * @sdev:<span class=\"ts\"/>the scsi device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the drive only supports simple tags, returns MSG_SIMPLE_TAG</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if it supports all tag types, returns MSG_ORDERED_TAG.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#scsi_get_tag_type\">scsi_get_tag_type</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#tagged_supported\">tagged_supported</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#ordered_tags\">ordered_tags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#MSG_ORDERED_TAG\">MSG_ORDERED_TAG</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#simple_tags\">simple_tags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#MSG_SIMPLE_TAG\">MSG_SIMPLE_TAG</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#scsi_set_tag_type\">scsi_set_tag_type</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#tag\">tag</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MSG_ORDERED_TAG\">MSG_ORDERED_TAG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#ordered_tags\">ordered_tags</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MSG_SIMPLE_TAG\">MSG_SIMPLE_TAG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#simple_tags\">simple_tags</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#ordered_tags\">ordered_tags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#simple_tags\">simple_tags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_activate_tcq - turn on tag command queueing</span>", 
"<span class=\"comment\"> * @SDpnt:<span class=\"ts\"/>device to turn on TCQ for</span>", 
"<span class=\"comment\"> * @depth:<span class=\"ts\"/>queue depth</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Eventually, I hope depth would be the maximum depth</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the device could cope with and the real queue depth</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>would be adjustable from 0 to depth.</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#scsi_activate_tcq\">scsi_activate_tcq</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#tagged_supported\">tagged_supported</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#blk_queue_tagged\">blk_queue_tagged</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_init_tags\">blk_queue_init_tags</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#depth\">depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#bqt\">bqt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_adjust_queue_depth\">scsi_adjust_queue_depth</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#scsi_get_tag_type\">scsi_get_tag_type</a>(<a class=\"id\" href=\"#sdev\">sdev</a>), <a class=\"id\" href=\"#depth\">depth</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_deactivate_tcq - turn off tag command queueing</span>", 
"<span class=\"comment\"> * @SDpnt:<span class=\"ts\"/>device to turn off TCQ for</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#scsi_deactivate_tcq\">scsi_deactivate_tcq</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_queue_tagged\">blk_queue_tagged</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_free_tags\">blk_queue_free_tags</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_adjust_queue_depth\">scsi_adjust_queue_depth</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, 0, <a class=\"id\" href=\"#depth\">depth</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_populate_tag_msg - place a tag message in a buffer</span>", 
"<span class=\"comment\"> * @SCpnt:<span class=\"ts\"/>pointer to the Scsi_Cmnd for the tag</span>", 
"<span class=\"comment\"> * @msg:<span class=\"ts\"/>pointer to the area to place the tag</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>designed to create the correct type of tag message for the </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>particular request.  Returns the size of the tag message.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>May return 0 if TCQ is disabled for this device.</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#scsi_populate_tag_msg\">scsi_populate_tag_msg</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, char *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"        struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#request\">request</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"", 
"        if (<a class=\"id\" href=\"#blk_rq_tagged\">blk_rq_tagged</a>(<a class=\"id\" href=\"#req\">req</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#ordered_tags\">ordered_tags</a> && <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>)", 
"        <span class=\"ts\"/>        *<a class=\"id\" href=\"#msg\">msg</a>++ = <a class=\"id\" href=\"#MSG_ORDERED_TAG\">MSG_ORDERED_TAG</a>;", 
"        <span class=\"ts\"/>else", 
"        <span class=\"ts\"/>        *<a class=\"id\" href=\"#msg\">msg</a>++ = <a class=\"id\" href=\"#MSG_SIMPLE_TAG\">MSG_SIMPLE_TAG</a>;", 
"        <span class=\"ts\"/>*<a class=\"id\" href=\"#msg\">msg</a>++ = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#tag\">tag</a>;", 
"        <span class=\"ts\"/>return 2;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_find_tag - find a tagged command by device</span>", 
"<span class=\"comment\"> * @SDpnt:<span class=\"ts\"/>pointer to the ScSI device</span>", 
"<span class=\"comment\"> * @tag:<span class=\"ts\"/>the tag number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Only works with tags allocated by the generic blk layer.</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scsi_find_tag\">scsi_find_tag</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"", 
"        struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>;", 
"", 
"        if (<a class=\"id\" href=\"#tag\">tag</a> != <a class=\"id\" href=\"#SCSI_NO_TAG\">SCSI_NO_TAG</a>) {", 
"        <span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#blk_queue_find_tag\">blk_queue_find_tag</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/>        return <a class=\"id\" href=\"#req\">req</a> ? (struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *)<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* single command, look in space */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#current_cmnd\">current_cmnd</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_init_shared_tag_map - create a shared tag map</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>the host to share the tag map among all devices</span>", 
"<span class=\"comment\"> * @depth:<span class=\"ts\"/>the total depth of the map</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#scsi_init_shared_tag_map\">scsi_init_shared_tag_map</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>, int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the shared tag map isn't already initialized, do it now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This saves callers from having to check -&gt;bqt when setting up</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * devices on the shared host (for libata)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#bqt\">bqt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#bqt\">bqt</a> = <a class=\"id\" href=\"#blk_init_tags\">blk_init_tags</a>(<a class=\"id\" href=\"#depth\">depth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#bqt\">bqt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_host_find_tag - find the tagged command by host</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>pointer to scsi_host</span>", 
"<span class=\"comment\"> * @tag:<span class=\"ts\"/>tag of the scsi_cmnd</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Only works with tags allocated by the generic blk layer.</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scsi_host_find_tag\">scsi_host_find_tag</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tag\">tag</a> != <a class=\"id\" href=\"#SCSI_NO_TAG\">SCSI_NO_TAG</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#blk_map_queue_find_tag\">blk_map_queue_find_tag</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#bqt\">bqt</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#req\">req</a> ? (struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *)<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_BLOCK */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _SCSI_SCSI_TCQ_H */</span>", 
];
xr_frag_insert('l/6d/6ffb58343956b1c04591f5bb5d7b29481a9b71.xr', __xr_tmp);
