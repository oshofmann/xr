var __xr_tmp = [
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#booldatum\">booldatum</a>-><a class=\"id\" href=\"#value\">value</a> || <a class=\"id\" href=\"#booldatum\">booldatum</a>-><a class=\"id\" href=\"#value\">value</a> &gt; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p_bools\">p_bools</a>.<a class=\"id\" href=\"#nprim\">nprim</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p_bool_val_to_name\">p_bool_val_to_name</a>[<a class=\"id\" href=\"#booldatum\">booldatum</a>-><a class=\"id\" href=\"#value\">value</a> - 1] = <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bool_val_to_struct\">bool_val_to_struct</a>[<a class=\"id\" href=\"#booldatum\">booldatum</a>-><a class=\"id\" href=\"#value\">value</a> - 1] = <a class=\"id\" href=\"#booldatum\">booldatum</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#bool_isvalid\">bool_isvalid</a>(struct <a class=\"id\" href=\"#cond_bool_datum\">cond_bool_datum</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#state\">state</a> == 0 || <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#state\">state</a> == 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"int <a class=\"id\" href=\"#cond_read_bool\">cond_read_bool</a>(struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#hashtab\">hashtab</a> *<a class=\"id\" href=\"#h\">h</a>, void *<a class=\"id\" href=\"#fp\">fp</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_bool_datum\">cond_bool_datum</a> *<a class=\"id\" href=\"#booldatum\">booldatum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#buf\">buf</a>[3];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#booldatum\">booldatum</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#cond_bool_datum\">cond_bool_datum</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#booldatum\">booldatum</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#next_entry\">next_entry</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#fp\">fp</a>, sizeof <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#booldatum\">booldatum</a>-><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#buf\">buf</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#booldatum\">booldatum</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#buf\">buf</a>[1]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bool_isvalid\">bool_isvalid</a>(<a class=\"id\" href=\"#booldatum\">booldatum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#buf\">buf</a>[2]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#len\">len</a> + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#key\">key</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#next_entry\">next_entry</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#fp\">fp</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>[<a class=\"id\" href=\"#len\">len</a>] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#hashtab_insert\">hashtab_insert</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#booldatum\">booldatum</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_destroy_bool\">cond_destroy_bool</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#booldatum\">booldatum</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#cond_insertf_data\">cond_insertf_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_av_list\">cond_av_list</a> *<a class=\"id\" href=\"#other\">other</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_av_list\">cond_av_list</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_av_list\">cond_av_list</a> *<a class=\"id\" href=\"#tail\">tail</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#cond_insertf\">cond_insertf</a>(struct <a class=\"id\" href=\"#avtab\">avtab</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#avtab_key\">avtab_key</a> *<a class=\"id\" href=\"#k\">k</a>, struct <a class=\"id\" href=\"#avtab_datum\">avtab_datum</a> *<a class=\"id\" href=\"#d\">d</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_insertf_data\">cond_insertf_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_av_list\">cond_av_list</a> *<a class=\"id\" href=\"#other\">other</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#other\">other</a>, *<a class=\"id\" href=\"#list\">list</a>, *<a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avtab_node\">avtab_node</a> *<a class=\"id\" href=\"#node_ptr\">node_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For type rules we have to make certain there aren't any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * conflicting rules by searching the te_avtab and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cond_te_avtab.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#specified\">specified</a> &amp; <a class=\"id\" href=\"#AVTAB_TYPE\">AVTAB_TYPE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#avtab_search\">avtab_search</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#te_avtab\">te_avtab</a>, <a class=\"id\" href=\"#k\">k</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SELinux: type rule already exists outside of a conditional.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we are reading the false list other will be a pointer to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the true list. We can have duplicate entries if there is only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 1 other entry and it is in our true list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we are reading the true list (other == NULL) there shouldn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be any other entries.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#other\">other</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_ptr\">node_ptr</a> = <a class=\"id\" href=\"#avtab_search_node\">avtab_search_node</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#te_cond_avtab\">te_cond_avtab</a>, <a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node_ptr\">node_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#avtab_search_node_next\">avtab_search_node_next</a>(<a class=\"id\" href=\"#node_ptr\">node_ptr</a>, <a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#specified\">specified</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SELinux: too many conflicting type rules.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#other\">other</a>; <a class=\"id\" href=\"#cur\">cur</a>; <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#node_ptr\">node_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#found\">found</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SELinux: conflicting type rules.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#avtab_search\">avtab_search</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#te_cond_avtab\">te_cond_avtab</a>, <a class=\"id\" href=\"#k\">k</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SELinux: conflicting type rules when adding type rule for true.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_ptr\">node_ptr</a> = <a class=\"id\" href=\"#avtab_insert_nonunique\">avtab_insert_nonunique</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#te_cond_avtab\">te_cond_avtab</a>, <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_ptr\">node_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SELinux: could not insert rule.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#cond_av_list\">cond_av_list</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#node_ptr\">node_ptr</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_av_list_destroy\">cond_av_list_destroy</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cond_read_av_list\">cond_read_av_list</a>(struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#fp\">fp</a>, struct <a class=\"id\" href=\"#cond_av_list\">cond_av_list</a> **<a class=\"id\" href=\"#ret_list\">ret_list</a>, struct <a class=\"id\" href=\"#cond_av_list\">cond_av_list</a> *<a class=\"id\" href=\"#other\">other</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#buf\">buf</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_insertf_data\">cond_insertf_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ret_list\">ret_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#next_entry\">next_entry</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#fp\">fp</a>, sizeof(<a class=\"id\" href=\"#u32\">u32</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#buf\">buf</a>[0]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#other\">other</a> = <a class=\"id\" href=\"#other\">other</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avtab_read_item\">avtab_read_item</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#te_cond_avtab\">te_cond_avtab</a>, <a class=\"id\" href=\"#fp\">fp</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cond_insertf\">cond_insertf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ret_list\">ret_list</a> = <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#expr_isvalid\">expr_isvalid</a>(struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#cond_expr\">cond_expr</a> *<a class=\"id\" href=\"#expr\">expr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#expr\">expr</a>-><a class=\"id\" href=\"#expr_type\">expr_type</a> <= 0 || <a class=\"id\" href=\"#expr\">expr</a>-><a class=\"id\" href=\"#expr_type\">expr_type</a> &gt; <a class=\"id\" href=\"#COND_LAST\">COND_LAST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SELinux: conditional expressions uses unknown operator.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#expr\">expr</a>-><a class=\"id\" href=\"#bool\">bool</a> &gt; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p_bools\">p_bools</a>.<a class=\"id\" href=\"#nprim\">nprim</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SELinux: conditional expressions uses unknown bool.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cond_read_node\">cond_read_node</a>(struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#cond_node\">cond_node</a> *<a class=\"id\" href=\"#node\">node</a>, void *<a class=\"id\" href=\"#fp\">fp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#buf\">buf</a>[2];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_expr\">cond_expr</a> *<a class=\"id\" href=\"#expr\">expr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#next_entry\">next_entry</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#fp\">fp</a>, sizeof(<a class=\"id\" href=\"#u32\">u32</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#cur_state\">cur_state</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#buf\">buf</a>[0]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#next_entry\">next_entry</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#fp\">fp</a>, sizeof(<a class=\"id\" href=\"#u32\">u32</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* expr */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#buf\">buf</a>[0]);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#next_entry\">next_entry</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#fp\">fp</a>, sizeof(<a class=\"id\" href=\"#u32\">u32</a>) * 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expr\">expr</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#cond_expr\">cond_expr</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#expr\">expr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expr\">expr</a>-><a class=\"id\" href=\"#expr_type\">expr_type</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#buf\">buf</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expr\">expr</a>-><a class=\"id\" href=\"#bool\">bool</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#buf\">buf</a>[1]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#expr_isvalid\">expr_isvalid</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#expr\">expr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#expr\">expr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#expr\">expr</a> = <a class=\"id\" href=\"#expr\">expr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#expr\">expr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#expr\">expr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cond_read_av_list\">cond_read_av_list</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#fp\">fp</a>, &amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#true_list\">true_list</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cond_read_av_list\">cond_read_av_list</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#fp\">fp</a>, &amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#false_list\">false_list</a>, <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#true_list\">true_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_node_destroy\">cond_node_destroy</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#cond_read_list\">cond_read_list</a>(struct <a class=\"id\" href=\"#policydb\">policydb</a> *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#fp\">fp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cond_node\">cond_node</a> *<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#buf\">buf</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#next_entry\">next_entry</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#fp\">fp</a>, sizeof <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#buf\">buf</a>[0]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avtab_alloc\">avtab_alloc</a>(&amp;(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#te_cond_avtab\">te_cond_avtab</a>), <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#te_avtab\">te_avtab</a>.<a class=\"id\" href=\"#nel\">nel</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#cond_node\">cond_node</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cond_read_node\">cond_read_node</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#fp\">fp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cond_list\">cond_list</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_list_destroy\">cond_list_destroy</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cond_list\">cond_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cond_list\">cond_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Determine whether additional permissions are granted by the conditional</span>", 
"<span class=\"comment\"> * av table, and if so, add them to the result</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cond_compute_av\">cond_compute_av</a>(struct <a class=\"id\" href=\"#avtab\">avtab</a> *<a class=\"id\" href=\"#ctab\">ctab</a>, struct <a class=\"id\" href=\"#avtab_key\">avtab_key</a> *<a class=\"id\" href=\"#key\">key</a>, struct <a class=\"id\" href=\"#av_decision\">av_decision</a> *<a class=\"id\" href=\"#avd\">avd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#avtab_node\">avtab_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctab\">ctab</a> || !<a class=\"id\" href=\"#key\">key</a> || !<a class=\"id\" href=\"#avd\">avd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#avtab_search_node\">avtab_search_node</a>(<a class=\"id\" href=\"#ctab\">ctab</a>, <a class=\"id\" href=\"#key\">key</a>); <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#avtab_search_node_next\">avtab_search_node_next</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#specified\">specified</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#u16\">u16</a>)(<a class=\"id\" href=\"#AVTAB_ALLOWED\">AVTAB_ALLOWED</a>|<a class=\"id\" href=\"#AVTAB_ENABLED\">AVTAB_ENABLED</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#specified\">specified</a> &amp; (<a class=\"id\" href=\"#AVTAB_ALLOWED\">AVTAB_ALLOWED</a>|<a class=\"id\" href=\"#AVTAB_ENABLED\">AVTAB_ENABLED</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avd\">avd</a>-><a class=\"id\" href=\"#allowed\">allowed</a> |= <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#datum\">datum</a>.<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#u16\">u16</a>)(<a class=\"id\" href=\"#AVTAB_AUDITDENY\">AVTAB_AUDITDENY</a>|<a class=\"id\" href=\"#AVTAB_ENABLED\">AVTAB_ENABLED</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#specified\">specified</a> &amp; (<a class=\"id\" href=\"#AVTAB_AUDITDENY\">AVTAB_AUDITDENY</a>|<a class=\"id\" href=\"#AVTAB_ENABLED\">AVTAB_ENABLED</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Since a '0' in an auditdeny mask represents a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * permission we do NOT want to audit (dontaudit), we use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the '&amp;' operand to ensure that all '0's in the mask</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * are retained (much unlike the allow and auditallow cases).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avd\">avd</a>-><a class=\"id\" href=\"#auditdeny\">auditdeny</a> &= <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#datum\">datum</a>.<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#u16\">u16</a>)(<a class=\"id\" href=\"#AVTAB_AUDITALLOW\">AVTAB_AUDITALLOW</a>|<a class=\"id\" href=\"#AVTAB_ENABLED\">AVTAB_ENABLED</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#specified\">specified</a> &amp; (<a class=\"id\" href=\"#AVTAB_AUDITALLOW\">AVTAB_AUDITALLOW</a>|<a class=\"id\" href=\"#AVTAB_ENABLED\">AVTAB_ENABLED</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avd\">avd</a>-><a class=\"id\" href=\"#auditallow\">auditallow</a> |= <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#datum\">datum</a>.<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"}", 
];
xr_frag_insert('l/6d/9ee48331e4713a97b9a3aeaf460ea47b217685.xr', __xr_tmp);
