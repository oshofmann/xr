var __xr_tmp = [
"<span class=\"comment\">/* ------------------------------------------------------------------------- */</span>", 
"<span class=\"comment\">/*<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     */</span>", 
"<span class=\"comment\">/* i2c.h - definitions for the i2c-bus interface<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     */</span>", 
"<span class=\"comment\">/*<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     */</span>", 
"<span class=\"comment\">/* ------------------------------------------------------------------------- */</span>", 
"<span class=\"comment\">/*   Copyright (C) 1995-2000 Simon G. Vogl</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\">    it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\">    the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\">    (at your option) any later version.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\">    GNU General Public License for more details.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\">    along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\">    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.<span class=\"ts\"/><span class=\"ts\"/>     */</span>", 
"<span class=\"comment\">/* ------------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/* With some changes from Kyösti Mälkki &lt;kmalkki@cc.hut.fi&gt; and</span>", 
"<span class=\"comment\">   Frodo Looijaard &lt;frodol@dds.nl&gt; */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_I2C_H\">_LINUX_I2C_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_I2C_H\">_LINUX_I2C_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#i2c\">i2c</a>-<a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mod_devicetable\">mod_devicetable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"comment\">/* for struct device */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"comment\">/* for completion */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#of\">of</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for struct device_node */</span>", 
"", 
"extern struct <a class=\"id\" href=\"#bus_type\">bus_type</a> <a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>;", 
"extern struct <a class=\"id\" href=\"#device_type\">device_type</a> <a class=\"id\" href=\"#i2c_adapter_type\">i2c_adapter_type</a>;", 
"", 
"<span class=\"comment\">/* --- General options ------------------------------------------------<span class=\"ts\"/>*/</span>", 
"", 
"struct <a class=\"id\" href=\"#i2c_msg\">i2c_msg</a>;", 
"struct <a class=\"id\" href=\"#i2c_algorithm\">i2c_algorithm</a>;", 
"struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a>;", 
"struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a>;", 
"struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a>;", 
"union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a>;", 
"struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a>;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_I2C\">CONFIG_I2C</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_I2C_MODULE\">CONFIG_I2C_MODULE</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The master routines are the ones normally used to transmit data to devices</span>", 
"<span class=\"comment\"> * on a bus (or read from them). Apart from two basic transfer functions to</span>", 
"<span class=\"comment\"> * transmit one message at a time, a more complex version can be used to</span>", 
"<span class=\"comment\"> * transmit an arbitrary number of messages without interruption.</span>", 
"<span class=\"comment\"> * @count must be be less than 64k since msg.len is u16.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#i2c_master_send\">i2c_master_send</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#count\">count</a>);", 
"extern int <a class=\"id\" href=\"#i2c_master_recv\">i2c_master_recv</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"comment\">/* Transfer num messages.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#i2c_transfer\">i2c_transfer</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>, struct <a class=\"id\" href=\"#i2c_msg\">i2c_msg</a> *<a class=\"id\" href=\"#msgs\">msgs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a>);", 
"", 
"<span class=\"comment\">/* This is the very generalized SMBus access routine. You probably do not</span>", 
"<span class=\"comment\">   want to use this, though; one of the functions below may be much easier,</span>", 
"<span class=\"comment\">   and probably just as fast.</span>", 
"<span class=\"comment\">   Note that we use i2c_adapter here, because you do not need a specific</span>", 
"<span class=\"comment\">   smbus adapter to call this function. */</span>", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_xfer\">i2c_smbus_xfer</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned short <a class=\"id\" href=\"#flags\">flags</a>, char <a class=\"id\" href=\"#read_write\">read_write</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#size\">size</a>, union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"comment\">/* Now follow the 'nice' access routines. These also document the calling</span>", 
"<span class=\"comment\">   conventions of i2c_smbus_xfer. */</span>", 
"", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_read_byte\">i2c_smbus_read_byte</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>);", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_write_byte\">i2c_smbus_write_byte</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#value\">value</a>);", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_read_byte_data\">i2c_smbus_read_byte_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>);", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_write_byte_data\">i2c_smbus_write_byte_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#value\">value</a>);", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_read_word_data\">i2c_smbus_read_word_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>);", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_write_word_data\">i2c_smbus_write_word_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"comment\">/* Returns the number of read bytes */</span>", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_read_block_data\">i2c_smbus_read_block_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#values\">values</a>);", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_write_block_data\">i2c_smbus_write_block_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#length\">length</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#values\">values</a>);", 
"<span class=\"comment\">/* Returns the number of read bytes */</span>", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_read_i2c_block_data\">i2c_smbus_read_i2c_block_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#values\">values</a>);", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#i2c_smbus_write_i2c_block_data\">i2c_smbus_write_i2c_block_data</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#values\">values</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* I2C */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct i2c_driver - represent an I2C device driver</span>", 
"<span class=\"comment\"> * @class: What kind of i2c device we instantiate (for detect)</span>", 
"<span class=\"comment\"> * @attach_adapter: Callback for bus addition (for legacy drivers)</span>", 
"<span class=\"comment\"> * @detach_adapter: Callback for bus removal (for legacy drivers)</span>", 
"<span class=\"comment\"> * @probe: Callback for device binding</span>", 
"<span class=\"comment\"> * @remove: Callback for device unbinding</span>", 
"<span class=\"comment\"> * @shutdown: Callback for device shutdown</span>", 
"<span class=\"comment\"> * @suspend: Callback for device suspend</span>", 
"<span class=\"comment\"> * @resume: Callback for device resume</span>", 
"<span class=\"comment\"> * @alert: Alert callback, for example for the SMBus alert protocol</span>", 
"<span class=\"comment\"> * @command: Callback for bus-wide signaling (optional)</span>", 
"<span class=\"comment\"> * @driver: Device driver model driver</span>", 
"<span class=\"comment\"> * @id_table: List of I2C devices supported by this driver</span>", 
"<span class=\"comment\"> * @detect: Callback for device detection</span>", 
"<span class=\"comment\"> * @address_list: The I2C addresses to probe (for detect)</span>", 
"<span class=\"comment\"> * @clients: List of detected clients we created (for i2c-core use only)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The driver.owner field should be set to the module owner of this driver.</span>", 
"<span class=\"comment\"> * The driver.name field should be set to the name of this driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For automatic device detection, both @detect and @address_data must</span>", 
"<span class=\"comment\"> * be defined. @class should also be set, otherwise only devices forced</span>", 
"<span class=\"comment\"> * with module parameters will be created. The detect function must</span>", 
"<span class=\"comment\"> * fill at least the name field of the i2c_board_info structure it is</span>", 
"<span class=\"comment\"> * handed upon successful detection, and possibly also the flags field.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @detect is missing, the driver will still work fine for enumerated</span>", 
"<span class=\"comment\"> * devices. Detected devices simply won't be supported. This is expected</span>", 
"<span class=\"comment\"> * for the many I2C/SMBus devices which can't be detected reliably, and</span>", 
"<span class=\"comment\"> * the ones which can always be enumerated in practice.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The i2c_client structure which is handed to the @detect callback is</span>", 
"<span class=\"comment\"> * not a real i2c_client. It is initialized just enough so that you can</span>", 
"<span class=\"comment\"> * call i2c_smbus_read_byte_data and friends on it. Don't do anything</span>", 
"<span class=\"comment\"> * else with it. In particular, calling dev_dbg and friends on it is</span>", 
"<span class=\"comment\"> * not allowed.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#class\">class</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Notifies the driver that a new bus has appeared or is about to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * removed. You should avoid using this if you can, it will probably</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be removed in a near future.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#attach_adapter\">attach_adapter</a>)(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#detach_adapter\">detach_adapter</a>)(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Standard driver model interfaces */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#probe\">probe</a>)(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *, const struct <a class=\"id\" href=\"#i2c_device_id\">i2c_device_id</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#remove\">remove</a>)(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* driver model interfaces that don't relate to enumeration  */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#shutdown\">shutdown</a>)(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#suspend\">suspend</a>)(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#mesg\">mesg</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#resume\">resume</a>)(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Alert callback, for example for the SMBus alert protocol.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The format and meaning of the data value depends on the protocol.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For the SMBus alert protocol, there is a single bit of data passed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as the alert response's low bit (\"event flag\").</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#alert\">alert</a>)(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *, unsigned int <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* a ioctl like command that can be used to perform specific functions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with the device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#command\">command</a>)(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, void *<a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> <a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#i2c_device_id\">i2c_device_id</a> *<a class=\"id\" href=\"#id_table\">id_table</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Device detection callback for automatic device creation */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#detect\">detect</a>)(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *, struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> *);", 
"<span class=\"ts\"/>const unsigned short *<a class=\"id\" href=\"#address_list\">address_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#clients\">clients</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_i2c_driver\">to_i2c_driver</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a>, <a class=\"id\" href=\"#driver\">driver</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct i2c_client - represent an I2C slave device</span>", 
"<span class=\"comment\"> * @flags: I2C_CLIENT_TEN indicates the device uses a ten bit chip address;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>I2C_CLIENT_PEC indicates it uses SMBus Packet Error Checking</span>", 
"<span class=\"comment\"> * @addr: Address used on the I2C bus connected to the parent adapter.</span>", 
"<span class=\"comment\"> * @name: Indicates the type of the device, usually a chip name that's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>generic enough to hide second-sourcing and compatible revisions.</span>", 
"<span class=\"comment\"> * @adapter: manages the bus segment hosting this I2C device</span>", 
"<span class=\"comment\"> * @driver: device's driver, hence pointer to access routines</span>", 
"<span class=\"comment\"> * @dev: Driver model device node for the slave.</span>", 
"<span class=\"comment\"> * @irq: indicates the IRQ generated by this device (if any)</span>", 
"<span class=\"comment\"> * @detected: member of an i2c_driver.clients list or i2c-core's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>userspace_devices list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * An i2c_client identifies a single device (i.e. chip) connected to an</span>", 
"<span class=\"comment\"> * i2c bus. The behaviour exposed to Linux is defined by the driver</span>", 
"<span class=\"comment\"> * managing the device.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> {", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* div., see below<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#addr\">addr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* chip address - NOTE: 7bit<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* addresses are stored in the<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* _LOWER_ 7 bits<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#I2C_NAME_SIZE\">I2C_NAME_SIZE</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>;<span class=\"ts\"/><span class=\"comment\">/* the adapter we sit on<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>;<span class=\"ts\"/><span class=\"comment\">/* and our access routines<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#dev\">dev</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the device structure<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#irq\">irq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* irq issued by device<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#detected\">detected</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_i2c_client\">to_i2c_client</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"", 
"extern struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#i2c_verify_client\">i2c_verify_client</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#kobj_to_i2c_client\">kobj_to_i2c_client</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> * const <a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#to_i2c_client\">to_i2c_client</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#i2c_get_clientdata\">i2c_get_clientdata</a>(const struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#i2c_set_clientdata\">i2c_set_clientdata</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct i2c_board_info - template for device creation</span>", 
"<span class=\"comment\"> * @type: chip type, to initialize i2c_client.name</span>", 
"<span class=\"comment\"> * @flags: to initialize i2c_client.flags</span>", 
"<span class=\"comment\"> * @addr: stored in i2c_client.addr</span>", 
"<span class=\"comment\"> * @platform_data: stored in i2c_client.dev.platform_data</span>", 
"<span class=\"comment\"> * @archdata: copied into i2c_client.dev.archdata</span>", 
"<span class=\"comment\"> * @of_node: pointer to OpenFirmware device node</span>", 
"<span class=\"comment\"> * @irq: stored in i2c_client.irq</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * I2C doesn't actually support hardware probing, although controllers and</span>", 
"<span class=\"comment\"> * devices may be able to use I2C_SMBUS_QUICK to tell whether or not there's</span>", 
"<span class=\"comment\"> * a device at a given address.  Drivers commonly need more information than</span>", 
"<span class=\"comment\"> * that, such as chip type, configuration, associated IRQ, and so on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * i2c_board_info is used to build tables of information listing I2C devices</span>", 
"<span class=\"comment\"> * that are present.  This information is used to grow the driver model tree.</span>", 
"<span class=\"comment\"> * For mainboards this is done statically using i2c_register_board_info();</span>", 
"<span class=\"comment\"> * bus numbers identify adapters that aren't yet available.  For add-on boards,</span>", 
"<span class=\"comment\"> * i2c_new_device() does this dynamically with the adapter already known.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> {", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>[<a class=\"id\" href=\"#I2C_NAME_SIZE\">I2C_NAME_SIZE</a>];", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#platform_data\">platform_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dev_archdata\">dev_archdata</a><span class=\"ts\"/>*<a class=\"id\" href=\"#archdata\">archdata</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_OF\">CONFIG_OF</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_node\">of_node</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * I2C_BOARD_INFO - macro used to list an i2c device and its address</span>", 
"<span class=\"comment\"> * @dev_type: identifies the device type</span>", 
"<span class=\"comment\"> * @dev_addr: the device's address on the bus.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro initializes essential fields of a struct i2c_board_info,</span>", 
"<span class=\"comment\"> * declaring what has been provided on a particular board.  Optional</span>", 
"<span class=\"comment\"> * fields (such as associated irq, or device-specific platform_data)</span>", 
"<span class=\"comment\"> * are provided using conventional syntax.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_BOARD_INFO\">I2C_BOARD_INFO</a>(<a class=\"id\" href=\"#dev_type\">dev_type</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>) \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#dev_type\">dev_type</a>, .<a class=\"id\" href=\"#addr\">addr</a> = (<a class=\"id\" href=\"#dev_addr\">dev_addr</a>)", 
"", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_I2C\">CONFIG_I2C</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_I2C_MODULE\">CONFIG_I2C_MODULE</a>)", 
"<span class=\"comment\">/* Add-on boards should register/unregister their devices; e.g. a board</span>", 
"<span class=\"comment\"> * with integrated I2C, a config eeprom, sensors, and a codec that's</span>", 
"<span class=\"comment\"> * used in conjunction with the primary hardware.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *", 
"<a class=\"id\" href=\"#i2c_new_device\">i2c_new_device</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>, struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> const *<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"comment\">/* If you don't know the exact address of an I2C device, use this variant</span>", 
"<span class=\"comment\"> * instead, which can probe for device presence in a list of possible</span>", 
"<span class=\"comment\"> * addresses. The \"probe\" callback function is optional. If it is provided,</span>", 
"<span class=\"comment\"> * it must return 1 on successful probe, 0 otherwise. If it is not provided,</span>", 
"<span class=\"comment\"> * a default probing method is used.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *", 
"<a class=\"id\" href=\"#i2c_new_probed_device\">i2c_new_probed_device</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned short const *<a class=\"id\" href=\"#addr_list\">addr_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int (*<a class=\"id\" href=\"#probe\">probe</a>)(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *, unsigned short <a class=\"id\" href=\"#addr\">addr</a>));", 
"", 
"<span class=\"comment\">/* Common custom probe functions */</span>", 
"extern int <a class=\"id\" href=\"#i2c_probe_func_quick_read\">i2c_probe_func_quick_read</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *, unsigned short <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"comment\">/* For devices that use several addresses, use i2c_new_dummy() to make</span>", 
"<span class=\"comment\"> * client handles for the extra addresses.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *", 
"<a class=\"id\" href=\"#i2c_new_dummy\">i2c_new_dummy</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"extern void <a class=\"id\" href=\"#i2c_unregister_device\">i2c_unregister_device</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* I2C */</span>", 
"", 
"<span class=\"comment\">/* Mainboard arch_initcall() code should register all its I2C devices.</span>", 
"<span class=\"comment\"> * This is done at arch_initcall time, before declaring any i2c adapters.</span>", 
"<span class=\"comment\"> * Modules for add-on boards must use other calls.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_I2C_BOARDINFO\">CONFIG_I2C_BOARDINFO</a>", 
"extern int", 
"<a class=\"id\" href=\"#i2c_register_board_info\">i2c_register_board_info</a>(int <a class=\"id\" href=\"#busnum\">busnum</a>, struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> const *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#n\">n</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#i2c_register_board_info\">i2c_register_board_info</a>(int <a class=\"id\" href=\"#busnum\">busnum</a>, struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> const *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* I2C_BOARDINFO */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following structs are for those who like to implement new bus drivers:</span>", 
"<span class=\"comment\"> * i2c_algorithm is the interface to a class of hardware solutions which can</span>", 
"<span class=\"comment\"> * be addressed using the same bus algorithms - i.e. bit-banging or the PCF8584</span>", 
"<span class=\"comment\"> * to name two of the most common.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#i2c_algorithm\">i2c_algorithm</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* If an adapter algorithm can't do I2C-level access, set master_xfer</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   to NULL. If an adapter algorithm can do SMBus access, set</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   smbus_xfer. If set to NULL, the SMBus protocol is simulated</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   using common I2C messages */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* master_xfer should return the number of messages successfully</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   processed, or a negative value on error */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#master_xfer\">master_xfer</a>)(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>, struct <a class=\"id\" href=\"#i2c_msg\">i2c_msg</a> *<a class=\"id\" href=\"#msgs\">msgs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#smbus_xfer\">smbus_xfer</a>) (struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned short <a class=\"id\" href=\"#flags\">flags</a>, char <a class=\"id\" href=\"#read_write\">read_write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>, int <a class=\"id\" href=\"#size\">size</a>, union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* To determine what the adapter supports */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> (*<a class=\"id\" href=\"#functionality\">functionality</a>) (struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *);", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i2c_adapter is the structure used to identify a physical i2c bus along</span>", 
"<span class=\"comment\"> * with the access algorithms necessary to access it.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#class\">class</a>;<span class=\"ts\"/><span class=\"ts\"/>  <span class=\"comment\">/* classes to allow probing for */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#i2c_algorithm\">i2c_algorithm</a> *<a class=\"id\" href=\"#algo\">algo</a>; <span class=\"comment\">/* the algorithm to access the bus */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#algo_data\">algo_data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* data fields that are valid for all devices<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_mutex\">rt_mutex</a> <a class=\"id\" href=\"#bus_lock\">bus_lock</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#timeout\">timeout</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* in jiffies */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retries\">retries</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#dev\">dev</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the adapter device */</span>", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[48];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#dev_released\">dev_released</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#userspace_clients_lock\">userspace_clients_lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#userspace_clients\">userspace_clients</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_i2c_adapter\">to_i2c_adapter</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#i2c_get_adapdata\">i2c_get_adapdata</a>(const struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#i2c_set_adapdata\">i2c_set_adapdata</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#i2c_parent_is_i2c_adapter\">i2c_parent_is_i2c_adapter</a>(const struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adapter\">adapter</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> != <a class=\"id\" href=\"#NULL\">NULL</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#bus\">bus</a> == &amp;<a class=\"id\" href=\"#i2c_bus_type\">i2c_bus_type</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#adapter\">adapter</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#type\">type</a> == &amp;<a class=\"id\" href=\"#i2c_adapter_type\">i2c_adapter_type</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Adapter locking functions, exported for shared pin cases */</span>", 
"void <a class=\"id\" href=\"#i2c_lock_adapter\">i2c_lock_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *);", 
"void <a class=\"id\" href=\"#i2c_unlock_adapter\">i2c_unlock_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *);", 
"", 
"<span class=\"comment\">/*flags for the client struct: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_CLIENT_PEC\">I2C_CLIENT_PEC</a><span class=\"ts\"/>0x04<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Use Packet Error Checking */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_CLIENT_TEN\">I2C_CLIENT_TEN</a><span class=\"ts\"/>0x10<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we have a ten bit chip address */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Must equal I2C_M_TEN below */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_CLIENT_WAKE\">I2C_CLIENT_WAKE</a><span class=\"ts\"/>0x80<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for board_info; true iff can wake */</span>", 
"", 
"<span class=\"comment\">/* i2c adapter classes (bitmask) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_CLASS_HWMON\">I2C_CLASS_HWMON</a><span class=\"ts\"/><span class=\"ts\"/>(1<<0)<span class=\"ts\"/><span class=\"comment\">/* lm_sensors, ... */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_CLASS_TV_ANALOG\">I2C_CLASS_TV_ANALOG</a><span class=\"ts\"/>(1<<1)<span class=\"ts\"/><span class=\"comment\">/* bttv + friends */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_CLASS_TV_DIGITAL\">I2C_CLASS_TV_DIGITAL</a><span class=\"ts\"/>(1<<2)<span class=\"ts\"/><span class=\"comment\">/* dvb cards */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_CLASS_DDC\">I2C_CLASS_DDC</a><span class=\"ts\"/><span class=\"ts\"/>(1<<3)<span class=\"ts\"/><span class=\"comment\">/* DDC bus on graphics adapters */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_CLASS_SPD\">I2C_CLASS_SPD</a><span class=\"ts\"/><span class=\"ts\"/>(1<<7)<span class=\"ts\"/><span class=\"comment\">/* SPD EEPROMs and similar */</span>", 
"", 
"<span class=\"comment\">/* Internal numbers to terminate lists */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_CLIENT_END\">I2C_CLIENT_END</a><span class=\"ts\"/><span class=\"ts\"/>0xfffeU", 
"", 
"<span class=\"comment\">/* The numbers to use to set I2C bus address */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ANY_I2C_BUS\">ANY_I2C_BUS</a><span class=\"ts\"/><span class=\"ts\"/>0xffff", 
"", 
"<span class=\"comment\">/* Construct an I2C_CLIENT_END-terminated array of i2c addresses */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_ADDRS\">I2C_ADDRS</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addrs\">addrs</a>...) \\", 
"<span class=\"ts\"/>((const unsigned short []){ <a class=\"id\" href=\"#addr\">addr</a>, ## <a class=\"id\" href=\"#addrs\">addrs</a>, <a class=\"id\" href=\"#I2C_CLIENT_END\">I2C_CLIENT_END</a> })", 
"", 
"", 
"<span class=\"comment\">/* ----- functions exported by i2c.o */</span>", 
"", 
"<span class=\"comment\">/* administration...</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_I2C\">CONFIG_I2C</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_I2C_MODULE\">CONFIG_I2C_MODULE</a>)", 
"extern int <a class=\"id\" href=\"#i2c_add_adapter\">i2c_add_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *);", 
"extern int <a class=\"id\" href=\"#i2c_del_adapter\">i2c_del_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *);", 
"extern int <a class=\"id\" href=\"#i2c_add_numbered_adapter\">i2c_add_numbered_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *);", 
"", 
"extern int <a class=\"id\" href=\"#i2c_register_driver\">i2c_register_driver</a>(struct <a class=\"id\" href=\"#module\">module</a> *, struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *);", 
"extern void <a class=\"id\" href=\"#i2c_del_driver\">i2c_del_driver</a>(struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#i2c_add_driver\">i2c_add_driver</a>(struct <a class=\"id\" href=\"#i2c_driver\">i2c_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i2c_register_driver\">i2c_register_driver</a>(<a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, <a class=\"id\" href=\"#driver\">driver</a>);", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#i2c_use_client\">i2c_use_client</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>);", 
"extern void <a class=\"id\" href=\"#i2c_release_client\">i2c_release_client</a>(struct <a class=\"id\" href=\"#i2c_client\">i2c_client</a> *<a class=\"id\" href=\"#client\">client</a>);", 
"", 
"<span class=\"comment\">/* call the i2c_client-&gt;command() of all attached clients with</span>", 
"<span class=\"comment\"> * the given arguments */</span>", 
"extern void <a class=\"id\" href=\"#i2c_clients_command\">i2c_clients_command</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, void *<a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#i2c_get_adapter\">i2c_get_adapter</a>(int <a class=\"id\" href=\"#id\">id</a>);", 
"extern void <a class=\"id\" href=\"#i2c_put_adapter\">i2c_put_adapter</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>);", 
"", 
"", 
"<span class=\"comment\">/* Return the functionality mask */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i2c_get_functionality\">i2c_get_functionality</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#algo\">algo</a>-><a class=\"id\" href=\"#functionality\">functionality</a>(<a class=\"id\" href=\"#adap\">adap</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Return 1 if adapter supports everything we need, 0 if not. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#i2c_check_functionality\">i2c_check_functionality</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#func\">func</a> &amp; <a class=\"id\" href=\"#i2c_get_functionality\">i2c_get_functionality</a>(<a class=\"id\" href=\"#adap\">adap</a>)) == <a class=\"id\" href=\"#func\">func</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Return the adapter number for a specific adapter */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#i2c_adapter_id\">i2c_adapter_id</a>(struct <a class=\"id\" href=\"#i2c_adapter\">i2c_adapter</a> *<a class=\"id\" href=\"#adap\">adap</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#adap\">adap</a>-><a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* I2C */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct i2c_msg - an I2C transaction segment beginning with START</span>", 
"<span class=\"comment\"> * @addr: Slave address, either seven or ten bits.  When this is a ten</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bit address, I2C_M_TEN must be set in @flags and the adapter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>must support I2C_FUNC_10BIT_ADDR.</span>", 
"<span class=\"comment\"> * @flags: I2C_M_RD is handled by all adapters.  No other flags may be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>provided unless the adapter exported the relevant I2C_FUNC_*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>flags through i2c_check_functionality().</span>", 
"<span class=\"comment\"> * @len: Number of data bytes in @buf being read from or written to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>I2C slave address.  For read transactions where I2C_M_RECV_LEN</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is set, the caller guarantees that this buffer can hold up to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>32 bytes in addition to the initial length byte sent by the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>slave (plus, if used, the SMBus PEC); and this value will be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>incremented by the number of block data bytes received.</span>", 
"<span class=\"comment\"> * @buf: The buffer into which data is read, or from which it's written.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * An i2c_msg is the low level representation of one segment of an I2C</span>", 
"<span class=\"comment\"> * transaction.  It is visible to drivers in the @i2c_transfer() procedure,</span>", 
"<span class=\"comment\"> * to userspace from i2c-dev, and to I2C adapter drivers through the</span>", 
"<span class=\"comment\"> * @i2c_adapter.@master_xfer() method.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Except when I2C \"protocol mangling\" is used, all I2C adapters implement</span>", 
"<span class=\"comment\"> * the standard rules for I2C transactions.  Each transaction begins with a</span>", 
"<span class=\"comment\"> * START.  That is followed by the slave address, and a bit encoding read</span>", 
"<span class=\"comment\"> * versus write.  Then follow all the data bytes, possibly including a byte</span>", 
"<span class=\"comment\"> * with SMBus PEC.  The transfer terminates with a NAK, or when all those</span>", 
"<span class=\"comment\"> * bytes have been transferred and ACKed.  If this is the last message in a</span>", 
"<span class=\"comment\"> * group, it is followed by a STOP.  Otherwise it is followed by the next</span>", 
"<span class=\"comment\"> * @i2c_msg transaction segment, beginning with a (repeated) START.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, when the adapter supports I2C_FUNC_PROTOCOL_MANGLING then</span>", 
"<span class=\"comment\"> * passing certain @flags may have changed those standard protocol behaviors.</span>", 
"<span class=\"comment\"> * Those flags are only for use with broken/nonconforming slaves, and with</span>", 
"<span class=\"comment\"> * adapters which are known to support the specific mangling options they</span>", 
"<span class=\"comment\"> * need (one or more of IGNORE_NAK, NO_RD_ACK, NOSTART, and REV_DIR_ADDR).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#i2c_msg\">i2c_msg</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#addr\">addr</a>;<span class=\"ts\"/><span class=\"comment\">/* slave address<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_M_TEN\">I2C_M_TEN</a><span class=\"ts\"/><span class=\"ts\"/>0x0010<span class=\"ts\"/><span class=\"comment\">/* this is a ten bit chip address */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_M_RD\">I2C_M_RD</a><span class=\"ts\"/><span class=\"ts\"/>0x0001<span class=\"ts\"/><span class=\"comment\">/* read data, from slave to master */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_M_NOSTART\">I2C_M_NOSTART</a><span class=\"ts\"/><span class=\"ts\"/>0x4000<span class=\"ts\"/><span class=\"comment\">/* if I2C_FUNC_PROTOCOL_MANGLING */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_M_REV_DIR_ADDR\">I2C_M_REV_DIR_ADDR</a><span class=\"ts\"/>0x2000<span class=\"ts\"/><span class=\"comment\">/* if I2C_FUNC_PROTOCOL_MANGLING */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_M_IGNORE_NAK\">I2C_M_IGNORE_NAK</a><span class=\"ts\"/>0x1000<span class=\"ts\"/><span class=\"comment\">/* if I2C_FUNC_PROTOCOL_MANGLING */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_M_NO_RD_ACK\">I2C_M_NO_RD_ACK</a><span class=\"ts\"/><span class=\"ts\"/>0x0800<span class=\"ts\"/><span class=\"comment\">/* if I2C_FUNC_PROTOCOL_MANGLING */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_M_RECV_LEN\">I2C_M_RECV_LEN</a><span class=\"ts\"/><span class=\"ts\"/>0x0400<span class=\"ts\"/><span class=\"comment\">/* length will be first received byte */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#len\">len</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* msg length<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> *<a class=\"id\" href=\"#buf\">buf</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pointer to msg data<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"};", 
"", 
"<span class=\"comment\">/* To determine what functionality is present */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_I2C\">I2C_FUNC_I2C</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x00000001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_10BIT_ADDR\">I2C_FUNC_10BIT_ADDR</a><span class=\"ts\"/><span class=\"ts\"/>0x00000002", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_PROTOCOL_MANGLING\">I2C_FUNC_PROTOCOL_MANGLING</a><span class=\"ts\"/>0x00000004 <span class=\"comment\">/* I2C_M_NOSTART etc. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_PEC\">I2C_FUNC_SMBUS_PEC</a><span class=\"ts\"/><span class=\"ts\"/>0x00000008", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_BLOCK_PROC_CALL\">I2C_FUNC_SMBUS_BLOCK_PROC_CALL</a><span class=\"ts\"/>0x00008000 <span class=\"comment\">/* SMBus 2.0 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_QUICK\">I2C_FUNC_SMBUS_QUICK</a><span class=\"ts\"/><span class=\"ts\"/>0x00010000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_BYTE\">I2C_FUNC_SMBUS_READ_BYTE</a><span class=\"ts\"/>0x00020000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WRITE_BYTE\">I2C_FUNC_SMBUS_WRITE_BYTE</a><span class=\"ts\"/>0x00040000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_BYTE_DATA\">I2C_FUNC_SMBUS_READ_BYTE_DATA</a><span class=\"ts\"/>0x00080000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WRITE_BYTE_DATA\">I2C_FUNC_SMBUS_WRITE_BYTE_DATA</a><span class=\"ts\"/>0x00100000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_WORD_DATA\">I2C_FUNC_SMBUS_READ_WORD_DATA</a><span class=\"ts\"/>0x00200000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WRITE_WORD_DATA\">I2C_FUNC_SMBUS_WRITE_WORD_DATA</a><span class=\"ts\"/>0x00400000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_PROC_CALL\">I2C_FUNC_SMBUS_PROC_CALL</a><span class=\"ts\"/>0x00800000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_BLOCK_DATA\">I2C_FUNC_SMBUS_READ_BLOCK_DATA</a><span class=\"ts\"/>0x01000000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA\">I2C_FUNC_SMBUS_WRITE_BLOCK_DATA</a> 0x02000000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_I2C_BLOCK\">I2C_FUNC_SMBUS_READ_I2C_BLOCK</a><span class=\"ts\"/>0x04000000 <span class=\"comment\">/* I2C-like block xfer  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK\">I2C_FUNC_SMBUS_WRITE_I2C_BLOCK</a><span class=\"ts\"/>0x08000000 <span class=\"comment\">/* w/ 1-byte reg. addr. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_BYTE\">I2C_FUNC_SMBUS_BYTE</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_BYTE\">I2C_FUNC_SMBUS_READ_BYTE</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WRITE_BYTE\">I2C_FUNC_SMBUS_WRITE_BYTE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_BYTE_DATA\">I2C_FUNC_SMBUS_BYTE_DATA</a><span class=\"ts\"/>(<a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_BYTE_DATA\">I2C_FUNC_SMBUS_READ_BYTE_DATA</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WRITE_BYTE_DATA\">I2C_FUNC_SMBUS_WRITE_BYTE_DATA</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WORD_DATA\">I2C_FUNC_SMBUS_WORD_DATA</a><span class=\"ts\"/>(<a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_WORD_DATA\">I2C_FUNC_SMBUS_READ_WORD_DATA</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WRITE_WORD_DATA\">I2C_FUNC_SMBUS_WRITE_WORD_DATA</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_BLOCK_DATA\">I2C_FUNC_SMBUS_BLOCK_DATA</a><span class=\"ts\"/>(<a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_BLOCK_DATA\">I2C_FUNC_SMBUS_READ_BLOCK_DATA</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA\">I2C_FUNC_SMBUS_WRITE_BLOCK_DATA</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_I2C_BLOCK\">I2C_FUNC_SMBUS_I2C_BLOCK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#I2C_FUNC_SMBUS_READ_I2C_BLOCK\">I2C_FUNC_SMBUS_READ_I2C_BLOCK</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK\">I2C_FUNC_SMBUS_WRITE_I2C_BLOCK</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_EMUL\">I2C_FUNC_SMBUS_EMUL</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#I2C_FUNC_SMBUS_QUICK\">I2C_FUNC_SMBUS_QUICK</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_BYTE\">I2C_FUNC_SMBUS_BYTE</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_BYTE_DATA\">I2C_FUNC_SMBUS_BYTE_DATA</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WORD_DATA\">I2C_FUNC_SMBUS_WORD_DATA</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_PROC_CALL\">I2C_FUNC_SMBUS_PROC_CALL</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA\">I2C_FUNC_SMBUS_WRITE_BLOCK_DATA</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_I2C_BLOCK\">I2C_FUNC_SMBUS_I2C_BLOCK</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#I2C_FUNC_SMBUS_PEC\">I2C_FUNC_SMBUS_PEC</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Data for SMBus Messages</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a><span class=\"ts\"/>32<span class=\"ts\"/><span class=\"comment\">/* As specified in SMBus standard */</span>", 
"union <a class=\"id\" href=\"#i2c_smbus_data\">i2c_smbus_data</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#byte\">byte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#word\">word</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#block\">block</a>[<a class=\"id\" href=\"#I2C_SMBUS_BLOCK_MAX\">I2C_SMBUS_BLOCK_MAX</a> + 2]; <span class=\"comment\">/* block[0] is used for length */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <span class=\"comment\">/* and one more for user-space compatibility */</span>", 
"};", 
"", 
"<span class=\"comment\">/* i2c_smbus_xfer read or write markers */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_READ\">I2C_SMBUS_READ</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_WRITE\">I2C_SMBUS_WRITE</a><span class=\"ts\"/>0", 
"", 
"<span class=\"comment\">/* SMBus transaction types (size parameter in the above functions)</span>", 
"<span class=\"comment\">   Note: these no longer correspond to the (arbitrary) PIIX4 internal codes! */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_QUICK\">I2C_SMBUS_QUICK</a><span class=\"ts\"/><span class=\"ts\"/>    0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_BYTE\">I2C_SMBUS_BYTE</a><span class=\"ts\"/><span class=\"ts\"/>    1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_BYTE_DATA\">I2C_SMBUS_BYTE_DATA</a><span class=\"ts\"/>    2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_WORD_DATA\">I2C_SMBUS_WORD_DATA</a><span class=\"ts\"/>    3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_PROC_CALL\">I2C_SMBUS_PROC_CALL</a><span class=\"ts\"/>    4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_DATA\">I2C_SMBUS_BLOCK_DATA</a><span class=\"ts\"/>    5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_I2C_BLOCK_BROKEN\">I2C_SMBUS_I2C_BLOCK_BROKEN</a>  6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_BLOCK_PROC_CALL\">I2C_SMBUS_BLOCK_PROC_CALL</a>   7<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SMBus 2.0 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I2C_SMBUS_I2C_BLOCK_DATA\">I2C_SMBUS_I2C_BLOCK_DATA</a>    8", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_I2C_H */</span>", 
];
xr_frag_insert('l/6d/b4d87710dcf935d6064ac48df65bcb47950b63.xr', __xr_tmp);
