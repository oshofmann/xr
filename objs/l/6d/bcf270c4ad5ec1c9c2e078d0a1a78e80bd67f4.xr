var __xr_tmp = [
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Find an unused file structure and return a pointer to it.</span>", 
"<span class=\"comment\"> * Returns NULL, if there are no more free file structures or</span>", 
"<span class=\"comment\"> * we run out of memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Be very careful using this.  You are responsible for</span>", 
"<span class=\"comment\"> * getting write access to any mount that you might assign</span>", 
"<span class=\"comment\"> * to this filp, if it is opened for write.  If this is not</span>", 
"<span class=\"comment\"> * done, you will imbalance int the mount's writer count</span>", 
"<span class=\"comment\"> * and a warning at __fput() time.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#get_empty_filp\">get_empty_filp</a>(void)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#old_max\">old_max</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Privileged users can go above max_files</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_nr_files\">get_nr_files</a>() >= <a class=\"id\" href=\"#files_stat\">files_stat</a>.<a class=\"id\" href=\"#max_files\">max_files</a> && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * percpu_counters are inaccurate.  Do an expensive check before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we go and fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#percpu_counter_sum_positive\">percpu_counter_sum_positive</a>(&amp;<a class=\"id\" href=\"#nr_files\">nr_files</a>) >= <a class=\"id\" href=\"#files_stat\">files_stat</a>.<a class=\"id\" href=\"#max_files\">max_files</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#over\">over</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#filp_cachep\">filp_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_inc\">percpu_counter_inc</a>(&amp;<a class=\"id\" href=\"#nr_files\">nr_files</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#security_file_alloc\">security_file_alloc</a>(<a class=\"id\" href=\"#f\">f</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_sec\">fail_sec</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_u\">f_u</a>.<a class=\"id\" href=\"#fu_list\">fu_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_set\">atomic_long_set</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_count\">f_count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwlock_init\">rwlock_init</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_cred\">f_cred</a> = <a class=\"id\" href=\"#get_cred\">get_cred</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eventpoll_init_file\">eventpoll_init_file</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* f-&gt;f_version: 0 */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<a class=\"id\" href=\"#over\">over</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Ran out of filps - report that */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_nr_files\">get_nr_files</a>() &gt; <a class=\"id\" href=\"#old_max\">old_max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"VFS: file-max limit %d reached\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_max_files\">get_max_files</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_max\">old_max</a> = <a class=\"id\" href=\"#get_nr_files\">get_nr_files</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<a class=\"id\" href=\"#fail_sec\">fail_sec</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_free\">file_free</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * alloc_file - allocate and initialize a 'struct file'</span>", 
"<span class=\"comment\"> * @mnt: the vfsmount on which the file will reside</span>", 
"<span class=\"comment\"> * @dentry: the dentry representing the new file</span>", 
"<span class=\"comment\"> * @mode: the mode with which the new file will be opened</span>", 
"<span class=\"comment\"> * @fop: the 'struct file_operations' for the new file</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use this instead of get_empty_filp() to get a new</span>", 
"<span class=\"comment\"> * 'struct file'.  Do so because of the same initialization</span>", 
"<span class=\"comment\"> * pitfalls reasons listed for init_file().  This is a</span>", 
"<span class=\"comment\"> * preferred interface to using init_file().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If all the callers of init_file() are eliminated, its</span>", 
"<span class=\"comment\"> * code should be moved into this function.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#alloc_file\">alloc_file</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fop\">fop</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#get_empty_filp\">get_empty_filp</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a> = *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> = <a class=\"id\" href=\"#fop\">fop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * These mounts don't really matter in practice</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for r/o bind mounts.  They aren't userspace-</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * visible.  We do this for consistency, and so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that we can do debugging checks at __fput()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>) && !<a class=\"id\" href=\"#special_file\">special_file</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_take_write\">file_take_write</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#mnt_clone_write\">mnt_clone_write</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ima_counts_get\">ima_counts_get</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file\">file</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_file\">alloc_file</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * drop_file_write_access - give up ability to write to a file</span>", 
"<span class=\"comment\"> * @file: the file to which we will stop writing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a central place which will give up the ability</span>", 
"<span class=\"comment\"> * to write to @file, along with access to write through</span>", 
"<span class=\"comment\"> * its vfsmount.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#drop_file_write_access\">drop_file_write_access</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_write_access\">put_write_access</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#special_file\">special_file</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file_check_writeable\">file_check_writeable</a>(<a class=\"id\" href=\"#file\">file</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_release_write\">file_release_write</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#drop_file_write_access\">drop_file_write_access</a>);", 
"", 
"<span class=\"comment\">/* the real guts of fput() - releasing the last reference to file</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__fput\">__fput</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_close\">fsnotify_close</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The function eventpoll_release() should be the first called</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the file cleanup chain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eventpoll_release\">eventpoll_release</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_remove_flock\">locks_remove_flock</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#FASYNC\">FASYNC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#fasync\">fasync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#fasync\">fasync</a>(-1, <a class=\"id\" href=\"#file\">file</a>, 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#release\">release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_file_free\">security_file_free</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ima_file_free\">ima_file_free</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#S_ISCHR\">S_ISCHR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_cdev\">i_cdev</a> != <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cdev_put\">cdev_put</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_cdev\">i_cdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fops_put\">fops_put</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_pid\">put_pid</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>.<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_sb_list_del\">file_sb_list_del</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_file_write_access\">drop_file_write_access</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_free\">file_free</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#fput\">fput</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_long_dec_and_test\">atomic_long_dec_and_test</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_count\">f_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__fput\">__fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#fput\">fput</a>);", 
"", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#fget\">fget</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>)", 
];
xr_frag_insert('l/6d/bcf270c4ad5ec1c9c2e078d0a1a78e80bd67f4.xr', __xr_tmp);
