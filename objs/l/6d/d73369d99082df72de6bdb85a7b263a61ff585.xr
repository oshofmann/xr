var __xr_tmp = [
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: hwxface - Public ACPICA hardware interfaces</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_HARDWARE\">ACPI_HARDWARE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"hwxface\")", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_reset</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Set reset register in memory or IO space. Note: Does not</span>", 
"<span class=\"comment\"> *              support reset register in PCI config space, this must be</span>", 
"<span class=\"comment\"> *              handled separately.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_reset\">acpi_reset</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#reset_reg\">reset_reg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_reset\">acpi_reset</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reset_reg\">reset_reg</a> = &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#reset_register\">reset_register</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if the reset register is supported */</span>", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_FADT_RESET_REGISTER\">ACPI_FADT_RESET_REGISTER</a>) ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#reset_reg\">reset_reg</a>-><a class=\"id\" href=\"#address\">address</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NOT_EXIST\">AE_NOT_EXIST</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reset_reg\">reset_reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> == <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_IO\">ACPI_ADR_SPACE_SYSTEM_IO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For I/O space, write directly to the OSL. This bypasses the port</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * validation mechanism, which may block a valid write to the reset</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * register.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_write_port\">acpi_os_write_port</a>((<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a>) <a class=\"id\" href=\"#reset_reg\">reset_reg</a>-><a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#reset_value\">reset_value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#reset_reg\">reset_reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write the reset value to the reset register */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write\">acpi_hw_write</a>(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#reset_value\">reset_value</a>, <a class=\"id\" href=\"#reset_reg\">reset_reg</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_reset\">acpi_reset</a>)", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_read</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Value               - Where the value is returned</span>", 
"<span class=\"comment\"> *              Reg                 - GAS register structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Read from either memory or IO space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LIMITATIONS: &lt;These limitations also apply to acpi_write&gt;</span>", 
"<span class=\"comment\"> *      bit_width must be exactly 8, 16, 32, or 64.</span>", 
"<span class=\"comment\"> *      space_iD must be system_memory or system_iO.</span>", 
"<span class=\"comment\"> *      bit_offset and access_width are currently ignored, as there has</span>", 
"<span class=\"comment\"> *          not been a need to implement these.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_read\">acpi_read</a>(<a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#return_value\">return_value</a>, struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#width\">width</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#acpi_read\">acpi_read</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#return_value\">return_value</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate contents of the GAS register. Allow 64-bit transfers */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_validate_register\">acpi_hw_validate_register</a>(<a class=\"id\" href=\"#reg\">reg</a>, 64, &amp;<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#width\">width</a> = <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#width\">width</a> == 64) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#width\">width</a> = 32;<span class=\"ts\"/><span class=\"comment\">/* Break into two 32-bit transfers */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize entire 64-bit return value to zero */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#return_value\">return_value</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Two address spaces supported: Memory or IO. PCI_Config is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not supported here because the GAS structure is insufficient</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> == <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_MEMORY\">ACPI_ADR_SPACE_SYSTEM_MEMORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_read_memory\">acpi_os_read_memory</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#width\">width</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#return_value\">return_value</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> == 64) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Read the top 32 bits */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_read_memory\">acpi_os_read_memory</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#address\">address</a> + 4), &amp;<a class=\"id\" href=\"#value\">value</a>, 32);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#return_value\">return_value</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#value\">value</a> << 32);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ACPI_ADR_SPACE_SYSTEM_IO, validated earlier */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read_port\">acpi_hw_read_port</a>((<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#width\">width</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#return_value\">return_value</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> == 64) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Read the top 32 bits */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read_port\">acpi_hw_read_port</a>((<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#address\">address</a> + 4), &amp;<a class=\"id\" href=\"#value\">value</a>, 32);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#return_value\">return_value</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#value\">value</a> << 32);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_IO\">ACPI_DB_IO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Read:  %8.8X%8.8X width %2d from %8.8X%8.8X (%s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(*<a class=\"id\" href=\"#return_value\">return_value</a>), <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#address\">address</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_region_name\">acpi_ut_get_region_name</a>(<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a>)));", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_read\">acpi_read</a>)", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Value               - Value to be written</span>", 
"<span class=\"comment\"> *              Reg                 - GAS register structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Write to either memory or IO space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_write\">acpi_write</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#value\">value</a>, struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#width\">width</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#acpi_write\">acpi_write</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate contents of the GAS register. Allow 64-bit transfers */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_validate_register\">acpi_hw_validate_register</a>(<a class=\"id\" href=\"#reg\">reg</a>, 64, &amp;<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#width\">width</a> = <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#width\">width</a> == 64) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#width\">width</a> = 32;<span class=\"ts\"/><span class=\"comment\">/* Break into two 32-bit transfers */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Two address spaces supported: Memory or IO. PCI_Config is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not supported here because the GAS structure is insufficient</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> == <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_MEMORY\">ACPI_ADR_SPACE_SYSTEM_MEMORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_write_memory\">acpi_os_write_memory</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ACPI_LODWORD\">ACPI_LODWORD</a>(<a class=\"id\" href=\"#value\">value</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#width\">width</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> == 64) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_write_memory\">acpi_os_write_memory</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (<a class=\"id\" href=\"#address\">address</a> + 4),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_HIDWORD\">ACPI_HIDWORD</a>(<a class=\"id\" href=\"#value\">value</a>), 32);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ACPI_ADR_SPACE_SYSTEM_IO, validated earlier */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write_port\">acpi_hw_write_port</a>((<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ACPI_LODWORD\">ACPI_LODWORD</a>(<a class=\"id\" href=\"#value\">value</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#width\">width</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> == 64) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write_port\">acpi_hw_write_port</a>((<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#address\">address</a> + 4),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_HIDWORD\">ACPI_HIDWORD</a>(<a class=\"id\" href=\"#value\">value</a>), 32);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_IO\">ACPI_DB_IO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Wrote: %8.8X%8.8X width %2d   to %8.8X%8.8X (%s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#value\">value</a>), <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#address\">address</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_region_name\">acpi_ut_get_region_name</a>(<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a>)));", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_write\">acpi_write</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_read_bit_register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  register_id     - ID of ACPI Bit Register to access</span>", 
"<span class=\"comment\"> *              return_value    - Value that was read from the register,</span>", 
"<span class=\"comment\"> *                                normalized to bit position zero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status and the value read from the specified Register. Value</span>", 
"<span class=\"comment\"> *              returned is normalized to bit0 (is shifted all the way right)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: ACPI bit_register read function. Does not acquire the HW lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SUPPORTS:    Bit fields in PM1 Status, PM1 Enable, PM1 Control, and</span>", 
"<span class=\"comment\"> *              PM2 Control.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: The hardware lock is not required when reading the ACPI bit registers</span>", 
"<span class=\"comment\"> *       since almost all of them are single bit and it does not matter that</span>", 
"<span class=\"comment\"> *       the parent hardware register can be split across two physical</span>", 
"<span class=\"comment\"> *       registers. The only multi-bit field is SLP_TYP in the PM1 control</span>", 
"<span class=\"comment\"> *       register, but this field does not cross an 8-bit boundary (nor does</span>", 
"<span class=\"comment\"> *       it make much sense to actually read this field.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_read_bit_register\">acpi_read_bit_register</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_id\">register_id</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#return_value\">return_value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_bit_register_info\">acpi_bit_register_info</a> *<a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_value\">register_value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_U32\">ACPI_FUNCTION_TRACE_U32</a>(<a class=\"id\" href=\"#acpi_read_bit_register\">acpi_read_bit_register</a>, <a class=\"id\" href=\"#register_id\">register_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the info structure corresponding to the requested ACPI Register */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a> = <a class=\"id\" href=\"#acpi_hw_get_bit_register_info\">acpi_hw_get_bit_register_info</a>(<a class=\"id\" href=\"#register_id\">register_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Read the entire parent register */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_register_read\">acpi_hw_register_read</a>(<a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>-><a class=\"id\" href=\"#parent_register\">parent_register</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#register_value\">register_value</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Normalize the value that was read, mask off other bits */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = ((<a class=\"id\" href=\"#register_value\">register_value</a> &amp; <a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>-><a class=\"id\" href=\"#access_bit_mask\">access_bit_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/> >> <a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>-><a class=\"id\" href=\"#bit_position\">bit_position</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_IO\">ACPI_DB_IO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"BitReg %X, ParentReg %X, Actual %8.8X, ReturnValue %8.8X\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#register_id\">register_id</a>, <a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>-><a class=\"id\" href=\"#parent_register\">parent_register</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#register_value\">register_value</a>, <a class=\"id\" href=\"#value\">value</a>));", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#return_value\">return_value</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_read_bit_register\">acpi_read_bit_register</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_write_bit_register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  register_id     - ID of ACPI Bit Register to access</span>", 
"<span class=\"comment\"> *              Value           - Value to write to the register, in bit</span>", 
"<span class=\"comment\"> *                                position zero. The bit is automaticallly</span>", 
"<span class=\"comment\"> *                                shifted to the correct position.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: ACPI Bit Register write function. Acquires the hardware lock</span>", 
"<span class=\"comment\"> *              since most operations require a read/modify/write sequence.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SUPPORTS:    Bit fields in PM1 Status, PM1 Enable, PM1 Control, and</span>", 
"<span class=\"comment\"> *              PM2 Control.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that at this level, the fact that there may be actually two</span>", 
"<span class=\"comment\"> * hardware registers (A and B - and B may not exist) is abstracted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_id\">register_id</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_bit_register_info\">acpi_bit_register_info</a> *<a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_cpu_flags\">acpi_cpu_flags</a> <a class=\"id\" href=\"#lock_flags\">lock_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_value\">register_value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_U32\">ACPI_FUNCTION_TRACE_U32</a>(<a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>, <a class=\"id\" href=\"#register_id\">register_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the info structure corresponding to the requested ACPI Register */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a> = <a class=\"id\" href=\"#acpi_hw_get_bit_register_info\">acpi_hw_get_bit_register_info</a>(<a class=\"id\" href=\"#register_id\">register_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_flags\">lock_flags</a> = <a class=\"id\" href=\"#acpi_os_acquire_lock\">acpi_os_acquire_lock</a>(<a class=\"id\" href=\"#acpi_gbl_hardware_lock\">acpi_gbl_hardware_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point, we know that the parent register is one of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * following: PM1 Status, PM1 Enable, PM1 Control, or PM2 Control</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>-><a class=\"id\" href=\"#parent_register\">parent_register</a> != <a class=\"id\" href=\"#ACPI_REGISTER_PM1_STATUS\">ACPI_REGISTER_PM1_STATUS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 1) Case for PM1 Enable, PM1 Control, and PM2 Control</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Perform a register read to preserve the bits that we are not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * interested in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_register_read\">acpi_hw_register_read</a>(<a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>-><a class=\"id\" href=\"#parent_register\">parent_register</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#register_value\">register_value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Insert the input bit into the value that was just read</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and write the register</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_REGISTER_INSERT_VALUE\">ACPI_REGISTER_INSERT_VALUE</a>(<a class=\"id\" href=\"#register_value\">register_value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>-><a class=\"id\" href=\"#bit_position\">bit_position</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>-><a class=\"id\" href=\"#access_bit_mask\">access_bit_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_register_write\">acpi_hw_register_write</a>(<a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>-><a class=\"id\" href=\"#parent_register\">parent_register</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_value\">register_value</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 2) Case for PM1 Status</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The Status register is different from the rest. Clear an event</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by writing 1, writing 0 has no effect. So, the only relevant</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * information is the single bit we're interested in, all others</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * should be written as 0 so they will be left unchanged.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_value\">register_value</a> = <a class=\"id\" href=\"#ACPI_REGISTER_PREPARE_BITS\">ACPI_REGISTER_PREPARE_BITS</a>(<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bit_position\">bit_position</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#access_bit_mask\">access_bit_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No need to write the register if value is all zeros */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#register_value\">register_value</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_register_write\">acpi_hw_register_write</a>(<a class=\"id\" href=\"#ACPI_REGISTER_PM1_STATUS\">ACPI_REGISTER_PM1_STATUS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#register_value\">register_value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_IO\">ACPI_DB_IO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"BitReg %X, ParentReg %X, Value %8.8X, Actual %8.8X\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#register_id\">register_id</a>, <a class=\"id\" href=\"#bit_reg_info\">bit_reg_info</a>-><a class=\"id\" href=\"#parent_register\">parent_register</a>, <a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#register_value\">register_value</a>));", 
"", 
"<a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_release_lock\">acpi_os_release_lock</a>(<a class=\"id\" href=\"#acpi_gbl_hardware_lock\">acpi_gbl_hardware_lock</a>, <a class=\"id\" href=\"#lock_flags\">lock_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_get_sleep_type_data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  sleep_state         - Numeric sleep state</span>", 
"<span class=\"comment\"> *              *sleep_type_a        - Where SLP_TYPa is returned</span>", 
"<span class=\"comment\"> *              *sleep_type_b        - Where SLP_TYPb is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status - ACPI status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Obtain the SLP_TYPa and SLP_TYPb values for the requested sleep</span>", 
"<span class=\"comment\"> *              state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_get_sleep_type_data\">acpi_get_sleep_type_data</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sleep_state\">sleep_state</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#sleep_type_a\">sleep_type_a</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#sleep_type_b\">sleep_type_b</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a> *<a class=\"id\" href=\"#info\">info</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_get_sleep_type_data\">acpi_get_sleep_type_data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate parameters */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#sleep_state\">sleep_state</a> &gt; <a class=\"id\" href=\"#ACPI_S_STATES_MAX\">ACPI_S_STATES_MAX</a>) || !<a class=\"id\" href=\"#sleep_type_a\">sleep_type_a</a> || !<a class=\"id\" href=\"#sleep_type_b\">sleep_type_b</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate the evaluation information block */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_ZEROED\">ACPI_ALLOCATE_ZEROED</a>(sizeof(struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#pathname\">pathname</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, <a class=\"id\" href=\"#acpi_gbl_sleep_state_names\">acpi_gbl_sleep_state_names</a>[<a class=\"id\" href=\"#sleep_state\">sleep_state</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Evaluate the namespace object containing the values for this state */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_evaluate\">acpi_ns_evaluate</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%s while evaluating SleepState [%s]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_format_exception\">acpi_format_exception</a>(<a class=\"id\" href=\"#status\">status</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#pathname\">pathname</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must have a return object */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"No Sleep State object returned from [%s]\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#pathname\">pathname</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_NOT_EXIST\">AE_NOT_EXIST</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* It must be of type Package */</span>", 
"", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_PACKAGE\">ACPI_TYPE_PACKAGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Sleep State return object is not a Package\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_OPERAND_TYPE\">AE_AML_OPERAND_TYPE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The package must have at least two elements. NOTE (March 2005): This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * goes against the current ACPI spec which defines this object as a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * package with one encoded DWORD element. However, existing practice</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by BIOS vendors seems to be to have 2 or more elements, at least</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one per sleep type (A/B).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#count\">count</a> &lt; 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Sleep State return package does not have at least two elements\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_NO_OPERAND\">AE_AML_NO_OPERAND</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The first two elements must both be of type Integer */</span>", 
"", 
"<span class=\"ts\"/>else if (((<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[0])-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>  != <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/> ((<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[1])-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>  != <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Sleep State return package elements are not both Integers \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"(%s, %s)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_object_type_name\">acpi_ut_get_object_type_name</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[0]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_object_type_name\">acpi_ut_get_object_type_name</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[1])));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_OPERAND_TYPE\">AE_AML_OPERAND_TYPE</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Valid _Sx_ package size, type, and value */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sleep_type_a\">sleep_type_a</a> = (<a class=\"id\" href=\"#u8\">u8</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[0])-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sleep_type_b\">sleep_type_b</a> = (<a class=\"id\" href=\"#u8\">u8</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#package\">package</a>.<a class=\"id\" href=\"#elements\">elements</a>[1])-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"While evaluating SleepState [%s], bad Sleep object %p type %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_get_object_type_name\">acpi_ut_get_object_type_name</a>(<a class=\"id\" href=\"#info\">info</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#return_object\">return_object</a>)));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>);", 
"", 
"      <a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_get_sleep_type_data\">acpi_get_sleep_type_data</a>)", 
];
xr_frag_insert('l/6d/d73369d99082df72de6bdb85a7b263a61ff585.xr', __xr_tmp);
