var __xr_tmp = [
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: exmutex - ASL Mutex Acquire/Release functions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acinterp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acevents.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_EXECUTER\">ACPI_EXECUTER</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"exmutex\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static void", 
"<a class=\"id\" href=\"#acpi_ex_link_mutex\">acpi_ex_link_mutex</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_thread_state\">acpi_thread_state</a> *<a class=\"id\" href=\"#thread\">thread</a>);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_unlink_mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  obj_desc            - The mutex to be unlinked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Remove a mutex from the \"AcquiredMutex\" list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ex_unlink_mutex\">acpi_ex_unlink_mutex</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_thread_state\">acpi_thread_state</a> *<a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#owner_thread\">owner_thread</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#thread\">thread</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Doubly linked list */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#next\">next</a>)-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#prev\">prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Migrate the previous sync level associated with this mutex to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the previous mutex on the list so that it may be preserved.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This handles the case where several mutexes have been acquired</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * at the same level, but are not released in opposite order.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#prev\">prev</a>)-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#original_sync_level\">original_sync_level</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#original_sync_level\">original_sync_level</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#acquired_mutex_list\">acquired_mutex_list</a> = <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_link_mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  obj_desc            - The mutex to be linked</span>", 
"<span class=\"comment\"> *              Thread              - Current executing thread object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Add a mutex to the \"AcquiredMutex\" list for this walk</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static void", 
"<a class=\"id\" href=\"#acpi_ex_link_mutex\">acpi_ex_link_mutex</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_thread_state\">acpi_thread_state</a> *<a class=\"id\" href=\"#thread\">thread</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#list_head\">list_head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_head\">list_head</a> = <a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#acquired_mutex_list\">acquired_mutex_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This object will be the first object in the list */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#list_head\">list_head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update old first object to point back to this object */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_head\">list_head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_head\">list_head</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#obj_desc\">obj_desc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update list head */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#acquired_mutex_list\">acquired_mutex_list</a> = <a class=\"id\" href=\"#obj_desc\">obj_desc</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_acquire_mutex_object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Timeout             - Timeout in milliseconds</span>", 
"<span class=\"comment\"> *              obj_desc            - Mutex object</span>", 
"<span class=\"comment\"> *              thread_id           - Current thread state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Acquire an AML mutex, low-level interface. Provides a common</span>", 
"<span class=\"comment\"> *              path that supports multiple acquires by the same thread.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * MUTEX:       Interpreter must be locked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: This interface is called from three places:</span>", 
"<span class=\"comment\"> * 1) From acpi_ex_acquire_mutex, via an AML Acquire() operator</span>", 
"<span class=\"comment\"> * 2) From acpi_ex_acquire_global_lock when an AML Field access requires the</span>", 
"<span class=\"comment\"> *    global lock</span>", 
"<span class=\"comment\"> * 3) From the external interface, acpi_acquire_global_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ex_acquire_mutex_object\">acpi_ex_acquire_mutex_object</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#timeout\">timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#acpi_thread_id\">acpi_thread_id</a> <a class=\"id\" href=\"#thread_id\">thread_id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ex_acquire_mutex_object\">ex_acquire_mutex_object</a>, <a class=\"id\" href=\"#obj_desc\">obj_desc</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#obj_desc\">obj_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Support for multiple acquires by the owning thread */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#thread_id\">thread_id</a> == <a class=\"id\" href=\"#thread_id\">thread_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The mutex is already owned by this thread, just increment the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * acquisition depth</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#acquisition_depth\">acquisition_depth</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Acquire the mutex, wait if necessary. Special case for Global Lock */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a> == <a class=\"id\" href=\"#acpi_gbl_global_lock_mutex\">acpi_gbl_global_lock_mutex</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_acquire_global_lock\">acpi_ev_acquire_global_lock</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_system_wait_mutex\">acpi_ex_system_wait_mutex</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#os_mutex\">os_mutex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Includes failure from a timeout on time_desc */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Acquired the mutex: update mutex object */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#thread_id\">thread_id</a> = <a class=\"id\" href=\"#thread_id\">thread_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#acquisition_depth\">acquisition_depth</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#original_sync_level\">original_sync_level</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#owner_thread\">owner_thread</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"comment\">/* Used only for AML Acquire() */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_acquire_mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  time_desc           - Timeout integer</span>", 
"<span class=\"comment\"> *              obj_desc            - Mutex object</span>", 
"<span class=\"comment\"> *              walk_state          - Current method execution state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Acquire an AML mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ex_acquire_mutex\">acpi_ex_acquire_mutex</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#time_desc\">time_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ex_acquire_mutex\">ex_acquire_mutex</a>, <a class=\"id\" href=\"#obj_desc\">obj_desc</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#obj_desc\">obj_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must have a valid thread state struct */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot acquire Mutex [%4.4s], null thread info\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#node\">node</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_INTERNAL\">AE_AML_INTERNAL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Current sync level must be less than or equal to the sync level of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mutex. This mechanism provides some deadlock prevention</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a> &gt; <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#sync_level\">sync_level</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot acquire Mutex [%4.4s], current SyncLevel is too large (%u)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#node\">node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_MUTEX_ORDER\">AE_AML_MUTEX_ORDER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_acquire_mutex_object\">acpi_ex_acquire_mutex_object</a>((<a class=\"id\" href=\"#u16\">u16</a>) <a class=\"id\" href=\"#time_desc\">time_desc</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#obj_desc\">obj_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#thread_id\">thread_id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>) && <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#acquisition_depth\">acquisition_depth</a> == 1) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Save Thread object, original/current sync levels */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#owner_thread\">owner_thread</a> = <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#original_sync_level\">original_sync_level</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#sync_level\">sync_level</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Link the mutex to the current thread for force-unlock at method exit */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_link_mutex\">acpi_ex_link_mutex</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_release_mutex_object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  obj_desc            - The object descriptor for this op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Release a previously acquired Mutex, low level interface.</span>", 
"<span class=\"comment\"> *              Provides a common path that supports multiple releases (after</span>", 
"<span class=\"comment\"> *              previous multiple acquires) by the same thread.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * MUTEX:       Interpreter must be locked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: This interface is called from three places:</span>", 
"<span class=\"comment\"> * 1) From acpi_ex_release_mutex, via an AML Acquire() operator</span>", 
"<span class=\"comment\"> * 2) From acpi_ex_release_global_lock when an AML Field access requires the</span>", 
"<span class=\"comment\"> *    global lock</span>", 
"<span class=\"comment\"> * 3) From the external interface, acpi_release_global_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ex_release_mutex_object\">acpi_ex_release_mutex_object</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_release_mutex_object\">ex_release_mutex_object</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#acquisition_depth\">acquisition_depth</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_NOT_ACQUIRED\">AE_NOT_ACQUIRED</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Match multiple Acquires with multiple Releases */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#acquisition_depth\">acquisition_depth</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#acquisition_depth\">acquisition_depth</a> != 0) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Just decrement the depth and return */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#owner_thread\">owner_thread</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unlink the mutex from the owner's list */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_unlink_mutex\">acpi_ex_unlink_mutex</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#owner_thread\">owner_thread</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Release the mutex, special case for Global Lock */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a> == <a class=\"id\" href=\"#acpi_gbl_global_lock_mutex\">acpi_gbl_global_lock_mutex</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_release_global_lock\">acpi_ev_release_global_lock</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_release_mutex\">acpi_os_release_mutex</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#os_mutex\">os_mutex</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear mutex info */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#thread_id\">thread_id</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_release_mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  obj_desc            - The object descriptor for this op</span>", 
"<span class=\"comment\"> *              walk_state          - Current method execution state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Release a previously acquired Mutex.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ex_release_mutex\">acpi_ex_release_mutex</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#previous_sync_level\">previous_sync_level</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_thread_state\">acpi_thread_state</a> *<a class=\"id\" href=\"#owner_thread\">owner_thread</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_release_mutex\">ex_release_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#obj_desc\">obj_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#owner_thread\">owner_thread</a> = <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#owner_thread\">owner_thread</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The mutex must have been previously acquired in order to release it */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#owner_thread\">owner_thread</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot release Mutex [%4.4s], not acquired\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#node\">node</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_MUTEX_NOT_ACQUIRED\">AE_AML_MUTEX_NOT_ACQUIRED</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must have a valid thread. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot release Mutex [%4.4s], null thread info\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#node\">node</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_INTERNAL\">AE_AML_INTERNAL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The Mutex is owned, but this thread must be the owner.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Special case for Global Lock, any thread can release</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#owner_thread\">owner_thread</a>-><a class=\"id\" href=\"#thread_id\">thread_id</a> != <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#thread_id\">thread_id</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#obj_desc\">obj_desc</a> != <a class=\"id\" href=\"#acpi_gbl_global_lock_mutex\">acpi_gbl_global_lock_mutex</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Thread %p cannot release Mutex [%4.4s] acquired by thread %p\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(void, <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#thread_id\">thread_id</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#node\">node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(void, <a class=\"id\" href=\"#owner_thread\">owner_thread</a>-><a class=\"id\" href=\"#thread_id\">thread_id</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_NOT_OWNER\">AE_AML_NOT_OWNER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The sync level of the mutex must be equal to the current sync level. In</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * other words, the current level means that at least one mutex at that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * level is currently being held. Attempting to release a mutex of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * different level can only mean that the mutex ordering rule is being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * violated. This behavior is clarified in ACPI 4.0 specification.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#sync_level\">sync_level</a> != <a class=\"id\" href=\"#owner_thread\">owner_thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot release Mutex [%4.4s], SyncLevel mismatch: mutex %u current %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#node\">node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#sync_level\">sync_level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_MUTEX_ORDER\">AE_AML_MUTEX_ORDER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the previous sync_level from the head of the acquired mutex list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This handles the case where several mutexes at the same level have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * acquired, but are not released in reverse order.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#previous_sync_level\">previous_sync_level</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#owner_thread\">owner_thread</a>-><a class=\"id\" href=\"#acquired_mutex_list\">acquired_mutex_list</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#original_sync_level\">original_sync_level</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_release_mutex_object\">acpi_ex_release_mutex_object</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#acquisition_depth\">acquisition_depth</a> == 0) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Restore the previous sync_level */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner_thread\">owner_thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a> = <a class=\"id\" href=\"#previous_sync_level\">previous_sync_level</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_release_all_mutexes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Thread              - Current executing thread object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Release all mutexes held by this thread</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: This function is called as the thread is exiting the interpreter.</span>", 
"<span class=\"comment\"> * Mutexes are not released when an individual control method is exited, but</span>", 
"<span class=\"comment\"> * only when the parent thread actually exits the interpreter. This allows one</span>", 
"<span class=\"comment\"> * method to acquire a mutex, and a different method to release it, as long as</span>", 
"<span class=\"comment\"> * this is performed underneath a single parent control method.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ex_release_all_mutexes\">acpi_ex_release_all_mutexes</a>(struct <a class=\"id\" href=\"#acpi_thread_state\">acpi_thread_state</a> *<a class=\"id\" href=\"#thread\">thread</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#acquired_mutex_list\">acquired_mutex_list</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Traverse the list of owned mutexes, releasing each one */</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#acquisition_depth\">acquisition_depth</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Release the mutex, special case for Global Lock */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a> == <a class=\"id\" href=\"#acpi_gbl_global_lock_mutex\">acpi_gbl_global_lock_mutex</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ignore errors */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ev_release_global_lock\">acpi_ev_release_global_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_release_mutex\">acpi_os_release_mutex</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#os_mutex\">os_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mark mutex unowned */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#owner_thread\">owner_thread</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#thread_id\">thread_id</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update Thread sync_level (Last mutex is the important one) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#current_sync_level\">current_sync_level</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#original_sync_level\">original_sync_level</a>;", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/6e/09d048cc4a21ac76b33f154dcbf2a2531e0294.xr', __xr_tmp);
