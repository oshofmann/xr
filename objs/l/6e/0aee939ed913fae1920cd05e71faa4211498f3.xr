var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Completely Fair Scheduling (CFS) Class (SCHED_NORMAL/SCHED_BATCH)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2007 Red Hat, Inc., Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Interactivity improvements by Mike Galbraith</span>", 
"<span class=\"comment\"> *  (C) 2007 Mike Galbraith &lt;efault@gmx.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Various enhancements by Dmitry Adamushko.</span>", 
"<span class=\"comment\"> *  (C) 2007 Dmitry Adamushko &lt;dmitry.adamushko@gmail.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Group scheduling enhancements by Srivatsa Vaddagiri</span>", 
"<span class=\"comment\"> *  Copyright IBM Corporation, 2007</span>", 
"<span class=\"comment\"> *  Author: Srivatsa Vaddagiri &lt;vatsa@linux.vnet.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Scaled math optimizations by Thomas Gleixner</span>", 
"<span class=\"comment\"> *  Copyright (C) 2007, Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Adaptive scheduling granularity, math enhancements by Peter Zijlstra</span>", 
"<span class=\"comment\"> *  Copyright (C) 2007 Red Hat, Inc., Peter Zijlstra &lt;pzijlstr@redhat.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#latencytop\">latencytop</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Targeted preemption latency for CPU-bound tasks:</span>", 
"<span class=\"comment\"> * (default: 5ms * (1 + ilog(ncpus)), units: nanoseconds)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: this latency value is not the same as the concept of</span>", 
"<span class=\"comment\"> * 'timeslice length' - timeslices in CFS are of variable length</span>", 
"<span class=\"comment\"> * and have no persistent notion like in traditional, time-slice</span>", 
"<span class=\"comment\"> * based scheduling concepts.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (to see the precise effective timeslice length of your workload,</span>", 
"<span class=\"comment\"> *  run vmstat and monitor the context-switches (cs) field)</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#sysctl_sched_latency\">sysctl_sched_latency</a> = 6000000ULL;", 
"unsigned int <a class=\"id\" href=\"#normalized_sysctl_sched_latency\">normalized_sysctl_sched_latency</a> = 6000000ULL;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The initial- and re-scaling of tunables is configurable</span>", 
"<span class=\"comment\"> * (default SCHED_TUNABLESCALING_LOG = *(1+ilog(ncpus))</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Options are:</span>", 
"<span class=\"comment\"> * SCHED_TUNABLESCALING_NONE - unscaled, always *1</span>", 
"<span class=\"comment\"> * SCHED_TUNABLESCALING_LOG - scaled logarithmical, *1+ilog(ncpus)</span>", 
"<span class=\"comment\"> * SCHED_TUNABLESCALING_LINEAR - scaled linear, *ncpus</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#sched_tunable_scaling\">sched_tunable_scaling</a> <a class=\"id\" href=\"#sysctl_sched_tunable_scaling\">sysctl_sched_tunable_scaling</a>", 
"<span class=\"ts\"/>= <a class=\"id\" href=\"#SCHED_TUNABLESCALING_LOG\">SCHED_TUNABLESCALING_LOG</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Minimal preemption granularity for CPU-bound tasks:</span>", 
"<span class=\"comment\"> * (default: 2 msec * (1 + ilog(ncpus)), units: nanoseconds)</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#sysctl_sched_min_granularity\">sysctl_sched_min_granularity</a> = 750000ULL;", 
"unsigned int <a class=\"id\" href=\"#normalized_sysctl_sched_min_granularity\">normalized_sysctl_sched_min_granularity</a> = 750000ULL;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * is kept at sysctl_sched_latency / sysctl_sched_min_granularity</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#sched_nr_latency\">sched_nr_latency</a> = 8;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * After fork, child runs first. If set to 0 (default) then</span>", 
"<span class=\"comment\"> * parent will (try to) run first.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#sysctl_sched_child_runs_first\">sysctl_sched_child_runs_first</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sys_sched_yield() compat mode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This option switches the agressive yield implementation of the</span>", 
"<span class=\"comment\"> * old scheduler back on.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#sysctl_sched_compat_yield\">sysctl_sched_compat_yield</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SCHED_OTHER wake-up granularity.</span>", 
"<span class=\"comment\"> * (default: 1 msec * (1 + ilog(ncpus)), units: nanoseconds)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This option delays the preemption effects of decoupled workloads</span>", 
"<span class=\"comment\"> * and reduces their over-scheduling. Synchronous workloads will still</span>", 
"<span class=\"comment\"> * have immediate wakeup/sleep latencies.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#sysctl_sched_wakeup_granularity\">sysctl_sched_wakeup_granularity</a> = 1000000UL;", 
"unsigned int <a class=\"id\" href=\"#normalized_sysctl_sched_wakeup_granularity\">normalized_sysctl_sched_wakeup_granularity</a> = 1000000UL;", 
"", 
"<a class=\"id\" href=\"#const_debug\">const_debug</a> unsigned int <a class=\"id\" href=\"#sysctl_sched_migration_cost\">sysctl_sched_migration_cost</a> = 500000UL;", 
"", 
"static const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> <a class=\"id\" href=\"#fair_sched_class\">fair_sched_class</a>;", 
"", 
"<span class=\"comment\">/**************************************************************</span>", 
"<span class=\"comment\"> * CFS operations on generic schedulable entities:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"", 
"<span class=\"comment\">/* cpu runqueue to which this cfs_rq is attached */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq_of\">rq_of</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#rq\">rq</a>;", 
"}", 
"", 
"<span class=\"comment\">/* An entity is a task if it doesn't \"own\" a runqueue */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#entity_is_task\">entity_is_task</a>(<a class=\"id\" href=\"#se\">se</a>)<span class=\"ts\"/>(!<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#my_q\">my_q</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task_of\">task_of</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#entity_is_task\">entity_is_task</a>(<a class=\"id\" href=\"#se\">se</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#se\">se</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Walk up scheduling entities hierarchy */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#se\">se</a>; <a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#task_cfs_rq\">task_cfs_rq</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"}", 
"", 
"<span class=\"comment\">/* runqueue on which this entity is (to be) queued */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"}", 
"", 
"<span class=\"comment\">/* runqueue \"owned\" by this group */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#group_cfs_rq\">group_cfs_rq</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#grp\">grp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#my_q\">my_q</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Given a group's cfs_rq on one cpu, return its corresponding cfs_rq on</span>", 
"<span class=\"comment\"> * another cpu ('this_cpu')</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cpu_cfs_rq\">cpu_cfs_rq</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#this_cpu\">this_cpu</a>];", 
"}", 
"", 
"<span class=\"comment\">/* Iterate thr' all leaf cfs_rq's on a runqueue */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_leaf_cfs_rq\">for_each_leaf_cfs_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#leaf_cfs_rq_list\">leaf_cfs_rq_list</a>, <a class=\"id\" href=\"#leaf_cfs_rq_list\">leaf_cfs_rq_list</a>)", 
"", 
"<span class=\"comment\">/* Do the two (enqueued) entities belong to the same group ? */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#is_same_group\">is_same_group</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#pse\">pse</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> == <a class=\"id\" href=\"#pse\">pse</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#parent_entity\">parent_entity</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"}", 
"", 
"<span class=\"comment\">/* return depth at which a sched entity is present in the hierarchy */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#depth_se\">depth_se</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#depth\">depth</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a>++;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#depth\">depth</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#find_matching_se\">find_matching_se</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> **<a class=\"id\" href=\"#se\">se</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> **<a class=\"id\" href=\"#pse\">pse</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#se_depth\">se_depth</a>, <a class=\"id\" href=\"#pse_depth\">pse_depth</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * preemption test can be made between sibling entities who are in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * same cfs_rq i.e who have a common parent. Walk up the hierarchy of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * both tasks until we find their ancestors who are siblings of common</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First walk up until both entities are at same depth */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se_depth\">se_depth</a> = <a class=\"id\" href=\"#depth_se\">depth_se</a>(*<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pse_depth\">pse_depth</a> = <a class=\"id\" href=\"#depth_se\">depth_se</a>(*<a class=\"id\" href=\"#pse\">pse</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#se_depth\">se_depth</a> &gt; <a class=\"id\" href=\"#pse_depth\">pse_depth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se_depth\">se_depth</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#parent_entity\">parent_entity</a>(*<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pse_depth\">pse_depth</a> &gt; <a class=\"id\" href=\"#se_depth\">se_depth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pse_depth\">pse_depth</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pse\">pse</a> = <a class=\"id\" href=\"#parent_entity\">parent_entity</a>(*<a class=\"id\" href=\"#pse\">pse</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#is_same_group\">is_same_group</a>(*<a class=\"id\" href=\"#se\">se</a>, *<a class=\"id\" href=\"#pse\">pse</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#parent_entity\">parent_entity</a>(*<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pse\">pse</a> = <a class=\"id\" href=\"#parent_entity\">parent_entity</a>(*<a class=\"id\" href=\"#pse\">pse</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* !CONFIG_FAIR_GROUP_SCHED */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task_of\">task_of</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#se\">se</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq_of\">rq_of</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#cfs\">cfs</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#entity_is_task\">entity_is_task</a>(<a class=\"id\" href=\"#se\">se</a>)<span class=\"ts\"/>1", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#se\">se</a>; <a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#task_cfs_rq\">task_cfs_rq</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#cfs\">cfs</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#task_of\">task_of</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cfs\">cfs</a>;", 
"}", 
"", 
"<span class=\"comment\">/* runqueue \"owned\" by this group */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#group_cfs_rq\">group_cfs_rq</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#grp\">grp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cpu_cfs_rq\">cpu_cfs_rq</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>)-><a class=\"id\" href=\"#cfs\">cfs</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_leaf_cfs_rq\">for_each_leaf_cfs_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cfs\">cfs</a>; <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>; <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#is_same_group\">is_same_group</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#pse\">pse</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#parent_entity\">parent_entity</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#find_matching_se\">find_matching_se</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> **<a class=\"id\" href=\"#se\">se</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> **<a class=\"id\" href=\"#pse\">pse</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_FAIR_GROUP_SCHED */</span>", 
"", 
"", 
"<span class=\"comment\">/**************************************************************</span>", 
"<span class=\"comment\"> * Scheduling class tree data structure manipulation methods:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#max_vruntime\">max_vruntime</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#vruntime\">vruntime</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a> = (<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#vruntime\">vruntime</a> - <a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a> = <a class=\"id\" href=\"#vruntime\">vruntime</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#vruntime\">vruntime</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a> = (<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#vruntime\">vruntime</a> - <a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a> = <a class=\"id\" href=\"#vruntime\">vruntime</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#entity_before\">entity_before</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#a\">a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> - <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a>) &lt; 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#entity_key\">entity_key</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> - <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_min_vruntime\">update_min_vruntime</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#vruntime\">vruntime</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vruntime\">vruntime</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#rb_leftmost\">rb_leftmost</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#rb_leftmost\">rb_leftmost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#run_node\">run_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vruntime\">vruntime</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vruntime\">vruntime</a> = <a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>(<a class=\"id\" href=\"#vruntime\">vruntime</a>, <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a> = <a class=\"id\" href=\"#max_vruntime\">max_vruntime</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>, <a class=\"id\" href=\"#vruntime\">vruntime</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Enqueue an entity into the rb-tree:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__enqueue_entity\">__enqueue_entity</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#link\">link</a> = &amp;<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#tasks_timeline\">tasks_timeline</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#entity_key\">entity_key</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#leftmost\">leftmost</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find the right place in the rbtree:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a>, <a class=\"id\" href=\"#run_node\">run_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We dont care about collisions. Nodes with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the same key stay together.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a> &lt; <a class=\"id\" href=\"#entity_key\">entity_key</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#entry\">entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leftmost\">leftmost</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Maintain a cache of leftmost tree entries (it is frequently</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * used):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#leftmost\">leftmost</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#rb_leftmost\">rb_leftmost</a> = &amp;<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#run_node\">run_node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#run_node\">run_node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#run_node\">run_node</a>, &amp;<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#tasks_timeline\">tasks_timeline</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__dequeue_entity\">__dequeue_entity</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#rb_leftmost\">rb_leftmost</a> == &amp;<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#run_node\">run_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#next_node\">next_node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_node\">next_node</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#run_node\">run_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#rb_leftmost\">rb_leftmost</a> = <a class=\"id\" href=\"#next_node\">next_node</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#run_node\">run_node</a>, &amp;<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#tasks_timeline\">tasks_timeline</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#__pick_next_entity\">__pick_next_entity</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#rb_leftmost\">rb_leftmost</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#left\">left</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#left\">left</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a>, <a class=\"id\" href=\"#run_node\">run_node</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#__pick_last_entity\">__pick_last_entity</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#rb_last\">rb_last</a>(&amp;<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#tasks_timeline\">tasks_timeline</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#last\">last</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a>, <a class=\"id\" href=\"#run_node\">run_node</a>);", 
"}", 
"", 
"<span class=\"comment\">/**************************************************************</span>", 
"<span class=\"comment\"> * Scheduling class statistics methods:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"int <a class=\"id\" href=\"#sched_proc_update_handler\">sched_proc_update_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#factor\">factor</a> = <a class=\"id\" href=\"#get_update_sysctl_factor\">get_update_sysctl_factor</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> || !<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_nr_latency\">sched_nr_latency</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#sysctl_sched_latency\">sysctl_sched_latency</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_sched_min_granularity\">sysctl_sched_min_granularity</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WRT_SYSCTL\">WRT_SYSCTL</a>(<a class=\"id\" href=\"#name\">name</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#normalized_sysctl_\">normalized_sysctl_</a>##<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#sysctl_\">sysctl_</a>##<a class=\"id\" href=\"#name\">name</a> / (<a class=\"id\" href=\"#factor\">factor</a>))", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WRT_SYSCTL\">WRT_SYSCTL</a>(<a class=\"id\" href=\"#sched_min_granularity\">sched_min_granularity</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WRT_SYSCTL\">WRT_SYSCTL</a>(<a class=\"id\" href=\"#sched_latency\">sched_latency</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WRT_SYSCTL\">WRT_SYSCTL</a>(<a class=\"id\" href=\"#sched_wakeup_granularity\">sched_wakeup_granularity</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WRT_SYSCTL\">WRT_SYSCTL</a>(<a class=\"id\" href=\"#sched_shares_ratelimit\">sched_shares_ratelimit</a>);", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#WRT_SYSCTL\">WRT_SYSCTL</a>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * delta /= w</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long", 
"<a class=\"id\" href=\"#calc_delta_fair\">calc_delta_fair</a>(unsigned long <a class=\"id\" href=\"#delta\">delta</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> != <a class=\"id\" href=\"#NICE_0_LOAD\">NICE_0_LOAD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#calc_delta_mine\">calc_delta_mine</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#NICE_0_LOAD\">NICE_0_LOAD</a>, &amp;<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#delta\">delta</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The idea is to set a period in which each task runs once.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When there are too many tasks (sysctl_sched_nr_latency) we have to stretch</span>", 
"<span class=\"comment\"> * this period because otherwise the slices get too small.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * p = (nr &lt;= nl) ? l : l*nr/nl</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__sched_period\">__sched_period</a>(unsigned long <a class=\"id\" href=\"#nr_running\">nr_running</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#sysctl_sched_latency\">sysctl_sched_latency</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_latency\">nr_latency</a> = <a class=\"id\" href=\"#sched_nr_latency\">sched_nr_latency</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#nr_running\">nr_running</a> &gt; <a class=\"id\" href=\"#nr_latency\">nr_latency</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#sysctl_sched_min_granularity\">sysctl_sched_min_granularity</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> *= <a class=\"id\" href=\"#nr_running\">nr_running</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#period\">period</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We calculate the wall-time slice from the period by taking a part</span>", 
"<span class=\"comment\"> * proportional to the weight.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * s = p*P[w/rw]</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sched_slice\">sched_slice</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#slice\">slice</a> = <a class=\"id\" href=\"#__sched_period\">__sched_period</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> + !<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#on_rq\">on_rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#load_weight\">load_weight</a> *<a class=\"id\" href=\"#load\">load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#load_weight\">load_weight</a> <a class=\"id\" href=\"#lw\">lw</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> = &amp;<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#load\">load</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#on_rq\">on_rq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lw\">lw</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#load\">load</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_load_add\">update_load_add</a>(&amp;<a class=\"id\" href=\"#lw\">lw</a>, <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> = &amp;<a class=\"id\" href=\"#lw\">lw</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slice\">slice</a> = <a class=\"id\" href=\"#calc_delta_mine\">calc_delta_mine</a>(<a class=\"id\" href=\"#slice\">slice</a>, <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>, <a class=\"id\" href=\"#load\">load</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#slice\">slice</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We calculate the vruntime slice of a to be inserted task</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * vs = s/w</span>", 
"<span class=\"comment\"> */</span>", 
];
xr_frag_insert('l/6e/0aee939ed913fae1920cd05e71faa4211498f3.xr', __xr_tmp);
