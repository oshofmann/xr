var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#endoff\">endoff</a> = (<a class=\"id\" href=\"#loff_t\">loff_t</a>)(<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ ((<a class=\"id\" href=\"#loff_t\">loff_t</a>)<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* vmtruncate_range needs to take i_mutex and i_alloc_sem */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#vmtruncate_range\">vmtruncate_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#endoff\">endoff</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_FAILURE\">CONFIG_MEMORY_FAILURE</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Error injection support for memory error handling.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#madvise_hwpoison\">madvise_hwpoison</a>(int <a class=\"id\" href=\"#bhv\">bhv</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user_pages_fast\">get_user_pages_fast</a>(<a class=\"id\" href=\"#start\">start</a>, 1, 0, &amp;<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bhv\">bhv</a> == <a class=\"id\" href=\"#MADV_SOFT_OFFLINE\">MADV_SOFT_OFFLINE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Soft offlining page %lx at %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#soft_offline_page\">soft_offline_page</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MF_COUNT_INCREASED\">MF_COUNT_INCREASED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Injecting memory failure for page %lx at %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ignore return value for now */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__memory_failure\">__memory_failure</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#p\">p</a>), 0, <a class=\"id\" href=\"#MF_COUNT_INCREASED\">MF_COUNT_INCREASED</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static long", 
"<a class=\"id\" href=\"#madvise_vma\">madvise_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#behavior\">behavior</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#behavior\">behavior</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_REMOVE\">MADV_REMOVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#madvise_remove\">madvise_remove</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_WILLNEED\">MADV_WILLNEED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#madvise_willneed\">madvise_willneed</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_DONTNEED\">MADV_DONTNEED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#madvise_dontneed\">madvise_dontneed</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#madvise_behavior\">madvise_behavior</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#behavior\">behavior</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#madvise_behavior_valid\">madvise_behavior_valid</a>(int <a class=\"id\" href=\"#behavior\">behavior</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#behavior\">behavior</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_DOFORK\">MADV_DOFORK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_DONTFORK\">MADV_DONTFORK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_NORMAL\">MADV_NORMAL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_SEQUENTIAL\">MADV_SEQUENTIAL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_RANDOM\">MADV_RANDOM</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_REMOVE\">MADV_REMOVE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_WILLNEED\">MADV_WILLNEED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_DONTNEED\">MADV_DONTNEED</a>:", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KSM\">CONFIG_KSM</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_MERGEABLE\">MADV_MERGEABLE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MADV_UNMERGEABLE\">MADV_UNMERGEABLE</a>:", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The madvise(2) system call.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Applications can use madvise() to advise the kernel how it should</span>", 
"<span class=\"comment\"> * handle paging I/O in this VM area.  The idea is to help the kernel</span>", 
"<span class=\"comment\"> * use appropriate read-ahead and caching techniques.  The information</span>", 
"<span class=\"comment\"> * provided is advisory only, and can be safely disregarded by the</span>", 
"<span class=\"comment\"> * kernel without affecting the correct operation of the application.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * behavior values:</span>", 
"<span class=\"comment\"> *  MADV_NORMAL - the default behavior is to read clusters.  This</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>results in some read-ahead and read-behind.</span>", 
"<span class=\"comment\"> *  MADV_RANDOM - the system should read the minimum amount of data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>on any access, since it is unlikely that the appli-</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>cation will need more than what it asks for.</span>", 
"<span class=\"comment\"> *  MADV_SEQUENTIAL - pages in the given range will probably be accessed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>once, so they can be aggressively read ahead, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>can be freed soon after they are accessed.</span>", 
"<span class=\"comment\"> *  MADV_WILLNEED - the application is notifying the system to read</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>some pages ahead.</span>", 
"<span class=\"comment\"> *  MADV_DONTNEED - the application is finished with the given range,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>so the kernel can free resources associated with it.</span>", 
"<span class=\"comment\"> *  MADV_REMOVE - the application wants to free up the given range of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>pages and associated backing store.</span>", 
"<span class=\"comment\"> *  MADV_DONTFORK - omit this area from child's address space when forking:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>typically, to avoid COWing pages pinned by get_user_pages().</span>", 
"<span class=\"comment\"> *  MADV_DOFORK - cancel MADV_DONTFORK: no longer omit this area when forking.</span>", 
"<span class=\"comment\"> *  MADV_MERGEABLE - the application recommends that KSM try to merge pages in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>this area with pages of identical content from other such areas.</span>", 
"<span class=\"comment\"> *  MADV_UNMERGEABLE- cancel MADV_MERGEABLE: no longer merge pages with others.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * return values:</span>", 
"<span class=\"comment\"> *  zero    - success</span>", 
"<span class=\"comment\"> *  -EINVAL - start + len &lt; 0, start is not page-aligned,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>\"behavior\" is not a valid value, or application</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>is attempting to release locked or shared pages.</span>", 
"<span class=\"comment\"> *  -ENOMEM - addresses in the specified range are not currently</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>mapped, or are outside the AS of the process.</span>", 
"<span class=\"comment\"> *  -EIO    - an I/O error occurred while paging in data.</span>", 
"<span class=\"comment\"> *  -EBADF  - map exists, but area maps something that isn't a file.</span>", 
"<span class=\"comment\"> *  -EAGAIN - a kernel resource was temporarily unavailable.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#madvise\">madvise</a>, unsigned long, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#len_in\">len_in</a>, int, <a class=\"id\" href=\"#behavior\">behavior</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#vma\">vma</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unmapped_error\">unmapped_error</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#write\">write</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_FAILURE\">CONFIG_MEMORY_FAILURE</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#behavior\">behavior</a> == <a class=\"id\" href=\"#MADV_HWPOISON\">MADV_HWPOISON</a> || <a class=\"id\" href=\"#behavior\">behavior</a> == <a class=\"id\" href=\"#MADV_SOFT_OFFLINE\">MADV_SOFT_OFFLINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#madvise_hwpoison\">madvise_hwpoison</a>(<a class=\"id\" href=\"#behavior\">behavior</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#start\">start</a>+<a class=\"id\" href=\"#len_in\">len_in</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#madvise_behavior_valid\">madvise_behavior_valid</a>(<a class=\"id\" href=\"#behavior\">behavior</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#madvise_need_mmap_write\">madvise_need_mmap_write</a>(<a class=\"id\" href=\"#behavior\">behavior</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = (<a class=\"id\" href=\"#len_in\">len_in</a> + ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check to see whether len was rounded up from small -ve to zero */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len_in\">len_in</a> && !<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the interval [start,end) covers some unmapped address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ranges, just ignore them, but return -ENOMEM at the end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - different from the way of handling in mlock etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma_prev\">find_vma_prev</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Still start &lt; end. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Here start &lt; (end|vma-&gt;vm_end). */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmapped_error\">unmapped_error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Here vma-&gt;vm_start &lt;= start &lt; (end|vma-&gt;vm_end) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Here vma-&gt;vm_start &lt;= start &lt; tmp &lt;= (end|vma-&gt;vm_end). */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#madvise_vma\">madvise_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#behavior\">behavior</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
];
xr_frag_insert('l/6e/8343b7ebb2913fab04cbb1a449716cfb808ab0.xr', __xr_tmp);
