var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/> * 0x0000 and 0xffff along with the earlier ATA revisions...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_HW_CONFIG\">ATA_ID_HW_CONFIG</a>] == 0 && (short)<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_MAJOR_VER\">ATA_ID_MAJOR_VER</a>] >= 0x0020)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_has_tpm\">ata_id_has_tpm</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* The TPM bits are only valid on ATA8 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_major_version\">ata_id_major_version</a>(<a class=\"id\" href=\"#id\">id</a>) &lt; 8)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#id\">id</a>[48] &amp; 0xC000) != 0x4000)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>[48] &amp; (1 << 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_has_dword_io\">ata_id_has_dword_io</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* ATA 8 reuses this flag for \"trusted\" computing */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_major_version\">ata_id_major_version</a>(<a class=\"id\" href=\"#id\">id</a>) &gt; 7)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_DWORD_IO\">ATA_ID_DWORD_IO</a>] &amp; (1 << 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_has_unload\">ata_id_has_unload</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_major_version\">ata_id_major_version</a>(<a class=\"id\" href=\"#id\">id</a>) >= 7 &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CFSSE\">ATA_ID_CFSSE</a>] &amp; 0xC000) == 0x4000 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CFSSE\">ATA_ID_CFSSE</a>] &amp; (1 << 13))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_form_factor\">ata_id_form_factor</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#id\">id</a>[168];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_major_version\">ata_id_major_version</a>(<a class=\"id\" href=\"#id\">id</a>) &lt; 7 || <a class=\"id\" href=\"#val\">val</a> == 0 || <a class=\"id\" href=\"#val\">val</a> == 0xffff)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> &= 0xf;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &gt; 5)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_rotation_rate\">ata_id_rotation_rate</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#id\">id</a>[217];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_major_version\">ata_id_major_version</a>(<a class=\"id\" href=\"#id\">id</a>) &lt; 7 || <a class=\"id\" href=\"#val\">val</a> == 0 || <a class=\"id\" href=\"#val\">val</a> == 0xffff)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &gt; 1 && <a class=\"id\" href=\"#val\">val</a> &lt; 0x401)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_has_trim\">ata_id_has_trim</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_major_version\">ata_id_major_version</a>(<a class=\"id\" href=\"#id\">id</a>) >= 7 &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_DATA_SET_MGMT\">ATA_ID_DATA_SET_MGMT</a>] &amp; 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_has_zero_after_trim\">ata_id_has_zero_after_trim</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* DSM supported, deterministic read, and read zero after trim set */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_has_trim\">ata_id_has_trim</a>(<a class=\"id\" href=\"#id\">id</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_ADDITIONAL_SUPP\">ATA_ID_ADDITIONAL_SUPP</a>] &amp; 0x4020) == 0x4020)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_current_chs_valid\">ata_id_current_chs_valid</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* For ATA-1 devices, if the INITIALIZE DEVICE PARAMETERS command</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   has not been issued to the device then the values of</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   id[ATA_ID_CUR_CYLS] to id[ATA_ID_CUR_SECTORS] are vendor specific. */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_FIELD_VALID\">ATA_ID_FIELD_VALID</a>] &amp; 1) && <span class=\"comment\">/* Current translation valid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_CYLS\">ATA_ID_CUR_CYLS</a>] &&  <span class=\"comment\">/* cylinders in current translation */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_HEADS\">ATA_ID_CUR_HEADS</a>] &&  <span class=\"comment\">/* heads in current translation */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_HEADS\">ATA_ID_CUR_HEADS</a>] <= 16 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_SECTORS\">ATA_ID_CUR_SECTORS</a>];    <span class=\"comment\">/* sectors in current translation */</span>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_is_cfa\">ata_id_is_cfa</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CONFIG\">ATA_ID_CONFIG</a>] == 0x848A) ||<span class=\"ts\"/><span class=\"comment\">/* Traditional CF */</span>", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CONFIG\">ATA_ID_CONFIG</a>] == 0x844A))<span class=\"ts\"/><span class=\"comment\">/* Delkin Devices CF */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CF specs don't require specific value in the word 0 anymore and yet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * they forbid to report the ATA version in the word 80 and require the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CFA feature set support to be indicated in the word 83 in this case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unfortunately, some cards only follow either of this requirements,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and while those that don't indicate CFA feature support need some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sort of quirk list, it seems impractical for the ones that do...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_COMMAND_SET_2\">ATA_ID_COMMAND_SET_2</a>] &amp; 0xC004) == 0x4004)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_is_ssd\">ata_id_is_ssd</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_ROT_SPEED\">ATA_ID_ROT_SPEED</a>] == 0x01;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_pio_need_iordy\">ata_id_pio_need_iordy</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pio\">pio</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* CF spec. r4.1 Table 22 says no IORDY on PIO5 and PIO6. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pio\">pio</a> &gt; 4 && <a class=\"id\" href=\"#ata_id_is_cfa\">ata_id_is_cfa</a>(<a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* For PIO3 and higher it is mandatory. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pio\">pio</a> &gt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"comment\">/* Turn it on when possible. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_has_iordy\">ata_id_has_iordy</a>(<a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_drive_40wire\">ata_drive_40wire</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_is_sata\">ata_id_is_sata</a>(<a class=\"id\" href=\"#dev_id\">dev_id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"comment\">/* SATA */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev_id\">dev_id</a>[<a class=\"id\" href=\"#ATA_ID_HW_CONFIG\">ATA_ID_HW_CONFIG</a>] &amp; 0xE000) == 0x6000)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"comment\">/* 80 wire */</span>", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_drive_40wire_relaxed\">ata_drive_40wire_relaxed</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev_id\">dev_id</a>[<a class=\"id\" href=\"#ATA_ID_HW_CONFIG\">ATA_ID_HW_CONFIG</a>] &amp; 0x2000) == 0x2000)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"comment\">/* 80 wire */</span>", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atapi_cdb_len\">atapi_cdb_len</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#dev_id\">dev_id</a>[<a class=\"id\" href=\"#ATA_ID_CONFIG\">ATA_ID_CONFIG</a>] &amp; 0x3;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/>case 0:<span class=\"ts\"/><span class=\"ts\"/>return 12;", 
"<span class=\"ts\"/>case 1:<span class=\"ts\"/><span class=\"ts\"/>return 16;", 
"<span class=\"ts\"/>default:<span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atapi_command_packet_set\">atapi_command_packet_set</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dev_id\">dev_id</a>[<a class=\"id\" href=\"#ATA_ID_CONFIG\">ATA_ID_CONFIG</a>] >> 8) &amp; 0x1f;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atapi_id_dmadir\">atapi_id_dmadir</a>(const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_id_major_version\">ata_id_major_version</a>(<a class=\"id\" href=\"#dev_id\">dev_id</a>) >= 7 && (<a class=\"id\" href=\"#dev_id\">dev_id</a>[62] &amp; 0x8000);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ata_id_is_lba_capacity_ok() performs a sanity check on</span>", 
"<span class=\"comment\"> * the claimed LBA capacity value for the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if LBA capacity looks sensible, 0 otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is called only once for each device.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_id_is_lba_capacity_ok\">ata_id_is_lba_capacity_ok</a>(<a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lba_sects\">lba_sects</a>, <a class=\"id\" href=\"#chs_sects\">chs_sects</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#tail\">tail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No non-LBA info .. so valid! */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CYLS\">ATA_ID_CYLS</a>] == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba_sects\">lba_sects</a> = <a class=\"id\" href=\"#ata_id_u32\">ata_id_u32</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ATA_ID_LBA_CAPACITY\">ATA_ID_LBA_CAPACITY</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The ATA spec tells large drives to return</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * C/H/S = 16383/16/63 independent of their size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some drives can be jumpered to use 15 heads instead of 16.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some drives can be jumpered to use 4092 cyls instead of 16383.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CYLS\">ATA_ID_CYLS</a>] == 16383 ||", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CYLS\">ATA_ID_CYLS</a>] == 4092 && <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CUR_CYLS\">ATA_ID_CUR_CYLS</a>] == 16383)) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_SECTORS\">ATA_ID_SECTORS</a>] == 63 &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_HEADS\">ATA_ID_HEADS</a>] == 15 || <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_HEADS\">ATA_ID_HEADS</a>] == 16) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#lba_sects\">lba_sects</a> >= 16383 * 63 * <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_HEADS\">ATA_ID_HEADS</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chs_sects\">chs_sects</a> = <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CYLS\">ATA_ID_CYLS</a>] * <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_HEADS\">ATA_ID_HEADS</a>] * <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_SECTORS\">ATA_ID_SECTORS</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* perform a rough sanity check on lba_sects: within 10% is OK */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lba_sects\">lba_sects</a> - <a class=\"id\" href=\"#chs_sects\">chs_sects</a> &lt; <a class=\"id\" href=\"#chs_sects\">chs_sects</a>/10)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* some drives have the word order reversed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = (<a class=\"id\" href=\"#lba_sects\">lba_sects</a> >> 16) &amp; 0xffff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#lba_sects\">lba_sects</a> &amp; 0xffff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba_sects\">lba_sects</a> = <a class=\"id\" href=\"#head\">head</a> | (<a class=\"id\" href=\"#tail\">tail</a> << 16);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lba_sects\">lba_sects</a> - <a class=\"id\" href=\"#chs_sects\">chs_sects</a> &lt; <a class=\"id\" href=\"#chs_sects\">chs_sects</a>/10) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#__le32\">__le32</a> *)&amp;<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_LBA_CAPACITY\">ATA_ID_LBA_CAPACITY</a>] = <a class=\"id\" href=\"#__cpu_to_le32\">__cpu_to_le32</a>(<a class=\"id\" href=\"#lba_sects\">lba_sects</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;<span class=\"ts\"/><span class=\"comment\">/* LBA capacity is (now) good */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"comment\">/* LBA capacity value may be bad */</span>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ata_id_to_hd_driveid\">ata_id_to_hd_driveid</a>(<a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__BIG_ENDIAN\">__BIG_ENDIAN</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* accessed in struct hd_driveid as 8-bit values */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_MAX_MULTSECT\">ATA_ID_MAX_MULTSECT</a>]<span class=\"ts\"/> = <a class=\"id\" href=\"#__cpu_to_le16\">__cpu_to_le16</a>(<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_MAX_MULTSECT\">ATA_ID_MAX_MULTSECT</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CAPABILITY\">ATA_ID_CAPABILITY</a>]<span class=\"ts\"/> = <a class=\"id\" href=\"#__cpu_to_le16\">__cpu_to_le16</a>(<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_CAPABILITY\">ATA_ID_CAPABILITY</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_OLD_PIO_MODES\">ATA_ID_OLD_PIO_MODES</a>] = <a class=\"id\" href=\"#__cpu_to_le16\">__cpu_to_le16</a>(<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_OLD_PIO_MODES\">ATA_ID_OLD_PIO_MODES</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_OLD_DMA_MODES\">ATA_ID_OLD_DMA_MODES</a>] = <a class=\"id\" href=\"#__cpu_to_le16\">__cpu_to_le16</a>(<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_OLD_DMA_MODES\">ATA_ID_OLD_DMA_MODES</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_MULTSECT\">ATA_ID_MULTSECT</a>]<span class=\"ts\"/> = <a class=\"id\" href=\"#__cpu_to_le16\">__cpu_to_le16</a>(<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_MULTSECT\">ATA_ID_MULTSECT</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* as 32-bit values */</span>", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#u32\">u32</a> *)&amp;<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_LBA_CAPACITY\">ATA_ID_LBA_CAPACITY</a>] = <a class=\"id\" href=\"#ata_id_u32\">ata_id_u32</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ATA_ID_LBA_CAPACITY\">ATA_ID_LBA_CAPACITY</a>);", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#u32\">u32</a> *)&amp;<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_SPG\">ATA_ID_SPG</a>]<span class=\"ts\"/><span class=\"ts\"/> = <a class=\"id\" href=\"#ata_id_u32\">ata_id_u32</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ATA_ID_SPG\">ATA_ID_SPG</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* as 64-bit value */</span>", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#u64\">u64</a> *)&amp;<a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#ATA_ID_LBA_CAPACITY_2\">ATA_ID_LBA_CAPACITY_2</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_id_u64\">ata_id_u64</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ATA_ID_LBA_CAPACITY_2\">ATA_ID_LBA_CAPACITY_2</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write LBA Range Entries to the buffer that will cover the extent from</span>", 
"<span class=\"comment\"> * sector to sector + count.  This is used for TRIM and for ADD LBA(S)</span>", 
"<span class=\"comment\"> * TO NV CACHE PINNED SET.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#ata_set_lba_range_entries\">ata_set_lba_range_entries</a>(void *<a class=\"id\" href=\"#_buffer\">_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#buf_size\">buf_size</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sector\">sector</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le64\">__le64</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#_buffer\">_buffer</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#used_bytes\">used_bytes</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#buf_size\">buf_size</a> / 8 ) { <span class=\"comment\">/* 6-byte LBA + 2-byte range per entry */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#sector\">sector</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#u64\">u64</a>)(<a class=\"id\" href=\"#count\">count</a> &gt; 0xffff ? 0xffff : <a class=\"id\" href=\"#count\">count</a>) << 48);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#i\">i</a>++] = <a class=\"id\" href=\"#__cpu_to_le64\">__cpu_to_le64</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> <= 0xffff)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= 0xffff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a> += 0xffff;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#used_bytes\">used_bytes</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#i\">i</a> * 8, 512);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#i\">i</a>, 0, <a class=\"id\" href=\"#used_bytes\">used_bytes</a> - <a class=\"id\" href=\"#i\">i</a> * 8);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#used_bytes\">used_bytes</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_multi_taskfile\">is_multi_taskfile</a>(struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> == <a class=\"id\" href=\"#ATA_CMD_READ_MULTI\">ATA_CMD_READ_MULTI</a>) ||", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> == <a class=\"id\" href=\"#ATA_CMD_WRITE_MULTI\">ATA_CMD_WRITE_MULTI</a>) ||", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> == <a class=\"id\" href=\"#ATA_CMD_READ_MULTI_EXT\">ATA_CMD_READ_MULTI_EXT</a>) ||", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> == <a class=\"id\" href=\"#ATA_CMD_WRITE_MULTI_EXT\">ATA_CMD_WRITE_MULTI_EXT</a>) ||", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> == <a class=\"id\" href=\"#ATA_CMD_WRITE_MULTI_FUA_EXT\">ATA_CMD_WRITE_MULTI_FUA_EXT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_ok\">ata_ok</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#status\">status</a> &amp; (<a class=\"id\" href=\"#ATA_BUSY\">ATA_BUSY</a> | <a class=\"id\" href=\"#ATA_DRDY\">ATA_DRDY</a> | <a class=\"id\" href=\"#ATA_DF\">ATA_DF</a> | <a class=\"id\" href=\"#ATA_DRQ\">ATA_DRQ</a> | <a class=\"id\" href=\"#ATA_ERR\">ATA_ERR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== <a class=\"id\" href=\"#ATA_DRDY\">ATA_DRDY</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#lba_28_ok\">lba_28_ok</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#n_block\">n_block</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* check the ending block number: must be LESS THAN 0x0fffffff */</span>", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#n_block\">n_block</a>) &lt; ((1 << 28) - 1)) && (<a class=\"id\" href=\"#n_block\">n_block</a> <= 256);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#lba_48_ok\">lba_48_ok</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#n_block\">n_block</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* check the ending block number */</span>", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#n_block\">n_block</a> - 1) &lt; ((<a class=\"id\" href=\"#u64\">u64</a>)1 << 48)) && (<a class=\"id\" href=\"#n_block\">n_block</a> <= 65536);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sata_pmp_gscr_vendor\">sata_pmp_gscr_vendor</a>(<a class=\"id\" href=\"#gscr\">gscr</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#gscr\">gscr</a>)[<a class=\"id\" href=\"#SATA_PMP_GSCR_PROD_ID\">SATA_PMP_GSCR_PROD_ID</a>] &amp; 0xffff)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sata_pmp_gscr_devid\">sata_pmp_gscr_devid</a>(<a class=\"id\" href=\"#gscr\">gscr</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#gscr\">gscr</a>)[<a class=\"id\" href=\"#SATA_PMP_GSCR_PROD_ID\">SATA_PMP_GSCR_PROD_ID</a>] >> 16)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sata_pmp_gscr_rev\">sata_pmp_gscr_rev</a>(<a class=\"id\" href=\"#gscr\">gscr</a>)<span class=\"ts\"/><span class=\"ts\"/>(((<a class=\"id\" href=\"#gscr\">gscr</a>)[<a class=\"id\" href=\"#SATA_PMP_GSCR_REV\">SATA_PMP_GSCR_REV</a>] >> 8) &amp; 0xff)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sata_pmp_gscr_ports\">sata_pmp_gscr_ports</a>(<a class=\"id\" href=\"#gscr\">gscr</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#gscr\">gscr</a>)[<a class=\"id\" href=\"#SATA_PMP_GSCR_PORT_INFO\">SATA_PMP_GSCR_PORT_INFO</a>] &amp; 0xf)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_ATA_H__ */</span>", 
];
xr_frag_insert('l/6e/e34739dbb20e184097e921a285189bbd5ec492.xr', __xr_tmp);
