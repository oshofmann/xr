var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: utdebug - Debug print routines</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_UTILITIES\">ACPI_UTILITIES</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"utdebug\")", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_DEBUG_OUTPUT\">ACPI_DEBUG_OUTPUT</a>", 
"static <a class=\"id\" href=\"#acpi_thread_id\">acpi_thread_id</a> <a class=\"id\" href=\"#acpi_gbl_prev_thread_id\">acpi_gbl_prev_thread_id</a>;", 
"static char *<a class=\"id\" href=\"#acpi_gbl_fn_entry_str\">acpi_gbl_fn_entry_str</a> = \"----Entry\";", 
"static char *<a class=\"id\" href=\"#acpi_gbl_fn_exit_str\">acpi_gbl_fn_exit_str</a> = \"----Exit-\";", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"", 
"static const char *<a class=\"id\" href=\"#acpi_ut_trim_function_name\">acpi_ut_trim_function_name</a>(const char *<a class=\"id\" href=\"#function_name\">function_name</a>);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_init_stack_ptr_trace</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Save the current CPU stack pointer at subsystem startup</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ut_init_stack_ptr_trace\">acpi_ut_init_stack_ptr_trace</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_size\">acpi_size</a> <a class=\"id\" href=\"#current_sp\">current_sp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_entry_stack_pointer\">acpi_gbl_entry_stack_pointer</a> = &amp;<a class=\"id\" href=\"#current_sp\">current_sp</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_track_stack_ptr</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Save the current CPU stack pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ut_track_stack_ptr\">acpi_ut_track_stack_ptr</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_size\">acpi_size</a> <a class=\"id\" href=\"#current_sp\">current_sp</a>;", 
"", 
"<span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#current_sp\">current_sp</a> &lt; <a class=\"id\" href=\"#acpi_gbl_lowest_stack_pointer\">acpi_gbl_lowest_stack_pointer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_lowest_stack_pointer\">acpi_gbl_lowest_stack_pointer</a> = &amp;<a class=\"id\" href=\"#current_sp\">current_sp</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_nesting_level\">acpi_gbl_nesting_level</a> &gt; <a class=\"id\" href=\"#acpi_gbl_deepest_nesting\">acpi_gbl_deepest_nesting</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_deepest_nesting\">acpi_gbl_deepest_nesting</a> = <a class=\"id\" href=\"#acpi_gbl_nesting_level\">acpi_gbl_nesting_level</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_trim_function_name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  function_name       - Ascii string containing a procedure name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Updated pointer to the function name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Remove the \"Acpi\" prefix from the function name, if present.</span>", 
"<span class=\"comment\"> *              This allows compiler macros such as __func__ to be used</span>", 
"<span class=\"comment\"> *              with no change to the debug output.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static const char *<a class=\"id\" href=\"#acpi_ut_trim_function_name\">acpi_ut_trim_function_name</a>(const char *<a class=\"id\" href=\"#function_name\">function_name</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All Function names are longer than 4 chars, check is safe */</span>", 
"", 
"<span class=\"ts\"/>if (*(<a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(<a class=\"id\" href=\"#u32\">u32</a>, <a class=\"id\" href=\"#function_name\">function_name</a>)) == <a class=\"id\" href=\"#ACPI_PREFIX_MIXED\">ACPI_PREFIX_MIXED</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is the case where the original source has not been modified */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#function_name\">function_name</a> + 4);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (*(<a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(<a class=\"id\" href=\"#u32\">u32</a>, <a class=\"id\" href=\"#function_name\">function_name</a>)) == <a class=\"id\" href=\"#ACPI_PREFIX_LOWER\">ACPI_PREFIX_LOWER</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is the case where the source has been 'linuxized' */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#function_name\">function_name</a> + 5);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#function_name\">function_name</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_debug_print</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  requested_debug_level - Requested debug print level</span>", 
"<span class=\"comment\"> *              line_number         - Caller's line number (for error output)</span>", 
"<span class=\"comment\"> *              function_name       - Caller's procedure name</span>", 
"<span class=\"comment\"> *              module_name         - Caller's module name</span>", 
"<span class=\"comment\"> *              component_id        - Caller's component ID</span>", 
"<span class=\"comment\"> *              Format              - Printf format field</span>", 
"<span class=\"comment\"> *              ...                 - Optional printf arguments</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Print error message with prefix consisting of the module name,</span>", 
"<span class=\"comment\"> *              line number, and component ID.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#ACPI_INTERNAL_VAR_XFACE\">ACPI_INTERNAL_VAR_XFACE</a>", 
"<a class=\"id\" href=\"#acpi_debug_print\">acpi_debug_print</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#requested_debug_level\">requested_debug_level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#function_name\">function_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#module_name\">module_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component_id\">component_id</a>, const char *<a class=\"id\" href=\"#format\">format</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_thread_id\">acpi_thread_id</a> <a class=\"id\" href=\"#thread_id\">thread_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Stay silent if the debug level or component ID is disabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#requested_debug_level\">requested_debug_level</a> &amp; <a class=\"id\" href=\"#acpi_dbg_level\">acpi_dbg_level</a>) ||", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#component_id\">component_id</a> &amp; <a class=\"id\" href=\"#acpi_dbg_layer\">acpi_dbg_layer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Thread tracking and context switch notification</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread_id\">thread_id</a> = <a class=\"id\" href=\"#acpi_os_get_thread_id\">acpi_os_get_thread_id</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#thread_id\">thread_id</a> != <a class=\"id\" href=\"#acpi_gbl_prev_thread_id\">acpi_gbl_prev_thread_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_LV_THREADS\">ACPI_LV_THREADS</a> &amp; <a class=\"id\" href=\"#acpi_dbg_level\">acpi_dbg_level</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (\"\\n**** Context Switch from TID %p to TID %p ****\\n\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(void, <a class=\"id\" href=\"#acpi_gbl_prev_thread_id\">acpi_gbl_prev_thread_id</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(void, <a class=\"id\" href=\"#thread_id\">thread_id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_prev_thread_id\">acpi_gbl_prev_thread_id</a> = <a class=\"id\" href=\"#thread_id\">thread_id</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Display the module name, current line number, thread ID (if requested),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current procedure nesting level, and the current procedure name</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%8s-%04ld \", <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#line_number\">line_number</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_LV_THREADS\">ACPI_LV_THREADS</a> &amp; <a class=\"id\" href=\"#acpi_dbg_level\">acpi_dbg_level</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"[%p] \", <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(void, <a class=\"id\" href=\"#thread_id\">thread_id</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"[%02ld] %-22.22s: \",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#acpi_gbl_nesting_level\">acpi_gbl_nesting_level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#acpi_ut_trim_function_name\">acpi_ut_trim_function_name</a>(<a class=\"id\" href=\"#function_name\">function_name</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#format\">format</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_vprintf\">acpi_os_vprintf</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_debug_print\">acpi_debug_print</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_debug_print_raw</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  requested_debug_level - Requested debug print level</span>", 
"<span class=\"comment\"> *              line_number         - Caller's line number</span>", 
"<span class=\"comment\"> *              function_name       - Caller's procedure name</span>", 
"<span class=\"comment\"> *              module_name         - Caller's module name</span>", 
"<span class=\"comment\"> *              component_id        - Caller's component ID</span>", 
"<span class=\"comment\"> *              Format              - Printf format field</span>", 
"<span class=\"comment\"> *              ...                 - Optional printf arguments</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Print message with no headers.  Has same interface as</span>", 
"<span class=\"comment\"> *              debug_print so that the same macros can be used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"void <a class=\"id\" href=\"#ACPI_INTERNAL_VAR_XFACE\">ACPI_INTERNAL_VAR_XFACE</a>", 
"<a class=\"id\" href=\"#acpi_debug_print_raw\">acpi_debug_print_raw</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#requested_debug_level\">requested_debug_level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#function_name\">function_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#module_name\">module_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component_id\">component_id</a>, const char *<a class=\"id\" href=\"#format\">format</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#requested_debug_level\">requested_debug_level</a> &amp; <a class=\"id\" href=\"#acpi_dbg_level\">acpi_dbg_level</a>) ||", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#component_id\">component_id</a> &amp; <a class=\"id\" href=\"#acpi_dbg_layer\">acpi_dbg_layer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#format\">format</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_vprintf\">acpi_os_vprintf</a>(<a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_debug_print_raw\">acpi_debug_print_raw</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_trace</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  line_number         - Caller's line number</span>", 
"<span class=\"comment\"> *              function_name       - Caller's procedure name</span>", 
"<span class=\"comment\"> *              module_name         - Caller's module name</span>", 
"<span class=\"comment\"> *              component_id        - Caller's component ID</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Function entry trace.  Prints only if TRACE_FUNCTIONS bit is</span>", 
"<span class=\"comment\"> *              set in debug_level</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"void", 
"<a class=\"id\" href=\"#acpi_ut_trace\">acpi_ut_trace</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/>      const char *<a class=\"id\" href=\"#function_name\">function_name</a>,", 
"<span class=\"ts\"/>      const char *<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component_id\">component_id</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_nesting_level\">acpi_gbl_nesting_level</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_track_stack_ptr\">acpi_ut_track_stack_ptr</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_debug_print\">acpi_debug_print</a>(<a class=\"id\" href=\"#ACPI_LV_FUNCTIONS\">ACPI_LV_FUNCTIONS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#line_number\">line_number</a>, <a class=\"id\" href=\"#function_name\">function_name</a>, <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#component_id\">component_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%s\\n\", <a class=\"id\" href=\"#acpi_gbl_fn_entry_str\">acpi_gbl_fn_entry_str</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_ut_trace\">acpi_ut_trace</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_trace_ptr</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  line_number         - Caller's line number</span>", 
"<span class=\"comment\"> *              function_name       - Caller's procedure name</span>", 
"<span class=\"comment\"> *              module_name         - Caller's module name</span>", 
"<span class=\"comment\"> *              component_id        - Caller's component ID</span>", 
"<span class=\"comment\"> *              Pointer             - Pointer to display</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Function entry trace.  Prints only if TRACE_FUNCTIONS bit is</span>", 
"<span class=\"comment\"> *              set in debug_level</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"void", 
"<a class=\"id\" href=\"#acpi_ut_trace_ptr\">acpi_ut_trace_ptr</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#function_name\">function_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component_id\">component_id</a>, void *<a class=\"id\" href=\"#pointer\">pointer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_nesting_level\">acpi_gbl_nesting_level</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_track_stack_ptr\">acpi_ut_track_stack_ptr</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_debug_print\">acpi_debug_print</a>(<a class=\"id\" href=\"#ACPI_LV_FUNCTIONS\">ACPI_LV_FUNCTIONS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#line_number\">line_number</a>, <a class=\"id\" href=\"#function_name\">function_name</a>, <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#component_id\">component_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%s %p\\n\", <a class=\"id\" href=\"#acpi_gbl_fn_entry_str\">acpi_gbl_fn_entry_str</a>, <a class=\"id\" href=\"#pointer\">pointer</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_trace_str</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  line_number         - Caller's line number</span>", 
"<span class=\"comment\"> *              function_name       - Caller's procedure name</span>", 
"<span class=\"comment\"> *              module_name         - Caller's module name</span>", 
"<span class=\"comment\"> *              component_id        - Caller's component ID</span>", 
"<span class=\"comment\"> *              String              - Additional string to display</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Function entry trace.  Prints only if TRACE_FUNCTIONS bit is</span>", 
"<span class=\"comment\"> *              set in debug_level</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ut_trace_str\">acpi_ut_trace_str</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#function_name\">function_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component_id\">component_id</a>, char *<a class=\"id\" href=\"#string\">string</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_nesting_level\">acpi_gbl_nesting_level</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_track_stack_ptr\">acpi_ut_track_stack_ptr</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_debug_print\">acpi_debug_print</a>(<a class=\"id\" href=\"#ACPI_LV_FUNCTIONS\">ACPI_LV_FUNCTIONS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#line_number\">line_number</a>, <a class=\"id\" href=\"#function_name\">function_name</a>, <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#component_id\">component_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%s %s\\n\", <a class=\"id\" href=\"#acpi_gbl_fn_entry_str\">acpi_gbl_fn_entry_str</a>, <a class=\"id\" href=\"#string\">string</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_trace_u32</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  line_number         - Caller's line number</span>", 
"<span class=\"comment\"> *              function_name       - Caller's procedure name</span>", 
"<span class=\"comment\"> *              module_name         - Caller's module name</span>", 
"<span class=\"comment\"> *              component_id        - Caller's component ID</span>", 
"<span class=\"comment\"> *              Integer             - Integer to display</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Function entry trace.  Prints only if TRACE_FUNCTIONS bit is</span>", 
"<span class=\"comment\"> *              set in debug_level</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ut_trace_u32\">acpi_ut_trace_u32</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#function_name\">function_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component_id\">component_id</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#integer\">integer</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_nesting_level\">acpi_gbl_nesting_level</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_track_stack_ptr\">acpi_ut_track_stack_ptr</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_debug_print\">acpi_debug_print</a>(<a class=\"id\" href=\"#ACPI_LV_FUNCTIONS\">ACPI_LV_FUNCTIONS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#line_number\">line_number</a>, <a class=\"id\" href=\"#function_name\">function_name</a>, <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#component_id\">component_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%s %08X\\n\", <a class=\"id\" href=\"#acpi_gbl_fn_entry_str\">acpi_gbl_fn_entry_str</a>, <a class=\"id\" href=\"#integer\">integer</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_exit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  line_number         - Caller's line number</span>", 
"<span class=\"comment\"> *              function_name       - Caller's procedure name</span>", 
"<span class=\"comment\"> *              module_name         - Caller's module name</span>", 
"<span class=\"comment\"> *              component_id        - Caller's component ID</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Function exit trace.  Prints only if TRACE_FUNCTIONS bit is</span>", 
"<span class=\"comment\"> *              set in debug_level</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ut_exit\">acpi_ut_exit</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/>     const char *<a class=\"id\" href=\"#function_name\">function_name</a>,", 
"<span class=\"ts\"/>     const char *<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component_id\">component_id</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_debug_print\">acpi_debug_print</a>(<a class=\"id\" href=\"#ACPI_LV_FUNCTIONS\">ACPI_LV_FUNCTIONS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#line_number\">line_number</a>, <a class=\"id\" href=\"#function_name\">function_name</a>, <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#component_id\">component_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%s\\n\", <a class=\"id\" href=\"#acpi_gbl_fn_exit_str\">acpi_gbl_fn_exit_str</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_nesting_level\">acpi_gbl_nesting_level</a>--;", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_ut_exit\">acpi_ut_exit</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_status_exit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  line_number         - Caller's line number</span>", 
"<span class=\"comment\"> *              function_name       - Caller's procedure name</span>", 
"<span class=\"comment\"> *              module_name         - Caller's module name</span>", 
"<span class=\"comment\"> *              component_id        - Caller's component ID</span>", 
"<span class=\"comment\"> *              Status              - Exit status code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Function exit trace.  Prints only if TRACE_FUNCTIONS bit is</span>", 
"<span class=\"comment\"> *              set in debug_level. Prints exit status also.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"void", 
"<a class=\"id\" href=\"#acpi_ut_status_exit\">acpi_ut_status_exit</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#function_name\">function_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#module_name\">module_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component_id\">component_id</a>, <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_debug_print\">acpi_debug_print</a>(<a class=\"id\" href=\"#ACPI_LV_FUNCTIONS\">ACPI_LV_FUNCTIONS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#line_number\">line_number</a>, <a class=\"id\" href=\"#function_name\">function_name</a>, <a class=\"id\" href=\"#module_name\">module_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#component_id\">component_id</a>, \"%s %s\\n\", <a class=\"id\" href=\"#acpi_gbl_fn_exit_str\">acpi_gbl_fn_exit_str</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#acpi_format_exception\">acpi_format_exception</a>(<a class=\"id\" href=\"#status\">status</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_debug_print\">acpi_debug_print</a>(<a class=\"id\" href=\"#ACPI_LV_FUNCTIONS\">ACPI_LV_FUNCTIONS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#line_number\">line_number</a>, <a class=\"id\" href=\"#function_name\">function_name</a>, <a class=\"id\" href=\"#module_name\">module_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#component_id\">component_id</a>, \"%s ****Exception****: %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#acpi_gbl_fn_exit_str\">acpi_gbl_fn_exit_str</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#acpi_format_exception\">acpi_format_exception</a>(<a class=\"id\" href=\"#status\">status</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_nesting_level\">acpi_gbl_nesting_level</a>--;", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_ut_status_exit\">acpi_ut_status_exit</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_value_exit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  line_number         - Caller's line number</span>", 
"<span class=\"comment\"> *              function_name       - Caller's procedure name</span>", 
"<span class=\"comment\"> *              module_name         - Caller's module name</span>", 
"<span class=\"comment\"> *              component_id        - Caller's component ID</span>", 
"<span class=\"comment\"> *              Value               - Value to be printed with exit msg</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Function exit trace.  Prints only if TRACE_FUNCTIONS bit is</span>", 
"<span class=\"comment\"> *              set in debug_level. Prints exit value also.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"void", 
"<a class=\"id\" href=\"#acpi_ut_value_exit\">acpi_ut_value_exit</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#function_name\">function_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component_id\">component_id</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_debug_print\">acpi_debug_print</a>(<a class=\"id\" href=\"#ACPI_LV_FUNCTIONS\">ACPI_LV_FUNCTIONS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#line_number\">line_number</a>, <a class=\"id\" href=\"#function_name\">function_name</a>, <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#component_id\">component_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%s %8.8X%8.8X\\n\", <a class=\"id\" href=\"#acpi_gbl_fn_exit_str\">acpi_gbl_fn_exit_str</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#value\">value</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_nesting_level\">acpi_gbl_nesting_level</a>--;", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_ut_value_exit\">acpi_ut_value_exit</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_ptr_exit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  line_number         - Caller's line number</span>", 
"<span class=\"comment\"> *              function_name       - Caller's procedure name</span>", 
"<span class=\"comment\"> *              module_name         - Caller's module name</span>", 
"<span class=\"comment\"> *              component_id        - Caller's component ID</span>", 
"<span class=\"comment\"> *              Ptr                 - Pointer to display</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Function exit trace.  Prints only if TRACE_FUNCTIONS bit is</span>", 
"<span class=\"comment\"> *              set in debug_level. Prints exit value also.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"void", 
"<a class=\"id\" href=\"#acpi_ut_ptr_exit\">acpi_ut_ptr_exit</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#function_name\">function_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component_id\">component_id</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_debug_print\">acpi_debug_print</a>(<a class=\"id\" href=\"#ACPI_LV_FUNCTIONS\">ACPI_LV_FUNCTIONS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#line_number\">line_number</a>, <a class=\"id\" href=\"#function_name\">function_name</a>, <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#component_id\">component_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%s %p\\n\", <a class=\"id\" href=\"#acpi_gbl_fn_exit_str\">acpi_gbl_fn_exit_str</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_nesting_level\">acpi_gbl_nesting_level</a>--;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_dump_buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Buffer              - Buffer to dump</span>", 
"<span class=\"comment\"> *              Count               - Amount to dump, in bytes</span>", 
"<span class=\"comment\"> *              Display             - BYTE, WORD, DWORD, or QWORD display</span>", 
"<span class=\"comment\"> *              component_iD        - Caller's component ID</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Generic dump buffer in both hex and ascii.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ut_dump_buffer2\">acpi_ut_dump_buffer2</a>(<a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#display\">display</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#temp32\">temp32</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#buf_char\">buf_char</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"Null Buffer Pointer in DumpBuffer!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#count\">count</a> &lt; 4) || (<a class=\"id\" href=\"#count\">count</a> &amp; 0x01)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#display\">display</a> = <a class=\"id\" href=\"#DB_BYTE_DISPLAY\">DB_BYTE_DISPLAY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Nasty little dump buffer routine! */</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Print current offset */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%6.4X: \", <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Print 16 hex chars */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 16;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a> >= <a class=\"id\" href=\"#count\">count</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Dump fill spaces */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%*s\", ((<a class=\"id\" href=\"#display\">display</a> * 2) + 1), \" \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> += <a class=\"id\" href=\"#display\">display</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#display\">display</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#DB_BYTE_DISPLAY\">DB_BYTE_DISPLAY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:<span class=\"ts\"/><span class=\"comment\">/* Default is BYTE display */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%02X \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#buffer\">buffer</a>[(<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#DB_WORD_DISPLAY\">DB_WORD_DISPLAY</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_16_TO_32\">ACPI_MOVE_16_TO_32</a>(&amp;<a class=\"id\" href=\"#temp32\">temp32</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#buffer\">buffer</a>[(<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%04X \", <a class=\"id\" href=\"#temp32\">temp32</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#DB_DWORD_DISPLAY\">DB_DWORD_DISPLAY</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_32_TO_32\">ACPI_MOVE_32_TO_32</a>(&amp;<a class=\"id\" href=\"#temp32\">temp32</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#buffer\">buffer</a>[(<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%08X \", <a class=\"id\" href=\"#temp32\">temp32</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#DB_QWORD_DISPLAY\">DB_QWORD_DISPLAY</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_32_TO_32\">ACPI_MOVE_32_TO_32</a>(&amp;<a class=\"id\" href=\"#temp32\">temp32</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#buffer\">buffer</a>[(<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%08X\", <a class=\"id\" href=\"#temp32\">temp32</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_32_TO_32\">ACPI_MOVE_32_TO_32</a>(&amp;<a class=\"id\" href=\"#temp32\">temp32</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#buffer\">buffer</a>[(<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   4]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%08X \", <a class=\"id\" href=\"#temp32\">temp32</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> += <a class=\"id\" href=\"#display\">display</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Print the ASCII equivalent characters but watch out for the bad</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unprintable ones (printable chars are 0x20 through 0x7E)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\" \");", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 16; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a> >= <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf_char\">buf_char</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[(<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_IS_PRINT\">ACPI_IS_PRINT</a>(<a class=\"id\" href=\"#buf_char\">buf_char</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%c\", <a class=\"id\" href=\"#buf_char\">buf_char</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\".\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Done with that line. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> += 16;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_dump_buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Buffer              - Buffer to dump</span>", 
"<span class=\"comment\"> *              Count               - Amount to dump, in bytes</span>", 
"<span class=\"comment\"> *              Display             - BYTE, WORD, DWORD, or QWORD display</span>", 
"<span class=\"comment\"> *              component_iD        - Caller's component ID</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Generic dump buffer in both hex and ascii.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ut_dump_buffer\">acpi_ut_dump_buffer</a>(<a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#display\">display</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component_id\">component_id</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only dump the buffer if tracing is enabled */</span>", 
"", 
"<span class=\"ts\"/>if (!((<a class=\"id\" href=\"#ACPI_LV_TABLES\">ACPI_LV_TABLES</a> &amp; <a class=\"id\" href=\"#acpi_dbg_level\">acpi_dbg_level</a>) &&", 
"<span class=\"ts\"/>      (<a class=\"id\" href=\"#component_id\">component_id</a> &amp; <a class=\"id\" href=\"#acpi_dbg_layer\">acpi_dbg_layer</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_dump_buffer2\">acpi_ut_dump_buffer2</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#display\">display</a>);", 
"}", 
];
xr_frag_insert('l/6f/1e1cc4b31f1ab3ccd23e400b59e167580636c8.xr', __xr_tmp);
