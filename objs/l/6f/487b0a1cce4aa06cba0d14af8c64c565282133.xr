var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kexec.c - kexec system call</span>", 
"<span class=\"comment\"> * Copyright (C) 2002-2004 Eric Biederman  &lt;ebiederm@xmission.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This source code is licensed under the GNU General Public License,</span>", 
"<span class=\"comment\"> * Version 2.  See the file COPYING for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kexec\">kexec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#reboot\">reboot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elf\">elf</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elfcore\">elfcore</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#generated\">generated</a>/<a class=\"id\" href=\"#utsrelease\">utsrelease</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#utsname\">utsname</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#numa\">numa</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#console\">console</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmsg_dump\">kmsg_dump</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#sections\">sections</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Per cpu memory for storing cpu states in case of system crash. */</span>", 
"<a class=\"id\" href=\"#note_buf_t\">note_buf_t</a> <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#crash_notes\">crash_notes</a>;", 
"", 
"<span class=\"comment\">/* vmcoreinfo stuff */</span>", 
"static unsigned char <a class=\"id\" href=\"#vmcoreinfo_data\">vmcoreinfo_data</a>[<a class=\"id\" href=\"#VMCOREINFO_BYTES\">VMCOREINFO_BYTES</a>];", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#vmcoreinfo_note\">vmcoreinfo_note</a>[<a class=\"id\" href=\"#VMCOREINFO_NOTE_SIZE\">VMCOREINFO_NOTE_SIZE</a>/4];", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#vmcoreinfo_size\">vmcoreinfo_size</a>;", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#vmcoreinfo_max_size\">vmcoreinfo_max_size</a> = sizeof(<a class=\"id\" href=\"#vmcoreinfo_data\">vmcoreinfo_data</a>);", 
"", 
"<span class=\"comment\">/* Location of the reserved area for the crash kernel */</span>", 
"struct <a class=\"id\" href=\"#resource\">resource</a> <a class=\"id\" href=\"#crashk_res\">crashk_res</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a>  = \"Crash kernel\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#end\">end</a>   = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#IORESOURCE_BUSY\">IORESOURCE_BUSY</a> | <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>", 
"};", 
"", 
"int <a class=\"id\" href=\"#kexec_should_crash\">kexec_should_crash</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>() || !<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pid\">pid</a> || <a class=\"id\" href=\"#is_global_init\">is_global_init</a>(<a class=\"id\" href=\"#p\">p</a>) || <a class=\"id\" href=\"#panic_on_oops\">panic_on_oops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When kexec transitions to the new kernel there is a one-to-one</span>", 
"<span class=\"comment\"> * mapping between physical and virtual addresses.  On processors</span>", 
"<span class=\"comment\"> * where you can disable the MMU this is trivial, and easy.  For</span>", 
"<span class=\"comment\"> * others it is still a simple predictable page table to setup.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In that environment kexec copies the new kernel to its final</span>", 
"<span class=\"comment\"> * resting place.  This means I can only support memory whose</span>", 
"<span class=\"comment\"> * physical address can fit in an unsigned long.  In particular</span>", 
"<span class=\"comment\"> * addresses where (pfn &lt;&lt; PAGE_SHIFT) &gt; ULONG_MAX cannot be handled.</span>", 
"<span class=\"comment\"> * If the assembly stub has more restrictive requirements</span>", 
"<span class=\"comment\"> * KEXEC_SOURCE_MEMORY_LIMIT and KEXEC_DEST_MEMORY_LIMIT can be</span>", 
"<span class=\"comment\"> * defined more restrictively in &lt;asm/kexec.h&gt;.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The code for the transition from the current kernel to the</span>", 
"<span class=\"comment\"> * the new kernel is placed in the control_code_buffer, whose size</span>", 
"<span class=\"comment\"> * is given by KEXEC_CONTROL_PAGE_SIZE.  In the best case only a single</span>", 
"<span class=\"comment\"> * page of memory is necessary, but some architectures require more.</span>", 
"<span class=\"comment\"> * Because this memory must be identity mapped in the transition from</span>", 
"<span class=\"comment\"> * virtual to physical addresses it must live in the range</span>", 
"<span class=\"comment\"> * 0 - TASK_SIZE, as only the user space mappings are arbitrarily</span>", 
"<span class=\"comment\"> * modifiable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The assembly stub in the control code buffer is passed a linked list</span>", 
"<span class=\"comment\"> * of descriptor pages detailing the source pages of the new kernel,</span>", 
"<span class=\"comment\"> * and the destination addresses of those source pages.  As this data</span>", 
"<span class=\"comment\"> * structure is not used in the context of the current OS, it must</span>", 
"<span class=\"comment\"> * be self-contained.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The code has been made to work with highmem pages and will use a</span>", 
"<span class=\"comment\"> * destination page in its final resting place (if it happens</span>", 
"<span class=\"comment\"> * to allocate it).  The end product of this is that most of the</span>", 
"<span class=\"comment\"> * physical address space, and most of RAM can be used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Future directions include:</span>", 
"<span class=\"comment\"> *  - allocating a page table with the control code buffer identity</span>", 
"<span class=\"comment\"> *    mapped, to simplify machine_kexec and make kexec_on_panic more</span>", 
"<span class=\"comment\"> *    reliable.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * KIMAGE_NO_DEST is an impossible destination address..., for</span>", 
"<span class=\"comment\"> * allocating pages whose destination address we do not care about.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KIMAGE_NO_DEST\">KIMAGE_NO_DEST</a> (-1UL)", 
"", 
"static int <a class=\"id\" href=\"#kimage_is_destination_range\">kimage_is_destination_range</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kimage_alloc_page\">kimage_alloc_page</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#dest\">dest</a>);", 
"", 
"static int <a class=\"id\" href=\"#do_kimage_alloc\">do_kimage_alloc</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> **<a class=\"id\" href=\"#rimage\">rimage</a>, unsigned long <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/>                    unsigned long <a class=\"id\" href=\"#nr_segments\">nr_segments</a>,", 
"                            struct <a class=\"id\" href=\"#kexec_segment\">kexec_segment</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#segments\">segments</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#segment_bytes\">segment_bytes</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate a controlling structure */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#image\">image</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#image\">image</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#head\">head</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a> = &amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#last_entry\">last_entry</a> = &amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#control_page\">control_page</a> = ~0; <span class=\"comment\">/* By default this does not apply */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#KEXEC_TYPE_DEFAULT\">KEXEC_TYPE_DEFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the list of control pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#control_pages\">control_pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the list of destination pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#dest_pages\">dest_pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the list of unuseable pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#unuseable_pages\">unuseable_pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Read in the segments */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#nr_segments\">nr_segments</a> = <a class=\"id\" href=\"#nr_segments\">nr_segments</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#segment_bytes\">segment_bytes</a> = <a class=\"id\" href=\"#nr_segments\">nr_segments</a> * sizeof(*<a class=\"id\" href=\"#segments\">segments</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>, <a class=\"id\" href=\"#segments\">segments</a>, <a class=\"id\" href=\"#segment_bytes\">segment_bytes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Verify we have good destination addresses.  The caller is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * responsible for making certain we don't attempt to load</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the new image into invalid or reserved areas of RAM.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just verifies it is an address we can use.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since the kernel does everything in page size chunks ensure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the destination addreses are page aligned.  Too many</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * special cases crop of when we don't do this.  The most</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * insidious is getting overlapping destination addresses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * simply because addresses are changed to page size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * granularity.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EADDRNOTAVAIL\">EADDRNOTAVAIL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_segments\">nr_segments</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mstart\">mstart</a>, <a class=\"id\" href=\"#mend\">mend</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mstart\">mstart</a> = <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mend\">mend</a>   = <a class=\"id\" href=\"#mstart\">mstart</a> + <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#memsz\">memsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mstart\">mstart</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) || (<a class=\"id\" href=\"#mend\">mend</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mend\">mend</a> >= <a class=\"id\" href=\"#KEXEC_DESTINATION_MEMORY_LIMIT\">KEXEC_DESTINATION_MEMORY_LIMIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Verify our destination addresses do not overlap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we alloed overlapping destination addresses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * through very weird things can happen with no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * easy explanation as one segment stops on another.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_segments\">nr_segments</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mstart\">mstart</a>, <a class=\"id\" href=\"#mend\">mend</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mstart\">mstart</a> = <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mend\">mend</a>   = <a class=\"id\" href=\"#mstart\">mstart</a> + <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#memsz\">memsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pstart\">pstart</a>, <a class=\"id\" href=\"#pend\">pend</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pstart\">pstart</a> = <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pend\">pend</a>   = <a class=\"id\" href=\"#pstart\">pstart</a> + <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#memsz\">memsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Do the segments overlap ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mend\">mend</a> &gt; <a class=\"id\" href=\"#pstart\">pstart</a>) && (<a class=\"id\" href=\"#mstart\">mstart</a> &lt; <a class=\"id\" href=\"#pend\">pend</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure our buffer sizes are strictly less than</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * our memory sizes.  This should always be the case,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and it is easier to check up front than to be surprised</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * later on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_segments\">nr_segments</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bufsz\">bufsz</a> &gt; <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#memsz\">memsz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rimage\">rimage</a> = <a class=\"id\" href=\"#image\">image</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#image\">image</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kimage_normal_alloc\">kimage_normal_alloc</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> **<a class=\"id\" href=\"#rimage\">rimage</a>, unsigned long <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segments\">nr_segments</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kexec_segment\">kexec_segment</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#segments\">segments</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate and initialize a controlling structure */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#do_kimage_alloc\">do_kimage_alloc</a>(&amp;<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#nr_segments\">nr_segments</a>, <a class=\"id\" href=\"#segments\">segments</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rimage\">rimage</a> = <a class=\"id\" href=\"#image\">image</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find a location for the control code buffer, and add it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the vector of segments so that it's pages will also be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * counted as destination pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#control_code_page\">control_code_page</a> = <a class=\"id\" href=\"#kimage_alloc_control_pages\">kimage_alloc_control_pages</a>(<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#KEXEC_CONTROL_PAGE_SIZE\">KEXEC_CONTROL_PAGE_SIZE</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#control_code_page\">control_code_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Could not allocate control_code_buffer\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#swap_page\">swap_page</a> = <a class=\"id\" href=\"#kimage_alloc_control_pages\">kimage_alloc_control_pages</a>(<a class=\"id\" href=\"#image\">image</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#swap_page\">swap_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Could not allocate swap buffer\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rimage\">rimage</a> = <a class=\"id\" href=\"#image\">image</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#image\">image</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kimage_crash_alloc\">kimage_crash_alloc</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> **<a class=\"id\" href=\"#rimage\">rimage</a>, unsigned long <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segments\">nr_segments</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kexec_segment\">kexec_segment</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#segments\">segments</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Verify we have a valid entry point */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#entry\">entry</a> &lt; <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#start\">start</a>) || (<a class=\"id\" href=\"#entry\">entry</a> &gt; <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#end\">end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EADDRNOTAVAIL\">EADDRNOTAVAIL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate and initialize a controlling structure */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#do_kimage_alloc\">do_kimage_alloc</a>(&amp;<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#nr_segments\">nr_segments</a>, <a class=\"id\" href=\"#segments\">segments</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Enable the special crash kernel control page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation policy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#control_page\">control_page</a> = <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#KEXEC_TYPE_CRASH\">KEXEC_TYPE_CRASH</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Verify we have good destination addresses.  Normally</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the caller is responsible for making certain we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * attempt to load the new image into invalid or reserved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * areas of RAM.  But crash kernels are preloaded into a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reserved area of ram.  We must ensure the addresses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are in the reserved area otherwise preloading the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel could corrupt things.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EADDRNOTAVAIL\">EADDRNOTAVAIL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_segments\">nr_segments</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mstart\">mstart</a>, <a class=\"id\" href=\"#mend\">mend</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mstart\">mstart</a> = <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mend\">mend</a> = <a class=\"id\" href=\"#mstart\">mstart</a> + <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#memsz\">memsz</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ensure we are within the crash kernel limits */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mstart\">mstart</a> &lt; <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#start\">start</a>) || (<a class=\"id\" href=\"#mend\">mend</a> &gt; <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find a location for the control code buffer, and add</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the vector of segments so that it's pages will also be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * counted as destination pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#control_code_page\">control_code_page</a> = <a class=\"id\" href=\"#kimage_alloc_control_pages\">kimage_alloc_control_pages</a>(<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#KEXEC_CONTROL_PAGE_SIZE\">KEXEC_CONTROL_PAGE_SIZE</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#control_code_page\">control_code_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Could not allocate control_code_buffer\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rimage\">rimage</a> = <a class=\"id\" href=\"#image\">image</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#image\">image</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kimage_is_destination_range\">kimage_is_destination_range</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#nr_segments\">nr_segments</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mstart\">mstart</a>, <a class=\"id\" href=\"#mend\">mend</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mstart\">mstart</a> = <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mend\">mend</a> = <a class=\"id\" href=\"#mstart\">mstart</a> + <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#memsz\">memsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#mstart\">mstart</a>) && (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#mend\">mend</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kimage_alloc_pages\">kimage_alloc_pages</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageReserved\">SetPageReserved</a>(<a class=\"id\" href=\"#pages\">pages</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pages\">pages</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kimage_free_pages\">kimage_free_pages</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageReserved\">ClearPageReserved</a>(<a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_pages\">__free_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kimage_free_page_list\">kimage_free_page_list</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pos\">pos</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kimage_free_pages\">kimage_free_pages</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kimage_alloc_normal_control_pages\">kimage_alloc_normal_control_pages</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Control pages are special, they are the intermediaries</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that are needed while we copy the rest of the pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to their final resting place.  As such they must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not conflict with either the destination addresses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or memory the kernel is already using.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The only case where we really need more than one of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * these are for architectures where we cannot disable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the MMU and must instead generate an identity mapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page table for all of the memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At worst this runs in O(N) of the image size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#extra_pages\">extra_pages</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#extra_pages\">extra_pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Loop while I can allocate a page and the page allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is a destination page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#epfn\">epfn</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#eaddr\">eaddr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#kimage_alloc_pages\">kimage_alloc_pages</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>   = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epfn\">epfn</a>  = <a class=\"id\" href=\"#pfn\">pfn</a> + <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>  = <a class=\"id\" href=\"#pfn\">pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eaddr\">eaddr</a> = <a class=\"id\" href=\"#epfn\">epfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#epfn\">epfn</a> >= (<a class=\"id\" href=\"#KEXEC_CONTROL_MEMORY_LIMIT\">KEXEC_CONTROL_MEMORY_LIMIT</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#kimage_is_destination_range\">kimage_is_destination_range</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#eaddr\">eaddr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pages\">pages</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#extra_pages\">extra_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remember the allocated page... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pages\">pages</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#control_pages\">control_pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Because the page is already in it's destination</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * location we will never allocate another page at</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that address.  Therefore kimage_alloc_pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will not return it (again) and we don't need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to give it an entry in image-&gt;segment[].</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Deal with the destination pages I have inadvertently allocated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ideally I would convert multi-page allocations into single</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page allocations, and add everyting to image-&gt;dest_pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For now it is simpler to just free the pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kimage_free_page_list\">kimage_free_page_list</a>(&amp;<a class=\"id\" href=\"#extra_pages\">extra_pages</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pages\">pages</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kimage_alloc_crash_control_pages\">kimage_alloc_crash_control_pages</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Control pages are special, they are the intermediaries</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that are needed while we copy the rest of the pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to their final resting place.  As such they must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not conflict with either the destination addresses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or memory the kernel is already using.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Control pages are also the only pags we must allocate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when loading a crash kernel.  All of the other pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are specified by the segments and we just memcpy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * into them directly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The only case where we really need more than one of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * these are for architectures where we cannot disable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the MMU and must instead generate an identity mapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page table for all of the memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Given the low demand this implements a very simple</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocator that finds the first hole of the appropriate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * size in the reserved memory region, and allocates all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the memory up to and including the hole.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hole_start\">hole_start</a>, <a class=\"id\" href=\"#hole_end\">hole_end</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = (1 << <a class=\"id\" href=\"#order\">order</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hole_start\">hole_start</a> = (<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#control_page\">control_page</a> + (<a class=\"id\" href=\"#size\">size</a> - 1)) &amp; ~(<a class=\"id\" href=\"#size\">size</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hole_end\">hole_end</a>   = <a class=\"id\" href=\"#hole_start\">hole_start</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#hole_end\">hole_end</a> <= <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hole_end\">hole_end</a> &gt; <a class=\"id\" href=\"#KEXEC_CONTROL_MEMORY_LIMIT\">KEXEC_CONTROL_MEMORY_LIMIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hole_end\">hole_end</a> &gt; <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* See if I overlap any of the segments */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#nr_segments\">nr_segments</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mstart\">mstart</a>, <a class=\"id\" href=\"#mend\">mend</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mstart\">mstart</a> = <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mend\">mend</a>   = <a class=\"id\" href=\"#mstart\">mstart</a> + <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#memsz\">memsz</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#hole_end\">hole_end</a> >= <a class=\"id\" href=\"#mstart\">mstart</a>) && (<a class=\"id\" href=\"#hole_start\">hole_start</a> <= <a class=\"id\" href=\"#mend\">mend</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Advance the hole to the end of the segment */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hole_start\">hole_start</a> = (<a class=\"id\" href=\"#mend\">mend</a> + (<a class=\"id\" href=\"#size\">size</a> - 1)) &amp; ~(<a class=\"id\" href=\"#size\">size</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hole_end\">hole_end</a>   = <a class=\"id\" href=\"#hole_start\">hole_start</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If I don't overlap any segments I have found my hole! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#nr_segments\">nr_segments</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#hole_start\">hole_start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#control_page\">control_page</a> = <a class=\"id\" href=\"#hole_end\">hole_end</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pages\">pages</a>;", 
"}", 
"", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kimage_alloc_control_pages\">kimage_alloc_control_pages</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KEXEC_TYPE_DEFAULT\">KEXEC_TYPE_DEFAULT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#kimage_alloc_normal_control_pages\">kimage_alloc_normal_control_pages</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KEXEC_TYPE_CRASH\">KEXEC_TYPE_CRASH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#kimage_alloc_crash_control_pages\">kimage_alloc_crash_control_pages</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pages\">pages</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kimage_add_entry\">kimage_add_entry</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#kimage_entry_t\">kimage_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a> == <a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#last_entry\">last_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kimage_entry_t\">kimage_entry_t</a> *<a class=\"id\" href=\"#ind_page\">ind_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#kimage_alloc_page\">kimage_alloc_page</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#KIMAGE_NO_DEST\">KIMAGE_NO_DEST</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ind_page\">ind_page</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#ind_page\">ind_page</a>) | <a class=\"id\" href=\"#IND_INDIRECTION\">IND_INDIRECTION</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#ind_page\">ind_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#last_entry\">last_entry</a> = <a class=\"id\" href=\"#ind_page\">ind_page</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      ((<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>/sizeof(<a class=\"id\" href=\"#kimage_entry_t\">kimage_entry_t</a>)) - 1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a>++;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a> = 0;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kimage_set_destination\">kimage_set_destination</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#destination\">destination</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destination\">destination</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#kimage_add_entry\">kimage_add_entry</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#destination\">destination</a> | <a class=\"id\" href=\"#IND_DESTINATION\">IND_DESTINATION</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#destination\">destination</a> = <a class=\"id\" href=\"#destination\">destination</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#kimage_add_page\">kimage_add_page</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>, unsigned long <a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#kimage_add_entry\">kimage_add_entry</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#page\">page</a> | <a class=\"id\" href=\"#IND_SOURCE\">IND_SOURCE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#destination\">destination</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#kimage_free_extra_pages\">kimage_free_extra_pages</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Walk through and free any extra destination pages I may have */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kimage_free_page_list\">kimage_free_page_list</a>(&amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#dest_pages\">dest_pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Walk through and free any unuseable pages I have cached */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kimage_free_page_list\">kimage_free_page_list</a>(&amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#unuseable_pages\">unuseable_pages</a>);", 
"", 
"}", 
"static void <a class=\"id\" href=\"#kimage_terminate\">kimage_terminate</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a>++;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#IND_DONE\">IND_DONE</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_kimage_entry\">for_each_kimage_entry</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#entry\">entry</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#head\">head</a>; (<a class=\"id\" href=\"#entry\">entry</a> = *<a class=\"id\" href=\"#ptr\">ptr</a>) && !(<a class=\"id\" href=\"#entry\">entry</a> &amp; <a class=\"id\" href=\"#IND_DONE\">IND_DONE</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = (<a class=\"id\" href=\"#entry\">entry</a> &amp; <a class=\"id\" href=\"#IND_INDIRECTION\">IND_INDIRECTION</a>)? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>((<a class=\"id\" href=\"#entry\">entry</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)): <a class=\"id\" href=\"#ptr\">ptr</a> +1)", 
"", 
"static void <a class=\"id\" href=\"#kimage_free_entry\">kimage_free_entry</a>(<a class=\"id\" href=\"#kimage_entry_t\">kimage_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#entry\">entry</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kimage_free_pages\">kimage_free_pages</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kimage_free\">kimage_free</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kimage_entry_t\">kimage_entry_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kimage_entry_t\">kimage_entry_t</a> <a class=\"id\" href=\"#ind\">ind</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#image\">image</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kimage_free_extra_pages\">kimage_free_extra_pages</a>(<a class=\"id\" href=\"#image\">image</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_kimage_entry\">for_each_kimage_entry</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> &amp; <a class=\"id\" href=\"#IND_INDIRECTION\">IND_INDIRECTION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Free the previous indirection page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ind\">ind</a> &amp; <a class=\"id\" href=\"#IND_INDIRECTION\">IND_INDIRECTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kimage_free_entry\">kimage_free_entry</a>(<a class=\"id\" href=\"#ind\">ind</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Save this indirection page until we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * done with it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ind\">ind</a> = <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#entry\">entry</a> &amp; <a class=\"id\" href=\"#IND_SOURCE\">IND_SOURCE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kimage_free_entry\">kimage_free_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the final indirection page */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ind\">ind</a> &amp; <a class=\"id\" href=\"#IND_INDIRECTION\">IND_INDIRECTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kimage_free_entry\">kimage_free_entry</a>(<a class=\"id\" href=\"#ind\">ind</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Handle any machine specific cleanup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_kexec_cleanup\">machine_kexec_cleanup</a>(<a class=\"id\" href=\"#image\">image</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the kexec control pages... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kimage_free_page_list\">kimage_free_page_list</a>(&amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#control_pages\">control_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#image\">image</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#kimage_entry_t\">kimage_entry_t</a> *<a class=\"id\" href=\"#kimage_dst_used\">kimage_dst_used</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kimage_entry_t\">kimage_entry_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#destination\">destination</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_kimage_entry\">for_each_kimage_entry</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> &amp; <a class=\"id\" href=\"#IND_DESTINATION\">IND_DESTINATION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destination\">destination</a> = <a class=\"id\" href=\"#entry\">entry</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#entry\">entry</a> &amp; <a class=\"id\" href=\"#IND_SOURCE\">IND_SOURCE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#destination\">destination</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destination\">destination</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#kimage_alloc_page\">kimage_alloc_page</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#destination\">destination</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here we implement safeguards to ensure that a source page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is not copied to its destination page before the data on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the destination page is no longer useful.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To do this we maintain the invariant that a source page is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * either its own destination page, or it is not a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * destination page at all.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * That is slightly stronger than required, but the proof</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that no problems will not occur is trivial, and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * implementation is simply to verify.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When allocating all pages normally this algorithm will run</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in O(N) time, but in the worst case it will run in O(N^2)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time.   If the runtime is a problem the data structures can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be fixed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Walk through the list of destination pages, and see if I</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have a match.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#dest_pages\">dest_pages</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#destination\">destination</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kimage_entry_t\">kimage_entry_t</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Allocate a page, if we run out of memory give up */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#kimage_alloc_pages\">kimage_alloc_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the page cannot be used file it away */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>) &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#KEXEC_SOURCE_MEMORY_LIMIT\">KEXEC_SOURCE_MEMORY_LIMIT</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#unuseable_pages\">unuseable_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If it is the destination page we want use it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#destination\">destination</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the page is not a destination page use it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kimage_is_destination_range\">kimage_is_destination_range</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * I know that the page is someones destination page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * See if there is already a source page for this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * destination page.  And if so swap the source pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#kimage_dst_used\">kimage_dst_used</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If so move it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_addr\">old_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#old_page\">old_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_addr\">old_addr</a> = *<a class=\"id\" href=\"#old\">old</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_page\">old_page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#old_addr\">old_addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_highpage\">copy_highpage</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#addr\">addr</a> | (*<a class=\"id\" href=\"#old\">old</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The old page I have found cannot be a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * destination page, so return it if it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * gfp_flags honor the ones passed in.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#old_page\">old_page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kimage_free_pages\">kimage_free_pages</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#old_addr\">old_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#old_page\">old_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Place the page on the destination list I</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * will use it later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#dest_pages\">dest_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kimage_load_normal_segment\">kimage_load_normal_segment</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#kexec_segment\">kexec_segment</a> *<a class=\"id\" href=\"#segment\">segment</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#maddr\">maddr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ubytes\">ubytes</a>, <a class=\"id\" href=\"#mbytes\">mbytes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#segment\">segment</a>-><a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ubytes\">ubytes</a> = <a class=\"id\" href=\"#segment\">segment</a>-><a class=\"id\" href=\"#bufsz\">bufsz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mbytes\">mbytes</a> = <a class=\"id\" href=\"#segment\">segment</a>-><a class=\"id\" href=\"#memsz\">memsz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maddr\">maddr</a> = <a class=\"id\" href=\"#segment\">segment</a>-><a class=\"id\" href=\"#mem\">mem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#kimage_set_destination\">kimage_set_destination</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#maddr\">maddr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#mbytes\">mbytes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#uchunk\">uchunk</a>, <a class=\"id\" href=\"#mchunk\">mchunk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#kimage_alloc_page\">kimage_alloc_page</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#GFP_HIGHUSER\">GFP_HIGHUSER</a>, <a class=\"id\" href=\"#maddr\">maddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a>  = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#kimage_add_page\">kimage_add_page</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><< <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#kmap\">kmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Start with a clear page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, 0, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#maddr\">maddr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mchunk\">mchunk</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - (<a class=\"id\" href=\"#maddr\">maddr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mchunk\">mchunk</a> &gt; <a class=\"id\" href=\"#mbytes\">mbytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mchunk\">mchunk</a> = <a class=\"id\" href=\"#mbytes\">mbytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uchunk\">uchunk</a> = <a class=\"id\" href=\"#mchunk\">mchunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#uchunk\">uchunk</a> &gt; <a class=\"id\" href=\"#ubytes\">ubytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uchunk\">uchunk</a> = <a class=\"id\" href=\"#ubytes\">ubytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#uchunk\">uchunk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap\">kunmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ubytes\">ubytes</a> -= <a class=\"id\" href=\"#uchunk\">uchunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maddr\">maddr</a>  += <a class=\"id\" href=\"#mchunk\">mchunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>    += <a class=\"id\" href=\"#mchunk\">mchunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mbytes\">mbytes</a> -= <a class=\"id\" href=\"#mchunk\">mchunk</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kimage_load_crash_segment\">kimage_load_crash_segment</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kexec_segment\">kexec_segment</a> *<a class=\"id\" href=\"#segment\">segment</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* For crash dumps kernels we simply copy the data from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * user space to it's destination.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We do things a page at a time for the sake of kmap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#maddr\">maddr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ubytes\">ubytes</a>, <a class=\"id\" href=\"#mbytes\">mbytes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#segment\">segment</a>-><a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ubytes\">ubytes</a> = <a class=\"id\" href=\"#segment\">segment</a>-><a class=\"id\" href=\"#bufsz\">bufsz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mbytes\">mbytes</a> = <a class=\"id\" href=\"#segment\">segment</a>-><a class=\"id\" href=\"#memsz\">memsz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maddr\">maddr</a> = <a class=\"id\" href=\"#segment\">segment</a>-><a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#mbytes\">mbytes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#uchunk\">uchunk</a>, <a class=\"id\" href=\"#mchunk\">mchunk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#maddr\">maddr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a>  = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#kmap\">kmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#maddr\">maddr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mchunk\">mchunk</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - (<a class=\"id\" href=\"#maddr\">maddr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mchunk\">mchunk</a> &gt; <a class=\"id\" href=\"#mbytes\">mbytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mchunk\">mchunk</a> = <a class=\"id\" href=\"#mbytes\">mbytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uchunk\">uchunk</a> = <a class=\"id\" href=\"#mchunk\">mchunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#uchunk\">uchunk</a> &gt; <a class=\"id\" href=\"#ubytes\">ubytes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uchunk\">uchunk</a> = <a class=\"id\" href=\"#ubytes\">ubytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Zero the trailing part of the page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ptr\">ptr</a> + <a class=\"id\" href=\"#uchunk\">uchunk</a>, 0, <a class=\"id\" href=\"#mchunk\">mchunk</a> - <a class=\"id\" href=\"#uchunk\">uchunk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#uchunk\">uchunk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kexec_flush_icache_page\">kexec_flush_icache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap\">kunmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ubytes\">ubytes</a> -= <a class=\"id\" href=\"#uchunk\">uchunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maddr\">maddr</a>  += <a class=\"id\" href=\"#mchunk\">mchunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>    += <a class=\"id\" href=\"#mchunk\">mchunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mbytes\">mbytes</a> -= <a class=\"id\" href=\"#mchunk\">mchunk</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kimage_load_segment\">kimage_load_segment</a>(struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#image\">image</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kexec_segment\">kexec_segment</a> *<a class=\"id\" href=\"#segment\">segment</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KEXEC_TYPE_DEFAULT\">KEXEC_TYPE_DEFAULT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#kimage_load_normal_segment\">kimage_load_normal_segment</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#segment\">segment</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KEXEC_TYPE_CRASH\">KEXEC_TYPE_CRASH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#kimage_load_crash_segment\">kimage_load_crash_segment</a>(<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#segment\">segment</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Exec Kernel system call: for obvious reasons only root may call it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call breaks up into three pieces.</span>", 
"<span class=\"comment\"> * - A generic part which loads the new kernel from the current</span>", 
"<span class=\"comment\"> *   address space, and very carefully places the data in the</span>", 
"<span class=\"comment\"> *   allocated pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - A generic part that interacts with the kernel and tells all of</span>", 
"<span class=\"comment\"> *   the devices to shut down.  Preventing on-going dmas, and placing</span>", 
"<span class=\"comment\"> *   the devices in a consistent state so a later kernel can</span>", 
"<span class=\"comment\"> *   reinitialize them.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - A machine specific part that includes the syscall number</span>", 
"<span class=\"comment\"> *   and the copies the image to it's final destination.  And</span>", 
"<span class=\"comment\"> *   jumps into the image at entry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * kexec does not sync, or unmount filesystems so if you need</span>", 
"<span class=\"comment\"> * that to happen you need to do that yourself.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#kexec_image\">kexec_image</a>;", 
"struct <a class=\"id\" href=\"#kimage\">kimage</a> *<a class=\"id\" href=\"#kexec_crash_image\">kexec_crash_image</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#kexec_mutex\">kexec_mutex</a>);", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE4\">SYSCALL_DEFINE4</a>(<a class=\"id\" href=\"#kexec_load\">kexec_load</a>, unsigned long, <a class=\"id\" href=\"#entry\">entry</a>, unsigned long, <a class=\"id\" href=\"#nr_segments\">nr_segments</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kexec_segment\">kexec_segment</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#segments\">segments</a>, unsigned long, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kimage\">kimage</a> **<a class=\"id\" href=\"#dest_image\">dest_image</a>, *<a class=\"id\" href=\"#image\">image</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We only trust the superuser with rebooting the system. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_BOOT\">CAP_SYS_BOOT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Verify we have a legal set of flags</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This leaves us room for future extensions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEXEC_FLAGS\">KEXEC_FLAGS</a>) != (<a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#KEXEC_ARCH_MASK\">KEXEC_ARCH_MASK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Verify we are on the appropriate architecture */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEXEC_ARCH_MASK\">KEXEC_ARCH_MASK</a>) != <a class=\"id\" href=\"#KEXEC_ARCH\">KEXEC_ARCH</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEXEC_ARCH_MASK\">KEXEC_ARCH_MASK</a>) != <a class=\"id\" href=\"#KEXEC_ARCH_DEFAULT\">KEXEC_ARCH_DEFAULT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put an artificial cap on the number</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of segments passed to kexec_load.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_segments\">nr_segments</a> &gt; <a class=\"id\" href=\"#KEXEC_SEGMENT_MAX\">KEXEC_SEGMENT_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Because we write directly to the reserved memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * region when loading crash kernels we need a mutex here to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prevent multiple crash  kernels from attempting to load</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * simultaneously, and to prevent a crash kernel from loading</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * over the top of a in use crash kernel.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * KISS: always take the mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mutex_trylock\">mutex_trylock</a>(&amp;<a class=\"id\" href=\"#kexec_mutex\">kexec_mutex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest_image\">dest_image</a> = &amp;<a class=\"id\" href=\"#kexec_image\">kexec_image</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEXEC_ON_CRASH\">KEXEC_ON_CRASH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest_image\">dest_image</a> = &amp;<a class=\"id\" href=\"#kexec_crash_image\">kexec_crash_image</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_segments\">nr_segments</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Loading another kernel to reboot into */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEXEC_ON_CRASH\">KEXEC_ON_CRASH</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#kimage_normal_alloc\">kimage_normal_alloc</a>(&amp;<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_segments\">nr_segments</a>, <a class=\"id\" href=\"#segments\">segments</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Loading another kernel to switch to if this one crashes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEXEC_ON_CRASH\">KEXEC_ON_CRASH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Free any current crash dump kernel before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we corrupt it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kimage_free\">kimage_free</a>(<a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#kexec_crash_image\">kexec_crash_image</a>, <a class=\"id\" href=\"#NULL\">NULL</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#kimage_crash_alloc\">kimage_crash_alloc</a>(&amp;<a class=\"id\" href=\"#image\">image</a>, <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#nr_segments\">nr_segments</a>, <a class=\"id\" href=\"#segments\">segments</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEXEC_PRESERVE_CONTEXT\">KEXEC_PRESERVE_CONTEXT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#preserve_context\">preserve_context</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#machine_kexec_prepare\">machine_kexec_prepare</a>(<a class=\"id\" href=\"#image\">image</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_segments\">nr_segments</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#kimage_load_segment\">kimage_load_segment</a>(<a class=\"id\" href=\"#image\">image</a>, &amp;<a class=\"id\" href=\"#image\">image</a>-><a class=\"id\" href=\"#segment\">segment</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kimage_terminate\">kimage_terminate</a>(<a class=\"id\" href=\"#image\">image</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Install the new kernel, and  Uninstall the old */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#image\">image</a> = <a class=\"id\" href=\"#xchg\">xchg</a>(<a class=\"id\" href=\"#dest_image\">dest_image</a>, <a class=\"id\" href=\"#image\">image</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kexec_mutex\">kexec_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kimage_free\">kimage_free</a>(<a class=\"id\" href=\"#image\">image</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> long <a class=\"id\" href=\"#compat_sys_kexec_load\">compat_sys_kexec_load</a>(unsigned long <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segments\">nr_segments</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#compat_kexec_segment\">compat_kexec_segment</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#segments\">segments</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#compat_kexec_segment\">compat_kexec_segment</a> <a class=\"id\" href=\"#in\">in</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kexec_segment\">kexec_segment</a> <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ksegments\">ksegments</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't allow clients that don't understand the native</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * architecture to do anything.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KEXEC_ARCH_MASK\">KEXEC_ARCH_MASK</a>) == <a class=\"id\" href=\"#KEXEC_ARCH_DEFAULT\">KEXEC_ARCH_DEFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_segments\">nr_segments</a> &gt; <a class=\"id\" href=\"#KEXEC_SEGMENT_MAX\">KEXEC_SEGMENT_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ksegments\">ksegments</a> = <a class=\"id\" href=\"#compat_alloc_user_space\">compat_alloc_user_space</a>(<a class=\"id\" href=\"#nr_segments\">nr_segments</a> * sizeof(<a class=\"id\" href=\"#out\">out</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_segments\">nr_segments</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#in\">in</a>, &amp;<a class=\"id\" href=\"#segments\">segments</a>[<a class=\"id\" href=\"#i\">i</a>], sizeof(<a class=\"id\" href=\"#in\">in</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#buf\">buf</a>   = <a class=\"id\" href=\"#compat_ptr\">compat_ptr</a>(<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#bufsz\">bufsz</a> = <a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#bufsz\">bufsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#mem\">mem</a>   = <a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#memsz\">memsz</a> = <a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#memsz\">memsz</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(&amp;<a class=\"id\" href=\"#ksegments\">ksegments</a>[<a class=\"id\" href=\"#i\">i</a>], &amp;<a class=\"id\" href=\"#out\">out</a>, sizeof(<a class=\"id\" href=\"#out\">out</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_kexec_load\">sys_kexec_load</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#nr_segments\">nr_segments</a>, <a class=\"id\" href=\"#ksegments\">ksegments</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#crash_kexec\">crash_kexec</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Take the kexec_mutex here to prevent sys_kexec_load</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * running on one cpu from replacing the crash kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we are using after a panic on a different cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the crash kernel was not located in a fixed area</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of memory the xchg(&amp;kexec_crash_image) would be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sufficient.  But since I reuse the memory...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mutex_trylock\">mutex_trylock</a>(&amp;<a class=\"id\" href=\"#kexec_mutex\">kexec_mutex</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kexec_crash_image\">kexec_crash_image</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> <a class=\"id\" href=\"#fixed_regs\">fixed_regs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmsg_dump\">kmsg_dump</a>(<a class=\"id\" href=\"#KMSG_DUMP_KEXEC\">KMSG_DUMP_KEXEC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crash_setup_regs\">crash_setup_regs</a>(&amp;<a class=\"id\" href=\"#fixed_regs\">fixed_regs</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crash_save_vmcoreinfo\">crash_save_vmcoreinfo</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#machine_crash_shutdown\">machine_crash_shutdown</a>(&amp;<a class=\"id\" href=\"#fixed_regs\">fixed_regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#machine_kexec\">machine_kexec</a>(<a class=\"id\" href=\"#kexec_crash_image\">kexec_crash_image</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kexec_mutex\">kexec_mutex</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#crash_get_memory_size\">crash_get_memory_size</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kexec_mutex\">kexec_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#end\">end</a> != <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#start\">start</a> + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kexec_mutex\">kexec_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_reserved_phys_range\">free_reserved_phys_range</a>(unsigned long <a class=\"id\" href=\"#begin\">begin</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#begin\">begin</a>; <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageReserved\">ClearPageReserved</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_page_count\">init_page_count</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#addr\">addr</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totalram_pages\">totalram_pages</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#crash_shrink_memory\">crash_shrink_memory</a>(unsigned long <a class=\"id\" href=\"#new_size\">new_size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kexec_mutex\">kexec_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kexec_crash_image\">kexec_crash_image</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_size\">new_size</a> >= <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a> + 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_size\">new_size</a> == <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a> + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#new_size\">new_size</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_reserved_phys_range\">free_reserved_phys_range</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#end\">end</a>) && (<a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#parent\">parent</a> != <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_resource\">release_resource</a>(&amp;<a class=\"id\" href=\"#crashk_res\">crashk_res</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crashk_res\">crashk_res</a>.<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a> - 1;", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kexec_mutex\">kexec_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#append_elf_note\">append_elf_note</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#name\">name</a>, unsigned <a class=\"id\" href=\"#type\">type</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#data_len\">data_len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_note\">elf_note</a> <a class=\"id\" href=\"#note\">note</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note\">note</a>.<a class=\"id\" href=\"#n_namesz\">n_namesz</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note\">note</a>.<a class=\"id\" href=\"#n_descsz\">n_descsz</a> = <a class=\"id\" href=\"#data_len\">data_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note\">note</a>.<a class=\"id\" href=\"#n_type\">n_type</a>   = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#note\">note</a>, sizeof(<a class=\"id\" href=\"#note\">note</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += (sizeof(<a class=\"id\" href=\"#note\">note</a>) + 3)/4;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#note\">note</a>.<a class=\"id\" href=\"#n_namesz\">n_namesz</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += (<a class=\"id\" href=\"#note\">note</a>.<a class=\"id\" href=\"#n_namesz\">n_namesz</a> + 3)/4;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#note\">note</a>.<a class=\"id\" href=\"#n_descsz\">n_descsz</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += (<a class=\"id\" href=\"#note\">note</a>.<a class=\"id\" href=\"#n_descsz\">n_descsz</a> + 3)/4;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#final_note\">final_note</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_note\">elf_note</a> <a class=\"id\" href=\"#note\">note</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note\">note</a>.<a class=\"id\" href=\"#n_namesz\">n_namesz</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note\">note</a>.<a class=\"id\" href=\"#n_descsz\">n_descsz</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note\">note</a>.<a class=\"id\" href=\"#n_type\">n_type</a>   = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#note\">note</a>, sizeof(<a class=\"id\" href=\"#note\">note</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#crash_save_cpu\">crash_save_cpu</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_prstatus\">elf_prstatus</a> <a class=\"id\" href=\"#prstatus\">prstatus</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#cpu\">cpu</a> &lt; 0) || (<a class=\"id\" href=\"#cpu\">cpu</a> >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Using ELF notes here is opportunistic.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * I need a well defined structure format</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the data I pass, and I need tags</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the data to indicate what information I have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * squirrelled away.  ELF notes happen to provide</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all of that, so there is no need to invent something new.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = (<a class=\"id\" href=\"#u32\">u32</a>*)<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#crash_notes\">crash_notes</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#prstatus\">prstatus</a>, 0, sizeof(<a class=\"id\" href=\"#prstatus\">prstatus</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prstatus\">prstatus</a>.<a class=\"id\" href=\"#pr_pid\">pr_pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_core_copy_kernel_regs\">elf_core_copy_kernel_regs</a>(&amp;<a class=\"id\" href=\"#prstatus\">prstatus</a>.<a class=\"id\" href=\"#pr_reg\">pr_reg</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#append_elf_note\">append_elf_note</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#KEXEC_CORE_NOTE_NAME\">KEXEC_CORE_NOTE_NAME</a>, <a class=\"id\" href=\"#NT_PRSTATUS\">NT_PRSTATUS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#prstatus\">prstatus</a>, sizeof(<a class=\"id\" href=\"#prstatus\">prstatus</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#final_note\">final_note</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#crash_notes_memory_init\">crash_notes_memory_init</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate memory for saving cpu registers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crash_notes\">crash_notes</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(<a class=\"id\" href=\"#note_buf_t\">note_buf_t</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#crash_notes\">crash_notes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Kexec: Memory allocation for saving cpu register\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" states failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#crash_notes_memory_init\">crash_notes_memory_init</a>)", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * parsing the \"crashkernel\" commandline</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this code is intended to be called from architecture specific code</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function parses command lines in the format</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   crashkernel=ramsize-range:size[,...][@offset]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns 0 on success and -EINVAL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_crashkernel_mem\">parse_crashkernel_mem</a>(char <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cmdline\">cmdline</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long<span class=\"ts\"/><a class=\"id\" href=\"#system_ram\">system_ram</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long<span class=\"ts\"/>*<a class=\"id\" href=\"#crash_size\">crash_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long<span class=\"ts\"/>*<a class=\"id\" href=\"#crash_base\">crash_base</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cmdline\">cmdline</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for each entry of the comma-separated list */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#ULLONG_MAX\">ULLONG_MAX</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* get the start of the range */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#cur\">cur</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> == <a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"crashkernel: Memory value expected\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#cur\">cur</a> != '-') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"crashkernel: '-' expected\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if no ':' is here, than we read the end */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#cur\">cur</a> != ':') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#cur\">cur</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> == <a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"crashkernel: Memory \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"value expected\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"crashkernel: end <= start\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#cur\">cur</a> != ':') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"crashkernel: ':' expected\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#cur\">cur</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> == <a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Memory value expected\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#system_ram\">system_ram</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"crashkernel: invalid size\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* match ? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#system_ram\">system_ram</a> >= <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#system_ram\">system_ram</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#crash_size\">crash_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (*<a class=\"id\" href=\"#cur\">cur</a>++ == ',');", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#crash_size\">crash_size</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (*<a class=\"id\" href=\"#cur\">cur</a> && *<a class=\"id\" href=\"#cur\">cur</a> != ' ' && *<a class=\"id\" href=\"#cur\">cur</a> != '@')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#cur\">cur</a> == '@') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#crash_base\">crash_base</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#cur\">cur</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> == <a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Memory value expected \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"after '@'\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * That function parses \"simple\" (old) crashkernel command lines like</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>crashkernel=size[@offset]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns 0 on success and -EINVAL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_crashkernel_simple\">parse_crashkernel_simple</a>(char <span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cmdline\">cmdline</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long long <span class=\"ts\"/>*<a class=\"id\" href=\"#crash_size\">crash_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long long <span class=\"ts\"/>*<a class=\"id\" href=\"#crash_base\">crash_base</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cmdline\">cmdline</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#crash_size\">crash_size</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#cmdline\">cmdline</a>, &amp;<a class=\"id\" href=\"#cur\">cur</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmdline\">cmdline</a> == <a class=\"id\" href=\"#cur\">cur</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"crashkernel: memory value expected\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#cur\">cur</a> == '@')", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#crash_base\">crash_base</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#cur\">cur</a>+1, &amp;<a class=\"id\" href=\"#cur\">cur</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * That function is the entry point for command line parsing and should be</span>", 
"<span class=\"comment\"> * called from the arch-specific code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_crashkernel\">parse_crashkernel</a>(char <span class=\"ts\"/><span class=\"ts\"/> *<a class=\"id\" href=\"#cmdline\">cmdline</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long long <a class=\"id\" href=\"#system_ram\">system_ram</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long long *<a class=\"id\" href=\"#crash_size\">crash_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long long *<a class=\"id\" href=\"#crash_base\">crash_base</a>)", 
"{", 
"<span class=\"ts\"/>char <span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#cmdline\">cmdline</a>, *<a class=\"id\" href=\"#ck_cmdline\">ck_cmdline</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/>*<a class=\"id\" href=\"#first_colon\">first_colon</a>, *<a class=\"id\" href=\"#first_space\">first_space</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#crash_size\">crash_size</a> || !<a class=\"id\" href=\"#crash_base\">crash_base</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#crash_size\">crash_size</a> = 0;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#crash_base\">crash_base</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* find crashkernel and use the last one if there are more */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#p\">p</a>, \"crashkernel=\");", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ck_cmdline\">ck_cmdline</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#p\">p</a>+1, \"crashkernel=\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ck_cmdline\">ck_cmdline</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ck_cmdline\">ck_cmdline</a> += 12; <span class=\"comment\">/* strlen(\"crashkernel=\") */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the commandline contains a ':', then that's the extended</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * syntax -- if not, it must be the classic syntax</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_colon\">first_colon</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#ck_cmdline\">ck_cmdline</a>, ':');", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_space\">first_space</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#ck_cmdline\">ck_cmdline</a>, ' ');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first_colon\">first_colon</a> && (!<a class=\"id\" href=\"#first_space\">first_space</a> || <a class=\"id\" href=\"#first_colon\">first_colon</a> &lt; <a class=\"id\" href=\"#first_space\">first_space</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#parse_crashkernel_mem\">parse_crashkernel_mem</a>(<a class=\"id\" href=\"#ck_cmdline\">ck_cmdline</a>, <a class=\"id\" href=\"#system_ram\">system_ram</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crash_size\">crash_size</a>, <a class=\"id\" href=\"#crash_base\">crash_base</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#parse_crashkernel_simple\">parse_crashkernel_simple</a>(<a class=\"id\" href=\"#ck_cmdline\">ck_cmdline</a>, <a class=\"id\" href=\"#crash_size\">crash_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crash_base\">crash_base</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"", 
"void <a class=\"id\" href=\"#crash_save_vmcoreinfo\">crash_save_vmcoreinfo</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vmcoreinfo_size\">vmcoreinfo_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmcoreinfo_append_str\">vmcoreinfo_append_str</a>(\"CRASHTIME=%ld\", <a class=\"id\" href=\"#get_seconds\">get_seconds</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = (<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#vmcoreinfo_note\">vmcoreinfo_note</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#append_elf_note\">append_elf_note</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#VMCOREINFO_NOTE_NAME\">VMCOREINFO_NOTE_NAME</a>, 0, <a class=\"id\" href=\"#vmcoreinfo_data\">vmcoreinfo_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#vmcoreinfo_size\">vmcoreinfo_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#final_note\">final_note</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#vmcoreinfo_append_str\">vmcoreinfo_append_str</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[0x50];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, sizeof(<a class=\"id\" href=\"#buf\">buf</a>), <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> + <a class=\"id\" href=\"#vmcoreinfo_size\">vmcoreinfo_size</a> &gt; <a class=\"id\" href=\"#vmcoreinfo_max_size\">vmcoreinfo_max_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#vmcoreinfo_max_size\">vmcoreinfo_max_size</a> - <a class=\"id\" href=\"#vmcoreinfo_size\">vmcoreinfo_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#vmcoreinfo_data\">vmcoreinfo_data</a>[<a class=\"id\" href=\"#vmcoreinfo_size\">vmcoreinfo_size</a>], <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#r\">r</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmcoreinfo_size\">vmcoreinfo_size</a> += <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * provide an empty default implementation here -- architecture</span>", 
"<span class=\"comment\"> * code may override this</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#arch_crash_save_vmcoreinfo\">arch_crash_save_vmcoreinfo</a>(void)", 
"{}", 
"", 
"unsigned long <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#paddr_vmcoreinfo_note\">paddr_vmcoreinfo_note</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pa\">__pa</a>((unsigned long)(char *)&amp;<a class=\"id\" href=\"#vmcoreinfo_note\">vmcoreinfo_note</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#crash_save_vmcoreinfo_init\">crash_save_vmcoreinfo_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OSRELEASE\">VMCOREINFO_OSRELEASE</a>(<a class=\"id\" href=\"#init_uts_ns\">init_uts_ns</a>.<a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#release\">release</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_PAGESIZE\">VMCOREINFO_PAGESIZE</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#init_uts_ns\">init_uts_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#_stext\">_stext</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#vmlist\">vmlist</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NEED_MULTIPLE_NODES\">CONFIG_NEED_MULTIPLE_NODES</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#mem_map\">mem_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#contig_page_data\">contig_page_data</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM\">CONFIG_SPARSEMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#mem_section\">mem_section</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_LENGTH\">VMCOREINFO_LENGTH</a>(<a class=\"id\" href=\"#mem_section\">mem_section</a>, <a class=\"id\" href=\"#NR_SECTION_ROOTS\">NR_SECTION_ROOTS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_STRUCT_SIZE\">VMCOREINFO_STRUCT_SIZE</a>(<a class=\"id\" href=\"#mem_section\">mem_section</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#mem_section\">mem_section</a>, <a class=\"id\" href=\"#section_mem_map\">section_mem_map</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_STRUCT_SIZE\">VMCOREINFO_STRUCT_SIZE</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_STRUCT_SIZE\">VMCOREINFO_STRUCT_SIZE</a>(<a class=\"id\" href=\"#pglist_data\">pglist_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_STRUCT_SIZE\">VMCOREINFO_STRUCT_SIZE</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_STRUCT_SIZE\">VMCOREINFO_STRUCT_SIZE</a>(<a class=\"id\" href=\"#free_area\">free_area</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_STRUCT_SIZE\">VMCOREINFO_STRUCT_SIZE</a>(<a class=\"id\" href=\"#list_head\">list_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SIZE\">VMCOREINFO_SIZE</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#_count\">_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#pglist_data\">pglist_data</a>, <a class=\"id\" href=\"#node_zones\">node_zones</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#pglist_data\">pglist_data</a>, <a class=\"id\" href=\"#nr_zones\">nr_zones</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FLAT_NODE_MEM_MAP\">CONFIG_FLAT_NODE_MEM_MAP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#pglist_data\">pglist_data</a>, <a class=\"id\" href=\"#node_mem_map\">node_mem_map</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#pglist_data\">pglist_data</a>, <a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#pglist_data\">pglist_data</a>, <a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#pglist_data\">pglist_data</a>, <a class=\"id\" href=\"#node_id\">node_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#free_area\">free_area</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#vm_stat\">vm_stat</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#free_area\">free_area</a>, <a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#list_head\">list_head</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#list_head\">list_head</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_OFFSET\">VMCOREINFO_OFFSET</a>(<a class=\"id\" href=\"#vm_struct\">vm_struct</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_LENGTH\">VMCOREINFO_LENGTH</a>(<a class=\"id\" href=\"#zone\">zone</a>.<a class=\"id\" href=\"#free_area\">free_area</a>, <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#log_buf_kexec_setup\">log_buf_kexec_setup</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_LENGTH\">VMCOREINFO_LENGTH</a>(<a class=\"id\" href=\"#free_area\">free_area</a>.<a class=\"id\" href=\"#free_list\">free_list</a>, <a class=\"id\" href=\"#MIGRATE_TYPES\">MIGRATE_TYPES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_NUMBER\">VMCOREINFO_NUMBER</a>(<a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_NUMBER\">VMCOREINFO_NUMBER</a>(<a class=\"id\" href=\"#PG_lru\">PG_lru</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_NUMBER\">VMCOREINFO_NUMBER</a>(<a class=\"id\" href=\"#PG_private\">PG_private</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_NUMBER\">VMCOREINFO_NUMBER</a>(<a class=\"id\" href=\"#PG_swapcache\">PG_swapcache</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_crash_save_vmcoreinfo\">arch_crash_save_vmcoreinfo</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#crash_save_vmcoreinfo_init\">crash_save_vmcoreinfo_init</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move into place and start executing a preloaded standalone</span>", 
"<span class=\"comment\"> * executable.  If nothing was preloaded return an error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kernel_kexec\">kernel_kexec</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mutex_trylock\">mutex_trylock</a>(&amp;<a class=\"id\" href=\"#kexec_mutex\">kexec_mutex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kexec_image\">kexec_image</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Unlock\">Unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEXEC_JUMP\">CONFIG_KEXEC_JUMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kexec_image\">kexec_image</a>-><a class=\"id\" href=\"#preserve_context\">preserve_context</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_prepare_console\">pm_prepare_console</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#freeze_processes\">freeze_processes</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Restore_console\">Restore_console</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#suspend_console\">suspend_console</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dpm_suspend_start\">dpm_suspend_start</a>(<a class=\"id\" href=\"#PMSG_FREEZE\">PMSG_FREEZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Resume_console\">Resume_console</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* At this point, dpm_suspend_start() has been called,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but *not* dpm_suspend_noirq(). We *must* call</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * dpm_suspend_noirq() now.  Otherwise, drivers for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * some devices (e.g. interrupt controllers) become</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * desynchronized with the actual state of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hardware at resume time, and evil weirdness ensues.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dpm_suspend_noirq\">dpm_suspend_noirq</a>(<a class=\"id\" href=\"#PMSG_FREEZE\">PMSG_FREEZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Resume_devices\">Resume_devices</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#disable_nonboot_cpus\">disable_nonboot_cpus</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Enable_cpus\">Enable_cpus</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Suspend system devices */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysdev_suspend\">sysdev_suspend</a>(<a class=\"id\" href=\"#PMSG_FREEZE\">PMSG_FREEZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Enable_irqs\">Enable_irqs</a>;", 
"<span class=\"ts\"/>} else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_restart_prepare\">kernel_restart_prepare</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"Starting new kernel\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#machine_shutdown\">machine_shutdown</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_kexec\">machine_kexec</a>(<a class=\"id\" href=\"#kexec_image\">kexec_image</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEXEC_JUMP\">CONFIG_KEXEC_JUMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kexec_image\">kexec_image</a>-><a class=\"id\" href=\"#preserve_context\">preserve_context</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysdev_resume\">sysdev_resume</a>();", 
" <a class=\"id\" href=\"#Enable_irqs\">Enable_irqs</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
" <a class=\"id\" href=\"#Enable_cpus\">Enable_cpus</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_nonboot_cpus\">enable_nonboot_cpus</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dpm_resume_noirq\">dpm_resume_noirq</a>(<a class=\"id\" href=\"#PMSG_RESTORE\">PMSG_RESTORE</a>);", 
" <a class=\"id\" href=\"#Resume_devices\">Resume_devices</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dpm_resume_end\">dpm_resume_end</a>(<a class=\"id\" href=\"#PMSG_RESTORE\">PMSG_RESTORE</a>);", 
" <a class=\"id\" href=\"#Resume_console\">Resume_console</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resume_console\">resume_console</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thaw_processes\">thaw_processes</a>();", 
" <a class=\"id\" href=\"#Restore_console\">Restore_console</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_restore_console\">pm_restore_console</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
" <a class=\"id\" href=\"#Unlock\">Unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kexec_mutex\">kexec_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
];
xr_frag_insert('l/6f/487b0a1cce4aa06cba0d14af8c64c565282133.xr', __xr_tmp);
