var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  file.c - part of debugfs, a tiny little debug file system</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004 Greg Kroah-Hartman &lt;greg@kroah.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004 IBM Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modify it under the terms of the GNU General Public License version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2 as published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  debugfs is for people to use instead of /proc or /sys.</span>", 
"<span class=\"comment\"> *  See Documentation/DocBook/filesystems for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#default_read_file\">default_read_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#default_write_file\">default_write_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#default_open\">default_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#debugfs_file_operations\">debugfs_file_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_read_file\">default_read_file</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> =<span class=\"ts\"/><a class=\"id\" href=\"#default_write_file\">default_write_file</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_open\">default_open</a>,", 
"};", 
"", 
"static void *<a class=\"id\" href=\"#debugfs_follow_link\">debugfs_follow_link</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nd_set_link\">nd_set_link</a>(<a class=\"id\" href=\"#nd\">nd</a>, <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#debugfs_link_operations\">debugfs_link_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readlink\">readlink</a>       = <a class=\"id\" href=\"#generic_readlink\">generic_readlink</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#follow_link\">follow_link</a>    = <a class=\"id\" href=\"#debugfs_follow_link\">debugfs_follow_link</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#debugfs_u8_set\">debugfs_u8_set</a>(void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static int <a class=\"id\" href=\"#debugfs_u8_get\">debugfs_u8_get</a>(void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = *(<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u8\">fops_u8</a>, <a class=\"id\" href=\"#debugfs_u8_get\">debugfs_u8_get</a>, <a class=\"id\" href=\"#debugfs_u8_set\">debugfs_u8_set</a>, \"%llu\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u8_ro\">fops_u8_ro</a>, <a class=\"id\" href=\"#debugfs_u8_get\">debugfs_u8_get</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"%llu\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u8_wo\">fops_u8_wo</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#debugfs_u8_set\">debugfs_u8_set</a>, \"%llu\\n\");", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_create_u8 - create a debugfs file that is used to read and write an unsigned 8-bit value</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the file to create.</span>", 
"<span class=\"comment\"> * @mode: the permission that the file should have</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this parameter is %NULL, then the</span>", 
"<span class=\"comment\"> *          file will be created in the root of the debugfs filesystem.</span>", 
"<span class=\"comment\"> * @value: a pointer to the variable that the file should read to and write</span>", 
"<span class=\"comment\"> *         from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a file in debugfs with the given name that</span>", 
"<span class=\"comment\"> * contains the value of the variable @value.  If the @mode variable is so</span>", 
"<span class=\"comment\"> * set, it can be read from, and written to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will return a pointer to a dentry if it succeeds.  This</span>", 
"<span class=\"comment\"> * pointer must be passed to the debugfs_remove() function when the file is</span>", 
"<span class=\"comment\"> * to be removed (no automatic cleanup happens if your module is unloaded,</span>", 
"<span class=\"comment\"> * you are responsible here.)  If an error occurs, %NULL will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If debugfs is not enabled in the kernel, the value -%ENODEV will be</span>", 
"<span class=\"comment\"> * returned.  It is not wise to check for this value, but rather, check for</span>", 
"<span class=\"comment\"> * %NULL or !%NULL instead as to eliminate the need for #ifdef in the calling</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_create_u8\">debugfs_create_u8</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* if there are no write bits set, make read only */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IWUGO\">S_IWUGO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u8_ro\">fops_u8_ro</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* if there are no read bits set, make write only */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u8_wo\">fops_u8_wo</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u8\">fops_u8</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_create_u8\">debugfs_create_u8</a>);", 
"", 
"static int <a class=\"id\" href=\"#debugfs_u16_set\">debugfs_u16_set</a>(void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#u16\">u16</a> *)<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static int <a class=\"id\" href=\"#debugfs_u16_get\">debugfs_u16_get</a>(void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = *(<a class=\"id\" href=\"#u16\">u16</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u16\">fops_u16</a>, <a class=\"id\" href=\"#debugfs_u16_get\">debugfs_u16_get</a>, <a class=\"id\" href=\"#debugfs_u16_set\">debugfs_u16_set</a>, \"%llu\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u16_ro\">fops_u16_ro</a>, <a class=\"id\" href=\"#debugfs_u16_get\">debugfs_u16_get</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"%llu\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u16_wo\">fops_u16_wo</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#debugfs_u16_set\">debugfs_u16_set</a>, \"%llu\\n\");", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_create_u16 - create a debugfs file that is used to read and write an unsigned 16-bit value</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the file to create.</span>", 
"<span class=\"comment\"> * @mode: the permission that the file should have</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this parameter is %NULL, then the</span>", 
"<span class=\"comment\"> *          file will be created in the root of the debugfs filesystem.</span>", 
"<span class=\"comment\"> * @value: a pointer to the variable that the file should read to and write</span>", 
"<span class=\"comment\"> *         from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a file in debugfs with the given name that</span>", 
"<span class=\"comment\"> * contains the value of the variable @value.  If the @mode variable is so</span>", 
"<span class=\"comment\"> * set, it can be read from, and written to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will return a pointer to a dentry if it succeeds.  This</span>", 
"<span class=\"comment\"> * pointer must be passed to the debugfs_remove() function when the file is</span>", 
"<span class=\"comment\"> * to be removed (no automatic cleanup happens if your module is unloaded,</span>", 
"<span class=\"comment\"> * you are responsible here.)  If an error occurs, %NULL will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If debugfs is not enabled in the kernel, the value -%ENODEV will be</span>", 
"<span class=\"comment\"> * returned.  It is not wise to check for this value, but rather, check for</span>", 
"<span class=\"comment\"> * %NULL or !%NULL instead as to eliminate the need for #ifdef in the calling</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_create_u16\">debugfs_create_u16</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* if there are no write bits set, make read only */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IWUGO\">S_IWUGO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u16_ro\">fops_u16_ro</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* if there are no read bits set, make write only */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u16_wo\">fops_u16_wo</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u16\">fops_u16</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_create_u16\">debugfs_create_u16</a>);", 
"", 
"static int <a class=\"id\" href=\"#debugfs_u32_set\">debugfs_u32_set</a>(void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static int <a class=\"id\" href=\"#debugfs_u32_get\">debugfs_u32_get</a>(void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = *(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u32\">fops_u32</a>, <a class=\"id\" href=\"#debugfs_u32_get\">debugfs_u32_get</a>, <a class=\"id\" href=\"#debugfs_u32_set\">debugfs_u32_set</a>, \"%llu\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u32_ro\">fops_u32_ro</a>, <a class=\"id\" href=\"#debugfs_u32_get\">debugfs_u32_get</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"%llu\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u32_wo\">fops_u32_wo</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#debugfs_u32_set\">debugfs_u32_set</a>, \"%llu\\n\");", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_create_u32 - create a debugfs file that is used to read and write an unsigned 32-bit value</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the file to create.</span>", 
"<span class=\"comment\"> * @mode: the permission that the file should have</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this parameter is %NULL, then the</span>", 
"<span class=\"comment\"> *          file will be created in the root of the debugfs filesystem.</span>", 
"<span class=\"comment\"> * @value: a pointer to the variable that the file should read to and write</span>", 
"<span class=\"comment\"> *         from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a file in debugfs with the given name that</span>", 
"<span class=\"comment\"> * contains the value of the variable @value.  If the @mode variable is so</span>", 
"<span class=\"comment\"> * set, it can be read from, and written to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will return a pointer to a dentry if it succeeds.  This</span>", 
"<span class=\"comment\"> * pointer must be passed to the debugfs_remove() function when the file is</span>", 
"<span class=\"comment\"> * to be removed (no automatic cleanup happens if your module is unloaded,</span>", 
"<span class=\"comment\"> * you are responsible here.)  If an error occurs, %NULL will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If debugfs is not enabled in the kernel, the value -%ENODEV will be</span>", 
"<span class=\"comment\"> * returned.  It is not wise to check for this value, but rather, check for</span>", 
"<span class=\"comment\"> * %NULL or !%NULL instead as to eliminate the need for #ifdef in the calling</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_create_u32\">debugfs_create_u32</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* if there are no write bits set, make read only */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IWUGO\">S_IWUGO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u32_ro\">fops_u32_ro</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* if there are no read bits set, make write only */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u32_wo\">fops_u32_wo</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u32\">fops_u32</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_create_u32\">debugfs_create_u32</a>);", 
"", 
"static int <a class=\"id\" href=\"#debugfs_u64_set\">debugfs_u64_set</a>(void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#u64\">u64</a> *)<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#debugfs_u64_get\">debugfs_u64_get</a>(void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = *(<a class=\"id\" href=\"#u64\">u64</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u64\">fops_u64</a>, <a class=\"id\" href=\"#debugfs_u64_get\">debugfs_u64_get</a>, <a class=\"id\" href=\"#debugfs_u64_set\">debugfs_u64_set</a>, \"%llu\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u64_ro\">fops_u64_ro</a>, <a class=\"id\" href=\"#debugfs_u64_get\">debugfs_u64_get</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"%llu\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_u64_wo\">fops_u64_wo</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#debugfs_u64_set\">debugfs_u64_set</a>, \"%llu\\n\");", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_create_u64 - create a debugfs file that is used to read and write an unsigned 64-bit value</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the file to create.</span>", 
"<span class=\"comment\"> * @mode: the permission that the file should have</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this parameter is %NULL, then the</span>", 
"<span class=\"comment\"> *          file will be created in the root of the debugfs filesystem.</span>", 
"<span class=\"comment\"> * @value: a pointer to the variable that the file should read to and write</span>", 
"<span class=\"comment\"> *         from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a file in debugfs with the given name that</span>", 
"<span class=\"comment\"> * contains the value of the variable @value.  If the @mode variable is so</span>", 
"<span class=\"comment\"> * set, it can be read from, and written to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will return a pointer to a dentry if it succeeds.  This</span>", 
"<span class=\"comment\"> * pointer must be passed to the debugfs_remove() function when the file is</span>", 
"<span class=\"comment\"> * to be removed (no automatic cleanup happens if your module is unloaded,</span>", 
"<span class=\"comment\"> * you are responsible here.)  If an error occurs, %NULL will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If debugfs is not enabled in the kernel, the value -%ENODEV will be</span>", 
"<span class=\"comment\"> * returned.  It is not wise to check for this value, but rather, check for</span>", 
"<span class=\"comment\"> * %NULL or !%NULL instead as to eliminate the need for #ifdef in the calling</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_create_u64\">debugfs_create_u64</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* if there are no write bits set, make read only */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IWUGO\">S_IWUGO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u64_ro\">fops_u64_ro</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* if there are no read bits set, make write only */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u64_wo\">fops_u64_wo</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_u64\">fops_u64</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_create_u64\">debugfs_create_u64</a>);", 
"", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_x8\">fops_x8</a>, <a class=\"id\" href=\"#debugfs_u8_get\">debugfs_u8_get</a>, <a class=\"id\" href=\"#debugfs_u8_set\">debugfs_u8_set</a>, \"0x%02llx\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_x8_ro\">fops_x8_ro</a>, <a class=\"id\" href=\"#debugfs_u8_get\">debugfs_u8_get</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"0x%02llx\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_x8_wo\">fops_x8_wo</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#debugfs_u8_set\">debugfs_u8_set</a>, \"0x%02llx\\n\");", 
"", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_x16\">fops_x16</a>, <a class=\"id\" href=\"#debugfs_u16_get\">debugfs_u16_get</a>, <a class=\"id\" href=\"#debugfs_u16_set\">debugfs_u16_set</a>, \"0x%04llx\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_x16_ro\">fops_x16_ro</a>, <a class=\"id\" href=\"#debugfs_u16_get\">debugfs_u16_get</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"0x%04llx\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_x16_wo\">fops_x16_wo</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#debugfs_u16_set\">debugfs_u16_set</a>, \"0x%04llx\\n\");", 
"", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_x32\">fops_x32</a>, <a class=\"id\" href=\"#debugfs_u32_get\">debugfs_u32_get</a>, <a class=\"id\" href=\"#debugfs_u32_set\">debugfs_u32_set</a>, \"0x%08llx\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_x32_ro\">fops_x32_ro</a>, <a class=\"id\" href=\"#debugfs_u32_get\">debugfs_u32_get</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"0x%08llx\\n\");", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_x32_wo\">fops_x32_wo</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#debugfs_u32_set\">debugfs_u32_set</a>, \"0x%08llx\\n\");", 
"", 
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_x64\">fops_x64</a>, <a class=\"id\" href=\"#debugfs_u64_get\">debugfs_u64_get</a>, <a class=\"id\" href=\"#debugfs_u64_set\">debugfs_u64_set</a>, \"0x%016llx\\n\");", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * debugfs_create_x{8,16,32,64} - create a debugfs file that is used to read and write an unsigned {8,16,32,64}-bit value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These functions are exactly the same as the above functions (but use a hex</span>", 
"<span class=\"comment\"> * output for the decimal challenged). For details look at the above unsigned</span>", 
"<span class=\"comment\"> * decimal functions.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_create_x8 - create a debugfs file that is used to read and write an unsigned 8-bit value</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the file to create.</span>", 
"<span class=\"comment\"> * @mode: the permission that the file should have</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this parameter is %NULL, then the</span>", 
"<span class=\"comment\"> *          file will be created in the root of the debugfs filesystem.</span>", 
"<span class=\"comment\"> * @value: a pointer to the variable that the file should read to and write</span>", 
];
xr_frag_insert('l/6f/643bfe399676e186cd3ef207dc4d34143fe0b4.xr', __xr_tmp);
