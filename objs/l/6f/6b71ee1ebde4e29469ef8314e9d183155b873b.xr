var __xr_tmp = [
"<span class=\"ts\"/><span class=\"comment\">/* pointer to the cgroup we belong to, for list removal purposes */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* protects the other fields */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> <a class=\"id\" href=\"#mutex\">mutex</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#cgroup\">cgroup</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* \"unsigned long\" so bitops work */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * count users of this cgroup. &gt;0 means busy, but doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * necessarily indicate the number of tasks in the cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We link our 'sibling' struct into our parent's 'children'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Our children link their 'sibling' into our 'children'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#sibling\">sibling</a>;<span class=\"ts\"/><span class=\"comment\">/* my parent's children */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#children\">children</a>;<span class=\"ts\"/><span class=\"comment\">/* my children */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#parent\">parent</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* my parent */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;<span class=\"ts\"/>  <span class=\"ts\"/><span class=\"comment\">/* cgroup fs entry, RCU protected */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Private pointers for each registered subsystem */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>];", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * List of cg_cgroup_links pointing at css_sets with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tasks in this cgroup. Protected by css_set_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#css_sets\">css_sets</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Linked list running through all cgroups that can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * potentially be reaped by the release agent. Protected by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * release_list_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#release_list\">release_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list of pidlists, up to two for each namespace (one for procs, one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for tasks); created on demand.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#pidlists\">pidlists</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#pidlist_mutex\">pidlist_mutex</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For RCU-protected deletion */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* List of events which userspace want to recieve */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#event_list\">event_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#event_list_lock\">event_list_lock</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A css_set is a structure holding pointers to a set of</span>", 
"<span class=\"comment\"> * cgroup_subsys_state objects. This saves space in the task struct</span>", 
"<span class=\"comment\"> * object and speeds up fork()/exit(), since a single inc/dec and a</span>", 
"<span class=\"comment\"> * list_add()/del() can bump the reference count on the entire cgroup</span>", 
"<span class=\"comment\"> * set for a task.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#css_set\">css_set</a> {", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reference count */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#refcount\">refcount</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * List running through all cgroup groups in the same hash</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * slot. Protected by css_set_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#hlist\">hlist</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * List running through all tasks using this cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * group. Protected by css_set_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tasks\">tasks</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * List of cg_cgroup_link objects on link chains from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cgroups referenced from this css_set. Protected by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * css_set_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#cg_links\">cg_links</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set of subsystem states, one for each subsystem. This array</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is immutable after creation apart from the init_css_set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * during subsystem registration (at boot time) and modular subsystem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * loading/unloading.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For RCU-protected deletion */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cgroup_map_cb is an abstract callback API for reporting map-valued</span>", 
"<span class=\"comment\"> * control files</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#cgroup_map_cb\">cgroup_map_cb</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill\">fill</a>)(struct <a class=\"id\" href=\"#cgroup_map_cb\">cgroup_map_cb</a> *<a class=\"id\" href=\"#cb\">cb</a>, const char *<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#state\">state</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * struct cftype: handler definitions for cgroup control files</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When reading/writing to a file:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- the cgroup to use is file-&gt;f_dentry-&gt;d_parent-&gt;d_fsdata</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- the 'cftype' of the file is file-&gt;f_dentry-&gt;d_fsdata</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_CFTYPE_NAME\">MAX_CFTYPE_NAME</a> 64", 
"struct <a class=\"id\" href=\"#cftype\">cftype</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * By convention, the name should begin with the name of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * subsystem, followed by a period</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#MAX_CFTYPE_NAME\">MAX_CFTYPE_NAME</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If not 0, file mode is set to this value, otherwise it will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be figured out automatically</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If non-zero, defines the maximum length of string that can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be passed to write_string; defaults to 64</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#max_write_len\">max_write_len</a>;", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#open\">open</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#read\">read</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * read_u64() is a shortcut for the common case of returning a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * single integer. Use it in place of read()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> (*<a class=\"id\" href=\"#read_u64\">read_u64</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * read_s64() is a signed version of read_u64()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> (*<a class=\"id\" href=\"#read_s64\">read_s64</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * read_map() is used for defining a map of key/value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pairs. It should call cb-&gt;fill(cb, key, value) for each</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * entry. The key/value pairs (and their ordering) should not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * change between reboots.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#read_map\">read_map</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_map_cb\">cgroup_map_cb</a> *<a class=\"id\" href=\"#cb\">cb</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * read_seq_string() is used for outputting a simple sequence</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * using seqfile.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#read_seq_string\">read_seq_string</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#write\">write</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write_u64() is a shortcut for the common case of accepting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a single integer (as parsed by simple_strtoull) from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * userspace. Use in place of write(); return 0 or error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#write_u64\">write_u64</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write_s64() is a signed version of write_u64()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#write_s64\">write_s64</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write_string() is passed a nul-terminated kernelspace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffer of maximum length determined by max_write_len.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Returns 0 or -ve error code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#write_string\">write_string</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trigger() callback can be used to get some kick from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * userspace, when the actual string written is not important</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at all. The private field can be used to determine the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kick type for multiplexing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#trigger\">trigger</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, unsigned int <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#release\">release</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * register_event() callback will be used to add new userspace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * waiter for changes related to the cftype. Implement it if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * you want to provide this functionality. Use eventfd_signal()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on eventfd to send notification to userspace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#register_event\">register_event</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd\">eventfd</a>, const char *<a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unregister_event() callback will be called when userspace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * closes the eventfd or on cgroup removing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This callback must be implemented, if you want provide</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * notification functionality.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#unregister_event\">unregister_event</a>)(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd\">eventfd</a>);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#cgroup_scanner\">cgroup_scanner</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cg\">cg</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#test_task\">test_task</a>)(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#cgroup_scanner\">cgroup_scanner</a> *<a class=\"id\" href=\"#scan\">scan</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#process_task\">process_task</a>)(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_scanner\">cgroup_scanner</a> *<a class=\"id\" href=\"#scan\">scan</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ptr_heap\">ptr_heap</a> *<a class=\"id\" href=\"#heap\">heap</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a new file to the given cgroup directory. Should only be</span>", 
"<span class=\"comment\"> * called by subsystems from within a populate() method</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cgroup_add_file\">cgroup_add_file</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#subsys\">subsys</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a set of new files to the given cgroup directory. Should</span>", 
"<span class=\"comment\"> * only be called by subsystems from within a populate() method</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cgroup_add_files\">cgroup_add_files</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#subsys\">subsys</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cftype\">cftype</a> <a class=\"id\" href=\"#cft\">cft</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"int <a class=\"id\" href=\"#cgroup_is_removed\">cgroup_is_removed</a>(const struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"int <a class=\"id\" href=\"#cgroup_path\">cgroup_path</a>(const struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"", 
"int <a class=\"id\" href=\"#cgroup_task_count\">cgroup_task_count</a>(const struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"<span class=\"comment\">/* Return true if cgrp is a descendant of the task's cgroup */</span>", 
"int <a class=\"id\" href=\"#cgroup_is_descendant\">cgroup_is_descendant</a>(const struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When the subsys has to access css and may add permanent refcnt to css,</span>", 
"<span class=\"comment\"> * it should take care of racy conditions with rmdir(). Following set of</span>", 
"<span class=\"comment\"> * functions, is for stop/restart rmdir if necessary.</span>", 
"<span class=\"comment\"> * Because these will call css_get/put, \"css\" should be alive css.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  cgroup_exclude_rmdir();</span>", 
"<span class=\"comment\"> *  ...do some jobs which may access arbitrary empty cgroup</span>", 
"<span class=\"comment\"> *  cgroup_release_and_wakeup_rmdir();</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  When someone removes a cgroup while cgroup_exclude_rmdir() holds it,</span>", 
"<span class=\"comment\"> *  it sleeps and cgroup_release_and_wakeup_rmdir() will wake him up.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#cgroup_exclude_rmdir\">cgroup_exclude_rmdir</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>);", 
"void <a class=\"id\" href=\"#cgroup_release_and_wakeup_rmdir\">cgroup_release_and_wakeup_rmdir</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Control Group subsystem type.</span>", 
"<span class=\"comment\"> * See Documentation/cgroups/cgroups.txt for details</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *(*<a class=\"id\" href=\"#create\">create</a>)(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#pre_destroy\">pre_destroy</a>)(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#destroy\">destroy</a>)(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#can_attach\">can_attach</a>)(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#threadgroup\">threadgroup</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#cancel_attach\">cancel_attach</a>)(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#threadgroup\">threadgroup</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#attach\">attach</a>)(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#old_cgrp\">old_cgrp</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#threadgroup\">threadgroup</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#fork\">fork</a>)(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#exit\">exit</a>)(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#populate\">populate</a>)(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#post_clone\">post_clone</a>)(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#bind\">bind</a>)(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#root\">root</a>);", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#subsys_id\">subsys_id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#disabled\">disabled</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#early_init\">early_init</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * True if this subsys uses ID. ID is not available before cgroup_init()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (not available in early_init time.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#use_id\">use_id</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_CGROUP_TYPE_NAMELEN\">MAX_CGROUP_TYPE_NAMELEN</a> 32", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protects sibling/children links of cgroups in this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hierarchy, plus protects which hierarchy (or none) the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * subsystem is a part of (i.e. root/sibling).  To avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * potential deadlocks, the following operations should not be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * undertaken while holding any hierarchy_mutex:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - allocating memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - initiating hotplug events</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#hierarchy_mutex\">hierarchy_mutex</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#subsys_key\">subsys_key</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Link to parent, and list entry in parent's children.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protected by this-&gt;hierarchy_mutex and cgroup_lock()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* used when use_id == true */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr\">idr</a> <a class=\"id\" href=\"#idr\">idr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#id_lock\">id_lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* should be defined only by modular subsystems */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SUBSYS\">SUBSYS</a>(<a class=\"id\" href=\"#_x\">_x</a>) extern struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> <a class=\"id\" href=\"#_x\">_x</a> ## <a class=\"id\" href=\"#_subsys\">_subsys</a>;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#SUBSYS\">SUBSYS</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, int <a class=\"id\" href=\"#subsys_id\">subsys_id</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#subsys_id\">subsys_id</a>];", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * function to get the cgroup_subsys_state which allows for extra</span>", 
"<span class=\"comment\"> * rcu_dereference_check() conditions, such as locks used during the</span>", 
"<span class=\"comment\"> * cgroup_subsys::attach() methods.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_subsys_state_check\">task_subsys_state_check</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#subsys_id\">subsys_id</a>, <a class=\"id\" href=\"#__c\">__c</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#subsys_id\">subsys_id</a>],<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() ||<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#alloc_lock\">alloc_lock</a>) ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#cgroup_lock_is_held\">cgroup_lock_is_held</a>() || (<a class=\"id\" href=\"#__c\">__c</a>))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *", 
"<a class=\"id\" href=\"#task_subsys_state\">task_subsys_state</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, int <a class=\"id\" href=\"#subsys_id\">subsys_id</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_subsys_state_check\">task_subsys_state_check</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#subsys_id\">subsys_id</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cgroup\">cgroup</a>* <a class=\"id\" href=\"#task_cgroup\">task_cgroup</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#subsys_id\">subsys_id</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_subsys_state\">task_subsys_state</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#subsys_id\">subsys_id</a>)-><a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#cgroup_clone\">cgroup_clone</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#nodename\">nodename</a>);", 
"", 
"<span class=\"comment\">/* A cgroup_iter should be treated as an opaque object */</span>", 
"struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#cg_link\">cg_link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * To iterate across the tasks in a cgroup:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1) call cgroup_iter_start to intialize an iterator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2) call cgroup_iter_next() to retrieve member tasks until it</span>", 
"<span class=\"comment\"> *    returns NULL or until you want to end the iteration</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 3) call cgroup_iter_end() to destroy the iterator.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Or, call cgroup_scan_tasks() to iterate through every task in a</span>", 
"<span class=\"comment\"> * cgroup - cgroup_scan_tasks() holds the css_set_lock when calling</span>", 
"<span class=\"comment\"> * the test_task() callback, but not while calling the process_task()</span>", 
"<span class=\"comment\"> * callback.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cgroup_iter_start\">cgroup_iter_start</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> *<a class=\"id\" href=\"#it\">it</a>);", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#cgroup_iter_next\">cgroup_iter_next</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> *<a class=\"id\" href=\"#it\">it</a>);", 
"void <a class=\"id\" href=\"#cgroup_iter_end\">cgroup_iter_end</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cgroup_iter\">cgroup_iter</a> *<a class=\"id\" href=\"#it\">it</a>);", 
"int <a class=\"id\" href=\"#cgroup_scan_tasks\">cgroup_scan_tasks</a>(struct <a class=\"id\" href=\"#cgroup_scanner\">cgroup_scanner</a> *<a class=\"id\" href=\"#scan\">scan</a>);", 
"int <a class=\"id\" href=\"#cgroup_attach_task\">cgroup_attach_task</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"int <a class=\"id\" href=\"#cgroup_attach_task_all\">cgroup_attach_task_all</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#from\">from</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cgroup_attach_task_current_cg\">cgroup_attach_task_current_cg</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cgroup_attach_task_all\">cgroup_attach_task_all</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CSS ID is ID for cgroup_subsys_state structs under subsys. This only works</span>", 
"<span class=\"comment\"> * if cgroup_subsys.use_id == true. It can be used for looking up and scanning.</span>", 
"<span class=\"comment\"> * CSS ID is assigned at cgroup allocation (create) automatically</span>", 
"<span class=\"comment\"> * and removed when subsys calls free_css_id() function. This is because</span>", 
"<span class=\"comment\"> * the lifetime of cgroup_subsys_state is subsys's matter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Looking up and scanning function should be called under rcu_read_lock().</span>", 
"<span class=\"comment\"> * Taking cgroup_mutex()/hierarchy_mutex() is not necessary for following calls.</span>", 
"<span class=\"comment\"> * But the css returned by this routine can be \"not populated yet\" or \"being</span>", 
"<span class=\"comment\"> * destroyed\". The caller should check css and cgroup's status.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Typically Called at -&gt;destroy(), or somewhere the subsys frees</span>", 
"<span class=\"comment\"> * cgroup_subsys_state.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_css_id\">free_css_id</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>);", 
"", 
"<span class=\"comment\">/* Find a cgroup_subsys_state which has given ID */</span>", 
"", 
"struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css_lookup\">css_lookup</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, int <a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get a cgroup whose id is greater than or equal to id under tree of root.</span>", 
"<span class=\"comment\"> * Returning a cgroup_subsys_state or NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css_get_next\">css_get_next</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, int <a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#root\">root</a>, int *<a class=\"id\" href=\"#foundid\">foundid</a>);", 
"", 
"<span class=\"comment\">/* Returns true if root is ancestor of cg */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#css_is_ancestor\">css_is_ancestor</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#cg\">cg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#root\">root</a>);", 
"", 
"<span class=\"comment\">/* Get id and depth of css */</span>", 
"unsigned short <a class=\"id\" href=\"#css_id\">css_id</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>);", 
"unsigned short <a class=\"id\" href=\"#css_depth\">css_depth</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>);", 
"", 
"#else <span class=\"comment\">/* !CONFIG_CGROUPS */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cgroup_init_early\">cgroup_init_early</a>(void) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cgroup_init\">cgroup_init</a>(void) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cgroup_fork\">cgroup_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cgroup_fork_callbacks\">cgroup_fork_callbacks</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cgroup_post_fork\">cgroup_post_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cgroup_exit\">cgroup_exit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#callbacks\">callbacks</a>) {}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cgroup_lock\">cgroup_lock</a>(void) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>(void) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cgroupstats_build\">cgroupstats_build</a>(struct <a class=\"id\" href=\"#cgroupstats\">cgroupstats</a> *<a class=\"id\" href=\"#stats\">stats</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* No cgroups - nothing to do */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cgroup_attach_task_all\">cgroup_attach_task_all</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cgroup_attach_task_current_cg\">cgroup_attach_task_current_cg</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_CGROUPS */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_CGROUP_H */</span>", 
];
xr_frag_insert('l/6f/6b71ee1ebde4e29469ef8314e9d183155b873b.xr', __xr_tmp);
