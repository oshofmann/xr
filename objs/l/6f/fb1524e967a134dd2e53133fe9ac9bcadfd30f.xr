var __xr_tmp = [
"<span class=\"comment\">/* Definitions for key type implementations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 Red Hat, Inc. All Rights Reserved.</span>", 
"<span class=\"comment\"> * Written by David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public Licence</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> * 2 of the Licence, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_KEY_TYPE_H\">_LINUX_KEY_TYPE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_KEY_TYPE_H\">_LINUX_KEY_TYPE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * key under-construction record</span>", 
"<span class=\"comment\"> * - passed to the request_key actor if supplied</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#key_construction\">key_construction</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a><span class=\"ts\"/>*<a class=\"id\" href=\"#key\">key</a>;<span class=\"ts\"/><span class=\"comment\">/* key being constructed */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a><span class=\"ts\"/>*<a class=\"id\" href=\"#authkey\">authkey</a>;<span class=\"comment\">/* authorisation for key being constructed */</span>", 
"};", 
"", 
"typedef int (*<a class=\"id\" href=\"#request_key_actor_t\">request_key_actor_t</a>)(struct <a class=\"id\" href=\"#key_construction\">key_construction</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#op\">op</a>, void *<a class=\"id\" href=\"#aux\">aux</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kernel managed key type definition</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#key_type\">key_type</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* name of the type */</span>", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* default payload length for quota precalculation (optional)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - this can be used instead of calling key_payload_reserve(), that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   function only needs to be called if the real datalen is different</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#def_datalen\">def_datalen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* instantiate a key of this type</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - this method should call key_payload_reserve() to determine if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   user's quota will hold the payload</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#instantiate\">instantiate</a>)(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, const void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* update a key of this type (optional)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - this method should call key_payload_reserve() to recalculate the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   quota consumption</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - the key must be locked against read when modifying</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#update\">update</a>)(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, const void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* match a key against a description */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#match\">match</a>)(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, const void *<a class=\"id\" href=\"#desc\">desc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* clear some of the data from a key on revokation (optional)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - the key's semaphore will be write-locked by the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#revoke\">revoke</a>)(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* clear the data from a key (optional) */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#destroy\">destroy</a>)(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* describe a key */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#describe\">describe</a>)(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* read a key's data (optional)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - permission checks will be done by the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - the key's semaphore will be readlocked by the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - should return the amount of data that could be read, no matter how</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   much is copied into the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - shouldn't do the copy if the buffer is NULL</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>long (*<a class=\"id\" href=\"#read\">read</a>)(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* handle request_key() for this type instead of invoking</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * /sbin/request-key (optional)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - key is the key to instantiate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - authkey is the authority to assume when instantiating this key</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - op is the operation to be done, usually \"create\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - the call must not return until the instantiation process has run</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   its course</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#request_key_actor_t\">request_key_actor_t</a> <a class=\"id\" href=\"#request_key\">request_key</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* internal fields */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* link in types list */</span>", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#key_type\">key_type</a> <a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>;", 
"", 
"extern int <a class=\"id\" href=\"#register_key_type\">register_key_type</a>(struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#ktype\">ktype</a>);", 
"extern void <a class=\"id\" href=\"#unregister_key_type\">unregister_key_type</a>(struct <a class=\"id\" href=\"#key_type\">key_type</a> *<a class=\"id\" href=\"#ktype\">ktype</a>);", 
"", 
"extern int <a class=\"id\" href=\"#key_payload_reserve\">key_payload_reserve</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>);", 
"extern int <a class=\"id\" href=\"#key_instantiate_and_link\">key_instantiate_and_link</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#instkey\">instkey</a>);", 
"extern int <a class=\"id\" href=\"#key_negate_and_link\">key_negate_and_link</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned <a class=\"id\" href=\"#timeout\">timeout</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#instkey\">instkey</a>);", 
"extern void <a class=\"id\" href=\"#complete_request_key\">complete_request_key</a>(struct <a class=\"id\" href=\"#key_construction\">key_construction</a> *<a class=\"id\" href=\"#cons\">cons</a>, int <a class=\"id\" href=\"#error\">error</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_KEYS */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_KEY_TYPE_H */</span>", 
];
xr_frag_insert('l/6f/fb1524e967a134dd2e53133fe9ac9bcadfd30f.xr', __xr_tmp);
