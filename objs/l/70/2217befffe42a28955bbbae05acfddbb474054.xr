var __xr_tmp = [
"<span class=\"comment\"> * rb_check_list - make sure a pointer to a list has the last bits zero</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rb_check_list\">rb_check_list</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#rb_list_head\">rb_list_head</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a>) != <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#rb_list_head\">rb_list_head</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>) != <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * check_pages - integrity check of buffer pages</span>", 
"<span class=\"comment\"> * @cpu_buffer: CPU buffer with pages to test</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As a safety measure we check to make sure the data pages have not</span>", 
"<span class=\"comment\"> * been corrupted.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rb_check_pages\">rb_check_pages</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_head_page_deactivate\">rb_head_page_deactivate</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> != <a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_check_list\">rb_check_list</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#bpage\">bpage</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> != &amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> != &amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_check_list\">rb_check_list</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_head_page_activate\">rb_head_page_activate</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rb_allocate_pages\">rb_allocate_pages</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#ALIGN\">ALIGN</a>(sizeof(*<a class=\"id\" href=\"#bpage\">bpage</a>), <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>()),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_pages\">free_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_check_bpage\">rb_check_bpage</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#bpage\">bpage</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_pages\">free_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a> = (void *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_init_page\">rb_init_page</a>(<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The ring buffer page list is a circular list that does not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start and end with a list head. All page list items point to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * other pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#pages\">pages</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_check_pages\">rb_check_pages</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#free_pages\">free_pages</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#bpage\">bpage</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_buffer_page\">free_buffer_page</a>(<a class=\"id\" href=\"#bpage\">bpage</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *", 
"<a class=\"id\" href=\"#rb_allocate_cpu_buffer\">rb_allocate_cpu_buffer</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#ALIGN\">ALIGN</a>(sizeof(*<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>), <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>()),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#reader_lock_key\">reader_lock_key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lock\">lock</a> = (<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a>)<a class=\"id\" href=\"#__ARCH_SPIN_LOCK_UNLOCKED\">__ARCH_SPIN_LOCK_UNLOCKED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#ALIGN\">ALIGN</a>(sizeof(*<a class=\"id\" href=\"#bpage\">bpage</a>), <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>()),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_free_buffer\">fail_free_buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_check_bpage\">rb_check_bpage</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#bpage\">bpage</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a> = <a class=\"id\" href=\"#bpage\">bpage</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_free_reader\">fail_free_reader</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a> = (void *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_init_page\">rb_init_page</a>(<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rb_allocate_pages\">rb_allocate_pages</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_free_reader\">fail_free_reader</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>, struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_head_page_activate\">rb_head_page_activate</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
" <a class=\"id\" href=\"#fail_free_reader\">fail_free_reader</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_buffer_page\">free_buffer_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>);", 
"", 
" <a class=\"id\" href=\"#fail_free_buffer\">fail_free_buffer</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rb_free_cpu_buffer\">rb_free_cpu_buffer</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_buffer_page\">free_buffer_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_head_page_deactivate\">rb_head_page_deactivate</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#bpage\">bpage</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_buffer_page\">free_buffer_page</a>(<a class=\"id\" href=\"#bpage\">bpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_buffer_page\">free_buffer_page</a>(<a class=\"id\" href=\"#bpage\">bpage</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"static int <a class=\"id\" href=\"#rb_cpu_notify\">rb_cpu_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_alloc - allocate a new ring_buffer</span>", 
"<span class=\"comment\"> * @size: the size in bytes per cpu that is needed.</span>", 
"<span class=\"comment\"> * @flags: attributes to set for the ring buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Currently the only flag that is available is the RB_FL_OVERWRITE</span>", 
"<span class=\"comment\"> * flag. This flag means that the buffer will overwrite old data</span>", 
"<span class=\"comment\"> * when the buffer wraps. If this flag is not set, the buffer will</span>", 
"<span class=\"comment\"> * drop data when the tail hits the head.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#__ring_buffer_alloc\">__ring_buffer_alloc</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bsize\">bsize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* keep it in its own cache line */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#ALIGN\">ALIGN</a>(sizeof(*<a class=\"id\" href=\"#buffer\">buffer</a>), <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>()),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_free_buffer\">fail_free_buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#clock\">clock</a> = <a class=\"id\" href=\"#trace_clock_local\">trace_clock_local</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#reader_lock_key\">reader_lock_key</a> = <a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need at least two pages */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a> = 2;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In case of non-hotplug cpu, if the ring-buffer is allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in early initcall, it will not be notified of secondary cpus.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In that off case, we need to allocate for all possible cpus.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpus\">cpus</a> = <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bsize\">bsize</a> = sizeof(void *) * <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#bsize\">bsize</a>, <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>()),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_free_cpumask\">fail_free_cpumask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_buffer_cpu\">for_each_buffer_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_allocate_cpu_buffer\">rb_allocate_cpu_buffer</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_free_buffers\">fail_free_buffers</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpu_notify\">cpu_notify</a>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#rb_cpu_notify\">rb_cpu_notify</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpu_notify\">cpu_notify</a>.<a class=\"id\" href=\"#priority\">priority</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpu_notify\">cpu_notify</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
" <a class=\"id\" href=\"#fail_free_buffers\">fail_free_buffers</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_buffer_cpu\">for_each_buffer_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_free_cpu_buffer\">rb_free_cpu_buffer</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>);", 
"", 
" <a class=\"id\" href=\"#fail_free_cpumask\">fail_free_cpumask</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"", 
" <a class=\"id\" href=\"#fail_free_buffer\">fail_free_buffer</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__ring_buffer_alloc\">__ring_buffer_alloc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_free - free a ring buffer.</span>", 
"<span class=\"comment\"> * @buffer: the buffer to free.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#ring_buffer_free\">ring_buffer_free</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_cpu_notifier\">unregister_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpu_notify\">cpu_notify</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_buffer_cpu\">for_each_buffer_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_free_cpu_buffer\">rb_free_cpu_buffer</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_free\">ring_buffer_free</a>);", 
"", 
"void <a class=\"id\" href=\"#ring_buffer_set_clock\">ring_buffer_set_clock</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u64\">u64</a> (*<a class=\"id\" href=\"#clock\">clock</a>)(void))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#clock\">clock</a> = <a class=\"id\" href=\"#clock\">clock</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rb_reset_cpu\">rb_reset_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#rb_remove_pages\">rb_remove_pages</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, unsigned <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_head_page_deactivate\">rb_head_page_deactivate</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_buffer_page\">free_buffer_page</a>(<a class=\"id\" href=\"#bpage\">bpage</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_reset_cpu\">rb_reset_cpu</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_check_pages\">rb_check_pages</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#rb_insert_pages\">rb_insert_pages</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pages\">pages</a>, unsigned <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_head_page_deactivate\">rb_head_page_deactivate</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#pages\">pages</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pages\">pages</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_reset_cpu\">rb_reset_cpu</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_check_pages\">rb_check_pages</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_resize - resize the ring buffer</span>", 
"<span class=\"comment\"> * @buffer: the buffer to resize.</span>", 
"<span class=\"comment\"> * @size: the new size.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Minimum size is 2 * BUF_PAGE_SIZE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -1 on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ring_buffer_resize\">ring_buffer_resize</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#rm_pages\">rm_pages</a>, <a class=\"id\" href=\"#new_pages\">new_pages</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#buffer_size\">buffer_size</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Always succeed at resizing a non-existent buffer:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> *= <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer_size\">buffer_size</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a> * <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we need a minimum of two pages */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a> * 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a> * 2;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> == <a class=\"id\" href=\"#buffer_size\">buffer_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure all writers are done with this buffer. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#buffer_size\">buffer_size</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* easy case, just free pages */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a> >= <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rm_pages\">rm_pages</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a> - <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_buffer_cpu\">for_each_buffer_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_remove_pages\">rb_remove_pages</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#rm_pages\">rm_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is a bit more difficult. We only want to add pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when we can allocate enough for all CPUs. We do this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by allocating all the pages and storing them on a local</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * link list. If we succeed in our allocation, then we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * add these pages to the cpu_buffers. Otherwise we just free</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * them all and return -ENOMEM;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a> <= <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_pages\">new_pages</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a> - <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_buffer_cpu\">for_each_buffer_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#new_pages\">new_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#ALIGN\">ALIGN</a>(sizeof(*<a class=\"id\" href=\"#bpage\">bpage</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>()),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_pages\">free_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_pages\">free_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a> = (void *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_init_page\">rb_init_page</a>(<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_buffer_cpu\">for_each_buffer_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_pages\">rb_insert_pages</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#new_pages\">new_pages</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pages\">pages</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"", 
" <a class=\"id\" href=\"#free_pages\">free_pages</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#bpage\">bpage</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_buffer_page\">free_buffer_page</a>(<a class=\"id\" href=\"#bpage\">bpage</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Something went totally wrong, and we are too paranoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to even clean up the mess.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
" <a class=\"id\" href=\"#out_fail\">out_fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"<span class=\"ts\"/>return -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_resize\">ring_buffer_resize</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *", 
"<a class=\"id\" href=\"#__rb_data_page_index\">__rb_data_page_index</a>(struct <a class=\"id\" href=\"#buffer_data_page\">buffer_data_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>, unsigned <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#__rb_page_index\">__rb_page_index</a>(struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>, unsigned <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#rb_reader_event\">rb_reader_event</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__rb_page_index\">__rb_page_index</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#read\">read</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#rb_iter_head_event\">rb_iter_head_event</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__rb_page_index\">__rb_page_index</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#rb_page_write\">rb_page_write</a>(struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#write\">write</a>) &amp; <a class=\"id\" href=\"#RB_WRITE_MASK\">RB_WRITE_MASK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#rb_page_commit\">rb_page_commit</a>(struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#commit\">commit</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#rb_page_entries\">rb_page_entries</a>(struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#entries\">entries</a>) &amp; <a class=\"id\" href=\"#RB_WRITE_MASK\">RB_WRITE_MASK</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Size is determined by what has been commited */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#rb_page_size\">rb_page_size</a>(struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rb_page_commit\">rb_page_commit</a>(<a class=\"id\" href=\"#bpage\">bpage</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned", 
"<a class=\"id\" href=\"#rb_commit_index\">rb_commit_index</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rb_page_commit\">rb_page_commit</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned", 
"<a class=\"id\" href=\"#rb_event_index\">rb_event_index</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) - <a class=\"id\" href=\"#BUF_PAGE_HDR_SIZE\">BUF_PAGE_HDR_SIZE</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#rb_event_is_commit\">rb_event_is_commit</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#rb_event_index\">rb_event_index</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>-><a class=\"id\" href=\"#page\">page</a> == (void *)<a class=\"id\" href=\"#addr\">addr</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_commit_index\">rb_commit_index</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>) == <a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#rb_set_commit_to_write\">rb_set_commit_to_write</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_count\">max_count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We only race with interrupts and NMIs on this CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we own the commit event, then we can commit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all others that interrupted us, since the interruptions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are in stack format (they finish before they come</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * back to us). This allows us to do a simple loop to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * assign the commit to the tail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_count\">max_count</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a> * 100;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a> != <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, !(--<a class=\"id\" href=\"#max_count\">max_count</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#rb_is_reader_page\">rb_is_reader_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#commit\">commit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#rb_page_write\">rb_page_write</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_inc_page\">rb_inc_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#write_stamp\">write_stamp</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#time_stamp\">time_stamp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* add barrier to keep gcc from optimizing too much */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#rb_commit_index\">rb_commit_index</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>) !=", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#rb_page_write\">rb_page_write</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#commit\">commit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#rb_page_write\">rb_page_write</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#commit\">commit</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   ~<a class=\"id\" href=\"#RB_WRITE_MASK\">RB_WRITE_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* again, keep gcc from optimizing */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If an interrupt came in just after the first while loop</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and pushed the tail page forward, we will be left with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a dangling commit that will never go forward.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a> != <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rb_reset_reader_page\">rb_reset_reader_page</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#time_stamp\">time_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#read\">read</a> = 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rb_inc_iter\">rb_inc_iter</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The iterator could be on the reader page (it starts there).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But the head could have moved, since the reader was</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * found. Check for this case and assign the iterator</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the head page instead of next.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a> == <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a> = <a class=\"id\" href=\"#rb_set_head_page\">rb_set_head_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_inc_page\">rb_inc_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#time_stamp\">time_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head\">head</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_update_event - update event type and data</span>", 
"<span class=\"comment\"> * @event: the even to update</span>", 
"<span class=\"comment\"> * @type: the type of event</span>", 
"<span class=\"comment\"> * @length: the size of the event field in the ring buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Update the type and data fields of the event. The length</span>", 
"<span class=\"comment\"> * is the actual size that is written to the ring buffer,</span>", 
"<span class=\"comment\"> * and with this, we can determine what to place into the</span>", 
"<span class=\"comment\"> * data field.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#rb_update_event\">rb_update_event</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned <a class=\"id\" href=\"#type\">type</a>, unsigned <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_EXTEND\">RINGBUF_TYPE_TIME_EXTEND</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_STAMP\">RINGBUF_TYPE_TIME_STAMP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> -= <a class=\"id\" href=\"#RB_EVNT_HDR_SIZE\">RB_EVNT_HDR_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#RB_MAX_SMALL_DATA\">RB_MAX_SMALL_DATA</a> || <a class=\"id\" href=\"#RB_FORCE_8BYTE_ALIGNMENT\">RB_FORCE_8BYTE_ALIGNMENT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0] = <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#RB_ALIGNMENT\">RB_ALIGNMENT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rb_handle_head_page - writer hit the head page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: +1 to retry page</span>", 
"<span class=\"comment\"> *           0 to continue</span>", 
"<span class=\"comment\"> *          -1 on error</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#rb_handle_head_page\">rb_handle_head_page</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#tail_page\">tail_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#next_page\">next_page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#new_head\">new_head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a> = <a class=\"id\" href=\"#rb_page_entries\">rb_page_entries</a>(<a class=\"id\" href=\"#next_page\">next_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The hard part is here. We need to move the head</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * forward, and protect against both readers on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * other CPUs and writers coming in via interrupts.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#rb_head_page_set_update\">rb_head_page_set_update</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#next_page\">next_page</a>, <a class=\"id\" href=\"#tail_page\">tail_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#RB_PAGE_HEAD\">RB_PAGE_HEAD</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * type can be one of four:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  NORMAL - an interrupt already moved it for us</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  HEAD   - we are the first to get here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  UPDATE - we are the interrupt interrupting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *           a current move.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  MOVED  - a reader on another CPU moved the next</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *           pointer to its reader page. Give up</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *           and try again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RB_PAGE_HEAD\">RB_PAGE_HEAD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We changed the head to UPDATE, thus</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it is our responsibility to update</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the counters.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_add\">local_add</a>(<a class=\"id\" href=\"#entries\">entries</a>, &amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#overrun\">overrun</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The entries will be zeroed out when we move the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tail page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* still more to do */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RB_PAGE_UPDATE\">RB_PAGE_UPDATE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is an interrupt that interrupt the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * previous update. Still more to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RB_PAGE_NORMAL\">RB_PAGE_NORMAL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * An interrupt came in before the update</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and processed this for us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Nothing left to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RB_PAGE_MOVED\">RB_PAGE_MOVED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The reader is on another CPU and just did</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a swap with our next_page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Try again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, 1); <span class=\"comment\">/* WTF??? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now that we are here, the old head pointer is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set to UPDATE. This will keep the reader from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * swapping the head page with the reader page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The reader (on another CPU) will spin till</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we are finished.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We just need to protect against interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doing the job. We will set the next pointer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to HEAD. After that, we set the old pointer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to NORMAL, but only if it was HEAD before.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * otherwise we are an interrupt, and only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * want the outer most commit to reset it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_head\">new_head</a> = <a class=\"id\" href=\"#next_page\">next_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_inc_page\">rb_inc_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#new_head\">new_head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rb_head_page_set_head\">rb_head_page_set_head</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#new_head\">new_head</a>, <a class=\"id\" href=\"#next_page\">next_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#RB_PAGE_NORMAL\">RB_PAGE_NORMAL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Valid returns are:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  HEAD   - an interrupt came in and already set it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  NORMAL - One of two things:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *            1) We really set it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *            2) A bunch of interrupts came in and moved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *               the page forward again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RB_PAGE_HEAD\">RB_PAGE_HEAD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RB_PAGE_NORMAL\">RB_PAGE_NORMAL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* OK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is possible that an interrupt came in,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set the head up, then more interrupts came in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and moved it again. When we get back here,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the page would have been set to NORMAL but we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just set it back to HEAD.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * How do you detect this? Well, if that happened</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the tail page would have moved.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#RB_PAGE_NORMAL\">RB_PAGE_NORMAL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the tail had moved passed next, then we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to reset the pointer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a> != <a class=\"id\" href=\"#tail_page\">tail_page</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a> != <a class=\"id\" href=\"#next_page\">next_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_head_page_set_normal\">rb_head_page_set_normal</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#new_head\">new_head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_page\">next_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RB_PAGE_HEAD\">RB_PAGE_HEAD</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this was the outer most commit (the one that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * changed the original pointer from HEAD to UPDATE),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then it is up to us to reset it to NORMAL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#RB_PAGE_HEAD\">RB_PAGE_HEAD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rb_head_page_set_normal\">rb_head_page_set_normal</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#next_page\">next_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#tail_page\">tail_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#RB_PAGE_UPDATE\">RB_PAGE_UPDATE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#RB_PAGE_UPDATE\">RB_PAGE_UPDATE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static unsigned <a class=\"id\" href=\"#rb_calculate_event_length\">rb_calculate_event_length</a>(unsigned <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> <a class=\"id\" href=\"#event\">event</a>; <span class=\"comment\">/* Used only for sizeof array */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* zero length can cause confusions */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#length\">length</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#RB_MAX_SMALL_DATA\">RB_MAX_SMALL_DATA</a> || <a class=\"id\" href=\"#RB_FORCE_8BYTE_ALIGNMENT\">RB_FORCE_8BYTE_ALIGNMENT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> += sizeof(<a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#array\">array</a>[0]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> += <a class=\"id\" href=\"#RB_EVNT_HDR_SIZE\">RB_EVNT_HDR_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#RB_ARCH_ALIGNMENT\">RB_ARCH_ALIGNMENT</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#length\">length</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#rb_reset_tail\">rb_reset_tail</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#tail_page\">tail_page</a>,", 
"<span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#tail\">tail</a>, unsigned long <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only the event that crossed the page boundary</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must fill the old tail_page with padding.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tail\">tail</a> >= <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the page was filled, then we still need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to update the real_end. Reset it to zero</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and the reader will ignore it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tail\">tail</a> == <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail_page\">tail_page</a>-><a class=\"id\" href=\"#real_end\">real_end</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_sub\">local_sub</a>(<a class=\"id\" href=\"#length\">length</a>, &amp;<a class=\"id\" href=\"#tail_page\">tail_page</a>-><a class=\"id\" href=\"#write\">write</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#__rb_page_index\">__rb_page_index</a>(<a class=\"id\" href=\"#tail_page\">tail_page</a>, <a class=\"id\" href=\"#tail\">tail</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_annotate_bitfield\">kmemcheck_annotate_bitfield</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#bitfield\">bitfield</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Save the original length to the meta data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This will be used by the reader to add lost event</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * counter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail_page\">tail_page</a>-><a class=\"id\" href=\"#real_end\">real_end</a> = <a class=\"id\" href=\"#tail\">tail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this event is bigger than the minimum size, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to be careful that we don't subtract the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write counter enough to allow another writer to slip</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in on this page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We put in a discarded commit instead, to make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that this space is not used again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are less than the minimum size, we don't need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * worry about it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tail\">tail</a> &gt; (<a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a> - <a class=\"id\" href=\"#RB_EVNT_MIN_SIZE\">RB_EVNT_MIN_SIZE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No room for any events */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mark the rest of the page with padding */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_event_set_padding\">rb_event_set_padding</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set the write back to the previous setting */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_sub\">local_sub</a>(<a class=\"id\" href=\"#length\">length</a>, &amp;<a class=\"id\" href=\"#tail_page\">tail_page</a>-><a class=\"id\" href=\"#write\">write</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put in a discarded event */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0] = (<a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a> - <a class=\"id\" href=\"#tail\">tail</a>) - <a class=\"id\" href=\"#RB_EVNT_HDR_SIZE\">RB_EVNT_HDR_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> = <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* time delta must be non zero */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set write to end of buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = (<a class=\"id\" href=\"#tail\">tail</a> + <a class=\"id\" href=\"#length\">length</a>) - <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_sub\">local_sub</a>(<a class=\"id\" href=\"#length\">length</a>, &amp;<a class=\"id\" href=\"#tail_page\">tail_page</a>-><a class=\"id\" href=\"#write\">write</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#rb_move_tail\">rb_move_tail</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#length\">length</a>, unsigned long <a class=\"id\" href=\"#tail\">tail</a>,", 
"<span class=\"ts\"/>     struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#tail_page\">tail_page</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#commit_page\">commit_page</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#next_page\">next_page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_page\">next_page</a> = <a class=\"id\" href=\"#tail_page\">tail_page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_inc_page\">rb_inc_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#next_page\">next_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If for some reason, we had an interrupt storm that made</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it all the way around the buffer, bail, and warn</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * about it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#next_page\">next_page</a> == <a class=\"id\" href=\"#commit_page\">commit_page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_overrun\">commit_overrun</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_reset\">out_reset</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is where the fun begins!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are fighting against races between a reader that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could be on another CPU trying to swap its reader</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page with the buffer head.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are also fighting against interrupts coming in and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * moving the head or tail on us as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the next page is the head page then we have filled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the buffer, unless the commit page is still on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reader page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_is_head_page\">rb_is_head_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#next_page\">next_page</a>, &amp;<a class=\"id\" href=\"#tail_page\">tail_page</a>-><a class=\"id\" href=\"#list\">list</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the commit is not on the reader page, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * move the header page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rb_is_reader_page\">rb_is_reader_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we are not in overwrite mode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this is easy, just stop here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#RB_FL_OVERWRITE\">RB_FL_OVERWRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_reset\">out_reset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rb_handle_head_page\">rb_handle_head_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#tail_page\">tail_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#next_page\">next_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_reset\">out_reset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_again\">out_again</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We need to be careful here too. The</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * commit page could still be on the reader</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page. We could have a small buffer, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * have filled up the buffer with events</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * from interrupts and such, and wrapped.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Note, if the tail page is also the on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * reader_page, we let it move out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a> !=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_overrun\">commit_overrun</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_reset\">out_reset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rb_tail_page_update\">rb_tail_page_update</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#tail_page\">tail_page</a>, <a class=\"id\" href=\"#next_page\">next_page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Nested commits always have zero deltas, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * just reread the time stamp</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ts\">ts</a> = <a class=\"id\" href=\"#rb_time_stamp\">rb_time_stamp</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_page\">next_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#time_stamp\">time_stamp</a> = *<a class=\"id\" href=\"#ts\">ts</a>;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out_again\">out_again</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_reset_tail\">rb_reset_tail</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#tail_page\">tail_page</a>, <a class=\"id\" href=\"#tail\">tail</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fail and let the caller try again */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>);", 
"", 
" <a class=\"id\" href=\"#out_reset\">out_reset</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* reset write */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_reset_tail\">rb_reset_tail</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#tail_page\">tail_page</a>, <a class=\"id\" href=\"#tail\">tail</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#__rb_reserve_next\">__rb_reserve_next</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned <a class=\"id\" href=\"#type\">type</a>, unsigned long <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#tail_page\">tail_page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tail\">tail</a>, <a class=\"id\" href=\"#write\">write</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail_page\">tail_page</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#local_add_return\">local_add_return</a>(<a class=\"id\" href=\"#length\">length</a>, &amp;<a class=\"id\" href=\"#tail_page\">tail_page</a>-><a class=\"id\" href=\"#write\">write</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set write to only the index of the write */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write\">write</a> &= <a class=\"id\" href=\"#RB_WRITE_MASK\">RB_WRITE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#write\">write</a> - <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* See if we shot pass the end of this buffer page */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a> &gt; <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rb_move_tail\">rb_move_tail</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#tail\">tail</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tail_page\">tail_page</a>, <a class=\"id\" href=\"#ts\">ts</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We reserved something on the buffer */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#__rb_page_index\">__rb_page_index</a>(<a class=\"id\" href=\"#tail_page\">tail_page</a>, <a class=\"id\" href=\"#tail\">tail</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_annotate_bitfield\">kmemcheck_annotate_bitfield</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#bitfield\">bitfield</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_update_event\">rb_update_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The passed in type is zero for DATA */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#type\">type</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(&amp;<a class=\"id\" href=\"#tail_page\">tail_page</a>-><a class=\"id\" href=\"#entries\">entries</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is the first commit on the page, then update</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its timestamp.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tail\">tail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail_page\">tail_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#time_stamp\">time_stamp</a> = *<a class=\"id\" href=\"#ts\">ts</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#rb_try_to_discard\">rb_try_to_discard</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_index\">new_index</a>, <a class=\"id\" href=\"#old_index\">old_index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_index\">new_index</a> = <a class=\"id\" href=\"#rb_event_index\">rb_event_index</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_index\">old_index</a> = <a class=\"id\" href=\"#new_index\">new_index</a> + <a class=\"id\" href=\"#rb_event_length\">rb_event_length</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a> == (void *)<a class=\"id\" href=\"#addr\">addr</a> && <a class=\"id\" href=\"#rb_page_write\">rb_page_write</a>(<a class=\"id\" href=\"#bpage\">bpage</a>) == <a class=\"id\" href=\"#old_index\">old_index</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#write_mask\">write_mask</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#write\">write</a>) &amp; ~<a class=\"id\" href=\"#RB_WRITE_MASK\">RB_WRITE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is on the tail page. It is possible that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a write could come in and move the tail page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and write to the next page. That is fine</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * because we just shorten what is on this page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_index\">old_index</a> += <a class=\"id\" href=\"#write_mask\">write_mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_index\">new_index</a> += <a class=\"id\" href=\"#write_mask\">write_mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#local_cmpxchg\">local_cmpxchg</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#old_index\">old_index</a>, <a class=\"id\" href=\"#new_index\">new_index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#old_index\">old_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* could not discard */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#rb_add_time_stamp\">rb_add_time_stamp</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(*<a class=\"id\" href=\"#delta\">delta</a> &gt; (1ULL << 59),", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Delta way too big! %llu ts=%llu write stamp = %llu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>  (unsigned long long)*<a class=\"id\" href=\"#delta\">delta</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  (unsigned long long)*<a class=\"id\" href=\"#ts\">ts</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  (unsigned long long)<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#write_stamp\">write_stamp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The delta is too big, we to add a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new timestamp.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#__rb_reserve_next\">__rb_reserve_next</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_EXTEND\">RINGBUF_TYPE_TIME_EXTEND</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#RB_LEN_TIME_EXTEND\">RB_LEN_TIME_EXTEND</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#event\">event</a>) == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only a commited time event can update the write stamp */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_event_is_commit\">rb_event_is_commit</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this is the first on the page, then it was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * updated with the page itself. Try to discard it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and if we can't just make it zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_event_index\">rb_event_index</a>(<a class=\"id\" href=\"#event\">event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a> = *<a class=\"id\" href=\"#delta\">delta</a> &amp; <a class=\"id\" href=\"#TS_MASK\">TS_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0] = *<a class=\"id\" href=\"#delta\">delta</a> >> <a class=\"id\" href=\"#TS_SHIFT\">TS_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* try to discard, since we do not need this */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rb_try_to_discard\">rb_try_to_discard</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nope, just zero it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#write_stamp\">write_stamp</a> = *<a class=\"id\" href=\"#ts\">ts</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* let the caller know this was the commit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to discard the event */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rb_try_to_discard\">rb_try_to_discard</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Darn, this is just wasted space */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rb_start_commit\">rb_start_commit</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#committing\">committing</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commits\">commits</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rb_end_commit\">rb_end_commit</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#commits\">commits</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       !<a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#committing\">committing</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#commits\">commits</a> = <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commits\">commits</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* synchronize with interrupts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#committing\">committing</a>) == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_set_commit_to_write\">rb_set_commit_to_write</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_dec\">local_dec</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#committing\">committing</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* synchronize with interrupts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need to account for interrupts coming in between the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * updating of the commit page and the clearing of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * committing counter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commits\">commits</a>) != <a class=\"id\" href=\"#commits\">commits</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#committing\">committing</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#committing\">committing</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#rb_reserve_next_event\">rb_reserve_next_event</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#commit\">commit</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_loops\">nr_loops</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_start_commit\">rb_start_commit</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RING_BUFFER_ALLOW_SWAP\">CONFIG_RING_BUFFER_ALLOW_SWAP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Due to the ability to swap a cpu buffer from a buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it is possible it was swapped before we committed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (committing stops a swap). We check for it here and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if it happened, we have to fail the write.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#buffer\">buffer</a>) != <a class=\"id\" href=\"#buffer\">buffer</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_dec\">local_dec</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#committing\">committing</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_dec\">local_dec</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commits\">commits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#rb_calculate_event_length\">rb_calculate_event_length</a>(<a class=\"id\" href=\"#length\">length</a>);", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We allow for interrupts to reenter here and do a trace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If one does, it will cause this original code to loop</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * back here. Even with heavy interrupts happening, this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should only happen a few times in a row. If this happens</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1000 times in a row, there must be either an interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * storm or we have something buggy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Bail!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, ++<a class=\"id\" href=\"#nr_loops\">nr_loops</a> &gt; 1000))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a> = <a class=\"id\" href=\"#rb_time_stamp\">rb_time_stamp</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only the first commit can update the timestamp.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Yes there is a race here. If an interrupt comes in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just after the conditional and it traces too, then it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will also check the deltas. More than one timestamp may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * also be made. But only the entry that did the actual</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * commit will be something other than zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a> == <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#rb_page_write\">rb_page_write</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#rb_commit_index\">rb_commit_index</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#diff\">diff</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#diff\">diff</a> = <a class=\"id\" href=\"#ts\">ts</a> - <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#write_stamp\">write_stamp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make sure this diff is calculated here */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Did the write stamp get updated already? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ts\">ts</a> &lt; <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#write_stamp\">write_stamp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#get_event\">get_event</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#diff\">diff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_time_stamp\">test_time_stamp</a>(<a class=\"id\" href=\"#delta\">delta</a>))) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit\">commit</a> = <a class=\"id\" href=\"#rb_add_time_stamp\">rb_add_time_stamp</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#ts\">ts</a>, &amp;<a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#commit\">commit</a> == -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
];
xr_frag_insert('l/70/2217befffe42a28955bbbae05acfddbb474054.xr', __xr_tmp);
