var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#stable_node\">stable_node</a>;", 
"struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>;", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#ksm_does_need_to_copy\">ksm_does_need_to_copy</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KSM\">CONFIG_KSM</a>", 
"int <a class=\"id\" href=\"#ksm_madvise\">ksm_madvise</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#advice\">advice</a>, unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"int <a class=\"id\" href=\"#__ksm_enter\">__ksm_enter</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"void <a class=\"id\" href=\"#__ksm_exit\">__ksm_exit</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ksm_fork\">ksm_fork</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#oldmm\">oldmm</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#MMF_VM_MERGEABLE\">MMF_VM_MERGEABLE</a>, &amp;<a class=\"id\" href=\"#oldmm\">oldmm</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__ksm_enter\">__ksm_enter</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ksm_exit\">ksm_exit</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#MMF_VM_MERGEABLE\">MMF_VM_MERGEABLE</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ksm_exit\">__ksm_exit</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A KSM page is one of those write-protected \"shared pages\" or \"merged pages\"</span>", 
"<span class=\"comment\"> * which KSM maps into multiple mms, wherever identical anonymous page content</span>", 
"<span class=\"comment\"> * is found in VM_MERGEABLE vmas.  It's a PageAnon page, pointing not to any</span>", 
"<span class=\"comment\"> * anon_vma, but to that page's node of the stable tree.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#PageKsm\">PageKsm</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return ((unsigned long)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> &amp; <a class=\"id\" href=\"#PAGE_MAPPING_FLAGS\">PAGE_MAPPING_FLAGS</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_MAPPING_ANON\">PAGE_MAPPING_ANON</a> | <a class=\"id\" href=\"#PAGE_MAPPING_KSM\">PAGE_MAPPING_KSM</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#page_stable_node\">page_stable_node</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PageKsm\">PageKsm</a>(<a class=\"id\" href=\"#page\">page</a>) ? <a class=\"id\" href=\"#page_rmapping\">page_rmapping</a>(<a class=\"id\" href=\"#page\">page</a>) : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_page_stable_node\">set_page_stable_node</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#stable_node\">stable_node</a> *<a class=\"id\" href=\"#stable_node\">stable_node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = (void *)<a class=\"id\" href=\"#stable_node\">stable_node</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_MAPPING_ANON\">PAGE_MAPPING_ANON</a> | <a class=\"id\" href=\"#PAGE_MAPPING_KSM\">PAGE_MAPPING_KSM</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When do_swap_page() first faults in from swap what used to be a KSM page,</span>", 
"<span class=\"comment\"> * no problem, it will be assigned to this vma's anon_vma; but thereafter,</span>", 
"<span class=\"comment\"> * it might be faulted into a different anon_vma (or perhaps to a different</span>", 
"<span class=\"comment\"> * offset in the same anon_vma).  do_swap_page() cannot do all the locking</span>", 
"<span class=\"comment\"> * needed to reconstitute a cross-anon_vma KSM page: for now it has to make</span>", 
"<span class=\"comment\"> * a copy, and leave remerging the pages to a later pass of ksmd.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We'd like to make this conditional on vma-&gt;vm_flags &amp; VM_MERGEABLE,</span>", 
"<span class=\"comment\"> * but what if the vma was unmerged while the page was swapped out?</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ksm_might_need_to_copy\">ksm_might_need_to_copy</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#page_anon_vma\">page_anon_vma</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#anon_vma\">anon_vma</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a> != <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>-><a class=\"id\" href=\"#root\">root</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> != <a class=\"id\" href=\"#linear_page_index\">linear_page_index</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>));", 
"}", 
"", 
"int <a class=\"id\" href=\"#page_referenced_ksm\">page_referenced_ksm</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>, unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>);", 
"int <a class=\"id\" href=\"#try_to_unmap_ksm\">try_to_unmap_ksm</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#ttu_flags\">ttu_flags</a> <a class=\"id\" href=\"#flags\">flags</a>);", 
"int <a class=\"id\" href=\"#rmap_walk_ksm\">rmap_walk_ksm</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int (*<a class=\"id\" href=\"#rmap_one\">rmap_one</a>)(struct <a class=\"id\" href=\"#page\">page</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, unsigned long, void *), void *<a class=\"id\" href=\"#arg\">arg</a>);", 
"void <a class=\"id\" href=\"#ksm_migrate_page\">ksm_migrate_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#oldpage\">oldpage</a>);", 
"", 
"#else  <span class=\"comment\">/* !CONFIG_KSM */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ksm_fork\">ksm_fork</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#oldmm\">oldmm</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ksm_exit\">ksm_exit</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#PageKsm\">PageKsm</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ksm_madvise\">ksm_madvise</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#advice\">advice</a>, unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ksm_might_need_to_copy\">ksm_might_need_to_copy</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_referenced_ksm\">page_referenced_ksm</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#memcg\">memcg</a>, unsigned long *<a class=\"id\" href=\"#vm_flags\">vm_flags</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#try_to_unmap_ksm\">try_to_unmap_ksm</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, enum <a class=\"id\" href=\"#ttu_flags\">ttu_flags</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rmap_walk_ksm\">rmap_walk_ksm</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int (*<a class=\"id\" href=\"#rmap_one\">rmap_one</a>)(struct <a class=\"id\" href=\"#page\">page</a>*,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *, unsigned long, void *), void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ksm_migrate_page\">ksm_migrate_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#oldpage\">oldpage</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MMU */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_KSM */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_KSM_H */</span>", 
];
xr_frag_insert('l/70/48491331ce54b174fd15194a733ffff95d4c42.xr', __xr_tmp);
