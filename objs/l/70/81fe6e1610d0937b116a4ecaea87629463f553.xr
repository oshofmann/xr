var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_PROC_FS_H\">_LINUX_PROC_FS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_PROC_FS_H\">_LINUX_PROC_FS_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#net\">net</a>;", 
"struct <a class=\"id\" href=\"#completion\">completion</a>;", 
"struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The proc filesystem constants/structures</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Offset of the first process in the /proc root directory..</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIRST_PROCESS_ENTRY\">FIRST_PROCESS_ENTRY</a> 256", 
"", 
"<span class=\"comment\">/* Worst case buffer size needed for holding an integer. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PROC_NUMBUF\">PROC_NUMBUF</a> 13", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We always define these enumerators</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PROC_ROOT_INO\">PROC_ROOT_INO</a> = 1,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is not completely implemented yet. The idea is to</span>", 
"<span class=\"comment\"> * create an in-memory tree (like the actual /proc filesystem</span>", 
"<span class=\"comment\"> * tree) of these proc_dir_entries, so that we can dynamically</span>", 
"<span class=\"comment\"> * add new files to /proc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The \"next\" pointer creates a linked list of one /proc directory,</span>", 
"<span class=\"comment\"> * while parent/subdir create the directory structure (every</span>", 
"<span class=\"comment\"> * /proc file has a parent, but \"subdir\" is NULL for all</span>", 
"<span class=\"comment\"> * non-directory entries).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"typedef<span class=\"ts\"/>int (<a class=\"id\" href=\"#read_proc_t\">read_proc_t</a>)(char *<a class=\"id\" href=\"#page\">page</a>, char **<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#off_t\">off_t</a> <a class=\"id\" href=\"#off\">off</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#count\">count</a>, int *<a class=\"id\" href=\"#eof\">eof</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"typedef<span class=\"ts\"/>int (<a class=\"id\" href=\"#write_proc_t\">write_proc_t</a>)(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#count\">count</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#low_ino\">low_ino</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#namelen\">namelen</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nlink_t\">nlink_t</a> <a class=\"id\" href=\"#nlink\">nlink</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a> <a class=\"id\" href=\"#gid\">gid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> *<a class=\"id\" href=\"#proc_iops\">proc_iops</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NULL -&gt;proc_fops means \"PDE is going away RSN\" or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"PDE is just created\". In either case, e.g. -&gt;read_proc won't be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * called because it's too late or too early, respectively.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If you're allocating -&gt;proc_fops dynamically, save a pointer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * somewhere.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#proc_fops\">proc_fops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#next\">next</a>, *<a class=\"id\" href=\"#parent\">parent</a>, *<a class=\"id\" href=\"#subdir\">subdir</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_proc_t\">read_proc_t</a> *<a class=\"id\" href=\"#read_proc\">read_proc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_proc_t\">write_proc_t</a> *<a class=\"id\" href=\"#write_proc\">write_proc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#count\">count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* use count */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pde_users\">pde_users</a>;<span class=\"ts\"/><span class=\"comment\">/* number of callers into module in progress */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>; <span class=\"comment\">/* proc_fops checks and pde_users bumps */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#pde_unload_completion\">pde_unload_completion</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#pde_openers\">pde_openers</a>;<span class=\"ts\"/><span class=\"comment\">/* who did -&gt;open, but not -&gt;release */</span>", 
"};", 
"", 
"enum <a class=\"id\" href=\"#kcore_type\">kcore_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KCORE_TEXT\">KCORE_TEXT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KCORE_VMALLOC\">KCORE_VMALLOC</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KCORE_RAM\">KCORE_RAM</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KCORE_VMEMMAP\">KCORE_VMEMMAP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KCORE_OTHER\">KCORE_OTHER</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#vmcore\">vmcore</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"", 
"extern void <a class=\"id\" href=\"#proc_root_init\">proc_root_init</a>(void);", 
"", 
"void <a class=\"id\" href=\"#proc_flush_task\">proc_flush_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#create_proc_entry\">create_proc_entry</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_create_data\">proc_create_data</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#proc_fops\">proc_fops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern void <a class=\"id\" href=\"#remove_proc_entry\">remove_proc_entry</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>;", 
"", 
"extern int <a class=\"id\" href=\"#pid_ns_prepare_proc\">pid_ns_prepare_proc</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"extern void <a class=\"id\" href=\"#pid_ns_release_proc\">pid_ns_release_proc</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * proc_tty.c</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tty_driver\">tty_driver</a>;", 
"extern void <a class=\"id\" href=\"#proc_tty_init\">proc_tty_init</a>(void);", 
"extern void <a class=\"id\" href=\"#proc_tty_register_driver\">proc_tty_register_driver</a>(struct <a class=\"id\" href=\"#tty_driver\">tty_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>);", 
"extern void <a class=\"id\" href=\"#proc_tty_unregister_driver\">proc_tty_unregister_driver</a>(struct <a class=\"id\" href=\"#tty_driver\">tty_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * proc_devtree.c</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_DEVICETREE\">CONFIG_PROC_DEVICETREE</a>", 
"struct <a class=\"id\" href=\"#device_node\">device_node</a>;", 
"struct <a class=\"id\" href=\"#property\">property</a>;", 
"extern void <a class=\"id\" href=\"#proc_device_tree_init\">proc_device_tree_init</a>(void);", 
"extern void <a class=\"id\" href=\"#proc_device_tree_add_node\">proc_device_tree_add_node</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *, struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *);", 
"extern void <a class=\"id\" href=\"#proc_device_tree_add_prop\">proc_device_tree_add_prop</a>(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#pde\">pde</a>, struct <a class=\"id\" href=\"#property\">property</a> *<a class=\"id\" href=\"#prop\">prop</a>);", 
"extern void <a class=\"id\" href=\"#proc_device_tree_remove_prop\">proc_device_tree_remove_prop</a>(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#pde\">pde</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#property\">property</a> *<a class=\"id\" href=\"#prop\">prop</a>);", 
"extern void <a class=\"id\" href=\"#proc_device_tree_update_prop\">proc_device_tree_update_prop</a>(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#pde\">pde</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#property\">property</a> *<a class=\"id\" href=\"#newprop\">newprop</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#property\">property</a> *<a class=\"id\" href=\"#oldprop\">oldprop</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_DEVICETREE */</span>", 
"", 
"extern struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_symlink\">proc_symlink</a>(const char *,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *, const char *);", 
"extern struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_mkdir\">proc_mkdir</a>(const char *,struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *);", 
"extern struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_mkdir_mode\">proc_mkdir_mode</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_create\">proc_create</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>, const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#proc_fops\">proc_fops</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#proc_create_data\">proc_create_data</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#proc_fops\">proc_fops</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#create_proc_read_entry\">create_proc_read_entry</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>, struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#base\">base</a>, ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_proc_t\">read_proc_t</a> *<a class=\"id\" href=\"#read_proc\">read_proc</a>, void * <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#res\">res</a>=<a class=\"id\" href=\"#create_proc_entry\">create_proc_entry</a>(<a class=\"id\" href=\"#name\">name</a>,<a class=\"id\" href=\"#mode\">mode</a>,<a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#read_proc\">read_proc</a>=<a class=\"id\" href=\"#read_proc\">read_proc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#data\">data</a>=<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
" ", 
"extern struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_net_fops_create\">proc_net_fops_create</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>, const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>);", 
"extern void <a class=\"id\" href=\"#proc_net_remove\">proc_net_remove</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>);", 
"extern struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_net_mkdir\">proc_net_mkdir</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"comment\">/* While the {get|set|dup}_mm_exe_file functions are for mm_structs, they are</span>", 
"<span class=\"comment\"> * only needed to implement /proc/&lt;pid&gt;|self/exe so we define them here. */</span>", 
"extern void <a class=\"id\" href=\"#set_mm_exe_file\">set_mm_exe_file</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#new_exe_file\">new_exe_file</a>);", 
"extern struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#get_mm_exe_file\">get_mm_exe_file</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
];
xr_frag_insert('l/70/81fe6e1610d0937b116a4ecaea87629463f553.xr', __xr_tmp);
