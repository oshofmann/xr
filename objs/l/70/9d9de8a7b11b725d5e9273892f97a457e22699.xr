var __xr_tmp = [
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#posix_cpu_timer_get\">posix_cpu_timer_get</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> *<a class=\"id\" href=\"#itp\">itp</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#clear_dead\">clear_dead</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Easy part: convert the reload time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sample_to_timespec\">sample_to_timespec</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#incr\">incr</a>, &amp;<a class=\"id\" href=\"#itp\">itp</a>-><a class=\"id\" href=\"#it_interval\">it_interval</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a> == 0) {<span class=\"ts\"/><span class=\"comment\">/* Timer not armed at all.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#itp\">itp</a>-><a class=\"id\" href=\"#it_value\">it_value</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#itp\">itp</a>-><a class=\"id\" href=\"#it_value\">it_value</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This task already died and the timer will never fire.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In this case, expires is actually the dead value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dead\">dead</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sample_to_timespec\">sample_to_timespec</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#itp\">itp</a>-><a class=\"id\" href=\"#it_value\">it_value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sample the clock to take the difference with the expiry time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_PERTHREAD\">CPUCLOCK_PERTHREAD</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_clock_sample\">cpu_clock_sample</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_dead\">clear_dead</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The process has been reaped.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We can't even collect a sample any more.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Call the timer disarmed, nothing else to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dead\">dead</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_timer_sample_group\">cpu_timer_sample_group</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_dead\">clear_dead</a> = (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#p\">p</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#clear_dead\">clear_dead</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We've noticed that the thread is dead, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not yet reaped.  Take this opportunity to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * drop our task ref.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_dead_task\">clear_dead_task</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dead\">dead</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_time_before\">cpu_time_before</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sample_to_timespec\">sample_to_timespec</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#cpu_time_sub\">cpu_time_sub</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#now\">now</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#itp\">itp</a>-><a class=\"id\" href=\"#it_value\">it_value</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The timer should have expired already, but the firing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hasn't taken place yet.  Say it's just about to expire.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#itp\">itp</a>-><a class=\"id\" href=\"#it_value\">it_value</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#itp\">itp</a>-><a class=\"id\" href=\"#it_value\">it_value</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check for any per-thread CPU timers that have fired and move them off</span>", 
"<span class=\"comment\"> * the tsk-&gt;cpu_timers[N] list onto the firing list.  Here we update the</span>", 
"<span class=\"comment\"> * tsk-&gt;it_*_expires values to reflect the remaining thread CPU timers.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#check_thread_timers\">check_thread_timers</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#firing\">firing</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maxfire\">maxfire</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#timers\">timers</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *const <a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#soft\">soft</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxfire\">maxfire</a> = 20;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#prof_exp\">prof_exp</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#timers\">timers</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#timers\">timers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!--<a class=\"id\" href=\"#maxfire\">maxfire</a> || <a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#prof_ticks\">prof_ticks</a>(<a class=\"id\" href=\"#tsk\">tsk</a>), <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#prof_exp\">prof_exp</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#firing\">firing</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#firing\">firing</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#timers\">timers</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxfire\">maxfire</a> = 20;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#virt_exp\">virt_exp</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#timers\">timers</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#timers\">timers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!--<a class=\"id\" href=\"#maxfire\">maxfire</a> || <a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#virt_ticks\">virt_ticks</a>(<a class=\"id\" href=\"#tsk\">tsk</a>), <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#virt_exp\">virt_exp</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#firing\">firing</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#firing\">firing</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#timers\">timers</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxfire\">maxfire</a> = 20;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#sched_exp\">sched_exp</a> = 0;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#timers\">timers</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#timers\">timers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!--<a class=\"id\" href=\"#maxfire\">maxfire</a> || <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> &lt; <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#sched_exp\">sched_exp</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#firing\">firing</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#firing\">firing</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for the special case thread timers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#soft\">soft</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_RTTIME\">RLIMIT_RTTIME</a>].<a class=\"id\" href=\"#rlim_cur\">rlim_cur</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#soft\">soft</a> != <a class=\"id\" href=\"#RLIM_INFINITY\">RLIM_INFINITY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hard\">hard</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_RTTIME\">RLIMIT_RTTIME</a>].<a class=\"id\" href=\"#rlim_max\">rlim_max</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hard\">hard</a> != <a class=\"id\" href=\"#RLIM_INFINITY\">RLIM_INFINITY</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#timeout\">timeout</a> &gt; <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#hard\">hard</a>, <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a>/<a class=\"id\" href=\"#HZ\">HZ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * At the hard limit, we just die.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * No need to calculate anything else now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__group_send_sig_info\">__group_send_sig_info</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#timeout\">timeout</a> &gt; <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#soft\">soft</a>, <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a>/<a class=\"id\" href=\"#HZ\">HZ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * At the soft limit, send a SIGXCPU every second.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#soft\">soft</a> &lt; <a class=\"id\" href=\"#hard\">hard</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#soft\">soft</a> += <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_RTTIME\">RLIMIT_RTTIME</a>].<a class=\"id\" href=\"#rlim_cur\">rlim_cur</a> = <a class=\"id\" href=\"#soft\">soft</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"RT Watchdog Timeout: %s[%d]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__group_send_sig_info\">__group_send_sig_info</a>(<a class=\"id\" href=\"#SIGXCPU\">SIGXCPU</a>, <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#stop_process_timers\">stop_process_timers</a>(struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_group_cputimer\">thread_group_cputimer</a> *<a class=\"id\" href=\"#cputimer\">cputimer</a> = &amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputimer\">cputimer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cputimer\">cputimer</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputimer\">cputimer</a>-><a class=\"id\" href=\"#running\">running</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cputimer\">cputimer</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#onecputick\">onecputick</a>;", 
"", 
"static void <a class=\"id\" href=\"#check_cpu_itimer\">check_cpu_itimer</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#cpu_itimer\">cpu_itimer</a> *<a class=\"id\" href=\"#it\">it</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cur_time\">cur_time</a>, int <a class=\"id\" href=\"#signo\">signo</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(<a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_ge\">cputime_ge</a>(<a class=\"id\" href=\"#cur_time\">cur_time</a>, <a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#expires\">expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(<a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#incr\">incr</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#incr\">incr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#error\">error</a> += <a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#incr_error\">incr_error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#error\">error</a> >= <a class=\"id\" href=\"#onecputick\">onecputick</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#cputime_sub\">cputime_sub</a>(<a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#expires\">expires</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#cputime_one_jiffy\">cputime_one_jiffy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#error\">error</a> -= <a class=\"id\" href=\"#onecputick\">onecputick</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_itimer_expire\">trace_itimer_expire</a>(<a class=\"id\" href=\"#signo\">signo</a> == <a class=\"id\" href=\"#SIGPROF\">SIGPROF</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ITIMER_PROF\">ITIMER_PROF</a> : <a class=\"id\" href=\"#ITIMER_VIRTUAL\">ITIMER_VIRTUAL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#leader_pid\">leader_pid</a>, <a class=\"id\" href=\"#cur_time\">cur_time</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__group_send_sig_info\">__group_send_sig_info</a>(<a class=\"id\" href=\"#signo\">signo</a>, <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(<a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(*<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>) ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#expires\">expires</a>, *<a class=\"id\" href=\"#expires\">expires</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * task_cputime_zero - Check a task_cputime struct for all zero fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @cputime:<span class=\"ts\"/>The struct to compare.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Checks @cputime to see if all fields are zero.  Returns true if all fields</span>", 
"<span class=\"comment\"> * are zero, false if any field is nonzero.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#task_cputime_zero\">task_cputime_zero</a>(const struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> *<a class=\"id\" href=\"#cputime\">cputime</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(<a class=\"id\" href=\"#cputime\">cputime</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(<a class=\"id\" href=\"#cputime\">cputime</a>-><a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cputime\">cputime</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check for any per-thread CPU timers that have fired and move them</span>", 
"<span class=\"comment\"> * off the tsk-&gt;*_timers list onto the firing list.  Per-thread timers</span>", 
"<span class=\"comment\"> * have already been taken off.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#check_process_timers\">check_process_timers</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#firing\">firing</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maxfire\">maxfire</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *const <a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#ptime\">ptime</a>, <a class=\"id\" href=\"#virt_expires\">virt_expires</a>, <a class=\"id\" href=\"#prof_expires\">prof_expires</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#sum_sched_runtime\">sum_sched_runtime</a>, <a class=\"id\" href=\"#sched_expires\">sched_expires</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#timers\">timers</a> = <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#cputime\">cputime</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#soft\">soft</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Collect the current process totals.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread_group_cputimer\">thread_group_cputimer</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#utime\">utime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptime\">ptime</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#stime\">stime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sum_sched_runtime\">sum_sched_runtime</a> = <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxfire\">maxfire</a> = 20;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prof_expires\">prof_expires</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#timers\">timers</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a> *<a class=\"id\" href=\"#tl\">tl</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#timers\">timers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!--<a class=\"id\" href=\"#maxfire\">maxfire</a> || <a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#ptime\">ptime</a>, <a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prof_expires\">prof_expires</a> = <a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#firing\">firing</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#firing\">firing</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#timers\">timers</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxfire\">maxfire</a> = 20;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#virt_expires\">virt_expires</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#timers\">timers</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a> *<a class=\"id\" href=\"#tl\">tl</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#timers\">timers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!--<a class=\"id\" href=\"#maxfire\">maxfire</a> || <a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#virt_expires\">virt_expires</a> = <a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#firing\">firing</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#firing\">firing</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#timers\">timers</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxfire\">maxfire</a> = 20;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_expires\">sched_expires</a> = 0;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#timers\">timers</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a> *<a class=\"id\" href=\"#tl\">tl</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#timers\">timers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!--<a class=\"id\" href=\"#maxfire\">maxfire</a> || <a class=\"id\" href=\"#sum_sched_runtime\">sum_sched_runtime</a> &lt; <a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_expires\">sched_expires</a> = <a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#firing\">firing</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#tl\">tl</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#firing\">firing</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for the special case process timers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_cpu_itimer\">check_cpu_itimer</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#it\">it</a>[<a class=\"id\" href=\"#CPUCLOCK_PROF\">CPUCLOCK_PROF</a>], &amp;<a class=\"id\" href=\"#prof_expires\">prof_expires</a>, <a class=\"id\" href=\"#ptime\">ptime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SIGPROF\">SIGPROF</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_cpu_itimer\">check_cpu_itimer</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#it\">it</a>[<a class=\"id\" href=\"#CPUCLOCK_VIRT\">CPUCLOCK_VIRT</a>], &amp;<a class=\"id\" href=\"#virt_expires\">virt_expires</a>, <a class=\"id\" href=\"#utime\">utime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SIGVTALRM\">SIGVTALRM</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#soft\">soft</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_CPU\">RLIMIT_CPU</a>].<a class=\"id\" href=\"#rlim_cur\">rlim_cur</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#soft\">soft</a> != <a class=\"id\" href=\"#RLIM_INFINITY\">RLIM_INFINITY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#psecs\">psecs</a> = <a class=\"id\" href=\"#cputime_to_secs\">cputime_to_secs</a>(<a class=\"id\" href=\"#ptime\">ptime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hard\">hard</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_CPU\">RLIMIT_CPU</a>].<a class=\"id\" href=\"#rlim_max\">rlim_max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#psecs\">psecs</a> >= <a class=\"id\" href=\"#hard\">hard</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * At the hard limit, we just die.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * No need to calculate anything else now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__group_send_sig_info\">__group_send_sig_info</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#psecs\">psecs</a> >= <a class=\"id\" href=\"#soft\">soft</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * At the soft limit, send a SIGXCPU every second.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__group_send_sig_info\">__group_send_sig_info</a>(<a class=\"id\" href=\"#SIGXCPU\">SIGXCPU</a>, <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#soft\">soft</a> &lt; <a class=\"id\" href=\"#hard\">hard</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#soft\">soft</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_CPU\">RLIMIT_CPU</a>].<a class=\"id\" href=\"#rlim_cur\">rlim_cur</a> = <a class=\"id\" href=\"#soft\">soft</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#secs_to_cputime\">secs_to_cputime</a>(<a class=\"id\" href=\"#soft\">soft</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(<a class=\"id\" href=\"#prof_expires\">prof_expires</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#prof_expires\">prof_expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prof_expires\">prof_expires</a> = <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#prof_exp\">prof_exp</a> = <a class=\"id\" href=\"#prof_expires\">prof_expires</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#virt_exp\">virt_exp</a> = <a class=\"id\" href=\"#virt_expires\">virt_expires</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#sched_exp\">sched_exp</a> = <a class=\"id\" href=\"#sched_expires\">sched_expires</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_cputime_zero\">task_cputime_zero</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_process_timers\">stop_process_timers</a>(<a class=\"id\" href=\"#sig\">sig</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is called from the signal code (via do_schedule_next_timer)</span>", 
"<span class=\"comment\"> * when the last timer signal was delivered and we have to reload the timer.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#posix_cpu_timer_schedule\">posix_cpu_timer_schedule</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The task was cleaned up already, no future firings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fetch the current sample and update the timer's expiry time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_PERTHREAD\">CPUCLOCK_PERTHREAD</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_clock_sample\">cpu_clock_sample</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bump_cpu_timer\">bump_cpu_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_dead_task\">clear_dead_task</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>); <span class=\"comment\">/* arm_timer needs it.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The process has been reaped.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We can't even collect a sample any more.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a>) && <a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We've noticed that the thread is dead, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not yet reaped.  Take this opportunity to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * drop our task ref.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_dead_task\">clear_dead_task</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_timer_sample_group\">cpu_timer_sample_group</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bump_cpu_timer\">bump_cpu_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Leave the tasklist_lock locked for the call below.  */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now re-arm for the new expiry time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arm_timer\">arm_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_overrun_last\">it_overrun_last</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_overrun\">it_overrun</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_overrun\">it_overrun</a> = -1;", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_requeue_pending\">it_requeue_pending</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * task_cputime_expired - Compare two task_cputime entities.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @sample:<span class=\"ts\"/>The task_cputime structure to be checked for expiration.</span>", 
"<span class=\"comment\"> * @expires:<span class=\"ts\"/>Expiration times, against which @sample will be checked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Checks @sample against @expires to see if any field of @sample has expired.</span>", 
"<span class=\"comment\"> * Returns true if any field of the former is greater than the corresponding</span>", 
"<span class=\"comment\"> * field of the latter if the latter field is set.  Otherwise returns false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#task_cputime_expired\">task_cputime_expired</a>(const struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> *<a class=\"id\" href=\"#sample\">sample</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> *<a class=\"id\" href=\"#expires\">expires</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(<a class=\"id\" href=\"#expires\">expires</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cputime_ge\">cputime_ge</a>(<a class=\"id\" href=\"#sample\">sample</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#expires\">expires</a>-><a class=\"id\" href=\"#utime\">utime</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(<a class=\"id\" href=\"#expires\">expires</a>-><a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cputime_ge\">cputime_ge</a>(<a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#sample\">sample</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#sample\">sample</a>-><a class=\"id\" href=\"#stime\">stime</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#expires\">expires</a>-><a class=\"id\" href=\"#stime\">stime</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#expires\">expires</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> != 0 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sample\">sample</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> >= <a class=\"id\" href=\"#expires\">expires</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * fastpath_timer_check - POSIX CPU timers fast path.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @tsk:<span class=\"ts\"/>The task (thread) being checked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check the task and thread group timers.  If both are zero (there are no</span>", 
"<span class=\"comment\"> * timers set) return false.  Otherwise snapshot the task and thread group</span>", 
"<span class=\"comment\"> * timers and compare them with the corresponding expiration times.  Return</span>", 
"<span class=\"comment\"> * true if a timer has expired, else return false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fastpath_timer_check\">fastpath_timer_check</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_cputime_zero\">task_cputime_zero</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#task_sample\">task_sample</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#utime\">utime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#stime\">stime</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#stime\">stime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_cputime_expired\">task_cputime_expired</a>(&amp;<a class=\"id\" href=\"#task_sample\">task_sample</a>, &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputimer\">cputimer</a>.<a class=\"id\" href=\"#running\">running</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#group_sample\">group_sample</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputimer\">cputimer</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_sample\">group_sample</a> = <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputimer\">cputimer</a>.<a class=\"id\" href=\"#cputime\">cputime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputimer\">cputimer</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_cputime_expired\">task_cputime_expired</a>(&amp;<a class=\"id\" href=\"#group_sample\">group_sample</a>, &amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is called from the timer interrupt handler.  The irq handler has</span>", 
"<span class=\"comment\"> * already updated our counts.  We need to check if any timers fire now.</span>", 
"<span class=\"comment\"> * Interrupts are disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#run_posix_cpu_timers\">run_posix_cpu_timers</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#firing\">firing</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The fast path checks that there are no expired thread or thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * group timers.  If that's so, just return.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fastpath_timer_check\">fastpath_timer_check</a>(<a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#lock_task_sighand\">lock_task_sighand</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here we take off tsk-&gt;signal-&gt;cpu_timers[N] and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tsk-&gt;cpu_timers[N] all the timers that are firing, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * put them on the firing list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_thread_timers\">check_thread_timers</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#firing\">firing</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there are any active process wide timers (POSIX 1.b, itimers,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RLIMIT_CPU) cputimer must be running.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#cputimer\">cputimer</a>.<a class=\"id\" href=\"#running\">running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_process_timers\">check_process_timers</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#firing\">firing</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must release these locks before taking any timer's lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There is a potential race with timer deletion here, as the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * siglock now protects our private firing list.  We have set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the firing flag in each timer, so that a deletion attempt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that gets the timer lock before we do will give it up and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * spin until we've taken care of that timer below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_task_sighand\">unlock_task_sighand</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now that all the timers on our list have the firing flag,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * noone will touch their list entries but us.  We'll take</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * each timer's lock before clearing its firing flag, so no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timer call will interfere.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#firing\">firing</a>, <a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu_firing\">cpu_firing</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_firing\">cpu_firing</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#firing\">firing</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#firing\">firing</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The firing flag is -1 if we collided with a reset</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of the timer, which already reported this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * almost-firing as an overrun.  So don't generate an event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cpu_firing\">cpu_firing</a> >= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_timer_fire\">cpu_timer_fire</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set one of the process-wide special case CPU timers or RLIMIT_CPU.</span>", 
"<span class=\"comment\"> * The tsk-&gt;sighand-&gt;siglock must be held by the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#set_process_cpu_timer\">set_process_cpu_timer</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, unsigned int <a class=\"id\" href=\"#clock_idx\">clock_idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#newval\">newval</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> *<a class=\"id\" href=\"#oldval\">oldval</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#clock_idx\">clock_idx</a> == <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_timer_sample_group\">cpu_timer_sample_group</a>(<a class=\"id\" href=\"#clock_idx\">clock_idx</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#now\">now</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oldval\">oldval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are setting itimer. The *oldval is absolute and we update</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it to be relative, *newval argument is relative and we update</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it to be absolute.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(*<a class=\"id\" href=\"#oldval\">oldval</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_le\">cputime_le</a>(*<a class=\"id\" href=\"#oldval\">oldval</a>, <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Just about to fire. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#oldval\">oldval</a> = <a class=\"id\" href=\"#cputime_one_jiffy\">cputime_one_jiffy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#oldval\">oldval</a> = <a class=\"id\" href=\"#cputime_sub\">cputime_sub</a>(*<a class=\"id\" href=\"#oldval\">oldval</a>, <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(*<a class=\"id\" href=\"#newval\">newval</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#newval\">newval</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(*<a class=\"id\" href=\"#newval\">newval</a>, <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update expiration cache if we are the earliest timer, or eventually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RLIMIT_CPU limit is earlier than prof_exp cpu timer expire.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#clock_idx\">clock_idx</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_PROF\">CPUCLOCK_PROF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#expires_gt\">expires_gt</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#prof_exp\">prof_exp</a>, *<a class=\"id\" href=\"#newval\">newval</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#prof_exp\">prof_exp</a> = *<a class=\"id\" href=\"#newval\">newval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_VIRT\">CPUCLOCK_VIRT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#expires_gt\">expires_gt</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#virt_exp\">virt_exp</a>, *<a class=\"id\" href=\"#newval\">newval</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#virt_exp\">virt_exp</a> = *<a class=\"id\" href=\"#newval\">newval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_cpu_nanosleep\">do_cpu_nanosleep</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#rqtp\">rqtp</a>, struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> *<a class=\"id\" href=\"#it\">it</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> <a class=\"id\" href=\"#timer\">timer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set up a temporary timer and then wait for it to go off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>, 0, sizeof <a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it_clock\">it_clock</a> = <a class=\"id\" href=\"#which_clock\">which_clock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it_overrun\">it_overrun</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#posix_cpu_timer_create\">posix_cpu_timer_create</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it_process\">it_process</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>static struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> <a class=\"id\" href=\"#zero_it\">zero_it</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#it\">it</a>, 0, sizeof *<a class=\"id\" href=\"#it\">it</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#it_value\">it_value</a> = *<a class=\"id\" href=\"#rqtp\">rqtp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#posix_cpu_timer_set\">posix_cpu_timer_set</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#it\">it</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Our timer fired and was reset.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Block until cpu_timer_fire (or a signal) wakes us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We were interrupted by a signal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sample_to_timespec\">sample_to_timespec</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>, <a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#rqtp\">rqtp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#posix_cpu_timer_set\">posix_cpu_timer_set</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>, 0, &amp;<a class=\"id\" href=\"#zero_it\">zero_it</a>, <a class=\"id\" href=\"#it\">it</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#it_lock\">it_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#it_value\">it_value</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> | <a class=\"id\" href=\"#it\">it</a>-><a class=\"id\" href=\"#it_value\">it_value</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * It actually did fire already.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ERESTART_RESTARTBLOCK\">ERESTART_RESTARTBLOCK</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#posix_cpu_nsleep\">posix_cpu_nsleep</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#rqtp\">rqtp</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#rmtp\">rmtp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#restart_block\">restart_block</a> *<a class=\"id\" href=\"#restart_block\">restart_block</a> =", 
"<span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#restart_block\">restart_block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> <a class=\"id\" href=\"#it\">it</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Diagnose required errors first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_PERTHREAD\">CPUCLOCK_PERTHREAD</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#CPUCLOCK_PID\">CPUCLOCK_PID</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>) == 0 ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#CPUCLOCK_PID\">CPUCLOCK_PID</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>) == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_cpu_nanosleep\">do_cpu_nanosleep</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#rqtp\">rqtp</a>, &amp;<a class=\"id\" href=\"#it\">it</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#ERESTART_RESTARTBLOCK\">ERESTART_RESTARTBLOCK</a>) {", 
"", 
"<span class=\"ts\"/>       <span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TIMER_ABSTIME\">TIMER_ABSTIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERESTARTNOHAND\">ERESTARTNOHAND</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> * Report back to the user the time still remaining.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rmtp\">rmtp</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#rmtp\">rmtp</a>, &amp;<a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#it_value\">it_value</a>, sizeof *<a class=\"id\" href=\"#rmtp\">rmtp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#posix_cpu_nsleep_restart\">posix_cpu_nsleep_restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg0\">arg0</a> = <a class=\"id\" href=\"#which_clock\">which_clock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg1\">arg1</a> = (unsigned long) <a class=\"id\" href=\"#rmtp\">rmtp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg2\">arg2</a> = <a class=\"id\" href=\"#rqtp\">rqtp</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg3\">arg3</a> = <a class=\"id\" href=\"#rqtp\">rqtp</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"long <a class=\"id\" href=\"#posix_cpu_nsleep_restart\">posix_cpu_nsleep_restart</a>(struct <a class=\"id\" href=\"#restart_block\">restart_block</a> *<a class=\"id\" href=\"#restart_block\">restart_block</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a> = <a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg0\">arg0</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#rmtp\">rmtp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> <a class=\"id\" href=\"#it\">it</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmtp\">rmtp</a> = (struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg1\">arg1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg2\">arg2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg3\">arg3</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#do_no_restart_syscall\">do_no_restart_syscall</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_cpu_nanosleep\">do_cpu_nanosleep</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>, <a class=\"id\" href=\"#TIMER_ABSTIME\">TIMER_ABSTIME</a>, &amp;<a class=\"id\" href=\"#t\">t</a>, &amp;<a class=\"id\" href=\"#it\">it</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#ERESTART_RESTARTBLOCK\">ERESTART_RESTARTBLOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> * Report back to the user the time still remaining.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rmtp\">rmtp</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#rmtp\">rmtp</a>, &amp;<a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#it_value\">it_value</a>, sizeof *<a class=\"id\" href=\"#rmtp\">rmtp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#posix_cpu_nsleep_restart\">posix_cpu_nsleep_restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg0\">arg0</a> = <a class=\"id\" href=\"#which_clock\">which_clock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg1\">arg1</a> = (unsigned long) <a class=\"id\" href=\"#rmtp\">rmtp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg2\">arg2</a> = <a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart_block\">restart_block</a>-><a class=\"id\" href=\"#arg3\">arg3</a> = <a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PROCESS_CLOCK\">PROCESS_CLOCK</a><span class=\"ts\"/><a class=\"id\" href=\"#MAKE_PROCESS_CPUCLOCK\">MAKE_PROCESS_CPUCLOCK</a>(0, <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#THREAD_CLOCK\">THREAD_CLOCK</a><span class=\"ts\"/><a class=\"id\" href=\"#MAKE_THREAD_CPUCLOCK\">MAKE_THREAD_CPUCLOCK</a>(0, <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>)", 
"", 
"static int <a class=\"id\" href=\"#process_cpu_clock_getres\">process_cpu_clock_getres</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#posix_cpu_clock_getres\">posix_cpu_clock_getres</a>(<a class=\"id\" href=\"#PROCESS_CLOCK\">PROCESS_CLOCK</a>, <a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"static int <a class=\"id\" href=\"#process_cpu_clock_get\">process_cpu_clock_get</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#posix_cpu_clock_get\">posix_cpu_clock_get</a>(<a class=\"id\" href=\"#PROCESS_CLOCK\">PROCESS_CLOCK</a>, <a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"static int <a class=\"id\" href=\"#process_cpu_timer_create\">process_cpu_timer_create</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a> = <a class=\"id\" href=\"#PROCESS_CLOCK\">PROCESS_CLOCK</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#posix_cpu_timer_create\">posix_cpu_timer_create</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"static int <a class=\"id\" href=\"#process_cpu_nsleep\">process_cpu_nsleep</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#rqtp\">rqtp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#rmtp\">rmtp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#posix_cpu_nsleep\">posix_cpu_nsleep</a>(<a class=\"id\" href=\"#PROCESS_CLOCK\">PROCESS_CLOCK</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#rqtp\">rqtp</a>, <a class=\"id\" href=\"#rmtp\">rmtp</a>);", 
"}", 
"static long <a class=\"id\" href=\"#process_cpu_nsleep_restart\">process_cpu_nsleep_restart</a>(struct <a class=\"id\" href=\"#restart_block\">restart_block</a> *<a class=\"id\" href=\"#restart_block\">restart_block</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"static int <a class=\"id\" href=\"#thread_cpu_clock_getres\">thread_cpu_clock_getres</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#posix_cpu_clock_getres\">posix_cpu_clock_getres</a>(<a class=\"id\" href=\"#THREAD_CLOCK\">THREAD_CLOCK</a>, <a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"static int <a class=\"id\" href=\"#thread_cpu_clock_get\">thread_cpu_clock_get</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#posix_cpu_clock_get\">posix_cpu_clock_get</a>(<a class=\"id\" href=\"#THREAD_CLOCK\">THREAD_CLOCK</a>, <a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"static int <a class=\"id\" href=\"#thread_cpu_timer_create\">thread_cpu_timer_create</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a> = <a class=\"id\" href=\"#THREAD_CLOCK\">THREAD_CLOCK</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#posix_cpu_timer_create\">posix_cpu_timer_create</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"static int <a class=\"id\" href=\"#thread_cpu_nsleep\">thread_cpu_nsleep</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#rqtp\">rqtp</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#rmtp\">rmtp</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"static long <a class=\"id\" href=\"#thread_cpu_nsleep_restart\">thread_cpu_nsleep_restart</a>(struct <a class=\"id\" href=\"#restart_block\">restart_block</a> *<a class=\"id\" href=\"#restart_block\">restart_block</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#init_posix_cpu_timers\">init_posix_cpu_timers</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_clock\">k_clock</a> <a class=\"id\" href=\"#process\">process</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_getres\">clock_getres</a> = <a class=\"id\" href=\"#process_cpu_clock_getres\">process_cpu_clock_getres</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_get\">clock_get</a> = <a class=\"id\" href=\"#process_cpu_clock_get\">process_cpu_clock_get</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_set\">clock_set</a> = <a class=\"id\" href=\"#do_posix_clock_nosettime\">do_posix_clock_nosettime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#timer_create\">timer_create</a> = <a class=\"id\" href=\"#process_cpu_timer_create\">process_cpu_timer_create</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nsleep\">nsleep</a> = <a class=\"id\" href=\"#process_cpu_nsleep\">process_cpu_nsleep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nsleep_restart\">nsleep_restart</a> = <a class=\"id\" href=\"#process_cpu_nsleep_restart\">process_cpu_nsleep_restart</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#k_clock\">k_clock</a> <a class=\"id\" href=\"#thread\">thread</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_getres\">clock_getres</a> = <a class=\"id\" href=\"#thread_cpu_clock_getres\">thread_cpu_clock_getres</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_get\">clock_get</a> = <a class=\"id\" href=\"#thread_cpu_clock_get\">thread_cpu_clock_get</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#clock_set\">clock_set</a> = <a class=\"id\" href=\"#do_posix_clock_nosettime\">do_posix_clock_nosettime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#timer_create\">timer_create</a> = <a class=\"id\" href=\"#thread_cpu_timer_create\">thread_cpu_timer_create</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nsleep\">nsleep</a> = <a class=\"id\" href=\"#thread_cpu_nsleep\">thread_cpu_nsleep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nsleep_restart\">nsleep_restart</a> = <a class=\"id\" href=\"#thread_cpu_nsleep_restart\">thread_cpu_nsleep_restart</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_posix_clock\">register_posix_clock</a>(<a class=\"id\" href=\"#CLOCK_PROCESS_CPUTIME_ID\">CLOCK_PROCESS_CPUTIME_ID</a>, &amp;<a class=\"id\" href=\"#process\">process</a>);", 
];
xr_frag_insert('l/70/9d9de8a7b11b725d5e9273892f97a457e22699.xr', __xr_tmp);
