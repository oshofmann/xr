var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * drivers/base/dd.c - The core device/driver interactions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains the (sometimes tricky) code that controls the</span>", 
"<span class=\"comment\"> * interactions between devices and drivers, which primarily includes</span>", 
"<span class=\"comment\"> * driver binding and unbinding.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All of this code used to exist in drivers/base/bus.c, but was</span>", 
"<span class=\"comment\"> * relocated to here in the name of compartmentalization (since it wasn't</span>", 
"<span class=\"comment\"> * strictly code just for the 'struct bus_type'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2002-5 Patrick Mochel</span>", 
"<span class=\"comment\"> * Copyright (c) 2002-3 Open Source Development Labs</span>", 
"<span class=\"comment\"> * Copyright (c) 2007-2009 Greg Kroah-Hartman &lt;gregkh@suse.de&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2007-2009 Novell Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#async\">async</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm_runtime\">pm_runtime</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"base.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"power/power.h\"", 
"", 
"", 
"static void <a class=\"id\" href=\"#driver_bound\">driver_bound</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#klist_node_attached\">klist_node_attached</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#knode_driver\">knode_driver</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: device %s already bound\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"driver: '%s': %s: bound to device '%s'\\n\", <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_add_tail\">klist_add_tail</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#knode_driver\">knode_driver</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#klist_devices\">klist_devices</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bus_notifier\">bus_notifier</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#BUS_NOTIFY_BOUND_DRIVER\">BUS_NOTIFY_BOUND_DRIVER</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#driver_sysfs_add\">driver_sysfs_add</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bus_notifier\">bus_notifier</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#BUS_NOTIFY_BIND_DRIVER\">BUS_NOTIFY_BIND_DRIVER</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sysfs_create_link\">sysfs_create_link</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sysfs_create_link\">sysfs_create_link</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"driver\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_link\">sysfs_remove_link</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_name\">kobject_name</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#driver_sysfs_remove\">driver_sysfs_remove</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_link\">sysfs_remove_link</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_link\">sysfs_remove_link</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, \"driver\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * device_bind_driver - bind a driver to one device.</span>", 
"<span class=\"comment\"> * @dev: device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allow manual attachment of a driver to a device.</span>", 
"<span class=\"comment\"> * Caller must have already set @dev-&gt;driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this does not modify the bus reference count</span>", 
"<span class=\"comment\"> * nor take the bus's rwsem. Please verify those are accounted</span>", 
"<span class=\"comment\"> * for before calling this. (It is ok to call with no other effort</span>", 
"<span class=\"comment\"> * from a driver's probe() method.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function must be called with the device lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#device_bind_driver\">device_bind_driver</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#driver_sysfs_add\">driver_sysfs_add</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#driver_bound\">driver_bound</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#device_bind_driver\">device_bind_driver</a>);", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#probe_count\">probe_count</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#probe_waitqueue\">probe_waitqueue</a>);", 
"", 
"static int <a class=\"id\" href=\"#really_probe\">really_probe</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#probe_count\">probe_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"bus: '%s': %s: probing driver %s with device %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devres_head\">devres_head</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#drv\">drv</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#driver_sysfs_add\">driver_sysfs_add</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: driver_sysfs_add(%s) failed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#probe_failed\">probe_failed</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#probe\">probe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#probe\">probe</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#probe_failed\">probe_failed</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#probe\">probe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#probe\">probe</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#probe_failed\">probe_failed</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver_bound\">driver_bound</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"bus: '%s': %s: bound device %s to driver %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<a class=\"id\" href=\"#probe_failed\">probe_failed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devres_release_all\">devres_release_all</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver_sysfs_remove\">driver_sysfs_remove</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#ENODEV\">ENODEV</a> && <a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* driver matched but the probe failed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"%s: probe of %s failed with error %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ignore errors returned by -&gt;probe so that the next driver can try</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its luck.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#probe_count\">probe_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#probe_waitqueue\">probe_waitqueue</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_probe_done</span>", 
"<span class=\"comment\"> * Determine if the probe sequence is finished or not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Should somehow figure out how to use a semaphore, not an atomic variable...</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#driver_probe_done\">driver_probe_done</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: probe_count = %d\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#probe_count\">probe_count</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#probe_count\">probe_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_for_device_probe</span>", 
"<span class=\"comment\"> * Wait for device probing to be completed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wait_for_device_probe\">wait_for_device_probe</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* wait for the known devices to complete their probing */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_event\">wait_event</a>(<a class=\"id\" href=\"#probe_waitqueue\">probe_waitqueue</a>, <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#probe_count\">probe_count</a>) == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_synchronize_full\">async_synchronize_full</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#wait_for_device_probe\">wait_for_device_probe</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_probe_device - attempt to bind device &amp; driver together</span>", 
"<span class=\"comment\"> * @drv: driver to bind a device to</span>", 
"<span class=\"comment\"> * @dev: device to try to bind to the driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns -ENODEV if the device is not registered,</span>", 
"<span class=\"comment\"> * 1 if the device is bound successfully and 0 otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function must be called with @dev lock held.  When called for a</span>", 
"<span class=\"comment\"> * USB interface, @dev-&gt;parent lock must be held as well.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#driver_probe_device\">driver_probe_device</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#device_is_registered\">device_is_registered</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"bus: '%s': %s: matched device %s with driver %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_get_noresume\">pm_runtime_get_noresume</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_barrier\">pm_runtime_barrier</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#really_probe\">really_probe</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_put_sync\">pm_runtime_put_sync</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__device_attach\">__device_attach</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#driver_match_device\">driver_match_device</a>(<a class=\"id\" href=\"#drv\">drv</a>, <a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#driver_probe_device\">driver_probe_device</a>(<a class=\"id\" href=\"#drv\">drv</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * device_attach - try to attach device to a driver.</span>", 
"<span class=\"comment\"> * @dev: device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Walk the list of drivers that the bus has and call</span>", 
"<span class=\"comment\"> * driver_probe_device() for each pair. If a compatible</span>", 
"<span class=\"comment\"> * pair is found, break out and return.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if the device was bound to a driver;</span>", 
"<span class=\"comment\"> * 0 if no matching driver was found;</span>", 
"<span class=\"comment\"> * -ENODEV if the device is not registered.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When called for a USB interface, @dev-&gt;parent lock must be held.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#device_attach\">device_attach</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_lock\">device_lock</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#device_bind_driver\">device_bind_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_get_noresume\">pm_runtime_get_noresume</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#bus_for_each_drv\">bus_for_each_drv</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#__device_attach\">__device_attach</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_put_sync\">pm_runtime_put_sync</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_unlock\">device_unlock</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#device_attach\">device_attach</a>);", 
"", 
"static int <a class=\"id\" href=\"#__driver_attach\">__driver_attach</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Lock device and try to bind to it. We drop the error</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here and always return 0, because we need to keep trying</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to bind to devices and some drivers will return an error</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * simply if it didn't support the device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * driver_probe_device() will spit a warning if there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is an error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#driver_match_device\">driver_match_device</a>(<a class=\"id\" href=\"#drv\">drv</a>, <a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a>)<span class=\"ts\"/><span class=\"comment\">/* Needed for USB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_lock\">device_lock</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_lock\">device_lock</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#driver_probe_device\">driver_probe_device</a>(<a class=\"id\" href=\"#drv\">drv</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_unlock\">device_unlock</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unlock\">device_unlock</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_attach - try to bind driver to devices.</span>", 
"<span class=\"comment\"> * @drv: driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Walk the list of devices that the bus has on it and try to</span>", 
"<span class=\"comment\"> * match the driver with each one.  If driver_probe_device()</span>", 
"<span class=\"comment\"> * returns 0 and the @dev-&gt;driver is set, we've found a</span>", 
"<span class=\"comment\"> * compatible pair.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#driver_attach\">driver_attach</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bus_for_each_dev\">bus_for_each_dev</a>(<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#drv\">drv</a>, <a class=\"id\" href=\"#__driver_attach\">__driver_attach</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#driver_attach\">driver_attach</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __device_release_driver() must be called with @dev lock held.</span>", 
"<span class=\"comment\"> * When called for a USB interface, @dev-&gt;parent lock must be held as well.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__device_release_driver\">__device_release_driver</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_get_noresume\">pm_runtime_get_noresume</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_barrier\">pm_runtime_barrier</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#driver_sysfs_remove\">driver_sysfs_remove</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bus_notifier\">bus_notifier</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#BUS_NOTIFY_UNBIND_DRIVER\">BUS_NOTIFY_UNBIND_DRIVER</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#remove\">remove</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#remove\">remove</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#remove\">remove</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#remove\">remove</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_release_all\">devres_release_all</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist_remove\">klist_remove</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#knode_driver\">knode_driver</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bus_notifier\">bus_notifier</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#BUS_NOTIFY_UNBOUND_DRIVER\">BUS_NOTIFY_UNBOUND_DRIVER</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_put_sync\">pm_runtime_put_sync</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * device_release_driver - manually detach device from driver.</span>", 
"<span class=\"comment\"> * @dev: device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Manually detach device from driver.</span>", 
"<span class=\"comment\"> * When called for a USB interface, @dev-&gt;parent lock must be held.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#device_release_driver\">device_release_driver</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If anyone calls device_release_driver() recursively from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * within their -&gt;remove callback for the same device, they</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will deadlock right here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_lock\">device_lock</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__device_release_driver\">__device_release_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_unlock\">device_unlock</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#device_release_driver\">device_release_driver</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * driver_detach - detach driver from all devices it controls.</span>", 
"<span class=\"comment\"> * @drv: driver.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#driver_detach\">driver_detach</a>(struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_private\">device_private</a> *<a class=\"id\" href=\"#dev_prv\">dev_prv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#klist_devices\">klist_devices</a>.<a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#klist_devices\">klist_devices</a>.<a class=\"id\" href=\"#k_list\">k_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#klist_devices\">klist_devices</a>.<a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_prv\">dev_prv</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#klist_devices\">klist_devices</a>.<a class=\"id\" href=\"#k_list\">k_list</a>.<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device_private\">device_private</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#knode_driver\">knode_driver</a>.<a class=\"id\" href=\"#n_node\">n_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_prv\">dev_prv</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#klist_devices\">klist_devices</a>.<a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a>)<span class=\"ts\"/><span class=\"comment\">/* Needed for USB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_lock\">device_lock</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_lock\">device_lock</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> == <a class=\"id\" href=\"#drv\">drv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__device_release_driver\">__device_release_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unlock\">device_unlock</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unlock\">device_unlock</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These exports can't be _GPL due to .h files using this within them, and it</span>", 
"<span class=\"comment\"> * might break something that was previously working...</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(const struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>);", 
"", 
"void <a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#device_private_init\">device_private_init</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>);", 
];
xr_frag_insert('l/70/fb919109cabd233f9f282826646ad3bffe16eb.xr', __xr_tmp);
