var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check for extended topology enumeration cpuid leaf 0xb and if it</span>", 
"<span class=\"comment\"> * exists, use it for populating initial_apicid and cpu topology</span>", 
"<span class=\"comment\"> * detection.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pat\">pat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* leaf 0xb SMT level */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMT_LEVEL\">SMT_LEVEL</a><span class=\"ts\"/>0", 
"", 
"<span class=\"comment\">/* leaf 0xb sub-leaf types */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INVALID_TYPE\">INVALID_TYPE</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMT_TYPE\">SMT_TYPE</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CORE_TYPE\">CORE_TYPE</a><span class=\"ts\"/>2", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LEAFB_SUBTYPE\">LEAFB_SUBTYPE</a>(<a class=\"id\" href=\"#ecx\">ecx</a>)<span class=\"ts\"/><span class=\"ts\"/>(((<a class=\"id\" href=\"#ecx\">ecx</a>) >> 8) &amp; 0xff)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BITS_SHIFT_NEXT_LEVEL\">BITS_SHIFT_NEXT_LEVEL</a>(<a class=\"id\" href=\"#eax\">eax</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#eax\">eax</a>) &amp; 0x1f)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LEVEL_MAX_SIBLINGS\">LEVEL_MAX_SIBLINGS</a>(<a class=\"id\" href=\"#ebx\">ebx</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#ebx\">ebx</a>) &amp; 0xffff)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check for extended topology enumeration cpuid leaf 0xb and if it</span>", 
"<span class=\"comment\"> * exists, use it for populating initial_apicid and cpu topology</span>", 
"<span class=\"comment\"> * detection.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#detect_extended_topology\">detect_extended_topology</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>, <a class=\"id\" href=\"#sub_index\">sub_index</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ht_mask_width\">ht_mask_width</a>, <a class=\"id\" href=\"#core_plus_mask_width\">core_plus_mask_width</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#core_select_mask\">core_select_mask</a>, <a class=\"id\" href=\"#core_level_siblings\">core_level_siblings</a>;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#printed\">printed</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> &lt; 0xb)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid_count\">cpuid_count</a>(0xb, <a class=\"id\" href=\"#SMT_LEVEL\">SMT_LEVEL</a>, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check if the cpuid leaf 0xb is actually implemented.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ebx\">ebx</a> == 0 || (<a class=\"id\" href=\"#LEAFB_SUBTYPE\">LEAFB_SUBTYPE</a>(<a class=\"id\" href=\"#ecx\">ecx</a>) != <a class=\"id\" href=\"#SMT_TYPE\">SMT_TYPE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_XTOPOLOGY\">X86_FEATURE_XTOPOLOGY</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initial apic id, which also represents 32-bit extended x2apic id.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a> = <a class=\"id\" href=\"#edx\">edx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Populate HT related information from sub-leaf level 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#core_level_siblings\">core_level_siblings</a> = <a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> = <a class=\"id\" href=\"#LEVEL_MAX_SIBLINGS\">LEVEL_MAX_SIBLINGS</a>(<a class=\"id\" href=\"#ebx\">ebx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#core_plus_mask_width\">core_plus_mask_width</a> = <a class=\"id\" href=\"#ht_mask_width\">ht_mask_width</a> = <a class=\"id\" href=\"#BITS_SHIFT_NEXT_LEVEL\">BITS_SHIFT_NEXT_LEVEL</a>(<a class=\"id\" href=\"#eax\">eax</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_index\">sub_index</a> = 1;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuid_count\">cpuid_count</a>(0xb, <a class=\"id\" href=\"#sub_index\">sub_index</a>, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check for the Core type in the implemented sub leaves.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#LEAFB_SUBTYPE\">LEAFB_SUBTYPE</a>(<a class=\"id\" href=\"#ecx\">ecx</a>) == <a class=\"id\" href=\"#CORE_TYPE\">CORE_TYPE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#core_level_siblings\">core_level_siblings</a> = <a class=\"id\" href=\"#LEVEL_MAX_SIBLINGS\">LEVEL_MAX_SIBLINGS</a>(<a class=\"id\" href=\"#ebx\">ebx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#core_plus_mask_width\">core_plus_mask_width</a> = <a class=\"id\" href=\"#BITS_SHIFT_NEXT_LEVEL\">BITS_SHIFT_NEXT_LEVEL</a>(<a class=\"id\" href=\"#eax\">eax</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sub_index\">sub_index</a>++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#LEAFB_SUBTYPE\">LEAFB_SUBTYPE</a>(<a class=\"id\" href=\"#ecx\">ecx</a>) != <a class=\"id\" href=\"#INVALID_TYPE\">INVALID_TYPE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#core_select_mask\">core_select_mask</a> = (~(-1 << <a class=\"id\" href=\"#core_plus_mask_width\">core_plus_mask_width</a>)) >> <a class=\"id\" href=\"#ht_mask_width\">ht_mask_width</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_core_id\">cpu_core_id</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#phys_pkg_id\">phys_pkg_id</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a>, <a class=\"id\" href=\"#ht_mask_width\">ht_mask_width</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp; <a class=\"id\" href=\"#core_select_mask\">core_select_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#phys_pkg_id\">phys_pkg_id</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a>, <a class=\"id\" href=\"#core_plus_mask_width\">core_plus_mask_width</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reinit the apicid, now that we have extended initial_apicid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#phys_pkg_id\">phys_pkg_id</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> = (<a class=\"id\" href=\"#core_level_siblings\">core_level_siblings</a> / <a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#printed\">printed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>  \"CPU: Physical Processor ID: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>  \"CPU: Processor Core ID: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_core_id\">cpu_core_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printed\">printed</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
];
xr_frag_insert('l/70/fecd89270e402716d42ff351389cb689dbcc31.xr', __xr_tmp);
