var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lib/prio_tree.c - priority search tree</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2004, Rajesh Venkatasubramanian &lt;vrajesh@umich.edu&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPL v2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on the radix priority search tree proposed by Edward M. McCreight</span>", 
"<span class=\"comment\"> * SIAM Journal of Computing, vol. 14, no.2, pages 257-276, May 1985</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 02Feb2004<span class=\"ts\"/>Initial version</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#prio_tree\">prio_tree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A clever mix of heap and radix trees forms a radix priority search tree (PST)</span>", 
"<span class=\"comment\"> * which is useful for storing intervals, e.g, we can consider a vma as a closed</span>", 
"<span class=\"comment\"> * interval of file pages [offset_begin, offset_end], and store all vmas that</span>", 
"<span class=\"comment\"> * map a file in a PST. Then, using the PST, we can answer a stabbing query,</span>", 
"<span class=\"comment\"> * i.e., selecting a set of stored intervals (vmas) that overlap with (map) a</span>", 
"<span class=\"comment\"> * given input interval X (a set of consecutive file pages), in \"O(log n + m)\"</span>", 
"<span class=\"comment\"> * time where 'log n' is the height of the PST, and 'm' is the number of stored</span>", 
"<span class=\"comment\"> * intervals (vmas) that overlap (map) with the input interval X (the set of</span>", 
"<span class=\"comment\"> * consecutive file pages).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In our implementation, we store closed intervals of the form [radix_index,</span>", 
"<span class=\"comment\"> * heap_index]. We assume that always radix_index &lt;= heap_index. McCreight's PST</span>", 
"<span class=\"comment\"> * is designed for storing intervals with unique radix indices, i.e., each</span>", 
"<span class=\"comment\"> * interval have different radix_index. However, this limitation can be easily</span>", 
"<span class=\"comment\"> * overcome by using the size, i.e., heap_index - radix_index, as part of the</span>", 
"<span class=\"comment\"> * index, so we index the tree using [(radix_index,size), heap_index].</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When the above-mentioned indexing scheme is used, theoretically, in a 32 bit</span>", 
"<span class=\"comment\"> * machine, the maximum height of a PST can be 64. We can use a balanced version</span>", 
"<span class=\"comment\"> * of the priority search tree to optimize the tree height, but the balanced</span>", 
"<span class=\"comment\"> * tree proposed by McCreight is too complex and memory-hungry for our purpose.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following macros are used for implementing prio_tree for i_mmap</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_INDEX\">RADIX_INDEX</a>(<a class=\"id\" href=\"#vma\">vma</a>)  ((<a class=\"id\" href=\"#vma\">vma</a>)-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMA_SIZE\">VMA_SIZE</a>(<a class=\"id\" href=\"#vma\">vma</a>)<span class=\"ts\"/>  (((<a class=\"id\" href=\"#vma\">vma</a>)-><a class=\"id\" href=\"#vm_end\">vm_end</a> - (<a class=\"id\" href=\"#vma\">vma</a>)-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"<span class=\"comment\">/* avoid overflow */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HEAP_INDEX\">HEAP_INDEX</a>(<a class=\"id\" href=\"#vma\">vma</a>)<span class=\"ts\"/>  ((<a class=\"id\" href=\"#vma\">vma</a>)-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> + (<a class=\"id\" href=\"#VMA_SIZE\">VMA_SIZE</a>(<a class=\"id\" href=\"#vma\">vma</a>) - 1))", 
"", 
"", 
"static void <a class=\"id\" href=\"#get_index\">get_index</a>(const struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"    const struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"    unsigned long *<a class=\"id\" href=\"#radix\">radix</a>, unsigned long *<a class=\"id\" href=\"#heap\">heap</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#raw\">raw</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#prio_tree_entry\">prio_tree_entry</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>, <a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#radix\">radix</a> = <a class=\"id\" href=\"#RADIX_INDEX\">RADIX_INDEX</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#heap\">heap</a> = <a class=\"id\" href=\"#HEAP_INDEX\">HEAP_INDEX</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#radix\">radix</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#heap\">heap</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#index_bits_to_maxindex\">index_bits_to_maxindex</a>[<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>];", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#prio_tree_init\">prio_tree_init</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#index_bits_to_maxindex\">index_bits_to_maxindex</a>) - 1; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index_bits_to_maxindex\">index_bits_to_maxindex</a>[<a class=\"id\" href=\"#i\">i</a>] = (1UL << (<a class=\"id\" href=\"#i\">i</a> + 1)) - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index_bits_to_maxindex\">index_bits_to_maxindex</a>[<a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#index_bits_to_maxindex\">index_bits_to_maxindex</a>) - 1] = ~0UL;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Maximum heap_index that can be stored in a PST with index_bits bits</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#prio_tree_maxindex\">prio_tree_maxindex</a>(unsigned int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#index_bits_to_maxindex\">index_bits_to_maxindex</a>[<a class=\"id\" href=\"#bits\">bits</a> - 1];", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Extend a priority search tree so that it can store a node with heap_index</span>", 
"<span class=\"comment\"> * max_heap_index. In the worst case, this algorithm takes O((log n)^2).</span>", 
"<span class=\"comment\"> * However, this function is used rarely and the common case performance is</span>", 
"<span class=\"comment\"> * not bad.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#prio_tree_expand\">prio_tree_expand</a>(struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>, unsigned long <a class=\"id\" href=\"#max_heap_index\">max_heap_index</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#prev\">prev</a>, *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_heap_index\">max_heap_index</a> &gt; <a class=\"id\" href=\"#prio_tree_maxindex\">prio_tree_maxindex</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#index_bits\">index_bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#index_bits\">index_bits</a>++;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#max_heap_index\">max_heap_index</a> &gt; <a class=\"id\" href=\"#prio_tree_maxindex\">prio_tree_maxindex</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#index_bits\">index_bits</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#index_bits\">index_bits</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_empty\">prio_tree_empty</a>(<a class=\"id\" href=\"#root\">root</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prio_tree_remove\">prio_tree_remove</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_PRIO_TREE_NODE\">INIT_PRIO_TREE_NODE</a>(<a class=\"id\" href=\"#first\">first</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prio_tree_remove\">prio_tree_remove</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_PRIO_TREE_NODE\">INIT_PRIO_TREE_NODE</a>(<a class=\"id\" href=\"#last\">last</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_PRIO_TREE_NODE\">INIT_PRIO_TREE_NODE</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prio_tree_empty\">prio_tree_empty</a>(<a class=\"id\" href=\"#root\">root</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#left\">left</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Replace a prio_tree_node with a new node and return the old node</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#prio_tree_replace\">prio_tree_replace</a>(struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#old\">old</a>, struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_PRIO_TREE_NODE\">INIT_PRIO_TREE_NODE</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a>(<a class=\"id\" href=\"#old\">old</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> != <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can reduce root-&gt;index_bits here. However, it is complex</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and does not help much to improve performance (IMO).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#left\">left</a> == <a class=\"id\" href=\"#old\">old</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#right\">right</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prio_tree_left_empty\">prio_tree_left_empty</a>(<a class=\"id\" href=\"#old\">old</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#left\">left</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prio_tree_right_empty\">prio_tree_right_empty</a>(<a class=\"id\" href=\"#old\">old</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#right\">right</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#right\">right</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#old\">old</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Insert a prio_tree_node @node into a radix priority search tree @root. The</span>", 
"<span class=\"comment\"> * algorithm typically takes O(log n) time where 'log n' is the number of bits</span>", 
"<span class=\"comment\"> * required to represent the maximum heap_index. In the worst case, the algo</span>", 
"<span class=\"comment\"> * can take O((log n)^2) - check prio_tree_expand.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If a prior node with same radix_index and heap_index is already found in</span>", 
"<span class=\"comment\"> * the tree, then returns the address of the prior node. Otherwise, inserts</span>", 
"<span class=\"comment\"> * @node into the tree and returns @node.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#prio_tree_insert\">prio_tree_insert</a>(struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#cur\">cur</a>, *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#radix_index\">radix_index</a>, <a class=\"id\" href=\"#heap_index\">heap_index</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r_index\">r_index</a>, <a class=\"id\" href=\"#h_index\">h_index</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size_flag\">size_flag</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_index\">get_index</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#radix_index\">radix_index</a>, &amp;<a class=\"id\" href=\"#heap_index\">heap_index</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_empty\">prio_tree_empty</a>(<a class=\"id\" href=\"#root\">root</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#heap_index\">heap_index</a> &gt; <a class=\"id\" href=\"#prio_tree_maxindex\">prio_tree_maxindex</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#index_bits\">index_bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#prio_tree_expand\">prio_tree_expand</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#heap_index\">heap_index</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = 1UL << (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#index_bits\">index_bits</a> - 1);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_index\">get_index</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#cur\">cur</a>, &amp;<a class=\"id\" href=\"#r_index\">r_index</a>, &amp;<a class=\"id\" href=\"#h_index\">h_index</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r_index\">r_index</a> == <a class=\"id\" href=\"#radix_index\">radix_index</a> && <a class=\"id\" href=\"#h_index\">h_index</a> == <a class=\"id\" href=\"#heap_index\">heap_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"                if (<a class=\"id\" href=\"#h_index\">h_index</a> &lt; <a class=\"id\" href=\"#heap_index\">heap_index</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#h_index\">h_index</a> == <a class=\"id\" href=\"#heap_index\">heap_index</a> && <a class=\"id\" href=\"#r_index\">r_index</a> &gt; <a class=\"id\" href=\"#radix_index\">radix_index</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#prio_tree_replace\">prio_tree_replace</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* swap indices */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#r_index\">r_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_index\">r_index</a> = <a class=\"id\" href=\"#radix_index\">radix_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_index\">radix_index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#h_index\">h_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h_index\">h_index</a> = <a class=\"id\" href=\"#heap_index\">heap_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#heap_index\">heap_index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size_flag\">size_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#heap_index\">heap_index</a> - <a class=\"id\" href=\"#radix_index\">radix_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#radix_index\">radix_index</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_right_empty\">prio_tree_right_empty</a>(<a class=\"id\" href=\"#cur\">cur</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_PRIO_TREE_NODE\">INIT_PRIO_TREE_NODE</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#right\">right</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prio_tree_left_empty\">prio_tree_left_empty</a>(<a class=\"id\" href=\"#cur\">cur</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_PRIO_TREE_NODE\">INIT_PRIO_TREE_NODE</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> >>= 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = 1UL << (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_flag\">size_flag</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Should not reach here */</span>", 
];
xr_frag_insert('l/71/4d013dc8e879ee6017503ca5cda51a9c4cf450.xr', __xr_tmp);
