var __xr_tmp = [
"struct <a class=\"id\" href=\"#vcpu_register_runstate_memory_area\">vcpu_register_runstate_memory_area</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GUEST_HANDLE\">GUEST_HANDLE</a>(<a class=\"id\" href=\"#vcpu_runstate_info\">vcpu_runstate_info</a>) <a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_runstate_info\">vcpu_runstate_info</a> *<a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#addr\">addr</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set or stop a VCPU's periodic timer. Every VCPU has one periodic timer</span>", 
"<span class=\"comment\"> * which can be set via these commands. Periods smaller than one millisecond</span>", 
"<span class=\"comment\"> * may not be supported.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPUOP_set_periodic_timer\">VCPUOP_set_periodic_timer</a><span class=\"ts\"/> 6 <span class=\"comment\">/* arg == vcpu_set_periodic_timer_t */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPUOP_stop_periodic_timer\">VCPUOP_stop_periodic_timer</a><span class=\"ts\"/> 7 <span class=\"comment\">/* arg == NULL */</span>", 
"struct <a class=\"id\" href=\"#vcpu_set_periodic_timer\">vcpu_set_periodic_timer</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#period_ns\">period_ns</a>;", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#vcpu_set_periodic_timer\">vcpu_set_periodic_timer</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set or stop a VCPU's single-shot timer. Every VCPU has one single-shot</span>", 
"<span class=\"comment\"> * timer which can be set via these commands.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPUOP_set_singleshot_timer\">VCPUOP_set_singleshot_timer</a><span class=\"ts\"/> 8 <span class=\"comment\">/* arg == vcpu_set_singleshot_timer_t */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPUOP_stop_singleshot_timer\">VCPUOP_stop_singleshot_timer</a> 9 <span class=\"comment\">/* arg == NULL */</span>", 
"struct <a class=\"id\" href=\"#vcpu_set_singleshot_timer\">vcpu_set_singleshot_timer</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#timeout_abs_ns\">timeout_abs_ns</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <span class=\"comment\">/* VCPU_SSHOTTMR_??? */</span>", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#vcpu_set_singleshot_timer\">vcpu_set_singleshot_timer</a>);", 
"", 
"<span class=\"comment\">/* Flags to VCPUOP_set_singleshot_timer. */</span>", 
" <span class=\"comment\">/* Require the timeout to be in the future (return -ETIME if it's passed). */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_VCPU_SSHOTTMR_future\">_VCPU_SSHOTTMR_future</a> (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPU_SSHOTTMR_future\">VCPU_SSHOTTMR_future</a>  (1U << <a class=\"id\" href=\"#_VCPU_SSHOTTMR_future\">_VCPU_SSHOTTMR_future</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Register a memory location in the guest address space for the</span>", 
"<span class=\"comment\"> * vcpu_info structure.  This allows the guest to place the vcpu_info</span>", 
"<span class=\"comment\"> * structure in a convenient place, such as in a per-cpu data area.</span>", 
"<span class=\"comment\"> * The pointer need not be page aligned, but the structure must not</span>", 
"<span class=\"comment\"> * cross a page boundary.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPUOP_register_vcpu_info\">VCPUOP_register_vcpu_info</a>   10  <span class=\"comment\">/* arg == struct vcpu_info */</span>", 
"struct <a class=\"id\" href=\"#vcpu_register_vcpu_info\">vcpu_register_vcpu_info</a> {", 
"    <a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#mfn\">mfn</a>;    <span class=\"comment\">/* mfn of page to place vcpu_info */</span>", 
"    <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#offset\">offset</a>; <span class=\"comment\">/* offset within page */</span>", 
"    <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#rsvd\">rsvd</a>;   <span class=\"comment\">/* unused */</span>", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#vcpu_register_vcpu_info\">vcpu_register_vcpu_info</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __XEN_PUBLIC_VCPU_H__ */</span>", 
];
xr_frag_insert('l/71/bbb31d26be727d2d3ee7e53fccfbc731665203.xr', __xr_tmp);
