var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_NUMA_64_H\">_ASM_X86_NUMA_64_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_NUMA_64_H\">_ASM_X86_NUMA_64_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nodemask\">nodemask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apicdef\">apicdef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#bootnode\">bootnode</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>;", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#compute_hash_shift\">compute_hash_shift</a>(struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#nodes\">nodes</a>, int <a class=\"id\" href=\"#numblks\">numblks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int *<a class=\"id\" href=\"#nodeids\">nodeids</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZONE_ALIGN\">ZONE_ALIGN</a> (1UL << (<a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>+<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"", 
"extern void <a class=\"id\" href=\"#numa_init_array\">numa_init_array</a>(void);", 
"extern int <a class=\"id\" href=\"#numa_off\">numa_off</a>;", 
"", 
"extern <a class=\"id\" href=\"#s16\">s16</a> <a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#MAX_LOCAL_APIC\">MAX_LOCAL_APIC</a>];", 
"", 
"extern unsigned long <a class=\"id\" href=\"#numa_free_all_bootmem\">numa_free_all_bootmem</a>(void);", 
"extern void <a class=\"id\" href=\"#setup_node_bootmem\">setup_node_bootmem</a>(int <a class=\"id\" href=\"#nodeid\">nodeid</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Too small node sizes may confuse the VM badly. Usually they</span>", 
"<span class=\"comment\"> * result from BIOS bugs. So dont recognize nodes as standalone</span>", 
"<span class=\"comment\"> * NUMA entities that have less than this amount of RAM listed:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODE_MIN_SIZE\">NODE_MIN_SIZE</a> (4*1024*1024)", 
"", 
"extern void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_cpu_to_node\">init_cpu_to_node</a>(void);", 
"extern void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#numa_set_node\">numa_set_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"extern void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#numa_clear_node\">numa_clear_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"extern void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#numa_add_cpu\">numa_add_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"extern void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#numa_remove_cpu\">numa_remove_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA_EMU\">CONFIG_NUMA_EMU</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FAKE_NODE_MIN_SIZE\">FAKE_NODE_MIN_SIZE</a><span class=\"ts\"/>((<a class=\"id\" href=\"#u64\">u64</a>)64 << 20)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FAKE_NODE_MIN_HASH_MASK\">FAKE_NODE_MIN_HASH_MASK</a><span class=\"ts\"/>(~(<a class=\"id\" href=\"#FAKE_NODE_MIN_SIZE\">FAKE_NODE_MIN_SIZE</a> - 1UL))", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA_EMU */</span>", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_cpu_to_node\">init_cpu_to_node</a>(void)<span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#numa_set_node\">numa_set_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#numa_clear_node\">numa_clear_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#numa_add_cpu\">numa_add_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/>{ }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#numa_remove_cpu\">numa_remove_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/>{ }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_NUMA_64_H */</span>", 
];
xr_frag_insert('l/72/4cd3a66d78501524636517c52363129d4d52cd.xr', __xr_tmp);
