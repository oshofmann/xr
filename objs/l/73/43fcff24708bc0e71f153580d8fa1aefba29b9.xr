var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#injectm\">injectm</a>).<a class=\"id\" href=\"#finished\">finished</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#msr_to_offset\">msr_to_offset</a>(<a class=\"id\" href=\"#msr\">msr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return *(<a class=\"id\" href=\"#u64\">u64</a> *)((char *)&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#injectm\">injectm</a>) + <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdmsrl_safe\">rdmsrl_safe</a>(<a class=\"id\" href=\"#msr\">msr</a>, &amp;<a class=\"id\" href=\"#v\">v</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(1, \"mce: Unable to read msr %d!\\n\", <a class=\"id\" href=\"#msr\">msr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Return zero in case the access faulted. This should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not happen normally but can happen if the CPU does</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * something weird, or if the code is buggy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#v\">v</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mce_wrmsrl\">mce_wrmsrl</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#msr\">msr</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#injectm\">injectm</a>).<a class=\"id\" href=\"#finished\">finished</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#msr_to_offset\">msr_to_offset</a>(<a class=\"id\" href=\"#msr\">msr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#u64\">u64</a> *)((char *)&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#injectm\">injectm</a>) + <a class=\"id\" href=\"#offset\">offset</a>) = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#msr\">msr</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Simple lockless ring to communicate PFNs from the exception handler with the</span>", 
"<span class=\"comment\"> * process context work function. This is vastly simplified because there's</span>", 
"<span class=\"comment\"> * only a single reader and a single writer.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MCE_RING_SIZE\">MCE_RING_SIZE</a> 16<span class=\"ts\"/><span class=\"comment\">/* we use one entry less */</span>", 
"", 
"struct <a class=\"id\" href=\"#mce_ring\">mce_ring</a> {", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ring\">ring</a>[<a class=\"id\" href=\"#MCE_RING_SIZE\">MCE_RING_SIZE</a>];", 
"};", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#mce_ring\">mce_ring</a>, <a class=\"id\" href=\"#mce_ring\">mce_ring</a>);", 
"", 
"<span class=\"comment\">/* Runs with CPU affinity in workqueue */</span>", 
"static int <a class=\"id\" href=\"#mce_ring_empty\">mce_ring_empty</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mce_ring\">mce_ring</a> *<a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_ring\">mce_ring</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mce_ring_get\">mce_ring_get</a>(unsigned long *<a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mce_ring\">mce_ring</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pfn\">pfn</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_ring\">mce_ring</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#ring\">ring</a>[<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> + 1) % <a class=\"id\" href=\"#MCE_RING_SIZE\">MCE_RING_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Always runs in MCE context with preempt off */</span>", 
"static int <a class=\"id\" href=\"#mce_ring_add\">mce_ring_add</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mce_ring\">mce_ring</a> *<a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_ring\">mce_ring</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> + 1) % <a class=\"id\" href=\"#MCE_RING_SIZE\">MCE_RING_SIZE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#ring\">ring</a>[<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a>] = <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wmb\">wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#mce_available\">mce_available</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_disabled\">mce_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_MCE\">X86_FEATURE_MCE</a>) && <a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_MCA\">X86_FEATURE_MCA</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mce_schedule_work\">mce_schedule_work</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mce_ring_empty\">mce_ring_empty</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mce_work\">mce_work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#work_pending\">work_pending</a>(<a class=\"id\" href=\"#work\">work</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get the address of the instruction at the time of the machine check</span>", 
"<span class=\"comment\"> * error.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mce_get_rip\">mce_get_rip</a>(struct <a class=\"id\" href=\"#mce\">mce</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a> && (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#mcgstatus\">mcgstatus</a> &amp; (<a class=\"id\" href=\"#MCG_STATUS_RIPV\">MCG_STATUS_RIPV</a>|<a class=\"id\" href=\"#MCG_STATUS_EIPV\">MCG_STATUS_EIPV</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#ip\">ip</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#cs\">cs</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rip_msr\">rip_msr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#mce_rdmsrl\">mce_rdmsrl</a>(<a class=\"id\" href=\"#rip_msr\">rip_msr</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called after interrupts have been reenabled again</span>", 
"<span class=\"comment\"> * when a MCE happened during an interrupts off region</span>", 
"<span class=\"comment\"> * in the kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#smp_mce_self_interrupt\">smp_mce_self_interrupt</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ack_APIC_irq\">ack_APIC_irq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_idle\">exit_idle</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_enter\">irq_enter</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_notify_irq\">mce_notify_irq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_schedule_work\">mce_schedule_work</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_exit\">irq_exit</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#mce_report_event\">mce_report_event</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#X86_VM_MASK\">X86_VM_MASK</a>|<a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_notify_irq\">mce_notify_irq</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Triggering the work queue here is just an insurance</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * policy in case the syscall exit notify handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * doesn't run soon enough or ends up running on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * wrong CPU (can happen when audit sleeps)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_schedule_work\">mce_schedule_work</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Without APIC do not notify. The event will be picked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up eventually.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When interrupts are disabled we cannot use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel services safely. Trigger an self interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * through the APIC to instead do the notification</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * after interrupts are reenabled again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_self\">send_IPI_self</a>(<a class=\"id\" href=\"#MCE_SELF_VECTOR\">MCE_SELF_VECTOR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for idle afterwards again so that we don't leave the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * APIC in a non idle state because the normal APIC writes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cannot exclude us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_wait_icr_idle\">apic_wait_icr_idle</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned, <a class=\"id\" href=\"#mce_poll_count\">mce_poll_count</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Poll for corrected events or events that happened before reset.</span>", 
"<span class=\"comment\"> * Those are just logged through /dev/mcelog.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is executed in standard interrupt context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: spec recommends to panic for fatal unsignalled</span>", 
"<span class=\"comment\"> * errors here. However this would be quite problematic --</span>", 
"<span class=\"comment\"> * we would need to reimplement the Monarch handling and</span>", 
"<span class=\"comment\"> * it would mess up the exclusion between exception handler</span>", 
"<span class=\"comment\"> * and poll hander -- * so we skip this for now.</span>", 
"<span class=\"comment\"> * These cases should not happen anyways, or only when the CPU</span>", 
"<span class=\"comment\"> * is already totally * confused. In this case it's likely it will</span>", 
"<span class=\"comment\"> * not fully execute the machine check handler either.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#machine_check_poll\">machine_check_poll</a>(enum <a class=\"id\" href=\"#mcp_flags\">mcp_flags</a> <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#mce_banks_t\">mce_banks_t</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mce\">mce</a> <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_inc\">percpu_inc</a>(<a class=\"id\" href=\"#mce_poll_count\">mce_poll_count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mce_setup\">mce_setup</a>(&amp;<a class=\"id\" href=\"#m\">m</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#mcgstatus\">mcgstatus</a> = <a class=\"id\" href=\"#mce_rdmsrl\">mce_rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCG_STATUS\">MSR_IA32_MCG_STATUS</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#banks\">banks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mce_banks\">mce_banks</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ctl\">ctl</a> || !<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, *<a class=\"id\" href=\"#b\">b</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#misc\">misc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#addr\">addr</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#bank\">bank</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#tsc\">tsc</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#mce_rdmsrl\">mce_rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_STATUS\">MSR_IA32_MCx_STATUS</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#MCI_STATUS_VAL\">MCI_STATUS_VAL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Uncorrected or signalled events are handled by the exception</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handler when it is enabled, so don't process those here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TBD do the same check for MCI_STATUS_EN here?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MCP_UC\">MCP_UC</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#status\">status</a> &amp; (<a class=\"id\" href=\"#mce_ser\">mce_ser</a> ? <a class=\"id\" href=\"#MCI_STATUS_S\">MCI_STATUS_S</a> : <a class=\"id\" href=\"#MCI_STATUS_UC\">MCI_STATUS_UC</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#MCI_STATUS_MISCV\">MCI_STATUS_MISCV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#misc\">misc</a> = <a class=\"id\" href=\"#mce_rdmsrl\">mce_rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_MISC\">MSR_IA32_MCx_MISC</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#MCI_STATUS_ADDRV\">MCI_STATUS_ADDRV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mce_rdmsrl\">mce_rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_ADDR\">MSR_IA32_MCx_ADDR</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MCP_TIMESTAMP\">MCP_TIMESTAMP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#tsc\">tsc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't get the IP here because it's unlikely to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * have anything to do with the actual error location.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MCP_DONTLOG\">MCP_DONTLOG</a>) && !<a class=\"id\" href=\"#mce_dont_log_ce\">mce_dont_log_ce</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_log\">mce_log</a>(&amp;<a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#x86_mce_decoder_chain\">x86_mce_decoder_chain</a>, 0, &amp;<a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_taint\">add_taint</a>(<a class=\"id\" href=\"#TAINT_MACHINE_CHECK\">TAINT_MACHINE_CHECK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Clear state for this bank.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_wrmsrl\">mce_wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_STATUS\">MSR_IA32_MCx_STATUS</a>(<a class=\"id\" href=\"#i\">i</a>), 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't clear MCG_STATUS here because it's only defined for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exceptions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_core\">sync_core</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#machine_check_poll\">machine_check_poll</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do a quick check if any of the events requires a panic.</span>", 
"<span class=\"comment\"> * This decides if we keep the events around or clear them.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mce_no_way_out\">mce_no_way_out</a>(struct <a class=\"id\" href=\"#mce\">mce</a> *<a class=\"id\" href=\"#m\">m</a>, char **<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#banks\">banks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#mce_rdmsrl\">mce_rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MCx_STATUS\">MSR_IA32_MCx_STATUS</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mce_severity\">mce_severity</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#tolerant\">tolerant</a>, <a class=\"id\" href=\"#msg\">msg</a>) >= <a class=\"id\" href=\"#MCE_PANIC_SEVERITY\">MCE_PANIC_SEVERITY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Variable to establish order between CPUs while scanning.</span>", 
"<span class=\"comment\"> * Each CPU spins initially until executing is equal its number.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#mce_executing\">mce_executing</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Defines order of CPUs on entry. First CPU becomes Monarch.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#mce_callin\">mce_callin</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check if a timeout waiting for other CPUs happened.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mce_timed_out\">mce_timed_out</a>(<a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The others already did panic for some reason.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Bail out like in a timeout.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rmb() to tell the compiler that system_state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might have been modified by someone else.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmb\">rmb</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mce_paniced\">mce_paniced</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_panic\">wait_for_panic</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#monarch_timeout\">monarch_timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#s64\">s64</a>)*<a class=\"id\" href=\"#t\">t</a> &lt; <a class=\"id\" href=\"#SPINUNIT\">SPINUNIT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CHECKME: Make panic default for 1 too? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tolerant\">tolerant</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_panic\">mce_panic</a>(\"Timeout synchronizing machine check over CPUs\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_missing\">cpu_missing</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#t\">t</a> -= <a class=\"id\" href=\"#SPINUNIT\">SPINUNIT</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The Monarch's reign.  The Monarch is the CPU who entered</span>", 
"<span class=\"comment\"> * the machine check handler first. It waits for the others to</span>", 
"<span class=\"comment\"> * raise the exception too and then grades them. When any</span>", 
"<span class=\"comment\"> * error is fatal panic. Only then let the others continue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The other CPUs entering the MCE handler will be controlled by the</span>", 
"<span class=\"comment\"> * Monarch. They are called Subjects.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This way we prevent any potential data corruption in a unrecoverable case</span>", 
"<span class=\"comment\"> * and also makes sure always all CPU's errors are examined.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also this detects the case of a machine check event coming from outer</span>", 
"<span class=\"comment\"> * space (not detected by any CPUs) In this case some external agent wants</span>", 
"<span class=\"comment\"> * us to shut down, so panic too.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The other CPUs might still decide to panic if the handler happens</span>", 
"<span class=\"comment\"> * in a unrecoverable place, but in this case the system is in a semi-stable</span>", 
"<span class=\"comment\"> * state and won't corrupt anything by itself. It's ok to let the others</span>", 
"<span class=\"comment\"> * continue for a bit first.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All the spin loops have timeouts; when a timeout happens a CPU</span>", 
"<span class=\"comment\"> * typically elects itself to be Monarch.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#mce_reign\">mce_reign</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mce\">mce</a> *<a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#global_worst\">global_worst</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#msg\">msg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#nmsg\">nmsg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This CPU is the Monarch and the other CPUs have run</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * through their handlers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Grade the severity of the errors of all the CPUs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#severity\">severity</a> = <a class=\"id\" href=\"#mce_severity\">mce_severity</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#mces_seen\">mces_seen</a>, <a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#tolerant\">tolerant</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#nmsg\">nmsg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#severity\">severity</a> &gt; <a class=\"id\" href=\"#global_worst\">global_worst</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = <a class=\"id\" href=\"#nmsg\">nmsg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_worst\">global_worst</a> = <a class=\"id\" href=\"#severity\">severity</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#mces_seen\">mces_seen</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cannot recover? Panic here then.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This dumps all the mces in the log buffer and stops the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * other CPUs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> && <a class=\"id\" href=\"#global_worst\">global_worst</a> >= <a class=\"id\" href=\"#MCE_PANIC_SEVERITY\">MCE_PANIC_SEVERITY</a> && <a class=\"id\" href=\"#tolerant\">tolerant</a> &lt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_panic\">mce_panic</a>(\"Fatal Machine check\", <a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#msg\">msg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For UC somewhere we let the CPU who detects it handle it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also must let continue the others, otherwise the handling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU could deadlock on a lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No machine check event found. Must be some external</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * source or one CPU is hung. Panic.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#global_worst\">global_worst</a> <= <a class=\"id\" href=\"#MCE_KEEP_SEVERITY\">MCE_KEEP_SEVERITY</a> && <a class=\"id\" href=\"#tolerant\">tolerant</a> &lt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mce_panic\">mce_panic</a>(\"Machine check from unknown source\", <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now clear all the mces_seen so that they don't reappear on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the next mce.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
];
xr_frag_insert('l/73/43fcff24708bc0e71f153580d8fa1aefba29b9.xr', __xr_tmp);
