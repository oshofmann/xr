var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/include/linux/inet_lro.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Large Receive Offload (ipv4 / tcp)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (C) Copyright IBM Corp. 2007</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Authors:</span>", 
"<span class=\"comment\"> *       Jan-Bernd Themann &lt;themann@de.ibm.com&gt;</span>", 
"<span class=\"comment\"> *       Christoph Raisch &lt;raisch@de.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2, or (at your option)</span>", 
"<span class=\"comment\"> * any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__INET_LRO_H_\">__INET_LRO_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__INET_LRO_H_\">__INET_LRO_H_</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#tcp\">tcp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * LRO statistics</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_lro_stats\">net_lro_stats</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#aggregated\">aggregated</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flushed\">flushed</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#no_desc\">no_desc</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * LRO descriptor for a tcp session</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#net_lro_desc\">net_lro_desc</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#last_skb\">last_skb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#skb_frag_struct\">skb_frag_struct</a> *<a class=\"id\" href=\"#next_frag\">next_frag</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#tcph\">tcph</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#vgrp\">vgrp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a>  <a class=\"id\" href=\"#data_csum\">data_csum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#tcp_rcv_tsecr\">tcp_rcv_tsecr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#tcp_rcv_tsval\">tcp_rcv_tsval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#tcp_ack\">tcp_ack</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tcp_next_seq\">tcp_next_seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#skb_tot_frags_len\">skb_tot_frags_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#ip_tot_len\">ip_tot_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tcp_saw_tstamp\">tcp_saw_tstamp</a>; <span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* timestamps enabled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#tcp_window\">tcp_window</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_tag\">vlan_tag</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pkt_aggr_cnt\">pkt_aggr_cnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* counts aggregated packets */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#vlan_packet\">vlan_packet</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mss\">mss</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#active\">active</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Large Receive Offload (LRO) Manager</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fields must be set by driver</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_lro_mgr\">net_lro_mgr</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_lro_stats\">net_lro_stats</a> <a class=\"id\" href=\"#stats\">stats</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* LRO features */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#features\">features</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LRO_F_NAPI\">LRO_F_NAPI</a>            1  <span class=\"comment\">/* Pass packets to stack via NAPI */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LRO_F_EXTRACT_VLAN_ID\">LRO_F_EXTRACT_VLAN_ID</a> 2  <span class=\"comment\">/* Set flag if VLAN IDs are extracted</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    from received packets and eth protocol</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    is still ETH_P_8021Q */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set for generated SKBs that are not added to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the frag list in fragmented mode</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ip_summed\">ip_summed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ip_summed_aggr\">ip_summed_aggr</a>; <span class=\"comment\">/* Set in aggregated SKBs: CHECKSUM_UNNECESSARY</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     * or CHECKSUM_NONE */</span>", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_desc\">max_desc</a>; <span class=\"comment\">/* Max number of LRO descriptors  */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_aggr\">max_aggr</a>; <span class=\"comment\">/* Max number of LRO packets to be aggregated */</span>", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#frag_align_pad\">frag_align_pad</a>; <span class=\"comment\">/* Padding required to properly align layer 3</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     * headers in generated skb when using frags */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_lro_desc\">net_lro_desc</a> *<a class=\"id\" href=\"#lro_arr\">lro_arr</a>; <span class=\"comment\">/* Array of LRO descriptors */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Optimized driver functions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get_skb_header: returns tcp and ip header for packet in SKB</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get_skb_header\">get_skb_header</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, void **<a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void **<a class=\"id\" href=\"#tcpudp_hdr\">tcpudp_hdr</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#hdr_flags\">hdr_flags</a>, void *<a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* hdr_flags: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LRO_IPV4\">LRO_IPV4</a> 1 <span class=\"comment\">/* ip_hdr is IPv4 header */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LRO_TCP\">LRO_TCP</a>  2 <span class=\"comment\">/* tcpudp_hdr is TCP header */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get_frag_header: returns mac, tcp and ip header for packet in SKB</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @hdr_flags: Indicate what kind of LRO has to be done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *             (IPv4/IPv6/TCP/UDP)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get_frag_header\">get_frag_header</a>)(struct <a class=\"id\" href=\"#skb_frag_struct\">skb_frag_struct</a> *<a class=\"id\" href=\"#frag\">frag</a>, void **<a class=\"id\" href=\"#mac_hdr\">mac_hdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void **<a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>, void **<a class=\"id\" href=\"#tcpudp_hdr\">tcpudp_hdr</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#hdr_flags\">hdr_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#priv\">priv</a>);", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Processes a SKB</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @lro_mgr: LRO manager to use</span>", 
"<span class=\"comment\"> * @skb: SKB to aggregate</span>", 
"<span class=\"comment\"> * @priv: Private data that may be used by driver functions</span>", 
"<span class=\"comment\"> *        (for example get_tcp_ip_hdr)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#lro_receive_skb\">lro_receive_skb</a>(struct <a class=\"id\" href=\"#net_lro_mgr\">net_lro_mgr</a> *<a class=\"id\" href=\"#lro_mgr\">lro_mgr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Processes a SKB with VLAN HW acceleration support</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#lro_vlan_hwaccel_receive_skb\">lro_vlan_hwaccel_receive_skb</a>(struct <a class=\"id\" href=\"#net_lro_mgr\">net_lro_mgr</a> *<a class=\"id\" href=\"#lro_mgr\">lro_mgr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#vgrp\">vgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_tag\">vlan_tag</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Processes a fragment list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This functions aggregate fragments and generate SKBs do pass</span>", 
"<span class=\"comment\"> * the packets to the stack.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @lro_mgr: LRO manager to use</span>", 
"<span class=\"comment\"> * @frags: Fragment to be processed. Must contain entire header in first</span>", 
"<span class=\"comment\"> *         element.</span>", 
"<span class=\"comment\"> * @len: Length of received data</span>", 
"<span class=\"comment\"> * @true_size: Actual size of memory the fragment is consuming</span>", 
"<span class=\"comment\"> * @priv: Private data that may be used by driver functions</span>", 
"<span class=\"comment\"> *        (for example get_tcp_ip_hdr)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#lro_receive_frags\">lro_receive_frags</a>(struct <a class=\"id\" href=\"#net_lro_mgr\">net_lro_mgr</a> *<a class=\"id\" href=\"#lro_mgr\">lro_mgr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#skb_frag_struct\">skb_frag_struct</a> *<a class=\"id\" href=\"#frags\">frags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#true_size\">true_size</a>, void *<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#sum\">sum</a>);", 
"", 
"void <a class=\"id\" href=\"#lro_vlan_hwaccel_receive_frags\">lro_vlan_hwaccel_receive_frags</a>(struct <a class=\"id\" href=\"#net_lro_mgr\">net_lro_mgr</a> *<a class=\"id\" href=\"#lro_mgr\">lro_mgr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#skb_frag_struct\">skb_frag_struct</a> *<a class=\"id\" href=\"#frags\">frags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#true_size\">true_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#vgrp\">vgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan_tag\">vlan_tag</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#sum\">sum</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Forward all aggregated SKBs held by lro_mgr to network stack</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#lro_flush_all\">lro_flush_all</a>(struct <a class=\"id\" href=\"#net_lro_mgr\">net_lro_mgr</a> *<a class=\"id\" href=\"#lro_mgr\">lro_mgr</a>);", 
"", 
"void <a class=\"id\" href=\"#lro_flush_pkt\">lro_flush_pkt</a>(struct <a class=\"id\" href=\"#net_lro_mgr\">net_lro_mgr</a> *<a class=\"id\" href=\"#lro_mgr\">lro_mgr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>, struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#tcph\">tcph</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/73/9c9b8567d0076451b58f1ed535abcea1bda6fc.xr', __xr_tmp);
