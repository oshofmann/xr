var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/char_dev.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdev_t\">kdev_t</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#major\">major</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobject\">kobject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobj_map\">kobj_map</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cdev\">cdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * capabilities for /dev/mem, /dev/kmem and similar directly mappable character</span>", 
"<span class=\"comment\"> * devices</span>", 
"<span class=\"comment\"> * - permits shared-mmap for read, write and/or exec</span>", 
"<span class=\"comment\"> * - does not permit private mmap in NOMMU mode (can't do COW)</span>", 
"<span class=\"comment\"> * - no readahead or I/O queue unplugging required</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> <a class=\"id\" href=\"#directly_mappable_cdev_bdi\">directly_mappable_cdev_bdi</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"char\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#capabilities\">capabilities</a><span class=\"ts\"/>= (", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* permit private copies of the data to be taken */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BDI_CAP_MAP_COPY\">BDI_CAP_MAP_COPY</a> |", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* permit direct mmap, for read, write or exec */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BDI_CAP_MAP_DIRECT\">BDI_CAP_MAP_DIRECT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BDI_CAP_READ_MAP\">BDI_CAP_READ_MAP</a> | <a class=\"id\" href=\"#BDI_CAP_WRITE_MAP\">BDI_CAP_WRITE_MAP</a> | <a class=\"id\" href=\"#BDI_CAP_EXEC_MAP\">BDI_CAP_EXEC_MAP</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no writeback happens */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BDI_CAP_NO_ACCT_AND_WRITEBACK\">BDI_CAP_NO_ACCT_AND_WRITEBACK</a>),", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#kobj_map\">kobj_map</a> *<a class=\"id\" href=\"#cdev_map\">cdev_map</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#chrdevs_lock\">chrdevs_lock</a>);", 
"", 
"static struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#major\">major</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#baseminor\">baseminor</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#minorct\">minorct</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[64];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#cdev\">cdev</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* will die */</span>", 
"} *<a class=\"id\" href=\"#chrdevs\">chrdevs</a>[<a class=\"id\" href=\"#CHRDEV_MAJOR_HASH_SIZE\">CHRDEV_MAJOR_HASH_SIZE</a>];", 
"", 
"<span class=\"comment\">/* index in the above */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#major_to_index\">major_to_index</a>(int <a class=\"id\" href=\"#major\">major</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#major\">major</a> % <a class=\"id\" href=\"#CHRDEV_MAJOR_HASH_SIZE\">CHRDEV_MAJOR_HASH_SIZE</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"", 
"void <a class=\"id\" href=\"#chrdev_show\">chrdev_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#off_t\">off_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a> *<a class=\"id\" href=\"#cd\">cd</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#CHRDEV_MAJOR_HASH_SIZE\">CHRDEV_MAJOR_HASH_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#chrdevs_lock\">chrdevs_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#cd\">cd</a> = <a class=\"id\" href=\"#chrdevs\">chrdevs</a>[<a class=\"id\" href=\"#offset\">offset</a>]; <a class=\"id\" href=\"#cd\">cd</a>; <a class=\"id\" href=\"#cd\">cd</a> = <a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#f\">f</a>, \"%3d %s\\n\", <a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#chrdevs_lock\">chrdevs_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Register a single major with a specified minor range.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If major == 0 this functions will dynamically allocate a major and return</span>", 
"<span class=\"comment\"> * its number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If major &gt; 0 this function will attempt to reserve the passed range of</span>", 
"<span class=\"comment\"> * minors and will return zero on success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a -ve errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a> *", 
"<a class=\"id\" href=\"#__register_chrdev_region\">__register_chrdev_region</a>(unsigned int <a class=\"id\" href=\"#major\">major</a>, unsigned int <a class=\"id\" href=\"#baseminor\">baseminor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#minorct\">minorct</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a> *<a class=\"id\" href=\"#cd\">cd</a>, **<a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cd\">cd</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#chrdevs_lock\">chrdevs_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* temporary */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#major\">major</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#chrdevs\">chrdevs</a>)-1; <a class=\"id\" href=\"#i\">i</a> &gt; 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chrdevs\">chrdevs</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#major\">major</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#major\">major</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#major\">major</a> = <a class=\"id\" href=\"#major\">major</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#baseminor\">baseminor</a> = <a class=\"id\" href=\"#baseminor\">baseminor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#minorct\">minorct</a> = <a class=\"id\" href=\"#minorct\">minorct</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#major_to_index\">major_to_index</a>(<a class=\"id\" href=\"#major\">major</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cp\">cp</a> = &amp;<a class=\"id\" href=\"#chrdevs\">chrdevs</a>[<a class=\"id\" href=\"#i\">i</a>]; *<a class=\"id\" href=\"#cp\">cp</a>; <a class=\"id\" href=\"#cp\">cp</a> = &amp;(*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#major\">major</a> &gt; <a class=\"id\" href=\"#major\">major</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#major\">major</a> == <a class=\"id\" href=\"#major\">major</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     (((*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#baseminor\">baseminor</a> >= <a class=\"id\" href=\"#baseminor\">baseminor</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>      ((*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#baseminor\">baseminor</a> + (*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#minorct\">minorct</a> &gt; <a class=\"id\" href=\"#baseminor\">baseminor</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for overlapping minor ranges.  */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#cp\">cp</a> && (*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#major\">major</a> == <a class=\"id\" href=\"#major\">major</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#old_min\">old_min</a> = (*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#baseminor\">baseminor</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#old_max\">old_max</a> = (*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#baseminor\">baseminor</a> + (*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#minorct\">minorct</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#new_min\">new_min</a> = <a class=\"id\" href=\"#baseminor\">baseminor</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#new_max\">new_max</a> = <a class=\"id\" href=\"#baseminor\">baseminor</a> + <a class=\"id\" href=\"#minorct\">minorct</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* New driver overlaps from the left.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_max\">new_max</a> >= <a class=\"id\" href=\"#old_min\">old_min</a> && <a class=\"id\" href=\"#new_max\">new_max</a> <= <a class=\"id\" href=\"#old_max\">old_max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* New driver overlaps from the right.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_min\">new_min</a> <= <a class=\"id\" href=\"#old_max\">old_max</a> && <a class=\"id\" href=\"#new_min\">new_min</a> >= <a class=\"id\" href=\"#old_min\">old_min</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#next\">next</a> = *<a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#cd\">cd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#chrdevs_lock\">chrdevs_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cd\">cd</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#chrdevs_lock\">chrdevs_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cd\">cd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a> *", 
"<a class=\"id\" href=\"#__unregister_chrdev_region\">__unregister_chrdev_region</a>(unsigned <a class=\"id\" href=\"#major\">major</a>, unsigned <a class=\"id\" href=\"#baseminor\">baseminor</a>, int <a class=\"id\" href=\"#minorct\">minorct</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a> *<a class=\"id\" href=\"#cd\">cd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, **<a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#major_to_index\">major_to_index</a>(<a class=\"id\" href=\"#major\">major</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#chrdevs_lock\">chrdevs_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cp\">cp</a> = &amp;<a class=\"id\" href=\"#chrdevs\">chrdevs</a>[<a class=\"id\" href=\"#i\">i</a>]; *<a class=\"id\" href=\"#cp\">cp</a>; <a class=\"id\" href=\"#cp\">cp</a> = &amp;(*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#major\">major</a> == <a class=\"id\" href=\"#major\">major</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#baseminor\">baseminor</a> == <a class=\"id\" href=\"#baseminor\">baseminor</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (*<a class=\"id\" href=\"#cp\">cp</a>)-><a class=\"id\" href=\"#minorct\">minorct</a> == <a class=\"id\" href=\"#minorct\">minorct</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#cp\">cp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a> = *<a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#chrdevs_lock\">chrdevs_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cd\">cd</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * register_chrdev_region() - register a range of device numbers</span>", 
"<span class=\"comment\"> * @from: the first in the desired range of device numbers; must include</span>", 
"<span class=\"comment\"> *        the major number.</span>", 
"<span class=\"comment\"> * @count: the number of consecutive device numbers required</span>", 
"<span class=\"comment\"> * @name: the name of the device or driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value is zero on success, a negative error code on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_chrdev_region\">register_chrdev_region</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#from\">from</a>, unsigned <a class=\"id\" href=\"#count\">count</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a> *<a class=\"id\" href=\"#cd\">cd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#from\">from</a>; <a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#to\">to</a>; <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#n\">n</a>)+1, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> &gt; <a class=\"id\" href=\"#to\">to</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a> = <a class=\"id\" href=\"#__register_chrdev_region\">__register_chrdev_region</a>(<a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#n\">n</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#next\">next</a> - <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#cd\">cd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#from\">from</a>; <a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#to\">to</a>; <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#n\">n</a>)+1, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#__unregister_chrdev_region\">__unregister_chrdev_region</a>(<a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#next\">next</a> - <a class=\"id\" href=\"#n\">n</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#cd\">cd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * alloc_chrdev_region() - register a range of char device numbers</span>", 
"<span class=\"comment\"> * @dev: output parameter for first assigned number</span>", 
"<span class=\"comment\"> * @baseminor: first of the requested range of minor numbers</span>", 
"<span class=\"comment\"> * @count: the number of minor numbers required</span>", 
"<span class=\"comment\"> * @name: the name of the associated device or driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocates a range of char device numbers.  The major number will be</span>", 
"<span class=\"comment\"> * chosen dynamically, and returned (along with the first minor number)</span>", 
"<span class=\"comment\"> * in @dev.  Returns zero or a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#alloc_chrdev_region\">alloc_chrdev_region</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned <a class=\"id\" href=\"#baseminor\">baseminor</a>, unsigned <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a> *<a class=\"id\" href=\"#cd\">cd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a> = <a class=\"id\" href=\"#__register_chrdev_region\">__register_chrdev_region</a>(0, <a class=\"id\" href=\"#baseminor\">baseminor</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#cd\">cd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#cd\">cd</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#baseminor\">baseminor</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __register_chrdev() - create and register a cdev occupying a range of minors</span>", 
"<span class=\"comment\"> * @major: major device number or 0 for dynamic allocation</span>", 
"<span class=\"comment\"> * @baseminor: first of the requested range of minor numbers</span>", 
"<span class=\"comment\"> * @count: the number of minor numbers required</span>", 
"<span class=\"comment\"> * @name: name of this range of devices</span>", 
"<span class=\"comment\"> * @fops: file operations associated with this devices</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @major == 0 this functions will dynamically allocate a major and return</span>", 
"<span class=\"comment\"> * its number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @major &gt; 0 this function will attempt to reserve a device with the given</span>", 
"<span class=\"comment\"> * major number and will return zero on success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a -ve errno on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The name of this device has nothing to do with the name of the device in</span>", 
"<span class=\"comment\"> * /dev. It only helps to keep track of the different owners of devices. If</span>", 
"<span class=\"comment\"> * your module name has only one type of devices it's ok to use e.g. the name</span>", 
"<span class=\"comment\"> * of the module here.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__register_chrdev\">__register_chrdev</a>(unsigned int <a class=\"id\" href=\"#major\">major</a>, unsigned int <a class=\"id\" href=\"#baseminor\">baseminor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#count\">count</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a> *<a class=\"id\" href=\"#cd\">cd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#cdev\">cdev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a> = <a class=\"id\" href=\"#__register_chrdev_region\">__register_chrdev_region</a>(<a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#baseminor\">baseminor</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#cd\">cd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#cd\">cd</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cdev\">cdev</a> = <a class=\"id\" href=\"#cdev_alloc\">cdev_alloc</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cdev\">cdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out2\">out2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cdev\">cdev</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#fops\">fops</a>-><a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cdev\">cdev</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#fops\">fops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_set_name\">kobject_set_name</a>(&amp;<a class=\"id\" href=\"#cdev\">cdev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, \"%s\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cdev_add\">cdev_add</a>(<a class=\"id\" href=\"#cdev\">cdev</a>, <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#baseminor\">baseminor</a>), <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#cdev\">cdev</a> = <a class=\"id\" href=\"#cdev\">cdev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#major\">major</a> ? 0 : <a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#major\">major</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#cdev\">cdev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<a class=\"id\" href=\"#out2\">out2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#__unregister_chrdev_region\">__unregister_chrdev_region</a>(<a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#baseminor\">baseminor</a>, <a class=\"id\" href=\"#count\">count</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unregister_chrdev_region() - return a range of device numbers</span>", 
"<span class=\"comment\"> * @from: the first in the range of numbers to unregister</span>", 
"<span class=\"comment\"> * @count: the number of device numbers to unregister</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will unregister a range of @count device numbers,</span>", 
"<span class=\"comment\"> * starting with @from.  The caller should normally be the one who</span>", 
"<span class=\"comment\"> * allocated those numbers in the first place...</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unregister_chrdev_region\">unregister_chrdev_region</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#from\">from</a>, unsigned <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#from\">from</a>; <a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#to\">to</a>; <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#n\">n</a>)+1, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> &gt; <a class=\"id\" href=\"#to\">to</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#__unregister_chrdev_region\">__unregister_chrdev_region</a>(<a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#next\">next</a> - <a class=\"id\" href=\"#n\">n</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __unregister_chrdev - unregister and destroy a cdev</span>", 
"<span class=\"comment\"> * @major: major device number</span>", 
"<span class=\"comment\"> * @baseminor: first of the range of minor numbers</span>", 
"<span class=\"comment\"> * @count: the number of minor numbers this cdev is occupying</span>", 
"<span class=\"comment\"> * @name: name of this range of devices</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unregister and destroy the cdev occupying the region described by</span>", 
"<span class=\"comment\"> * @major, @baseminor and @count.  This function undoes what</span>", 
"<span class=\"comment\"> * __register_chrdev() did.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__unregister_chrdev\">__unregister_chrdev</a>(unsigned int <a class=\"id\" href=\"#major\">major</a>, unsigned int <a class=\"id\" href=\"#baseminor\">baseminor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#count\">count</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#char_device_struct\">char_device_struct</a> *<a class=\"id\" href=\"#cd\">cd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a> = <a class=\"id\" href=\"#__unregister_chrdev_region\">__unregister_chrdev_region</a>(<a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#baseminor\">baseminor</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cd\">cd</a> && <a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#cdev\">cdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cdev_del\">cdev_del</a>(<a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#cdev\">cdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cd\">cd</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#cdev_lock\">cdev_lock</a>);", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#cdev_get\">cdev_get</a>(struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#owner\">owner</a> && !<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kobj\">kobj</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#cdev_put\">cdev_put</a>(struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called every time a character special file is opened</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#chrdev_open\">chrdev_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cdev_lock\">cdev_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_cdev\">i_cdev</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cdev_lock\">cdev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kobj_lookup\">kobj_lookup</a>(<a class=\"id\" href=\"#cdev_map\">cdev_map</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a>, &amp;<a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#cdev\">cdev</a>, <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cdev_lock\">cdev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check i_cdev again in case somebody beat us to it while</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   we dropped the lock. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_cdev\">i_cdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_cdev\">i_cdev</a> = <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_devices\">i_devices</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#cdev_get\">cdev_get</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#cdev_get\">cdev_get</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cdev_lock\">cdev_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cdev_put\">cdev_put</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> = <a class=\"id\" href=\"#fops_get\">fops_get</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ops\">ops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_cdev_put\">out_cdev_put</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#open\">open</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#open\">open</a>(<a class=\"id\" href=\"#inode\">inode</a>,<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_cdev_put\">out_cdev_put</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#out_cdev_put\">out_cdev_put</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cdev_put\">cdev_put</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#cdev_index\">cdev_index</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kobj_lookup\">kobj_lookup</a>(<a class=\"id\" href=\"#cdev_map\">cdev_map</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a>, &amp;<a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#idx\">idx</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#cd_forget\">cd_forget</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cdev_lock\">cdev_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_devices\">i_devices</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_cdev\">i_cdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cdev_lock\">cdev_lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cdev_purge\">cdev_purge</a>(struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#cdev\">cdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cdev_lock\">cdev_lock</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cdev\">cdev</a>-><a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#cdev\">cdev</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_devices\">i_devices</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_devices\">i_devices</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_cdev\">i_cdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cdev_lock\">cdev_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dummy default file-operations: the only thing this does</span>", 
"<span class=\"comment\"> * is contain the open that then fills in the correct operations</span>", 
"<span class=\"comment\"> * depending on the special file...</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#def_chr_fops\">def_chr_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#chrdev_open\">chrdev_open</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#exact_match\">exact_match</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, int *<a class=\"id\" href=\"#part\">part</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#exact_lock\">exact_lock</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cdev_get\">cdev_get</a>(<a class=\"id\" href=\"#p\">p</a>) ? 0 : -1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cdev_add() - add a char device to the system</span>", 
"<span class=\"comment\"> * @p: the cdev structure for the device</span>", 
"<span class=\"comment\"> * @dev: the first device number for which this device is responsible</span>", 
"<span class=\"comment\"> * @count: the number of consecutive minor numbers corresponding to this</span>", 
"<span class=\"comment\"> *         device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cdev_add() adds the device represented by @p to the system, making it</span>", 
"<span class=\"comment\"> * live immediately.  A negative error code is returned on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cdev_add\">cdev_add</a>(struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, unsigned <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kobj_map\">kobj_map</a>(<a class=\"id\" href=\"#cdev_map\">cdev_map</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#exact_match\">exact_match</a>, <a class=\"id\" href=\"#exact_lock\">exact_lock</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cdev_unmap\">cdev_unmap</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, unsigned <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj_unmap\">kobj_unmap</a>(<a class=\"id\" href=\"#cdev_map\">cdev_map</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cdev_del() - remove a cdev from the system</span>", 
"<span class=\"comment\"> * @p: the cdev structure to be removed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cdev_del() removes @p from the system, possibly freeing the structure</span>", 
"<span class=\"comment\"> * itself.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cdev_del\">cdev_del</a>(struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cdev_unmap\">cdev_unmap</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#cdev_default_release\">cdev_default_release</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#cdev\">cdev</a>, <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cdev_purge\">cdev_purge</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cdev_dynamic_release\">cdev_dynamic_release</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#cdev\">cdev</a>, <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cdev_purge\">cdev_purge</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> <a class=\"id\" href=\"#ktype_cdev_default\">ktype_cdev_default</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#cdev_default_release\">cdev_default_release</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> <a class=\"id\" href=\"#ktype_cdev_dynamic\">ktype_cdev_dynamic</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#cdev_dynamic_release\">cdev_dynamic_release</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cdev_alloc() - allocate a cdev structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocates and returns a cdev structure, or NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#cdev_alloc\">cdev_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#cdev\">cdev</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_init\">kobject_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#ktype_cdev_dynamic\">ktype_cdev_dynamic</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cdev_init() - initialize a cdev structure</span>", 
"<span class=\"comment\"> * @cdev: the structure to initialize</span>", 
"<span class=\"comment\"> * @fops: the file_operations for this device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initializes @cdev, remembering @fops, making it ready to add to the</span>", 
"<span class=\"comment\"> * system with cdev_add().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cdev_init\">cdev_init</a>(struct <a class=\"id\" href=\"#cdev\">cdev</a> *<a class=\"id\" href=\"#cdev\">cdev</a>, const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#cdev\">cdev</a>, 0, sizeof *<a class=\"id\" href=\"#cdev\">cdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cdev\">cdev</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_init\">kobject_init</a>(&amp;<a class=\"id\" href=\"#cdev\">cdev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#ktype_cdev_default\">ktype_cdev_default</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cdev\">cdev</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#fops\">fops</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#base_probe\">base_probe</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, int *<a class=\"id\" href=\"#part\">part</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request_module\">request_module</a>(\"char-major-%d-%d\", <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#dev\">dev</a>)) &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make old-style 2.4 aliases work */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"char-major-%d\", <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#chrdev_init\">chrdev_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cdev_map\">cdev_map</a> = <a class=\"id\" href=\"#kobj_map_init\">kobj_map_init</a>(<a class=\"id\" href=\"#base_probe\">base_probe</a>, &amp;<a class=\"id\" href=\"#chrdevs_lock\">chrdevs_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_init\">bdi_init</a>(&amp;<a class=\"id\" href=\"#directly_mappable_cdev_bdi\">directly_mappable_cdev_bdi</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Let modules do char dev stuff */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_chrdev_region\">register_chrdev_region</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_chrdev_region\">unregister_chrdev_region</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_chrdev_region\">alloc_chrdev_region</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cdev_init\">cdev_init</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cdev_alloc\">cdev_alloc</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cdev_del\">cdev_del</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cdev_add\">cdev_add</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cdev_index\">cdev_index</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__register_chrdev\">__register_chrdev</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__unregister_chrdev\">__unregister_chrdev</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#directly_mappable_cdev_bdi\">directly_mappable_cdev_bdi</a>);", 
];
xr_frag_insert('l/73/9e4aa9f79c0d7c7d7a30854d23514ea07b0c8e.xr', __xr_tmp);
