var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_ALTERNATIVE_H\">_ASM_X86_ALTERNATIVE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_ALTERNATIVE_H\">_ASM_X86_ALTERNATIVE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stringify\">stringify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#asm\">asm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Alternative inline assembly for SMP.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The LOCK_PREFIX macro defined here replaces the LOCK and</span>", 
"<span class=\"comment\"> * LOCK_PREFIX macros used everywhere in the source tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SMP alternatives use the same data structures as the other</span>", 
"<span class=\"comment\"> * alternatives and the X86_FEATURE_UP flag to indicate the case of a</span>", 
"<span class=\"comment\"> * UP system running a SMP kernel.  The existing apply_alternatives()</span>", 
"<span class=\"comment\"> * works fine for patching a SMP kernel for UP.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The SMP alternative tables can be kept after boot and contain both</span>", 
"<span class=\"comment\"> * UP and SMP versions of the instructions to allow switching back to</span>", 
"<span class=\"comment\"> * SMP at runtime, when hotplugging in a new CPU, which is especially</span>", 
"<span class=\"comment\"> * useful in virtualized environments.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The very common lock prefix is handled as special case in a</span>", 
"<span class=\"comment\"> * separate table which is a pure address list without replacement ptr</span>", 
"<span class=\"comment\"> * and size information.  That keeps the table sizes small.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_PREFIX_HERE\">LOCK_PREFIX_HERE</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>\".section .smp_locks,\\\"a\\\"\\n\"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>\".balign 4\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>\".long 671f - .\\n\" <span class=\"comment\">/* offset */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>\".previous\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>\"671:\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> <a class=\"id\" href=\"#LOCK_PREFIX_HERE\">LOCK_PREFIX_HERE</a> \"\\n\\tlock; \"", 
"", 
"#else <span class=\"comment\">/* ! CONFIG_SMP */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_PREFIX_HERE\">LOCK_PREFIX_HERE</a> \"\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#alt_instr\">alt_instr</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#instr\">instr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* original instruction */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#replacement\">replacement</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cpuid\">cpuid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cpuid bit set for replacement */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#instrlen\">instrlen</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* length of original instruction */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#replacementlen\">replacementlen</a>;<span class=\"ts\"/><span class=\"comment\">/* length of new instruction, &lt;= instrlen */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pad2\">pad2</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"extern void <a class=\"id\" href=\"#alternative_instructions\">alternative_instructions</a>(void);", 
"extern void <a class=\"id\" href=\"#apply_alternatives\">apply_alternatives</a>(struct <a class=\"id\" href=\"#alt_instr\">alt_instr</a> *<a class=\"id\" href=\"#start\">start</a>, struct <a class=\"id\" href=\"#alt_instr\">alt_instr</a> *<a class=\"id\" href=\"#end\">end</a>);", 
"", 
"struct <a class=\"id\" href=\"#module\">module</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"extern void <a class=\"id\" href=\"#alternatives_smp_module_add\">alternatives_smp_module_add</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#locks\">locks</a>, void *<a class=\"id\" href=\"#locks_end\">locks_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#text\">text</a>, void *<a class=\"id\" href=\"#text_end\">text_end</a>);", 
"extern void <a class=\"id\" href=\"#alternatives_smp_module_del\">alternatives_smp_module_del</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>);", 
"extern void <a class=\"id\" href=\"#alternatives_smp_switch\">alternatives_smp_switch</a>(int <a class=\"id\" href=\"#smp\">smp</a>);", 
"extern int <a class=\"id\" href=\"#alternatives_text_reserved\">alternatives_text_reserved</a>(void *<a class=\"id\" href=\"#start\">start</a>, void *<a class=\"id\" href=\"#end\">end</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#alternatives_smp_module_add\">alternatives_smp_module_add</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#locks\">locks</a>, void *<a class=\"id\" href=\"#locks_end\">locks_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#text\">text</a>, void *<a class=\"id\" href=\"#text_end\">text_end</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#alternatives_smp_module_del\">alternatives_smp_module_del</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#alternatives_smp_switch\">alternatives_smp_switch</a>(int <a class=\"id\" href=\"#smp\">smp</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#alternatives_text_reserved\">alternatives_text_reserved</a>(void *<a class=\"id\" href=\"#start\">start</a>, void *<a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"<span class=\"comment\">/* alternative assembly primitive: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALTERNATIVE\">ALTERNATIVE</a>(<a class=\"id\" href=\"#oldinstr\">oldinstr</a>, <a class=\"id\" href=\"#newinstr\">newinstr</a>, <a class=\"id\" href=\"#feature\">feature</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"      \"661:\\n\\t\" <a class=\"id\" href=\"#oldinstr\">oldinstr</a> \"\\n662:\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"      \".section .altinstructions,\\\"a\\\"\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"      <a class=\"id\" href=\"#_ASM_ALIGN\">_ASM_ALIGN</a> \"\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"      <a class=\"id\" href=\"#_ASM_PTR\">_ASM_PTR</a> \"661b\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* label           */</span><span class=\"ts\"/>\\", 
"      <a class=\"id\" href=\"#_ASM_PTR\">_ASM_PTR</a> \"663f\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* new instruction */</span><span class=\"ts\"/>\\", 
"      \"  .word \" <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#feature\">feature</a>) \"\\n\"<span class=\"ts\"/><span class=\"comment\">/* feature bit     */</span><span class=\"ts\"/>\\", 
"      \"  .byte 662b-661b\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* sourcelen       */</span><span class=\"ts\"/>\\", 
"      \"  .byte 664f-663f\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* replacementlen  */</span><span class=\"ts\"/>\\", 
"      \".previous\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"      \".section .discard,\\\"aw\\\",@progbits\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"      \"  .byte 0xff + (664f-663f) - (662b-661b)\\n\" <span class=\"comment\">/* rlen &lt;= slen */</span><span class=\"ts\"/>\\", 
"      \".previous\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"      \".section .altinstr_replacement, \\\"ax\\\"\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"      \"663:\\n\\t\" <a class=\"id\" href=\"#newinstr\">newinstr</a> \"\\n664:\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* replacement     */</span><span class=\"ts\"/>\\", 
"      \".previous\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This must be included *after* the definition of ALTERNATIVE due to</span>", 
"<span class=\"comment\"> * &lt;asm/arch_hweight.h&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cpufeature\">cpufeature</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Alternative instructions for different CPU types or capabilities.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This allows to use optimized instructions even on generic binary</span>", 
"<span class=\"comment\"> * kernels.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * length of oldinstr must be longer or equal the length of newinstr</span>", 
"<span class=\"comment\"> * It can be padded with nops as needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For non barrier like inlines please define new variants</span>", 
"<span class=\"comment\"> * without volatile and memory clobber.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alternative\">alternative</a>(<a class=\"id\" href=\"#oldinstr\">oldinstr</a>, <a class=\"id\" href=\"#newinstr\">newinstr</a>, <a class=\"id\" href=\"#feature\">feature</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (<a class=\"id\" href=\"#ALTERNATIVE\">ALTERNATIVE</a>(<a class=\"id\" href=\"#oldinstr\">oldinstr</a>, <a class=\"id\" href=\"#newinstr\">newinstr</a>, <a class=\"id\" href=\"#feature\">feature</a>) : : : \"memory\")", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Alternative inline assembly with input.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pecularities:</span>", 
"<span class=\"comment\"> * No memory clobber here.</span>", 
"<span class=\"comment\"> * Argument numbers start with 1.</span>", 
"<span class=\"comment\"> * Best is to use constraints that are fixed size (like (%1) ... \"r\")</span>", 
"<span class=\"comment\"> * If you use variable sized constraints like \"m\" or \"g\" in the</span>", 
"<span class=\"comment\"> * replacement make sure to pad to the worst case length.</span>", 
"<span class=\"comment\"> * Leaving an unused argument 0 to keep API compatibility.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alternative_input\">alternative_input</a>(<a class=\"id\" href=\"#oldinstr\">oldinstr</a>, <a class=\"id\" href=\"#newinstr\">newinstr</a>, <a class=\"id\" href=\"#feature\">feature</a>, <a class=\"id\" href=\"#input\">input</a>...)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (<a class=\"id\" href=\"#ALTERNATIVE\">ALTERNATIVE</a>(<a class=\"id\" href=\"#oldinstr\">oldinstr</a>, <a class=\"id\" href=\"#newinstr\">newinstr</a>, <a class=\"id\" href=\"#feature\">feature</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>: : \"i\" (0), ## <a class=\"id\" href=\"#input\">input</a>)", 
"", 
"<span class=\"comment\">/* Like alternative_input, but with a single output argument */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alternative_io\">alternative_io</a>(<a class=\"id\" href=\"#oldinstr\">oldinstr</a>, <a class=\"id\" href=\"#newinstr\">newinstr</a>, <a class=\"id\" href=\"#feature\">feature</a>, <a class=\"id\" href=\"#output\">output</a>, <a class=\"id\" href=\"#input\">input</a>...)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (<a class=\"id\" href=\"#ALTERNATIVE\">ALTERNATIVE</a>(<a class=\"id\" href=\"#oldinstr\">oldinstr</a>, <a class=\"id\" href=\"#newinstr\">newinstr</a>, <a class=\"id\" href=\"#feature\">feature</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>: <a class=\"id\" href=\"#output\">output</a> : \"i\" (0), ## <a class=\"id\" href=\"#input\">input</a>)", 
"", 
"<span class=\"comment\">/* Like alternative_io, but for replacing a direct call with another one. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alternative_call\">alternative_call</a>(<a class=\"id\" href=\"#oldfunc\">oldfunc</a>, <a class=\"id\" href=\"#newfunc\">newfunc</a>, <a class=\"id\" href=\"#feature\">feature</a>, <a class=\"id\" href=\"#output\">output</a>, <a class=\"id\" href=\"#input\">input</a>...)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (<a class=\"id\" href=\"#ALTERNATIVE\">ALTERNATIVE</a>(\"call %P[old]\", \"call %P[new]\", <a class=\"id\" href=\"#feature\">feature</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>: <a class=\"id\" href=\"#output\">output</a> : [<a class=\"id\" href=\"#old\">old</a>] \"i\" (<a class=\"id\" href=\"#oldfunc\">oldfunc</a>), [<a class=\"id\" href=\"#new\">new</a>] \"i\" (<a class=\"id\" href=\"#newfunc\">newfunc</a>), ## <a class=\"id\" href=\"#input\">input</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * use this macro(s) if you need more than one output parameter</span>", 
"<span class=\"comment\"> * in alternative_io</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ASM_OUTPUT2\">ASM_OUTPUT2</a>(<a class=\"id\" href=\"#a\">a</a>...) <a class=\"id\" href=\"#a\">a</a>", 
"", 
"struct <a class=\"id\" href=\"#paravirt_patch_site\">paravirt_patch_site</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PARAVIRT\">CONFIG_PARAVIRT</a>", 
"void <a class=\"id\" href=\"#apply_paravirt\">apply_paravirt</a>(struct <a class=\"id\" href=\"#paravirt_patch_site\">paravirt_patch_site</a> *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#paravirt_patch_site\">paravirt_patch_site</a> *<a class=\"id\" href=\"#end\">end</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#apply_paravirt\">apply_paravirt</a>(struct <a class=\"id\" href=\"#paravirt_patch_site\">paravirt_patch_site</a> *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#paravirt_patch_site\">paravirt_patch_site</a> *<a class=\"id\" href=\"#end\">end</a>)", 
"{}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__parainstructions\">__parainstructions</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__parainstructions_end\">__parainstructions_end</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clear and restore the kernel write-protection flag on the local CPU.</span>", 
"<span class=\"comment\"> * Allows the kernel to edit read-only pages.</span>", 
"<span class=\"comment\"> * Side-effect: any interrupt handler running between save and restore will have</span>", 
"<span class=\"comment\"> * the ability to write to read-only pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Warning:</span>", 
"<span class=\"comment\"> * Code patching in the UP case is safe if NMIs and MCE handlers are stopped and</span>", 
"<span class=\"comment\"> * no thread can be preempted in the instructions being modified (no iret to an</span>", 
"<span class=\"comment\"> * invalid instruction possible) or if the instructions are changed from a</span>", 
"<span class=\"comment\"> * consistent state to another consistent state atomically.</span>", 
"<span class=\"comment\"> * More care must be taken when modifying code in the SMP case because of</span>", 
"<span class=\"comment\"> * Intel's errata. text_poke_smp() takes care that errata, but still</span>", 
"<span class=\"comment\"> * doesn't support NMI/MCE handler code modifying.</span>", 
"<span class=\"comment\"> * On the local CPU you need to be protected again NMI or MCE handlers seeing an</span>", 
"<span class=\"comment\"> * inconsistent instruction while you patch.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void *<a class=\"id\" href=\"#text_poke\">text_poke</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, const void *<a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"extern void *<a class=\"id\" href=\"#text_poke_smp\">text_poke_smp</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, const void *<a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_ALTERNATIVE_H */</span>", 
];
xr_frag_insert('l/73/c06810204f5bd1972d59e924869ab53ed75fdf.xr', __xr_tmp);
