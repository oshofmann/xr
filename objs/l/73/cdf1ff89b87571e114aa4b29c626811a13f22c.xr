var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KPARAM_ISBOOL\">KPARAM_ISBOOL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#bool\">bool</a> *)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>*(int *)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_set_bool\">param_set_bool</a>);", 
"", 
"int <a class=\"id\" href=\"#param_get_bool\">param_get_bool</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KPARAM_ISBOOL\">KPARAM_ISBOOL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = *(<a class=\"id\" href=\"#bool\">bool</a> *)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = *(int *)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Y and N chosen as being relatively non-coder friendly */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, \"%c\", <a class=\"id\" href=\"#val\">val</a> ? 'Y' : 'N');", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_get_bool\">param_get_bool</a>);", 
"", 
"struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_bool\">param_ops_bool</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#param_set_bool\">param_set_bool</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#param_get_bool\">param_get_bool</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_ops_bool\">param_ops_bool</a>);", 
"", 
"<span class=\"comment\">/* This one must be bool. */</span>", 
"int <a class=\"id\" href=\"#param_set_invbool\">param_set_invbool</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#boolval\">boolval</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> <a class=\"id\" href=\"#dummy\">dummy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dummy\">dummy</a>.<a class=\"id\" href=\"#arg\">arg</a> = &amp;<a class=\"id\" href=\"#boolval\">boolval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dummy\">dummy</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#KPARAM_ISBOOL\">KPARAM_ISBOOL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#param_set_bool\">param_set_bool</a>(<a class=\"id\" href=\"#val\">val</a>, &amp;<a class=\"id\" href=\"#dummy\">dummy</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#bool\">bool</a> *)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a> = !<a class=\"id\" href=\"#boolval\">boolval</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_set_invbool\">param_set_invbool</a>);", 
"", 
"int <a class=\"id\" href=\"#param_get_invbool\">param_get_invbool</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, \"%c\", (*(<a class=\"id\" href=\"#bool\">bool</a> *)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a>) ? 'N' : 'Y');", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_get_invbool\">param_get_invbool</a>);", 
"", 
"struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_invbool\">param_ops_invbool</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#param_set_invbool\">param_set_invbool</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#param_get_invbool\">param_get_invbool</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_ops_invbool\">param_ops_invbool</a>);", 
"", 
"<span class=\"comment\">/* We break the rule and mangle the string. */</span>", 
"static int <a class=\"id\" href=\"#param_array\">param_array</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#val\">val</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#min\">min</a>, unsigned int <a class=\"id\" href=\"#max\">max</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#elem\">elem</a>, int <a class=\"id\" href=\"#elemsize\">elemsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       int (*<a class=\"id\" href=\"#set\">set</a>)(const char *, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned int *<a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> <a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#save\">save</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the name right for errors. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#elem\">elem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#num\">num</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* We expect a comma-separated list of values. */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#num\">num</a> == <a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: can only take %i arguments\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#max\">max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strcspn\">strcspn</a>(<a class=\"id\" href=\"#val\">val</a>, \",\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nul-terminate and parse */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save\">save</a> = <a class=\"id\" href=\"#val\">val</a>[<a class=\"id\" href=\"#len\">len</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>((char *)<a class=\"id\" href=\"#val\">val</a>)[<a class=\"id\" href=\"#len\">len</a>] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#param_lock\">param_lock</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#set\">set</a>(<a class=\"id\" href=\"#val\">val</a>, &amp;<a class=\"id\" href=\"#kp\">kp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#arg\">arg</a> += <a class=\"id\" href=\"#elemsize\">elemsize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> += <a class=\"id\" href=\"#len\">len</a>+1;", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#num\">num</a>)++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#save\">save</a> == ',');", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#num\">num</a> &lt; <a class=\"id\" href=\"#min\">min</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: needs at least %i arguments\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#min\">min</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#param_array_set\">param_array_set</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kparam_array\">kparam_array</a> *<a class=\"id\" href=\"#arr\">arr</a> = <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arr\">arr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#temp_num\">temp_num</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#param_array\">param_array</a>(<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#val\">val</a>, 1, <a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#elem\">elem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#elemsize\">elemsize</a>, <a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set\">set</a>, <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#num\">num</a> ?: &amp;<a class=\"id\" href=\"#temp_num\">temp_num</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#param_array_get\">param_array_get</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kparam_array\">kparam_array</a> *<a class=\"id\" href=\"#arr\">arr</a> = <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arr\">arr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = *<a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#off\">off</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; (<a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#num\">num</a> ? *<a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#num\">num</a> : <a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#max\">max</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#off\">off</a>++] = ',';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>.<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#elem\">elem</a> + <a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#elemsize\">elemsize</a> * <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#param_lock\">param_lock</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#off\">off</a>, &amp;<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#off\">off</a>] = '\\0';", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#off\">off</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#param_array_free\">param_array_free</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kparam_array\">kparam_array</a> *<a class=\"id\" href=\"#arr\">arr</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#free\">free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; (<a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#num\">num</a> ? *<a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#num\">num</a> : <a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#max\">max</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#elem\">elem</a> + <a class=\"id\" href=\"#arr\">arr</a>-><a class=\"id\" href=\"#elemsize\">elemsize</a> * <a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_array_ops\">param_array_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#param_array_set\">param_array_set</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#param_array_get\">param_array_get</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#param_array_free\">param_array_free</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_array_ops\">param_array_ops</a>);", 
"", 
"int <a class=\"id\" href=\"#param_set_copystring\">param_set_copystring</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kparam_string\">kparam_string</a> *<a class=\"id\" href=\"#kps\">kps</a> = <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#str\">str</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#val\">val</a>)+1 &gt; <a class=\"id\" href=\"#kps\">kps</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: string doesn't fit in %u chars.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#kps\">kps</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a>-1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#kps\">kps</a>-><a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_set_copystring\">param_set_copystring</a>);", 
"", 
"int <a class=\"id\" href=\"#param_get_string\">param_get_string</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kparam_string\">kparam_string</a> *<a class=\"id\" href=\"#kps\">kps</a> = <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#kps\">kps</a>-><a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#kps\">kps</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_get_string\">param_get_string</a>);", 
"", 
"struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_string\">param_ops_string</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#param_set_copystring\">param_set_copystring</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#param_get_string\">param_get_string</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_ops_string\">param_ops_string</a>);", 
"", 
"<span class=\"comment\">/* sysfs output in /sys/modules/XYZ/parameters/ */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_module_attr\">to_module_attr</a>(<a class=\"id\" href=\"#n\">n</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a>, <a class=\"id\" href=\"#attr\">attr</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_module_kobject\">to_module_kobject</a>(<a class=\"id\" href=\"#n\">n</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#module_kobject\">module_kobject</a>, <a class=\"id\" href=\"#kobj\">kobj</a>)", 
"", 
"extern struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> <a class=\"id\" href=\"#__start___param\">__start___param</a>[], <a class=\"id\" href=\"#__stop___param\">__stop___param</a>[];", 
"", 
"struct <a class=\"id\" href=\"#param_attribute\">param_attribute</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> <a class=\"id\" href=\"#mattr\">mattr</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#param\">param</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#module_param_attrs\">module_param_attrs</a>", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#param_attribute\">param_attribute</a> <a class=\"id\" href=\"#attrs\">attrs</a>[0];", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_param_attr\">to_param_attr</a>(<a class=\"id\" href=\"#n\">n</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#param_attribute\">param_attribute</a>, <a class=\"id\" href=\"#mattr\">mattr</a>)", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#param_attr_show\">param_attr_show</a>(struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#mattr\">mattr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#param_attribute\">param_attribute</a> *<a class=\"id\" href=\"#attribute\">attribute</a> = <a class=\"id\" href=\"#to_param_attr\">to_param_attr</a>(<a class=\"id\" href=\"#mattr\">mattr</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attribute\">attribute</a>-><a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get\">get</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#param_lock\">param_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#attribute\">attribute</a>-><a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#attribute\">attribute</a>-><a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#param_lock\">param_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/* sysfs always hands a nul-terminated string in buf.  We rely on that. */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#param_attr_store\">param_attr_store</a>(struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#mattr\">mattr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
" <span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#param_attribute\">param_attribute</a> *<a class=\"id\" href=\"#attribute\">attribute</a> = <a class=\"id\" href=\"#to_param_attr\">to_param_attr</a>(<a class=\"id\" href=\"#mattr\">mattr</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attribute\">attribute</a>-><a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set\">set</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#param_lock\">param_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#attribute\">attribute</a>-><a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set\">set</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#attribute\">attribute</a>-><a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#param_lock\">param_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__modinit\">__modinit</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__modinit\">__modinit</a> <a class=\"id\" href=\"#__init\">__init</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>", 
"void <a class=\"id\" href=\"#__kernel_param_lock\">__kernel_param_lock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#param_lock\">param_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__kernel_param_lock\">__kernel_param_lock</a>);", 
"", 
"void <a class=\"id\" href=\"#__kernel_param_unlock\">__kernel_param_unlock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#param_lock\">param_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__kernel_param_unlock\">__kernel_param_unlock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * add_sysfs_param - add a parameter to sysfs</span>", 
"<span class=\"comment\"> * @mk: struct module_kobject</span>", 
"<span class=\"comment\"> * @kparam: the actual parameter definition to add to sysfs</span>", 
"<span class=\"comment\"> * @name: name of parameter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Create a kobject if for a (per-module) parameter if mp NULL, and</span>", 
"<span class=\"comment\"> * create file in sysfs.  Returns an error on out of memory.  Always cleans up</span>", 
"<span class=\"comment\"> * if there's an error.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__modinit\">__modinit</a> int <a class=\"id\" href=\"#add_sysfs_param\">add_sysfs_param</a>(struct <a class=\"id\" href=\"#module_kobject\">module_kobject</a> *<a class=\"id\" href=\"#mk\">mk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_param_attrs\">module_param_attrs</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute\">attribute</a> **<a class=\"id\" href=\"#attrs\">attrs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#num\">num</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't bother calling this with invisible parameters. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#perm\">perm</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attrs\">attrs</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a>-><a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attrs\">attrs</a> = <a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#attrs\">attrs</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Enlarge. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#krealloc\">krealloc</a>(<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       sizeof(*<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a>) + sizeof(<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[0]) * (<a class=\"id\" href=\"#num\">num</a>+1),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attrs\">attrs</a> = <a class=\"id\" href=\"#krealloc\">krealloc</a>(<a class=\"id\" href=\"#attrs\">attrs</a>, sizeof(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#attrs\">attrs</a>[0])*(<a class=\"id\" href=\"#num\">num</a>+2), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attrs\">attrs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_free_new\">fail_free_new</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Sysfs wants everything zeroed. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#new\">new</a>, 0, sizeof(*<a class=\"id\" href=\"#new\">new</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>], 0, sizeof(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>]));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>], 0, sizeof(<a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>]));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#name\">name</a> = \"parameters\";", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#attrs\">attrs</a> = <a class=\"id\" href=\"#attrs\">attrs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tack new one on the end. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_attr_init\">sysfs_attr_init</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#param\">param</a> = <a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#param_attr_show\">param_attr_show</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#store\">store</a> = <a class=\"id\" href=\"#param_attr_store\">param_attr_store</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#name\">name</a> = (char *)<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#num\">num</a>+1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fix up all the pointers, since krealloc can move us */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#num\">num</a> = 0; <a class=\"id\" href=\"#num\">num</a> &lt; <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#num\">num</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>] = &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#mattr\">mattr</a>.<a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#attrs\">attrs</a>[<a class=\"id\" href=\"#num\">num</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fail_free_new\">fail_free_new</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"static void <a class=\"id\" href=\"#free_module_param_attrs\">free_module_param_attrs</a>(struct <a class=\"id\" href=\"#module_kobject\">module_kobject</a> *<a class=\"id\" href=\"#mk\">mk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a>-><a class=\"id\" href=\"#grp\">grp</a>.<a class=\"id\" href=\"#attrs\">attrs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * module_param_sysfs_setup - setup sysfs support for one module</span>", 
"<span class=\"comment\"> * @mod: module</span>", 
"<span class=\"comment\"> * @kparam: module parameters (array)</span>", 
"<span class=\"comment\"> * @num_params: number of module parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Adds sysfs entries for module parameters under</span>", 
"<span class=\"comment\"> * /sys/module/[mod-&gt;name]/parameters/</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#module_param_sysfs_setup\">module_param_sysfs_setup</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kparam\">kparam</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#num_params\">num_params</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#params\">params</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_params\">num_params</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kparam\">kparam</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#perm\">perm</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_sysfs_param\">add_sysfs_param</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>, &amp;<a class=\"id\" href=\"#kparam\">kparam</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#kparam\">kparam</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#params\">params</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#params\">params</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create the param group. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sysfs_create_group\">sysfs_create_group</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#mp\">mp</a>-><a class=\"id\" href=\"#grp\">grp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_module_param_attrs\">free_module_param_attrs</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * module_param_sysfs_remove - remove sysfs support for one module</span>", 
"<span class=\"comment\"> * @mod: module</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Remove sysfs entries for module parameters and the corresponding</span>", 
"<span class=\"comment\"> * kobject.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#module_param_sysfs_remove\">module_param_sysfs_remove</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#mp\">mp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_group\">sysfs_remove_group</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>.<a class=\"id\" href=\"#mp\">mp</a>-><a class=\"id\" href=\"#grp\">grp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We are positive that no one is using any param</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * attrs at this point.  Deallocate immediately. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_module_param_attrs\">free_module_param_attrs</a>(&amp;<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#mkobj\">mkobj</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#destroy_params\">destroy_params</a>(const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#params\">params</a>, unsigned <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#params\">params</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#free\">free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#params\">params</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#params\">params</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kernel_add_sysfs_param\">kernel_add_sysfs_param</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kparam\">kparam</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#name_skip\">name_skip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_kobject\">module_kobject</a> *<a class=\"id\" href=\"#mk\">mk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kset_find_obj\">kset_find_obj</a>(<a class=\"id\" href=\"#module_kset\">module_kset</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We already have one.  Remove params so we can add more. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mk\">mk</a> = <a class=\"id\" href=\"#to_module_kobject\">to_module_kobject</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We need to remove it before adding parameters. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_group\">sysfs_remove_group</a>(&amp;<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a>-><a class=\"id\" href=\"#grp\">grp</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mk\">mk</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#module_kobject\">module_kobject</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mk\">mk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#kobj\">kobj</a>.<a class=\"id\" href=\"#kset\">kset</a> = <a class=\"id\" href=\"#module_kset\">module_kset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kobject_init_and_add\">kobject_init_and_add</a>(&amp;<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#module_ktype\">module_ktype</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"%s\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Module '%s' failed add to sysfs, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"error number %d\\n\", <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a><span class=\"ts\"/>\"The system will be unstable now.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* So that exit path is even. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_get\">kobject_get</a>(&amp;<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* These should not fail at boot. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_sysfs_param\">add_sysfs_param</a>(<a class=\"id\" href=\"#mk\">mk</a>, <a class=\"id\" href=\"#kparam\">kparam</a>, <a class=\"id\" href=\"#kparam\">kparam</a>-><a class=\"id\" href=\"#name\">name</a> + <a class=\"id\" href=\"#name_skip\">name_skip</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sysfs_create_group\">sysfs_create_group</a>(&amp;<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mp\">mp</a>-><a class=\"id\" href=\"#grp\">grp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent\">kobject_uevent</a>(&amp;<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#KOBJ_ADD\">KOBJ_ADD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * param_sysfs_builtin - add contents in /sys/parameters for built-in modules</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Add module_parameters to sysfs for \"modules\" built into the kernel.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The \"module\" name (KBUILD_MODNAME) is stored before a dot, the</span>", 
"<span class=\"comment\"> * \"parameter\" name is stored behind a dot in kernel_param-&gt;name. So,</span>", 
"<span class=\"comment\"> * extract the \"module\" name for all built-in kernel_param-eters,</span>", 
"<span class=\"comment\"> * and for all who have the same, call kernel_add_sysfs_param.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#param_sysfs_builtin\">param_sysfs_builtin</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#name_len\">name_len</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#modname\">modname</a>[<a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>];", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#kp\">kp</a> = <a class=\"id\" href=\"#__start___param\">__start___param</a>; <a class=\"id\" href=\"#kp\">kp</a> &lt; <a class=\"id\" href=\"#__stop___param\">__stop___param</a>; <a class=\"id\" href=\"#kp\">kp</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#dot\">dot</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#perm\">perm</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dot\">dot</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#name\">name</a>, '.');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dot\">dot</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This happens for core_param() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#modname\">modname</a>, \"kernel\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name_len\">name_len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name_len\">name_len</a> = <a class=\"id\" href=\"#dot\">dot</a> - <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#name\">name</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name_len\">name_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_add_sysfs_param\">kernel_add_sysfs_param</a>(<a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#kp\">kp</a>, <a class=\"id\" href=\"#name_len\">name_len</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/* module-related sysfs stuff */</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#module_attr_show\">module_attr_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#attribute\">attribute</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_kobject\">module_kobject</a> *<a class=\"id\" href=\"#mk\">mk</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attribute\">attribute</a> = <a class=\"id\" href=\"#to_module_attr\">to_module_attr</a>(<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mk\">mk</a> = <a class=\"id\" href=\"#to_module_kobject\">to_module_kobject</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attribute\">attribute</a>-><a class=\"id\" href=\"#show\">show</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#attribute\">attribute</a>-><a class=\"id\" href=\"#show\">show</a>(<a class=\"id\" href=\"#attribute\">attribute</a>, <a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#module_attr_store\">module_attr_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#attribute\">attribute</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_kobject\">module_kobject</a> *<a class=\"id\" href=\"#mk\">mk</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attribute\">attribute</a> = <a class=\"id\" href=\"#to_module_attr\">to_module_attr</a>(<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mk\">mk</a> = <a class=\"id\" href=\"#to_module_kobject\">to_module_kobject</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attribute\">attribute</a>-><a class=\"id\" href=\"#store\">store</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#attribute\">attribute</a>-><a class=\"id\" href=\"#store\">store</a>(<a class=\"id\" href=\"#attribute\">attribute</a>, <a class=\"id\" href=\"#mk\">mk</a>-><a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a> <a class=\"id\" href=\"#module_sysfs_ops\">module_sysfs_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a> = <a class=\"id\" href=\"#module_attr_show\">module_attr_show</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#store\">store</a> = <a class=\"id\" href=\"#module_attr_store\">module_attr_store</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#uevent_filter\">uevent_filter</a>(struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#kset\">kset</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> *<a class=\"id\" href=\"#ktype\">ktype</a> = <a class=\"id\" href=\"#get_ktype\">get_ktype</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ktype\">ktype</a> == &amp;<a class=\"id\" href=\"#module_ktype\">module_ktype</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#kset_uevent_ops\">kset_uevent_ops</a> <a class=\"id\" href=\"#module_uevent_ops\">module_uevent_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#filter\">filter</a> = <a class=\"id\" href=\"#uevent_filter\">uevent_filter</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#module_kset\">module_kset</a>;", 
"int <a class=\"id\" href=\"#module_sysfs_initialized\">module_sysfs_initialized</a>;", 
"", 
"struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> <a class=\"id\" href=\"#module_ktype\">module_ktype</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a> =<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#module_sysfs_ops\">module_sysfs_ops</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * param_sysfs_init - wrapper for built-in params support</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#param_sysfs_init\">param_sysfs_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_kset\">module_kset</a> = <a class=\"id\" href=\"#kset_create_and_add\">kset_create_and_add</a>(\"module\", &amp;<a class=\"id\" href=\"#module_uevent_ops\">module_uevent_ops</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#module_kset\">module_kset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s (%d): error creating kset\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_sysfs_initialized\">module_sysfs_initialized</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param_sysfs_builtin\">param_sysfs_builtin</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#param_sysfs_init\">param_sysfs_init</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SYSFS */</span>", 
];
xr_frag_insert('l/73/cdf1ff89b87571e114aa4b29c626811a13f22c.xr', __xr_tmp);
