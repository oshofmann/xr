var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2001 Momchil Velikov</span>", 
"<span class=\"comment\"> * Portions Copyright (C) 2001 Christoph Hellwig</span>", 
"<span class=\"comment\"> * Copyright (C) 2006 Nick Piggin</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License as</span>", 
"<span class=\"comment\"> * published by the Free Software Foundation; either version 2, or (at</span>", 
"<span class=\"comment\"> * your option) any later version.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\"> * General Public License for more details.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_RADIX_TREE_H\">_LINUX_RADIX_TREE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_RADIX_TREE_H\">_LINUX_RADIX_TREE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#preempt\">preempt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * An indirect pointer (root-&gt;rnode pointing to a radix_tree_node, rather</span>", 
"<span class=\"comment\"> * than a data item) is signalled by the low bit set in the root-&gt;rnode</span>", 
"<span class=\"comment\"> * pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In this case root-&gt;height is &gt; 0, but the indirect pointer tests are</span>", 
"<span class=\"comment\"> * needed for RCU lookups (because root-&gt;height is unreliable). The only</span>", 
"<span class=\"comment\"> * time callers need worry about this is when doing a lookup_slot under</span>", 
"<span class=\"comment\"> * RCU.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE_INDIRECT_PTR\">RADIX_TREE_INDIRECT_PTR</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE_RETRY\">RADIX_TREE_RETRY</a> ((void *)-1UL)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#radix_tree_ptr_to_indirect\">radix_tree_ptr_to_indirect</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>return (void *)((unsigned long)<a class=\"id\" href=\"#ptr\">ptr</a> | <a class=\"id\" href=\"#RADIX_TREE_INDIRECT_PTR\">RADIX_TREE_INDIRECT_PTR</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>return (void *)((unsigned long)<a class=\"id\" href=\"#ptr\">ptr</a> &amp; ~<a class=\"id\" href=\"#RADIX_TREE_INDIRECT_PTR\">RADIX_TREE_INDIRECT_PTR</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>return (int)((unsigned long)<a class=\"id\" href=\"#ptr\">ptr</a> &amp; <a class=\"id\" href=\"#RADIX_TREE_INDIRECT_PTR\">RADIX_TREE_INDIRECT_PTR</a>);", 
"}", 
"", 
"<span class=\"comment\">/*** radix-tree API starts here ***/</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE_MAX_TAGS\">RADIX_TREE_MAX_TAGS</a> 3", 
"", 
"<span class=\"comment\">/* root tags are stored in gfp_mask, shifted by __GFP_BITS_SHIFT */</span>", 
"struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> {", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a><span class=\"ts\"/>*<a class=\"id\" href=\"#rnode\">rnode</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE_INIT\">RADIX_TREE_INIT</a>(<a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#height\">height</a> = 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = (<a class=\"id\" href=\"#mask\">mask</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rnode\">rnode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_TREE\">RADIX_TREE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mask\">mask</a>) \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> <a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#RADIX_TREE_INIT\">RADIX_TREE_INIT</a>(<a class=\"id\" href=\"#mask\">mask</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_RADIX_TREE\">INIT_RADIX_TREE</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#root\">root</a>)-><a class=\"id\" href=\"#height\">height</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#root\">root</a>)-><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = (<a class=\"id\" href=\"#mask\">mask</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#root\">root</a>)-><a class=\"id\" href=\"#rnode\">rnode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Radix-tree synchronization</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The radix-tree API requires that users provide all synchronisation (with</span>", 
"<span class=\"comment\"> * specific exceptions, noted below).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Synchronization of access to the data items being stored in the tree, and</span>", 
"<span class=\"comment\"> * management of their lifetimes must be completely managed by API users.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For API usage, in general,</span>", 
"<span class=\"comment\"> * - any function _modifying_ the tree or tags (inserting or deleting</span>", 
"<span class=\"comment\"> *   items, setting or clearing tags) must exclude other modifications, and</span>", 
"<span class=\"comment\"> *   exclude any functions reading the tree.</span>", 
"<span class=\"comment\"> * - any function _reading_ the tree or tags (looking up items or tags,</span>", 
"<span class=\"comment\"> *   gang lookups) must exclude modifications to the tree, but may occur</span>", 
"<span class=\"comment\"> *   concurrently with other readers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The notable exceptions to this rule are the following functions:</span>", 
"<span class=\"comment\"> * radix_tree_lookup</span>", 
"<span class=\"comment\"> * radix_tree_lookup_slot</span>", 
"<span class=\"comment\"> * radix_tree_tag_get</span>", 
"<span class=\"comment\"> * radix_tree_gang_lookup</span>", 
"<span class=\"comment\"> * radix_tree_gang_lookup_slot</span>", 
"<span class=\"comment\"> * radix_tree_gang_lookup_tag</span>", 
"<span class=\"comment\"> * radix_tree_gang_lookup_tag_slot</span>", 
"<span class=\"comment\"> * radix_tree_tagged</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The first 7 functions are able to be called locklessly, using RCU. The</span>", 
"<span class=\"comment\"> * caller must ensure calls to these functions are made within rcu_read_lock()</span>", 
"<span class=\"comment\"> * regions. Other readers (lock-free or otherwise) and modifications may be</span>", 
"<span class=\"comment\"> * running concurrently.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is still required that the caller manage the synchronization and lifetimes</span>", 
"<span class=\"comment\"> * of the items. So if RCU lock-free lookups are used, typically this would mean</span>", 
"<span class=\"comment\"> * that the items have their own locks, or are amenable to lock-free access; and</span>", 
"<span class=\"comment\"> * that the items are freed by RCU (or only freed after having been deleted from</span>", 
"<span class=\"comment\"> * the radix tree *and* a synchronize_rcu() grace period).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (Note, rcu_assign_pointer and rcu_dereference are not needed to control</span>", 
"<span class=\"comment\"> * access to data items when inserting into or looking up from the radix tree)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that the value returned by radix_tree_tag_get() may not be relied upon</span>", 
"<span class=\"comment\"> * if only the RCU read lock is held.  Functions to set/clear tags and to</span>", 
"<span class=\"comment\"> * delete nodes running concurrently with it may affect its result such that</span>", 
"<span class=\"comment\"> * two consecutive reads in the same locked section may return different</span>", 
"<span class=\"comment\"> * values.  If reliability is required, modification functions must also be</span>", 
"<span class=\"comment\"> * excluded from concurrency.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * radix_tree_tagged is able to be called without locking or RCU.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * radix_tree_deref_slot<span class=\"ts\"/>- dereference a slot</span>", 
"<span class=\"comment\"> * @pslot:<span class=\"ts\"/>pointer to slot, returned by radix_tree_lookup_slot</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>item that was stored in that slot with any direct pointer flag</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>removed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For use with radix_tree_lookup_slot().  Caller must hold tree at least read</span>", 
"<span class=\"comment\"> * locked across slot lookup and dereference.  More likely, will be used with</span>", 
"<span class=\"comment\"> * radix_tree_replace_slot(), as well, so caller will hold tree write locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#radix_tree_deref_slot\">radix_tree_deref_slot</a>(void **<a class=\"id\" href=\"#pslot\">pslot</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(*<a class=\"id\" href=\"#pslot\">pslot</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(<a class=\"id\" href=\"#ret\">ret</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#RADIX_TREE_RETRY\">RADIX_TREE_RETRY</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * radix_tree_replace_slot<span class=\"ts\"/>- replace item in a slot</span>", 
"<span class=\"comment\"> * @pslot:<span class=\"ts\"/>pointer to slot, returned by radix_tree_lookup_slot</span>", 
"<span class=\"comment\"> * @item:<span class=\"ts\"/>new item to store in the slot.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For use with radix_tree_lookup_slot().  Caller must hold tree write locked</span>", 
"<span class=\"comment\"> * across slot lookup and replacement.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#radix_tree_replace_slot\">radix_tree_replace_slot</a>(void **<a class=\"id\" href=\"#pslot\">pslot</a>, void *<a class=\"id\" href=\"#item\">item</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(<a class=\"id\" href=\"#item\">item</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(*<a class=\"id\" href=\"#pslot\">pslot</a>, <a class=\"id\" href=\"#item\">item</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#radix_tree_insert\">radix_tree_insert</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *, unsigned long, void *);", 
"void *<a class=\"id\" href=\"#radix_tree_lookup\">radix_tree_lookup</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *, unsigned long);", 
"void **<a class=\"id\" href=\"#radix_tree_lookup_slot\">radix_tree_lookup_slot</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *, unsigned long);", 
"void *<a class=\"id\" href=\"#radix_tree_delete\">radix_tree_delete</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *, unsigned long);", 
"unsigned int", 
"<a class=\"id\" href=\"#radix_tree_gang_lookup\">radix_tree_gang_lookup</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, void **<a class=\"id\" href=\"#results\">results</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first_index\">first_index</a>, unsigned int <a class=\"id\" href=\"#max_items\">max_items</a>);", 
"unsigned int", 
"<a class=\"id\" href=\"#radix_tree_gang_lookup_slot\">radix_tree_gang_lookup_slot</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, void ***<a class=\"id\" href=\"#results\">results</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first_index\">first_index</a>, unsigned int <a class=\"id\" href=\"#max_items\">max_items</a>);", 
"unsigned long <a class=\"id\" href=\"#radix_tree_next_hole\">radix_tree_next_hole</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, unsigned long <a class=\"id\" href=\"#max_scan\">max_scan</a>);", 
"unsigned long <a class=\"id\" href=\"#radix_tree_prev_hole\">radix_tree_prev_hole</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, unsigned long <a class=\"id\" href=\"#max_scan\">max_scan</a>);", 
"int <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"void <a class=\"id\" href=\"#radix_tree_init\">radix_tree_init</a>(void);", 
"void *<a class=\"id\" href=\"#radix_tree_tag_set\">radix_tree_tag_set</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>);", 
"void *<a class=\"id\" href=\"#radix_tree_tag_clear\">radix_tree_tag_clear</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>);", 
"int <a class=\"id\" href=\"#radix_tree_tag_get\">radix_tree_tag_get</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>);", 
"unsigned int", 
"<a class=\"id\" href=\"#radix_tree_gang_lookup_tag\">radix_tree_gang_lookup_tag</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, void **<a class=\"id\" href=\"#results\">results</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first_index\">first_index</a>, unsigned int <a class=\"id\" href=\"#max_items\">max_items</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tag\">tag</a>);", 
"unsigned int", 
"<a class=\"id\" href=\"#radix_tree_gang_lookup_tag_slot\">radix_tree_gang_lookup_tag_slot</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, void ***<a class=\"id\" href=\"#results\">results</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first_index\">first_index</a>, unsigned int <a class=\"id\" href=\"#max_items\">max_items</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tag\">tag</a>);", 
"unsigned long <a class=\"id\" href=\"#radix_tree_range_tag_if_tagged\">radix_tree_range_tag_if_tagged</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#first_indexp\">first_indexp</a>, unsigned long <a class=\"id\" href=\"#last_index\">last_index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_to_tag\">nr_to_tag</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#fromtag\">fromtag</a>, unsigned int <a class=\"id\" href=\"#totag\">totag</a>);", 
"int <a class=\"id\" href=\"#radix_tree_tagged\">radix_tree_tagged</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#radix_tree_preload_end\">radix_tree_preload_end</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_RADIX_TREE_H */</span>", 
];
xr_frag_insert('l/74/3109e5b646d409373d2d5d43f1e0fc30b8df0b.xr', __xr_tmp);
