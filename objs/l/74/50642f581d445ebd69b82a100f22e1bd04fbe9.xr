var __xr_tmp = [
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Compute the hash of an extended attribute.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ext2_xattr_hash_entry\">ext2_xattr_hash_entry</a>(struct <a class=\"id\" href=\"#ext2_xattr_header\">ext2_xattr_header</a> *<a class=\"id\" href=\"#header\">header</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ext2_xattr_entry\">ext2_xattr_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hash\">hash</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#e_name\">e_name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a>=0; <a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#e_name_len\">e_name_len</a>; <a class=\"id\" href=\"#n\">n</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = (<a class=\"id\" href=\"#hash\">hash</a> << <a class=\"id\" href=\"#NAME_HASH_SHIFT\">NAME_HASH_SHIFT</a>) ^", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#hash\">hash</a> >> (8*sizeof(<a class=\"id\" href=\"#hash\">hash</a>) - <a class=\"id\" href=\"#NAME_HASH_SHIFT\">NAME_HASH_SHIFT</a>)) ^", 
"<span class=\"ts\"/><span class=\"ts\"/>       *<a class=\"id\" href=\"#name\">name</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#e_value_block\">e_value_block</a> == 0 && <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#e_value_size\">e_value_size</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#value\">value</a> = (<a class=\"id\" href=\"#__le32\">__le32</a> *)((char *)<a class=\"id\" href=\"#header\">header</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#e_value_offs\">e_value_offs</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#e_value_size\">e_value_size</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#EXT2_XATTR_ROUND\">EXT2_XATTR_ROUND</a>) >> <a class=\"id\" href=\"#EXT2_XATTR_PAD_BITS\">EXT2_XATTR_PAD_BITS</a>; <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#n\">n</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = (<a class=\"id\" href=\"#hash\">hash</a> << <a class=\"id\" href=\"#VALUE_HASH_SHIFT\">VALUE_HASH_SHIFT</a>) ^", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#hash\">hash</a> >> (8*sizeof(<a class=\"id\" href=\"#hash\">hash</a>) - <a class=\"id\" href=\"#VALUE_HASH_SHIFT\">VALUE_HASH_SHIFT</a>)) ^", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#value\">value</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#e_hash\">e_hash</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#hash\">hash</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#NAME_HASH_SHIFT\">NAME_HASH_SHIFT</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#VALUE_HASH_SHIFT\">VALUE_HASH_SHIFT</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLOCK_HASH_SHIFT\">BLOCK_HASH_SHIFT</a> 16", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext2_xattr_rehash()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Re-compute the extended attribute hash value after an entry has changed.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext2_xattr_rehash\">ext2_xattr_rehash</a>(struct <a class=\"id\" href=\"#ext2_xattr_header\">ext2_xattr_header</a> *<a class=\"id\" href=\"#header\">header</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ext2_xattr_entry\">ext2_xattr_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_xattr_entry\">ext2_xattr_entry</a> *<a class=\"id\" href=\"#here\">here</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hash\">hash</a> = 0;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_xattr_hash_entry\">ext2_xattr_hash_entry</a>(<a class=\"id\" href=\"#header\">header</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#here\">here</a> = <a class=\"id\" href=\"#ENTRY\">ENTRY</a>(<a class=\"id\" href=\"#header\">header</a>+1);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#IS_LAST_ENTRY\">IS_LAST_ENTRY</a>(<a class=\"id\" href=\"#here\">here</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#here\">here</a>-><a class=\"id\" href=\"#e_hash\">e_hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Block is not shared if an entry's hash value == 0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = (<a class=\"id\" href=\"#hash\">hash</a> << <a class=\"id\" href=\"#BLOCK_HASH_SHIFT\">BLOCK_HASH_SHIFT</a>) ^", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#hash\">hash</a> >> (8*sizeof(<a class=\"id\" href=\"#hash\">hash</a>) - <a class=\"id\" href=\"#BLOCK_HASH_SHIFT\">BLOCK_HASH_SHIFT</a>)) ^", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#here\">here</a>-><a class=\"id\" href=\"#e_hash\">e_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#here\">here</a> = <a class=\"id\" href=\"#EXT2_XATTR_NEXT\">EXT2_XATTR_NEXT</a>(<a class=\"id\" href=\"#here\">here</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#h_hash\">h_hash</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#hash\">hash</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#BLOCK_HASH_SHIFT\">BLOCK_HASH_SHIFT</a>", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#init_ext2_xattr\">init_ext2_xattr</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_xattr_cache\">ext2_xattr_cache</a> = <a class=\"id\" href=\"#mb_cache_create\">mb_cache_create</a>(\"ext2_xattr\", 6);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext2_xattr_cache\">ext2_xattr_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#exit_ext2_xattr\">exit_ext2_xattr</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_cache_destroy\">mb_cache_destroy</a>(<a class=\"id\" href=\"#ext2_xattr_cache\">ext2_xattr_cache</a>);", 
"}", 
];
xr_frag_insert('l/74/50642f581d445ebd69b82a100f22e1bd04fbe9.xr', __xr_tmp);
