var __xr_tmp = [
"<span class=\"comment\">/* inftrees.c -- generate Huffman trees for efficient decoding</span>", 
"<span class=\"comment\"> * Copyright (C) 1995-2005 Mark Adler</span>", 
"<span class=\"comment\"> * For conditions of distribution and use, see copyright notice in zlib.h</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#zutil\">zutil</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"inftrees.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAXBITS\">MAXBITS</a> 15", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   Build a set of tables to decode the provided canonical Huffman code.</span>", 
"<span class=\"comment\">   The code lengths are lens[0..codes-1].  The result starts at *table,</span>", 
"<span class=\"comment\">   whose indices are 0..2^bits-1.  work is a writable array of at least</span>", 
"<span class=\"comment\">   lens shorts, which is used as a work area.  type is the type of code</span>", 
"<span class=\"comment\">   to be generated, CODES, LENS, or DISTS.  On return, zero is success,</span>", 
"<span class=\"comment\">   -1 is an invalid code, and +1 means that ENOUGH isn't enough.  table</span>", 
"<span class=\"comment\">   on return points to the next available entry's address.  bits is the</span>", 
"<span class=\"comment\">   requested root table index bits, and on return it is the actual root</span>", 
"<span class=\"comment\">   table index bits.  It will differ if the request is greater than the</span>", 
"<span class=\"comment\">   longest code or if it is less than the shortest code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#zlib_inflate_table\">zlib_inflate_table</a>(<a class=\"id\" href=\"#codetype\">codetype</a> <a class=\"id\" href=\"#type\">type</a>, unsigned short *<a class=\"id\" href=\"#lens\">lens</a>, unsigned <a class=\"id\" href=\"#codes\">codes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#code\">code</a> **<a class=\"id\" href=\"#table\">table</a>, unsigned *<a class=\"id\" href=\"#bits\">bits</a>, unsigned short *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"    unsigned <a class=\"id\" href=\"#len\">len</a>;               <span class=\"comment\">/* a code's length in bits */</span>", 
"    unsigned <a class=\"id\" href=\"#sym\">sym</a>;               <span class=\"comment\">/* index of code symbols */</span>", 
"    unsigned <a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#max\">max</a>;          <span class=\"comment\">/* minimum and maximum code lengths */</span>", 
"    unsigned <a class=\"id\" href=\"#root\">root</a>;              <span class=\"comment\">/* number of index bits for root table */</span>", 
"    unsigned <a class=\"id\" href=\"#curr\">curr</a>;              <span class=\"comment\">/* number of index bits for current table */</span>", 
"    unsigned <a class=\"id\" href=\"#drop\">drop</a>;              <span class=\"comment\">/* code bits to drop for sub-table */</span>", 
"    int <a class=\"id\" href=\"#left\">left</a>;                   <span class=\"comment\">/* number of prefix codes available */</span>", 
"    unsigned <a class=\"id\" href=\"#used\">used</a>;              <span class=\"comment\">/* code entries in table used */</span>", 
];
xr_frag_insert('l/74/5ba13af7395c091c7426959f5f59af4f583f04.xr', __xr_tmp);
