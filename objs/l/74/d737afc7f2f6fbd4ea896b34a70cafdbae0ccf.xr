var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i2c-boardinfo.h - collect pre-declarations of I2C devices</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#i2c\">i2c</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"i2c-core.h\"", 
"", 
"", 
"<span class=\"comment\">/* These symbols are exported ONLY FOR the i2c core.</span>", 
"<span class=\"comment\"> * No other users will be supported.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DECLARE_RWSEM\">DECLARE_RWSEM</a>(<a class=\"id\" href=\"#__i2c_board_lock\">__i2c_board_lock</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__i2c_board_lock\">__i2c_board_lock</a>);", 
"", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#__i2c_board_list\">__i2c_board_list</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__i2c_board_list\">__i2c_board_list</a>);", 
"", 
"int <a class=\"id\" href=\"#__i2c_first_dynamic_bus_num\">__i2c_first_dynamic_bus_num</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__i2c_first_dynamic_bus_num\">__i2c_first_dynamic_bus_num</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * i2c_register_board_info - statically declare I2C devices</span>", 
"<span class=\"comment\"> * @busnum: identifies the bus to which these devices belong</span>", 
"<span class=\"comment\"> * @info: vector of i2c device descriptors</span>", 
"<span class=\"comment\"> * @len: how many descriptors in the vector; may be zero to reserve</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the specified bus number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Systems using the Linux I2C driver stack can declare tables of board info</span>", 
"<span class=\"comment\"> * while they initialize.  This should be done in board-specific init code</span>", 
"<span class=\"comment\"> * near arch_initcall() time, or equivalent, before any I2C adapter driver is</span>", 
"<span class=\"comment\"> * registered.  For example, mainboard init code could define several devices,</span>", 
"<span class=\"comment\"> * as could the init code for each daughtercard in a board stack.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The I2C devices will be created later, after the adapter for the relevant</span>", 
"<span class=\"comment\"> * bus has been registered.  After that moment, standard driver model tools</span>", 
"<span class=\"comment\"> * are used to bind \"new style\" I2C drivers to the devices.  The bus number</span>", 
"<span class=\"comment\"> * for any device declared using this routine is not available for dynamic</span>", 
"<span class=\"comment\"> * allocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The board info passed can safely be __initdata, but be careful of embedded</span>", 
"<span class=\"comment\"> * pointers (for platform_data, functions, etc) since that won't be copied.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#i2c_register_board_info\">i2c_register_board_info</a>(int <a class=\"id\" href=\"#busnum\">busnum</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_board_info\">i2c_board_info</a> const *<a class=\"id\" href=\"#info\">info</a>, unsigned <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#__i2c_board_lock\">__i2c_board_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* dynamic bus numbers will be assigned after the last static one */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#busnum\">busnum</a> >= <a class=\"id\" href=\"#__i2c_first_dynamic_bus_num\">__i2c_first_dynamic_bus_num</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__i2c_first_dynamic_bus_num\">__i2c_first_dynamic_bus_num</a> = <a class=\"id\" href=\"#busnum\">busnum</a> + 1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#status\">status</a> = 0; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#len\">len</a>--, <a class=\"id\" href=\"#info\">info</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#i2c_devinfo\">i2c_devinfo</a><span class=\"ts\"/>*<a class=\"id\" href=\"#devinfo\">devinfo</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devinfo\">devinfo</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#devinfo\">devinfo</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#devinfo\">devinfo</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"i2c-core: can't register boardinfo!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devinfo\">devinfo</a>-><a class=\"id\" href=\"#busnum\">busnum</a> = <a class=\"id\" href=\"#busnum\">busnum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devinfo\">devinfo</a>-><a class=\"id\" href=\"#board_info\">board_info</a> = *<a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#devinfo\">devinfo</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#__i2c_board_list\">__i2c_board_list</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#__i2c_board_lock\">__i2c_board_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
];
xr_frag_insert('l/74/d737afc7f2f6fbd4ea896b34a70cafdbae0ccf.xr', __xr_tmp);
