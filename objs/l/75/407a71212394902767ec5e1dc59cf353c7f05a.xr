var __xr_tmp = [
"<span class=\"comment\">/* Helpers for initial module or kernel cmdline parsing</span>", 
"<span class=\"comment\">   Copyright (C) 2001 Rusty Russell.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\">    it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\">    the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\">    (at your option) any later version.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\">    GNU General Public License for more details.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\">    along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\">    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>", 
"<span class=\"comment\">*/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#moduleparam\">moduleparam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#if 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEBUGP\">DEBUGP</a> <a class=\"id\" href=\"#printk\">printk</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#a\">a</a>...)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Protects all parameters, and incidentally kmalloced_param list. */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#param_lock\">param_lock</a>);", 
"", 
"<span class=\"comment\">/* This just allows us to keep track of which parameters are kmalloced. */</span>", 
"struct <a class=\"id\" href=\"#kmalloced_param\">kmalloced_param</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#val\">val</a>[];", 
"};", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#kmalloced_params\">kmalloced_params</a>);", 
"", 
"static void *<a class=\"id\" href=\"#kmalloc_parameter\">kmalloc_parameter</a>(unsigned int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmalloced_param\">kmalloced_param</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#p\">p</a>) + <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#kmalloced_params\">kmalloced_params</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Does nothing if parameter wasn't kmalloced above. */</span>", 
"static void <a class=\"id\" href=\"#maybe_kfree_parameter\">maybe_kfree_parameter</a>(void *<a class=\"id\" href=\"#param\">param</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmalloced_param\">kmalloced_param</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#kmalloced_params\">kmalloced_params</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#val\">val</a> == <a class=\"id\" href=\"#param\">param</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> char <a class=\"id\" href=\"#dash2underscore\">dash2underscore</a>(char <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == '-')", 
"<span class=\"ts\"/><span class=\"ts\"/>return '_';", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#parameq\">parameq</a>(const char *<a class=\"id\" href=\"#input\">input</a>, const char *<a class=\"id\" href=\"#paramname\">paramname</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#dash2underscore\">dash2underscore</a>(<a class=\"id\" href=\"#input\">input</a>[<a class=\"id\" href=\"#i\">i</a>]) == <a class=\"id\" href=\"#paramname\">paramname</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#input\">input</a>[<a class=\"id\" href=\"#i\">i</a>] == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#parse_one\">parse_one</a>(char *<a class=\"id\" href=\"#param\">param</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     char *<a class=\"id\" href=\"#val\">val</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#params\">params</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     unsigned <a class=\"id\" href=\"#num_params\">num_params</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     int (*<a class=\"id\" href=\"#handle_unknown\">handle_unknown</a>)(char *<a class=\"id\" href=\"#param\">param</a>, char *<a class=\"id\" href=\"#val\">val</a>))", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find parameter */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_params\">num_params</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parameq\">parameq</a>(<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#params\">params</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Noone handled NULL, so do it here. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#val\">val</a> && <a class=\"id\" href=\"#params\">params</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set\">set</a> != <a class=\"id\" href=\"#param_set_bool\">param_set_bool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"They are equal!  Calling %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#params\">params</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set\">set</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#param_lock\">param_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#params\">params</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#set\">set</a>(<a class=\"id\" href=\"#val\">val</a>, &amp;<a class=\"id\" href=\"#params\">params</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#param_lock\">param_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle_unknown\">handle_unknown</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"Unknown argument: calling %p\\n\", <a class=\"id\" href=\"#handle_unknown\">handle_unknown</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#handle_unknown\">handle_unknown</a>(<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"Unknown argument `%s'\\n\", <a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"}", 
"", 
"<span class=\"comment\">/* You can use \" around spaces, but can't escape \". */</span>", 
"<span class=\"comment\">/* Hyphens and underscores equivalent in parameter names. */</span>", 
"static char *<a class=\"id\" href=\"#next_arg\">next_arg</a>(char *<a class=\"id\" href=\"#args\">args</a>, char **<a class=\"id\" href=\"#param\">param</a>, char **<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#equals\">equals</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#in_quote\">in_quote</a> = 0, <a class=\"id\" href=\"#quoted\">quoted</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#args\">args</a> == '\"') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_quote\">in_quote</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quoted\">quoted</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#isspace\">isspace</a>(<a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>]) && !<a class=\"id\" href=\"#in_quote\">in_quote</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#equals\">equals</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>] == '=')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#equals\">equals</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>] == '\"')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_quote\">in_quote</a> = !<a class=\"id\" href=\"#in_quote\">in_quote</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#param\">param</a> = <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#equals\">equals</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#equals\">equals</a>] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#args\">args</a> + <a class=\"id\" href=\"#equals\">equals</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't include quotes in value. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (**<a class=\"id\" href=\"#val\">val</a> == '\"') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#val\">val</a>)++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>-1] == '\"')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>-1] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#quoted\">quoted</a> && <a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>-1] == '\"')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>-1] = '\\0';", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#args\">args</a> + <a class=\"id\" href=\"#i\">i</a> + 1;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#args\">args</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Chew up trailing spaces. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Args looks like \"foo=bar,bar2 baz=fuz wiz\". */</span>", 
"int <a class=\"id\" href=\"#parse_args\">parse_args</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/>       char *<a class=\"id\" href=\"#args\">args</a>,", 
"<span class=\"ts\"/>       const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#params\">params</a>,", 
"<span class=\"ts\"/>       unsigned <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/>       int (*<a class=\"id\" href=\"#unknown\">unknown</a>)(char *<a class=\"id\" href=\"#param\">param</a>, char *<a class=\"id\" href=\"#val\">val</a>))", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#param\">param</a>, *<a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUGP\">DEBUGP</a>(\"Parsing ARGS: %s\\n\", <a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Chew leading spaces */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a> = <a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#args\">args</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#irq_was_disabled\">irq_was_disabled</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a> = <a class=\"id\" href=\"#next_arg\">next_arg</a>(<a class=\"id\" href=\"#args\">args</a>, &amp;<a class=\"id\" href=\"#param\">param</a>, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_was_disabled\">irq_was_disabled</a> = <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#parse_one\">parse_one</a>(<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#params\">params</a>, <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#unknown\">unknown</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#irq_was_disabled\">irq_was_disabled</a> && !<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"parse_args(): option '%s' enabled \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"irq's!\\n\", <a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: Unknown parameter `%s'\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"%s: `%s' too large for parameter `%s'\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#val\">val</a> ?: \"\", <a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"%s: `%s' invalid for parameter `%s'\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#val\">val</a> ?: \"\", <a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All parsed OK. */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Lazy bastard, eh? */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STANDARD_PARAM_DEF\">STANDARD_PARAM_DEF</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#format\">format</a>, <a class=\"id\" href=\"#tmptype\">tmptype</a>, <a class=\"id\" href=\"#strtolfn\">strtolfn</a>)      <span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#param_set_\">param_set_</a>##<a class=\"id\" href=\"#name\">name</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>) \\", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmptype\">tmptype</a> <a class=\"id\" href=\"#l\">l</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strtolfn\">strtolfn</a>(<a class=\"id\" href=\"#val\">val</a>, 0, &amp;<a class=\"id\" href=\"#l\">l</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a> || ((<a class=\"id\" href=\"#type\">type</a>)<a class=\"id\" href=\"#l\">l</a> != <a class=\"id\" href=\"#l\">l</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>*((<a class=\"id\" href=\"#type\">type</a> *)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a>) = <a class=\"id\" href=\"#l\">l</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#param_get_\">param_get_</a>##<a class=\"id\" href=\"#name\">name</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>) \\", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#format\">format</a>, *((<a class=\"id\" href=\"#type\">type</a> *)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a>));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_\">param_ops_</a>##<a class=\"id\" href=\"#name\">name</a> = {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#param_set_\">param_set_</a>##<a class=\"id\" href=\"#name\">name</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#param_get_\">param_get_</a>##<a class=\"id\" href=\"#name\">name</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>};<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_set_\">param_set_</a>##<a class=\"id\" href=\"#name\">name</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_get_\">param_get_</a>##<a class=\"id\" href=\"#name\">name</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_ops_\">param_ops_</a>##<a class=\"id\" href=\"#name\">name</a>)", 
"", 
"", 
"<a class=\"id\" href=\"#STANDARD_PARAM_DEF\">STANDARD_PARAM_DEF</a>(<a class=\"id\" href=\"#byte\">byte</a>, unsigned char, \"%c\", unsigned long, <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>);", 
"<a class=\"id\" href=\"#STANDARD_PARAM_DEF\">STANDARD_PARAM_DEF</a>(short, short, \"%hi\", long, <a class=\"id\" href=\"#strict_strtol\">strict_strtol</a>);", 
"<a class=\"id\" href=\"#STANDARD_PARAM_DEF\">STANDARD_PARAM_DEF</a>(<a class=\"id\" href=\"#ushort\">ushort</a>, unsigned short, \"%hu\", unsigned long, <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>);", 
"<a class=\"id\" href=\"#STANDARD_PARAM_DEF\">STANDARD_PARAM_DEF</a>(int, int, \"%i\", long, <a class=\"id\" href=\"#strict_strtol\">strict_strtol</a>);", 
"<a class=\"id\" href=\"#STANDARD_PARAM_DEF\">STANDARD_PARAM_DEF</a>(<a class=\"id\" href=\"#uint\">uint</a>, unsigned int, \"%u\", unsigned long, <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>);", 
"<a class=\"id\" href=\"#STANDARD_PARAM_DEF\">STANDARD_PARAM_DEF</a>(long, long, \"%li\", long, <a class=\"id\" href=\"#strict_strtol\">strict_strtol</a>);", 
"<a class=\"id\" href=\"#STANDARD_PARAM_DEF\">STANDARD_PARAM_DEF</a>(<a class=\"id\" href=\"#ulong\">ulong</a>, unsigned long, \"%lu\", unsigned long, <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>);", 
"", 
"int <a class=\"id\" href=\"#param_set_charp\">param_set_charp</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#val\">val</a>) &gt; 1024) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: string parameter too long\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maybe_kfree_parameter\">maybe_kfree_parameter</a>(*(char **)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is a hack.  We can't kmalloc in early boot, and we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't need to; this mangled commandline is preserved. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*(char **)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#kmalloc_parameter\">kmalloc_parameter</a>(<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#val\">val</a>)+1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*(char **)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(*(char **)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>*(const char **)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_set_charp\">param_set_charp</a>);", 
"", 
"int <a class=\"id\" href=\"#param_get_charp\">param_get_charp</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, \"%s\", *((char **)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#arg\">arg</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_get_charp\">param_get_charp</a>);", 
"", 
"static void <a class=\"id\" href=\"#param_free_charp\">param_free_charp</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maybe_kfree_parameter\">maybe_kfree_parameter</a>(*((char **)<a class=\"id\" href=\"#arg\">arg</a>));", 
"}", 
"", 
"struct <a class=\"id\" href=\"#kernel_param_ops\">kernel_param_ops</a> <a class=\"id\" href=\"#param_ops_charp\">param_ops_charp</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#param_set_charp\">param_set_charp</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#param_get_charp\">param_get_charp</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#param_free_charp\">param_free_charp</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#param_ops_charp\">param_ops_charp</a>);", 
"", 
"<span class=\"comment\">/* Actually could be a bool or an int, for historical reasons. */</span>", 
"int <a class=\"id\" href=\"#param_set_bool\">param_set_bool</a>(const char *<a class=\"id\" href=\"#val\">val</a>, const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No equals means \"set\"... */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#val\">val</a>) <a class=\"id\" href=\"#val\">val</a> = \"1\";", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* One of =[yYnN01] */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#val\">val</a>[0]) {", 
"<span class=\"ts\"/>case 'y': case 'Y': case '1':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'n': case 'N': case '0':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#false\">false</a>;", 
];
xr_frag_insert('l/75/407a71212394902767ec5e1dc59cf353c7f05a.xr', __xr_tmp);
