var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtnetlink\">rtnetlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#net_namespace\">net_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netns\">netns</a>/<a class=\"id\" href=\"#generic\">generic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Our network namespace constructor/destructor lists</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#pernet_list\">pernet_list</a>);", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#first_device\">first_device</a> = &amp;<a class=\"id\" href=\"#pernet_list\">pernet_list</a>;", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#net_namespace_list\">net_namespace_list</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#net_namespace_list\">net_namespace_list</a>);", 
"", 
"struct <a class=\"id\" href=\"#net\">net</a> <a class=\"id\" href=\"#init_net\">init_net</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#init_net\">init_net</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INITIAL_NET_GEN_PTRS\">INITIAL_NET_GEN_PTRS</a><span class=\"ts\"/>13 <span class=\"comment\">/* +1 for len +2 for rcu_head */</span>", 
"", 
"static void <a class=\"id\" href=\"#net_generic_release\">net_generic_release</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_generic\">net_generic</a> *<a class=\"id\" href=\"#ng\">ng</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ng\">ng</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rcu\">rcu</a>, struct <a class=\"id\" href=\"#net_generic\">net_generic</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ng\">ng</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#net_assign_generic\">net_assign_generic</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#id\">id</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_generic\">net_generic</a> *<a class=\"id\" href=\"#ng\">ng</a>, *<a class=\"id\" href=\"#old_ng\">old_ng</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#id\">id</a> == 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ng\">ng</a> = <a class=\"id\" href=\"#old_ng\">old_ng</a> = <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#gen\">gen</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_ng\">old_ng</a>-><a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#assign\">assign</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ng\">ng</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#net_generic\">net_generic</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> * sizeof(void *), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ng\">ng</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some synchronisation notes:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The net_generic explores the net-&gt;gen array inside rcu</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * read section. Besides once set the net-&gt;gen-&gt;ptr[x]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pointer never changes (see rules in netns/generic.h).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * That said, we simply duplicate this array and schedule</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the old copy for kfree after a grace period.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ng\">ng</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#ng\">ng</a>-><a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#old_ng\">old_ng</a>-><a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#old_ng\">old_ng</a>-><a class=\"id\" href=\"#len\">len</a> * sizeof(void*));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#gen\">gen</a>, <a class=\"id\" href=\"#ng\">ng</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#old_ng\">old_ng</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#net_generic_release\">net_generic_release</a>);", 
"<a class=\"id\" href=\"#assign\">assign</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ng\">ng</a>-><a class=\"id\" href=\"#ptr\">ptr</a>[<a class=\"id\" href=\"#id\">id</a> - 1] = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ops_init\">ops_init</a>(const struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a> && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#net_assign_generic\">net_assign_generic</a>(<a class=\"id\" href=\"#net\">net</a>, *<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#init\">init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#init\">init</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ops_free\">ops_free</a>(const struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a> && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a> = *<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#net_generic\">net_generic</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#id\">id</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ops_exit_list\">ops_exit_list</a>(const struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#exit\">exit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>, <a class=\"id\" href=\"#exit_list\">exit_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#exit\">exit</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#exit_batch\">exit_batch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#exit_batch\">exit_batch</a>(<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ops_free_list\">ops_free_list</a>(const struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#size\">size</a> && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>, <a class=\"id\" href=\"#exit_list\">exit_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops_free\">ops_free</a>(<a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * setup_net runs the initializers for the network namespace object.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__net_init\">__net_init</a> int <a class=\"id\" href=\"#setup_net\">setup_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Must be called with net_mutex held */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>, *<a class=\"id\" href=\"#saved_ops\">saved_ops</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#count\">count</a>, 1);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NETNS_REFCNT_DEBUG\">NETNS_REFCNT_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#use_count\">use_count</a>, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#pernet_list\">pernet_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ops_init\">ops_init</a>(<a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_undo\">out_undo</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<a class=\"id\" href=\"#out_undo\">out_undo</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Walk through the list backwards calling the exit functions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the pernet modules whose init functions did not fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#exit_list\">exit_list</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_ops\">saved_ops</a> = <a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_continue_reverse\">list_for_each_entry_continue_reverse</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#pernet_list\">pernet_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops_exit_list\">ops_exit_list</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#saved_ops\">saved_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_continue_reverse\">list_for_each_entry_continue_reverse</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#pernet_list\">pernet_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops_free_list\">ops_free_list</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>();", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#net_generic\">net_generic</a> *<a class=\"id\" href=\"#net_alloc_generic\">net_alloc_generic</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_generic\">net_generic</a> *<a class=\"id\" href=\"#ng\">ng</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#generic_size\">generic_size</a> = sizeof(struct <a class=\"id\" href=\"#net_generic\">net_generic</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INITIAL_NET_GEN_PTRS\">INITIAL_NET_GEN_PTRS</a> * sizeof(void *);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ng\">ng</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#generic_size\">generic_size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ng\">ng</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ng\">ng</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#INITIAL_NET_GEN_PTRS\">INITIAL_NET_GEN_PTRS</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ng\">ng</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#net_cachep\">net_cachep</a>;", 
"static struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#netns_wq\">netns_wq</a>;", 
"", 
"static struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net_alloc\">net_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_generic\">net_generic</a> *<a class=\"id\" href=\"#ng\">ng</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ng\">ng</a> = <a class=\"id\" href=\"#net_alloc_generic\">net_alloc_generic</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ng\">ng</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#net_cachep\">net_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#net\">net</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#gen\">gen</a>, <a class=\"id\" href=\"#ng\">ng</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ng\">ng</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#net_free\">net_free</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NETNS_REFCNT_DEBUG\">NETNS_REFCNT_DEBUG</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#use_count\">use_count</a>) != 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"network namespace not free! Usage: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#use_count\">use_count</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#gen\">gen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#net_cachep\">net_cachep</a>, <a class=\"id\" href=\"#net\">net</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net_create\">net_create</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rv\">rv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#net_alloc\">net_alloc</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#net\">net</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#setup_net\">setup_net</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rv\">rv</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#net_namespace_list\">net_namespace_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rv\">rv</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_free\">net_free</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#rv\">rv</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#copy_net_ns\">copy_net_ns</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#old_net\">old_net</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWNET\">CLONE_NEWNET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#get_net\">get_net</a>(<a class=\"id\" href=\"#old_net\">old_net</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net_create\">net_create</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#cleanup_list_lock\">cleanup_list_lock</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#cleanup_list\">cleanup_list</a>);  <span class=\"comment\">/* Must hold cleanup_list_lock to touch */</span>", 
"", 
"static void <a class=\"id\" href=\"#cleanup_net\">cleanup_net</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#net_kill_list\">net_kill_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Atomically snapshot the list of namespaces to cleanup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#cleanup_list_lock\">cleanup_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#cleanup_list\">cleanup_list</a>, &amp;<a class=\"id\" href=\"#net_kill_list\">net_kill_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#cleanup_list_lock\">cleanup_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't let anyone else find us. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#net_kill_list\">net_kill_list</a>, <a class=\"id\" href=\"#cleanup_list\">cleanup_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#exit_list\">exit_list</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Another CPU might be rcu-iterating the list, wait for it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This needs to be before calling the exit() notifiers, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the rcu_barrier() below isn't sufficient alone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Run all of the network namespace exit methods */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_reverse\">list_for_each_entry_reverse</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#pernet_list\">pernet_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops_exit_list\">ops_exit_list</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the net generic variables */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_reverse\">list_for_each_entry_reverse</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#pernet_list\">pernet_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops_free_list\">ops_free_list</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure there are no outstanding rcu callbacks using this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * network namespace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Finally it is safe to free my network namespace structure */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>, <a class=\"id\" href=\"#exit_list\">exit_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#exit_list\">exit_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_free\">net_free</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"static <a class=\"id\" href=\"#DECLARE_WORK\">DECLARE_WORK</a>(<a class=\"id\" href=\"#net_cleanup_work\">net_cleanup_work</a>, <a class=\"id\" href=\"#cleanup_net\">cleanup_net</a>);", 
"", 
"void <a class=\"id\" href=\"#__put_net\">__put_net</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Cleanup the network namespace in process context */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cleanup_list_lock\">cleanup_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#cleanup_list\">cleanup_list</a>, &amp;<a class=\"id\" href=\"#cleanup_list\">cleanup_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cleanup_list_lock\">cleanup_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_work\">queue_work</a>(<a class=\"id\" href=\"#netns_wq\">netns_wq</a>, &amp;<a class=\"id\" href=\"#net_cleanup_work\">net_cleanup_work</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__put_net\">__put_net</a>);", 
"", 
"#else", 
"struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#copy_net_ns\">copy_net_ns</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#old_net\">old_net</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWNET\">CLONE_NEWNET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#old_net\">old_net</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#get_net_ns_by_pid\">get_net_ns_by_pid</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lookup the network namespace */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ESRCH\">ESRCH</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#nsproxy\">nsproxy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsproxy\">nsproxy</a> = <a class=\"id\" href=\"#task_nsproxy\">task_nsproxy</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nsproxy\">nsproxy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#get_net\">get_net</a>(<a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#net_ns\">net_ns</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net\">net</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#get_net_ns_by_pid\">get_net_ns_by_pid</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#net_ns_init\">net_ns_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_generic\">net_generic</a> *<a class=\"id\" href=\"#ng\">ng</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net_cachep\">net_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"net_namespace\", sizeof(struct <a class=\"id\" href=\"#net\">net</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SMP_CACHE_BYTES\">SMP_CACHE_BYTES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create workqueue for cleanup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netns_wq\">netns_wq</a> = <a class=\"id\" href=\"#create_singlethread_workqueue\">create_singlethread_workqueue</a>(\"netns\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#netns_wq\">netns_wq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Could not create netns workq\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ng\">ng</a> = <a class=\"id\" href=\"#net_alloc_generic\">net_alloc_generic</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ng\">ng</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Could not allocate generic netns\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#init_net\">init_net</a>.<a class=\"id\" href=\"#gen\">gen</a>, <a class=\"id\" href=\"#ng\">ng</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#setup_net\">setup_net</a>(&amp;<a class=\"id\" href=\"#init_net\">init_net</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Could not setup the initial network namespace\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#init_net\">init_net</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#net_namespace_list\">net_namespace_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#net_mutex\">net_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#pure_initcall\">pure_initcall</a>(<a class=\"id\" href=\"#net_ns_init\">net_ns_init</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"static int <a class=\"id\" href=\"#__register_pernet_operations\">__register_pernet_operations</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#init\">init</a> || (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#id\">id</a> && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_net\">for_each_net</a>(<a class=\"id\" href=\"#net\">net</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ops_init\">ops_init</a>(<a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_undo\">out_undo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#exit_list\">exit_list</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_undo\">out_undo</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* If I have an error cleanup all namespaces I initialized */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops_exit_list\">ops_exit_list</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops_free_list\">ops_free_list</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__unregister_pernet_operations\">__unregister_pernet_operations</a>(struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_net\">for_each_net</a>(<a class=\"id\" href=\"#net\">net</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#exit_list\">exit_list</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops_exit_list\">ops_exit_list</a>(<a class=\"id\" href=\"#ops\">ops</a>, &amp;<a class=\"id\" href=\"#net_exit_list\">net_exit_list</a>);", 
];
xr_frag_insert('l/76/2a5d63659324a83446bd95be5a4fcbddce75e2.xr', __xr_tmp);
