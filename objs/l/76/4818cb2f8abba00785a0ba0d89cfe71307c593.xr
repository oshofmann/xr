var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_ca_event\">tcp_ca_event</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#CA_EVENT_FRTO\">CA_EVENT_FRTO</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_retrans\">undo_retrans</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_RETRANS\">TCPCB_RETRANS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &= ~<a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a> -= <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_verify_left_out\">tcp_verify_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Too bad if TCP was application limited */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>, <a class=\"id\" href=\"#tcp_packets_in_flight\">tcp_packets_in_flight</a>(<a class=\"id\" href=\"#tp\">tp</a>) + 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Earlier loss recovery underway (see RFC4138; Appendix B).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The last condition is necessary at least in tp-&gt;frto_counter case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_sackfrto\">tcp_is_sackfrto</a>(<a class=\"id\" href=\"#tp\">tp</a>) && (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_counter\">frto_counter</a> ||", 
"<span class=\"ts\"/>    ((1 << <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a>) &amp; (<a class=\"id\" href=\"#TCPF_CA_Recovery\">TCPF_CA_Recovery</a>|<a class=\"id\" href=\"#TCPF_CA_Loss\">TCPF_CA_Loss</a>))) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_highmark\">frto_highmark</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_highmark\">frto_highmark</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_ca_state\">tcp_set_ca_state</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#TCP_CA_Disorder\">TCP_CA_Disorder</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_counter\">frto_counter</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/* Enter Loss state after F-RTO was applied. Dupack arrived after RTO,</span>", 
"<span class=\"comment\"> * which indicates that we should follow the traditional RTO recovery,</span>", 
"<span class=\"comment\"> * i.e. mark everything lost and do go-back-N retransmission.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_enter_frto_loss\">tcp_enter_frto_loss</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#allowed_segments\">allowed_segments</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_reno\">tcp_is_reno</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_reset_reno_sack\">tcp_reset_reno_sack</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue\">tcp_for_write_queue</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &= ~<a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Count the retransmission made on RTO correctly (only when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * waiting for the first ACK and did not get it)...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_counter\">frto_counter</a> == 1) && !(<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#FLAG_DATA_ACKED\">FLAG_DATA_ACKED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For some reason this R-bit might get cleared? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ...enter this if branch just for the first segment */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> |= <a class=\"id\" href=\"#FLAG_DATA_ACKED\">FLAG_DATA_ACKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_RETRANS\">TCPCB_RETRANS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &= ~<a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Marking forward transmissions that were made after RTO lost</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can cause unnecessary retransmissions in some scenarios,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * SACK blocks will mitigate that in some but not in all cases.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We used to not mark them but it was causing break-ups with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * receivers that do only in-order receival.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TODO: we could detect presence of such receiver and select</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * different behavior per flow.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> |= <a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_high\">retransmit_high</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_verify_left_out\">tcp_verify_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#tcp_packets_in_flight\">tcp_packets_in_flight</a>(<a class=\"id\" href=\"#tp\">tp</a>) + <a class=\"id\" href=\"#allowed_segments\">allowed_segments</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_stamp\">snd_cwnd_stamp</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_counter\">frto_counter</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#bytes_acked\">bytes_acked</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned int, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sysctl_tcp_reordering\">sysctl_tcp_reordering</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_ca_state\">tcp_set_ca_state</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#TCP_CA_Loss\">TCP_CA_Loss</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_ECN_queue_cwr\">TCP_ECN_queue_cwr</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_clear_all_retrans_hints\">tcp_clear_all_retrans_hints</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_clear_retrans_partial\">tcp_clear_retrans_partial</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_retrans\">undo_retrans</a> = 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#tcp_clear_retrans\">tcp_clear_retrans</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_clear_retrans_partial\">tcp_clear_retrans_partial</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/* Enter Loss state. If \"how\" is not zero, forget all SACK information</span>", 
"<span class=\"comment\"> * and reset tags completely, otherwise preserve SACKs. If receiver</span>", 
"<span class=\"comment\"> * dropped its ofo queue, we will know this due to reneging detection.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_enter_loss\">tcp_enter_loss</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#how\">how</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reduce ssthresh if it has not yet been made inside this window. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> <= <a class=\"id\" href=\"#TCP_CA_Disorder\">TCP_CA_Disorder</a> || <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a> == <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> == <a class=\"id\" href=\"#TCP_CA_Loss\">TCP_CA_Loss</a> && !<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_retransmits\">icsk_retransmits</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#prior_ssthresh\">prior_ssthresh</a> = <a class=\"id\" href=\"#tcp_current_ssthresh\">tcp_current_ssthresh</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#ssthresh\">ssthresh</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_ca_event\">tcp_ca_event</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#CA_EVENT_LOSS\">CA_EVENT_LOSS</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a><span class=\"ts\"/>   = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a>   = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_stamp\">snd_cwnd_stamp</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#bytes_acked\">bytes_acked</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_clear_retrans_partial\">tcp_clear_retrans_partial</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_reno\">tcp_is_reno</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_reset_reno_sack\">tcp_reset_reno_sack</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#how\">how</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Push undo marker, if it was plain RTO and nothing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * was retransmitted. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_clear_all_retrans_hints\">tcp_clear_all_retrans_hints</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue\">tcp_for_write_queue</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_RETRANS\">TCPCB_RETRANS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &= (~<a class=\"id\" href=\"#TCPCB_TAGBITS\">TCPCB_TAGBITS</a>)|<a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a>&amp;<a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>) || <a class=\"id\" href=\"#how\">how</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &= ~<a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> |= <a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_high\">retransmit_high</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_verify_left_out\">tcp_verify_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned int, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sysctl_tcp_reordering\">sysctl_tcp_reordering</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_ca_state\">tcp_set_ca_state</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#TCP_CA_Loss\">TCP_CA_Loss</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_ECN_queue_cwr\">TCP_ECN_queue_cwr</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Abort F-RTO algorithm if one is in progress */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_counter\">frto_counter</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/* If ACK arrived pointing to a remembered SACK, it means that our</span>", 
"<span class=\"comment\"> * remembered SACKs do not reflect real state of receiver i.e.</span>", 
"<span class=\"comment\"> * receiver _host_ is heavily congested (or buggy).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do processing similar to RTO timeout.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tcp_check_sack_reneging\">tcp_check_sack_reneging</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#FLAG_SACK_RENEGING\">FLAG_SACK_RENEGING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_TCPSACKRENEGING\">LINUX_MIB_TCPSACKRENEGING</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_enter_loss\">tcp_enter_loss</a>(<a class=\"id\" href=\"#sk\">sk</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_retransmits\">icsk_retransmits</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_retransmit_skb\">tcp_retransmit_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk_reset_xmit_timer\">inet_csk_reset_xmit_timer</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#ICSK_TIME_RETRANS\">ICSK_TIME_RETRANS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a>, <a class=\"id\" href=\"#TCP_RTO_MAX\">TCP_RTO_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_fackets_out\">tcp_fackets_out</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tcp_is_reno\">tcp_is_reno</a>(<a class=\"id\" href=\"#tp\">tp</a>) ? <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> + 1 : <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Heurestics to calculate number of duplicate ACKs. There's no dupACKs</span>", 
"<span class=\"comment\"> * counter when SACK is enabled (without SACK, sacked_out is used for</span>", 
"<span class=\"comment\"> * that purpose).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Instead, with FACK TCP uses fackets_out that includes both SACKed</span>", 
"<span class=\"comment\"> * segments up to the highest received SACK block so far and holes in</span>", 
"<span class=\"comment\"> * between them.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * With reordering, holes may still be in flight, so RFC3517 recovery</span>", 
"<span class=\"comment\"> * uses pure sacked_out (total number of SACKed segments) even though</span>", 
"<span class=\"comment\"> * it violates the RFC that uses duplicate ACKs, often these are equal</span>", 
"<span class=\"comment\"> * but when e.g. out-of-window ACKs or packet duplication occurs,</span>", 
"<span class=\"comment\"> * they differ. Since neither occurs due to loss, TCP should really</span>", 
"<span class=\"comment\"> * ignore them.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_dupack_heuristics\">tcp_dupack_heuristics</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tcp_is_fack\">tcp_is_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>) ? <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a> : <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> + 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_skb_timedout\">tcp_skb_timedout</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a> - <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#when\">when</a> &gt; <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_head_timedout\">tcp_head_timedout</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a> &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#tcp_skb_timedout\">tcp_skb_timedout</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"}", 
"", 
"<span class=\"comment\">/* Linux NewReno/SACK/FACK/ECN state machine.</span>", 
"<span class=\"comment\"> * --------------------------------------</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * \"Open\"<span class=\"ts\"/>Normal state, no dubious events, fast path.</span>", 
"<span class=\"comment\"> * \"Disorder\"   In all the respects it is \"Open\",</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>but requires a bit more attention. It is entered when</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>we see some SACKs or dupacks. It is split of \"Open\"</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>mainly to move some processing from fast path to slow one.</span>", 
"<span class=\"comment\"> * \"CWR\"<span class=\"ts\"/>CWND was reduced due to some Congestion Notification event.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>It can be ECN, ICMP source quench, local device congestion.</span>", 
"<span class=\"comment\"> * \"Recovery\"<span class=\"ts\"/>CWND was reduced, we are fast-retransmitting.</span>", 
"<span class=\"comment\"> * \"Loss\"<span class=\"ts\"/>CWND was reduced due to RTO timeout or SACK reneging.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * tcp_fastretrans_alert() is entered:</span>", 
"<span class=\"comment\"> * - each incoming ACK, if state is not \"Open\"</span>", 
"<span class=\"comment\"> * - when arrived ACK is unusual, namely:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* SACK</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* Duplicate ACK.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* ECN ECE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Counting packets in flight is pretty simple.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in_flight = packets_out - left_out + retrans_out</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>packets_out is SND.NXT-SND.UNA counted in packets.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>retrans_out is number of retransmitted segments.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>left_out is number of segments left network, but not ACKed yet.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>left_out = sacked_out + lost_out</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     sacked_out: Packets, which arrived to receiver out of order</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   and hence not ACKed. With SACKs this number is simply</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   amount of SACKed data. Even without SACKs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   it is easy to give pretty reliable estimate of this number,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   counting duplicate ACKs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *       lost_out: Packets lost by network. TCP has no explicit</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   \"loss notification\" feedback from network (for now).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   It means that this number can be only _guessed_.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   Actually, it is the heuristics to predict lossage that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   distinguishes different algorithms.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>F.e. after RTO, when all the queue is considered as lost,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>lost_out = packets_out and in_flight = retrans_out.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Essentially, we have now two algorithms counting</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>lost packets.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>FACK: It is the simplest heuristics. As soon as we decided</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>that something is lost, we decide that _all_ not SACKed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>packets until the most forward SACK are lost. I.e.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>lost_out = fackets_out - sacked_out and left_out = fackets_out.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>It is absolutely correct estimate, if network does not reorder</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>packets. And it loses any connection to reality when reordering</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>takes place. We use FACK by default until reordering</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>is suspected on the path to this destination.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>NewReno: when Recovery is entered, we assume that one segment</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>is lost (classic Reno). While we are in Recovery and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>a partial ACK arrives, we assume that one more packet</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>is lost (NewReno). This heuristics are the same in NewReno</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>and SACK.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Imagine, that's all! Forget about all this shamanism about CWND inflation</span>", 
"<span class=\"comment\"> *  deflation etc. CWND is real congestion window, never inflated, changes</span>", 
"<span class=\"comment\"> *  only according to classic VJ rules.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Really tricky (and requiring careful tuning) part of algorithm</span>", 
"<span class=\"comment\"> * is hidden in functions tcp_time_to_recover() and tcp_xmit_retransmit_queue().</span>", 
"<span class=\"comment\"> * The first determines the moment _when_ we should reduce CWND and,</span>", 
"<span class=\"comment\"> * hence, slow down forward transmission. In fact, it determines the moment</span>", 
"<span class=\"comment\"> * when we decide that hole is caused by loss, rather than by a reorder.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * tcp_xmit_retransmit_queue() decides, _what_ we should retransmit to fill</span>", 
"<span class=\"comment\"> * holes, caused by lost packets.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * And the most logically complicated part of algorithm is undo</span>", 
"<span class=\"comment\"> * heuristics. We detect false retransmits due to both too early</span>", 
"<span class=\"comment\"> * fast retransmit (reordering) and underestimated RTO, analyzing</span>", 
"<span class=\"comment\"> * timestamps and D-SACKs. When we detect that some segments were</span>", 
"<span class=\"comment\"> * retransmitted by mistake and CWND reduction was wrong, we undo</span>", 
"<span class=\"comment\"> * window reduction and abort recovery phase. This logic is hidden</span>", 
"<span class=\"comment\"> * inside several functions named tcp_try_undo_&lt;something&gt;.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* This function decides, when we should leave Disordered state</span>", 
"<span class=\"comment\"> * and enter Recovery phase, reducing congestion window.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Main question: may we further continue forward transmission</span>", 
"<span class=\"comment\"> * with the same cwnd?</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tcp_time_to_recover\">tcp_time_to_recover</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#packets_out\">packets_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do not perform any recovery during F-RTO algorithm */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_counter\">frto_counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Trick#1: The loss is proven. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Not-A-Trick#2 : Classic rule... */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_dupack_heuristics\">tcp_dupack_heuristics</a>(<a class=\"id\" href=\"#tp\">tp</a>) &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Trick#3 : when we use RFC2988 timer restart, fast</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * retransmit can be triggered by timeout of queue head.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_fack\">tcp_is_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>) && <a class=\"id\" href=\"#tcp_head_timedout\">tcp_head_timedout</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Trick#4: It is still not OK... But will it be useful to delay</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * recovery more?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#packets_out\">packets_out</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#packets_out\">packets_out</a> <= <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> >= <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#__u32\">__u32</a>, <a class=\"id\" href=\"#packets_out\">packets_out</a>/2, <a class=\"id\" href=\"#sysctl_tcp_reordering\">sysctl_tcp_reordering</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#tcp_may_send_now\">tcp_may_send_now</a>(<a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have nothing to send. This connection is limited</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * either by receiver window or by application.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If a thin stream is detected, retransmit after first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * received dupack. Employ only if SACK is supported in order</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to avoid possible corner-case series of spurious retransmissions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use only if there are no unsent data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#thin_dupack\">thin_dupack</a> || <a class=\"id\" href=\"#sysctl_tcp_thin_dupack\">sysctl_tcp_thin_dupack</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tcp_stream_is_thin\">tcp_stream_is_thin</a>(<a class=\"id\" href=\"#tp\">tp</a>) && <a class=\"id\" href=\"#tcp_dupack_heuristics\">tcp_dupack_heuristics</a>(<a class=\"id\" href=\"#tp\">tp</a>) &gt; 1 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tcp_is_sack\">tcp_is_sack</a>(<a class=\"id\" href=\"#tp\">tp</a>) && !<a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* New heuristics: it is possible only after we switched to restart timer</span>", 
"<span class=\"comment\"> * each time when something is ACKed. Hence, we can detect timed out packets</span>", 
"<span class=\"comment\"> * during fast retransmit without falling to slow start.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Usefulness of this as is very questionable, since we should know which of</span>", 
"<span class=\"comment\"> * the segments is the next to timeout which is relatively expensive to find</span>", 
"<span class=\"comment\"> * in general case unless we add some data structure just for that. The</span>", 
"<span class=\"comment\"> * current approach certainly won't find the right one too often and when it</span>", 
"<span class=\"comment\"> * finally does find _something_ it usually marks large part of the window</span>", 
"<span class=\"comment\"> * right away (because a retransmission with a larger timestamp blocks the</span>", 
"<span class=\"comment\"> * loop from advancing). -ij</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_timeout_skbs\">tcp_timeout_skbs</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_is_fack\">tcp_is_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>) || !<a class=\"id\" href=\"#tcp_head_timedout\">tcp_head_timedout</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#scoreboard_skb_hint\">scoreboard_skb_hint</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#scoreboard_skb_hint\">scoreboard_skb_hint</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue_from\">tcp_for_write_queue_from</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_skb_timedout\">tcp_skb_timedout</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_skb_mark_lost\">tcp_skb_mark_lost</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#scoreboard_skb_hint\">scoreboard_skb_hint</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_verify_left_out\">tcp_verify_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Mark head of queue up as lost. With RFC3517 SACK, the packets is</span>", 
"<span class=\"comment\"> * is against sacked \"cnt\", otherwise it's against facked \"cnt\"</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tcp_mark_head_lost\">tcp_mark_head_lost</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#packets\">packets</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#oldcnt\">oldcnt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mss\">mss</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#packets\">packets</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#packets\">packets</a> &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_skb_hint\">lost_skb_hint</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_skb_hint\">lost_skb_hint</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_cnt_hint\">lost_cnt_hint</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue_from\">tcp_for_write_queue_from</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: do this better */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this is not the most efficient way to do this... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_skb_hint\">lost_skb_hint</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_cnt_hint\">lost_cnt_hint</a> = <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oldcnt\">oldcnt</a> = <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_fack\">tcp_is_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>) || <a class=\"id\" href=\"#tcp_is_reno\">tcp_is_reno</a>(<a class=\"id\" href=\"#tp\">tp</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a> &gt; <a class=\"id\" href=\"#packets\">packets</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#tcp_is_sack\">tcp_is_sack</a>(<a class=\"id\" href=\"#tp\">tp</a>) && !<a class=\"id\" href=\"#tcp_is_fack\">tcp_is_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#oldcnt\">oldcnt</a> >= <a class=\"id\" href=\"#packets\">packets</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#tcp_fragment\">tcp_fragment</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, (<a class=\"id\" href=\"#packets\">packets</a> - <a class=\"id\" href=\"#oldcnt\">oldcnt</a>) * <a class=\"id\" href=\"#mss\">mss</a>, <a class=\"id\" href=\"#mss\">mss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#packets\">packets</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_skb_mark_lost\">tcp_skb_mark_lost</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_verify_left_out\">tcp_verify_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Account newly detected lost packet(s) */</span>", 
"", 
"static void <a class=\"id\" href=\"#tcp_update_scoreboard\">tcp_update_scoreboard</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#fast_rexmit\">fast_rexmit</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_reno\">tcp_is_reno</a>(<a class=\"id\" href=\"#tp\">tp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_mark_head_lost\">tcp_mark_head_lost</a>(<a class=\"id\" href=\"#sk\">sk</a>, 1);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#tcp_is_fack\">tcp_is_fack</a>(<a class=\"id\" href=\"#tp\">tp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#lost\">lost</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#fackets_out\">fackets_out</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lost\">lost</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lost\">lost</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_mark_head_lost\">tcp_mark_head_lost</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#lost\">lost</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#sacked_upto\">sacked_upto</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sacked_upto\">sacked_upto</a> &lt; <a class=\"id\" href=\"#fast_rexmit\">fast_rexmit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sacked_upto\">sacked_upto</a> = <a class=\"id\" href=\"#fast_rexmit\">fast_rexmit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_mark_head_lost\">tcp_mark_head_lost</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#sacked_upto\">sacked_upto</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_timeout_skbs\">tcp_timeout_skbs</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"<span class=\"comment\">/* CWND moderation, preventing bursts due to too big ACKs</span>", 
"<span class=\"comment\"> * in dubious situations.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_moderate_cwnd\">tcp_moderate_cwnd</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#tcp_packets_in_flight\">tcp_packets_in_flight</a>(<a class=\"id\" href=\"#tp\">tp</a>) + <a class=\"id\" href=\"#tcp_max_burst\">tcp_max_burst</a>(<a class=\"id\" href=\"#tp\">tp</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_stamp\">snd_cwnd_stamp</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Lower bound on congestion window is slow start threshold</span>", 
"<span class=\"comment\"> * unless congestion avoidance choice decides to overide it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tcp_cwnd_min\">tcp_cwnd_min</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#ca_ops\">ca_ops</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ca_ops\">ca_ops</a>-><a class=\"id\" href=\"#min_cwnd\">min_cwnd</a> ? <a class=\"id\" href=\"#ca_ops\">ca_ops</a>-><a class=\"id\" href=\"#min_cwnd\">min_cwnd</a>(<a class=\"id\" href=\"#sk\">sk</a>) : <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Decrease cwnd each second ack. */</span>", 
"static void <a class=\"id\" href=\"#tcp_cwnd_down\">tcp_cwnd_down</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#decr\">decr</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a> + 1;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flag\">flag</a> &amp; (<a class=\"id\" href=\"#FLAG_ANY_PROGRESS\">FLAG_ANY_PROGRESS</a> | <a class=\"id\" href=\"#FLAG_DSACKING_ACK\">FLAG_DSACKING_ACK</a>)) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#tcp_is_reno\">tcp_is_reno</a>(<a class=\"id\" href=\"#tp\">tp</a>) && !(<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#FLAG_NOT_DUP\">FLAG_NOT_DUP</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a> = <a class=\"id\" href=\"#decr\">decr</a> &amp; 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#decr\">decr</a> >>= 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#decr\">decr</a> && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> &gt; <a class=\"id\" href=\"#tcp_cwnd_min\">tcp_cwnd_min</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> -= <a class=\"id\" href=\"#decr\">decr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>, <a class=\"id\" href=\"#tcp_packets_in_flight\">tcp_packets_in_flight</a>(<a class=\"id\" href=\"#tp\">tp</a>) + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_stamp\">snd_cwnd_stamp</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Nothing was retransmitted or returned timestamp is less</span>", 
"<span class=\"comment\"> * than timestamp of the first retransmission.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_packet_delayed\">tcp_packet_delayed</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_stamp\">retrans_stamp</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#saw_tstamp\">saw_tstamp</a> && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_tsecr\">rcv_tsecr</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_tsecr\">rcv_tsecr</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_stamp\">retrans_stamp</a>));", 
"}", 
"", 
"<span class=\"comment\">/* Undo procedures. */</span>", 
"", 
"#if <a class=\"id\" href=\"#FASTRETRANS_DEBUG\">FASTRETRANS_DEBUG</a> &gt; 1", 
"static void <a class=\"id\" href=\"#DBGUNDO\">DBGUNDO</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, const char *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> == <a class=\"id\" href=\"#AF_INET\">AF_INET</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Undo %s %pI4/%u c%u l%u ss%u/%u p%u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a>, <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_dport\">inet_dport</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>, <a class=\"id\" href=\"#tcp_left_out\">tcp_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#prior_ssthresh\">prior_ssthresh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a>);", 
"<span class=\"ts\"/>}", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> == <a class=\"id\" href=\"#AF_INET6\">AF_INET6</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ipv6_pinfo\">ipv6_pinfo</a> *<a class=\"id\" href=\"#np\">np</a> = <a class=\"id\" href=\"#inet6_sk\">inet6_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Undo %s %pI6/%u c%u l%u ss%u/%u p%u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#np\">np</a>-><a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_dport\">inet_dport</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>, <a class=\"id\" href=\"#tcp_left_out\">tcp_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#prior_ssthresh\">prior_ssthresh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DBGUNDO\">DBGUNDO</a>(<a class=\"id\" href=\"#x\">x</a>...) do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#tcp_undo_cwr\">tcp_undo_cwr</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, const int <a class=\"id\" href=\"#undo\">undo</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#prior_ssthresh\">prior_ssthresh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#undo_cwnd\">undo_cwnd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#undo_cwnd\">undo_cwnd</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a> << 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#undo\">undo</a> && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#prior_ssthresh\">prior_ssthresh</a> &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#prior_ssthresh\">prior_ssthresh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_ECN_withdraw_cwr\">TCP_ECN_withdraw_cwr</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_moderate_cwnd\">tcp_moderate_cwnd</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_stamp\">snd_cwnd_stamp</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_may_undo\">tcp_may_undo</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> && (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_retrans\">undo_retrans</a> || <a class=\"id\" href=\"#tcp_packet_delayed\">tcp_packet_delayed</a>(<a class=\"id\" href=\"#tp\">tp</a>));", 
"}", 
"", 
"<span class=\"comment\">/* People celebrate: \"We love our President!\" */</span>", 
"static int <a class=\"id\" href=\"#tcp_try_undo_recovery\">tcp_try_undo_recovery</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_may_undo\">tcp_may_undo</a>(<a class=\"id\" href=\"#tp\">tp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mib_idx\">mib_idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Happy end! We did not retransmit anything</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or our original transmission succeeded.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DBGUNDO\">DBGUNDO</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> == <a class=\"id\" href=\"#TCP_CA_Loss\">TCP_CA_Loss</a> ? \"loss\" : \"retrans\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_undo_cwr\">tcp_undo_cwr</a>(<a class=\"id\" href=\"#sk\">sk</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> == <a class=\"id\" href=\"#TCP_CA_Loss\">TCP_CA_Loss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPLOSSUNDO\">LINUX_MIB_TCPLOSSUNDO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPFULLUNDO\">LINUX_MIB_TCPFULLUNDO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#mib_idx\">mib_idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a> == <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a> && <a class=\"id\" href=\"#tcp_is_reno\">tcp_is_reno</a>(<a class=\"id\" href=\"#tp\">tp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Hold old state until something *above* high_seq</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is ACKed. For Reno it is MUST to prevent false</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fast retransmits (RFC2582). SACK TCP is safe. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_moderate_cwnd\">tcp_moderate_cwnd</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_ca_state\">tcp_set_ca_state</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#TCP_CA_Open\">TCP_CA_Open</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Try to undo cwnd reduction, because D-SACKs acked all retransmitted data */</span>", 
"static void <a class=\"id\" href=\"#tcp_try_undo_dsack\">tcp_try_undo_dsack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> && !<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_retrans\">undo_retrans</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DBGUNDO\">DBGUNDO</a>(<a class=\"id\" href=\"#sk\">sk</a>, \"D-SACK\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_undo_cwr\">tcp_undo_cwr</a>(<a class=\"id\" href=\"#sk\">sk</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_TCPDSACKUNDO\">LINUX_MIB_TCPDSACKUNDO</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* We can clear retrans_stamp when there are no retransmissions in the</span>", 
"<span class=\"comment\"> * window. It would seem that it is trivially available for us in</span>", 
"<span class=\"comment\"> * tp-&gt;retrans_out, however, that kind of assumptions doesn't consider</span>", 
"<span class=\"comment\"> * what will happen if errors occur when sending retransmission for the</span>", 
"<span class=\"comment\"> * second time. ...It could the that such segment has only</span>", 
"<span class=\"comment\"> * TCPCB_EVER_RETRANS set at the present time. It seems that checking</span>", 
"<span class=\"comment\"> * the head skb is enough except for some reneging corner cases that</span>", 
"<span class=\"comment\"> * are not worth the effort.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Main reason for all this complexity is the fact that connection dying</span>", 
"<span class=\"comment\"> * time now depends on the validity of the retrans_stamp, in particular,</span>", 
"<span class=\"comment\"> * that successive retransmissions of a segment must not advance</span>", 
"<span class=\"comment\"> * retrans_stamp under any conditions.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tcp_any_retrans_done\">tcp_any_retrans_done</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_out\">retrans_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb\">skb</a> && <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_EVER_RETRANS\">TCPCB_EVER_RETRANS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Undo during fast recovery after partial ACK. */</span>", 
"", 
"static int <a class=\"id\" href=\"#tcp_try_undo_partial\">tcp_try_undo_partial</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#acked\">acked</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Partial ACK arrived. Force Hoe's retransmit. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#failed\">failed</a> = <a class=\"id\" href=\"#tcp_is_reno\">tcp_is_reno</a>(<a class=\"id\" href=\"#tp\">tp</a>) || (<a class=\"id\" href=\"#tcp_fackets_out\">tcp_fackets_out</a>(<a class=\"id\" href=\"#tp\">tp</a>) &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#reordering\">reordering</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_may_undo\">tcp_may_undo</a>(<a class=\"id\" href=\"#tp\">tp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Plain luck! Hole if filled with delayed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * packet, rather than with a retransmit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_any_retrans_done\">tcp_any_retrans_done</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_stamp\">retrans_stamp</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_update_reordering\">tcp_update_reordering</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#tcp_fackets_out\">tcp_fackets_out</a>(<a class=\"id\" href=\"#tp\">tp</a>) + <a class=\"id\" href=\"#acked\">acked</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DBGUNDO\">DBGUNDO</a>(<a class=\"id\" href=\"#sk\">sk</a>, \"Hoe\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_undo_cwr\">tcp_undo_cwr</a>(<a class=\"id\" href=\"#sk\">sk</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_TCPPARTIALUNDO\">LINUX_MIB_TCPPARTIALUNDO</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* So... Do not make Hoe's retransmit yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the first packet was delayed, the rest</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ones are most probably delayed as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#failed\">failed</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#failed\">failed</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Undo during loss recovery after partial ACK. */</span>", 
"static int <a class=\"id\" href=\"#tcp_try_undo_loss\">tcp_try_undo_loss</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_may_undo\">tcp_may_undo</a>(<a class=\"id\" href=\"#tp\">tp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue\">tcp_for_write_queue</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a> &= ~<a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_clear_all_retrans_hints\">tcp_clear_all_retrans_hints</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DBGUNDO\">DBGUNDO</a>(<a class=\"id\" href=\"#sk\">sk</a>, \"partial loss\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_undo_cwr\">tcp_undo_cwr</a>(<a class=\"id\" href=\"#sk\">sk</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_TCPLOSSUNDO\">LINUX_MIB_TCPLOSSUNDO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_retransmits\">icsk_retransmits</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_is_sack\">tcp_is_sack</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_ca_state\">tcp_set_ca_state</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#TCP_CA_Open\">TCP_CA_Open</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_complete_cwr\">tcp_complete_cwr</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_stamp\">snd_cwnd_stamp</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_ca_event\">tcp_ca_event</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#CA_EVENT_COMPLETE_CWR\">CA_EVENT_COMPLETE_CWR</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_try_keep_open\">tcp_try_keep_open</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TCP_CA_Open\">TCP_CA_Open</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_left_out\">tcp_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>) || <a class=\"id\" href=\"#tcp_any_retrans_done\">tcp_any_retrans_done</a>(<a class=\"id\" href=\"#sk\">sk</a>) || <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#undo_marker\">undo_marker</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TCP_CA_Disorder\">TCP_CA_Disorder</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> != <a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_ca_state\">tcp_set_ca_state</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#high_seq\">high_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_try_to_open\">tcp_try_to_open</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_verify_left_out\">tcp_verify_left_out</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#frto_counter\">frto_counter</a> && !<a class=\"id\" href=\"#tcp_any_retrans_done\">tcp_any_retrans_done</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_stamp\">retrans_stamp</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#FLAG_ECE\">FLAG_ECE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_enter_cwr\">tcp_enter_cwr</a>(<a class=\"id\" href=\"#sk\">sk</a>, 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> != <a class=\"id\" href=\"#TCP_CA_CWR\">TCP_CA_CWR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_try_keep_open\">tcp_try_keep_open</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_moderate_cwnd\">tcp_moderate_cwnd</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_cwnd_down\">tcp_cwnd_down</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_mtup_probe_failed\">tcp_mtup_probe_failed</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#search_high\">search_high</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#probe_size\">probe_size</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#probe_size\">probe_size</a> = 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_mtup_probe_success\">tcp_mtup_probe_success</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: breaks with very large cwnd */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#prior_ssthresh\">prior_ssthresh</a> = <a class=\"id\" href=\"#tcp_current_ssthresh\">tcp_current_ssthresh</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tcp_mss_to_mtu\">tcp_mss_to_mtu</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mss_cache\">mss_cache</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#probe_size\">probe_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_stamp\">snd_cwnd_stamp</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a> = <a class=\"id\" href=\"#tcp_current_ssthresh\">tcp_current_ssthresh</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#search_low\">search_low</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#probe_size\">probe_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#probe_size\">probe_size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_sync_mss\">tcp_sync_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_pmtu_cookie\">icsk_pmtu_cookie</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Do a simple retransmit without using the backoff mechanisms in</span>", 
"<span class=\"comment\"> * tcp_timer. This is used for path mtu discovery.</span>", 
"<span class=\"comment\"> * The socket is already locked here.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_simple_retransmit\">tcp_simple_retransmit</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#tcp_current_mss\">tcp_current_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#prior_lost\">prior_lost</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue\">tcp_for_write_queue</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
];
xr_frag_insert('l/76/4818cb2f8abba00785a0ba0d89cfe71307c593.xr', __xr_tmp);
