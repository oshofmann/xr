var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/include/linux/sunrpc/svcauth.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RPC server-side authentication stuff.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1995, 1996 Olaf Kirch &lt;okir@monad.swb.de&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_SUNRPC_SVCAUTH_H_\">_LINUX_SUNRPC_SVCAUTH_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_SUNRPC_SVCAUTH_H_\">_LINUX_SUNRPC_SVCAUTH_H_</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sunrpc\">sunrpc</a>/<a class=\"id\" href=\"#msg_prot\">msg_prot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sunrpc\">sunrpc</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SVC_CRED_NGROUPS\">SVC_CRED_NGROUPS</a><span class=\"ts\"/>32", 
"struct <a class=\"id\" href=\"#svc_cred\">svc_cred</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_t\">uid_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cr_uid\">cr_uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cr_gid\">cr_gid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#group_info\">group_info</a><span class=\"ts\"/>*<a class=\"id\" href=\"#cr_group_info\">cr_group_info</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* forward decl */</span>", 
"struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a>;", 
"", 
"<span class=\"comment\">/* Authentication is done in the context of a domain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Currently, the nfs server uses the auth_domain to stand</span>", 
"<span class=\"comment\"> * for the \"client\" listed in /etc/exports.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * More generally, a domain might represent a group of clients using</span>", 
"<span class=\"comment\"> * a common mechanism for authentication and having a common mapping</span>", 
"<span class=\"comment\"> * between local identity (uid) and network identity.  All clients</span>", 
"<span class=\"comment\"> * in a domain have similar general access rights.  Each domain can</span>", 
"<span class=\"comment\"> * contain multiple principals which will have different specific right</span>", 
"<span class=\"comment\"> * based on normal Discretionary Access Control.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A domain is created by an authentication flavour module based on name</span>", 
"<span class=\"comment\"> * only.  Userspace then fills in detail on demand.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In the case of auth_unix and auth_null, the auth_domain is also</span>", 
"<span class=\"comment\"> * associated with entries in another cache representing the mapping</span>", 
"<span class=\"comment\"> * of ip addresses to the given client.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kref\">kref</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ref\">ref</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#auth_ops\">auth_ops</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#flavour\">flavour</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each authentication flavour registers an auth_ops</span>", 
"<span class=\"comment\"> * structure.</span>", 
"<span class=\"comment\"> * name is simply the name.</span>", 
"<span class=\"comment\"> * flavour gives the auth flavour. It determines where the flavour is registered</span>", 
"<span class=\"comment\"> * accept() is given a request and should verify it.</span>", 
"<span class=\"comment\"> *   It should inspect the authenticator and verifier, and possibly the data.</span>", 
"<span class=\"comment\"> *    If there is a problem with the authentication *authp should be set.</span>", 
"<span class=\"comment\"> *    The return value of accept() can indicate:</span>", 
"<span class=\"comment\"> *      OK - authorised. client and credential are set in rqstp.</span>", 
"<span class=\"comment\"> *           reqbuf points to arguments</span>", 
"<span class=\"comment\"> *           resbuf points to good place for results.  verfier</span>", 
"<span class=\"comment\"> *             is (probably) already in place.  Certainly space is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>       reserved for it.</span>", 
"<span class=\"comment\"> *      DROP - simply drop the request. It may have been deferred</span>", 
"<span class=\"comment\"> *      GARBAGE - rpc garbage_args error</span>", 
"<span class=\"comment\"> *      SYSERR - rpc system_err error</span>", 
"<span class=\"comment\"> *      DENIED - authp holds reason for denial.</span>", 
"<span class=\"comment\"> *      COMPLETE - the reply is encoded already and ready to be sent; no</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>further processing is necessary.  (This is used for processing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>null procedure calls which are used to set up encryption</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>contexts.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   accept is passed the proc number so that it can accept NULL rpc requests</span>", 
"<span class=\"comment\"> *   even if it cannot authenticate the client (as is sometimes appropriate).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * release() is given a request after the procedure has been run.</span>", 
"<span class=\"comment\"> *  It should sign/encrypt the results if needed</span>", 
"<span class=\"comment\"> * It should return:</span>", 
"<span class=\"comment\"> *    OK - the resbuf is ready to be sent</span>", 
"<span class=\"comment\"> *    DROP - the reply should be quitely dropped</span>", 
"<span class=\"comment\"> *    DENIED - authp holds a reason for MSG_DENIED</span>", 
"<span class=\"comment\"> *    SYSERR - rpc system_err</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * domain_release()</span>", 
"<span class=\"comment\"> *   This call releases a domain.</span>", 
"<span class=\"comment\"> * set_client()</span>", 
"<span class=\"comment\"> *   Givens a pending request (struct svc_rqst), finds and assigns</span>", 
"<span class=\"comment\"> *   an appropriate 'auth_domain' as the client.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#auth_ops\">auth_ops</a> {", 
"<span class=\"ts\"/>char *<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#flavour\">flavour</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#accept\">accept</a>)(struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#authp\">authp</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#release\">release</a>)(struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#domain_release\">domain_release</a>)(struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#set_client\">set_client</a>)(struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SVC_GARBAGE\">SVC_GARBAGE</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SVC_SYSERR\">SVC_SYSERR</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SVC_VALID\">SVC_VALID</a><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SVC_NEGATIVE\">SVC_NEGATIVE</a><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SVC_OK\">SVC_OK</a><span class=\"ts\"/><span class=\"ts\"/>5", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SVC_DROP\">SVC_DROP</a><span class=\"ts\"/>6", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SVC_DENIED\">SVC_DENIED</a><span class=\"ts\"/>7", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SVC_PENDING\">SVC_PENDING</a><span class=\"ts\"/>8", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SVC_COMPLETE\">SVC_COMPLETE</a><span class=\"ts\"/>9", 
"", 
"", 
"extern int<span class=\"ts\"/><a class=\"id\" href=\"#svc_authenticate\">svc_authenticate</a>(struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rqstp\">rqstp</a>, <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#authp\">authp</a>);", 
"extern int<span class=\"ts\"/><a class=\"id\" href=\"#svc_authorise\">svc_authorise</a>(struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rqstp\">rqstp</a>);", 
"extern int<span class=\"ts\"/><a class=\"id\" href=\"#svc_set_client\">svc_set_client</a>(struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rqstp\">rqstp</a>);", 
"extern int<span class=\"ts\"/><a class=\"id\" href=\"#svc_auth_register\">svc_auth_register</a>(<a class=\"id\" href=\"#rpc_authflavor_t\">rpc_authflavor_t</a> <a class=\"id\" href=\"#flavor\">flavor</a>, struct <a class=\"id\" href=\"#auth_ops\">auth_ops</a> *<a class=\"id\" href=\"#aops\">aops</a>);", 
"extern void<span class=\"ts\"/><a class=\"id\" href=\"#svc_auth_unregister\">svc_auth_unregister</a>(<a class=\"id\" href=\"#rpc_authflavor_t\">rpc_authflavor_t</a> <a class=\"id\" href=\"#flavor\">flavor</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> *<a class=\"id\" href=\"#unix_domain_find\">unix_domain_find</a>(char *<a class=\"id\" href=\"#name\">name</a>);", 
"extern void <a class=\"id\" href=\"#auth_domain_put\">auth_domain_put</a>(struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> *<a class=\"id\" href=\"#item\">item</a>);", 
"extern int <a class=\"id\" href=\"#auth_unix_add_addr\">auth_unix_add_addr</a>(struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#addr\">addr</a>, struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>);", 
"extern struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> *<a class=\"id\" href=\"#auth_domain_lookup\">auth_domain_lookup</a>(char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> *<a class=\"id\" href=\"#new\">new</a>);", 
"extern struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> *<a class=\"id\" href=\"#auth_domain_find\">auth_domain_find</a>(char *<a class=\"id\" href=\"#name\">name</a>);", 
"extern struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> *<a class=\"id\" href=\"#auth_unix_lookup\">auth_unix_lookup</a>(struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#addr\">addr</a>);", 
"extern int <a class=\"id\" href=\"#auth_unix_forget_old\">auth_unix_forget_old</a>(struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>);", 
"extern void <a class=\"id\" href=\"#svcauth_unix_purge\">svcauth_unix_purge</a>(void);", 
"extern void <a class=\"id\" href=\"#svcauth_unix_info_release\">svcauth_unix_info_release</a>(void *);", 
"extern int <a class=\"id\" href=\"#svcauth_unix_set_client\">svcauth_unix_set_client</a>(struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rqstp\">rqstp</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#hash_str\">hash_str</a>(char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hash\">hash</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#l\">l</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#name\">name</a>++))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = (char)<a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#len\">len</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = (<a class=\"id\" href=\"#l\">l</a> << 8) | <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> &amp; (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>/8-1))==0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#hash\">hash</a>^<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hash\">hash</a> >> (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#hash_mem\">hash_mem</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#length\">length</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hash\">hash</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#l\">l</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == <a class=\"id\" href=\"#length\">length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = (char)<a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#len\">len</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#buf\">buf</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = (<a class=\"id\" href=\"#l\">l</a> << 8) | <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> &amp; (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>/8-1))==0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#hash\">hash</a>^<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hash\">hash</a> >> (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_SUNRPC_SVCAUTH_H_ */</span>", 
];
xr_frag_insert('l/76/5ae1a7de9ffcf80d0845f65e802f3e9e906637.xr', __xr_tmp);
