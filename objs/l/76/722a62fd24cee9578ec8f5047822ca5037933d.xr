var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/ioctl.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp_lock\">smp_lock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#falloc\">falloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ioctls\">ioctls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* So that the fiemap access checks can't overflow on 32 bit machines. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIEMAP_MAX_EXTENTS\">FIEMAP_MAX_EXTENTS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a> / sizeof(struct <a class=\"id\" href=\"#fiemap_extent\">fiemap_extent</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vfs_ioctl - call filesystem specific ioctl methods</span>", 
"<span class=\"comment\"> * @filp:<span class=\"ts\"/>open file to invoke ioctl method on</span>", 
"<span class=\"comment\"> * @cmd:<span class=\"ts\"/>ioctl command to execute</span>", 
"<span class=\"comment\"> * @arg:<span class=\"ts\"/>command-specific argument for ioctl</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invokes filesystem specific -&gt;unlocked_ioctl, if one exists; otherwise</span>", 
"<span class=\"comment\"> * returns -ENOTTY.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, -errno on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#vfs_ioctl\">vfs_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> || !<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#ENOIOCTLCMD\">ENOIOCTLCMD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ioctl_fibmap\">ioctl_fibmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#block\">block</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do we support this mess? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#bmap\">bmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_RAWIO\">CAP_SYS_RAWIO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#bmap\">bmap</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * fiemap_fill_next_extent - Fiemap helper function</span>", 
"<span class=\"comment\"> * @fieinfo:<span class=\"ts\"/>Fiemap context passed into -&gt;fiemap</span>", 
"<span class=\"comment\"> * @logical:<span class=\"ts\"/>Extent logical start offset, in bytes</span>", 
"<span class=\"comment\"> * @phys:<span class=\"ts\"/>Extent physical start offset, in bytes</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>Extent length, in bytes</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>FIEMAP_EXTENT flags that describe this extent</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called from file system -&gt;fiemap callback. Will populate extent</span>", 
"<span class=\"comment\"> * info as passed in via arguments and copy to user memory. On</span>", 
"<span class=\"comment\"> * success, extent count on fieinfo is incremented.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, -errno on error, 1 if this was the last</span>", 
"<span class=\"comment\"> * extent that will fit in user array.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SET_UNKNOWN_FLAGS\">SET_UNKNOWN_FLAGS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#FIEMAP_EXTENT_DELALLOC\">FIEMAP_EXTENT_DELALLOC</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SET_NO_UNMOUNTED_IO_FLAGS\">SET_NO_UNMOUNTED_IO_FLAGS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#FIEMAP_EXTENT_DATA_ENCRYPTED\">FIEMAP_EXTENT_DATA_ENCRYPTED</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SET_NOT_ALIGNED_FLAGS\">SET_NOT_ALIGNED_FLAGS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#FIEMAP_EXTENT_DATA_TAIL\">FIEMAP_EXTENT_DATA_TAIL</a>|<a class=\"id\" href=\"#FIEMAP_EXTENT_DATA_INLINE\">FIEMAP_EXTENT_DATA_INLINE</a>)", 
"int <a class=\"id\" href=\"#fiemap_fill_next_extent\">fiemap_fill_next_extent</a>(struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> *<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#logical\">logical</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fiemap_extent\">fiemap_extent</a> <a class=\"id\" href=\"#extent\">extent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fiemap_extent\">fiemap_extent</a> *<a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#fieinfo\">fieinfo</a>-><a class=\"id\" href=\"#fi_extents_start\">fi_extents_start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* only count the extents */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fieinfo\">fieinfo</a>-><a class=\"id\" href=\"#fi_extents_max\">fi_extents_max</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fieinfo\">fieinfo</a>-><a class=\"id\" href=\"#fi_extents_mapped\">fi_extents_mapped</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FIEMAP_EXTENT_LAST\">FIEMAP_EXTENT_LAST</a>) ? 1 : 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fieinfo\">fieinfo</a>-><a class=\"id\" href=\"#fi_extents_mapped\">fi_extents_mapped</a> >= <a class=\"id\" href=\"#fieinfo\">fieinfo</a>-><a class=\"id\" href=\"#fi_extents_max\">fi_extents_max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SET_UNKNOWN_FLAGS\">SET_UNKNOWN_FLAGS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FIEMAP_EXTENT_UNKNOWN\">FIEMAP_EXTENT_UNKNOWN</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SET_NO_UNMOUNTED_IO_FLAGS\">SET_NO_UNMOUNTED_IO_FLAGS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FIEMAP_EXTENT_ENCODED\">FIEMAP_EXTENT_ENCODED</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SET_NOT_ALIGNED_FLAGS\">SET_NOT_ALIGNED_FLAGS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FIEMAP_EXTENT_NOT_ALIGNED\">FIEMAP_EXTENT_NOT_ALIGNED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#extent\">extent</a>, 0, sizeof(<a class=\"id\" href=\"#extent\">extent</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#extent\">extent</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> = <a class=\"id\" href=\"#logical\">logical</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#extent\">extent</a>.<a class=\"id\" href=\"#fe_physical\">fe_physical</a> = <a class=\"id\" href=\"#phys\">phys</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#extent\">extent</a>.<a class=\"id\" href=\"#fe_length\">fe_length</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#extent\">extent</a>.<a class=\"id\" href=\"#fe_flags\">fe_flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a> += <a class=\"id\" href=\"#fieinfo\">fieinfo</a>-><a class=\"id\" href=\"#fi_extents_mapped\">fi_extents_mapped</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#dest\">dest</a>, &amp;<a class=\"id\" href=\"#extent\">extent</a>, sizeof(<a class=\"id\" href=\"#extent\">extent</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fieinfo\">fieinfo</a>-><a class=\"id\" href=\"#fi_extents_mapped\">fi_extents_mapped</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fieinfo\">fieinfo</a>-><a class=\"id\" href=\"#fi_extents_mapped\">fi_extents_mapped</a> == <a class=\"id\" href=\"#fieinfo\">fieinfo</a>-><a class=\"id\" href=\"#fi_extents_max\">fi_extents_max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FIEMAP_EXTENT_LAST\">FIEMAP_EXTENT_LAST</a>) ? 1 : 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#fiemap_fill_next_extent\">fiemap_fill_next_extent</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * fiemap_check_flags - check validity of requested flags for fiemap</span>", 
"<span class=\"comment\"> * @fieinfo:<span class=\"ts\"/>Fiemap context passed into -&gt;fiemap</span>", 
"<span class=\"comment\"> * @fs_flags:<span class=\"ts\"/>Set of fiemap flags that the file system understands</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called from file system -&gt;fiemap callback. This will compute the</span>", 
"<span class=\"comment\"> * intersection of valid fiemap flags and those that the fs supports. That</span>", 
"<span class=\"comment\"> * value is then compared against the user supplied flags. In case of bad user</span>", 
"<span class=\"comment\"> * flags, the invalid values will be written into the fieinfo structure, and</span>", 
"<span class=\"comment\"> * -EBADR is returned, which tells ioctl_fiemap() to return those values to</span>", 
"<span class=\"comment\"> * userspace. For this reason, a return code of -EBADR should be preserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, -EBADR on bad flags.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fiemap_check_flags\">fiemap_check_flags</a>(struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> *<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#fs_flags\">fs_flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#incompat_flags\">incompat_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#incompat_flags\">incompat_flags</a> = <a class=\"id\" href=\"#fieinfo\">fieinfo</a>-><a class=\"id\" href=\"#fi_flags\">fi_flags</a> &amp; ~(<a class=\"id\" href=\"#FIEMAP_FLAGS_COMPAT\">FIEMAP_FLAGS_COMPAT</a> &amp; <a class=\"id\" href=\"#fs_flags\">fs_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#incompat_flags\">incompat_flags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fieinfo\">fieinfo</a>-><a class=\"id\" href=\"#fi_flags\">fi_flags</a> = <a class=\"id\" href=\"#incompat_flags\">incompat_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADR\">EBADR</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#fiemap_check_flags\">fiemap_check_flags</a>);", 
"", 
"static int <a class=\"id\" href=\"#fiemap_check_ranges\">fiemap_check_ranges</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#new_len\">new_len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#maxbytes\">maxbytes</a> = (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_maxbytes\">s_maxbytes</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#new_len\">new_len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#maxbytes\">maxbytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFBIG\">EFBIG</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Shrink request scope to what the fs can actually handle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#maxbytes\">maxbytes</a> || (<a class=\"id\" href=\"#maxbytes\">maxbytes</a> - <a class=\"id\" href=\"#len\">len</a>) &lt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new_len\">new_len</a> = <a class=\"id\" href=\"#maxbytes\">maxbytes</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ioctl_fiemap\">ioctl_fiemap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fiemap\">fiemap</a> <a class=\"id\" href=\"#fiemap\">fiemap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> <a class=\"id\" href=\"#fieinfo\">fieinfo</a> = { 0, };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#fiemap\">fiemap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#fiemap\">fiemap</a>, (struct <a class=\"id\" href=\"#fiemap\">fiemap</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   sizeof(struct <a class=\"id\" href=\"#fiemap\">fiemap</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#fm_extent_count\">fm_extent_count</a> &gt; <a class=\"id\" href=\"#FIEMAP_MAX_EXTENTS\">FIEMAP_MAX_EXTENTS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#fiemap_check_ranges\">fiemap_check_ranges</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#fm_start\">fm_start</a>, <a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#fm_length\">fm_length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fieinfo\">fieinfo</a>.<a class=\"id\" href=\"#fi_flags\">fi_flags</a> = <a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#fm_flags\">fm_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fieinfo\">fieinfo</a>.<a class=\"id\" href=\"#fi_extents_max\">fi_extents_max</a> = <a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#fm_extent_count\">fm_extent_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fieinfo\">fieinfo</a>.<a class=\"id\" href=\"#fi_extents_start\">fi_extents_start</a> = (struct <a class=\"id\" href=\"#fiemap_extent\">fiemap_extent</a> *)(<a class=\"id\" href=\"#arg\">arg</a> + sizeof(<a class=\"id\" href=\"#fiemap\">fiemap</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#fm_extent_count\">fm_extent_count</a> != 0 &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#fieinfo\">fieinfo</a>.<a class=\"id\" href=\"#fi_extents_start\">fi_extents_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#fieinfo\">fieinfo</a>.<a class=\"id\" href=\"#fi_extents_max\">fi_extents_max</a> * sizeof(struct <a class=\"id\" href=\"#fiemap_extent\">fiemap_extent</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fieinfo\">fieinfo</a>.<a class=\"id\" href=\"#fi_flags\">fi_flags</a> &amp; <a class=\"id\" href=\"#FIEMAP_FLAG_SYNC\">FIEMAP_FLAG_SYNC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filemap_write_and_wait\">filemap_write_and_wait</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#fiemap\">fiemap</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#fm_start\">fm_start</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#fm_flags\">fm_flags</a> = <a class=\"id\" href=\"#fieinfo\">fieinfo</a>.<a class=\"id\" href=\"#fi_flags\">fi_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#fm_mapped_extents\">fm_mapped_extents</a> = <a class=\"id\" href=\"#fieinfo\">fieinfo</a>.<a class=\"id\" href=\"#fi_extents_mapped\">fi_extents_mapped</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>((char *)<a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#fiemap\">fiemap</a>, sizeof(<a class=\"id\" href=\"#fiemap\">fiemap</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#logical_to_blk\">logical_to_blk</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#offset\">offset</a> >> <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#blk_to_logical\">blk_to_logical</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#blk\">blk</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#blk\">blk</a> << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __generic_block_fiemap - FIEMAP for block based inodes (no locking)</span>", 
"<span class=\"comment\"> * @inode: the inode to map</span>", 
"<span class=\"comment\"> * @fieinfo: the fiemap info struct that will be passed back to userspace</span>", 
"<span class=\"comment\"> * @start: where to start mapping in the inode</span>", 
"<span class=\"comment\"> * @len: how much space to map</span>", 
"<span class=\"comment\"> * @get_block: the fs's get_block function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This does FIEMAP for block based inodes.  Basically it will just loop</span>", 
"<span class=\"comment\"> * through get_block until we hit the number of extents we want to map, or we</span>", 
"<span class=\"comment\"> * go past the end of the file and hit a hole.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If it is possible to have data blocks beyond a hole past @inode-&gt;i_size, then</span>", 
"<span class=\"comment\"> * please do not use this function, it will stop at the first unmapped block</span>", 
"<span class=\"comment\"> * beyond i_size.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If you use this function directly, you need to do your own locking. Use</span>", 
"<span class=\"comment\"> * generic_block_fiemap if you want the locking done for you.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#__generic_block_fiemap\">__generic_block_fiemap</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> *<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> <a class=\"id\" href=\"#map_bh\">map_bh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start_blk\">start_blk</a>, <a class=\"id\" href=\"#last_blk\">last_blk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#isize\">isize</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#logical\">logical</a> = 0, <a class=\"id\" href=\"#phys\">phys</a> = 0, <a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#FIEMAP_EXTENT_MERGED\">FIEMAP_EXTENT_MERGED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#past_eof\">past_eof</a> = <a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#whole_file\">whole_file</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fiemap_check_flags\">fiemap_check_flags</a>(<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#FIEMAP_FLAG_SYNC\">FIEMAP_FLAG_SYNC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Either the i_mutex or other appropriate locking needs to be held</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since we expect isize to not change at all through the duration of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#isize\">isize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#whole_file\">whole_file</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#isize\">isize</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_blk\">start_blk</a> = <a class=\"id\" href=\"#logical_to_blk\">logical_to_blk</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_blk\">last_blk</a> = <a class=\"id\" href=\"#logical_to_blk\">logical_to_blk</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a> - 1);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we set b_size to the total size we want so it will map as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * many contiguous blocks as possible at once</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#map_bh\">map_bh</a>, 0, sizeof(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_size\">b_size</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_block\">get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#start_blk\">start_blk</a>, &amp;<a class=\"id\" href=\"#map_bh\">map_bh</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* HOLE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(&amp;<a class=\"id\" href=\"#map_bh\">map_bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_blk\">start_blk</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We want to handle the case where there is an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * allocated block at the front of the file, and then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * nothing but holes up to the end of the file properly,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to make sure that extent at the front gets properly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * marked with FIEMAP_EXTENT_LAST</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#past_eof\">past_eof</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#blk_to_logical\">blk_to_logical</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#start_blk\">start_blk</a>) >= <a class=\"id\" href=\"#isize\">isize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#past_eof\">past_eof</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * First hole after going past the EOF, this is our</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * last extent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#past_eof\">past_eof</a> && <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#FIEMAP_EXTENT_MERGED\">FIEMAP_EXTENT_MERGED</a>|<a class=\"id\" href=\"#FIEMAP_EXTENT_LAST\">FIEMAP_EXTENT_LAST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fiemap_fill_next_extent\">fiemap_fill_next_extent</a>(<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#logical\">logical</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fiemap_fill_next_extent\">fiemap_fill_next_extent</a>(<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#logical\">logical</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if we have holes up to/past EOF then we're done */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start_blk\">start_blk</a> &gt; <a class=\"id\" href=\"#last_blk\">last_blk</a> || <a class=\"id\" href=\"#past_eof\">past_eof</a> || <a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We have gone over the length of what we wanted to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * map, and it wasn't the entire file, so add the extent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we got last time and exit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is for the case where say we want to map all the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * way up to the second to the last block in a file, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the last block is a hole, making the second to last</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * block FIEMAP_EXTENT_LAST.  In this case we want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * see if there is a hole after the second to last block</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so we can mark it properly.  If we found data after</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we exceeded the length we were requesting, then we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * are good to go, just add the extent to the fieinfo</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and break</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start_blk\">start_blk</a> &gt; <a class=\"id\" href=\"#last_blk\">last_blk</a> && !<a class=\"id\" href=\"#whole_file\">whole_file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fiemap_fill_next_extent\">fiemap_fill_next_extent</a>(<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#logical\">logical</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if size != 0 then we know we already have an extent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to add, so add it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fiemap_fill_next_extent\">fiemap_fill_next_extent</a>(<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#logical\">logical</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#logical\">logical</a> = <a class=\"id\" href=\"#blk_to_logical\">blk_to_logical</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#start_blk\">start_blk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys\">phys</a> = <a class=\"id\" href=\"#blk_to_logical\">blk_to_logical</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_size\">b_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#FIEMAP_EXTENT_MERGED\">FIEMAP_EXTENT_MERGED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_blk\">start_blk</a> += <a class=\"id\" href=\"#logical_to_blk\">logical_to_blk</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we are past the EOF, then we need to make sure as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * soon as we find a hole that the last extent we found</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is marked with FIEMAP_EXTENT_LAST</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#past_eof\">past_eof</a> && <a class=\"id\" href=\"#logical\">logical</a> + <a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#isize\">isize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#past_eof\">past_eof</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/>} while (1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If ret is 1 then we just hit the end of the extent array */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__generic_block_fiemap\">__generic_block_fiemap</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_block_fiemap - FIEMAP for block based inodes</span>", 
"<span class=\"comment\"> * @inode: The inode to map</span>", 
"<span class=\"comment\"> * @fieinfo: The mapping information</span>", 
"<span class=\"comment\"> * @start: The initial block to map</span>", 
"<span class=\"comment\"> * @len: The length of the extect to attempt to map</span>", 
"<span class=\"comment\"> * @get_block: The block mapping function for the fs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Calls __generic_block_fiemap to map the inode, after taking</span>", 
"<span class=\"comment\"> * the inode's mutex lock.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#generic_block_fiemap\">generic_block_fiemap</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> *<a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__generic_block_fiemap\">__generic_block_fiemap</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#get_block\">get_block</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_block_fiemap\">generic_block_fiemap</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>  <span class=\"comment\">/*  CONFIG_BLOCK  */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This provides compatibility with legacy XFS pre-allocation ioctls</span>", 
"<span class=\"comment\"> * which predate the fallocate syscall.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Only the l_start, l_len and l_whence fields of the 'struct space_resv'</span>", 
"<span class=\"comment\"> * are used here, rest are ignored.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ioctl_preallocate\">ioctl_preallocate</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argp\">argp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#space_resv\">space_resv</a> <a class=\"id\" href=\"#sr\">sr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#sr\">sr</a>, <a class=\"id\" href=\"#argp\">argp</a>, sizeof(<a class=\"id\" href=\"#sr\">sr</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sr\">sr</a>.<a class=\"id\" href=\"#l_whence\">l_whence</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEEK_SET\">SEEK_SET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEEK_CUR\">SEEK_CUR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sr\">sr</a>.<a class=\"id\" href=\"#l_start\">l_start</a> += <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEEK_END\">SEEK_END</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sr\">sr</a>.<a class=\"id\" href=\"#l_start\">l_start</a> += <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_fallocate\">do_fallocate</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#FALLOC_FL_KEEP_SIZE\">FALLOC_FL_KEEP_SIZE</a>, <a class=\"id\" href=\"#sr\">sr</a>.<a class=\"id\" href=\"#l_start\">l_start</a>, <a class=\"id\" href=\"#sr\">sr</a>.<a class=\"id\" href=\"#l_len\">l_len</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#file_ioctl\">file_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a> = (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FIBMAP\">FIBMAP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ioctl_fibmap\">ioctl_fibmap</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FIONREAD\">FIONREAD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>) - <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FS_IOC_RESVSP\">FS_IOC_RESVSP</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FS_IOC_RESVSP64\">FS_IOC_RESVSP64</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ioctl_preallocate\">ioctl_preallocate</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vfs_ioctl\">vfs_ioctl</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ioctl_fionbio\">ioctl_fionbio</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argp\">argp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#on\">on</a>, <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#on\">on</a>, <a class=\"id\" href=\"#argp\">argp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> = <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__sparc__\">__sparc__</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* SunOS compatibility item. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a> != <a class=\"id\" href=\"#O_NDELAY\">O_NDELAY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> |= <a class=\"id\" href=\"#O_NDELAY\">O_NDELAY</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on\">on</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> |= <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &= ~<a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ioctl_fioasync\">ioctl_fioasync</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argp\">argp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#on\">on</a>, <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#on\">on</a>, <a class=\"id\" href=\"#argp\">argp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> = <a class=\"id\" href=\"#on\">on</a> ? <a class=\"id\" href=\"#FASYNC\">FASYNC</a> : 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Did FASYNC state change ? */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flag\">flag</a> ^ <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a>) &amp; <a class=\"id\" href=\"#FASYNC\">FASYNC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#fasync\">fasync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fasync() adjusts filp-&gt;f_flags */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#fasync\">fasync</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#on\">on</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a> &lt; 0 ? <a class=\"id\" href=\"#error\">error</a> : 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ioctl_fsfreeze\">ioctl_fsfreeze</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If filesystem doesn't support freeze feature, return. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#freeze_fs\">freeze_fs</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Freeze */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#freeze_super\">freeze_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ioctl_fsthaw\">ioctl_fsthaw</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Thaw */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#thaw_super\">thaw_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When you add any new common ioctls to the switches above and below</span>", 
"<span class=\"comment\"> * please update compat_sys_ioctl() too.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * do_vfs_ioctl() is not for drivers and not intended to be EXPORT_SYMBOL()'d.</span>", 
"<span class=\"comment\"> * It's just a simple helper for sys_ioctl and compat_sys_ioctl.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#do_vfs_ioctl\">do_vfs_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned int <a class=\"id\" href=\"#fd\">fd</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argp\">argp</a> = (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FIOCLEX\">FIOCLEX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_close_on_exec\">set_close_on_exec</a>(<a class=\"id\" href=\"#fd\">fd</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FIONCLEX\">FIONCLEX</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_close_on_exec\">set_close_on_exec</a>(<a class=\"id\" href=\"#fd\">fd</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FIONBIO\">FIONBIO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ioctl_fionbio\">ioctl_fionbio</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#argp\">argp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FIOASYNC\">FIOASYNC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ioctl_fioasync\">ioctl_fioasync</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#argp\">argp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FIOQSIZE\">FIOQSIZE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#res\">res</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode_get_bytes\">inode_get_bytes</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>((<a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#res\">res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(<a class=\"id\" href=\"#res\">res</a>)) ? -<a class=\"id\" href=\"#EFAULT\">EFAULT</a> : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FIFREEZE\">FIFREEZE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ioctl_fsfreeze\">ioctl_fsfreeze</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FITHAW\">FITHAW</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ioctl_fsthaw\">ioctl_fsthaw</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FS_IOC_FIEMAP\">FS_IOC_FIEMAP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ioctl_fiemap\">ioctl_fiemap</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FIGETBSZ\">FIGETBSZ</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a> = (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#file_ioctl\">file_ioctl</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#vfs_ioctl\">vfs_ioctl</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#ioctl\">ioctl</a>, unsigned int, <a class=\"id\" href=\"#fd\">fd</a>, unsigned int, <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long, <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fput_needed\">fput_needed</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#fget_light\">fget_light</a>(<a class=\"id\" href=\"#fd\">fd</a>, &amp;<a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filp\">filp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_file_ioctl\">security_file_ioctl</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fput\">out_fput</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_vfs_ioctl\">do_vfs_ioctl</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
" <a class=\"id\" href=\"#out_fput\">out_fput</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
];
xr_frag_insert('l/76/722a62fd24cee9578ec8f5047822ca5037933d.xr', __xr_tmp);
