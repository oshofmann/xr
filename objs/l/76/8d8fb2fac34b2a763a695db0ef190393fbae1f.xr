var __xr_tmp = [
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: nssearch - Namespace search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_ASL_COMPILER\">ACPI_ASL_COMPILER</a>", 
"#<a class=\"id\" href=\"#include\">include</a> \"amlcode.h\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_NAMESPACE\">ACPI_NAMESPACE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"nssearch\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_search_parent_tree\">acpi_ns_search_parent_tree</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#target_name\">target_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> **<a class=\"id\" href=\"#return_node\">return_node</a>);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_search_one_scope</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  target_name     - Ascii ACPI name to search for</span>", 
"<span class=\"comment\"> *              parent_node     - Starting node where search will begin</span>", 
"<span class=\"comment\"> *              Type            - Object type to match</span>", 
"<span class=\"comment\"> *              return_node     - Where the matched Named obj is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Search a single level of the namespace. Performs a</span>", 
"<span class=\"comment\"> *              simple search of the specified level, and does not add</span>", 
"<span class=\"comment\"> *              entries or search parents.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      Named object lists are built (and subsequently dumped) in the</span>", 
"<span class=\"comment\"> *      order in which the names are encountered during the namespace load;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      All namespace searching is linear in this implementation, but</span>", 
"<span class=\"comment\"> *      could be easily modified to support any improved search</span>", 
"<span class=\"comment\"> *      algorithm. However, the linear search was chosen for simplicity</span>", 
"<span class=\"comment\"> *      and because the trees are small and the other interpreter</span>", 
"<span class=\"comment\"> *      execution overhead is relatively high.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      Note: CPU execution analysis has shown that the AML interpreter spends</span>", 
"<span class=\"comment\"> *      a very small percentage of its time searching the namespace. Therefore,</span>", 
"<span class=\"comment\"> *      the linear search seems to be sufficient, as there would seem to be</span>", 
"<span class=\"comment\"> *      little value in improving the search.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_search_one_scope\">acpi_ns_search_one_scope</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#target_name\">target_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#parent_node\">parent_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> **<a class=\"id\" href=\"#return_node\">return_node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_search_one_scope\">ns_search_one_scope</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_DEBUG_OUTPUT\">ACPI_DEBUG_OUTPUT</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_LV_NAMES\">ACPI_LV_NAMES</a> &amp; <a class=\"id\" href=\"#acpi_dbg_level\">acpi_dbg_level</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#scope_name\">scope_name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scope_name\">scope_name</a> = <a class=\"id\" href=\"#acpi_ns_get_external_pathname\">acpi_ns_get_external_pathname</a>(<a class=\"id\" href=\"#parent_node\">parent_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scope_name\">scope_name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_NAMES\">ACPI_DB_NAMES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Searching %s (%p) For [%4.4s] (%s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#scope_name\">scope_name</a>, <a class=\"id\" href=\"#parent_node\">parent_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, &amp;<a class=\"id\" href=\"#target_name\">target_name</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_type_name\">acpi_ut_get_type_name</a>(<a class=\"id\" href=\"#type\">type</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#scope_name\">scope_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Search for name at this namespace level, which is to say that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must search for the name among the children of this object</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#parent_node\">parent_node</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#node\">node</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check for match against the name */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#integer\">integer</a> == <a class=\"id\" href=\"#target_name\">target_name</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Resolve a control method alias if any */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ns_get_type\">acpi_ns_get_type</a>(<a class=\"id\" href=\"#node\">node</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_TYPE_LOCAL_METHOD_ALIAS\">ACPI_TYPE_LOCAL_METHOD_ALIAS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#object\">object</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Found matching entry */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_NAMES\">ACPI_DB_NAMES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Name [%4.4s] (%s) %p found in scope [%4.4s] %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, &amp;<a class=\"id\" href=\"#target_name\">target_name</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_type_name\">acpi_ut_get_type_name</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#type\">type</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#parent_node\">parent_node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#parent_node\">parent_node</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#return_node\">return_node</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Didn't match name, move on to the next peer object */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#peer\">peer</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Searched entire namespace level, not found */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_NAMES\">ACPI_DB_NAMES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Name [%4.4s] (%s) not found in search in scope [%4.4s] \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%p first child %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, &amp;<a class=\"id\" href=\"#target_name\">target_name</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_type_name\">acpi_ut_get_type_name</a>(<a class=\"id\" href=\"#type\">type</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#parent_node\">parent_node</a>), <a class=\"id\" href=\"#parent_node\">parent_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#parent_node\">parent_node</a>-><a class=\"id\" href=\"#child\">child</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_search_parent_tree</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  target_name     - Ascii ACPI name to search for</span>", 
"<span class=\"comment\"> *              Node            - Starting node where search will begin</span>", 
"<span class=\"comment\"> *              Type            - Object type to match</span>", 
"<span class=\"comment\"> *              return_node     - Where the matched Node is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Called when a name has not been found in the current namespace</span>", 
"<span class=\"comment\"> *              level. Before adding it or giving up, ACPI scope rules require</span>", 
"<span class=\"comment\"> *              searching enclosing scopes in cases identified by acpi_ns_local().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              \"A name is located by finding the matching name in the current</span>", 
"<span class=\"comment\"> *              name space, and then in the parent name space. If the parent</span>", 
"<span class=\"comment\"> *              name space does not contain the name, the search continues</span>", 
"<span class=\"comment\"> *              recursively until either the name is found or the name space</span>", 
"<span class=\"comment\"> *              does not have a parent (the root of the name space). This</span>", 
"<span class=\"comment\"> *              indicates that the name is not found\" (From ACPI Specification,</span>", 
"<span class=\"comment\"> *              section 5.3)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_search_parent_tree\">acpi_ns_search_parent_tree</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#target_name\">target_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> **<a class=\"id\" href=\"#return_node\">return_node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#parent_node\">parent_node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_search_parent_tree\">ns_search_parent_tree</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent_node\">parent_node</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there is no parent (i.e., we are at the root) or type is \"local\",</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we won't be searching the parent tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent_node\">parent_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_NAMES\">ACPI_DB_NAMES</a>, \"[%4.4s] has no parent\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, &amp;<a class=\"id\" href=\"#target_name\">target_name</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ns_local\">acpi_ns_local</a>(<a class=\"id\" href=\"#type\">type</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_NAMES\">ACPI_DB_NAMES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"[%4.4s] type [%s] must be local to this scope (no parent search)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, &amp;<a class=\"id\" href=\"#target_name\">target_name</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_type_name\">acpi_ut_get_type_name</a>(<a class=\"id\" href=\"#type\">type</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Search the parent tree */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_NAMES\">ACPI_DB_NAMES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Searching parent [%4.4s] for [%4.4s]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#parent_node\">parent_node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, &amp;<a class=\"id\" href=\"#target_name\">target_name</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Search parents until target is found or we have backed up to the root */</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#parent_node\">parent_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Search parent scope. Use TYPE_ANY because we don't care about the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * object type at this point, we only care about the existence of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the actual name we are searching for. Typechecking comes later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ns_search_one_scope\">acpi_ns_search_one_scope</a>(<a class=\"id\" href=\"#target_name\">target_name</a>, <a class=\"id\" href=\"#parent_node\">parent_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ACPI_TYPE_ANY\">ACPI_TYPE_ANY</a>, <a class=\"id\" href=\"#return_node\">return_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not found here, go up another level (until we reach the root) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent_node\">parent_node</a> = <a class=\"id\" href=\"#parent_node\">parent_node</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Not found in parent tree */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_search_and_enter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  target_name         - Ascii ACPI name to search for (4 chars)</span>", 
"<span class=\"comment\"> *              walk_state          - Current state of the walk</span>", 
"<span class=\"comment\"> *              Node                - Starting node where search will begin</span>", 
"<span class=\"comment\"> *              interpreter_mode    - Add names only in ACPI_MODE_LOAD_PASS_x.</span>", 
"<span class=\"comment\"> *                                    Otherwise,search only.</span>", 
"<span class=\"comment\"> *              Type                - Object type to match</span>", 
"<span class=\"comment\"> *              Flags               - Flags describing the search restrictions</span>", 
"<span class=\"comment\"> *              return_node         - Where the Node is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Search for a name segment in a single namespace level,</span>", 
"<span class=\"comment\"> *              optionally adding it if it is not found. If the passed</span>", 
"<span class=\"comment\"> *              Type is not Any and the type previously stored in the</span>", 
"<span class=\"comment\"> *              entry was Any (i.e. unknown), update the stored type.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              In ACPI_IMODE_EXECUTE, search only.</span>", 
"<span class=\"comment\"> *              In other modes, search and add if not found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_search_and_enter\">acpi_ns_search_and_enter</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#target_name\">target_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#acpi_interpreter_mode\">acpi_interpreter_mode</a> <a class=\"id\" href=\"#interpreter_mode\">interpreter_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> **<a class=\"id\" href=\"#return_node\">return_node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#new_node\">new_node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_search_and_enter\">ns_search_and_enter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter validation */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a> || !<a class=\"id\" href=\"#target_name\">target_name</a> || !<a class=\"id\" href=\"#return_node\">return_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Null parameter: Node %p Name 0x%X ReturnNode %p\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#target_name\">target_name</a>, <a class=\"id\" href=\"#return_node\">return_node</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Name must consist of valid ACPI characters. We will repair the name if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * necessary because we don't want to abort because of this, but we want</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all namespace names to be printable. A warning message is appropriate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This issue came up because there are in fact machines that exhibit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this problem, and we want to be able to enable ACPI support for them,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even though there are a few bad names.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_ut_valid_acpi_name\">acpi_ut_valid_acpi_name</a>(<a class=\"id\" href=\"#target_name\">target_name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target_name\">target_name</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_repair_name\">acpi_ut_repair_name</a>(<a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, &amp;<a class=\"id\" href=\"#target_name\">target_name</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Report warning only if in strict mode or debug mode */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_gbl_enable_interpreter_slack\">acpi_gbl_enable_interpreter_slack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Found bad character(s) in name, repaired: [%4.4s]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, &amp;<a class=\"id\" href=\"#target_name\">target_name</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Found bad character(s) in name, repaired: [%4.4s]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, &amp;<a class=\"id\" href=\"#target_name\">target_name</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try to find the name in the namespace level specified by the caller */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#return_node\">return_node</a> = <a class=\"id\" href=\"#ACPI_ENTRY_NOT_FOUND\">ACPI_ENTRY_NOT_FOUND</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_search_one_scope\">acpi_ns_search_one_scope</a>(<a class=\"id\" href=\"#target_name\">target_name</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#return_node\">return_node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we found it AND the request specifies that a find is an error,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return the error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_OK\">AE_OK</a>) && (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NS_ERROR_IF_FOUND\">ACPI_NS_ERROR_IF_FOUND</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_ALREADY_EXISTS\">AE_ALREADY_EXISTS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Either found it or there was an error: finished either way */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The name was not found. If we are NOT performing the first pass</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (name entry) of loading the namespace, search the parent tree (all the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * way to the root if necessary.) We don't want to perform the parent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * search when the namespace is actually being loaded. We want to perform</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the search when namespace references are being resolved (load pass 2)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and during the execution phase.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#interpreter_mode\">interpreter_mode</a> != <a class=\"id\" href=\"#ACPI_IMODE_LOAD_PASS1\">ACPI_IMODE_LOAD_PASS1</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NS_SEARCH_PARENT\">ACPI_NS_SEARCH_PARENT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Not found at this level - search parent tree according to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ACPI specification</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ns_search_parent_tree\">acpi_ns_search_parent_tree</a>(<a class=\"id\" href=\"#target_name\">target_name</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#return_node\">return_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* In execute mode, just search, never add names. Exit now */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#interpreter_mode\">interpreter_mode</a> == <a class=\"id\" href=\"#ACPI_IMODE_EXECUTE\">ACPI_IMODE_EXECUTE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_NAMES\">ACPI_DB_NAMES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%4.4s Not found in %p [Not adding]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, &amp;<a class=\"id\" href=\"#target_name\">target_name</a>), <a class=\"id\" href=\"#node\">node</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create the new named object */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_node\">new_node</a> = <a class=\"id\" href=\"#acpi_ns_create_node\">acpi_ns_create_node</a>(<a class=\"id\" href=\"#target_name\">target_name</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_node\">new_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_ASL_COMPILER\">ACPI_ASL_COMPILER</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Node is an object defined by an External() statement */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NS_EXTERNAL\">ACPI_NS_EXTERNAL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_node\">new_node</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ANOBJ_IS_EXTERNAL\">ANOBJ_IS_EXTERNAL</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_NS_TEMPORARY\">ACPI_NS_TEMPORARY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_node\">new_node</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ANOBJ_TEMPORARY\">ANOBJ_TEMPORARY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Install the new object into the parent's list of children */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_install_node\">acpi_ns_install_node</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#new_node\">new_node</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#return_node\">return_node</a> = <a class=\"id\" href=\"#new_node\">new_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
];
xr_frag_insert('l/76/8d8fb2fac34b2a763a695db0ef190393fbae1f.xr', __xr_tmp);
