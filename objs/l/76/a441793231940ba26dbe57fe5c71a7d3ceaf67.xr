var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Performance events core code:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008 Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008-2009 Red Hat, Inc., Ingo Molnar</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008-2009 Red Hat, Inc., Peter Zijlstra &lt;pzijlstr@redhat.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright  ©  2009 Paul Mackerras, IBM Corp. &lt;paulus@au1.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For licensing details see kernel-base/COPYING</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysfs\">sysfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dcache\">dcache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmstat\">vmstat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#anon_inodes\">anon_inodes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace_event\">ftrace_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hw_breakpoint\">hw_breakpoint</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#irq_regs\">irq_regs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each CPU has a list of per CPU events:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>, <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"", 
"int <a class=\"id\" href=\"#perf_max_events\">perf_max_events</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"static int <a class=\"id\" href=\"#perf_reserved_percpu\">perf_reserved_percpu</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static int <a class=\"id\" href=\"#perf_overcommit\">perf_overcommit</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#nr_events\">nr_events</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#nr_mmap_events\">nr_mmap_events</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#nr_comm_events\">nr_comm_events</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#nr_task_events\">nr_task_events</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * perf event paranoia level:</span>", 
"<span class=\"comment\"> *  -1 - not paranoid at all</span>", 
"<span class=\"comment\"> *   0 - disallow raw tracepoint access for unpriv</span>", 
"<span class=\"comment\"> *   1 - disallow cpu events for unpriv</span>", 
"<span class=\"comment\"> *   2 - disallow kernel profiling for unpriv</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sysctl_perf_event_paranoid\">sysctl_perf_event_paranoid</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"", 
"int <a class=\"id\" href=\"#sysctl_perf_event_mlock\">sysctl_perf_event_mlock</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 512; <span class=\"comment\">/* 'free' kb per user */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * max perf event sample rate</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sysctl_perf_event_sample_rate\">sysctl_perf_event_sample_rate</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 100000;", 
"", 
"static <a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> <a class=\"id\" href=\"#perf_event_id\">perf_event_id</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lock for (sysadmin-configurable) event reservations:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#perf_resource_lock\">perf_resource_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Architecture provided APIs - weak aliases:</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#__weak\">__weak</a> const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#hw_perf_event_init\">hw_perf_event_init</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#hw_perf_disable\">hw_perf_disable</a>(void)<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#barrier\">barrier</a>(); }", 
"void <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#hw_perf_enable\">hw_perf_enable</a>(void)<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#barrier\">barrier</a>(); }", 
"", 
"void <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#perf_event_print_debug\">perf_event_print_debug</a>(void)<span class=\"ts\"/>{ }", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#perf_disable_count\">perf_disable_count</a>);", 
"", 
"void <a class=\"id\" href=\"#perf_disable\">perf_disable</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_disable_count\">perf_disable_count</a>)++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hw_perf_disable\">hw_perf_disable</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_enable\">perf_enable</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_disable_count\">perf_disable_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hw_perf_enable\">hw_perf_enable</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#get_ctx\">get_ctx</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#refcount\">refcount</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_ctx\">free_ctx</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#put_ctx\">put_ctx</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#refcount\">refcount</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_ctx\">put_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#free_ctx\">free_ctx</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#unclone_ctx\">unclone_ctx</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_ctx\">put_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we inherit events we want to return the parent event id</span>", 
"<span class=\"comment\"> * to userspace.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#primary_event_id\">primary_event_id</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get the perf_event_context for a task and lock it.</span>", 
"<span class=\"comment\"> * This has to cope with with the fact that until it is locked,</span>", 
"<span class=\"comment\"> * the context could get moved to another task.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *", 
"<a class=\"id\" href=\"#perf_lock_task_context\">perf_lock_task_context</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this context is a clone of another, it might</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * get swapped for another underneath us by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * perf_event_task_sched_out, though the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rcu_read_lock() protects us from any context</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * getting freed.  Lock the context and check if it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * got swapped before we could get the lock, and retry</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if so.  If we locked the right context, then it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can't get swapped on us any more.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a> != <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#refcount\">refcount</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get the context for a task and increment its pin_count so it</span>", 
"<span class=\"comment\"> * can't get swapped to another task.  This also increments its</span>", 
"<span class=\"comment\"> * reference count so that the context can't get freed.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#perf_pin_task_context\">perf_pin_task_context</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#perf_lock_task_context\">perf_lock_task_context</a>(<a class=\"id\" href=\"#task\">task</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#pin_count\">pin_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_unpin_context\">perf_unpin_context</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>--<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#pin_count\">pin_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_ctx\">put_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#perf_clock\">perf_clock</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#local_clock\">local_clock</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update the record of the current time in a context.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#update_context_time\">update_context_time</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#perf_clock\">perf_clock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a> += <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#timestamp\">timestamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#timestamp\">timestamp</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update the total_time_enabled and total_time_running fields for a event.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#update_event_times\">update_event_times</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#run_end\">run_end</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#is_active\">is_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#run_end\">run_end</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#run_end\">run_end</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_stopped\">tstamp_stopped</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a> = <a class=\"id\" href=\"#run_end\">run_end</a> - <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_enabled\">tstamp_enabled</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#run_end\">run_end</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_stopped\">tstamp_stopped</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#run_end\">run_end</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#total_time_running\">total_time_running</a> = <a class=\"id\" href=\"#run_end\">run_end</a> - <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_running\">tstamp_running</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update total_time_enabled and total_time_running for all events in a group.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#update_group_times\">update_group_times</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#leader\">leader</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_event_times\">update_event_times</a>(<a class=\"id\" href=\"#leader\">leader</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_event_times\">update_event_times</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> *", 
"<a class=\"id\" href=\"#ctx_group_list\">ctx_group_list</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#pinned\">pinned</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#pinned_groups\">pinned_groups</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a event from the lists for its context.</span>", 
"<span class=\"comment\"> * Must be called with ctx-&gt;mutex and ctx-&gt;lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#list_add_event\">list_add_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attach_state\">attach_state</a> &amp; <a class=\"id\" href=\"#PERF_ATTACH_CONTEXT\">PERF_ATTACH_CONTEXT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attach_state\">attach_state</a> |= <a class=\"id\" href=\"#PERF_ATTACH_CONTEXT\">PERF_ATTACH_CONTEXT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're a stand alone event or group leader, we go to the context</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list, group events are kept attached to the group so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * perf_group_detach can, at all times, locate all siblings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> == <a class=\"id\" href=\"#event\">event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_software_event\">is_software_event</a>(<a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_flags\">group_flags</a> |= <a class=\"id\" href=\"#PERF_GROUP_SOFTWARE\">PERF_GROUP_SOFTWARE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#ctx_group_list\">ctx_group_list</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#event_entry\">event_entry</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_events\">nr_events</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#inherit_stat\">inherit_stat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_stat\">nr_stat</a>++;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_group_attach\">perf_group_attach</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#group_leader\">group_leader</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attach_state\">attach_state</a> &amp; <a class=\"id\" href=\"#PERF_ATTACH_GROUP\">PERF_ATTACH_GROUP</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attach_state\">attach_state</a> |= <a class=\"id\" href=\"#PERF_ATTACH_GROUP\">PERF_ATTACH_GROUP</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_leader\">group_leader</a> == <a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#group_flags\">group_flags</a> &amp; <a class=\"id\" href=\"#PERF_GROUP_SOFTWARE\">PERF_GROUP_SOFTWARE</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#is_software_event\">is_software_event</a>(<a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#group_flags\">group_flags</a> &= ~<a class=\"id\" href=\"#PERF_GROUP_SOFTWARE\">PERF_GROUP_SOFTWARE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>, &amp;<a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#nr_siblings\">nr_siblings</a>++;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a event from the lists for its context.</span>", 
"<span class=\"comment\"> * Must be called with ctx-&gt;mutex and ctx-&gt;lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#list_del_event\">list_del_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can have double detach due to exit/hot-unplug + close.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attach_state\">attach_state</a> &amp; <a class=\"id\" href=\"#PERF_ATTACH_CONTEXT\">PERF_ATTACH_CONTEXT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attach_state\">attach_state</a> &= ~<a class=\"id\" href=\"#PERF_ATTACH_CONTEXT\">PERF_ATTACH_CONTEXT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_events\">nr_events</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#inherit_stat\">inherit_stat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_stat\">nr_stat</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#event_entry\">event_entry</a>);", 
];
xr_frag_insert('l/76/a441793231940ba26dbe57fe5c71a7d3ceaf67.xr', __xr_tmp);
