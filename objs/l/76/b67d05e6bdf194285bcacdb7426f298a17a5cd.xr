var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_KMOD_H__\">__LINUX_KMOD_H__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_KMOD_H__\">__LINUX_KMOD_H__</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>include/linux/kmod.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *      it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *      the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> *      (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *      but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *      GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *      along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> *      Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KMOD_PATH_LEN\">KMOD_PATH_LEN</a> 256", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"extern char <a class=\"id\" href=\"#modprobe_path\">modprobe_path</a>[]; <span class=\"comment\">/* for sysctl */</span>", 
"<span class=\"comment\">/* modprobe exit status on success, -ve on error.  Return value</span>", 
"<span class=\"comment\"> * usually useless though. */</span>", 
"extern int <a class=\"id\" href=\"#__request_module\">__request_module</a>(<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#wait\">wait</a>, const char *<a class=\"id\" href=\"#name\">name</a>, ...) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#format\">format</a>(<a class=\"id\" href=\"#printf\">printf</a>, 2, 3)));", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#request_module\">request_module</a>(<a class=\"id\" href=\"#mod\">mod</a>...) <a class=\"id\" href=\"#__request_module\">__request_module</a>(<a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#mod\">mod</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#request_module_nowait\">request_module_nowait</a>(<a class=\"id\" href=\"#mod\">mod</a>...) <a class=\"id\" href=\"#__request_module\">__request_module</a>(<a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#mod\">mod</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#try_then_request_module\">try_then_request_module</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#mod\">mod</a>...) \\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>) ?: (<a class=\"id\" href=\"#__request_module\">__request_module</a>(<a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#mod\">mod</a>), (<a class=\"id\" href=\"#x\">x</a>)))", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#request_module\">request_module</a>(const char *<a class=\"id\" href=\"#name\">name</a>, ...) { return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#request_module_nowait\">request_module_nowait</a>(const char *<a class=\"id\" href=\"#name\">name</a>, ...) { return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>; }", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#try_then_request_module\">try_then_request_module</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#mod\">mod</a>...) (<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"struct <a class=\"id\" href=\"#key\">key</a>;", 
"struct <a class=\"id\" href=\"#file\">file</a>;", 
"", 
"enum <a class=\"id\" href=\"#umh_wait\">umh_wait</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UMH_NO_WAIT\">UMH_NO_WAIT</a> = -1,<span class=\"ts\"/><span class=\"comment\">/* don't wait at all */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UMH_WAIT_EXEC\">UMH_WAIT_EXEC</a> = 0,<span class=\"ts\"/><span class=\"comment\">/* wait for the exec, but not the process */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UMH_WAIT_PROC\">UMH_WAIT_PROC</a> = 1,<span class=\"ts\"/><span class=\"comment\">/* wait for the process to complete */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#complete\">complete</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#argv\">argv</a>;", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#envp\">envp</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#umh_wait\">umh_wait</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#init\">init</a>)(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#cleanup\">cleanup</a>)(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Allocate a subprocess_info structure */</span>", 
"struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#call_usermodehelper_setup\">call_usermodehelper_setup</a>(char *<a class=\"id\" href=\"#path\">path</a>, char **<a class=\"id\" href=\"#argv\">argv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char **<a class=\"id\" href=\"#envp\">envp</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"comment\">/* Set various pieces of state into the subprocess_info structure */</span>", 
"void <a class=\"id\" href=\"#call_usermodehelper_setfns\">call_usermodehelper_setfns</a>(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int (*<a class=\"id\" href=\"#init\">init</a>)(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>    void (*<a class=\"id\" href=\"#cleanup\">cleanup</a>)(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"comment\">/* Actually execute the sub-process */</span>", 
"int <a class=\"id\" href=\"#call_usermodehelper_exec\">call_usermodehelper_exec</a>(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>, enum <a class=\"id\" href=\"#umh_wait\">umh_wait</a> <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"comment\">/* Free the subprocess_info. This is only needed if you're not going</span>", 
"<span class=\"comment\">   to call call_usermodehelper_exec */</span>", 
"void <a class=\"id\" href=\"#call_usermodehelper_freeinfo\">call_usermodehelper_freeinfo</a>(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#call_usermodehelper_fns\">call_usermodehelper_fns</a>(char *<a class=\"id\" href=\"#path\">path</a>, char **<a class=\"id\" href=\"#argv\">argv</a>, char **<a class=\"id\" href=\"#envp\">envp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#umh_wait\">umh_wait</a> <a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#init\">init</a>)(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#cleanup\">cleanup</a>)(struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *), void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#subprocess_info\">subprocess_info</a> *<a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> = (<a class=\"id\" href=\"#wait\">wait</a> == <a class=\"id\" href=\"#UMH_NO_WAIT\">UMH_NO_WAIT</a>) ? <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a> : <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#call_usermodehelper_setup\">call_usermodehelper_setup</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#argv\">argv</a>, <a class=\"id\" href=\"#envp\">envp</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_usermodehelper_setfns\">call_usermodehelper_setfns</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#init\">init</a>, <a class=\"id\" href=\"#cleanup\">cleanup</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#call_usermodehelper_exec\">call_usermodehelper_exec</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#call_usermodehelper\">call_usermodehelper</a>(char *<a class=\"id\" href=\"#path\">path</a>, char **<a class=\"id\" href=\"#argv\">argv</a>, char **<a class=\"id\" href=\"#envp\">envp</a>, enum <a class=\"id\" href=\"#umh_wait\">umh_wait</a> <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#call_usermodehelper_fns\">call_usermodehelper_fns</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#argv\">argv</a>, <a class=\"id\" href=\"#envp\">envp</a>, <a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#usermodehelper_init\">usermodehelper_init</a>(void);", 
"", 
"extern int <a class=\"id\" href=\"#usermodehelper_disable\">usermodehelper_disable</a>(void);", 
"extern void <a class=\"id\" href=\"#usermodehelper_enable\">usermodehelper_enable</a>(void);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_KMOD_H__ */</span>", 
];
xr_frag_insert('l/76/b67d05e6bdf194285bcacdb7426f298a17a5cd.xr', __xr_tmp);
