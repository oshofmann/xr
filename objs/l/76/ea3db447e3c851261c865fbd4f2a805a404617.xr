var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_STRING_64_H\">_ASM_X86_STRING_64_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_STRING_64_H\">_ASM_X86_STRING_64_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"<span class=\"comment\">/* Written 2002 by Andi Kleen */</span>", 
"", 
"<span class=\"comment\">/* Only used for special circumstances. Stolen from i386/string.h */</span>", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *<a class=\"id\" href=\"#__inline_memcpy\">__inline_memcpy</a>(void *<a class=\"id\" href=\"#to\">to</a>, const void *<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#d0\">d0</a>, <a class=\"id\" href=\"#d1\">d1</a>, <a class=\"id\" href=\"#d2\">d2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"rep ; movsl\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"testb $2,%b4\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"je 1f\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"movsw\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\\ttestb $1,%b4\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"je 2f\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"movsb\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2:\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=&c\" (<a class=\"id\" href=\"#d0\">d0</a>), \"=&D\" (<a class=\"id\" href=\"#d1\">d1</a>), \"=&S\" (<a class=\"id\" href=\"#d2\">d2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"0\" (<a class=\"id\" href=\"#n\">n</a> / 4), \"q\" (<a class=\"id\" href=\"#n\">n</a>), \"1\" ((long)<a class=\"id\" href=\"#to\">to</a>), \"2\" ((long)<a class=\"id\" href=\"#from\">from</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#to\">to</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Even with __builtin_ the compiler may decide to use the out of line</span>", 
"<span class=\"comment\">   function. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HAVE_ARCH_MEMCPY\">__HAVE_ARCH_MEMCPY</a> 1", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_KMEMCHECK\">CONFIG_KMEMCHECK</a>", 
"#if (<a class=\"id\" href=\"#__GNUC__\">__GNUC__</a> == 4 && <a class=\"id\" href=\"#__GNUC_MINOR__\">__GNUC_MINOR__</a> >= 3) || <a class=\"id\" href=\"#__GNUC__\">__GNUC__</a> &gt; 4", 
"extern void *<a class=\"id\" href=\"#memcpy\">memcpy</a>(void *<a class=\"id\" href=\"#to\">to</a>, const void *<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"#else", 
"extern void *<a class=\"id\" href=\"#__memcpy\">__memcpy</a>(void *<a class=\"id\" href=\"#to\">to</a>, const void *<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#len\">len</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__len\">__len</a> = (<a class=\"id\" href=\"#len\">len</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#__ret\">__ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#len\">len</a>) && <a class=\"id\" href=\"#__len\">__len</a> >= 64)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = <a class=\"id\" href=\"#__memcpy\">__memcpy</a>((<a class=\"id\" href=\"#dst\">dst</a>), (<a class=\"id\" href=\"#src\">src</a>), <a class=\"id\" href=\"#__len\">__len</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = <a class=\"id\" href=\"#__builtin_memcpy\">__builtin_memcpy</a>((<a class=\"id\" href=\"#dst\">dst</a>), (<a class=\"id\" href=\"#src\">src</a>), <a class=\"id\" href=\"#__len\">__len</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#else", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kmemcheck becomes very happy if we use the REP instructions unconditionally,</span>", 
"<span class=\"comment\"> * because it means that we know both memory operands in advance.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#len\">len</a>) <a class=\"id\" href=\"#__inline_memcpy\">__inline_memcpy</a>((<a class=\"id\" href=\"#dst\">dst</a>), (<a class=\"id\" href=\"#src\">src</a>), (<a class=\"id\" href=\"#len\">len</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HAVE_ARCH_MEMSET\">__HAVE_ARCH_MEMSET</a>", 
"void *<a class=\"id\" href=\"#memset\">memset</a>(void *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HAVE_ARCH_MEMMOVE\">__HAVE_ARCH_MEMMOVE</a>", 
"void *<a class=\"id\" href=\"#memmove\">memmove</a>(void *<a class=\"id\" href=\"#dest\">dest</a>, const void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"int <a class=\"id\" href=\"#memcmp\">memcmp</a>(const void *<a class=\"id\" href=\"#cs\">cs</a>, const void *<a class=\"id\" href=\"#ct\">ct</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>);", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#strlen\">strlen</a>(const char *<a class=\"id\" href=\"#s\">s</a>);", 
"char *<a class=\"id\" href=\"#strcpy\">strcpy</a>(char *<a class=\"id\" href=\"#dest\">dest</a>, const char *<a class=\"id\" href=\"#src\">src</a>);", 
"char *<a class=\"id\" href=\"#strcat\">strcat</a>(char *<a class=\"id\" href=\"#dest\">dest</a>, const char *<a class=\"id\" href=\"#src\">src</a>);", 
"int <a class=\"id\" href=\"#strcmp\">strcmp</a>(const char *<a class=\"id\" href=\"#cs\">cs</a>, const char *<a class=\"id\" href=\"#ct\">ct</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_STRING_64_H */</span>", 
];
xr_frag_insert('l/76/ea3db447e3c851261c865fbd4f2a805a404617.xr', __xr_tmp);
