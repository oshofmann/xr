var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>drivers/pci/setup-bus.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Extruded from code written by</span>", 
"<span class=\"comment\"> *      Dave Rusling (david.rusling@reo.mts.dec.com)</span>", 
"<span class=\"comment\"> *      David Mosberger (davidm@cs.arizona.edu)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>David Miller (davem@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Support routines for initializing a PCI subsystem.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Nov 2000, Ivan Kokshaysky &lt;ink@jurassic.park.msu.ru&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     PCI-PCI bridges cleanup, sorted resource allocation.</span>", 
"<span class=\"comment\"> * Feb 2002, Ivan Kokshaysky &lt;ink@jurassic.park.msu.ru&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     Converted to allocation in 3 passes, which gives</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     tighter packing. Prefetchable range support.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"pci.h\"", 
"", 
"struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#add_to_failed_list\">add_to_failed_list</a>(struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#ln\">ln</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#tmp\">tmp</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"add_to_failed_list: kmalloc() failed!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ln\">ln</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_failed_list\">free_failed_list</a>(struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#list\">list</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#list\">list</a>;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__dev_sort_resources\">__dev_sort_resources</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#resource_list\">resource_list</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't touch classless devices or host bridges or ioapics.  */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#PCI_CLASS_NOT_DEFINED\">PCI_CLASS_NOT_DEFINED</a> || <a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_HOST\">PCI_CLASS_BRIDGE_HOST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't touch ioapic devices already enabled by firmware */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#PCI_CLASS_SYSTEM_PIC\">PCI_CLASS_SYSTEM_PIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#command\">command</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#command\">command</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#command\">command</a> &amp; (<a class=\"id\" href=\"#PCI_COMMAND_IO\">PCI_COMMAND_IO</a> | <a class=\"id\" href=\"#PCI_COMMAND_MEMORY\">PCI_COMMAND_MEMORY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pdev_sort_resources\">pdev_sort_resources</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__assign_resources_sorted\">__assign_resources_sorted</a>(struct <a class=\"id\" href=\"#resource_list\">resource_list</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#fail_head\">fail_head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource_list\">resource_list</a> *<a class=\"id\" href=\"#list\">list</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#list\">list</a>;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#res\">res</a> - &amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[0];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_assign_resource\">pci_assign_resource</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#idx\">idx</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fail_head\">fail_head</a> && !<a class=\"id\" href=\"#pci_is_root_bus\">pci_is_root_bus</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if the failed res is for ROM BAR, and it will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * be enabled later, don't add it to the list</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!((<a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#PCI_ROM_RESOURCE\">PCI_ROM_RESOURCE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (!(<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_ROM_ENABLE\">IORESOURCE_ROM_ENABLE</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_to_failed_list\">add_to_failed_list</a>(<a class=\"id\" href=\"#fail_head\">fail_head</a>, <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pdev_assign_resources_sorted\">pdev_assign_resources_sorted</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#fail_head\">fail_head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource_list\">resource_list</a> <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dev_sort_resources\">__dev_sort_resources</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__assign_resources_sorted\">__assign_resources_sorted</a>(&amp;<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#fail_head\">fail_head</a>);", 
"", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pbus_assign_resources_sorted\">pbus_assign_resources_sorted</a>(const struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#fail_head\">fail_head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource_list\">resource_list</a> <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dev_sort_resources\">__dev_sort_resources</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__assign_resources_sorted\">__assign_resources_sorted</a>(&amp;<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#fail_head\">fail_head</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#pci_setup_cardbus\">pci_setup_cardbus</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus_region\">pci_bus_region</a> <a class=\"id\" href=\"#region\">region</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"CardBus bridge to [bus %02x-%02x]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#secondary\">secondary</a>, <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resource\">resource</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_resource_to_bus\">pcibios_resource_to_bus</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, &amp;<a class=\"id\" href=\"#region\">region</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The IO resource is allocated a range twice as large as it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * would normally need.  This allows us to set both IO regs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"  bridge window %pR\\n\", <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_CB_IO_BASE_0\">PCI_CB_IO_BASE_0</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_CB_IO_LIMIT_0\">PCI_CB_IO_LIMIT_0</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resource\">resource</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_resource_to_bus\">pcibios_resource_to_bus</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, &amp;<a class=\"id\" href=\"#region\">region</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"  bridge window %pR\\n\", <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_CB_IO_BASE_1\">PCI_CB_IO_BASE_1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_CB_IO_LIMIT_1\">PCI_CB_IO_LIMIT_1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resource\">resource</a>[2];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_resource_to_bus\">pcibios_resource_to_bus</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, &amp;<a class=\"id\" href=\"#region\">region</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"  bridge window %pR\\n\", <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_CB_MEMORY_BASE_0\">PCI_CB_MEMORY_BASE_0</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_CB_MEMORY_LIMIT_0\">PCI_CB_MEMORY_LIMIT_0</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resource\">resource</a>[3];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_resource_to_bus\">pcibios_resource_to_bus</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, &amp;<a class=\"id\" href=\"#region\">region</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"  bridge window %pR\\n\", <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_CB_MEMORY_BASE_1\">PCI_CB_MEMORY_BASE_1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_CB_MEMORY_LIMIT_1\">PCI_CB_MEMORY_LIMIT_1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_setup_cardbus\">pci_setup_cardbus</a>);", 
"", 
"<span class=\"comment\">/* Initialize bridges with base/limit values we have collected.</span>", 
"<span class=\"comment\">   PCI-to-PCI Bridge Architecture Specification rev. 1.1 (1998)</span>", 
"<span class=\"comment\">   requires that if there is no I/O ports or memory behind the</span>", 
"<span class=\"comment\">   bridge, corresponding range must be turned off by writing base</span>", 
"<span class=\"comment\">   value greater than limit to the bridge's base/limit registers.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Note: care must be taken when updating I/O base/limit registers</span>", 
"<span class=\"comment\">   of bridges which support 32-bit I/O. This update requires two</span>", 
"<span class=\"comment\">   config space writes, so it's quite possible that an I/O window of</span>", 
"<span class=\"comment\">   the bridge will have some undesirable address (e.g. 0) after the</span>", 
"<span class=\"comment\">   first write. Ditto 64-bit prefetchable MMIO.  */</span>", 
"static void <a class=\"id\" href=\"#pci_setup_bridge_io\">pci_setup_bridge_io</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus_region\">pci_bus_region</a> <a class=\"id\" href=\"#region\">region</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#io_upper16\">io_upper16</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up the top and bottom of the PCI I/O segment for this bus. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resource\">resource</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_resource_to_bus\">pcibios_resource_to_bus</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, &amp;<a class=\"id\" href=\"#region\">region</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_IO_BASE\">PCI_IO_BASE</a>, &amp;<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> &= 0xffff0000;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> |= (<a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#start\">start</a> >> 8) &amp; 0x00f0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> |= <a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#end\">end</a> &amp; 0xf000;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set up upper 16 bits of I/O base/limit. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_upper16\">io_upper16</a> = (<a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#end\">end</a> &amp; 0xffff0000) | (<a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#start\">start</a> >> 16);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"  bridge window %pR\\n\", <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clear upper 16 bits of I/O base/limit. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_upper16\">io_upper16</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = 0x00f0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"  bridge window [io  disabled]\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Temporarily disable the I/O range before updating PCI_IO_BASE. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_IO_BASE_UPPER16\">PCI_IO_BASE_UPPER16</a>, 0x0000ffff);", 
"<span class=\"ts\"/><span class=\"comment\">/* Update lower 16 bits of I/O base/limit. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_IO_BASE\">PCI_IO_BASE</a>, <a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Update upper 16 bits of I/O base/limit. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_IO_BASE_UPPER16\">PCI_IO_BASE_UPPER16</a>, <a class=\"id\" href=\"#io_upper16\">io_upper16</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pci_setup_bridge_mmio\">pci_setup_bridge_mmio</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus_region\">pci_bus_region</a> <a class=\"id\" href=\"#region\">region</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#l\">l</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up the top and bottom of the PCI Memory segment for this bus. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resource\">resource</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_resource_to_bus\">pcibios_resource_to_bus</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, &amp;<a class=\"id\" href=\"#region\">region</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = (<a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#start\">start</a> >> 16) &amp; 0xfff0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> |= <a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#end\">end</a> &amp; 0xfff00000;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"  bridge window %pR\\n\", <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = 0x0000fff0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"  bridge window [mem disabled]\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_MEMORY_BASE\">PCI_MEMORY_BASE</a>, <a class=\"id\" href=\"#l\">l</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pci_setup_bridge_mmio_pref\">pci_setup_bridge_mmio_pref</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus_region\">pci_bus_region</a> <a class=\"id\" href=\"#region\">region</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#bu\">bu</a>, <a class=\"id\" href=\"#lu\">lu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear out the upper 32 bits of PREF limit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   If PCI_PREF_BASE_UPPER32 was non-zero, this temporarily</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   disables PREF range, which is ok. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_LIMIT_UPPER32\">PCI_PREF_LIMIT_UPPER32</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up PREF base/limit. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bu\">bu</a> = <a class=\"id\" href=\"#lu\">lu</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resource\">resource</a>[2];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_resource_to_bus\">pcibios_resource_to_bus</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, &amp;<a class=\"id\" href=\"#region\">region</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = (<a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#start\">start</a> >> 16) &amp; 0xfff0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> |= <a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#end\">end</a> &amp; 0xfff00000;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM_64\">IORESOURCE_MEM_64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bu\">bu</a> = <a class=\"id\" href=\"#upper_32_bits\">upper_32_bits</a>(<a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lu\">lu</a> = <a class=\"id\" href=\"#upper_32_bits\">upper_32_bits</a>(<a class=\"id\" href=\"#region\">region</a>.<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"  bridge window %pR\\n\", <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = 0x0000fff0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"  bridge window [mem pref disabled]\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_MEMORY_BASE\">PCI_PREF_MEMORY_BASE</a>, <a class=\"id\" href=\"#l\">l</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the upper 32 bits of PREF base &amp; limit. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_BASE_UPPER32\">PCI_PREF_BASE_UPPER32</a>, <a class=\"id\" href=\"#bu\">bu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_LIMIT_UPPER32\">PCI_PREF_LIMIT_UPPER32</a>, <a class=\"id\" href=\"#lu\">lu</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__pci_setup_bridge\">__pci_setup_bridge</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, unsigned long <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"PCI bridge to [bus %02x-%02x]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#secondary\">secondary</a>, <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_setup_bridge_io\">pci_setup_bridge_io</a>(<a class=\"id\" href=\"#bus\">bus</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_setup_bridge_mmio\">pci_setup_bridge_mmio</a>(<a class=\"id\" href=\"#bus\">bus</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &amp; <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_setup_bridge_mmio_pref\">pci_setup_bridge_mmio_pref</a>(<a class=\"id\" href=\"#bus\">bus</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_BRIDGE_CONTROL\">PCI_BRIDGE_CONTROL</a>, <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#bridge_ctl\">bridge_ctl</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pci_setup_bridge\">pci_setup_bridge</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a> | <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pci_setup_bridge\">__pci_setup_bridge</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Check whether the bridge supports optional I/O and</span>", 
"<span class=\"comment\">   prefetchable memory ranges. If not, the respective</span>", 
"<span class=\"comment\">   base/limit registers must be read-only and read as 0. */</span>", 
"static void <a class=\"id\" href=\"#pci_bridge_check_ranges\">pci_bridge_check_ranges</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#io\">io</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pmem\">pmem</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#b_res\">b_res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a> = &amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[1].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_IO_BASE\">PCI_IO_BASE</a>, &amp;<a class=\"id\" href=\"#io\">io</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#io\">io</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_IO_BASE\">PCI_IO_BASE</a>, 0xf0f0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_IO_BASE\">PCI_IO_BASE</a>, &amp;<a class=\"id\" href=\"#io\">io</a>);", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_IO_BASE\">PCI_IO_BASE</a>, 0x0);", 
" <span class=\"ts\"/>}", 
" <span class=\"ts\"/>if (<a class=\"id\" href=\"#io\">io</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[0].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*  DECchip 21050 pass 2 errata: the bridge may miss an address</span>", 
"<span class=\"comment\"><span class=\"ts\"/>    disconnect boundary by one PCI data phase.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>    Workaround: do not use prefetching on this device. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#vendor\">vendor</a> == <a class=\"id\" href=\"#PCI_VENDOR_ID_DEC\">PCI_VENDOR_ID_DEC</a> && <a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#device\">device</a> == 0x0001)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_MEMORY_BASE\">PCI_PREF_MEMORY_BASE</a>, &amp;<a class=\"id\" href=\"#pmem\">pmem</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmem\">pmem</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_MEMORY_BASE\">PCI_PREF_MEMORY_BASE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       0xfff0fff0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_MEMORY_BASE\">PCI_PREF_MEMORY_BASE</a>, &amp;<a class=\"id\" href=\"#pmem\">pmem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_MEMORY_BASE\">PCI_PREF_MEMORY_BASE</a>, 0x0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmem\">pmem</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[2].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a> | <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#pmem\">pmem</a> &amp; <a class=\"id\" href=\"#PCI_PREF_RANGE_TYPE_MASK\">PCI_PREF_RANGE_TYPE_MASK</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PCI_PREF_RANGE_TYPE_64\">PCI_PREF_RANGE_TYPE_64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[2].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_MEM_64\">IORESOURCE_MEM_64</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[2].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PCI_PREF_RANGE_TYPE_64\">PCI_PREF_RANGE_TYPE_64</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* double check if bridge does support 64 bit pref */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b_res\">b_res</a>[2].<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM_64\">IORESOURCE_MEM_64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mem_base_hi\">mem_base_hi</a>, <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_BASE_UPPER32\">PCI_PREF_BASE_UPPER32</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#mem_base_hi\">mem_base_hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_BASE_UPPER32\">PCI_PREF_BASE_UPPER32</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       0xffffffff);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_BASE_UPPER32\">PCI_PREF_BASE_UPPER32</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[2].<a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#IORESOURCE_MEM_64\">IORESOURCE_MEM_64</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_PREF_BASE_UPPER32\">PCI_PREF_BASE_UPPER32</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mem_base_hi\">mem_base_hi</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Helper function for sizing routines: find first available</span>", 
"<span class=\"comment\">   bus resource of a given type. Note: we intentionally skip</span>", 
"<span class=\"comment\">   the bus resources which have already been assigned (that is,</span>", 
"<span class=\"comment\">   have non-NULL parent resource). */</span>", 
"static struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#find_free_bus_resource\">find_free_bus_resource</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, unsigned long <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#type_mask\">type_mask</a> = <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a> | <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_for_each_resource\">pci_bus_for_each_resource</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> == &amp;<a class=\"id\" href=\"#ioport_resource\">ioport_resource</a> || <a class=\"id\" href=\"#r\">r</a> == &amp;<a class=\"id\" href=\"#iomem_resource\">iomem_resource</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> && (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#type_mask\">type_mask</a>) == <a class=\"id\" href=\"#type\">type</a> && !<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Sizing the IO windows of the PCI-PCI bridge is trivial,</span>", 
"<span class=\"comment\">   since these windows have 4K granularity and the IO ranges</span>", 
"<span class=\"comment\">   of non-bridge PCI devices are limited to 256 bytes.</span>", 
"<span class=\"comment\">   We must be careful with the ISA aliasing though. */</span>", 
"static void <a class=\"id\" href=\"#pbus_size_io\">pbus_size_io</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#min_size\">min_size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#b_res\">b_res</a> = <a class=\"id\" href=\"#find_free_bus_resource\">find_free_bus_resource</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = 0, <a class=\"id\" href=\"#size1\">size1</a> = 0, <a class=\"id\" href=\"#old_size\">old_size</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#b_res\">b_res</a>)", 
" <span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PCI_NUM_RESOURCES\">PCI_NUM_RESOURCES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#r_size\">r_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#parent\">parent</a> || !(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_size\">r_size</a> = <a class=\"id\" href=\"#resource_size\">resource_size</a>(<a class=\"id\" href=\"#r\">r</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r_size\">r_size</a> &lt; 0x400)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Might be re-aligned for ISA */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#r_size\">r_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size1\">size1</a> += <a class=\"id\" href=\"#r_size\">r_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#min_size\">min_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#min_size\">min_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_size\">old_size</a> = <a class=\"id\" href=\"#resource_size\">resource_size</a>(<a class=\"id\" href=\"#b_res\">b_res</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_size\">old_size</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_size\">old_size</a> = 0;", 
"<span class=\"comment\">/* To be fixed in 2.5: we should have sort of HAVE_ISA</span>", 
"<span class=\"comment\">   flag in the struct pci_bus. */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ISA\">CONFIG_ISA</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_EISA\">CONFIG_EISA</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = (<a class=\"id\" href=\"#size\">size</a> &amp; 0xff) + ((<a class=\"id\" href=\"#size\">size</a> &amp; ~0xffUL) << 2);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#size1\">size1</a>, 4096);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#old_size\">old_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#old_size\">old_size</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#start\">start</a> || <a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"disabling bridge window \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%pR to [bus %02x-%02x] (unused)\\n\", <a class=\"id\" href=\"#b_res\">b_res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#secondary\">secondary</a>, <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Alignment of the IO window is always 4K */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#start\">start</a> = 4096;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_STARTALIGN\">IORESOURCE_STARTALIGN</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Calculate the size of the bus and minimal alignment which</span>", 
"<span class=\"comment\">   guarantees that all child resources fit in this size. */</span>", 
"static int <a class=\"id\" href=\"#pbus_size_mem\">pbus_size_mem</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, unsigned long <a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#min_size\">min_size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#min_align\">min_align</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#old_size\">old_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#aligns\">aligns</a>[12];<span class=\"ts\"/><span class=\"comment\">/* Alignments from 1Mb to 2Gb */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#max_order\">max_order</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#b_res\">b_res</a> = <a class=\"id\" href=\"#find_free_bus_resource\">find_free_bus_resource</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mem64_mask\">mem64_mask</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#b_res\">b_res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#aligns\">aligns</a>, 0, sizeof(<a class=\"id\" href=\"#aligns\">aligns</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_order\">max_order</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem64_mask\">mem64_mask</a> = <a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM_64\">IORESOURCE_MEM_64</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#IORESOURCE_MEM_64\">IORESOURCE_MEM_64</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PCI_NUM_RESOURCES\">PCI_NUM_RESOURCES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#r_size\">r_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#parent\">parent</a> || (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) != <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r_size\">r_size</a> = <a class=\"id\" href=\"#resource_size\">resource_size</a>(<a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For bridges size != alignment */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = <a class=\"id\" href=\"#pci_resource_alignment\">pci_resource_alignment</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#__ffs\">__ffs</a>(<a class=\"id\" href=\"#align\">align</a>) - 20;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &gt; 11) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"disabling BAR %d: %pR \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"(bad alignment %#llx)\\n\", <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#r\">r</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long) <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#r_size\">r_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Exclude ranges with size &gt; align from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   calculation of the alignment. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r_size\">r_size</a> == <a class=\"id\" href=\"#align\">align</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aligns\">aligns</a>[<a class=\"id\" href=\"#order\">order</a>] += <a class=\"id\" href=\"#align\">align</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &gt; <a class=\"id\" href=\"#max_order\">max_order</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_order\">max_order</a> = <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem64_mask\">mem64_mask</a> &= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM_64\">IORESOURCE_MEM_64</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#min_size\">min_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#min_size\">min_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_size\">old_size</a> = <a class=\"id\" href=\"#resource_size\">resource_size</a>(<a class=\"id\" href=\"#b_res\">b_res</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_size\">old_size</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_size\">old_size</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#old_size\">old_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#old_size\">old_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_align\">min_align</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#order\">order</a> = 0; <a class=\"id\" href=\"#order\">order</a> <= <a class=\"id\" href=\"#max_order\">max_order</a>; <a class=\"id\" href=\"#order\">order</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#align1\">align1</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align1\">align1</a> <<= (<a class=\"id\" href=\"#order\">order</a> + 20);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#align\">align</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_align\">min_align</a> = <a class=\"id\" href=\"#align1\">align1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#align\">align</a> + <a class=\"id\" href=\"#min_align\">min_align</a>, <a class=\"id\" href=\"#min_align\">min_align</a>) &lt; <a class=\"id\" href=\"#align1\">align1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_align\">min_align</a> = <a class=\"id\" href=\"#align1\">align1</a> >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> += <a class=\"id\" href=\"#aligns\">aligns</a>[<a class=\"id\" href=\"#order\">order</a>];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#min_align\">min_align</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#start\">start</a> || <a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"disabling bridge window \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%pR to [bus %02x-%02x] (unused)\\n\", <a class=\"id\" href=\"#b_res\">b_res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#secondary\">secondary</a>, <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#min_align\">min_align</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#min_align\">min_align</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_STARTALIGN\">IORESOURCE_STARTALIGN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#mem64_mask\">mem64_mask</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pci_bus_size_cardbus\">pci_bus_size_cardbus</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#b_res\">b_res</a> = &amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reserve some resources for CardBus.  We reserve</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a fixed amount of bus space for CardBus bridges.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[0].<a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[0].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#pci_cardbus_io_size\">pci_cardbus_io_size</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[0].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a> | <a class=\"id\" href=\"#IORESOURCE_SIZEALIGN\">IORESOURCE_SIZEALIGN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[1].<a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[1].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#pci_cardbus_io_size\">pci_cardbus_io_size</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[1].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a> | <a class=\"id\" href=\"#IORESOURCE_SIZEALIGN\">IORESOURCE_SIZEALIGN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check whether prefetchable memory is supported</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by this bridge.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_CB_BRIDGE_CONTROL\">PCI_CB_BRIDGE_CONTROL</a>, &amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ctrl\">ctrl</a> &amp; <a class=\"id\" href=\"#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0\">PCI_CB_BRIDGE_CTL_PREFETCH_MEM0</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a> |= <a class=\"id\" href=\"#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0\">PCI_CB_BRIDGE_CTL_PREFETCH_MEM0</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_CB_BRIDGE_CONTROL\">PCI_CB_BRIDGE_CONTROL</a>, <a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_CB_BRIDGE_CONTROL\">PCI_CB_BRIDGE_CONTROL</a>, &amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have prefetchable memory support, allocate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * two regions.  Otherwise, allocate one region of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * twice the size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctrl\">ctrl</a> &amp; <a class=\"id\" href=\"#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0\">PCI_CB_BRIDGE_CTL_PREFETCH_MEM0</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[2].<a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[2].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#pci_cardbus_mem_size\">pci_cardbus_mem_size</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[2].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a> | <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a> | <a class=\"id\" href=\"#IORESOURCE_SIZEALIGN\">IORESOURCE_SIZEALIGN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[3].<a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[3].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#pci_cardbus_mem_size\">pci_cardbus_mem_size</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[3].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a> | <a class=\"id\" href=\"#IORESOURCE_SIZEALIGN\">IORESOURCE_SIZEALIGN</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[3].<a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[3].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#pci_cardbus_mem_size\">pci_cardbus_mem_size</a> * 2 - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b_res\">b_res</a>[3].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a> | <a class=\"id\" href=\"#IORESOURCE_SIZEALIGN\">IORESOURCE_SIZEALIGN</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#pci_bus_size_bridges\">pci_bus_size_bridges</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#prefmask\">prefmask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#min_mem_size\">min_mem_size</a> = 0, <a class=\"id\" href=\"#min_io_size\">min_io_size</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_CARDBUS\">PCI_CLASS_BRIDGE_CARDBUS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_size_cardbus\">pci_bus_size_cardbus</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_PCI\">PCI_CLASS_BRIDGE_PCI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_size_bridges\">pci_bus_size_bridges</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The root bus? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_CARDBUS\">PCI_CLASS_BRIDGE_CARDBUS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* don't size cardbuses yet. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_PCI\">PCI_CLASS_BRIDGE_PCI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bridge_check_ranges\">pci_bridge_check_ranges</a>(<a class=\"id\" href=\"#bus\">bus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>-><a class=\"id\" href=\"#is_hotplug_bridge\">is_hotplug_bridge</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_io_size\">min_io_size</a>  = <a class=\"id\" href=\"#pci_hotplug_io_size\">pci_hotplug_io_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_mem_size\">min_mem_size</a> = <a class=\"id\" href=\"#pci_hotplug_mem_size\">pci_hotplug_mem_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pbus_size_io\">pbus_size_io</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#min_io_size\">min_io_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the bridge supports prefetchable range, size it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   separately. If it doesn't, or its prefetchable window</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   has already been allocated by arch code, try</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   non-prefetchable range for both types of PCI memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   resources. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefmask\">prefmask</a> = <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a> | <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pbus_size_mem\">pbus_size_mem</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#prefmask\">prefmask</a>, <a class=\"id\" href=\"#prefmask\">prefmask</a>, <a class=\"id\" href=\"#min_mem_size\">min_mem_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#prefmask\">prefmask</a>; <span class=\"comment\">/* Success, size non-prefetch only. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_mem_size\">min_mem_size</a> += <a class=\"id\" href=\"#min_mem_size\">min_mem_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pbus_size_mem\">pbus_size_mem</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>, <a class=\"id\" href=\"#min_mem_size\">min_mem_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_bus_size_bridges\">pci_bus_size_bridges</a>);", 
"", 
"static void <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#__pci_bus_assign_resources\">__pci_bus_assign_resources</a>(const struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#fail_head\">fail_head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pbus_assign_resources_sorted\">pbus_assign_resources_sorted</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#fail_head\">fail_head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pci_bus_assign_resources\">__pci_bus_assign_resources</a>(<a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#fail_head\">fail_head</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_PCI\">PCI_CLASS_BRIDGE_PCI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_is_enabled\">pci_is_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_setup_bridge\">pci_setup_bridge</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_CARDBUS\">PCI_CLASS_BRIDGE_CARDBUS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_setup_cardbus\">pci_setup_cardbus</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"not setting up bridge for bus \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%04x:%02x\\n\", <a class=\"id\" href=\"#pci_domain_nr\">pci_domain_nr</a>(<a class=\"id\" href=\"#b\">b</a>), <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#number\">number</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#pci_bus_assign_resources\">pci_bus_assign_resources</a>(const struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pci_bus_assign_resources\">__pci_bus_assign_resources</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_bus_assign_resources\">pci_bus_assign_resources</a>);", 
"", 
"static void <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#__pci_bridge_assign_resources\">__pci_bridge_assign_resources</a>(const struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#resource_list_x\">resource_list_x</a> *<a class=\"id\" href=\"#fail_head\">fail_head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pdev_assign_resources_sorted\">pdev_assign_resources_sorted</a>((struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *)<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#fail_head\">fail_head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pci_bus_assign_resources\">__pci_bus_assign_resources</a>(<a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#fail_head\">fail_head</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_PCI\">PCI_CLASS_BRIDGE_PCI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_setup_bridge\">pci_setup_bridge</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_CARDBUS\">PCI_CLASS_BRIDGE_CARDBUS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_setup_cardbus\">pci_setup_cardbus</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"not setting up bridge for bus \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%04x:%02x\\n\", <a class=\"id\" href=\"#pci_domain_nr\">pci_domain_nr</a>(<a class=\"id\" href=\"#b\">b</a>), <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#number\">number</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"static void <a class=\"id\" href=\"#pci_bridge_release_resources\">pci_bridge_release_resources</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#changed\">changed</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#type_mask\">type_mask</a> = <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a> | <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>; <a class=\"id\" href=\"#idx\">idx</a> <= <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCE_END\">PCI_BRIDGE_RESOURCE_END</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#idx\">idx</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#type_mask\">type_mask</a>) != <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if there are children under that, we should release them</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  all</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_child_resources\">release_child_resources</a>(<a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#release_resource\">release_resource</a>(<a class=\"id\" href=\"#r\">r</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"resource %d %pR released\\n\", <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* keep the old size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#resource_size\">resource_size</a>(<a class=\"id\" href=\"#r\">r</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changed\">changed</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#changed\">changed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* avoiding touch the one without PREF */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &amp; <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pci_setup_bridge\">__pci_setup_bridge</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"enum <a class=\"id\" href=\"#release_type\">release_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#leaf_only\">leaf_only</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#whole_subtree\">whole_subtree</a>,", 
"};", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * try to release pci bridge resources that is from leaf bridge,</span>", 
"<span class=\"comment\"> * so we can allocate big new one later</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#pci_bus_release_bridge_resources\">pci_bus_release_bridge_resources</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   enum <a class=\"id\" href=\"#release_type\">release_type</a> <a class=\"id\" href=\"#rel_type\">rel_type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_leaf_bridge\">is_leaf_bridge</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_leaf_bridge\">is_leaf_bridge</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) != <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_PCI\">PCI_CLASS_BRIDGE_PCI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rel_type\">rel_type</a> == <a class=\"id\" href=\"#whole_subtree\">whole_subtree</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_release_bridge_resources\">pci_bus_release_bridge_resources</a>(<a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#whole_subtree\">whole_subtree</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_is_root_bus\">pci_is_root_bus</a>(<a class=\"id\" href=\"#bus\">bus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) != <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_PCI\">PCI_CLASS_BRIDGE_PCI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rel_type\">rel_type</a> == <a class=\"id\" href=\"#whole_subtree\">whole_subtree</a>) || <a class=\"id\" href=\"#is_leaf_bridge\">is_leaf_bridge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bridge_release_resources\">pci_bridge_release_resources</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pci_bus_dump_res\">pci_bus_dump_res</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_for_each_resource\">pci_bus_for_each_resource</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a> || !<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> || !<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a>)", 
"                        continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"resource %d %pR\\n\", <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"        }", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pci_bus_dump_resources\">pci_bus_dump_resources</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
];
xr_frag_insert('l/76/fadcc8460e66e501a8304bc56ee798286734c4.xr', __xr_tmp);
