var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * net/dsa/mv88e6123_61_65.c - Marvell 88e6123/6161/6165 switch chip support</span>", 
"<span class=\"comment\"> * Copyright (c) 2008-2009 Marvell Semiconductor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#phy\">phy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"dsa_priv.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"mv88e6xxx.h\"", 
"", 
"static char *<a class=\"id\" href=\"#mv88e6123_61_65_probe\">mv88e6123_61_65_probe</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#sw_addr\">sw_addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__mv88e6xxx_reg_read\">__mv88e6xxx_reg_read</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#sw_addr\">sw_addr</a>, <a class=\"id\" href=\"#REG_PORT\">REG_PORT</a>(0), 0x03);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> &= 0xfff0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0x1210)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return \"Marvell 88E6123\";", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0x1610)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return \"Marvell 88E6161\";", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0x1650)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return \"Marvell 88E6165\";", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mv88e6123_61_65_switch_reset\">mv88e6123_61_65_switch_reset</a>(struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set all ports to the disabled state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 8; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#REG_READ\">REG_READ</a>(<a class=\"id\" href=\"#REG_PORT\">REG_PORT</a>(<a class=\"id\" href=\"#i\">i</a>), 0x04);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_PORT\">REG_PORT</a>(<a class=\"id\" href=\"#i\">i</a>), 0x04, <a class=\"id\" href=\"#ret\">ret</a> &amp; 0xfffc);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for transmit queues to drain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(2);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reset the switch.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL\">REG_GLOBAL</a>, 0x04, 0xc400);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait up to one second for reset to complete.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 1000; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#REG_READ\">REG_READ</a>(<a class=\"id\" href=\"#REG_GLOBAL\">REG_GLOBAL</a>, 0x00);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> &amp; 0xc800) == 0xc800)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 1000)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ETIMEDOUT\">ETIMEDOUT</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mv88e6123_61_65_setup_global\">mv88e6123_61_65_setup_global</a>(struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable the PHY polling unit (since there won't be any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * external PHYs to poll), don't discard packets with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * excessive collisions, and mask all interrupt sources.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL\">REG_GLOBAL</a>, 0x04, 0x0000);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set the default address aging time to 5 minutes, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enable address learn messages to be sent to all message</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ports.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL\">REG_GLOBAL</a>, 0x0a, 0x0148);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Configure the priority mapping registers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mv88e6xxx_config_prio\">mv88e6xxx_config_prio</a>(<a class=\"id\" href=\"#ds\">ds</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Configure the upstream port, and configure the upstream</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * port as the port to which ingress and egress monitor frames</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are to be sent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL\">REG_GLOBAL</a>, 0x1a, (<a class=\"id\" href=\"#dsa_upstream_port\">dsa_upstream_port</a>(<a class=\"id\" href=\"#ds\">ds</a>) * 0x1110));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable remote management for now, and set the switch's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * DSA device number.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL\">REG_GLOBAL</a>, 0x1c, <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#index\">index</a> &amp; 0x1f);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Send all frames with destination addresses matching</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 01:80:c2:00:00:2x to the CPU port.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL2\">REG_GLOBAL2</a>, 0x02, 0xffff);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Send all frames with destination addresses matching</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 01:80:c2:00:00:0x to the CPU port.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL2\">REG_GLOBAL2</a>, 0x03, 0xffff);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable the loopback filter, disable flow control</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * messages, disable flood broadcast override, disable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * removing of provider tags, disable ATU age violation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupts, disable tag flow control, force flow</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * control priority to the highest, and send all special</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * multicast frames to the CPU at the highest priority.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL2\">REG_GLOBAL2</a>, 0x05, 0x00ff);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Program the DSA routing table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 32; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nexthop\">nexthop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nexthop\">nexthop</a> = 0x1f;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#index\">index</a> && <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#nr_chips\">nr_chips</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nexthop\">nexthop</a> = <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#rtable\">rtable</a>[<a class=\"id\" href=\"#i\">i</a>] &amp; 0x1f;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL2\">REG_GLOBAL2</a>, 0x06, 0x8000 | (<a class=\"id\" href=\"#i\">i</a> << 8) | <a class=\"id\" href=\"#nexthop\">nexthop</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear all trunk masks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 8; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL2\">REG_GLOBAL2</a>, 0x07, 0x8000 | (<a class=\"id\" href=\"#i\">i</a> << 12) | 0xff);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear all trunk mappings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 16; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL2\">REG_GLOBAL2</a>, 0x08, 0x8000 | (<a class=\"id\" href=\"#i\">i</a> << 11));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable ingress rate limiting by resetting all ingress</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rate limit registers to their initial state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 6; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL2\">REG_GLOBAL2</a>, 0x09, 0x9000 | (<a class=\"id\" href=\"#i\">i</a> << 8));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialise cross-chip port VLAN table to reset defaults.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL2\">REG_GLOBAL2</a>, 0x0b, 0x9000);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear the priority override table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 16; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL2\">REG_GLOBAL2</a>, 0x0f, 0x8000 | (<a class=\"id\" href=\"#i\">i</a> << 8));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* @@@ initialise AVB (22/23) watchdog (27) sdet (29) registers */</span>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mv88e6123_61_65_setup_port\">mv88e6123_61_65_setup_port</a>(struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>, int <a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#REG_PORT\">REG_PORT</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MAC Forcing register: don't force link, speed, duplex</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or flow control state to any particular values on physical</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ports, but force the CPU port and all DSA ports to 1000 Mb/s</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * full duplex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dsa_is_cpu_port\">dsa_is_cpu_port</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#p\">p</a>) || <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#dsa_port_mask\">dsa_port_mask</a> &amp; (1 << <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x01, 0x003e);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x01, 0x0003);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not limit the period of time that this port can be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * paused for by the remote end or the period of time that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this port can pause the remote end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x02, 0x0000);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Port Control: disable Drop-on-Unlock, disable Drop-on-Lock,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disable Header mode, enable IGMP/MLD snooping, disable VLAN</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tunneling, determine priority by looking at 802.1p and IP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * priority fields (IP prio has precedence), and set STP state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to Forwarding.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is the CPU link, use DSA or EDSA tagging depending</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on which tagging mode was configured.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is a link to another switch, use DSA tagging mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is the upstream port for this switch, enable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * forwarding of unknown unicasts and multicasts.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = 0x0433;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dsa_is_cpu_port\">dsa_is_cpu_port</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#tag_protocol\">tag_protocol</a> == <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_EDSA\">ETH_P_EDSA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= 0x3300;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= 0x0100;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#dsa_port_mask\">dsa_port_mask</a> &amp; (1 << <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= 0x0100;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#dsa_upstream_port\">dsa_upstream_port</a>(<a class=\"id\" href=\"#ds\">ds</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= 0x000c;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x04, <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Port Control 1: disable trunking.  Also, if this is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU port, enable learn messages to be sent to this port.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x05, <a class=\"id\" href=\"#dsa_is_cpu_port\">dsa_is_cpu_port</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#p\">p</a>) ? 0x8000 : 0x0000);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Port based VLAN map: give each port its own address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * database, allow the CPU port to talk to each of the 'real'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ports, and allow each of the 'real' ports to only talk to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the upstream port.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = (<a class=\"id\" href=\"#p\">p</a> &amp; 0xf) << 12;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dsa_is_cpu_port\">dsa_is_cpu_port</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#phys_port_mask\">phys_port_mask</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= 1 << <a class=\"id\" href=\"#dsa_upstream_port\">dsa_upstream_port</a>(<a class=\"id\" href=\"#ds\">ds</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x06, <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Default VLAN ID and priority: don't set a default VLAN</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ID, and set the default packet priority to zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x07, 0x0000);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Port Control 2: don't force a good FCS, set the maximum</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * frame size to 10240 bytes, don't let the switch add or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * strip 802.1q tags, don't discard tagged or untagged frames</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on this port, do a destination address lookup on all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * received packets as usual, disable ARP mirroring and don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * send a copy of all transmitted/received frames on this port</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x08, 0x2080);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Egress rate control: disable egress rate control.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x09, 0x0001);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Egress rate control 2: disable egress rate control.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x0a, 0x0000);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Port Association Vector: when learning source addresses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of packets, add the address to the address database using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a port bitmap that has only the bit for this port set and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the other bits clear.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x0b, 1 << <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Port ATU control: disable limiting the number of address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * database entries that this port is allowed to use.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x0c, 0x0000);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Priorit Override: disable DA, SA and VTU priority override.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x0d, 0x0000);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Port Ethertype: use the Ethertype DSA Ethertype value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x0f, <a class=\"id\" href=\"#ETH_P_EDSA\">ETH_P_EDSA</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tag Remap: use an identity 802.1p prio -&gt; switch prio</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mapping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x18, 0x3210);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tag Remap 2: use an identity 802.1p prio -&gt; switch prio</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mapping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x19, 0x7654);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mv88e6123_61_65_setup\">mv88e6123_61_65_setup</a>(struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mv88e6xxx_priv_state\">mv88e6xxx_priv_state</a> *<a class=\"id\" href=\"#ps\">ps</a> = (void *)(<a class=\"id\" href=\"#ds\">ds</a> + 1);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#smi_mutex\">smi_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#stats_mutex\">stats_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mv88e6123_61_65_switch_reset\">mv88e6123_61_65_switch_reset</a>(<a class=\"id\" href=\"#ds\">ds</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* @@@ initialise vtu and atu */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mv88e6123_61_65_setup_global\">mv88e6123_61_65_setup_global</a>(<a class=\"id\" href=\"#ds\">ds</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 6; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mv88e6123_61_65_setup_port\">mv88e6123_61_65_setup_port</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mv88e6123_61_65_port_to_phy_addr\">mv88e6123_61_65_port_to_phy_addr</a>(int <a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#port\">port</a> >= 0 && <a class=\"id\" href=\"#port\">port</a> <= 4)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#mv88e6123_61_65_phy_read\">mv88e6123_61_65_phy_read</a>(struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>, int <a class=\"id\" href=\"#port\">port</a>, int <a class=\"id\" href=\"#regnum\">regnum</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mv88e6123_61_65_port_to_phy_addr\">mv88e6123_61_65_port_to_phy_addr</a>(<a class=\"id\" href=\"#port\">port</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mv88e6xxx_phy_read\">mv88e6xxx_phy_read</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#regnum\">regnum</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#mv88e6123_61_65_phy_write\">mv88e6123_61_65_phy_write</a>(struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#port\">port</a>, int <a class=\"id\" href=\"#regnum\">regnum</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#mv88e6123_61_65_port_to_phy_addr\">mv88e6123_61_65_port_to_phy_addr</a>(<a class=\"id\" href=\"#port\">port</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mv88e6xxx_phy_write\">mv88e6xxx_phy_write</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#regnum\">regnum</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mv88e6xxx_hw_stat\">mv88e6xxx_hw_stat</a> <a class=\"id\" href=\"#mv88e6123_61_65_hw_stats\">mv88e6123_61_65_hw_stats</a>[] = {", 
"<span class=\"ts\"/>{ \"in_good_octets\", 8, 0x00, },", 
"<span class=\"ts\"/>{ \"in_bad_octets\", 4, 0x02, },", 
"<span class=\"ts\"/>{ \"in_unicast\", 4, 0x04, },", 
"<span class=\"ts\"/>{ \"in_broadcasts\", 4, 0x06, },", 
"<span class=\"ts\"/>{ \"in_multicasts\", 4, 0x07, },", 
"<span class=\"ts\"/>{ \"in_pause\", 4, 0x16, },", 
"<span class=\"ts\"/>{ \"in_undersize\", 4, 0x18, },", 
"<span class=\"ts\"/>{ \"in_fragments\", 4, 0x19, },", 
"<span class=\"ts\"/>{ \"in_oversize\", 4, 0x1a, },", 
"<span class=\"ts\"/>{ \"in_jabber\", 4, 0x1b, },", 
"<span class=\"ts\"/>{ \"in_rx_error\", 4, 0x1c, },", 
"<span class=\"ts\"/>{ \"in_fcs_error\", 4, 0x1d, },", 
"<span class=\"ts\"/>{ \"out_octets\", 8, 0x0e, },", 
"<span class=\"ts\"/>{ \"out_unicast\", 4, 0x10, },", 
"<span class=\"ts\"/>{ \"out_broadcasts\", 4, 0x13, },", 
"<span class=\"ts\"/>{ \"out_multicasts\", 4, 0x12, },", 
"<span class=\"ts\"/>{ \"out_pause\", 4, 0x15, },", 
"<span class=\"ts\"/>{ \"excessive\", 4, 0x11, },", 
"<span class=\"ts\"/>{ \"collisions\", 4, 0x1e, },", 
"<span class=\"ts\"/>{ \"deferred\", 4, 0x05, },", 
"<span class=\"ts\"/>{ \"single\", 4, 0x14, },", 
"<span class=\"ts\"/>{ \"multiple\", 4, 0x17, },", 
"<span class=\"ts\"/>{ \"out_fcs_error\", 4, 0x03, },", 
"<span class=\"ts\"/>{ \"late\", 4, 0x1f, },", 
"<span class=\"ts\"/>{ \"hist_64bytes\", 4, 0x08, },", 
"<span class=\"ts\"/>{ \"hist_65_127bytes\", 4, 0x09, },", 
"<span class=\"ts\"/>{ \"hist_128_255bytes\", 4, 0x0a, },", 
"<span class=\"ts\"/>{ \"hist_256_511bytes\", 4, 0x0b, },", 
"<span class=\"ts\"/>{ \"hist_512_1023bytes\", 4, 0x0c, },", 
"<span class=\"ts\"/>{ \"hist_1024_max_bytes\", 4, 0x0d, },", 
"};", 
"", 
"static void", 
"<a class=\"id\" href=\"#mv88e6123_61_65_get_strings\">mv88e6123_61_65_get_strings</a>(struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>, int <a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#uint8_t\">uint8_t</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mv88e6xxx_get_strings\">mv88e6xxx_get_strings</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#mv88e6123_61_65_hw_stats\">mv88e6123_61_65_hw_stats</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#mv88e6123_61_65_hw_stats\">mv88e6123_61_65_hw_stats</a>, <a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#mv88e6123_61_65_get_ethtool_stats\">mv88e6123_61_65_get_ethtool_stats</a>(struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#uint64_t\">uint64_t</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mv88e6xxx_get_ethtool_stats\">mv88e6xxx_get_ethtool_stats</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#mv88e6123_61_65_hw_stats\">mv88e6123_61_65_hw_stats</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#mv88e6123_61_65_hw_stats\">mv88e6123_61_65_hw_stats</a>, <a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mv88e6123_61_65_get_sset_count\">mv88e6123_61_65_get_sset_count</a>(struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#mv88e6123_61_65_hw_stats\">mv88e6123_61_65_hw_stats</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dsa_switch_driver\">dsa_switch_driver</a> <a class=\"id\" href=\"#mv88e6123_61_65_switch_driver\">mv88e6123_61_65_switch_driver</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#tag_protocol\">tag_protocol</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_to_be16\">cpu_to_be16</a>(<a class=\"id\" href=\"#ETH_P_EDSA\">ETH_P_EDSA</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#priv_size\">priv_size</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(struct <a class=\"id\" href=\"#mv88e6xxx_priv_state\">mv88e6xxx_priv_state</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#probe\">probe</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mv88e6123_61_65_probe\">mv88e6123_61_65_probe</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#setup\">setup</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mv88e6123_61_65_setup\">mv88e6123_61_65_setup</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_addr\">set_addr</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mv88e6xxx_set_addr_indirect\">mv88e6xxx_set_addr_indirect</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#phy_read\">phy_read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mv88e6123_61_65_phy_read\">mv88e6123_61_65_phy_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#phy_write\">phy_write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mv88e6123_61_65_phy_write\">mv88e6123_61_65_phy_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll_link\">poll_link</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mv88e6xxx_poll_link\">mv88e6xxx_poll_link</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_strings\">get_strings</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mv88e6123_61_65_get_strings\">mv88e6123_61_65_get_strings</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_ethtool_stats\">get_ethtool_stats</a><span class=\"ts\"/>= <a class=\"id\" href=\"#mv88e6123_61_65_get_ethtool_stats\">mv88e6123_61_65_get_ethtool_stats</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_sset_count\">get_sset_count</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mv88e6123_61_65_get_sset_count\">mv88e6123_61_65_get_sset_count</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#mv88e6123_61_65_init\">mv88e6123_61_65_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_switch_driver\">register_switch_driver</a>(&amp;<a class=\"id\" href=\"#mv88e6123_61_65_switch_driver\">mv88e6123_61_65_switch_driver</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#mv88e6123_61_65_init\">mv88e6123_61_65_init</a>);", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#mv88e6123_61_65_cleanup\">mv88e6123_61_65_cleanup</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_switch_driver\">unregister_switch_driver</a>(&amp;<a class=\"id\" href=\"#mv88e6123_61_65_switch_driver\">mv88e6123_61_65_switch_driver</a>);", 
"}", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#mv88e6123_61_65_cleanup\">mv88e6123_61_65_cleanup</a>);", 
];
xr_frag_insert('l/77/1de0f1b3b98d12fe3bbb6c06ee70da65d14a80.xr', __xr_tmp);
