var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  include/linux/eventfd.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2007  Davide Libenzi &lt;davidel@xmailserver.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_EVENTFD_H\">_LINUX_EVENTFD_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_EVENTFD_H\">_LINUX_EVENTFD_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CAREFUL: Check include/asm-generic/fcntl.h when defining</span>", 
"<span class=\"comment\"> * new flags, since they might collide with O_* ones. We want</span>", 
"<span class=\"comment\"> * to re-use O_* flags that couldn't possibly have a meaning</span>", 
"<span class=\"comment\"> * from eventfd, in order to leave a free define-space for</span>", 
"<span class=\"comment\"> * shared O_* flags.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EFD_SEMAPHORE\">EFD_SEMAPHORE</a> (1 << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EFD_CLOEXEC\">EFD_CLOEXEC</a> <a class=\"id\" href=\"#O_CLOEXEC\">O_CLOEXEC</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EFD_NONBLOCK\">EFD_NONBLOCK</a> <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EFD_SHARED_FCNTL_FLAGS\">EFD_SHARED_FCNTL_FLAGS</a> (<a class=\"id\" href=\"#O_CLOEXEC\">O_CLOEXEC</a> | <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EFD_FLAGS_SET\">EFD_FLAGS_SET</a> (<a class=\"id\" href=\"#EFD_SHARED_FCNTL_FLAGS\">EFD_SHARED_FCNTL_FLAGS</a> | <a class=\"id\" href=\"#EFD_SEMAPHORE\">EFD_SEMAPHORE</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EVENTFD\">CONFIG_EVENTFD</a>", 
"", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#eventfd_file_create\">eventfd_file_create</a>(unsigned int <a class=\"id\" href=\"#count\">count</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd_ctx_get\">eventfd_ctx_get</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"void <a class=\"id\" href=\"#eventfd_ctx_put\">eventfd_ctx_put</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#eventfd_fget\">eventfd_fget</a>(int <a class=\"id\" href=\"#fd\">fd</a>);", 
"struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd_ctx_fdget\">eventfd_ctx_fdget</a>(int <a class=\"id\" href=\"#fd\">fd</a>);", 
"struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd_ctx_fileget\">eventfd_ctx_fileget</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"int <a class=\"id\" href=\"#eventfd_signal\">eventfd_signal</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, int <a class=\"id\" href=\"#n\">n</a>);", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#eventfd_ctx_read\">eventfd_ctx_read</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, int <a class=\"id\" href=\"#no_wait\">no_wait</a>, <a class=\"id\" href=\"#__u64\">__u64</a> *<a class=\"id\" href=\"#cnt\">cnt</a>);", 
"int <a class=\"id\" href=\"#eventfd_ctx_remove_wait_queue\">eventfd_ctx_remove_wait_queue</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__u64\">__u64</a> *<a class=\"id\" href=\"#cnt\">cnt</a>);", 
"", 
"#else <span class=\"comment\">/* CONFIG_EVENTFD */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ugly ugly ugly error layer to support modules that uses eventfd but</span>", 
"<span class=\"comment\"> * pretend to work in !CONFIG_EVENTFD configurations. Namely, AIO.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#eventfd_file_create\">eventfd_file_create</a>(unsigned int <a class=\"id\" href=\"#count\">count</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#eventfd_ctx_fdget\">eventfd_ctx_fdget</a>(int <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#eventfd_signal\">eventfd_signal</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#eventfd_ctx_put\">eventfd_ctx_put</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#eventfd_ctx_read\">eventfd_ctx_read</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, int <a class=\"id\" href=\"#no_wait\">no_wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__u64\">__u64</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#eventfd_ctx_remove_wait_queue\">eventfd_ctx_remove_wait_queue</a>(struct <a class=\"id\" href=\"#eventfd_ctx\">eventfd_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#__u64\">__u64</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_EVENTFD_H */</span>", 
"", 
];
xr_frag_insert('l/77/53a79be97e60419514d05be761a414be3f8a61.xr', __xr_tmp);
