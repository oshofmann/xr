var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Detect Hung Task</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * kernel/hung_task.c - kernel thread for detecting tasks stuck in D state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#lockdep\">lockdep</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The number of tasks checked:</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#sysctl_hung_task_check_count\">sysctl_hung_task_check_count</a> = <a class=\"id\" href=\"#PID_MAX_LIMIT\">PID_MAX_LIMIT</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Limit number of tasks checked in a batch.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This value controls the preemptibility of khungtaskd since preemption</span>", 
"<span class=\"comment\"> * is disabled during the critical section. It also controls the size of</span>", 
"<span class=\"comment\"> * the RCU grace period. So it needs to be upper-bound.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HUNG_TASK_BATCHING\">HUNG_TASK_BATCHING</a> 1024", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Zero means infinite timeout - no checking done:</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#sysctl_hung_task_timeout_secs\">sysctl_hung_task_timeout_secs</a> = 120;", 
"", 
"unsigned long <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#sysctl_hung_task_warnings\">sysctl_hung_task_warnings</a> = 10;", 
"", 
"static int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#did_panic\">did_panic</a>;", 
"", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#watchdog_task\">watchdog_task</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Should we panic (and reboot, if panic_timeout= is set) when a</span>", 
"<span class=\"comment\"> * hung task is detected:</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#sysctl_hung_task_panic\">sysctl_hung_task_panic</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CONFIG_BOOTPARAM_HUNG_TASK_PANIC_VALUE\">CONFIG_BOOTPARAM_HUNG_TASK_PANIC_VALUE</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hung_task_panic_setup\">hung_task_panic_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_hung_task_panic\">sysctl_hung_task_panic</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"hung_task_panic=\", <a class=\"id\" href=\"#hung_task_panic_setup\">hung_task_panic_setup</a>);", 
"", 
"static int", 
"<a class=\"id\" href=\"#hung_task_panic\">hung_task_panic</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#this\">this</a>, unsigned long <a class=\"id\" href=\"#event\">event</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#did_panic\">did_panic</a> = 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#panic_block\">panic_block</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#hung_task_panic\">hung_task_panic</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#check_hung_task\">check_hung_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#switch_count\">switch_count</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#nvcsw\">nvcsw</a> + <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#nivcsw\">nivcsw</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure the task is not frozen.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also, when a freshly created task is scheduled once, changes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its state to TASK_UNINTERRUPTIBLE without having ever been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * switched out once, it musn't be checked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_FROZEN\">PF_FROZEN</a> || !<a class=\"id\" href=\"#switch_count\">switch_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#switch_count\">switch_count</a> != <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#last_switch_count\">last_switch_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#last_switch_count\">last_switch_count</a> = <a class=\"id\" href=\"#switch_count\">switch_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sysctl_hung_task_warnings\">sysctl_hung_task_warnings</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_hung_task_warnings\">sysctl_hung_task_warnings</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ok, the task did not get scheduled for more than 2 minutes,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * complain:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"INFO: task %s:%d blocked for more than \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%ld seconds.\\n\", <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"\\\"echo 0 > /proc/sys/kernel/hung_task_timeout_secs\\\"\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" disables this message.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_show_task\">sched_show_task</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__debug_show_held_locks\">__debug_show_held_locks</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_hung_task_panic\">sysctl_hung_task_panic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"hung_task: blocked tasks\");", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * To avoid extending the RCU grace period for an unbounded amount of time,</span>", 
"<span class=\"comment\"> * periodically exit the critical section and enter a new one.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For preemptible RCU it is sufficient to call rcu_read_unlock in order</span>", 
"<span class=\"comment\"> * exit the grace period. For classic RCU, a reschedule is required.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_lock_break\">rcu_lock_break</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#g\">g</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#g\">g</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#g\">g</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check whether a TASK_UNINTERRUPTIBLE does not get woken up for</span>", 
"<span class=\"comment\"> * a really long time (120 seconds). If that happens, print out</span>", 
"<span class=\"comment\"> * a warning.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#check_hung_uninterruptible_tasks\">check_hung_uninterruptible_tasks</a>(unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_count\">max_count</a> = <a class=\"id\" href=\"#sysctl_hung_task_check_count\">sysctl_hung_task_check_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#batch_count\">batch_count</a> = <a class=\"id\" href=\"#HUNG_TASK_BATCHING\">HUNG_TASK_BATCHING</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#g\">g</a>, *<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the system crashed already then all bets are off,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do not report extra hung tasks:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_taint\">test_taint</a>(<a class=\"id\" href=\"#TAINT_DIE\">TAINT_DIE</a>) || <a class=\"id\" href=\"#did_panic\">did_panic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_thread\">do_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#t\">t</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#max_count\">max_count</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!--<a class=\"id\" href=\"#batch_count\">batch_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#batch_count\">batch_count</a> = <a class=\"id\" href=\"#HUNG_TASK_BATCHING\">HUNG_TASK_BATCHING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_lock_break\">rcu_lock_break</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Exit if t or g was unhashed during refresh. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#TASK_DEAD\">TASK_DEAD</a> || <a class=\"id\" href=\"#g\">g</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#TASK_DEAD\">TASK_DEAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* use \"==\" to skip the TASK_KILLABLE tasks waiting on NFS */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_hung_task\">check_hung_task</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#t\">t</a>);", 
" <a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#timeout_jiffies\">timeout_jiffies</a>(unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* timeout of 0 will disable the watchdog */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#timeout\">timeout</a> ? <a class=\"id\" href=\"#timeout\">timeout</a> * <a class=\"id\" href=\"#HZ\">HZ</a> : <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Process updating of timeout sysctl</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_dohung_task_timeout_secs\">proc_dohung_task_timeout_secs</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> || !<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#watchdog_task\">watchdog_task</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kthread which checks for tasks stuck in D state</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#watchdog\">watchdog</a>(void *<a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>(<a class=\"id\" href=\"#current\">current</a>, 0);", 
"", 
"<span class=\"ts\"/>for ( ; ; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#sysctl_hung_task_timeout_secs\">sysctl_hung_task_timeout_secs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#schedule_timeout_interruptible\">schedule_timeout_interruptible</a>(<a class=\"id\" href=\"#timeout_jiffies\">timeout_jiffies</a>(<a class=\"id\" href=\"#timeout\">timeout</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#sysctl_hung_task_timeout_secs\">sysctl_hung_task_timeout_secs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_hung_uninterruptible_tasks\">check_hung_uninterruptible_tasks</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hung_task_init\">hung_task_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_notifier_chain_register\">atomic_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#panic_notifier_list\">panic_notifier_list</a>, &amp;<a class=\"id\" href=\"#panic_block\">panic_block</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#watchdog_task\">watchdog_task</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#watchdog\">watchdog</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"khungtaskd\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#hung_task_init\">hung_task_init</a>);", 
];
xr_frag_insert('l/77/89c02da9cff9eda32eb2771ec125bc69cb12d4.xr', __xr_tmp);
