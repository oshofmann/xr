var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_KPROBES_H\">_LINUX_KPROBES_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_KPROBES_H\">_LINUX_KPROBES_H</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Kernel Probes (KProbes)</span>", 
"<span class=\"comment\"> *  include/linux/kprobes.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) IBM Corporation, 2002, 2004</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2002-Oct<span class=\"ts\"/>Created by Vamsi Krishna S &lt;vamsi_krishna@in.ibm.com&gt; Kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Probes initial implementation ( includes suggestions from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Rusty Russell).</span>", 
"<span class=\"comment\"> * 2004-July<span class=\"ts\"/>Suparna Bhattacharya &lt;suparna@in.ibm.com&gt; added jumper probes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interface to access function arguments.</span>", 
"<span class=\"comment\"> * 2005-May<span class=\"ts\"/>Hien Nguyen &lt;hien@us.ibm.com&gt; and Jim Keniston</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>&lt;jkenisto@us.ibm.com&gt;  and Prasanna S Panchamukhi</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>&lt;prasanna@in.ibm.com&gt; added function-return probes.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KPROBES\">CONFIG_KPROBES</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* kprobe_status settings */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPROBE_HIT_ACTIVE\">KPROBE_HIT_ACTIVE</a><span class=\"ts\"/>0x00000001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPROBE_HIT_SS\">KPROBE_HIT_SS</a><span class=\"ts\"/><span class=\"ts\"/>0x00000002", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPROBE_REENTER\">KPROBE_REENTER</a><span class=\"ts\"/><span class=\"ts\"/>0x00000004", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPROBE_HIT_SSDONE\">KPROBE_HIT_SSDONE</a><span class=\"ts\"/>0x00000008", 
"", 
"<span class=\"comment\">/* Attach to insert probes on any functions which should be ignored*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__section__\">__section__</a>(\".kprobes.text\")))", 
"#else <span class=\"comment\">/* CONFIG_KPROBES */</span>", 
"typedef int <a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a>;", 
"struct <a class=\"id\" href=\"#arch_specific_insn\">arch_specific_insn</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dummy\">dummy</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_KPROBES */</span>", 
"", 
"struct <a class=\"id\" href=\"#kprobe\">kprobe</a>;", 
"struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>;", 
"struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a>;", 
"struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a>;", 
"typedef int (*<a class=\"id\" href=\"#kprobe_pre_handler_t\">kprobe_pre_handler_t</a>) (struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *);", 
"typedef int (*<a class=\"id\" href=\"#kprobe_break_handler_t\">kprobe_break_handler_t</a>) (struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *);", 
"typedef void (*<a class=\"id\" href=\"#kprobe_post_handler_t\">kprobe_post_handler_t</a>) (struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"typedef int (*<a class=\"id\" href=\"#kprobe_fault_handler_t\">kprobe_fault_handler_t</a>) (struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#trapnr\">trapnr</a>);", 
"typedef int (*<a class=\"id\" href=\"#kretprobe_handler_t\">kretprobe_handler_t</a>) (struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *);", 
"", 
"struct <a class=\"id\" href=\"#kprobe\">kprobe</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#hlist\">hlist</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* list of kprobes for multi-handler support */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*count the number of times this probe was temporarily disarmed */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nmissed\">nmissed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* location of the probe point */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow user to indicate symbol name of the probe point */</span>", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#symbol_name\">symbol_name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Offset into the symbol */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Called before addr is executed. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_pre_handler_t\">kprobe_pre_handler_t</a> <a class=\"id\" href=\"#pre_handler\">pre_handler</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Called after addr is executed, unless... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_post_handler_t\">kprobe_post_handler_t</a> <a class=\"id\" href=\"#post_handler\">post_handler</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ... called if executing addr causes a fault (eg. page fault).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Return 1 if it handled fault, otherwise kernel will see it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_fault_handler_t\">kprobe_fault_handler_t</a> <a class=\"id\" href=\"#fault_handler\">fault_handler</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ... called if breakpoint trap occurs in probe handler.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Return 1 if it handled break, otherwise kernel will see it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_break_handler_t\">kprobe_break_handler_t</a> <a class=\"id\" href=\"#break_handler\">break_handler</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Saved opcode (which has been replaced with breakpoint) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* copy of the original instruction */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_specific_insn\">arch_specific_insn</a> <a class=\"id\" href=\"#ainsn\">ainsn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Indicates various status flags.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protected by kprobe_mutex after this kprobe is registered.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Kprobe status flags */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPROBE_FLAG_GONE\">KPROBE_FLAG_GONE</a><span class=\"ts\"/>1 <span class=\"comment\">/* breakpoint has already gone */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPROBE_FLAG_DISABLED\">KPROBE_FLAG_DISABLED</a><span class=\"ts\"/>2 <span class=\"comment\">/* probe is temporarily disabled */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPROBE_FLAG_OPTIMIZED\">KPROBE_FLAG_OPTIMIZED</a><span class=\"ts\"/>4 <span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   * probe is really optimized.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   * NOTE:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   * this flag is only for optimized_kprobe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   */</span>", 
"", 
"<span class=\"comment\">/* Has this kprobe gone ? */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#kprobe_gone\">kprobe_gone</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KPROBE_FLAG_GONE\">KPROBE_FLAG_GONE</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Is this kprobe disabled ? */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#KPROBE_FLAG_DISABLED\">KPROBE_FLAG_DISABLED</a> | <a class=\"id\" href=\"#KPROBE_FLAG_GONE\">KPROBE_FLAG_GONE</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Is this kprobe really running optimized path ? */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#kprobe_optimized\">kprobe_optimized</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KPROBE_FLAG_OPTIMIZED\">KPROBE_FLAG_OPTIMIZED</a>;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special probe type that uses setjmp-longjmp type tricks to resume</span>", 
"<span class=\"comment\"> * execution at a specified entry with a matching prototype corresponding</span>", 
"<span class=\"comment\"> * to the probed function - a trick to enable arguments to become</span>", 
"<span class=\"comment\"> * accessible seamlessly by probe handling logic.</span>", 
"<span class=\"comment\"> * Note:</span>", 
"<span class=\"comment\"> * Because of the way compilers allocate stack space for local variables</span>", 
"<span class=\"comment\"> * etc upfront, regardless of sub-scopes within a function, this mirroring</span>", 
"<span class=\"comment\"> * principle currently works only for probes placed on function entry points.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#jprobe\">jprobe</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> <a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#entry\">entry</a>;<span class=\"ts\"/><span class=\"comment\">/* probe handling code to jump to */</span>", 
"};", 
"", 
"<span class=\"comment\">/* For backward compatibility with old code using JPROBE_ENTRY() */</span>", 
];
xr_frag_insert('l/77/aebc222f74b63fb1feb81dc3d753205ba3845b.xr', __xr_tmp);
