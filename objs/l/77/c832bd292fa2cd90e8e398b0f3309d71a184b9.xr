var __xr_tmp = [
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> *  Parallel SCSI (SPI) transport specific attributes exported to sysfs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (c) 2003 Silicon Graphics, Inc.  All rights reserved.</span>", 
"<span class=\"comment\"> *  Copyright (c) 2004, 2005 James Bottomley &lt;James.Bottomley@SteelEye.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> *  (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysfs\">sysfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi\">scsi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"scsi_priv.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_device\">scsi_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_host\">scsi_host</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_eh\">scsi_eh</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_transport\">scsi_transport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_transport_spi\">scsi_transport_spi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPI_NUM_ATTRS\">SPI_NUM_ATTRS</a> 14<span class=\"ts\"/><span class=\"comment\">/* increase this if you add attributes */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPI_OTHER_ATTRS\">SPI_OTHER_ATTRS</a> 1<span class=\"ts\"/><span class=\"comment\">/* Increase this if you add \"always</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * on\" attributes */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPI_HOST_ATTRS\">SPI_HOST_ATTRS</a><span class=\"ts\"/>1", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPI_MAX_ECHO_BUFFER_SIZE\">SPI_MAX_ECHO_BUFFER_SIZE</a><span class=\"ts\"/>4096", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DV_LOOPS\">DV_LOOPS</a><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DV_TIMEOUT\">DV_TIMEOUT</a><span class=\"ts\"/>(10*<a class=\"id\" href=\"#HZ\">HZ</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DV_RETRIES\">DV_RETRIES</a><span class=\"ts\"/>3<span class=\"ts\"/><span class=\"comment\">/* should only need at most </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * two cc/ua clears */</span>", 
"", 
"<span class=\"comment\">/* Our blacklist flags */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SPI_BLIST_NOIUS\">SPI_BLIST_NOIUS</a> = 0x1,", 
"};", 
"", 
"<span class=\"comment\">/* blacklist table, modelled on scsi_devinfo.c */</span>", 
"static struct {", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#vendor\">vendor</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#model\">model</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#flags\">flags</a>;", 
"} <a class=\"id\" href=\"#spi_static_device_list\">spi_static_device_list</a>[] <a class=\"id\" href=\"#__initdata\">__initdata</a> = {", 
"<span class=\"ts\"/>{\"HP\", \"Ultrium 3-SCSI\", <a class=\"id\" href=\"#SPI_BLIST_NOIUS\">SPI_BLIST_NOIUS</a> },", 
"<span class=\"ts\"/>{\"IBM\", \"ULTRIUM-TD3\", <a class=\"id\" href=\"#SPI_BLIST_NOIUS\">SPI_BLIST_NOIUS</a> },", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0}", 
"};", 
"", 
"<span class=\"comment\">/* Private data accessors (keep these out of the header file) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_dv_in_progress\">spi_dv_in_progress</a>(<a class=\"id\" href=\"#x\">x</a>) (((struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *)&amp;(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#starget_data\">starget_data</a>)-><a class=\"id\" href=\"#dv_in_progress\">dv_in_progress</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_dv_mutex\">spi_dv_mutex</a>(<a class=\"id\" href=\"#x\">x</a>) (((struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *)&amp;(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#starget_data\">starget_data</a>)-><a class=\"id\" href=\"#dv_mutex\">dv_mutex</a>)", 
"", 
"struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_transport_template\">scsi_transport_template</a> <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_function_template\">spi_function_template</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_spi_internal\">to_spi_internal</a>(<a class=\"id\" href=\"#tmpl\">tmpl</a>)<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#tmpl\">tmpl</a>, struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a>, <a class=\"id\" href=\"#t\">t</a>)", 
"", 
"static const int <a class=\"id\" href=\"#ppr_to_ps\">ppr_to_ps</a>[] = {", 
"<span class=\"ts\"/><span class=\"comment\">/* The PPR values 0-6 are reserved, fill them in when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the committee defines them */</span>", 
"<span class=\"ts\"/>-1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x00 */</span>", 
"<span class=\"ts\"/>-1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x01 */</span>", 
"<span class=\"ts\"/>-1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x02 */</span>", 
"<span class=\"ts\"/>-1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x03 */</span>", 
"<span class=\"ts\"/>-1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x04 */</span>", 
"<span class=\"ts\"/>-1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x05 */</span>", 
"<span class=\"ts\"/>-1,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x06 */</span>", 
"<span class=\"ts\"/> 3125,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x07 */</span>", 
"<span class=\"ts\"/> 6250,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x08 */</span>", 
"<span class=\"ts\"/>12500,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x09 */</span>", 
"<span class=\"ts\"/>25000,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x0a */</span>", 
"<span class=\"ts\"/>30300,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x0b */</span>", 
"<span class=\"ts\"/>50000,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x0c */</span>", 
"};", 
"<span class=\"comment\">/* The PPR values at which you calculate the period in ns by multiplying</span>", 
"<span class=\"comment\"> * by 4 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPI_STATIC_PPR\">SPI_STATIC_PPR</a><span class=\"ts\"/>0x0c", 
"", 
"static int <a class=\"id\" href=\"#sprint_frac\">sprint_frac</a>(char *<a class=\"id\" href=\"#dest\">dest</a>, int <a class=\"id\" href=\"#value\">value</a>, int <a class=\"id\" href=\"#denom\">denom</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#frac\">frac</a> = <a class=\"id\" href=\"#value\">value</a> % <a class=\"id\" href=\"#denom\">denom</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#dest\">dest</a>, \"%d\", <a class=\"id\" href=\"#value\">value</a> / <a class=\"id\" href=\"#denom\">denom</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#frac\">frac</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>[<a class=\"id\" href=\"#result\">result</a>++] = '.';", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#denom\">denom</a> /= 10;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#dest\">dest</a> + <a class=\"id\" href=\"#result\">result</a>, \"%d\", <a class=\"id\" href=\"#frac\">frac</a> / <a class=\"id\" href=\"#denom\">denom</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frac\">frac</a> %= <a class=\"id\" href=\"#denom\">denom</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#frac\">frac</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>[<a class=\"id\" href=\"#result\">result</a>++] = '\\0';", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#spi_execute\">spi_execute</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, const void *<a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned <a class=\"id\" href=\"#bufflen\">bufflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#sense\">sense</a>[<a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>];", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#DV_RETRIES\">DV_RETRIES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#scsi_execute\">scsi_execute</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#bufflen\">bufflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sense\">sense</a>, <a class=\"id\" href=\"#DV_TIMEOUT\">DV_TIMEOUT</a>, <span class=\"comment\">/* retries */</span> 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#REQ_FAILFAST_DEV\">REQ_FAILFAST_DEV</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#REQ_FAILFAST_TRANSPORT\">REQ_FAILFAST_TRANSPORT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#REQ_FAILFAST_DRIVER\">REQ_FAILFAST_DRIVER</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#driver_byte\">driver_byte</a>(<a class=\"id\" href=\"#result\">result</a>) &amp; <a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr_tmp\">sshdr_tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a> = &amp;<a class=\"id\" href=\"#sshdr_tmp\">sshdr_tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_normalize_sense\">scsi_normalize_sense</a>(<a class=\"id\" href=\"#sense\">sense</a>, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static struct {", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#spi_signal_type\">spi_signal_type</a><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"} <a class=\"id\" href=\"#signal_types\">signal_types</a>[] = {", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#SPI_SIGNAL_UNKNOWN\">SPI_SIGNAL_UNKNOWN</a>, \"unknown\" },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#SPI_SIGNAL_SE\">SPI_SIGNAL_SE</a>, \"SE\" },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#SPI_SIGNAL_LVD\">SPI_SIGNAL_LVD</a>, \"LVD\" },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#SPI_SIGNAL_HVD\">SPI_SIGNAL_HVD</a>, \"HVD\" },", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> const char *<a class=\"id\" href=\"#spi_signal_to_string\">spi_signal_to_string</a>(enum <a class=\"id\" href=\"#spi_signal_type\">spi_signal_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#signal_types\">signal_types</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#signal_types\">signal_types</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#signal_types\">signal_types</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> enum <a class=\"id\" href=\"#spi_signal_type\">spi_signal_type</a> <a class=\"id\" href=\"#spi_signal_to_value\">spi_signal_to_value</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#signal_types\">signal_types</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> =  <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#signal_types\">signal_types</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#signal_types\">signal_types</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#len\">len</a>) == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#len\">len</a>] == '\\n' || <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#len\">len</a>] == '\\0'))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#signal_types\">signal_types</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SPI_SIGNAL_UNKNOWN\">SPI_SIGNAL_UNKNOWN</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#spi_host_setup\">spi_host_setup</a>(struct <a class=\"id\" href=\"#transport_container\">transport_container</a> *<a class=\"id\" href=\"#tc\">tc</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_signalling\">spi_signalling</a>(<a class=\"id\" href=\"#shost\">shost</a>) = <a class=\"id\" href=\"#SPI_SIGNAL_UNKNOWN\">SPI_SIGNAL_UNKNOWN</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#spi_host_configure\">spi_host_configure</a>(struct <a class=\"id\" href=\"#transport_container\">transport_container</a> *<a class=\"id\" href=\"#tc\">tc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a>);", 
"", 
"static <a class=\"id\" href=\"#DECLARE_TRANSPORT_CLASS\">DECLARE_TRANSPORT_CLASS</a>(<a class=\"id\" href=\"#spi_host_class\">spi_host_class</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"spi_host\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#spi_host_setup\">spi_host_setup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#spi_host_configure\">spi_host_configure</a>);", 
"", 
"static int <a class=\"id\" href=\"#spi_host_match\">spi_host_match</a>(struct <a class=\"id\" href=\"#attribute_container\">attribute_container</a> *<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_is_host_device\">scsi_is_host_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>  || <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>-><a class=\"id\" href=\"#host_attrs\">host_attrs</a>.<a class=\"id\" href=\"#ac\">ac</a>.<a class=\"id\" href=\"#class\">class</a>", 
"<span class=\"ts\"/>    != &amp;<a class=\"id\" href=\"#spi_host_class\">spi_host_class</a>.<a class=\"id\" href=\"#class\">class</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>-><a class=\"id\" href=\"#host_attrs\">host_attrs</a>.<a class=\"id\" href=\"#ac\">ac</a> == <a class=\"id\" href=\"#cont\">cont</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#spi_target_configure\">spi_target_configure</a>(struct <a class=\"id\" href=\"#transport_container\">transport_container</a> *<a class=\"id\" href=\"#tc\">tc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a>);", 
"", 
"static int <a class=\"id\" href=\"#spi_device_configure\">spi_device_configure</a>(struct <a class=\"id\" href=\"#transport_container\">transport_container</a> *<a class=\"id\" href=\"#tc\">tc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#to_scsi_device\">to_scsi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bflags\">bflags</a> = <a class=\"id\" href=\"#scsi_get_device_flags_keyed\">scsi_get_device_flags_keyed</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, &amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry\">inquiry</a>[8],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry\">inquiry</a>[16],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#SCSI_DEVINFO_SPI\">SCSI_DEVINFO_SPI</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Populate the target capability fields with the values</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gleaned from the device inquiry */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_support_sync\">spi_support_sync</a>(<a class=\"id\" href=\"#starget\">starget</a>) = <a class=\"id\" href=\"#scsi_device_sync\">scsi_device_sync</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_support_wide\">spi_support_wide</a>(<a class=\"id\" href=\"#starget\">starget</a>) = <a class=\"id\" href=\"#scsi_device_wide\">scsi_device_wide</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_support_dt\">spi_support_dt</a>(<a class=\"id\" href=\"#starget\">starget</a>) = <a class=\"id\" href=\"#scsi_device_dt\">scsi_device_dt</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_support_dt_only\">spi_support_dt_only</a>(<a class=\"id\" href=\"#starget\">starget</a>) = <a class=\"id\" href=\"#scsi_device_dt_only\">scsi_device_dt_only</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_support_ius\">spi_support_ius</a>(<a class=\"id\" href=\"#starget\">starget</a>) = <a class=\"id\" href=\"#scsi_device_ius\">scsi_device_ius</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bflags\">bflags</a> &amp; <a class=\"id\" href=\"#SPI_BLIST_NOIUS\">SPI_BLIST_NOIUS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"Information Units disabled by blacklist\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi_support_ius\">spi_support_ius</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_support_qas\">spi_support_qas</a>(<a class=\"id\" href=\"#starget\">starget</a>) = <a class=\"id\" href=\"#scsi_device_qas\">scsi_device_qas</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#spi_setup_transport_attrs\">spi_setup_transport_attrs</a>(struct <a class=\"id\" href=\"#transport_container\">transport_container</a> *<a class=\"id\" href=\"#tc\">tc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#to_scsi_target\">to_scsi_target</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_period\">spi_period</a>(<a class=\"id\" href=\"#starget\">starget</a>) = -1;<span class=\"ts\"/><span class=\"comment\">/* illegal value */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_min_period\">spi_min_period</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_offset\">spi_offset</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;<span class=\"ts\"/><span class=\"comment\">/* async */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_max_offset\">spi_max_offset</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 255;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_width\">spi_width</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;<span class=\"ts\"/><span class=\"comment\">/* narrow */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_max_width\">spi_max_width</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_iu\">spi_iu</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;<span class=\"ts\"/><span class=\"comment\">/* no IU */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_max_iu\">spi_max_iu</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dt\">spi_dt</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;<span class=\"ts\"/><span class=\"comment\">/* ST */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_qas\">spi_qas</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_max_qas\">spi_max_qas</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_wr_flow\">spi_wr_flow</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_rd_strm\">spi_rd_strm</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_rti\">spi_rti</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_pcomp_en\">spi_pcomp_en</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_hold_mcs\">spi_hold_mcs</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_pending\">spi_dv_pending</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_in_progress\">spi_dv_in_progress</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_initial_dv\">spi_initial_dv</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#spi_dv_mutex\">spi_dv_mutex</a>(<a class=\"id\" href=\"#starget\">starget</a>));", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_transport_show_simple\">spi_transport_show_simple</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#show_spi_transport_\">show_spi_transport_</a>##<a class=\"id\" href=\"#field\">field</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#transport_class_to_starget\">transport_class_to_starget</a>(<a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *<a class=\"id\" href=\"#tp\">tp</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = (struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *)&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_data\">starget_data</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, 20, <a class=\"id\" href=\"#format_string\">format_string</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#field\">field</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_transport_store_simple\">spi_transport_store_simple</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#store_spi_transport_\">store_spi_transport_</a>##<a class=\"id\" href=\"#field\">field</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, <span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#transport_class_to_starget\">transport_class_to_starget</a>(<a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *<a class=\"id\" href=\"#tp\">tp</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = (struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *)&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_data\">starget_data</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#field\">field</a> = <a class=\"id\" href=\"#val\">val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_transport_show_function\">spi_transport_show_function</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#show_spi_transport_\">show_spi_transport_</a>##<a class=\"id\" href=\"#field\">field</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#transport_class_to_starget\">transport_class_to_starget</a>(<a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *<a class=\"id\" href=\"#tp\">tp</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#to_spi_internal\">to_spi_internal</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = (struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *)&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_data\">starget_data</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_\">get_</a>##<a class=\"id\" href=\"#field\">field</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_\">get_</a>##<a class=\"id\" href=\"#field\">field</a>(<a class=\"id\" href=\"#starget\">starget</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, 20, <a class=\"id\" href=\"#format_string\">format_string</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#field\">field</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_transport_store_function\">spi_transport_store_function</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#store_spi_transport_\">store_spi_transport_</a>##<a class=\"id\" href=\"#field\">field</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#transport_class_to_starget\">transport_class_to_starget</a>(<a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#to_spi_internal\">to_spi_internal</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#field\">field</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#field\">field</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#val\">val</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_transport_store_max\">spi_transport_store_max</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#store_spi_transport_\">store_spi_transport_</a>##<a class=\"id\" href=\"#field\">field</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#transport_class_to_starget\">transport_class_to_starget</a>(<a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#to_spi_internal\">to_spi_internal</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *<a class=\"id\" href=\"#tp\">tp</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>= (struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *)&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_data\">starget_data</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#field\">field</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &gt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#max_\">max_</a>##<a class=\"id\" href=\"#field\">field</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#max_\">max_</a>##<a class=\"id\" href=\"#field\">field</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#field\">field</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#val\">val</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_transport_rd_attr\">spi_transport_rd_attr</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_transport_show_function\">spi_transport_show_function</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_transport_store_function\">spi_transport_store_function</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#show_spi_transport_\">show_spi_transport_</a>##<a class=\"id\" href=\"#field\">field</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#store_spi_transport_\">store_spi_transport_</a>##<a class=\"id\" href=\"#field\">field</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_transport_simple_attr\">spi_transport_simple_attr</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_transport_show_simple\">spi_transport_show_simple</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_transport_store_simple\">spi_transport_store_simple</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#show_spi_transport_\">show_spi_transport_</a>##<a class=\"id\" href=\"#field\">field</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#store_spi_transport_\">store_spi_transport_</a>##<a class=\"id\" href=\"#field\">field</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_transport_max_attr\">spi_transport_max_attr</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_transport_show_function\">spi_transport_show_function</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_transport_store_max\">spi_transport_store_max</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_transport_simple_attr\">spi_transport_simple_attr</a>(<a class=\"id\" href=\"#max_\">max_</a>##<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#format_string\">format_string</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#show_spi_transport_\">show_spi_transport_</a>##<a class=\"id\" href=\"#field\">field</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#store_spi_transport_\">store_spi_transport_</a>##<a class=\"id\" href=\"#field\">field</a>);", 
"", 
"<span class=\"comment\">/* The Parallel SCSI Tranport Attributes: */</span>", 
"<a class=\"id\" href=\"#spi_transport_max_attr\">spi_transport_max_attr</a>(<a class=\"id\" href=\"#offset\">offset</a>, \"%d\\n\");", 
"<a class=\"id\" href=\"#spi_transport_max_attr\">spi_transport_max_attr</a>(<a class=\"id\" href=\"#width\">width</a>, \"%d\\n\");", 
"<a class=\"id\" href=\"#spi_transport_max_attr\">spi_transport_max_attr</a>(<a class=\"id\" href=\"#iu\">iu</a>, \"%d\\n\");", 
"<a class=\"id\" href=\"#spi_transport_rd_attr\">spi_transport_rd_attr</a>(<a class=\"id\" href=\"#dt\">dt</a>, \"%d\\n\");", 
"<a class=\"id\" href=\"#spi_transport_max_attr\">spi_transport_max_attr</a>(<a class=\"id\" href=\"#qas\">qas</a>, \"%d\\n\");", 
"<a class=\"id\" href=\"#spi_transport_rd_attr\">spi_transport_rd_attr</a>(<a class=\"id\" href=\"#wr_flow\">wr_flow</a>, \"%d\\n\");", 
"<a class=\"id\" href=\"#spi_transport_rd_attr\">spi_transport_rd_attr</a>(<a class=\"id\" href=\"#rd_strm\">rd_strm</a>, \"%d\\n\");", 
"<a class=\"id\" href=\"#spi_transport_rd_attr\">spi_transport_rd_attr</a>(<a class=\"id\" href=\"#rti\">rti</a>, \"%d\\n\");", 
"<a class=\"id\" href=\"#spi_transport_rd_attr\">spi_transport_rd_attr</a>(<a class=\"id\" href=\"#pcomp_en\">pcomp_en</a>, \"%d\\n\");", 
"<a class=\"id\" href=\"#spi_transport_rd_attr\">spi_transport_rd_attr</a>(<a class=\"id\" href=\"#hold_mcs\">hold_mcs</a>, \"%d\\n\");", 
"", 
"<span class=\"comment\">/* we only care about the first child device that's a real SCSI device</span>", 
"<span class=\"comment\"> * so we return 1 to terminate the iteration when we find it */</span>", 
"static int <a class=\"id\" href=\"#child_iter\">child_iter</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_is_sdev_device\">scsi_is_sdev_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_device\">spi_dv_device</a>(<a class=\"id\" href=\"#to_scsi_device\">to_scsi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#store_spi_revalidate\">store_spi_revalidate</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#transport_class_to_starget\">transport_class_to_starget</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_for_each_child\">device_for_each_child</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#child_iter\">child_iter</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#revalidate\">revalidate</a>, <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#store_spi_revalidate\">store_spi_revalidate</a>);", 
"", 
"<span class=\"comment\">/* Translate the period into ns according to the current spec</span>", 
"<span class=\"comment\"> * for SDTR/PPR messages */</span>", 
"static int <a class=\"id\" href=\"#period_to_str\">period_to_str</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#period\">period</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#picosec\">picosec</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#period\">period</a> &lt; 0 || <a class=\"id\" href=\"#period\">period</a> &gt; 0xff) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#picosec\">picosec</a> = -1;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#period\">period</a> <= <a class=\"id\" href=\"#SPI_STATIC_PPR\">SPI_STATIC_PPR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#picosec\">picosec</a> = <a class=\"id\" href=\"#ppr_to_ps\">ppr_to_ps</a>[<a class=\"id\" href=\"#period\">period</a>];", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#picosec\">picosec</a> = <a class=\"id\" href=\"#period\">period</a> * 4000;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#picosec\">picosec</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"reserved\");", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sprint_frac\">sprint_frac</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#picosec\">picosec</a>, 1000);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#show_spi_transport_period_helper\">show_spi_transport_period_helper</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#period\">period</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#period_to_str\">period_to_str</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#period\">period</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#len\">len</a>++] = '\\n';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#len\">len</a>] = '\\0';", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#store_spi_transport_period_helper\">store_spi_transport_period_helper</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, int *<a class=\"id\" href=\"#periodp\">periodp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#picosec\">picosec</a>, <a class=\"id\" href=\"#period\">period</a> = -1;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#endp\">endp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#picosec\">picosec</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#endp\">endp</a>, 10) * 1000;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#endp\">endp</a> == '.') {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mult\">mult</a> = 100;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#endp\">endp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#endp\">endp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#picosec\">picosec</a> += (*<a class=\"id\" href=\"#endp\">endp</a> - '0') * <a class=\"id\" href=\"#mult\">mult</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mult\">mult</a> /= 10;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#mult\">mult</a> &gt; 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> <= <a class=\"id\" href=\"#SPI_STATIC_PPR\">SPI_STATIC_PPR</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppr_to_ps\">ppr_to_ps</a>[<a class=\"id\" href=\"#j\">j</a>] &lt; <a class=\"id\" href=\"#picosec\">picosec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#period\">period</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#picosec\">picosec</a> / 4000;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#period\">period</a> &gt; 0xff)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = 0xff;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#periodp\">periodp</a> = <a class=\"id\" href=\"#period\">period</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#show_spi_transport_period\">show_spi_transport_period</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#transport_class_to_starget\">transport_class_to_starget</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#to_spi_internal\">to_spi_internal</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *<a class=\"id\" href=\"#tp\">tp</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *)&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_data\">starget_data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_period\">get_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_period\">get_period</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#show_spi_transport_period_helper\">show_spi_transport_period_helper</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#period\">period</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#store_spi_transport_period\">store_spi_transport_period</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#transport_class_to_starget\">transport_class_to_starget</a>(<a class=\"id\" href=\"#cdev\">cdev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#to_spi_internal\">to_spi_internal</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *<a class=\"id\" href=\"#tp\">tp</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *)&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_data\">starget_data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_period\">set_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#store_spi_transport_period_helper\">store_spi_transport_period_helper</a>(<a class=\"id\" href=\"#cdev\">cdev</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#period\">period</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#period\">period</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#min_period\">min_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#min_period\">min_period</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_period\">set_period</a>(<a class=\"id\" href=\"#starget\">starget</a>, <a class=\"id\" href=\"#period\">period</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#show_spi_transport_period\">show_spi_transport_period</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#store_spi_transport_period\">store_spi_transport_period</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#show_spi_transport_min_period\">show_spi_transport_min_period</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#transport_class_to_starget\">transport_class_to_starget</a>(<a class=\"id\" href=\"#cdev\">cdev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#to_spi_internal\">to_spi_internal</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *<a class=\"id\" href=\"#tp\">tp</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *)&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_data\">starget_data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_period\">set_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#show_spi_transport_period_helper\">show_spi_transport_period_helper</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#min_period\">min_period</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#store_spi_transport_min_period\">store_spi_transport_min_period</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#transport_class_to_starget\">transport_class_to_starget</a>(<a class=\"id\" href=\"#cdev\">cdev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *<a class=\"id\" href=\"#tp\">tp</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *)&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_data\">starget_data</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#store_spi_transport_period_helper\">store_spi_transport_period_helper</a>(<a class=\"id\" href=\"#cdev\">cdev</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#min_period\">min_period</a>);", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#min_period\">min_period</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#show_spi_transport_min_period\">show_spi_transport_min_period</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#store_spi_transport_min_period\">store_spi_transport_min_period</a>);", 
"", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_spi_host_signalling\">show_spi_host_signalling</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#cdev\">cdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#transport_class_to_shost\">transport_class_to_shost</a>(<a class=\"id\" href=\"#cdev\">cdev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#to_spi_internal\">to_spi_internal</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_signalling\">get_signalling</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_signalling\">get_signalling</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%s\\n\", <a class=\"id\" href=\"#spi_signal_to_string\">spi_signal_to_string</a>(<a class=\"id\" href=\"#spi_signalling\">spi_signalling</a>(<a class=\"id\" href=\"#shost\">shost</a>)));", 
"}", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#store_spi_host_signalling\">store_spi_host_signalling</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#transport_class_to_shost\">transport_class_to_shost</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#to_spi_internal\">to_spi_internal</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>);", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#spi_signal_type\">spi_signal_type</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#spi_signal_to_value\">spi_signal_to_value</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_signalling\">set_signalling</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#SPI_SIGNAL_UNKNOWN\">SPI_SIGNAL_UNKNOWN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_signalling\">set_signalling</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#signalling\">signalling</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#show_spi_host_signalling\">show_spi_host_signalling</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#store_spi_host_signalling\">store_spi_host_signalling</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#x\">x</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a>, <a class=\"id\" href=\"#y\">y</a>)", 
"", 
"enum <a class=\"id\" href=\"#spi_compare_returns\">spi_compare_returns</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SPI_COMPARE_SUCCESS\">SPI_COMPARE_SUCCESS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SPI_COMPARE_FAILURE\">SPI_COMPARE_FAILURE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SPI_COMPARE_SKIP_TEST\">SPI_COMPARE_SKIP_TEST</a>,", 
"};", 
"", 
"", 
"<span class=\"comment\">/* This is for read/write Domain Validation:  If the device supports</span>", 
"<span class=\"comment\"> * an echo buffer, we do read/write tests to it */</span>", 
"static enum <a class=\"id\" href=\"#spi_compare_returns\">spi_compare_returns</a>", 
"<a class=\"id\" href=\"#spi_dv_device_echo_buffer\">spi_dv_device_echo_buffer</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, const int <a class=\"id\" href=\"#retries\">retries</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ptr\">ptr</a> - <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pattern\">pattern</a> = 0x0000ffff;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"", 
"<span class=\"ts\"/>const char <a class=\"id\" href=\"#spi_write_buffer\">spi_write_buffer</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WRITE_BUFFER\">WRITE_BUFFER</a>, 0x0a, 0, 0, 0, 0, 0, <a class=\"id\" href=\"#len\">len</a> >> 8, <a class=\"id\" href=\"#len\">len</a> &amp; 0xff, 0", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>const char <a class=\"id\" href=\"#spi_read_buffer\">spi_read_buffer</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#READ_BUFFER\">READ_BUFFER</a>, 0x0a, 0, 0, 0, 0, 0, <a class=\"id\" href=\"#len\">len</a> >> 8, <a class=\"id\" href=\"#len\">len</a> &amp; 0xff, 0", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up the pattern buffer.  Doesn't matter if we spill</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * slightly beyond since that's where the read buffer is */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#len\">len</a>; ) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fill the buffer with counting (test a) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#len\">len</a>, 32); <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#j\">j</a>] = <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fill the buffer with alternating words of 0x0 and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 0xffff (test b) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#k\">k</a> + 32); <a class=\"id\" href=\"#j\">j</a> += 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#word\">word</a> = (<a class=\"id\" href=\"#u16\">u16</a> *)&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#word\">word</a> = (<a class=\"id\" href=\"#j\">j</a> &amp; 0x02) ? 0x0000 : 0xffff;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fill with crosstalk (alternating 0x5555 0xaaa)</span>", 
"<span class=\"comment\">                 * (test c) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#k\">k</a> + 32); <a class=\"id\" href=\"#j\">j</a> += 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#word\">word</a> = (<a class=\"id\" href=\"#u16\">u16</a> *)&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#word\">word</a> = (<a class=\"id\" href=\"#j\">j</a> &amp; 0x02) ? 0x5555 : 0xaaaa;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fill with shifting bits (test d) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#k\">k</a> + 32); <a class=\"id\" href=\"#j\">j</a> += 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#word\">word</a> = (unsigned int *)&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#roll\">roll</a> = (<a class=\"id\" href=\"#pattern\">pattern</a> &amp; 0x80000000) ? 1 : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#word\">word</a> = <a class=\"id\" href=\"#pattern\">pattern</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pattern\">pattern</a> = (<a class=\"id\" href=\"#pattern\">pattern</a> << 1) | <a class=\"id\" href=\"#roll\">roll</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* don't bother with random data (test e) */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#r\">r</a> = 0; <a class=\"id\" href=\"#r\">r</a> &lt; <a class=\"id\" href=\"#retries\">retries</a>; <a class=\"id\" href=\"#r\">r</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#spi_execute\">spi_execute</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#spi_write_buffer\">spi_write_buffer</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#len\">len</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#result\">result</a> || !<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#sdev\">sdev</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#SDEV_QUIESCE\">SDEV_QUIESCE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <span class=\"comment\">/* INVALID FIELD IN CDB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x24 && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0x00)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This would mean that the drive lied</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to us about supporting an echo</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * buffer (unfortunately some Western</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Digital drives do precisely this)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SPI_COMPARE_SKIP_TEST\">SPI_COMPARE_SKIP_TEST</a>;", 
"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdev\">sdev</a>, \"Write Buffer failure %x\\n\", <a class=\"id\" href=\"#result\">result</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SPI_COMPARE_FAILURE\">SPI_COMPARE_FAILURE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, 0, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi_execute\">spi_execute</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#spi_read_buffer\">spi_read_buffer</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#SDEV_QUIESCE\">SDEV_QUIESCE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#len\">len</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SPI_COMPARE_FAILURE\">SPI_COMPARE_FAILURE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SPI_COMPARE_SUCCESS\">SPI_COMPARE_SUCCESS</a>;", 
"}", 
"", 
"<span class=\"comment\">/* This is for the simplest form of Domain Validation: a read test</span>", 
"<span class=\"comment\"> * on the inquiry data from the device */</span>", 
"static enum <a class=\"id\" href=\"#spi_compare_returns\">spi_compare_returns</a>", 
"<a class=\"id\" href=\"#spi_dv_device_compare_inquiry\">spi_dv_device_compare_inquiry</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, const int <a class=\"id\" href=\"#retries\">retries</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a>;", 
"<span class=\"ts\"/>const char <a class=\"id\" href=\"#spi_inquiry\">spi_inquiry</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INQUIRY\">INQUIRY</a>, 0, 0, 0, <a class=\"id\" href=\"#len\">len</a>, 0", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#r\">r</a> = 0; <a class=\"id\" href=\"#r\">r</a> &lt; <a class=\"id\" href=\"#retries\">retries</a>; <a class=\"id\" href=\"#r\">r</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, 0, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#spi_execute\">spi_execute</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#spi_inquiry\">spi_inquiry</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#result\">result</a> || !<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#sdev\">sdev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#SDEV_QUIESCE\">SDEV_QUIESCE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SPI_COMPARE_FAILURE\">SPI_COMPARE_FAILURE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we don't have the inquiry data already, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first read gets it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a> == <a class=\"id\" href=\"#buffer\">buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#len\">len</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* failure */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SPI_COMPARE_FAILURE\">SPI_COMPARE_FAILURE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SPI_COMPARE_SUCCESS\">SPI_COMPARE_SUCCESS</a>;", 
"}", 
"", 
"static enum <a class=\"id\" href=\"#spi_compare_returns\">spi_compare_returns</a>", 
"<a class=\"id\" href=\"#spi_dv_retrain\">spi_dv_retrain</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ptr\">ptr</a>,", 
"<span class=\"ts\"/>       enum <a class=\"id\" href=\"#spi_compare_returns\">spi_compare_returns</a> ", 
"<span class=\"ts\"/>       (*<a class=\"id\" href=\"#compare_fn\">compare_fn</a>)(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *, <a class=\"id\" href=\"#u8\">u8</a> *, <a class=\"id\" href=\"#u8\">u8</a> *, int))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#to_spi_internal\">to_spi_internal</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#transportt\">transportt</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#period\">period</a> = 0, <a class=\"id\" href=\"#prevperiod\">prevperiod</a> = 0; ", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#spi_compare_returns\">spi_compare_returns</a> <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#newperiod\">newperiod</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#compare_fn\">compare_fn</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#DV_LOOPS\">DV_LOOPS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> == <a class=\"id\" href=\"#SPI_COMPARE_SUCCESS\">SPI_COMPARE_SUCCESS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    || <a class=\"id\" href=\"#retval\">retval</a> == <a class=\"id\" href=\"#SPI_COMPARE_SKIP_TEST\">SPI_COMPARE_SKIP_TEST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* OK, retrain, fallback */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_iu\">get_iu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_iu\">get_iu</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_qas\">get_qas</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_qas\">get_qas</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_period\">get_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_period\">get_period</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Here's the fallback sequence; first try turning off</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * IU, then QAS (if we can control them), then finally</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fall down the periods */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_iu\">set_iu</a> && <a class=\"id\" href=\"#spi_iu\">spi_iu</a>(<a class=\"id\" href=\"#starget\">starget</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_printk\">starget_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#starget\">starget</a>, \"Domain Validation Disabing Information Units\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#iu\">iu</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_qas\">set_qas</a> && <a class=\"id\" href=\"#spi_qas\">spi_qas</a>(<a class=\"id\" href=\"#starget\">starget</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_printk\">starget_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#starget\">starget</a>, \"Domain Validation Disabing Quick Arbitration and Selection\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#qas\">qas</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newperiod\">newperiod</a> = <a class=\"id\" href=\"#spi_period\">spi_period</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#newperiod\">newperiod</a> &gt; <a class=\"id\" href=\"#period\">period</a> ? <a class=\"id\" href=\"#newperiod\">newperiod</a> : <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#period\">period</a> &lt; 0x0d)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> += <a class=\"id\" href=\"#period\">period</a> >> 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#period\">period</a> &gt; 0xff || <a class=\"id\" href=\"#period\">period</a> == <a class=\"id\" href=\"#prevperiod\">prevperiod</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Total failure; set to async and return */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_printk\">starget_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#starget\">starget</a>, \"Domain Validation Failure, dropping back to Asynchronous\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#offset\">offset</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SPI_COMPARE_FAILURE\">SPI_COMPARE_FAILURE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_printk\">starget_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#starget\">starget</a>, \"Domain Validation detected failure, dropping back\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#period\">period</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prevperiod\">prevperiod</a> = <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#spi_dv_device_get_echo_buffer\">spi_dv_device_get_echo_buffer</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* first off do a test unit ready.  This can error out </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because of reservations or some other reason.  If it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fails, the device won't let us write to the echo buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so just return failure */</span>", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>const char <a class=\"id\" href=\"#spi_test_unit_ready\">spi_test_unit_ready</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TEST_UNIT_READY\">TEST_UNIT_READY</a>, 0, 0, 0, 0, 0", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>const char <a class=\"id\" href=\"#spi_read_buffer_descriptor\">spi_read_buffer_descriptor</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#READ_BUFFER\">READ_BUFFER</a>, 0x0b, 0, 0, 0, 0, 0, 0, 4, 0", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"comment\">/* We send a set of three TURs to clear any outstanding </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unit attention conditions if they exist (Otherwise the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffer tests won't be happy).  If the TUR still fails</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (reservation conflict, device not ready, etc) just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * skip the write tests */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#l\">l</a> = 0; ; <a class=\"id\" href=\"#l\">l</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#spi_execute\">spi_execute</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#spi_test_unit_ready\">spi_test_unit_ready</a>, <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#l\">l</a> >= 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TUR succeeded */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#spi_execute\">spi_execute</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#spi_read_buffer_descriptor\">spi_read_buffer_descriptor</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, 4, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Device has no echo buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>[3] + ((<a class=\"id\" href=\"#buffer\">buffer</a>[2] &amp; 0x1f) << 8);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#spi_dv_device_internal\">spi_dv_device_internal</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_internal\">spi_internal</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#to_spi_internal\">to_spi_internal</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#transportt\">transportt</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#min_period\">min_period</a> = <a class=\"id\" href=\"#spi_min_period\">spi_min_period</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_width\">max_width</a> = <a class=\"id\" href=\"#spi_max_width\">spi_max_width</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* first set us up for narrow async */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#offset\">offset</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#width\">width</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spi_dv_device_compare_inquiry\">spi_dv_device_compare_inquiry</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#DV_LOOPS\">DV_LOOPS</a>)", 
"<span class=\"ts\"/>    != <a class=\"id\" href=\"#SPI_COMPARE_SUCCESS\">SPI_COMPARE_SUCCESS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_printk\">starget_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#starget\">starget</a>, \"Domain Validation Initial Inquiry Failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: should probably offline the device here? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#spi_support_wide\">spi_support_wide</a>(<a class=\"id\" href=\"#starget\">starget</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi_max_width\">spi_max_width</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_width\">max_width</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* test width */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_width\">set_width</a> && <a class=\"id\" href=\"#max_width\">max_width</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_width\">set_width</a>(<a class=\"id\" href=\"#starget\">starget</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spi_dv_device_compare_inquiry\">spi_dv_device_compare_inquiry</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#DV_LOOPS\">DV_LOOPS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    != <a class=\"id\" href=\"#SPI_COMPARE_SUCCESS\">SPI_COMPARE_SUCCESS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_printk\">starget_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#starget\">starget</a>, \"Wide Transfers Fail\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_width\">set_width</a>(<a class=\"id\" href=\"#starget\">starget</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure we don't force wide back on by asking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for a transfer period that requires it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_width\">max_width</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#min_period\">min_period</a> &lt; 10)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_period\">min_period</a> = 10;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#set_period\">set_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* device can't handle synchronous */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#spi_support_sync\">spi_support_sync</a>(<a class=\"id\" href=\"#starget\">starget</a>) && !<a class=\"id\" href=\"#spi_support_dt\">spi_support_dt</a>(<a class=\"id\" href=\"#starget\">starget</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* len == -1 is the signal that we need to ascertain the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * presence of an echo buffer before trying to use it.  len ==</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 0 means we don't have an echo buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = -1;", 
"", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* now set up to the maximum */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#spi_max_offset\">spi_max_offset</a>(<a class=\"id\" href=\"#starget\">starget</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#min_period\">min_period</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* try QAS requests; this should be harmless to set if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * target supports it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spi_support_qas\">spi_support_qas</a>(<a class=\"id\" href=\"#starget\">starget</a>) && <a class=\"id\" href=\"#spi_max_qas\">spi_max_qas</a>(<a class=\"id\" href=\"#starget\">starget</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#qas\">qas</a>, 1);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#qas\">qas</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spi_support_ius\">spi_support_ius</a>(<a class=\"id\" href=\"#starget\">starget</a>) && <a class=\"id\" href=\"#spi_max_iu\">spi_max_iu</a>(<a class=\"id\" href=\"#starget\">starget</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#min_period\">min_period</a> &lt; 9) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This u320 (or u640). Set IU transfers */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#iu\">iu</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Then set the optional parameters */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#rd_strm\">rd_strm</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#wr_flow\">wr_flow</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#rti\">rti</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#min_period\">min_period</a> == 8)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#pcomp_en\">pcomp_en</a>, 1);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#iu\">iu</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* now that we've done all this, actually check the bus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * signal type (if known).  Some devices are stupid on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a SE bus and still claim they can try LVD only settings */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_signalling\">get_signalling</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_signalling\">get_signalling</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spi_signalling\">spi_signalling</a>(<a class=\"id\" href=\"#shost\">shost</a>) == <a class=\"id\" href=\"#SPI_SIGNAL_SE\">SPI_SIGNAL_SE</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#spi_signalling\">spi_signalling</a>(<a class=\"id\" href=\"#shost\">shost</a>) == <a class=\"id\" href=\"#SPI_SIGNAL_HVD\">SPI_SIGNAL_HVD</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#spi_support_dt\">spi_support_dt</a>(<a class=\"id\" href=\"#starget\">starget</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#dt\">dt</a>, 0);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#dt\">dt</a>, 1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* set width last because it will pull all the other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parameters down to required values */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DV_SET\">DV_SET</a>(<a class=\"id\" href=\"#width\">width</a>, <a class=\"id\" href=\"#max_width\">max_width</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do the read only INQUIRY tests */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_retrain\">spi_dv_retrain</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#inquiry_len\">inquiry_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#spi_dv_device_compare_inquiry\">spi_dv_device_compare_inquiry</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* See if we actually managed to negotiate and sustain DT */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_dt\">get_dt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#get_dt\">get_dt</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* see if the device has an echo buffer.  If it does we can do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the SPI pattern write tests.  Because of some broken</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * devices, we *only* try this on a device that has actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * negotiated DT */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == -1 && <a class=\"id\" href=\"#spi_dt\">spi_dt</a>(<a class=\"id\" href=\"#starget\">starget</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#spi_dv_device_get_echo_buffer\">spi_dv_device_get_echo_buffer</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_printk\">starget_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#starget\">starget</a>, \"Domain Validation skipping write tests\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#SPI_MAX_ECHO_BUFFER_SIZE\">SPI_MAX_ECHO_BUFFER_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget_printk\">starget_printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, <a class=\"id\" href=\"#starget\">starget</a>, \"Echo buffer size %d is too big, trimming to %d\\n\", <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#SPI_MAX_ECHO_BUFFER_SIZE\">SPI_MAX_ECHO_BUFFER_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#SPI_MAX_ECHO_BUFFER_SIZE\">SPI_MAX_ECHO_BUFFER_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spi_dv_retrain\">spi_dv_retrain</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#spi_dv_device_echo_buffer\">spi_dv_device_echo_buffer</a>)", 
"<span class=\"ts\"/>    == <a class=\"id\" href=\"#SPI_COMPARE_SKIP_TEST\">SPI_COMPARE_SKIP_TEST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* OK, the stupid drive can't do a write echo buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * test after all, fall back to the read tests */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/**<span class=\"ts\"/>spi_dv_device - Do Domain Validation on the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev:<span class=\"ts\"/><span class=\"ts\"/>scsi device to validate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Performs the domain validation on the given device in the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>current execution thread.  Since DV operations may sleep,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the current thread must have user context.  Also no SCSI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>related locks that would deadlock I/O issued by the DV may</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be held.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#spi_dv_device\">spi_dv_device</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#SPI_MAX_ECHO_BUFFER_SIZE\">SPI_MAX_ECHO_BUFFER_SIZE</a>*2;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scsi_device_get\">scsi_device_get</a>(<a class=\"id\" href=\"#sdev\">sdev</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#spi_dv_in_progress\">spi_dv_in_progress</a>(<a class=\"id\" href=\"#starget\">starget</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_in_progress\">spi_dv_in_progress</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#buffer\">buffer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put\">out_put</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We need to verify that the actual device will quiesce; the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * later target quiesce is just a nice to have */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scsi_device_quiesce\">scsi_device_quiesce</a>(<a class=\"id\" href=\"#sdev\">sdev</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_target_quiesce\">scsi_target_quiesce</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_pending\">spi_dv_pending</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#spi_dv_mutex\">spi_dv_mutex</a>(<a class=\"id\" href=\"#starget\">starget</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget_printk\">starget_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#starget\">starget</a>, \"Beginning Domain Validation\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_device_internal\">spi_dv_device_internal</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget_printk\">starget_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#starget\">starget</a>, \"Ending Domain Validation\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#spi_dv_mutex\">spi_dv_mutex</a>(<a class=\"id\" href=\"#starget\">starget</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_pending\">spi_dv_pending</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_target_resume\">scsi_target_resume</a>(<a class=\"id\" href=\"#starget\">starget</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_initial_dv\">spi_initial_dv</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 1;", 
"", 
" <a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
" <a class=\"id\" href=\"#out_put\">out_put</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_in_progress\">spi_dv_in_progress</a>(<a class=\"id\" href=\"#starget\">starget</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_put\">scsi_device_put</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#spi_dv_device\">spi_dv_device</a>);", 
"", 
"struct <a class=\"id\" href=\"#work_queue_wrapper\">work_queue_wrapper</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"};", 
"", 
"static void", 
"<a class=\"id\" href=\"#spi_dv_device_work_wrapper\">spi_dv_device_work_wrapper</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_queue_wrapper\">work_queue_wrapper</a> *<a class=\"id\" href=\"#wqw\">wqw</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#work_queue_wrapper\">work_queue_wrapper</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#wqw\">wqw</a>-><a class=\"id\" href=\"#sdev\">sdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#wqw\">wqw</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_device\">spi_dv_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_pending\">spi_dv_pending</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a>) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_put\">scsi_device_put</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spi_schedule_dv_device - schedule domain validation to occur on the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev:<span class=\"ts\"/>The device to validate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Identical to spi_dv_device() above, except that the DV will be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scheduled to occur in a workqueue later.  All memory allocations</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are atomic, so may be called from any context including those holding</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SCSI locks.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#spi_schedule_dv_device\">spi_schedule_dv_device</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_queue_wrapper\">work_queue_wrapper</a> *<a class=\"id\" href=\"#wqw\">wqw</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#work_queue_wrapper\">work_queue_wrapper</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#wqw\">wqw</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#spi_dv_pending\">spi_dv_pending</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#wqw\">wqw</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Set pending early (dv_device doesn't check it, only sets it) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_pending\">spi_dv_pending</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a>) = 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scsi_device_get\">scsi_device_get</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#wqw\">wqw</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi_dv_pending\">spi_dv_pending</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_target\">sdev_target</a>) = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#wqw\">wqw</a>-><a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#spi_dv_device_work_wrapper\">spi_dv_device_work_wrapper</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wqw\">wqw</a>-><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#wqw\">wqw</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#spi_schedule_dv_device\">spi_schedule_dv_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_display_xfer_agreement - Print the current target transfer agreement</span>", 
"<span class=\"comment\"> * @starget: The target for which to display the agreement</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each SPI port is required to maintain a transfer agreement for each</span>", 
"<span class=\"comment\"> * other port on the bus.  This function prints a one-line summary of</span>", 
"<span class=\"comment\"> * the current agreement; more detailed information is available in sysfs.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#spi_display_xfer_agreement\">spi_display_xfer_agreement</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *<a class=\"id\" href=\"#tp\">tp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = (struct <a class=\"id\" href=\"#spi_transport_attrs\">spi_transport_attrs</a> *)&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_data\">starget_data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#offset\">offset</a> &gt; 0 && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#period\">period</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#picosec\">picosec</a>, <a class=\"id\" href=\"#kb100\">kb100</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#scsi\">scsi</a> = \"FAST-?\";", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[8];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#period\">period</a> <= <a class=\"id\" href=\"#SPI_STATIC_PPR\">SPI_STATIC_PPR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#picosec\">picosec</a> = <a class=\"id\" href=\"#ppr_to_ps\">ppr_to_ps</a>[<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#period\">period</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#period\">period</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case  7: <a class=\"id\" href=\"#scsi\">scsi</a> = \"FAST-320\"; break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case  8: <a class=\"id\" href=\"#scsi\">scsi</a> = \"FAST-160\"; break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case  9: <a class=\"id\" href=\"#scsi\">scsi</a> = \"FAST-80\"; break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 10:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 11: <a class=\"id\" href=\"#scsi\">scsi</a> = \"FAST-40\"; break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 12: <a class=\"id\" href=\"#scsi\">scsi</a> = \"FAST-20\"; break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#picosec\">picosec</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#period\">period</a> * 4000;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#period\">period</a> &lt; 25)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi\">scsi</a> = \"FAST-20\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#period\">period</a> &lt; 50)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi\">scsi</a> = \"FAST-10\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi\">scsi</a> = \"FAST-5\";", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kb100\">kb100</a> = (10000000 + <a class=\"id\" href=\"#picosec\">picosec</a> / 2) / <a class=\"id\" href=\"#picosec\">picosec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#width\">width</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kb100\">kb100</a> *= 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprint_frac\">sprint_frac</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#picosec\">picosec</a>, 1000);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%s %sSCSI %d.%d MB/s %s%s%s%s%s%s%s%s (%s ns, offset %d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#scsi\">scsi</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#width\">width</a> ? \"WIDE \" : \"\", <a class=\"id\" href=\"#kb100\">kb100</a>/10, <a class=\"id\" href=\"#kb100\">kb100</a> % 10,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#dt\">dt</a> ? \"DT\" : \"ST\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#iu\">iu</a> ? \" IU\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#qas\">qas</a>  ? \" QAS\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rd_strm\">rd_strm</a> ? \" RDSTRM\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rti\">rti</a> ? \" RTI\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#wr_flow\">wr_flow</a> ? \" WRFLOW\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#pcomp_en\">pcomp_en</a> ? \" PCOMP\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#hold_mcs\">hold_mcs</a> ? \" HMCS\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%sasynchronous\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#width\">width</a> ? \"wide \" : \"\");", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#spi_display_xfer_agreement\">spi_display_xfer_agreement</a>);", 
"", 
"int <a class=\"id\" href=\"#spi_populate_width_msg\">spi_populate_width_msg</a>(unsigned char *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#width\">width</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0] = <a class=\"id\" href=\"#EXTENDED_MESSAGE\">EXTENDED_MESSAGE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[1] = 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[2] = <a class=\"id\" href=\"#EXTENDED_WDTR\">EXTENDED_WDTR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[3] = <a class=\"id\" href=\"#width\">width</a>;", 
"<span class=\"ts\"/>return 4;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_populate_width_msg\">spi_populate_width_msg</a>);", 
"", 
"int <a class=\"id\" href=\"#spi_populate_sync_msg\">spi_populate_sync_msg</a>(unsigned char *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#period\">period</a>, int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0] = <a class=\"id\" href=\"#EXTENDED_MESSAGE\">EXTENDED_MESSAGE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[1] = 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[2] = <a class=\"id\" href=\"#EXTENDED_SDTR\">EXTENDED_SDTR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[3] = <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[4] = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>return 5;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_populate_sync_msg\">spi_populate_sync_msg</a>);", 
"", 
"int <a class=\"id\" href=\"#spi_populate_ppr_msg\">spi_populate_ppr_msg</a>(unsigned char *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#period\">period</a>, int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#width\">width</a>, int <a class=\"id\" href=\"#options\">options</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[0] = <a class=\"id\" href=\"#EXTENDED_MESSAGE\">EXTENDED_MESSAGE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[1] = 6;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[2] = <a class=\"id\" href=\"#EXTENDED_PPR\">EXTENDED_PPR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[3] = <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[4] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[5] = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[6] = <a class=\"id\" href=\"#width\">width</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[7] = <a class=\"id\" href=\"#options\">options</a>;", 
"<span class=\"ts\"/>return 8;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_populate_ppr_msg\">spi_populate_ppr_msg</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCSI_CONSTANTS\">CONFIG_SCSI_CONSTANTS</a>", 
"static const char * const <a class=\"id\" href=\"#one_byte_msgs\">one_byte_msgs</a>[] = {", 
"<span class=\"comment\">/* 0x00 */</span> \"Task Complete\", <a class=\"id\" href=\"#NULL\">NULL</a> <span class=\"comment\">/* Extended Message */</span>, \"Save Pointers\",", 
"<span class=\"comment\">/* 0x03 */</span> \"Restore Pointers\", \"Disconnect\", \"Initiator Error\", ", 
"<span class=\"comment\">/* 0x06 */</span> \"Abort Task Set\", \"Message Reject\", \"Nop\", \"Message Parity Error\",", 
"<span class=\"comment\">/* 0x0a */</span> \"Linked Command Complete\", \"Linked Command Complete w/flag\",", 
"<span class=\"comment\">/* 0x0c */</span> \"Target Reset\", \"Abort Task\", \"Clear Task Set\", ", 
"<span class=\"comment\">/* 0x0f */</span> \"Initiate Recovery\", \"Release Recovery\",", 
"<span class=\"comment\">/* 0x11 */</span> \"Terminate Process\", \"Continue Task\", \"Target Transfer Disable\",", 
"<span class=\"comment\">/* 0x14 */</span> <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"Clear ACA\", \"LUN Reset\"", 
"};", 
"", 
"static const char * const <a class=\"id\" href=\"#two_byte_msgs\">two_byte_msgs</a>[] = {", 
"<span class=\"comment\">/* 0x20 */</span> \"Simple Queue Tag\", \"Head of Queue Tag\", \"Ordered Queue Tag\",", 
"<span class=\"comment\">/* 0x23 */</span> \"Ignore Wide Residue\", \"ACA\"", 
"};", 
"", 
"static const char * const <a class=\"id\" href=\"#extended_msgs\">extended_msgs</a>[] = {", 
"<span class=\"comment\">/* 0x00 */</span> \"Modify Data Pointer\", \"Synchronous Data Transfer Request\",", 
"<span class=\"comment\">/* 0x02 */</span> \"SCSI-I Extended Identify\", \"Wide Data Transfer Request\",", 
"<span class=\"comment\">/* 0x04 */</span> \"Parallel Protocol Request\", \"Modify Bidirectional Data Pointer\"", 
"};", 
"", 
"static void <a class=\"id\" href=\"#print_nego\">print_nego</a>(const unsigned char *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#per\">per</a>, int <a class=\"id\" href=\"#off\">off</a>, int <a class=\"id\" href=\"#width\">width</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#per\">per</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[20];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period_to_str\">period_to_str</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#msg\">msg</a>[<a class=\"id\" href=\"#per\">per</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"period = %s ns \", <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#off\">off</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"offset = %d \", <a class=\"id\" href=\"#msg\">msg</a>[<a class=\"id\" href=\"#off\">off</a>]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#width\">width</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"width = %d \", 8 << <a class=\"id\" href=\"#msg\">msg</a>[<a class=\"id\" href=\"#width\">width</a>]);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#print_ptr\">print_ptr</a>(const unsigned char *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#msb\">msb</a>, const char *<a class=\"id\" href=\"#desc\">desc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ptr\">ptr</a> = (<a class=\"id\" href=\"#msg\">msg</a>[<a class=\"id\" href=\"#msb\">msb</a>] << 24) | (<a class=\"id\" href=\"#msg\">msg</a>[<a class=\"id\" href=\"#msb\">msb</a>+1] << 16) | (<a class=\"id\" href=\"#msg\">msg</a>[<a class=\"id\" href=\"#msb\">msb</a>+2] << 8) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>[<a class=\"id\" href=\"#msb\">msb</a>+3];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s = %d \", <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#spi_print_msg\">spi_print_msg</a>(const unsigned char *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = 1, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>[0] == <a class=\"id\" href=\"#EXTENDED_MESSAGE\">EXTENDED_MESSAGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 2 + <a class=\"id\" href=\"#msg\">msg</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += 256;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>[2] &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#extended_msgs\">extended_msgs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a> (\"%s \", <a class=\"id\" href=\"#extended_msgs\">extended_msgs</a>[<a class=\"id\" href=\"#msg\">msg</a>[2]]); ", 
"<span class=\"ts\"/><span class=\"ts\"/>else ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a> (\"Extended Message, reserved code (0x%02x) \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(int) <a class=\"id\" href=\"#msg\">msg</a>[2]);", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#msg\">msg</a>[2]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#EXTENDED_MODIFY_DATA_POINTER\">EXTENDED_MODIFY_DATA_POINTER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_ptr\">print_ptr</a>(<a class=\"id\" href=\"#msg\">msg</a>, 3, \"pointer\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#EXTENDED_SDTR\">EXTENDED_SDTR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_nego\">print_nego</a>(<a class=\"id\" href=\"#msg\">msg</a>, 3, 4, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#EXTENDED_WDTR\">EXTENDED_WDTR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_nego\">print_nego</a>(<a class=\"id\" href=\"#msg\">msg</a>, 0, 0, 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#EXTENDED_PPR\">EXTENDED_PPR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_nego\">print_nego</a>(<a class=\"id\" href=\"#msg\">msg</a>, 3, 5, 6);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#EXTENDED_MODIFY_BIDI_DATA_PTR\">EXTENDED_MODIFY_BIDI_DATA_PTR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_ptr\">print_ptr</a>(<a class=\"id\" href=\"#msg\">msg</a>, 3, \"out\");", 
];
xr_frag_insert('l/77/c832bd292fa2cd90e8e398b0f3309d71a184b9.xr', __xr_tmp);
