var __xr_tmp = [
"<span class=\"comment\">/* Integer base 2 logarithm calculation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2006 Red Hat, Inc. All Rights Reserved.</span>", 
"<span class=\"comment\"> * Written by David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> * 2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_LOG2_H\">_LINUX_LOG2_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_LOG2_H\">_LINUX_LOG2_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * deal with unrepresentable constant logarithms</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((const, <a class=\"id\" href=\"#noreturn\">noreturn</a>))", 
"int <a class=\"id\" href=\"#____ilog2_NaN\">____ilog2_NaN</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * non-constant log of base 2 calculators</span>", 
"<span class=\"comment\"> * - the arch may override these in asm/bitops.h if they can be implemented</span>", 
"<span class=\"comment\"> *   more efficiently than using fls() and fls64()</span>", 
"<span class=\"comment\"> * - the arch is not required to handle n==0 if implementing the fallback</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_ARCH_HAS_ILOG2_U32\">CONFIG_ARCH_HAS_ILOG2_U32</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((const))", 
"int <a class=\"id\" href=\"#__ilog2_u32\">__ilog2_u32</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#n\">n</a>) - 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_ARCH_HAS_ILOG2_U64\">CONFIG_ARCH_HAS_ILOG2_U64</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((const))", 
"int <a class=\"id\" href=\"#__ilog2_u64\">__ilog2_u64</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fls64\">fls64</a>(<a class=\"id\" href=\"#n\">n</a>) - 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Determine whether some value is a power of two, where zero is</span>", 
"<span class=\"comment\"> * *not* considered a power of two.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((const))", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_power_of_2\">is_power_of_2</a>(unsigned long <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#n\">n</a> != 0 && ((<a class=\"id\" href=\"#n\">n</a> &amp; (<a class=\"id\" href=\"#n\">n</a> - 1)) == 0));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * round up to nearest power of two</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((const))", 
"unsigned long <a class=\"id\" href=\"#__roundup_pow_of_two\">__roundup_pow_of_two</a>(unsigned long <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return 1UL << <a class=\"id\" href=\"#fls_long\">fls_long</a>(<a class=\"id\" href=\"#n\">n</a> - 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * round down to nearest power of two</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((const))", 
"unsigned long <a class=\"id\" href=\"#__rounddown_pow_of_two\">__rounddown_pow_of_two</a>(unsigned long <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return 1UL << (<a class=\"id\" href=\"#fls_long\">fls_long</a>(<a class=\"id\" href=\"#n\">n</a>) - 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ilog2 - log of base 2 of 32-bit or a 64-bit unsigned value</span>", 
"<span class=\"comment\"> * @n - parameter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * constant-capable log of base 2 calculation</span>", 
"<span class=\"comment\"> * - this can be used to initialise global variables from constant data, hence</span>", 
"<span class=\"comment\"> *   the massive ternary operator construction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * selects the appropriately-sized optimised version depending on sizeof(n)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"(<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#n\">n</a>) ? (<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &lt; 1 ? <a class=\"id\" href=\"#____ilog2_NaN\">____ilog2_NaN</a>() :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 63) ? 63 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 62) ? 62 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 61) ? 61 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 60) ? 60 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 59) ? 59 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 58) ? 58 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 57) ? 57 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 56) ? 56 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 55) ? 55 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 54) ? 54 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 53) ? 53 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 52) ? 52 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 51) ? 51 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 50) ? 50 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 49) ? 49 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 48) ? 48 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 47) ? 47 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 46) ? 46 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 45) ? 45 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 44) ? 44 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 43) ? 43 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 42) ? 42 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 41) ? 41 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 40) ? 40 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 39) ? 39 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 38) ? 38 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 37) ? 37 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 36) ? 36 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 35) ? 35 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 34) ? 34 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 33) ? 33 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 32) ? 32 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 31) ? 31 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 30) ? 30 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 29) ? 29 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 28) ? 28 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 27) ? 27 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 26) ? 26 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 25) ? 25 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 24) ? 24 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 23) ? 23 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 22) ? 22 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 21) ? 21 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 20) ? 20 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 19) ? 19 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 18) ? 18 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 17) ? 17 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 16) ? 16 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 15) ? 15 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 14) ? 14 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 13) ? 13 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 12) ? 12 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 11) ? 11 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL << 10) ? 10 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL <<  9) ?  9 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL <<  8) ?  8 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL <<  7) ?  7 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL <<  6) ?  6 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL <<  5) ?  5 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL <<  4) ?  4 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL <<  3) ?  3 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL <<  2) ?  2 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL <<  1) ?  1 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) &amp; (1ULL <<  0) ?  0 :<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#____ilog2_NaN\">____ilog2_NaN</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   ) :<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(sizeof(<a class=\"id\" href=\"#n\">n</a>) <= 4) ?<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ilog2_u32\">__ilog2_u32</a>(<a class=\"id\" href=\"#n\">n</a>) :<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ilog2_u64\">__ilog2_u64</a>(<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
" )", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * roundup_pow_of_two - round the given value up to nearest power of two</span>", 
"<span class=\"comment\"> * @n - parameter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * round the given value up to the nearest power of two</span>", 
"<span class=\"comment\"> * - the result is undefined when n == 0</span>", 
"<span class=\"comment\"> * - this can be used to initialise global variables from constant data</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#roundup_pow_of_two\">roundup_pow_of_two</a>(<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"(<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#n\">n</a>) ? (<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a> == 1) ? 1 :<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(1UL << (<a class=\"id\" href=\"#ilog2\">ilog2</a>((<a class=\"id\" href=\"#n\">n</a>) - 1) + 1))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   ) :<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__roundup_pow_of_two\">__roundup_pow_of_two</a>(<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
" )", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rounddown_pow_of_two - round the given value down to nearest power of two</span>", 
"<span class=\"comment\"> * @n - parameter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * round the given value down to the nearest power of two</span>", 
"<span class=\"comment\"> * - the result is undefined when n == 0</span>", 
"<span class=\"comment\"> * - this can be used to initialise global variables from constant data</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rounddown_pow_of_two\">rounddown_pow_of_two</a>(<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"(<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#n\">n</a>) ? (<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a> == 1) ? 0 :<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#n\">n</a>))) :<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rounddown_pow_of_two\">__rounddown_pow_of_two</a>(<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
" )", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * order_base_2 - calculate the (rounded up) base 2 order of the argument</span>", 
"<span class=\"comment\"> * @n: parameter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The first few values calculated by this routine:</span>", 
"<span class=\"comment\"> *  ob2(0) = 0</span>", 
"<span class=\"comment\"> *  ob2(1) = 0</span>", 
"<span class=\"comment\"> *  ob2(2) = 1</span>", 
"<span class=\"comment\"> *  ob2(3) = 2</span>", 
"<span class=\"comment\"> *  ob2(4) = 2</span>", 
"<span class=\"comment\"> *  ob2(5) = 3</span>", 
"<span class=\"comment\"> *  ... and so on.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#order_base_2\">order_base_2</a>(<a class=\"id\" href=\"#n\">n</a>) <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#roundup_pow_of_two\">roundup_pow_of_two</a>(<a class=\"id\" href=\"#n\">n</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_LOG2_H */</span>", 
];
xr_frag_insert('l/77/d099eb2ab1d6e851b0719798f50cbe2e9f4437.xr', __xr_tmp);
