var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#mod\">mod</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#module_notify_list\">module_notify_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MODULE_STATE_COMING\">MODULE_STATE_COMING</a>, <a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_mod_ctors\">do_mod_ctors</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Start the module */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init\">init</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_one_initcall\">do_one_initcall</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init\">init</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Init routine failed: abort.  Try to protect us from</span>", 
"<span class=\"comment\">                   buggy refcounters. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#module_notify_list\">module_notify_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a>, <a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_module\">free_module</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#module_wq\">module_wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"\"%s: '%s'->init suspiciously returned %d, it should follow 0/-E convention\\n\"", 
"\"%s: loading module anyway...\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now it's a first class citizen!  Wake up anyone waiting for it. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#MODULE_STATE_LIVE\">MODULE_STATE_LIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#module_wq\">module_wq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#module_notify_list\">module_notify_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#MODULE_STATE_LIVE\">MODULE_STATE_LIVE</a>, <a class=\"id\" href=\"#mod\">mod</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We need to finish all async code before the module init sequence is done */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_synchronize_full\">async_synchronize_full</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Drop initial reference. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trim_init_extable\">trim_init_extable</a>(<a class=\"id\" href=\"#mod\">mod</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KALLSYMS\">CONFIG_KALLSYMS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_symtab\">num_symtab</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_num_syms\">core_num_syms</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_symtab\">core_symtab</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#strtab\">strtab</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_strtab\">core_strtab</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_free\">module_free</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_size\">init_size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_text_size\">init_text_size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#within\">within</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return ((void *)<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#start\">start</a> && (void *)<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KALLSYMS\">CONFIG_KALLSYMS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This ignores the intensely annoying \"mapping symbols\" found</span>", 
"<span class=\"comment\"> * in ARM ELF files: $a, $t and $d.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_arm_mapping_symbol\">is_arm_mapping_symbol</a>(const char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#str\">str</a>[0] == '$' && <a class=\"id\" href=\"#strchr\">strchr</a>(\"atd\", <a class=\"id\" href=\"#str\">str</a>[1])", 
"<span class=\"ts\"/>       && (<a class=\"id\" href=\"#str\">str</a>[2] == '\\0' || <a class=\"id\" href=\"#str\">str</a>[2] == '.');", 
"}", 
"", 
"static const char *<a class=\"id\" href=\"#get_ksymbol\">get_ksymbol</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long *<a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long *<a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#best\">best</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nextval\">nextval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* At worse, next value is at end of module */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#within_module_init\">within_module_init</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nextval\">nextval</a> = (unsigned long)<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_init\">module_init</a>+<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#init_text_size\">init_text_size</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nextval\">nextval</a> = (unsigned long)<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#module_core\">module_core</a>+<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#core_text_size\">core_text_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Scan for closest preceeding symbol, and next symbol. (ELF</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   starts real symbols at 1). */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_symtab\">num_symtab</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_shndx\">st_shndx</a> == <a class=\"id\" href=\"#SHN_UNDEF\">SHN_UNDEF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We ignore unnamed symbols: they're uninformative</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and inserted at a whim. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_value\">st_value</a> <= <a class=\"id\" href=\"#addr\">addr</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_value\">st_value</a> &gt; <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#best\">best</a>].<a class=\"id\" href=\"#st_value\">st_value</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    && *(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#strtab\">strtab</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_name\">st_name</a>) != '\\0'", 
"<span class=\"ts\"/><span class=\"ts\"/>    && !<a class=\"id\" href=\"#is_arm_mapping_symbol\">is_arm_mapping_symbol</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#strtab\">strtab</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_name\">st_name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best\">best</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_value\">st_value</a> &gt; <a class=\"id\" href=\"#addr\">addr</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_value\">st_value</a> &lt; <a class=\"id\" href=\"#nextval\">nextval</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    && *(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#strtab\">strtab</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_name\">st_name</a>) != '\\0'", 
"<span class=\"ts\"/><span class=\"ts\"/>    && !<a class=\"id\" href=\"#is_arm_mapping_symbol\">is_arm_mapping_symbol</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#strtab\">strtab</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_name\">st_name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nextval\">nextval</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#st_value\">st_value</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#best\">best</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#nextval\">nextval</a> - <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#best\">best</a>].<a class=\"id\" href=\"#st_value\">st_value</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#best\">best</a>].<a class=\"id\" href=\"#st_value\">st_value</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#strtab\">strtab</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#best\">best</a>].<a class=\"id\" href=\"#st_name\">st_name</a>;", 
"}", 
"", 
"<span class=\"comment\">/* For kallsyms to ask for address resolution.  NULL means not found.  Careful</span>", 
"<span class=\"comment\"> * not to lock to avoid deadlock on oopses, simply disable preemption. */</span>", 
"const char *<a class=\"id\" href=\"#module_address_lookup\">module_address_lookup</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    char **<a class=\"id\" href=\"#modname\">modname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    char *<a class=\"id\" href=\"#namebuf\">namebuf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#within_module_init\">within_module_init</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#within_module_core\">within_module_core</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#modname\">modname</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#modname\">modname</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_ksymbol\">get_ksymbol</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Make a copy in here where it's safe */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#namebuf\">namebuf</a>, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#namebuf\">namebuf</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#lookup_module_symbol_name\">lookup_module_symbol_name</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, char *<a class=\"id\" href=\"#symname\">symname</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#within_module_init\">within_module_init</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#within_module_core\">within_module_core</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#sym\">sym</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sym\">sym</a> = <a class=\"id\" href=\"#get_ksymbol\">get_ksymbol</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sym\">sym</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#symname\">symname</a>, <a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#lookup_module_symbol_attrs\">lookup_module_symbol_attrs</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long *<a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#offset\">offset</a>, char *<a class=\"id\" href=\"#modname\">modname</a>, char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#within_module_init\">within_module_init</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#within_module_core\">within_module_core</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mod\">mod</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#sym\">sym</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sym\">sym</a> = <a class=\"id\" href=\"#get_ksymbol\">get_ksymbol</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sym\">sym</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#modname\">modname</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#modname\">modname</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#module_get_kallsym\">module_get_kallsym</a>(unsigned int <a class=\"id\" href=\"#symnum\">symnum</a>, unsigned long *<a class=\"id\" href=\"#value\">value</a>, char *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>, char *<a class=\"id\" href=\"#module_name\">module_name</a>, int *<a class=\"id\" href=\"#exported\">exported</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#modules\">modules</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#symnum\">symnum</a> &lt; <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_symtab\">num_symtab</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#symnum\">symnum</a>].<a class=\"id\" href=\"#st_value\">st_value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#symnum\">symnum</a>].<a class=\"id\" href=\"#st_info\">st_info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#strtab\">strtab</a> + <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#symtab\">symtab</a>[<a class=\"id\" href=\"#symnum\">symnum</a>].<a class=\"id\" href=\"#st_name\">st_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#exported\">exported</a> = <a class=\"id\" href=\"#is_exported\">is_exported</a>(<a class=\"id\" href=\"#name\">name</a>, *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#mod\">mod</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#symnum\">symnum</a> -= <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#num_symtab\">num_symtab</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
];
xr_frag_insert('l/77/d249680f2d37ed3165a3dd32fad57557d63855.xr', __xr_tmp);
