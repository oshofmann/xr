var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * klist.c - Routines for manipulating klists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 Patrick Mochel</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPL v2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This klist interface provides a couple of structures that wrap around</span>", 
"<span class=\"comment\"> * struct list_head to provide explicit list \"head\" (struct klist) and list</span>", 
"<span class=\"comment\"> * \"node\" (struct klist_node) objects. For struct klist, a spinlock is</span>", 
"<span class=\"comment\"> * included that protects access to the actual list itself. struct</span>", 
"<span class=\"comment\"> * klist_node provides a pointer to the klist that owns it and a kref</span>", 
"<span class=\"comment\"> * reference count that indicates the number of current users of that node</span>", 
"<span class=\"comment\"> * in the list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The entire point is to provide an interface for iterating over a list</span>", 
"<span class=\"comment\"> * that is safe and allows for modification of the list during the</span>", 
"<span class=\"comment\"> * iteration (e.g. insertion and removal), including modification of the</span>", 
"<span class=\"comment\"> * current node on the list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It works using a 3rd object type - struct klist_iter - that is declared</span>", 
"<span class=\"comment\"> * and initialized before an iteration. klist_next() is used to acquire the</span>", 
"<span class=\"comment\"> * next element in the list. It returns NULL if there are no more items.</span>", 
"<span class=\"comment\"> * Internally, that routine takes the klist's lock, decrements the</span>", 
"<span class=\"comment\"> * reference count of the previous klist_node and increments the count of</span>", 
"<span class=\"comment\"> * the next klist_node. It then drops the lock and returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are primitives for adding and removing nodes to/from a klist.</span>", 
"<span class=\"comment\"> * When deleting, klist_del() will simply decrement the reference count.</span>", 
"<span class=\"comment\"> * Only when the count goes to 0 is the node removed from the list.</span>", 
"<span class=\"comment\"> * klist_remove() will try to delete the node from the list and block until</span>", 
"<span class=\"comment\"> * it is actually removed. This is useful for objects (like devices) that</span>", 
"<span class=\"comment\"> * have been removed from the system and must be freed (but must wait until</span>", 
"<span class=\"comment\"> * all accessors have finished).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#klist\">klist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use the lowest bit of n_klist to mark deleted nodes and exclude</span>", 
"<span class=\"comment\"> * dead ones from iteration.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KNODE_DEAD\">KNODE_DEAD</a><span class=\"ts\"/><span class=\"ts\"/>1LU", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KNODE_KLIST_MASK\">KNODE_KLIST_MASK</a><span class=\"ts\"/>~<a class=\"id\" href=\"#KNODE_DEAD\">KNODE_DEAD</a>", 
"", 
"static struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#knode_klist\">knode_klist</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#knode\">knode</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#klist\">klist</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#knode\">knode</a>-><a class=\"id\" href=\"#n_klist\">n_klist</a> &amp; <a class=\"id\" href=\"#KNODE_KLIST_MASK\">KNODE_KLIST_MASK</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#knode_dead\">knode_dead</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#knode\">knode</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#knode\">knode</a>-><a class=\"id\" href=\"#n_klist\">n_klist</a> &amp; <a class=\"id\" href=\"#KNODE_DEAD\">KNODE_DEAD</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#knode_set_klist\">knode_set_klist</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#knode\">knode</a>, struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#klist\">klist</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#knode\">knode</a>-><a class=\"id\" href=\"#n_klist\">n_klist</a> = <a class=\"id\" href=\"#klist\">klist</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* no knode deserves to start its life dead */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#knode_dead\">knode_dead</a>(<a class=\"id\" href=\"#knode\">knode</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#knode_kill\">knode_kill</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#knode\">knode</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* and no knode should die twice ever either, see we're very humane */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#knode_dead\">knode_dead</a>(<a class=\"id\" href=\"#knode\">knode</a>));", 
"<span class=\"ts\"/>*(unsigned long *)&amp;<a class=\"id\" href=\"#knode\">knode</a>-><a class=\"id\" href=\"#n_klist\">n_klist</a> |= <a class=\"id\" href=\"#KNODE_DEAD\">KNODE_DEAD</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_init - Initialize a klist structure.</span>", 
"<span class=\"comment\"> * @k: The klist we're initializing.</span>", 
"<span class=\"comment\"> * @get: The get function for the embedding object (NULL if none)</span>", 
"<span class=\"comment\"> * @put: The put function for the embedding object (NULL if none)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initialises the klist structure.  If the klist_node structures are</span>", 
"<span class=\"comment\"> * going to be embedded in refcounted objects (necessary for safe</span>", 
"<span class=\"comment\"> * deletion) then the get/put arguments are used to initialise</span>", 
"<span class=\"comment\"> * functions that take and release references on the embedding</span>", 
"<span class=\"comment\"> * objects.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#klist_init\">klist_init</a>(struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#k\">k</a>, void (*<a class=\"id\" href=\"#get\">get</a>)(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#put\">put</a>)(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_list\">k_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#get\">get</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#put\">put</a> = <a class=\"id\" href=\"#put\">put</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_init\">klist_init</a>);", 
"", 
"static void <a class=\"id\" href=\"#add_head\">add_head</a>(struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#k\">k</a>, struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#n_node\">n_node</a>, &amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_list\">k_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#add_tail\">add_tail</a>(struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#k\">k</a>, struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#n_node\">n_node</a>, &amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_list\">k_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#klist_node_init\">klist_node_init</a>(struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#k\">k</a>, struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#n_node\">n_node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_init\">kref_init</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#n_ref\">n_ref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#knode_set_klist\">knode_set_klist</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#get\">get</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_add_head - Initialize a klist_node and add it to front.</span>", 
"<span class=\"comment\"> * @n: node we're adding.</span>", 
"<span class=\"comment\"> * @k: klist it's going on.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#klist_add_head\">klist_add_head</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#k\">k</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_node_init\">klist_node_init</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_head\">add_head</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_add_head\">klist_add_head</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_add_tail - Initialize a klist_node and add it to back.</span>", 
"<span class=\"comment\"> * @n: node we're adding.</span>", 
"<span class=\"comment\"> * @k: klist it's going on.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#klist_add_tail\">klist_add_tail</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#k\">k</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_node_init\">klist_node_init</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_tail\">add_tail</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_add_tail\">klist_add_tail</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_add_after - Init a klist_node and add it after an existing node</span>", 
"<span class=\"comment\"> * @n: node we're adding.</span>", 
"<span class=\"comment\"> * @pos: node to put @n after</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#klist_add_after\">klist_add_after</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#knode_klist\">knode_klist</a>(<a class=\"id\" href=\"#pos\">pos</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_node_init\">klist_node_init</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#n_node\">n_node</a>, &amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#n_node\">n_node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_add_after\">klist_add_after</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_add_before - Init a klist_node and add it before an existing node</span>", 
"<span class=\"comment\"> * @n: node we're adding.</span>", 
"<span class=\"comment\"> * @pos: node to put @n after</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#klist_add_before\">klist_add_before</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#knode_klist\">knode_klist</a>(<a class=\"id\" href=\"#pos\">pos</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_node_init\">klist_node_init</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#n_node\">n_node</a>, &amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#n_node\">n_node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_add_before\">klist_add_before</a>);", 
"", 
"struct <a class=\"id\" href=\"#klist_waiter\">klist_waiter</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#process\">process</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#woken\">woken</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#klist_remove_lock\">klist_remove_lock</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#klist_remove_waiters\">klist_remove_waiters</a>);", 
"", 
"static void <a class=\"id\" href=\"#klist_release\">klist_release</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_waiter\">klist_waiter</a> *<a class=\"id\" href=\"#waiter\">waiter</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kref\">kref</a>, struct <a class=\"id\" href=\"#klist_node\">klist_node</a>, <a class=\"id\" href=\"#n_ref\">n_ref</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#knode_dead\">knode_dead</a>(<a class=\"id\" href=\"#n\">n</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#n_node\">n_node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#klist_remove_lock\">klist_remove_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#waiter\">waiter</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#klist_remove_waiters\">klist_remove_waiters</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#node\">node</a> != <a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#woken\">woken</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb\">mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#process\">process</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#klist_remove_lock\">klist_remove_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#knode_set_klist\">knode_set_klist</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#klist_dec_and_del\">klist_dec_and_del</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#n_ref\">n_ref</a>, <a class=\"id\" href=\"#klist_release\">klist_release</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#klist_put\">klist_put</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#kill\">kill</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#knode_klist\">knode_klist</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#put\">put</a>)(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *) = <a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#put\">put</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kill\">kill</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#knode_kill\">knode_kill</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#klist_dec_and_del\">klist_dec_and_del</a>(<a class=\"id\" href=\"#n\">n</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put\">put</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#put\">put</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put\">put</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_del - Decrement the reference count of node and try to remove.</span>", 
"<span class=\"comment\"> * @n: node we're deleting.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#klist_del\">klist_del</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_put\">klist_put</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_del\">klist_del</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_remove - Decrement the refcount of node and wait for it to go away.</span>", 
"<span class=\"comment\"> * @n: node we're removing.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#klist_remove\">klist_remove</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_waiter\">klist_waiter</a> <a class=\"id\" href=\"#waiter\">waiter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#process\">process</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#woken\">woken</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#klist_remove_lock\">klist_remove_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#klist_remove_waiters\">klist_remove_waiters</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#klist_remove_lock\">klist_remove_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_del\">klist_del</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waiter\">waiter</a>.<a class=\"id\" href=\"#woken\">woken</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_remove\">klist_remove</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_node_attached - Say whether a node is bound to a list or not.</span>", 
"<span class=\"comment\"> * @n: Node that we're testing.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#klist_node_attached\">klist_node_attached</a>(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#n_klist\">n_klist</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_node_attached\">klist_node_attached</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_iter_init_node - Initialize a klist_iter structure.</span>", 
"<span class=\"comment\"> * @k: klist we're iterating.</span>", 
"<span class=\"comment\"> * @i: klist_iter we're filling.</span>", 
"<span class=\"comment\"> * @n: node to start with.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Similar to klist_iter_init(), but starts the action off with @n,</span>", 
"<span class=\"comment\"> * instead of with the list head.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#klist_iter_init_node\">klist_iter_init_node</a>(struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#k\">k</a>, struct <a class=\"id\" href=\"#klist_iter\">klist_iter</a> *<a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_klist\">i_klist</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_cur\">i_cur</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_get\">kref_get</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#n_ref\">n_ref</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_iter_init_node\">klist_iter_init_node</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_iter_init - Iniitalize a klist_iter structure.</span>", 
"<span class=\"comment\"> * @k: klist we're iterating.</span>", 
"<span class=\"comment\"> * @i: klist_iter structure we're filling.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Similar to klist_iter_init_node(), but start with the list head.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#klist_iter_init\">klist_iter_init</a>(struct <a class=\"id\" href=\"#klist\">klist</a> *<a class=\"id\" href=\"#k\">k</a>, struct <a class=\"id\" href=\"#klist_iter\">klist_iter</a> *<a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#klist_iter_init_node\">klist_iter_init_node</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_iter_init\">klist_iter_init</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_iter_exit - Finish a list iteration.</span>", 
"<span class=\"comment\"> * @i: Iterator structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called when done iterating over list, as it decrements the</span>", 
"<span class=\"comment\"> * refcount of the current node. Necessary in case iteration exited before</span>", 
"<span class=\"comment\"> * the end of the list was reached, and always good form.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#klist_iter_exit\">klist_iter_exit</a>(struct <a class=\"id\" href=\"#klist_iter\">klist_iter</a> *<a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_cur\">i_cur</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#klist_put\">klist_put</a>(<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_cur\">i_cur</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_cur\">i_cur</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_iter_exit\">klist_iter_exit</a>);", 
"", 
"static struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#to_klist_node\">to_klist_node</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#klist_node\">klist_node</a>, <a class=\"id\" href=\"#n_node\">n_node</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * klist_next - Ante up next node in list.</span>", 
"<span class=\"comment\"> * @i: Iterator structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * First grab list lock. Decrement the reference count of the previous</span>", 
"<span class=\"comment\"> * node, if there was one. Grab the next node, increment its reference</span>", 
"<span class=\"comment\"> * count, drop the lock, and return that next node.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#klist_next\">klist_next</a>(struct <a class=\"id\" href=\"#klist_iter\">klist_iter</a> *<a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#put\">put</a>)(struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *) = <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_klist\">i_klist</a>-><a class=\"id\" href=\"#put\">put</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_cur\">i_cur</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#klist_node\">klist_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_klist\">i_klist</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#to_klist_node\">to_klist_node</a>(<a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#n_node\">n_node</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#klist_dec_and_del\">klist_dec_and_del</a>(<a class=\"id\" href=\"#last\">last</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put\">put</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#to_klist_node\">to_klist_node</a>(<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_klist\">i_klist</a>-><a class=\"id\" href=\"#k_list\">k_list</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_cur\">i_cur</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#next\">next</a> != <a class=\"id\" href=\"#to_klist_node\">to_klist_node</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_klist\">i_klist</a>-><a class=\"id\" href=\"#k_list\">k_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#knode_dead\">knode_dead</a>(<a class=\"id\" href=\"#next\">next</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_get\">kref_get</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#n_ref\">n_ref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_cur\">i_cur</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#to_klist_node\">to_klist_node</a>(<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#n_node\">n_node</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_klist\">i_klist</a>-><a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#put\">put</a> && <a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put\">put</a>(<a class=\"id\" href=\"#last\">last</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#i_cur\">i_cur</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#klist_next\">klist_next</a>);", 
];
xr_frag_insert('l/77/d9531cd2a7dabc1c777eb73248b941f439cbe0.xr', __xr_tmp);
