var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>@index:<span class=\"ts\"/><span class=\"ts\"/>index key</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tag: <span class=\"ts\"/><span class=\"ts\"/>tag index</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Clear the search tag (which must be &lt; RADIX_TREE_MAX_TAGS)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>corresponding to @index in the radix tree.  If</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this causes the leaf node to have no tags set then clear the tag in the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>next-to-leaf node, etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns the address of the tagged item on success, else NULL.  ie:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>has the same return value and semantics as radix_tree_lookup().</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#radix_tree_tag_clear\">radix_tree_tag_clear</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The radix tree path needs to be one longer than the maximum path</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since the \"list\" is null terminated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_path\">radix_tree_path</a> <a class=\"id\" href=\"#path\">path</a>[<a class=\"id\" href=\"#RADIX_TREE_MAX_PATH\">RADIX_TREE_MAX_PATH</a> + 1], *<a class=\"id\" href=\"#pathp\">pathp</a> = <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#height\">height</a>, <a class=\"id\" href=\"#shift\">shift</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#height\">height</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = (<a class=\"id\" href=\"#height\">height</a> - 1) * <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#height\">height</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#index\">index</a> >> <a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>[1].<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>[1].<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#offset\">offset</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> -= <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tag_get\">tag_get</a>(<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#offset\">offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag_clear\">tag_clear</a>(<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#any_tag_set\">any_tag_set</a>(<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tag\">tag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* clear the root's tag bit */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root_tag_get\">root_tag_get</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#tag\">tag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_tag_clear\">root_tag_clear</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#slot\">slot</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_tag_clear\">radix_tree_tag_clear</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * radix_tree_tag_get - get a tag on a radix tree node</span>", 
"<span class=\"comment\"> * @root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> * @index:<span class=\"ts\"/><span class=\"ts\"/>index key</span>", 
"<span class=\"comment\"> * @tag: <span class=\"ts\"/><span class=\"ts\"/>tag index (&lt; RADIX_TREE_MAX_TAGS)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return values:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  0: tag not present or not set</span>", 
"<span class=\"comment\"> *  1: tag set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that the return value of this function may not be relied on, even if</span>", 
"<span class=\"comment\"> * the RCU lock is held, unless tag modification and node deletion are excluded</span>", 
"<span class=\"comment\"> * from concurrency.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#radix_tree_tag_get\">radix_tree_tag_get</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#height\">height</a>, <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#saw_unset_tag\">saw_unset_tag</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check the root's tag bit */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root_tag_get\">root_tag_get</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#tag\">tag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(<a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#index\">index</a> == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#height\">height</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = (<a class=\"id\" href=\"#height\">height</a> - 1) * <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>for ( ; ; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#index\">index</a> >> <a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is just a debug check.  Later, we can bale as soon as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we see an unset tag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tag_get\">tag_get</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#offset\">offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saw_unset_tag\">saw_unset_tag</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#height\">height</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return !!<a class=\"id\" href=\"#tag_get\">tag_get</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#offset\">offset</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> -= <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>--;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_tag_get\">radix_tree_tag_get</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * radix_tree_range_tag_if_tagged - for each item in given range set given</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   tag if item has another tag set</span>", 
"<span class=\"comment\"> * @root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> * @first_indexp:<span class=\"ts\"/>pointer to a starting index of a range to scan</span>", 
"<span class=\"comment\"> * @last_index:<span class=\"ts\"/><span class=\"ts\"/>last index of a range to scan</span>", 
"<span class=\"comment\"> * @nr_to_tag:<span class=\"ts\"/><span class=\"ts\"/>maximum number items to tag</span>", 
"<span class=\"comment\"> * @iftag:<span class=\"ts\"/><span class=\"ts\"/>tag index to test</span>", 
"<span class=\"comment\"> * @settag:<span class=\"ts\"/><span class=\"ts\"/>tag index to set if tested tag is set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function scans range of radix tree from first_index to last_index</span>", 
"<span class=\"comment\"> * (inclusive).  For each item in the range if iftag is set, the function sets</span>", 
"<span class=\"comment\"> * also settag. The function stops either after tagging nr_to_tag items or</span>", 
"<span class=\"comment\"> * after reaching last_index.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The tags must be set from the leaf level only and propagated back up the</span>", 
"<span class=\"comment\"> * path to the root. We must do this so that we resolve the full path before</span>", 
"<span class=\"comment\"> * setting any tags on intermediate nodes. If we set tags as we descend, then</span>", 
"<span class=\"comment\"> * we can get to the leaf node and find that the index that has the iftag</span>", 
"<span class=\"comment\"> * set is outside the range we are scanning. This reults in dangling tags and</span>", 
"<span class=\"comment\"> * can lead to problems with later tag operations (e.g. livelocks on lookups).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns number of leaves where the tag was set and sets</span>", 
"<span class=\"comment\"> * *first_indexp to the first unscanned index.</span>", 
"<span class=\"comment\"> * WARNING! *first_indexp can wrap if last_index is ULONG_MAX. Caller must</span>", 
"<span class=\"comment\"> * be prepared to handle that.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#radix_tree_range_tag_if_tagged\">radix_tree_range_tag_if_tagged</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#first_indexp\">first_indexp</a>, unsigned long <a class=\"id\" href=\"#last_index\">last_index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_to_tag\">nr_to_tag</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#iftag\">iftag</a>, unsigned int <a class=\"id\" href=\"#settag\">settag</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_path\">radix_tree_path</a> <a class=\"id\" href=\"#path\">path</a>[<a class=\"id\" href=\"#height\">height</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_path\">radix_tree_path</a> *<a class=\"id\" href=\"#pathp\">pathp</a> = <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tagged\">tagged</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a> = *<a class=\"id\" href=\"#first_indexp\">first_indexp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_index\">last_index</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#last_index\">last_index</a>, <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#height\">height</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#last_index\">last_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_to_tag\">nr_to_tag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root_tag_get\">root_tag_get</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#iftag\">iftag</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#first_indexp\">first_indexp</a> = <a class=\"id\" href=\"#last_index\">last_index</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#height\">height</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#first_indexp\">first_indexp</a> = <a class=\"id\" href=\"#last_index\">last_index</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_tag_set\">root_tag_set</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#settag\">settag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = (<a class=\"id\" href=\"#height\">height</a> - 1) * <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we fill the path from (root-&gt;height - 2) to 0, leaving the index at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (root-&gt;height - 1) as a terminator. Zero the node in the terminator</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that we can use this to end walk loops back up the path.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>[<a class=\"id\" href=\"#height\">height</a> - 1].<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#index\">index</a> >> <a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#offset\">offset</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tag_get\">tag_get</a>(<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#iftag\">iftag</a>, <a class=\"id\" href=\"#offset\">offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#height\">height</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Go down one level */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> -= <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>[<a class=\"id\" href=\"#height\">height</a> - 1].<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>[<a class=\"id\" href=\"#height\">height</a> - 1].<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#offset\">offset</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* tag the leaf */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tagged\">tagged</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag_set\">tag_set</a>(<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#settag\">settag</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* walk back up the path tagging interior nodes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a> = &amp;<a class=\"id\" href=\"#path\">path</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* stop if we find a node with the tag already set */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tag_get\">tag_get</a>(<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#settag\">settag</a>, <a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#offset\">offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tag_set\">tag_set</a>(<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#settag\">settag</a>, <a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#next\">next</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Go to next item at level determined by 'shift' */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = ((<a class=\"id\" href=\"#index\">index</a> >> <a class=\"id\" href=\"#shift\">shift</a>) + 1) << <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Overflow can happen when last_index is ~0UL... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#last_index\">last_index</a> || !<a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tagged\">tagged</a> >= <a class=\"id\" href=\"#nr_to_tag\">nr_to_tag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (((<a class=\"id\" href=\"#index\">index</a> >> <a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We've fully scanned this node. Go up. Because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * last_index is guaranteed to be in the tree, what</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we do below cannot wander astray.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#path\">path</a>[<a class=\"id\" href=\"#height\">height</a> - 1].<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> += <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The iftag must have been set somewhere because otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we would return immediated at the beginning of the function</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root_tag_set\">root_tag_set</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#settag\">settag</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#first_indexp\">first_indexp</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tagged\">tagged</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_range_tag_if_tagged\">radix_tree_range_tag_if_tagged</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_next_hole    -    find the next hole (not-present entry)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@index:<span class=\"ts\"/><span class=\"ts\"/>index key</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@max_scan:<span class=\"ts\"/>maximum range to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Search the set [index, min(index+max_scan-1, MAX_INDEX)] for the lowest</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>indexed hole.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns: the index of the hole if found, otherwise returns an index</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>outside of the set specified (in which case 'return - index &gt;= max_scan'</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will be true). In rare cases of index wrap-around, 0 will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_next_hole may be called under rcu_read_lock. However, like</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_gang_lookup, this will not atomically search a snapshot of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the tree at a single point in time. For example, if a hole is created</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>at index 5, then subsequently a hole is created at index 10,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_next_hole covering both indexes may return 10 if called</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>under rcu_read_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#radix_tree_next_hole\">radix_tree_next_hole</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, unsigned long <a class=\"id\" href=\"#max_scan\">max_scan</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_scan\">max_scan</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#radix_tree_lookup\">radix_tree_lookup</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#index\">index</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_next_hole\">radix_tree_next_hole</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_prev_hole    -    find the prev hole (not-present entry)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@index:<span class=\"ts\"/><span class=\"ts\"/>index key</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@max_scan:<span class=\"ts\"/>maximum range to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Search backwards in the range [max(index-max_scan+1, 0), index]</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for the first hole.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns: the index of the hole if found, otherwise returns an index</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>outside of the set specified (in which case 'index - return &gt;= max_scan'</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will be true). In rare cases of wrap-around, ULONG_MAX will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_next_hole may be called under rcu_read_lock. However, like</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_gang_lookup, this will not atomically search a snapshot of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the tree at a single point in time. For example, if a hole is created</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>at index 10, then subsequently a hole is created at index 5,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_prev_hole covering both indexes may return 5 if called under</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rcu_read_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#radix_tree_prev_hole\">radix_tree_prev_hole</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#index\">index</a>, unsigned long <a class=\"id\" href=\"#max_scan\">max_scan</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_scan\">max_scan</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#radix_tree_lookup\">radix_tree_lookup</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#index\">index</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_prev_hole\">radix_tree_prev_hole</a>);", 
"", 
"static unsigned int", 
"<a class=\"id\" href=\"#__lookup\">__lookup</a>(struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#slot\">slot</a>, void ***<a class=\"id\" href=\"#results\">results</a>, unsigned long <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#max_items\">max_items</a>, unsigned long *<a class=\"id\" href=\"#next_index\">next_index</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_found\">nr_found</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#shift\">shift</a>, <a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#height\">height</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = (<a class=\"id\" href=\"#height\">height</a>-1) * <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#height\">height</a> &gt; 1; <a class=\"id\" href=\"#height\">height</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#index\">index</a> >> <a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> &= ~((1UL << <a class=\"id\" href=\"#shift\">shift</a>) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> += 1UL << <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;<span class=\"ts\"/><span class=\"comment\">/* 32-bit wraparound */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#RADIX_TREE_MAP_SIZE\">RADIX_TREE_MAP_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> -= <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Bottom level: grab some items */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#index\">index</a> &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#RADIX_TREE_MAP_SIZE\">RADIX_TREE_MAP_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#results\">results</a>[<a class=\"id\" href=\"#nr_found\">nr_found</a>++] = &amp;(<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_found\">nr_found</a> == <a class=\"id\" href=\"#max_items\">max_items</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#next_index\">next_index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_found\">nr_found</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_gang_lookup - perform multiple lookup on a radix tree</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@results:<span class=\"ts\"/>where the results of the lookup are placed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@first_index:<span class=\"ts\"/>start the lookup from this key</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@max_items:<span class=\"ts\"/>place up to this many items at *results</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Performs an index-ascending scan of the tree for present items.  Places</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>them at *@results and returns the number of items which were placed at</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*@results.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The implementation is naive.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Like radix_tree_lookup, radix_tree_gang_lookup may be called under</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rcu_read_lock. In this case, rather than the returned results being</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>an atomic snapshot of the tree at a single point in time, the semantics</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of an RCU protected gang lookup are as though multiple radix_tree_lookups</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have been issued in individual locks, and results stored in 'results'.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int", 
"<a class=\"id\" href=\"#radix_tree_gang_lookup\">radix_tree_gang_lookup</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, void **<a class=\"id\" href=\"#results\">results</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first_index\">first_index</a>, unsigned int <a class=\"id\" href=\"#max_items\">max_items</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_index\">max_index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cur_index\">cur_index</a> = <a class=\"id\" href=\"#first_index\">first_index</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(<a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_index\">first_index</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#results\">results</a>[0] = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_index\">max_index</a> = <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#height\">height</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ret\">ret</a> &lt; <a class=\"id\" href=\"#max_items\">max_items</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_found\">nr_found</a>, <a class=\"id\" href=\"#slots_found\">slots_found</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_index\">next_index</a>;<span class=\"ts\"/><span class=\"comment\">/* Index of next search */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur_index\">cur_index</a> &gt; <a class=\"id\" href=\"#max_index\">max_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots_found\">slots_found</a> = <a class=\"id\" href=\"#__lookup\">__lookup</a>(<a class=\"id\" href=\"#node\">node</a>, (void ***)<a class=\"id\" href=\"#results\">results</a> + <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#cur_index\">cur_index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_items\">max_items</a> - <a class=\"id\" href=\"#ret\">ret</a>, &amp;<a class=\"id\" href=\"#next_index\">next_index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_found\">nr_found</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#slots_found\">slots_found</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = *(((void ***)<a class=\"id\" href=\"#results\">results</a>)[<a class=\"id\" href=\"#ret\">ret</a> + <a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#slot\">slot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#results\">results</a>[<a class=\"id\" href=\"#ret\">ret</a> + <a class=\"id\" href=\"#nr_found\">nr_found</a>] = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_found\">nr_found</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#nr_found\">nr_found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next_index\">next_index</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_index\">cur_index</a> = <a class=\"id\" href=\"#next_index\">next_index</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_gang_lookup\">radix_tree_gang_lookup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_gang_lookup_slot - perform multiple slot lookup on radix tree</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@results:<span class=\"ts\"/>where the results of the lookup are placed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@first_index:<span class=\"ts\"/>start the lookup from this key</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@max_items:<span class=\"ts\"/>place up to this many items at *results</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Performs an index-ascending scan of the tree for present items.  Places</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>their slots at *@results and returns the number of items which were</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>placed at *@results.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The implementation is naive.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Like radix_tree_gang_lookup as far as RCU and locking goes. Slots must</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be dereferenced with radix_tree_deref_slot, and if using only RCU</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>protection, radix_tree_deref_slot may fail requiring a retry.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int", 
"<a class=\"id\" href=\"#radix_tree_gang_lookup_slot\">radix_tree_gang_lookup_slot</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, void ***<a class=\"id\" href=\"#results\">results</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first_index\">first_index</a>, unsigned int <a class=\"id\" href=\"#max_items\">max_items</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_index\">max_index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cur_index\">cur_index</a> = <a class=\"id\" href=\"#first_index\">first_index</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(<a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_index\">first_index</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#results\">results</a>[0] = (void **)&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_index\">max_index</a> = <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#height\">height</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ret\">ret</a> &lt; <a class=\"id\" href=\"#max_items\">max_items</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#slots_found\">slots_found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_index\">next_index</a>;<span class=\"ts\"/><span class=\"comment\">/* Index of next search */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur_index\">cur_index</a> &gt; <a class=\"id\" href=\"#max_index\">max_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots_found\">slots_found</a> = <a class=\"id\" href=\"#__lookup\">__lookup</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#results\">results</a> + <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#cur_index\">cur_index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_items\">max_items</a> - <a class=\"id\" href=\"#ret\">ret</a>, &amp;<a class=\"id\" href=\"#next_index\">next_index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#slots_found\">slots_found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next_index\">next_index</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_index\">cur_index</a> = <a class=\"id\" href=\"#next_index\">next_index</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_gang_lookup_slot\">radix_tree_gang_lookup_slot</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * FIXME: the two tag_get()s here should use find_next_bit() instead of</span>", 
"<span class=\"comment\"> * open-coding the search.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int", 
"<a class=\"id\" href=\"#__lookup_tag\">__lookup_tag</a>(struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#slot\">slot</a>, void ***<a class=\"id\" href=\"#results\">results</a>, unsigned long <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#max_items\">max_items</a>, unsigned long *<a class=\"id\" href=\"#next_index\">next_index</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_found\">nr_found</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#shift\">shift</a>, <a class=\"id\" href=\"#height\">height</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#height\">height</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = (<a class=\"id\" href=\"#height\">height</a>-1) * <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#height\">height</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#index\">index</a> >> <a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a> ;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tag_get\">tag_get</a>(<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> &= ~((1UL << <a class=\"id\" href=\"#shift\">shift</a>) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> += 1UL << <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;<span class=\"ts\"/><span class=\"comment\">/* 32-bit wraparound */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#RADIX_TREE_MAP_SIZE\">RADIX_TREE_MAP_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#height\">height</a> == 0) {<span class=\"ts\"/><span class=\"comment\">/* Bottom level: grab some items */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#index\">index</a> &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#RADIX_TREE_MAP_SIZE\">RADIX_TREE_MAP_SIZE</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tag_get\">tag_get</a>(<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#j\">j</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Even though the tag was found set, we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * recheck that we have a non-NULL node, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if this lookup is lockless, it may have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * subsequently deleted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Similar care must be taken in any place that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * lookup -&gt;slots[x] without a lock (ie. can't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * rely on its value remaining the same).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#j\">j</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#results\">results</a>[<a class=\"id\" href=\"#nr_found\">nr_found</a>++] = &amp;(<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_found\">nr_found</a> == <a class=\"id\" href=\"#max_items\">max_items</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> -= <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#next_index\">next_index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_found\">nr_found</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_gang_lookup_tag - perform multiple lookup on a radix tree</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>                             based on a tag</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@results:<span class=\"ts\"/>where the results of the lookup are placed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@first_index:<span class=\"ts\"/>start the lookup from this key</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@max_items:<span class=\"ts\"/>place up to this many items at *results</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tag:<span class=\"ts\"/><span class=\"ts\"/>the tag index (&lt; RADIX_TREE_MAX_TAGS)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Performs an index-ascending scan of the tree for present items which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have the tag indexed by @tag set.  Places the items at *@results and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns the number of items which were placed at *@results.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int", 
"<a class=\"id\" href=\"#radix_tree_gang_lookup_tag\">radix_tree_gang_lookup_tag</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, void **<a class=\"id\" href=\"#results\">results</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first_index\">first_index</a>, unsigned int <a class=\"id\" href=\"#max_items\">max_items</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_index\">max_index</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cur_index\">cur_index</a> = <a class=\"id\" href=\"#first_index\">first_index</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check the root's tag bit */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root_tag_get\">root_tag_get</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#tag\">tag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(<a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_index\">first_index</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#results\">results</a>[0] = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_index\">max_index</a> = <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#height\">height</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ret\">ret</a> &lt; <a class=\"id\" href=\"#max_items\">max_items</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_found\">nr_found</a>, <a class=\"id\" href=\"#slots_found\">slots_found</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_index\">next_index</a>;<span class=\"ts\"/><span class=\"comment\">/* Index of next search */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur_index\">cur_index</a> &gt; <a class=\"id\" href=\"#max_index\">max_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots_found\">slots_found</a> = <a class=\"id\" href=\"#__lookup_tag\">__lookup_tag</a>(<a class=\"id\" href=\"#node\">node</a>, (void ***)<a class=\"id\" href=\"#results\">results</a> + <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_index\">cur_index</a>, <a class=\"id\" href=\"#max_items\">max_items</a> - <a class=\"id\" href=\"#ret\">ret</a>, &amp;<a class=\"id\" href=\"#next_index\">next_index</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_found\">nr_found</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#slots_found\">slots_found</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = *(((void ***)<a class=\"id\" href=\"#results\">results</a>)[<a class=\"id\" href=\"#ret\">ret</a> + <a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#slot\">slot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#results\">results</a>[<a class=\"id\" href=\"#ret\">ret</a> + <a class=\"id\" href=\"#nr_found\">nr_found</a>] = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_found\">nr_found</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#nr_found\">nr_found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next_index\">next_index</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_index\">cur_index</a> = <a class=\"id\" href=\"#next_index\">next_index</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_gang_lookup_tag\">radix_tree_gang_lookup_tag</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_gang_lookup_tag_slot - perform multiple slot lookup on a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  radix tree based on a tag</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@results:<span class=\"ts\"/>where the results of the lookup are placed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@first_index:<span class=\"ts\"/>start the lookup from this key</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@max_items:<span class=\"ts\"/>place up to this many items at *results</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tag:<span class=\"ts\"/><span class=\"ts\"/>the tag index (&lt; RADIX_TREE_MAX_TAGS)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Performs an index-ascending scan of the tree for present items which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have the tag indexed by @tag set.  Places the slots at *@results and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns the number of slots which were placed at *@results.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int", 
"<a class=\"id\" href=\"#radix_tree_gang_lookup_tag_slot\">radix_tree_gang_lookup_tag_slot</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, void ***<a class=\"id\" href=\"#results\">results</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first_index\">first_index</a>, unsigned int <a class=\"id\" href=\"#max_items\">max_items</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_index\">max_index</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cur_index\">cur_index</a> = <a class=\"id\" href=\"#first_index\">first_index</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check the root's tag bit */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root_tag_get\">root_tag_get</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#tag\">tag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(<a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_index\">first_index</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#results\">results</a>[0] = (void **)&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_index\">max_index</a> = <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#height\">height</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ret\">ret</a> &lt; <a class=\"id\" href=\"#max_items\">max_items</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#slots_found\">slots_found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_index\">next_index</a>;<span class=\"ts\"/><span class=\"comment\">/* Index of next search */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur_index\">cur_index</a> &gt; <a class=\"id\" href=\"#max_index\">max_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slots_found\">slots_found</a> = <a class=\"id\" href=\"#__lookup_tag\">__lookup_tag</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#results\">results</a> + <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_index\">cur_index</a>, <a class=\"id\" href=\"#max_items\">max_items</a> - <a class=\"id\" href=\"#ret\">ret</a>, &amp;<a class=\"id\" href=\"#next_index\">next_index</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#slots_found\">slots_found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next_index\">next_index</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_index\">cur_index</a> = <a class=\"id\" href=\"#next_index\">next_index</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_gang_lookup_tag_slot\">radix_tree_gang_lookup_tag_slot</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_shrink    -    shrink height of a radix tree to minimal</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#radix_tree_shrink\">radix_tree_shrink</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* try to shrink tree height */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#to_free\">to_free</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#newptr\">newptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#radix_tree_is_indirect_ptr\">radix_tree_is_indirect_ptr</a>(<a class=\"id\" href=\"#to_free\">to_free</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free\">to_free</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#to_free\">to_free</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The candidate node has more than one child, or its child</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is not at the leftmost slot, we cannot shrink.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#to_free\">to_free</a>-><a class=\"id\" href=\"#count\">count</a> != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#to_free\">to_free</a>-><a class=\"id\" href=\"#slots\">slots</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We don't need rcu_assign_pointer(), since we are simply</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * moving the node from one part of the tree to another. If</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it was safe to dereference the old pointer to it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (to_free-&gt;slots[0]), it will be safe to dereference the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one (root-&gt;rnode).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newptr\">newptr</a> = <a class=\"id\" href=\"#to_free\">to_free</a>-><a class=\"id\" href=\"#slots\">slots</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newptr\">newptr</a> = <a class=\"id\" href=\"#radix_tree_ptr_to_indirect\">radix_tree_ptr_to_indirect</a>(<a class=\"id\" href=\"#newptr\">newptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a> = <a class=\"id\" href=\"#newptr\">newptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_node_free\">radix_tree_node_free</a>(<a class=\"id\" href=\"#to_free\">to_free</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_delete    -    delete an item from a radix tree</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@index:<span class=\"ts\"/><span class=\"ts\"/>index key</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove the item at @index from the radix tree rooted at @root.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns the address of the deleted item, or NULL if it was not present.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#radix_tree_delete\">radix_tree_delete</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, unsigned long <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The radix tree path needs to be one longer than the maximum path</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since the \"list\" is null terminated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_path\">radix_tree_path</a> <a class=\"id\" href=\"#path\">path</a>[<a class=\"id\" href=\"#RADIX_TREE_MAX_PATH\">RADIX_TREE_MAX_PATH</a> + 1], *<a class=\"id\" href=\"#pathp\">pathp</a> = <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a> *<a class=\"id\" href=\"#to_free\">to_free</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#height\">height</a>, <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tag\">tag</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#radix_tree_maxindex\">radix_tree_maxindex</a>(<a class=\"id\" href=\"#height\">height</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#height\">height</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_tag_clear_all\">root_tag_clear_all</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#slot\">slot</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = (<a class=\"id\" href=\"#height\">height</a> - 1) * <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#index\">index</a> >> <a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#RADIX_TREE_MAP_MASK\">RADIX_TREE_MAP_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#offset\">offset</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> -= <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height\">height</a>--;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#height\">height</a> &gt; 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear all tags associated with the just-deleted item</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tag\">tag</a> = 0; <a class=\"id\" href=\"#tag\">tag</a> &lt; <a class=\"id\" href=\"#RADIX_TREE_MAX_TAGS\">RADIX_TREE_MAX_TAGS</a>; <a class=\"id\" href=\"#tag\">tag</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tag_get\">tag_get</a>(<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#offset\">offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_tag_clear\">radix_tree_tag_clear</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to_free\">to_free</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Now free the nodes we do not need anymore */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#slots\">slots</a>[<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#offset\">offset</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Queue the node for deferred freeing after the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * last reference to it disappears (set NULL, above).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#to_free\">to_free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_node_free\">radix_tree_node_free</a>(<a class=\"id\" href=\"#to_free\">to_free</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_indirect_to_ptr\">radix_tree_indirect_to_ptr</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_shrink\">radix_tree_shrink</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Node with zero slots in use so free it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free\">to_free</a> = <a class=\"id\" href=\"#pathp\">pathp</a>-><a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathp\">pathp</a>--;", 
"", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root_tag_clear_all\">root_tag_clear_all</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#height\">height</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rnode\">rnode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to_free\">to_free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_node_free\">radix_tree_node_free</a>(<a class=\"id\" href=\"#to_free\">to_free</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#slot\">slot</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_delete\">radix_tree_delete</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>radix_tree_tagged - test whether any items in the tree are tagged</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@root:<span class=\"ts\"/><span class=\"ts\"/>radix tree root</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tag:<span class=\"ts\"/><span class=\"ts\"/>tag to test</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#radix_tree_tagged\">radix_tree_tagged</a>(struct <a class=\"id\" href=\"#radix_tree_root\">radix_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>, unsigned int <a class=\"id\" href=\"#tag\">tag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#root_tag_get\">root_tag_get</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#radix_tree_tagged\">radix_tree_tagged</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#radix_tree_node_ctor\">radix_tree_node_ctor</a>(void *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#node\">node</a>, 0, sizeof(struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> unsigned long <a class=\"id\" href=\"#__maxindex\">__maxindex</a>(unsigned int <a class=\"id\" href=\"#height\">height</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#width\">width</a> = <a class=\"id\" href=\"#height\">height</a> * <a class=\"id\" href=\"#RADIX_TREE_MAP_SHIFT\">RADIX_TREE_MAP_SHIFT</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#RADIX_TREE_INDEX_BITS\">RADIX_TREE_INDEX_BITS</a> - <a class=\"id\" href=\"#width\">width</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shift\">shift</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return ~0UL;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shift\">shift</a> >= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0UL;", 
"<span class=\"ts\"/>return ~0UL >> <a class=\"id\" href=\"#shift\">shift</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#radix_tree_init_maxindex\">radix_tree_init_maxindex</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#height_to_maxindex\">height_to_maxindex</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#height_to_maxindex\">height_to_maxindex</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#__maxindex\">__maxindex</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#radix_tree_callback\">radix_tree_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>,", 
"                            unsigned long <a class=\"id\" href=\"#action\">action</a>,", 
"                            void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"       int <a class=\"id\" href=\"#cpu\">cpu</a> = (long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"       struct <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a> *<a class=\"id\" href=\"#rtp\">rtp</a>;", 
"", 
"       <span class=\"comment\">/* Free per-cpu pool of perloaded nodes */</span>", 
"       if (<a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a> || <a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>) {", 
"               <a class=\"id\" href=\"#rtp\">rtp</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#radix_tree_preloads\">radix_tree_preloads</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"               while (<a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nr\">nr</a>) {", 
"                       <a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#radix_tree_node_cachep\">radix_tree_node_cachep</a>,", 
"                                       <a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nr\">nr</a>-1]);", 
"                       <a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nr\">nr</a>-1] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"                       <a class=\"id\" href=\"#rtp\">rtp</a>-><a class=\"id\" href=\"#nr\">nr</a>--;", 
"               }", 
"       }", 
"       return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#radix_tree_init\">radix_tree_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_node_cachep\">radix_tree_node_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"radix_tree_node\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#radix_tree_node\">radix_tree_node</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a> | <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_node_ctor\">radix_tree_node_ctor</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_init_maxindex\">radix_tree_init_maxindex</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#radix_tree_callback\">radix_tree_callback</a>, 0);", 
"}", 
];
xr_frag_insert('l/77/e48beee3ccd3e92f2ea25b7f399a483fa3806d.xr', __xr_tmp);
