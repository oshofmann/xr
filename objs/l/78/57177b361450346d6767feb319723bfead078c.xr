var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * spi.c - SPI init/core code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 David Brownell</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#of_device\">of_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mod_devicetable\">mod_devicetable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spi\">spi</a>/<a class=\"id\" href=\"#spi\">spi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#of_spi\">of_spi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"<span class=\"comment\">/* SPI bustype and spi_master class are registered after board init code</span>", 
"<span class=\"comment\"> * provides the SPI device tables, ensuring that both are present by the</span>", 
"<span class=\"comment\"> * time controller driver registration causes spi_devices to \"enumerate\".</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#spidev_release\">spidev_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_device\">spi_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#spi\">spi</a> = <a class=\"id\" href=\"#to_spi_device\">to_spi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* spi masters may cleanup for released devices */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#cleanup\">cleanup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#cleanup\">cleanup</a>(<a class=\"id\" href=\"#spi\">spi</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_master_put\">spi_master_put</a>(<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#spi\">spi</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#modalias_show\">modalias_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#a\">a</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#spi_device\">spi_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#spi\">spi</a> = <a class=\"id\" href=\"#to_spi_device\">to_spi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%s\\n\", <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#modalias\">modalias</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> <a class=\"id\" href=\"#spi_dev_attrs\">spi_dev_attrs</a>[] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR_RO\">__ATTR_RO</a>(<a class=\"id\" href=\"#modalias\">modalias</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR_NULL\">__ATTR_NULL</a>,", 
"};", 
"", 
"<span class=\"comment\">/* modalias support makes \"modprobe $MODALIAS\" new-style hotplug work,</span>", 
"<span class=\"comment\"> * and the sysfs version makes coldplug work too.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static const struct <a class=\"id\" href=\"#spi_device_id\">spi_device_id</a> *<a class=\"id\" href=\"#spi_match_id\">spi_match_id</a>(const struct <a class=\"id\" href=\"#spi_device_id\">spi_device_id</a> *<a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#name\">name</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#modalias\">modalias</a>, <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#spi_device_id\">spi_device_id</a> *<a class=\"id\" href=\"#spi_get_device_id\">spi_get_device_id</a>(const struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#spi_driver\">spi_driver</a> *<a class=\"id\" href=\"#sdrv\">sdrv</a> = <a class=\"id\" href=\"#to_spi_driver\">to_spi_driver</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#driver\">driver</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#spi_match_id\">spi_match_id</a>(<a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#id_table\">id_table</a>, <a class=\"id\" href=\"#sdev\">sdev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_get_device_id\">spi_get_device_id</a>);", 
"", 
"static int <a class=\"id\" href=\"#spi_match_device\">spi_match_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#spi_device\">spi_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#spi\">spi</a> = <a class=\"id\" href=\"#to_spi_device\">to_spi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#spi_driver\">spi_driver</a><span class=\"ts\"/>*<a class=\"id\" href=\"#sdrv\">sdrv</a> = <a class=\"id\" href=\"#to_spi_driver\">to_spi_driver</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Attempt an OF style match */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#of_driver_match_device\">of_driver_match_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#drv\">drv</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#id_table\">id_table</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return !!<a class=\"id\" href=\"#spi_match_id\">spi_match_id</a>(<a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#id_table\">id_table</a>, <a class=\"id\" href=\"#spi\">spi</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#modalias\">modalias</a>, <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#name\">name</a>) == 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#spi_uevent\">spi_uevent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#kobj_uevent_env\">kobj_uevent_env</a> *<a class=\"id\" href=\"#env\">env</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#spi_device\">spi_device</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#spi\">spi</a> = <a class=\"id\" href=\"#to_spi_device\">to_spi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_uevent_var\">add_uevent_var</a>(<a class=\"id\" href=\"#env\">env</a>, \"MODALIAS=%s%s\", <a class=\"id\" href=\"#SPI_MODULE_PREFIX\">SPI_MODULE_PREFIX</a>, <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#modalias\">modalias</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"", 
"static int <a class=\"id\" href=\"#spi_suspend\">spi_suspend</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#message\">message</a>)", 
"{", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_driver\">spi_driver</a><span class=\"ts\"/>*<a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#to_spi_driver\">to_spi_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* suspend will stop irqs and dma; no more i/o */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#suspend\">suspend</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#suspend\">suspend</a>(<a class=\"id\" href=\"#to_spi_device\">to_spi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"... can't suspend\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#value\">value</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#spi_resume\">spi_resume</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_driver\">spi_driver</a><span class=\"ts\"/>*<a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#to_spi_driver\">to_spi_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* resume may restart the i/o queue */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#resume\">resume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#resume\">resume</a>(<a class=\"id\" href=\"#to_spi_device\">to_spi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"... can't resume\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#value\">value</a>;", 
"}", 
"", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_suspend\">spi_suspend</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spi_resume\">spi_resume</a><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#bus_type\">bus_type</a> <a class=\"id\" href=\"#spi_bus_type\">spi_bus_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"spi\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dev_attrs\">dev_attrs</a><span class=\"ts\"/>= <a class=\"id\" href=\"#spi_dev_attrs\">spi_dev_attrs</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match\">match</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#spi_match_device\">spi_match_device</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#uevent\">uevent</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#spi_uevent\">spi_uevent</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#suspend\">suspend</a><span class=\"ts\"/>= <a class=\"id\" href=\"#spi_suspend\">spi_suspend</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#spi_resume\">spi_resume</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_bus_type\">spi_bus_type</a>);", 
"", 
"", 
"static int <a class=\"id\" href=\"#spi_drv_probe\">spi_drv_probe</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#spi_driver\">spi_driver</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sdrv\">sdrv</a> = <a class=\"id\" href=\"#to_spi_driver\">to_spi_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#probe\">probe</a>(<a class=\"id\" href=\"#to_spi_device\">to_spi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#spi_drv_remove\">spi_drv_remove</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#spi_driver\">spi_driver</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sdrv\">sdrv</a> = <a class=\"id\" href=\"#to_spi_driver\">to_spi_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#remove\">remove</a>(<a class=\"id\" href=\"#to_spi_device\">to_spi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#spi_drv_shutdown\">spi_drv_shutdown</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#spi_driver\">spi_driver</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sdrv\">sdrv</a> = <a class=\"id\" href=\"#to_spi_driver\">to_spi_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#shutdown\">shutdown</a>(<a class=\"id\" href=\"#to_spi_device\">to_spi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_register_driver - register a SPI driver</span>", 
"<span class=\"comment\"> * @sdrv: the driver to register</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#spi_register_driver\">spi_register_driver</a>(struct <a class=\"id\" href=\"#spi_driver\">spi_driver</a> *<a class=\"id\" href=\"#sdrv\">sdrv</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#bus\">bus</a> = &amp;<a class=\"id\" href=\"#spi_bus_type\">spi_bus_type</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#probe\">probe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#probe\">probe</a> = <a class=\"id\" href=\"#spi_drv_probe\">spi_drv_probe</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#remove\">remove</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#remove\">remove</a> = <a class=\"id\" href=\"#spi_drv_remove\">spi_drv_remove</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#shutdown\">shutdown</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#shutdown\">shutdown</a> = <a class=\"id\" href=\"#spi_drv_shutdown\">spi_drv_shutdown</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#driver_register\">driver_register</a>(&amp;<a class=\"id\" href=\"#sdrv\">sdrv</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_register_driver\">spi_register_driver</a>);", 
"", 
"<span class=\"comment\">/*-------------------------------------------------------------------------*/</span>", 
"", 
"<span class=\"comment\">/* SPI devices should normally not be created by SPI device drivers; that</span>", 
"<span class=\"comment\"> * would make them board-specific.  Similarly with SPI master drivers.</span>", 
"<span class=\"comment\"> * Device registration normally goes into like arch/.../mach.../board-YYY.c</span>", 
"<span class=\"comment\"> * with other readonly (flashable) information about mainboard devices.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#boardinfo\">boardinfo</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n_board_info\">n_board_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_board_info\">spi_board_info</a><span class=\"ts\"/><a class=\"id\" href=\"#board_info\">board_info</a>[0];", 
"};", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#board_list\">board_list</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#board_lock\">board_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_alloc_device - Allocate a new SPI device</span>", 
"<span class=\"comment\"> * @master: Controller to which device is connected</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allows a driver to allocate and initialize a spi_device without</span>", 
"<span class=\"comment\"> * registering it immediately.  This allows a driver to directly</span>", 
"<span class=\"comment\"> * fill the spi_device with device parameters before calling</span>", 
"<span class=\"comment\"> * spi_add_device() on it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller is responsible to call spi_add_device() on the returned</span>", 
"<span class=\"comment\"> * spi_device structure to add it to the SPI master.  If the caller</span>", 
"<span class=\"comment\"> * needs to discard the spi_device without adding it, then it should</span>", 
"<span class=\"comment\"> * call spi_dev_put() on it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the new device, or NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi_alloc_device\">spi_alloc_device</a>(struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_device\">spi_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#spi\">spi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#spi_master_get\">spi_master_get</a>(<a class=\"id\" href=\"#master\">master</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof *<a class=\"id\" href=\"#spi\">spi</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#spi\">spi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"cannot alloc spi_device\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi_master_put\">spi_master_put</a>(<a class=\"id\" href=\"#master\">master</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#master\">master</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#bus\">bus</a> = &amp;<a class=\"id\" href=\"#spi_bus_type\">spi_bus_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#spidev_release\">spidev_release</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_initialize\">device_initialize</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#spi\">spi</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_alloc_device\">spi_alloc_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_add_device - Add spi_device allocated with spi_alloc_device</span>", 
"<span class=\"comment\"> * @spi: spi_device to register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Companion function to spi_alloc_device.  Devices allocated with</span>", 
"<span class=\"comment\"> * spi_alloc_device can be added onto the spi bus with this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success; negative errno on failure</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#spi_add_device\">spi_add_device</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#spi_add_lock\">spi_add_lock</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Chipselects are numbered 0..max; validate. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#chip_select\">chip_select</a> >= <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#num_chipselect\">num_chipselect</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"cs%d >= max %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#chip_select\">chip_select</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#num_chipselect\">num_chipselect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the bus ID string */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%s.%u\", <a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#chip_select\">chip_select</a>);", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We need to make sure there's no other device with this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * chipselect **BEFORE** we call setup(), else we'll trash</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its configuration.  Lock against concurrent add() calls.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#spi_add_lock\">spi_add_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#bus_find_device_by_name\">bus_find_device_by_name</a>(&amp;<a class=\"id\" href=\"#spi_bus_type\">spi_bus_type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"chipselect %d already in use\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#chip_select\">chip_select</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Drivers may modify this initial i/o setup, but will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * normally rely on the device being setup.  Devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * using SPI_CS_HIGH can't coexist well otherwise...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#spi_setup\">spi_setup</a>(<a class=\"id\" href=\"#spi\">spi</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"can't %s %s, status %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"setup\", <a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Device may be bound to an active driver when this returns */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#device_add\">device_add</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"can't %s %s, status %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"add\", <a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"registered child %s\\n\", <a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>));", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#spi_add_lock\">spi_add_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_add_device\">spi_add_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_new_device - instantiate one new SPI device</span>", 
"<span class=\"comment\"> * @master: Controller to which device is connected</span>", 
"<span class=\"comment\"> * @chip: Describes the SPI device</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On typical mainboards, this is purely internal; and it's not needed</span>", 
"<span class=\"comment\"> * after board init creates the hard-wired devices.  Some development</span>", 
"<span class=\"comment\"> * platforms may not be able to use spi_register_board_info though, and</span>", 
"<span class=\"comment\"> * this is exported so that for example a USB or parport based adapter</span>", 
"<span class=\"comment\"> * driver could add devices (which it would learn about out-of-band).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the new device, or NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi_new_device\">spi_new_device</a>(struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#spi_board_info\">spi_board_info</a> *<a class=\"id\" href=\"#chip\">chip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_device\">spi_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#proxy\">proxy</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTE:  caller did any chip-&gt;bus_num checks necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also, unless we change the return value convention to use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * error-or-pointer (not NULL-or-pointer), troubleshootability</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * suggests syslogged diagnostics are best here (ugh).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proxy\">proxy</a> = <a class=\"id\" href=\"#spi_alloc_device\">spi_alloc_device</a>(<a class=\"id\" href=\"#master\">master</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#proxy\">proxy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#modalias\">modalias</a>) >= sizeof(<a class=\"id\" href=\"#proxy\">proxy</a>-><a class=\"id\" href=\"#modalias\">modalias</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proxy\">proxy</a>-><a class=\"id\" href=\"#chip_select\">chip_select</a> = <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#chip_select\">chip_select</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proxy\">proxy</a>-><a class=\"id\" href=\"#max_speed_hz\">max_speed_hz</a> = <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#max_speed_hz\">max_speed_hz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proxy\">proxy</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proxy\">proxy</a>-><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#proxy\">proxy</a>-><a class=\"id\" href=\"#modalias\">modalias</a>, <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#modalias\">modalias</a>, sizeof(<a class=\"id\" href=\"#proxy\">proxy</a>-><a class=\"id\" href=\"#modalias\">modalias</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proxy\">proxy</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#platform_data\">platform_data</a> = (void *) <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#platform_data\">platform_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proxy\">proxy</a>-><a class=\"id\" href=\"#controller_data\">controller_data</a> = <a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#controller_data\">controller_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proxy\">proxy</a>-><a class=\"id\" href=\"#controller_state\">controller_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#spi_add_device\">spi_add_device</a>(<a class=\"id\" href=\"#proxy\">proxy</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi_dev_put\">spi_dev_put</a>(<a class=\"id\" href=\"#proxy\">proxy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#proxy\">proxy</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_new_device\">spi_new_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_register_board_info - register SPI devices for a given board</span>", 
"<span class=\"comment\"> * @info: array of chip descriptors</span>", 
"<span class=\"comment\"> * @n: how many descriptors are provided</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Board-specific early init code calls this (probably during arch_initcall)</span>", 
"<span class=\"comment\"> * with segments of the SPI device table.  Any device nodes are created later,</span>", 
"<span class=\"comment\"> * after the relevant parent SPI controller (bus_num) is defined.  We keep</span>", 
"<span class=\"comment\"> * this table of devices forever, so that reloading a controller driver will</span>", 
"<span class=\"comment\"> * not make Linux forget about these hard-wired devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Other code can also call this, e.g. a particular add-on board might provide</span>", 
"<span class=\"comment\"> * SPI devices through its expansion connector, so code initializing that board</span>", 
"<span class=\"comment\"> * would naturally declare its SPI devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The board info passed can safely be __initdata ... but be careful of</span>", 
"<span class=\"comment\"> * any embedded pointers (platform_data, etc), they're copied as-is.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#spi_register_board_info\">spi_register_board_info</a>(struct <a class=\"id\" href=\"#spi_board_info\">spi_board_info</a> const *<a class=\"id\" href=\"#info\">info</a>, unsigned <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#boardinfo\">boardinfo</a><span class=\"ts\"/>*<a class=\"id\" href=\"#bi\">bi</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bi\">bi</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#bi\">bi</a>) + <a class=\"id\" href=\"#n\">n</a> * sizeof *<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bi\">bi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#n_board_info\">n_board_info</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#board_info\">board_info</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#n\">n</a> * sizeof *<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#board_lock\">board_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#board_list\">board_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#board_lock\">board_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* FIXME someone should add support for a __setup(\"spi\", ...) that</span>", 
"<span class=\"comment\"> * creates board info from kernel command lines</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#scan_boardinfo\">scan_boardinfo</a>(struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#boardinfo\">boardinfo</a><span class=\"ts\"/>*<a class=\"id\" href=\"#bi\">bi</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#board_lock\">board_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#bi\">bi</a>, &amp;<a class=\"id\" href=\"#board_list\">board_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_board_info\">spi_board_info</a><span class=\"ts\"/>*<a class=\"id\" href=\"#chip\">chip</a> = <a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#board_info\">board_info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#bi\">bi</a>-><a class=\"id\" href=\"#n_board_info\">n_board_info</a>; <a class=\"id\" href=\"#n\">n</a> &gt; 0; <a class=\"id\" href=\"#n\">n</a>--, <a class=\"id\" href=\"#chip\">chip</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#bus_num\">bus_num</a> != <a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_num\">bus_num</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* NOTE: this relies on spi_new_device to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * issue diagnostics when given bogus inputs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void) <a class=\"id\" href=\"#spi_new_device\">spi_new_device</a>(<a class=\"id\" href=\"#master\">master</a>, <a class=\"id\" href=\"#chip\">chip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#board_lock\">board_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*-------------------------------------------------------------------------*/</span>", 
"", 
"static void <a class=\"id\" href=\"#spi_master_release\">spi_master_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#spi_master\">spi_master</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#master\">master</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#class\">class</a> <a class=\"id\" href=\"#spi_master_class\">spi_master_class</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"spi_master\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dev_release\">dev_release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#spi_master_release\">spi_master_release</a>,", 
"};", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_alloc_master - allocate SPI master controller</span>", 
"<span class=\"comment\"> * @dev: the controller, possibly using the platform_bus</span>", 
"<span class=\"comment\"> * @size: how much zeroed driver-private data to allocate; the pointer to this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>memory is in the driver_data field of the returned device,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>accessible with spi_master_get_devdata().</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call is used only by SPI master controller drivers, which are the</span>", 
"<span class=\"comment\"> * only ones directly touching chip registers.  It's how they allocate</span>", 
"<span class=\"comment\"> * an spi_master structure, prior to calling spi_register_master().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This must be called from context that can sleep.  It returns the SPI</span>", 
"<span class=\"comment\"> * master structure on success, else NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller is responsible for assigning the bus number and initializing</span>", 
"<span class=\"comment\"> * the master's methods before calling spi_register_master(); and (after errors</span>", 
"<span class=\"comment\"> * adding the device) calling spi_master_put() to prevent a memory leak.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#spi_alloc_master\">spi_alloc_master</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_master\">spi_master</a><span class=\"ts\"/>*<a class=\"id\" href=\"#master\">master</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size\">size</a> + sizeof *<a class=\"id\" href=\"#master\">master</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#master\">master</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_initialize\">device_initialize</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#class\">class</a> = &amp;<a class=\"id\" href=\"#spi_master_class\">spi_master_class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_master_set_devdata\">spi_master_set_devdata</a>(<a class=\"id\" href=\"#master\">master</a>, &amp;<a class=\"id\" href=\"#master\">master</a>[1]);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#master\">master</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_alloc_master\">spi_alloc_master</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_register_master - register SPI master controller</span>", 
"<span class=\"comment\"> * @master: initialized master, originally from spi_alloc_master()</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SPI master controllers connect to their drivers using some non-SPI bus,</span>", 
"<span class=\"comment\"> * such as the platform bus.  The final stage of probe() in that code</span>", 
"<span class=\"comment\"> * includes calling spi_register_master() to hook up to this SPI bus glue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SPI controllers use board specific (often SOC specific) bus numbers,</span>", 
"<span class=\"comment\"> * and board-specific addressing for SPI devices combines those numbers</span>", 
"<span class=\"comment\"> * with chip select numbers.  Since SPI does not directly support dynamic</span>", 
"<span class=\"comment\"> * device identification, boards need configuration tables telling which</span>", 
"<span class=\"comment\"> * chip is at which address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This must be called from context that can sleep.  It returns zero on</span>", 
"<span class=\"comment\"> * success, else a negative error code (dropping the master's refcount).</span>", 
"<span class=\"comment\"> * After a successful return, the caller is responsible for calling</span>", 
"<span class=\"comment\"> * spi_unregister_master().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#spi_register_master\">spi_register_master</a>(struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a>)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dyn_bus_id\">dyn_bus_id</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>((1<<15) - 1);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dynamic\">dynamic</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* even if it's just one always-selected device, there must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be at least one chipselect</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#num_chipselect\">num_chipselect</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* convention:  dynamically assigned bus IDs count down from the max */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_num\">bus_num</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME switch to an IDR based scheme, something like</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * I2C now uses, so we can't run out of \"dynamic\" IDs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_num\">bus_num</a> = <a class=\"id\" href=\"#atomic_dec_return\">atomic_dec_return</a>(&amp;<a class=\"id\" href=\"#dyn_bus_id\">dyn_bus_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dynamic\">dynamic</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_spinlock\">bus_lock_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_mutex\">bus_lock_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_flag\">bus_lock_flag</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* register the device, then userspace will see it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * registration fails if the bus ID is in use.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"spi%u\", <a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_num\">bus_num</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#device_add\">device_add</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"registered master %s%s\\n\", <a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dynamic\">dynamic</a> ? \" (dynamic)\" : \"\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* populate children from any spi device tables */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scan_boardinfo\">scan_boardinfo</a>(<a class=\"id\" href=\"#master\">master</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Register devices from the device tree */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#of_register_spi_devices\">of_register_spi_devices</a>(<a class=\"id\" href=\"#master\">master</a>);", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_register_master\">spi_register_master</a>);", 
"", 
"", 
"static int <a class=\"id\" href=\"#__unregister\">__unregister</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#null\">null</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_unregister_device\">spi_unregister_device</a>(<a class=\"id\" href=\"#to_spi_device\">to_spi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_unregister_master - unregister SPI master controller</span>", 
"<span class=\"comment\"> * @master: the master being unregistered</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call is used only by SPI master controller drivers, which are the</span>", 
"<span class=\"comment\"> * only ones directly touching chip registers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This must be called from context that can sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#spi_unregister_master\">spi_unregister_master</a>(struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dummy\">dummy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dummy\">dummy</a> = <a class=\"id\" href=\"#device_for_each_child\">device_for_each_child</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#__unregister\">__unregister</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_unregister_master\">spi_unregister_master</a>);", 
"", 
"static int <a class=\"id\" href=\"#__spi_master_match\">__spi_master_match</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#bus_num\">bus_num</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#spi_master\">spi_master</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#bus_num\">bus_num</a> == *<a class=\"id\" href=\"#bus_num\">bus_num</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_busnum_to_master - look up master associated with bus_num</span>", 
"<span class=\"comment\"> * @bus_num: the master's bus number</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call may be used with devices that are registered after</span>", 
"<span class=\"comment\"> * arch init time.  It returns a refcounted pointer to the relevant</span>", 
"<span class=\"comment\"> * spi_master (which the caller must release), or NULL if there is</span>", 
"<span class=\"comment\"> * no such master registered.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#spi_busnum_to_master\">spi_busnum_to_master</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#bus_num\">bus_num</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_master\">spi_master</a><span class=\"ts\"/>*<a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#class_find_device\">class_find_device</a>(&amp;<a class=\"id\" href=\"#spi_master_class\">spi_master_class</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#bus_num\">bus_num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__spi_master_match\">__spi_master_match</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#spi_master\">spi_master</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* reference got in class_find_device */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#master\">master</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_busnum_to_master\">spi_busnum_to_master</a>);", 
"", 
"", 
"<span class=\"comment\">/*-------------------------------------------------------------------------*/</span>", 
"", 
"<span class=\"comment\">/* Core methods for SPI master protocol drivers.  Some of the</span>", 
"<span class=\"comment\"> * other core methods are currently defined as inline functions.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_setup - setup SPI mode and clock rate</span>", 
"<span class=\"comment\"> * @spi: the device whose settings are being modified</span>", 
"<span class=\"comment\"> * Context: can sleep, and no requests are queued to the device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SPI protocol drivers may need to update the transfer mode if the</span>", 
"<span class=\"comment\"> * device doesn't work with its default.  They may likewise need</span>", 
"<span class=\"comment\"> * to update clock rates or word sizes from initial values.  This function</span>", 
"<span class=\"comment\"> * changes those settings, and must be called from a context that can sleep.</span>", 
"<span class=\"comment\"> * Except for SPI_CS_HIGH, which takes effect immediately, the changes take</span>", 
"<span class=\"comment\"> * effect the next time the device is selected and data is transferred to</span>", 
"<span class=\"comment\"> * or from it.  When this function returns, the spi device is deselected.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this call will fail if the protocol driver specifies an option</span>", 
"<span class=\"comment\"> * that the underlying controller or its driver does not support.  For</span>", 
"<span class=\"comment\"> * example, not all hardware supports wire transfers using nine bit words,</span>", 
"<span class=\"comment\"> * LSB-first wire encoding, or active-high chipselects.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#spi_setup\">spi_setup</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>)", 
"{", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#bad_bits\">bad_bits</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* help drivers fail *cleanly* when they need options</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that aren't supported with their current master</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bad_bits\">bad_bits</a> = <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#mode\">mode</a> &amp; ~<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#mode_bits\">mode_bits</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bad_bits\">bad_bits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"setup: unsupported mode bits %x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_bits\">bad_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#bits_per_word\">bits_per_word</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#bits_per_word\">bits_per_word</a> = 8;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#setup\">setup</a>(<a class=\"id\" href=\"#spi\">spi</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"setup mode %d, %s%s%s%s\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%u bits/w, %u Hz max --> %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(int) (<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#mode\">mode</a> &amp; (<a class=\"id\" href=\"#SPI_CPOL\">SPI_CPOL</a> | <a class=\"id\" href=\"#SPI_CPHA\">SPI_CPHA</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#SPI_CS_HIGH\">SPI_CS_HIGH</a>) ? \"cs_high, \" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#SPI_LSB_FIRST\">SPI_LSB_FIRST</a>) ? \"lsb, \" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#SPI_3WIRE\">SPI_3WIRE</a>) ? \"3wire, \" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#SPI_LOOP\">SPI_LOOP</a>) ? \"loopback, \" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#bits_per_word\">bits_per_word</a>, <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#max_speed_hz\">max_speed_hz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_setup\">spi_setup</a>);", 
"", 
"static int <a class=\"id\" href=\"#__spi_async\">__spi_async</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>, struct <a class=\"id\" href=\"#spi_message\">spi_message</a> *<a class=\"id\" href=\"#message\">message</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Half-duplex links include original MicroWire, and ones with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only one data pin like SPI_3WIRE (switches direction) or where</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * either MOSI or MISO is missing.  They can also be caused by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * software limitations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPI_MASTER_HALF_DUPLEX\">SPI_MASTER_HALF_DUPLEX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>|| (<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#SPI_3WIRE\">SPI_3WIRE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_transfer\">spi_transfer</a> *<a class=\"id\" href=\"#xfer\">xfer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#xfer\">xfer</a>, &amp;<a class=\"id\" href=\"#message\">message</a>-><a class=\"id\" href=\"#transfers\">transfers</a>, <a class=\"id\" href=\"#transfer_list\">transfer_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#xfer\">xfer</a>-><a class=\"id\" href=\"#rx_buf\">rx_buf</a> && <a class=\"id\" href=\"#xfer\">xfer</a>-><a class=\"id\" href=\"#tx_buf\">tx_buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPI_MASTER_NO_TX\">SPI_MASTER_NO_TX</a>) && <a class=\"id\" href=\"#xfer\">xfer</a>-><a class=\"id\" href=\"#tx_buf\">tx_buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPI_MASTER_NO_RX\">SPI_MASTER_NO_RX</a>) && <a class=\"id\" href=\"#xfer\">xfer</a>-><a class=\"id\" href=\"#rx_buf\">rx_buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#message\">message</a>-><a class=\"id\" href=\"#spi\">spi</a> = <a class=\"id\" href=\"#spi\">spi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#message\">message</a>-><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EINPROGRESS\">EINPROGRESS</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#transfer\">transfer</a>(<a class=\"id\" href=\"#spi\">spi</a>, <a class=\"id\" href=\"#message\">message</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_async - asynchronous SPI transfer</span>", 
"<span class=\"comment\"> * @spi: device with which data will be exchanged</span>", 
"<span class=\"comment\"> * @message: describes the data transfers, including completion callback</span>", 
"<span class=\"comment\"> * Context: any (irqs may be blocked, etc)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call may be used in_irq and other contexts which can't sleep,</span>", 
"<span class=\"comment\"> * as well as from task contexts which can sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The completion callback is invoked in a context which can't sleep.</span>", 
"<span class=\"comment\"> * Before that invocation, the value of message-&gt;status is undefined.</span>", 
"<span class=\"comment\"> * When the callback is issued, message-&gt;status holds either zero (to</span>", 
"<span class=\"comment\"> * indicate complete success) or a negative error code.  After that</span>", 
"<span class=\"comment\"> * callback returns, the driver which issued the transfer request may</span>", 
"<span class=\"comment\"> * deallocate the associated memory; it's no longer in use by any SPI</span>", 
"<span class=\"comment\"> * core or controller driver code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that although all messages to a spi_device are handled in</span>", 
"<span class=\"comment\"> * FIFO order, messages may go to different devices in other orders.</span>", 
"<span class=\"comment\"> * Some device might be higher priority, or have various \"hard\" access</span>", 
"<span class=\"comment\"> * time requirements, for example.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On detection of any fault during the transfer, processing of</span>", 
"<span class=\"comment\"> * the entire message is aborted, and the device is deselected.</span>", 
"<span class=\"comment\"> * Until returning from the associated message completion callback,</span>", 
"<span class=\"comment\"> * no other spi_message queued to that device will be processed.</span>", 
"<span class=\"comment\"> * (This rule applies equally to all the synchronous transfer calls,</span>", 
"<span class=\"comment\"> * which are wrappers around this core asynchronous primitive.)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#spi_async\">spi_async</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>, struct <a class=\"id\" href=\"#spi_message\">spi_message</a> *<a class=\"id\" href=\"#message\">message</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_spinlock\">bus_lock_spinlock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_flag\">bus_lock_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__spi_async\">__spi_async</a>(<a class=\"id\" href=\"#spi\">spi</a>, <a class=\"id\" href=\"#message\">message</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_spinlock\">bus_lock_spinlock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_async\">spi_async</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_async_locked - version of spi_async with exclusive bus usage</span>", 
"<span class=\"comment\"> * @spi: device with which data will be exchanged</span>", 
"<span class=\"comment\"> * @message: describes the data transfers, including completion callback</span>", 
"<span class=\"comment\"> * Context: any (irqs may be blocked, etc)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call may be used in_irq and other contexts which can't sleep,</span>", 
"<span class=\"comment\"> * as well as from task contexts which can sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The completion callback is invoked in a context which can't sleep.</span>", 
"<span class=\"comment\"> * Before that invocation, the value of message-&gt;status is undefined.</span>", 
"<span class=\"comment\"> * When the callback is issued, message-&gt;status holds either zero (to</span>", 
"<span class=\"comment\"> * indicate complete success) or a negative error code.  After that</span>", 
"<span class=\"comment\"> * callback returns, the driver which issued the transfer request may</span>", 
"<span class=\"comment\"> * deallocate the associated memory; it's no longer in use by any SPI</span>", 
"<span class=\"comment\"> * core or controller driver code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that although all messages to a spi_device are handled in</span>", 
"<span class=\"comment\"> * FIFO order, messages may go to different devices in other orders.</span>", 
"<span class=\"comment\"> * Some device might be higher priority, or have various \"hard\" access</span>", 
"<span class=\"comment\"> * time requirements, for example.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On detection of any fault during the transfer, processing of</span>", 
"<span class=\"comment\"> * the entire message is aborted, and the device is deselected.</span>", 
"<span class=\"comment\"> * Until returning from the associated message completion callback,</span>", 
"<span class=\"comment\"> * no other spi_message queued to that device will be processed.</span>", 
"<span class=\"comment\"> * (This rule applies equally to all the synchronous transfer calls,</span>", 
"<span class=\"comment\"> * which are wrappers around this core asynchronous primitive.)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#spi_async_locked\">spi_async_locked</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>, struct <a class=\"id\" href=\"#spi_message\">spi_message</a> *<a class=\"id\" href=\"#message\">message</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_spinlock\">bus_lock_spinlock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__spi_async\">__spi_async</a>(<a class=\"id\" href=\"#spi\">spi</a>, <a class=\"id\" href=\"#message\">message</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_spinlock\">bus_lock_spinlock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_async_locked\">spi_async_locked</a>);", 
"", 
"", 
"<span class=\"comment\">/*-------------------------------------------------------------------------*/</span>", 
"", 
"<span class=\"comment\">/* Utility methods for SPI master protocol drivers, layered on</span>", 
"<span class=\"comment\"> * top of the core.  Some other utility methods are defined as</span>", 
"<span class=\"comment\"> * inline functions.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#spi_complete\">spi_complete</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__spi_sync\">__spi_sync</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>, struct <a class=\"id\" href=\"#spi_message\">spi_message</a> *<a class=\"id\" href=\"#message\">message</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#bus_locked\">bus_locked</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_COMPLETION_ONSTACK\">DECLARE_COMPLETION_ONSTACK</a>(<a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#master\">master</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#message\">message</a>-><a class=\"id\" href=\"#complete\">complete</a> = <a class=\"id\" href=\"#spi_complete\">spi_complete</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#message\">message</a>-><a class=\"id\" href=\"#context\">context</a> = &amp;<a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bus_locked\">bus_locked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_mutex\">bus_lock_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#spi_async_locked\">spi_async_locked</a>(<a class=\"id\" href=\"#spi\">spi</a>, <a class=\"id\" href=\"#message\">message</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bus_locked\">bus_locked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_mutex\">bus_lock_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#message\">message</a>-><a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#message\">message</a>-><a class=\"id\" href=\"#context\">context</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_sync - blocking/synchronous SPI data transfers</span>", 
"<span class=\"comment\"> * @spi: device with which data will be exchanged</span>", 
"<span class=\"comment\"> * @message: describes the data transfers</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call may only be used from a context that may sleep.  The sleep</span>", 
"<span class=\"comment\"> * is non-interruptible, and has no timeout.  Low-overhead controller</span>", 
"<span class=\"comment\"> * drivers may DMA directly into and out of the message buffers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that the SPI device's chip select is active during the message,</span>", 
"<span class=\"comment\"> * and then is normally disabled between messages.  Drivers for some</span>", 
"<span class=\"comment\"> * frequently-used devices may want to minimize costs of selecting a chip,</span>", 
"<span class=\"comment\"> * by leaving it selected in anticipation that the next message will go</span>", 
"<span class=\"comment\"> * to the same chip.  (That may increase power usage.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also, the caller is guaranteeing that the memory associated with the</span>", 
"<span class=\"comment\"> * message will not be freed before this call returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns zero on success, else a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#spi_sync\">spi_sync</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>, struct <a class=\"id\" href=\"#spi_message\">spi_message</a> *<a class=\"id\" href=\"#message\">message</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__spi_sync\">__spi_sync</a>(<a class=\"id\" href=\"#spi\">spi</a>, <a class=\"id\" href=\"#message\">message</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_sync\">spi_sync</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_sync_locked - version of spi_sync with exclusive bus usage</span>", 
"<span class=\"comment\"> * @spi: device with which data will be exchanged</span>", 
"<span class=\"comment\"> * @message: describes the data transfers</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call may only be used from a context that may sleep.  The sleep</span>", 
"<span class=\"comment\"> * is non-interruptible, and has no timeout.  Low-overhead controller</span>", 
"<span class=\"comment\"> * drivers may DMA directly into and out of the message buffers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call should be used by drivers that require exclusive access to the</span>", 
"<span class=\"comment\"> * SPI bus. It has to be preceeded by a spi_bus_lock call. The SPI bus must</span>", 
"<span class=\"comment\"> * be released by a spi_bus_unlock call when the exclusive access is over.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns zero on success, else a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#spi_sync_locked\">spi_sync_locked</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>, struct <a class=\"id\" href=\"#spi_message\">spi_message</a> *<a class=\"id\" href=\"#message\">message</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__spi_sync\">__spi_sync</a>(<a class=\"id\" href=\"#spi\">spi</a>, <a class=\"id\" href=\"#message\">message</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_sync_locked\">spi_sync_locked</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_bus_lock - obtain a lock for exclusive SPI bus usage</span>", 
"<span class=\"comment\"> * @master: SPI bus master that should be locked for exclusive bus access</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call may only be used from a context that may sleep.  The sleep</span>", 
"<span class=\"comment\"> * is non-interruptible, and has no timeout.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call should be used by drivers that require exclusive access to the</span>", 
"<span class=\"comment\"> * SPI bus. The SPI bus must be released by a spi_bus_unlock call when the</span>", 
"<span class=\"comment\"> * exclusive access is over. Data transfer must be done by spi_sync_locked</span>", 
"<span class=\"comment\"> * and spi_async_locked calls when the SPI bus lock is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns zero on success, else a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#spi_bus_lock\">spi_bus_lock</a>(struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_mutex\">bus_lock_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_spinlock\">bus_lock_spinlock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_flag\">bus_lock_flag</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_spinlock\">bus_lock_spinlock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mutex remains locked until spi_bus_unlock is called */</span>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_bus_lock\">spi_bus_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_bus_unlock - release the lock for exclusive SPI bus usage</span>", 
"<span class=\"comment\"> * @master: SPI bus master that was locked for exclusive bus access</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call may only be used from a context that may sleep.  The sleep</span>", 
"<span class=\"comment\"> * is non-interruptible, and has no timeout.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This call releases an SPI bus lock previously obtained by an spi_bus_lock</span>", 
"<span class=\"comment\"> * call.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns zero on success, else a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#spi_bus_unlock\">spi_bus_unlock</a>(struct <a class=\"id\" href=\"#spi_master\">spi_master</a> *<a class=\"id\" href=\"#master\">master</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_flag\">bus_lock_flag</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#bus_lock_mutex\">bus_lock_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_bus_unlock\">spi_bus_unlock</a>);", 
"", 
"<span class=\"comment\">/* portable code must never pass more than 32 bytes */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_BUFSIZ\">SPI_BUFSIZ</a><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a>(32,<a class=\"id\" href=\"#SMP_CACHE_BYTES\">SMP_CACHE_BYTES</a>)", 
"", 
"static <a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * spi_write_then_read - SPI synchronous write followed by read</span>", 
"<span class=\"comment\"> * @spi: device with which data will be exchanged</span>", 
"<span class=\"comment\"> * @txbuf: data to be written (need not be dma-safe)</span>", 
"<span class=\"comment\"> * @n_tx: size of txbuf, in bytes</span>", 
"<span class=\"comment\"> * @rxbuf: buffer into which data will be read (need not be dma-safe)</span>", 
"<span class=\"comment\"> * @n_rx: size of rxbuf, in bytes</span>", 
"<span class=\"comment\"> * Context: can sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This performs a half duplex MicroWire style transaction with the</span>", 
"<span class=\"comment\"> * device, sending txbuf and then reading rxbuf.  The return value</span>", 
"<span class=\"comment\"> * is zero for success, else a negative errno status code.</span>", 
"<span class=\"comment\"> * This call may only be used from a context that may sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Parameters to this routine are always copied using a small buffer;</span>", 
"<span class=\"comment\"> * portable code should never use this for more than 32 bytes.</span>", 
"<span class=\"comment\"> * Performance-sensitive or bulk transfer code should instead use</span>", 
"<span class=\"comment\"> * spi_{async,sync}() calls with dma-safe buffers.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#spi_write_then_read\">spi_write_then_read</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#txbuf\">txbuf</a>, unsigned <a class=\"id\" href=\"#n_tx\">n_tx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rxbuf\">rxbuf</a>, unsigned <a class=\"id\" href=\"#n_rx\">n_rx</a>)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_message\">spi_message</a><span class=\"ts\"/><a class=\"id\" href=\"#message\">message</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_transfer\">spi_transfer</a><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a>[2];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#local_buf\">local_buf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use preallocated DMA-safe buffer.  We can't avoid copying here,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (as a pure convenience thing), but we can keep heap costs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * out of the hot path ...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#n_tx\">n_tx</a> + <a class=\"id\" href=\"#n_rx\">n_rx</a>) &gt; <a class=\"id\" href=\"#SPI_BUFSIZ\">SPI_BUFSIZ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi_message_init\">spi_message_init</a>(&amp;<a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#x\">x</a>, 0, sizeof <a class=\"id\" href=\"#x\">x</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n_tx\">n_tx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a>[0].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#n_tx\">n_tx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi_message_add_tail\">spi_message_add_tail</a>(&amp;<a class=\"id\" href=\"#x\">x</a>[0], &amp;<a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n_rx\">n_rx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a>[1].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#n_rx\">n_rx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spi_message_add_tail\">spi_message_add_tail</a>(&amp;<a class=\"id\" href=\"#x\">x</a>[1], &amp;<a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ... unless someone else is using the pre-allocated buffer */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mutex_trylock\">mutex_trylock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_buf\">local_buf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#SPI_BUFSIZ\">SPI_BUFSIZ</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#local_buf\">local_buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_buf\">local_buf</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#local_buf\">local_buf</a>, <a class=\"id\" href=\"#txbuf\">txbuf</a>, <a class=\"id\" href=\"#n_tx\">n_tx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a>[0].<a class=\"id\" href=\"#tx_buf\">tx_buf</a> = <a class=\"id\" href=\"#local_buf\">local_buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a>[1].<a class=\"id\" href=\"#rx_buf\">rx_buf</a> = <a class=\"id\" href=\"#local_buf\">local_buf</a> + <a class=\"id\" href=\"#n_tx\">n_tx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do the i/o */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#spi_sync\">spi_sync</a>(<a class=\"id\" href=\"#spi\">spi</a>, &amp;<a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#rxbuf\">rxbuf</a>, <a class=\"id\" href=\"#x\">x</a>[1].<a class=\"id\" href=\"#rx_buf\">rx_buf</a>, <a class=\"id\" href=\"#n_rx\">n_rx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a>[0].<a class=\"id\" href=\"#tx_buf\">tx_buf</a> == <a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#local_buf\">local_buf</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#spi_write_then_read\">spi_write_then_read</a>);", 
"", 
"<span class=\"comment\">/*-------------------------------------------------------------------------*/</span>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#spi_init\">spi_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#SPI_BUFSIZ\">SPI_BUFSIZ</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err0\">err0</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#bus_register\">bus_register</a>(&amp;<a class=\"id\" href=\"#spi_bus_type\">spi_bus_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err1\">err1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#class_register\">class_register</a>(&amp;<a class=\"id\" href=\"#spi_master_class\">spi_master_class</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err2\">err2</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err2\">err2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_unregister\">bus_unregister</a>(&amp;<a class=\"id\" href=\"#spi_bus_type\">spi_bus_type</a>);", 
"<a class=\"id\" href=\"#err1\">err1</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#err0\">err0</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"<span class=\"comment\">/* board_info is normally registered in arch_initcall(),</span>", 
"<span class=\"comment\"> * but even essential drivers wait till later</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * REVISIT only boardinfo really needs static linking. the rest (device and</span>", 
"<span class=\"comment\"> * driver registration) _could_ be dynamically linked (modular) ... costs</span>", 
"<span class=\"comment\"> * include needing to have boardinfo data structures be much more public.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#postcore_initcall\">postcore_initcall</a>(<a class=\"id\" href=\"#spi_init\">spi_init</a>);", 
"", 
];
xr_frag_insert('l/78/57177b361450346d6767feb319723bfead078c.xr', __xr_tmp);
