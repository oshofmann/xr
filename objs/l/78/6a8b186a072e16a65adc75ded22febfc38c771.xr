var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * include/linux/phy.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Framework and drivers for configuring and reading different PHYs</span>", 
"<span class=\"comment\"> * Based on code in sungem_phy.c and gianfar_phy.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Andy Fleming</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2004 Freescale Semiconductor, Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute  it and/or modify it</span>", 
"<span class=\"comment\"> * under  the terms of  the GNU General  Public License as published by the</span>", 
"<span class=\"comment\"> * Free Software Foundation;  either version 2 of the  License, or (at your</span>", 
"<span class=\"comment\"> * option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__PHY_H\">__PHY_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__PHY_H\">__PHY_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ethtool\">ethtool</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mii\">mii</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mod_devicetable\">mod_devicetable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_BASIC_FEATURES\">PHY_BASIC_FEATURES</a><span class=\"ts\"/>(<a class=\"id\" href=\"#SUPPORTED_10baseT_Half\">SUPPORTED_10baseT_Half</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SUPPORTED_10baseT_Full\">SUPPORTED_10baseT_Full</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SUPPORTED_100baseT_Half\">SUPPORTED_100baseT_Half</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SUPPORTED_100baseT_Full\">SUPPORTED_100baseT_Full</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SUPPORTED_Autoneg\">SUPPORTED_Autoneg</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SUPPORTED_TP\">SUPPORTED_TP</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SUPPORTED_MII\">SUPPORTED_MII</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_GBIT_FEATURES\">PHY_GBIT_FEATURES</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PHY_BASIC_FEATURES\">PHY_BASIC_FEATURES</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SUPPORTED_1000baseT_Half\">SUPPORTED_1000baseT_Half</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SUPPORTED_1000baseT_Full\">SUPPORTED_1000baseT_Full</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set phydev-&gt;irq to PHY_POLL if interrupts are not supported,</span>", 
"<span class=\"comment\"> * or not desired for this PHY.  Set to PHY_IGNORE_INTERRUPT if</span>", 
"<span class=\"comment\"> * the attached driver handles the interrupt</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_POLL\">PHY_POLL</a><span class=\"ts\"/><span class=\"ts\"/>-1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_IGNORE_INTERRUPT\">PHY_IGNORE_INTERRUPT</a><span class=\"ts\"/>-2", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_HAS_INTERRUPT\">PHY_HAS_INTERRUPT</a><span class=\"ts\"/>0x00000001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_HAS_MAGICANEG\">PHY_HAS_MAGICANEG</a><span class=\"ts\"/>0x00000002", 
"", 
"<span class=\"comment\">/* Interface Mode definitions */</span>", 
"typedef enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_INTERFACE_MODE_MII\">PHY_INTERFACE_MODE_MII</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_INTERFACE_MODE_GMII\">PHY_INTERFACE_MODE_GMII</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_INTERFACE_MODE_SGMII\">PHY_INTERFACE_MODE_SGMII</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_INTERFACE_MODE_TBI\">PHY_INTERFACE_MODE_TBI</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_INTERFACE_MODE_RMII\">PHY_INTERFACE_MODE_RMII</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_INTERFACE_MODE_RGMII\">PHY_INTERFACE_MODE_RGMII</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_INTERFACE_MODE_RGMII_ID\">PHY_INTERFACE_MODE_RGMII_ID</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_INTERFACE_MODE_RGMII_RXID\">PHY_INTERFACE_MODE_RGMII_RXID</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_INTERFACE_MODE_RGMII_TXID\">PHY_INTERFACE_MODE_RGMII_TXID</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_INTERFACE_MODE_RTBI\">PHY_INTERFACE_MODE_RTBI</a>", 
"} <a class=\"id\" href=\"#phy_interface_t\">phy_interface_t</a>;", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_INIT_TIMEOUT\">PHY_INIT_TIMEOUT</a><span class=\"ts\"/>100000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_STATE_TIME\">PHY_STATE_TIME</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_FORCE_TIMEOUT\">PHY_FORCE_TIMEOUT</a><span class=\"ts\"/>10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_AN_TIMEOUT\">PHY_AN_TIMEOUT</a><span class=\"ts\"/><span class=\"ts\"/>10", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_MAX_ADDR\">PHY_MAX_ADDR</a><span class=\"ts\"/>32", 
"", 
"<span class=\"comment\">/* Used when trying to connect to a specific phy (mii bus id:phy device id) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_ID_FMT\">PHY_ID_FMT</a> \"%s:%02x\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Need to be a little smaller than phydev-&gt;dev.bus_id to leave room</span>", 
"<span class=\"comment\"> * for the \":%02x\"</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MII_BUS_ID_SIZE\">MII_BUS_ID_SIZE</a><span class=\"ts\"/>(20 - 3)", 
"", 
"<span class=\"comment\">/* Or MII_ADDR_C45 into regnum for read/write on mii_bus to enable the 21 bit</span>", 
"<span class=\"comment\">   IEEE 802.3ae clause 45 addressing mode used by 10GIGE phy chips. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MII_ADDR_C45\">MII_ADDR_C45</a> (1<<30)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The Bus class for PHYs.  Devices which provide access to</span>", 
"<span class=\"comment\"> * PHYs should register using this structure</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#id\">id</a>[<a class=\"id\" href=\"#MII_BUS_ID_SIZE\">MII_BUS_ID_SIZE</a>];", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#priv\">priv</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#read\">read</a>)(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#phy_id\">phy_id</a>, int <a class=\"id\" href=\"#regnum\">regnum</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#write\">write</a>)(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#phy_id\">phy_id</a>, int <a class=\"id\" href=\"#regnum\">regnum</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#reset\">reset</a>)(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A lock to ensure that only one thing can read/write</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the MDIO bus at a time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#mdio_lock\">mdio_lock</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>enum {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MDIOBUS_ALLOCATED\">MDIOBUS_ALLOCATED</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MDIOBUS_REGISTERED\">MDIOBUS_REGISTERED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MDIOBUS_UNREGISTERED\">MDIOBUS_UNREGISTERED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MDIOBUS_RELEASED\">MDIOBUS_RELEASED</a>,", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* list of all PHYs on bus */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phy_map\">phy_map</a>[<a class=\"id\" href=\"#PHY_MAX_ADDR\">PHY_MAX_ADDR</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Phy addresses to be ignored when probing */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_mask\">phy_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Pointer to an array of interrupts, each PHY's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupt at the index matching its address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#irq\">irq</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_mii_bus\">to_mii_bus</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"", 
"struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#mdiobus_alloc\">mdiobus_alloc</a>(void);", 
"int <a class=\"id\" href=\"#mdiobus_register\">mdiobus_register</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>);", 
"void <a class=\"id\" href=\"#mdiobus_unregister\">mdiobus_unregister</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>);", 
"void <a class=\"id\" href=\"#mdiobus_free\">mdiobus_free</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>);", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#mdiobus_scan\">mdiobus_scan</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#addr\">addr</a>);", 
"int <a class=\"id\" href=\"#mdiobus_read\">mdiobus_read</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#regnum\">regnum</a>);", 
"int <a class=\"id\" href=\"#mdiobus_write\">mdiobus_write</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#regnum\">regnum</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_INTERRUPT_DISABLED\">PHY_INTERRUPT_DISABLED</a><span class=\"ts\"/>0x0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_INTERRUPT_ENABLED\">PHY_INTERRUPT_ENABLED</a><span class=\"ts\"/>0x80000000", 
"", 
"<span class=\"comment\">/* PHY state machine states:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DOWN: PHY device and driver are not ready for anything.  probe</span>", 
"<span class=\"comment\"> * should be called if and only if the PHY is in this state,</span>", 
"<span class=\"comment\"> * given that the PHY device exists.</span>", 
"<span class=\"comment\"> * - PHY driver probe function will, depending on the PHY, set</span>", 
"<span class=\"comment\"> * the state to STARTING or READY</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * STARTING:  PHY device is coming up, and the ethernet driver is</span>", 
"<span class=\"comment\"> * not ready.  PHY drivers may set this in the probe function.</span>", 
"<span class=\"comment\"> * If they do, they are responsible for making sure the state is</span>", 
"<span class=\"comment\"> * eventually set to indicate whether the PHY is UP or READY,</span>", 
"<span class=\"comment\"> * depending on the state when the PHY is done starting up.</span>", 
"<span class=\"comment\"> * - PHY driver will set the state to READY</span>", 
"<span class=\"comment\"> * - start will set the state to PENDING</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * READY: PHY is ready to send and receive packets, but the</span>", 
"<span class=\"comment\"> * controller is not.  By default, PHYs which do not implement</span>", 
"<span class=\"comment\"> * probe will be set to this state by phy_probe().  If the PHY</span>", 
"<span class=\"comment\"> * driver knows the PHY is ready, and the PHY state is STARTING,</span>", 
"<span class=\"comment\"> * then it sets this STATE.</span>", 
"<span class=\"comment\"> * - start will set the state to UP</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PENDING: PHY device is coming up, but the ethernet driver is</span>", 
"<span class=\"comment\"> * ready.  phy_start will set this state if the PHY state is</span>", 
"<span class=\"comment\"> * STARTING.</span>", 
"<span class=\"comment\"> * - PHY driver will set the state to UP when the PHY is ready</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * UP: The PHY and attached device are ready to do work.</span>", 
"<span class=\"comment\"> * Interrupts should be started here.</span>", 
"<span class=\"comment\"> * - timer moves to AN</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * AN: The PHY is currently negotiating the link state.  Link is</span>", 
"<span class=\"comment\"> * therefore down for now.  phy_timer will set this state when it</span>", 
"<span class=\"comment\"> * detects the state is UP.  config_aneg will set this state</span>", 
"<span class=\"comment\"> * whenever called with phydev-&gt;autoneg set to AUTONEG_ENABLE.</span>", 
"<span class=\"comment\"> * - If autonegotiation finishes, but there's no link, it sets</span>", 
"<span class=\"comment\"> *   the state to NOLINK.</span>", 
"<span class=\"comment\"> * - If aneg finishes with link, it sets the state to RUNNING,</span>", 
"<span class=\"comment\"> *   and calls adjust_link</span>", 
"<span class=\"comment\"> * - If autonegotiation did not finish after an arbitrary amount</span>", 
"<span class=\"comment\"> *   of time, autonegotiation should be tried again if the PHY</span>", 
"<span class=\"comment\"> *   supports \"magic\" autonegotiation (back to AN)</span>", 
"<span class=\"comment\"> * - If it didn't finish, and no magic_aneg, move to FORCING.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOLINK: PHY is up, but not currently plugged in.</span>", 
"<span class=\"comment\"> * - If the timer notes that the link comes back, we move to RUNNING</span>", 
"<span class=\"comment\"> * - config_aneg moves to AN</span>", 
"<span class=\"comment\"> * - phy_stop moves to HALTED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FORCING: PHY is being configured with forced settings</span>", 
"<span class=\"comment\"> * - if link is up, move to RUNNING</span>", 
"<span class=\"comment\"> * - If link is down, we drop to the next highest setting, and</span>", 
"<span class=\"comment\"> *   retry (FORCING) after a timeout</span>", 
"<span class=\"comment\"> * - phy_stop moves to HALTED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RUNNING: PHY is currently up, running, and possibly sending</span>", 
"<span class=\"comment\"> * and/or receiving packets</span>", 
"<span class=\"comment\"> * - timer will set CHANGELINK if we're polling (this ensures the</span>", 
"<span class=\"comment\"> *   link state is polled every other cycle of this state machine,</span>", 
"<span class=\"comment\"> *   which makes it every other second)</span>", 
"<span class=\"comment\"> * - irq will set CHANGELINK</span>", 
"<span class=\"comment\"> * - config_aneg will set AN</span>", 
"<span class=\"comment\"> * - phy_stop moves to HALTED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CHANGELINK: PHY experienced a change in link state</span>", 
"<span class=\"comment\"> * - timer moves to RUNNING if link</span>", 
"<span class=\"comment\"> * - timer moves to NOLINK if the link is down</span>", 
"<span class=\"comment\"> * - phy_stop moves to HALTED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * HALTED: PHY is up, but no polling or interrupts are done. Or</span>", 
"<span class=\"comment\"> * PHY is in an error state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - phy_start moves to RESUMING</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RESUMING: PHY was halted, but now wants to run again.</span>", 
"<span class=\"comment\"> * - If we are forcing, or aneg is done, timer moves to RUNNING</span>", 
"<span class=\"comment\"> * - If aneg is not done, timer moves to AN</span>", 
"<span class=\"comment\"> * - phy_stop moves to HALTED</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#phy_state\">phy_state</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_DOWN\">PHY_DOWN</a>=0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_STARTING\">PHY_STARTING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_READY\">PHY_READY</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_PENDING\">PHY_PENDING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_UP\">PHY_UP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_AN\">PHY_AN</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_RUNNING\">PHY_RUNNING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_NOLINK\">PHY_NOLINK</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_FORCING\">PHY_FORCING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_CHANGELINK\">PHY_CHANGELINK</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_HALTED\">PHY_HALTED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PHY_RESUMING\">PHY_RESUMING</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>;", 
"", 
"<span class=\"comment\">/* phy_device: An instance of a PHY</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * drv: Pointer to the driver for this PHY instance</span>", 
"<span class=\"comment\"> * bus: Pointer to the bus this PHY is on</span>", 
"<span class=\"comment\"> * dev: driver model device structure for this PHY</span>", 
"<span class=\"comment\"> * phy_id: UID for this device found during discovery</span>", 
"<span class=\"comment\"> * state: state of the PHY for management purposes</span>", 
"<span class=\"comment\"> * dev_flags: Device-specific flags used by the PHY driver.</span>", 
"<span class=\"comment\"> * addr: Bus address of PHY</span>", 
"<span class=\"comment\"> * link_timeout: The number of timer firings to wait before the</span>", 
"<span class=\"comment\"> * giving up on the current attempt at acquiring a link</span>", 
"<span class=\"comment\"> * irq: IRQ number of the PHY's interrupt (-1 if none)</span>", 
"<span class=\"comment\"> * phy_timer: The timer for handling the state machine</span>", 
"<span class=\"comment\"> * phy_queue: A work_queue for the interrupt</span>", 
"<span class=\"comment\"> * attached_dev: The attached enet driver's device instance ptr</span>", 
"<span class=\"comment\"> * adjust_link: Callback for the enet controller to respond to</span>", 
"<span class=\"comment\"> * changes in the link state.</span>", 
"<span class=\"comment\"> * adjust_state: Callback for the enet driver to respond to</span>", 
"<span class=\"comment\"> * changes in the state machine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * speed, duplex, pause, supported, advertising, and</span>", 
"<span class=\"comment\"> * autoneg are used like in mii_if_info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * interrupts currently only supports enabled or disabled,</span>", 
"<span class=\"comment\"> * but could be changed in the future to support enabling</span>", 
"<span class=\"comment\"> * and disabling specific interrupts</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Contains some infrastructure for polling and interrupt</span>", 
"<span class=\"comment\"> * handling, as well as handling shifts in PHY hardware state</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Information about the PHY type */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* And management functions */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_driver\">phy_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_id\">phy_id</a>;", 
"", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#phy_state\">phy_state</a> <a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#dev_flags\">dev_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_interface_t\">phy_interface_t</a> <a class=\"id\" href=\"#interface\">interface</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Bus address of the PHY (0-32) */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * forced speed &amp; duplex (no autoneg)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * partner speed &amp; duplex &amp; pause (autoneg)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#speed\">speed</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#duplex\">duplex</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pause\">pause</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#asym_pause\">asym_pause</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The most recently read link state */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Enabled Interrupts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#interrupts\">interrupts</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Union of PHY and Attached devices' supported modes */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* See mii.h for more info */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#supported\">supported</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#advertising\">advertising</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#autoneg\">autoneg</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#link_timeout\">link_timeout</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Interrupt number for this PHY</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -1 means no interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#irq\">irq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* private data pointer */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* For use by PHYs to maintain extra state */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#priv\">priv</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Interrupt and Polling infrastructure */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#phy_queue\">phy_queue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#delayed_work\">delayed_work</a> <a class=\"id\" href=\"#state_queue\">state_queue</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#irq_disable\">irq_disable</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#attached_dev\">attached_dev</a>;", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#adjust_link\">adjust_link</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#adjust_state\">adjust_state</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_phy_device\">to_phy_device</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#phy_device\">phy_device</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"", 
"<span class=\"comment\">/* struct phy_driver: Driver structure for a particular PHY type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * phy_id: The result of reading the UID registers of this PHY</span>", 
"<span class=\"comment\"> *   type, and ANDing them with the phy_id_mask.  This driver</span>", 
"<span class=\"comment\"> *   only works for PHYs with IDs which match this field</span>", 
"<span class=\"comment\"> * name: The friendly name of this PHY type</span>", 
"<span class=\"comment\"> * phy_id_mask: Defines the important bits of the phy_id</span>", 
"<span class=\"comment\"> * features: A list of features (speed, duplex, etc) supported</span>", 
"<span class=\"comment\"> *   by this PHY</span>", 
"<span class=\"comment\"> * flags: A bitfield defining certain other features this PHY</span>", 
"<span class=\"comment\"> *   supports (like interrupts)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The drivers must implement config_aneg and read_status.  All</span>", 
"<span class=\"comment\"> * other functions are optional. Note that none of these</span>", 
"<span class=\"comment\"> * functions should be called from interrupt time.  The goal is</span>", 
"<span class=\"comment\"> * for the bus read/write functions to be able to block when the</span>", 
"<span class=\"comment\"> * bus transaction is happening, and be freed up by an interrupt</span>", 
"<span class=\"comment\"> * (The MPC85xx has this ability, though it is not currently</span>", 
"<span class=\"comment\"> * supported in the driver).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#phy_driver\">phy_driver</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_id\">phy_id</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#phy_id_mask\">phy_id_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#features\">features</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Called to initialize the PHY,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * including after a reset</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#config_init\">config_init</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Called during discovery.  Used to set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up device-specific structures, if any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#probe\">probe</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* PHY Power Management */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#suspend\">suspend</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#resume\">resume</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Configures the advertisement and resets</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * autonegotiation if phydev-&gt;autoneg is on,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * forces the speed to the current settings in phydev</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if phydev-&gt;autoneg is off</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#config_aneg\">config_aneg</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Determines the negotiated speed and duplex */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#read_status\">read_status</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clears any pending interrupts */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#ack_interrupt\">ack_interrupt</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Enables or disables interrupts */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#config_intr\">config_intr</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Checks if the PHY generated an interrupt.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For multi-PHY devices with shared PHY interrupt pin</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#did_interrupt\">did_interrupt</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clears up any memory if needed */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#remove\">remove</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Handles SIOCSHWTSTAMP ioctl for hardware time stamping. */</span>", 
"<span class=\"ts\"/>int  (*<a class=\"id\" href=\"#hwtstamp\">hwtstamp</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>, struct <a class=\"id\" href=\"#ifreq\">ifreq</a> *<a class=\"id\" href=\"#ifr\">ifr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Requests a Rx timestamp for 'skb'. If the skb is accepted,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the phy driver promises to deliver it using netif_rx() as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * soon as a timestamp becomes available. One of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PTP_CLASS_ values is passed in 'type'. The function must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return true if the skb is accepted for delivery.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#rxtstamp\">rxtstamp</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Requests a Tx timestamp for 'skb'. The phy driver promises</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to deliver it to the socket's error queue as soon as a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timestamp becomes available. One of the PTP_CLASS_ values</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is passed in 'type'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#txtstamp\">txtstamp</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> <a class=\"id\" href=\"#driver\">driver</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_phy_driver\">to_phy_driver</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#phy_driver\">phy_driver</a>, <a class=\"id\" href=\"#driver\">driver</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_ANY_ID\">PHY_ANY_ID</a> \"MATCH ANY PHY\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PHY_ANY_UID\">PHY_ANY_UID</a> 0xffffffff", 
"", 
"<span class=\"comment\">/* A Structure for boards to register fixups with the PHY Lib */</span>", 
"struct <a class=\"id\" href=\"#phy_fixup\">phy_fixup</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#bus_id\">bus_id</a>[20];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_uid\">phy_uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_uid_mask\">phy_uid_mask</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#run\">run</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_read - Convenience function for reading a given PHY register</span>", 
"<span class=\"comment\"> * @phydev: the phy_device struct</span>", 
"<span class=\"comment\"> * @regnum: register number to read</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: MUST NOT be called from interrupt context,</span>", 
"<span class=\"comment\"> * because the bus read/write functions may wait for an interrupt</span>", 
"<span class=\"comment\"> * to conclude the operation.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#phy_read\">phy_read</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#regnum\">regnum</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mdiobus_read\">mdiobus_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#regnum\">regnum</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_write - Convenience function for writing a given PHY register</span>", 
"<span class=\"comment\"> * @phydev: the phy_device struct</span>", 
"<span class=\"comment\"> * @regnum: register number to write</span>", 
"<span class=\"comment\"> * @val: value to write to @regnum</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: MUST NOT be called from interrupt context,</span>", 
"<span class=\"comment\"> * because the bus read/write functions may wait for an interrupt</span>", 
"<span class=\"comment\"> * to conclude the operation.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#phy_write\">phy_write</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#regnum\">regnum</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mdiobus_write\">mdiobus_write</a>(<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#regnum\">regnum</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#get_phy_id\">get_phy_id</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#phy_id\">phy_id</a>);", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a>* <a class=\"id\" href=\"#get_phy_device\">get_phy_device</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#addr\">addr</a>);", 
"int <a class=\"id\" href=\"#phy_device_register\">phy_device_register</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phy\">phy</a>);", 
"int <a class=\"id\" href=\"#phy_clear_interrupt\">phy_clear_interrupt</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#phy_config_interrupt\">phy_config_interrupt</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#interrupts\">interrupts</a>);", 
"int <a class=\"id\" href=\"#phy_init_hw\">phy_init_hw</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#phy_attach_direct\">phy_attach_direct</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#phy_interface_t\">phy_interface_t</a> <a class=\"id\" href=\"#interface\">interface</a>);", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a> * <a class=\"id\" href=\"#phy_attach\">phy_attach</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#bus_id\">bus_id</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#phy_interface_t\">phy_interface_t</a> <a class=\"id\" href=\"#interface\">interface</a>);", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phy_find_first\">phy_find_first</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>);", 
"int <a class=\"id\" href=\"#phy_connect_direct\">phy_connect_direct</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#handler\">handler</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *), <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phy_interface_t\">phy_interface_t</a> <a class=\"id\" href=\"#interface\">interface</a>);", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a> * <a class=\"id\" href=\"#phy_connect\">phy_connect</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#bus_id\">bus_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#handler\">handler</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *), <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phy_interface_t\">phy_interface_t</a> <a class=\"id\" href=\"#interface\">interface</a>);", 
"void <a class=\"id\" href=\"#phy_disconnect\">phy_disconnect</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"void <a class=\"id\" href=\"#phy_detach\">phy_detach</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"void <a class=\"id\" href=\"#phy_start\">phy_start</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"void <a class=\"id\" href=\"#phy_stop\">phy_stop</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#phy_start_aneg\">phy_start_aneg</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"void <a class=\"id\" href=\"#phy_sanitize_settings\">phy_sanitize_settings</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#phy_stop_interrupts\">phy_stop_interrupts</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#phy_enable_interrupts\">phy_enable_interrupts</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#phy_disable_interrupts\">phy_disable_interrupts</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#phy_read_status\">phy_read_status</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>) {", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#genphy_config_advert\">genphy_config_advert</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#genphy_setup_forced\">genphy_setup_forced</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#genphy_restart_aneg\">genphy_restart_aneg</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#genphy_config_aneg\">genphy_config_aneg</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#genphy_update_link\">genphy_update_link</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#genphy_read_status\">genphy_read_status</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#genphy_suspend\">genphy_suspend</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#genphy_resume\">genphy_resume</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"void <a class=\"id\" href=\"#phy_driver_unregister\">phy_driver_unregister</a>(struct <a class=\"id\" href=\"#phy_driver\">phy_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>);", 
"int <a class=\"id\" href=\"#phy_driver_register\">phy_driver_register</a>(struct <a class=\"id\" href=\"#phy_driver\">phy_driver</a> *<a class=\"id\" href=\"#new_driver\">new_driver</a>);", 
"void <a class=\"id\" href=\"#phy_prepare_link\">phy_prepare_link</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#adjust_link\">adjust_link</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *));", 
"void <a class=\"id\" href=\"#phy_state_machine\">phy_state_machine</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"void <a class=\"id\" href=\"#phy_start_machine\">phy_start_machine</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#handler\">handler</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *));", 
"void <a class=\"id\" href=\"#phy_stop_machine\">phy_stop_machine</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"int <a class=\"id\" href=\"#phy_ethtool_sset\">phy_ethtool_sset</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>, struct <a class=\"id\" href=\"#ethtool_cmd\">ethtool_cmd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"int <a class=\"id\" href=\"#phy_ethtool_gset\">phy_ethtool_gset</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>, struct <a class=\"id\" href=\"#ethtool_cmd\">ethtool_cmd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"int <a class=\"id\" href=\"#phy_mii_ioctl\">phy_mii_ioctl</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ifreq\">ifreq</a> *<a class=\"id\" href=\"#ifr\">ifr</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"int <a class=\"id\" href=\"#phy_start_interrupts\">phy_start_interrupts</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"void <a class=\"id\" href=\"#phy_print_status\">phy_print_status</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a>* <a class=\"id\" href=\"#phy_device_create\">phy_device_create</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#phy_id\">phy_id</a>);", 
"void <a class=\"id\" href=\"#phy_device_free\">phy_device_free</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"int <a class=\"id\" href=\"#phy_register_fixup\">phy_register_fixup</a>(const char *<a class=\"id\" href=\"#bus_id\">bus_id</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_uid\">phy_uid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_uid_mask\">phy_uid_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#run\">run</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *));", 
"int <a class=\"id\" href=\"#phy_register_fixup_for_id\">phy_register_fixup_for_id</a>(const char *<a class=\"id\" href=\"#bus_id\">bus_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#run\">run</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *));", 
"int <a class=\"id\" href=\"#phy_register_fixup_for_uid\">phy_register_fixup_for_uid</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_uid\">phy_uid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_uid_mask\">phy_uid_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#run\">run</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *));", 
"int <a class=\"id\" href=\"#phy_scan_fixups\">phy_scan_fixups</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#mdio_bus_init\">mdio_bus_init</a>(void);", 
"void <a class=\"id\" href=\"#mdio_bus_exit\">mdio_bus_exit</a>(void);", 
"", 
"extern struct <a class=\"id\" href=\"#bus_type\">bus_type</a> <a class=\"id\" href=\"#mdio_bus_type\">mdio_bus_type</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __PHY_H */</span>", 
];
xr_frag_insert('l/78/6a8b186a072e16a65adc75ded22febfc38c771.xr', __xr_tmp);
