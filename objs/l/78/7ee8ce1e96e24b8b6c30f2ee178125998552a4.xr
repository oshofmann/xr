var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#plen\">plen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffers\">buffers</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We didn't complete this iov, stop here since it probably</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * means we have to move some of this into a pipe to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be able to continue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't continue if we mapped fewer pages than we asked for,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or if we mapped the max number of pages that we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * room for.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; <a class=\"id\" href=\"#npages\">npages</a> || <a class=\"id\" href=\"#buffers\">buffers</a> == <a class=\"id\" href=\"#pipe_buffers\">pipe_buffers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffers\">buffers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#buffers\">buffers</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pipe_to_user\">pipe_to_user</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#confirm\">confirm</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See if we can use the atomic maps, by prefaulting in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages and doing an atomic copy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fault_in_pages_writeable\">fault_in_pages_writeable</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#userptr\">userptr</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#map\">map</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__copy_to_user_inatomic\">__copy_to_user_inatomic</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#userptr\">userptr</a>, <a class=\"id\" href=\"#src\">src</a> + <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#unmap\">unmap</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No dice, use slow non-atomic map and copy</span>", 
"<span class=\"comment\"> <span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#map\">map</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#userptr\">userptr</a>, <a class=\"id\" href=\"#src\">src</a> + <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#unmap\">unmap</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#src\">src</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#userptr\">userptr</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For lack of a better implementation, implement vmsplice() to userspace</span>", 
"<span class=\"comment\"> * as a simple copy of the pipes pages to the user iov.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#vmsplice_to_user\">vmsplice_to_user</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> <a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#pipe_info\">pipe_info</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock\">pipe_lock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_segs\">nr_segs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get user address base and length for this iovec.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#base\">base</a>, &amp;<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#len\">len</a>, &amp;<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Sanity check this iovec. 0 read succeeds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#base\">base</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#len\">len</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>.<a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>.<a class=\"id\" href=\"#total_len\">total_len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#userptr\">userptr</a> = <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>.<a class=\"id\" href=\"#pos\">pos</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#__splice_from_pipe\">__splice_from_pipe</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#pipe_to_user\">pipe_to_user</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_segs\">nr_segs</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vmsplice splices a user address range into a pipe. It can be thought of</span>", 
"<span class=\"comment\"> * as splice-from-memory, where the regular splice is splice-from-file (or</span>", 
"<span class=\"comment\"> * to file). In both cases the output is a pipe, naturally.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#vmsplice_to_pipe\">vmsplice_to_pipe</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#partial_page\">partial_page</a> <a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#splice_pipe_desc\">splice_pipe_desc</a> <a class=\"id\" href=\"#spd\">spd</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#partial\">partial</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#user_page_pipe_buf_ops\">user_page_pipe_buf_ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#spd_release\">spd_release</a> = <a class=\"id\" href=\"#spd_release_page\">spd_release_page</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#pipe_info\">pipe_info</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#splice_grow_spd\">splice_grow_spd</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#get_iovec_page_array\">get_iovec_page_array</a>(<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#partial\">partial</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPLICE_F_GIFT\">SPLICE_F_GIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#splice_to_pipe\">splice_to_pipe</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#splice_shrink_spd\">splice_shrink_spd</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note that vmsplice only really supports true splicing _from_ user memory</span>", 
"<span class=\"comment\"> * to a pipe, not the other way around. Splicing from user memory is a simple</span>", 
"<span class=\"comment\"> * operation that can be supported without any funky alignment restrictions</span>", 
"<span class=\"comment\"> * or nasty vm tricks. We simply map in the user memory and fill them into</span>", 
"<span class=\"comment\"> * a pipe. The reverse isn't quite as easy, though. There are two possible</span>", 
"<span class=\"comment\"> * solutions for that:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- memcpy() the data internally, at which point we might as well just</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  do a regular read() on the buffer anyway.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Lots of nasty vm tricks, that are neither fast nor flexible (it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  has restriction limitations on both ends of the pipe).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Currently we punt and implement it as a normal copy, see pipe_to_user().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE4\">SYSCALL_DEFINE4</a>(<a class=\"id\" href=\"#vmsplice\">vmsplice</a>, int, <a class=\"id\" href=\"#fd\">fd</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, unsigned int, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fput\">fput</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#nr_segs\">nr_segs</a> &gt; <a class=\"id\" href=\"#UIO_MAXIOV\">UIO_MAXIOV</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#nr_segs\">nr_segs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget_light\">fget_light</a>(<a class=\"id\" href=\"#fd\">fd</a>, &amp;<a class=\"id\" href=\"#fput\">fput</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#vmsplice_to_pipe\">vmsplice_to_pipe</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#vmsplice_to_user\">vmsplice_to_user</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#fput\">fput</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE6\">SYSCALL_DEFINE6</a>(<a class=\"id\" href=\"#splice\">splice</a>, int, <a class=\"id\" href=\"#fd_in\">fd_in</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#off_in\">off_in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int, <a class=\"id\" href=\"#fd_out\">fd_out</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#off_out\">off_out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#len\">len</a>, unsigned int, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#in\">in</a>, *<a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fput_in\">fput_in</a>, <a class=\"id\" href=\"#fput_out\">fput_out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in\">in</a> = <a class=\"id\" href=\"#fget_light\">fget_light</a>(<a class=\"id\" href=\"#fd_in\">fd_in</a>, &amp;<a class=\"id\" href=\"#fput_in\">fput_in</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in\">in</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#fget_light\">fget_light</a>(<a class=\"id\" href=\"#fd_out\">fd_out</a>, &amp;<a class=\"id\" href=\"#fput_out\">fput_out</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_splice\">do_splice</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#off_in\">off_in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#off_out\">off_out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#fput_out\">fput_out</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#fput_in\">fput_in</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Make sure there's data to read. Wait for input if we can, otherwise</span>", 
"<span class=\"comment\"> * return an appropriate error.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ipipe_prep\">ipipe_prep</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check -&gt;nrbufs without the inode lock first. This function</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is speculative anyways, so missing one is ok.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock\">pipe_lock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#writers\">writers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#waiting_writers\">waiting_writers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPLICE_F_NONBLOCK\">SPLICE_F_NONBLOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_wait\">pipe_wait</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Make sure there's writeable room. Wait for room if we can, otherwise</span>", 
"<span class=\"comment\"> * return an appropriate error.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#opipe_prep\">opipe_prep</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check -&gt;nrbufs without the inode lock first. This function</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is speculative anyways, so missing one is ok.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> &lt; <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock\">pipe_lock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> >= <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#readers\">readers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGPIPE\">SIGPIPE</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPIPE\">EPIPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPLICE_F_NONBLOCK\">SPLICE_F_NONBLOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#waiting_writers\">waiting_writers</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_wait\">pipe_wait</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#waiting_writers\">waiting_writers</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Splice contents of ipipe to opipe.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#splice_pipe_to_pipe\">splice_pipe_to_pipe</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#ipipe\">ipipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#opipe\">opipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#ibuf\">ibuf</a>, *<a class=\"id\" href=\"#obuf\">obuf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#nbuf\">nbuf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#input_wakeup\">input_wakeup</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ipipe_prep\">ipipe_prep</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#opipe_prep\">opipe_prep</a>(<a class=\"id\" href=\"#opipe\">opipe</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Potential ABBA deadlock, work around it by ordering lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * grabbing by pipe info address. Otherwise two different processes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could deadlock (one doing tee from A -&gt; B, the other from B -&gt; A).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_double_lock\">pipe_double_lock</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>, <a class=\"id\" href=\"#opipe\">opipe</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#readers\">readers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGPIPE\">SIGPIPE</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPIPE\">EPIPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> && !<a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#writers\">writers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Cannot make any progress, because either the input</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pipe is empty or the output pipe is full.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> || <a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> >= <a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Already processed some buffers, break */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPLICE_F_NONBLOCK\">SPLICE_F_NONBLOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We raced with another reader/writer and haven't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * managed to process any buffers.  A zero return</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * value means EOF, so retry instead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#opipe\">opipe</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ibuf\">ibuf</a> = <a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> + <a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbuf\">nbuf</a> = (<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> + <a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>) &amp; (<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obuf\">obuf</a> = <a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> + <a class=\"id\" href=\"#nbuf\">nbuf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#ibuf\">ibuf</a>-><a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Simply move the whole buffer from ipipe to opipe</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#obuf\">obuf</a> = *<a class=\"id\" href=\"#ibuf\">ibuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ibuf\">ibuf</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> = (<a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> + 1) &amp; (<a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_wakeup\">input_wakeup</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Get a reference to this pipe buffer,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so we can copy the contents over.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ibuf\">ibuf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>, <a class=\"id\" href=\"#ibuf\">ibuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#obuf\">obuf</a> = *<a class=\"id\" href=\"#ibuf\">ibuf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Don't inherit the gift flag, we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * prevent multiple steals of this page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obuf\">obuf</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PIPE_BUF_FLAG_GIFT\">PIPE_BUF_FLAG_GIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obuf\">obuf</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ibuf\">ibuf</a>-><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#obuf\">obuf</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ibuf\">ibuf</a>-><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#obuf\">obuf</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#obuf\">obuf</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#obuf\">obuf</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#opipe\">opipe</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we put data in the output pipe, wakeup any potential readers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#wait\">wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#fasync_readers\">fasync_readers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#input_wakeup\">input_wakeup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wakeup_pipe_writers\">wakeup_pipe_writers</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Link contents of ipipe to opipe.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#link_pipe\">link_pipe</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#ipipe\">ipipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#opipe\">opipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#ibuf\">ibuf</a>, *<a class=\"id\" href=\"#obuf\">obuf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#nbuf\">nbuf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Potential ABBA deadlock, work around it by ordering lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * grabbing by pipe info address. Otherwise two different processes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could deadlock (one doing tee from A -&gt; B, the other from B -&gt; A).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_double_lock\">pipe_double_lock</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>, <a class=\"id\" href=\"#opipe\">opipe</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#readers\">readers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGPIPE\">SIGPIPE</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPIPE\">EPIPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we have iterated all input buffers or ran out of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * output room, break.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> || <a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> >= <a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ibuf\">ibuf</a> = <a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> + ((<a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> + <a class=\"id\" href=\"#i\">i</a>) &amp; (<a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>-1));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbuf\">nbuf</a> = (<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> + <a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>) &amp; (<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> - 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get a reference to this pipe buffer,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so we can copy the contents over.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ibuf\">ibuf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>, <a class=\"id\" href=\"#ibuf\">ibuf</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obuf\">obuf</a> = <a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> + <a class=\"id\" href=\"#nbuf\">nbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#obuf\">obuf</a> = *<a class=\"id\" href=\"#ibuf\">ibuf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't inherit the gift flag, we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * prevent multiple steals of this page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obuf\">obuf</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PIPE_BUF_FLAG_GIFT\">PIPE_BUF_FLAG_GIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#obuf\">obuf</a>-><a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obuf\">obuf</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#obuf\">obuf</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#obuf\">obuf</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return EAGAIN if we have the potential of some data in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * future, otherwise just return 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#ipipe\">ipipe</a>-><a class=\"id\" href=\"#waiting_writers\">waiting_writers</a> && (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPLICE_F_NONBLOCK\">SPLICE_F_NONBLOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#opipe\">opipe</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we put data in the output pipe, wakeup any potential readers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#wait\">wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#opipe\">opipe</a>-><a class=\"id\" href=\"#fasync_readers\">fasync_readers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a tee(1) implementation that works on pipes. It doesn't copy</span>", 
"<span class=\"comment\"> * any data, it simply references the 'in' pages on the 'out' pipe.</span>", 
"<span class=\"comment\"> * The 'flags' used are the SPLICE_F_* variants, currently the only</span>", 
"<span class=\"comment\"> * applicable one is SPLICE_F_NONBLOCK.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#do_tee\">do_tee</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#in\">in</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#ipipe\">ipipe</a> = <a class=\"id\" href=\"#pipe_info\">pipe_info</a>(<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#opipe\">opipe</a> = <a class=\"id\" href=\"#pipe_info\">pipe_info</a>(<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Duplicate the contents of ipipe to opipe without actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * copying the data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipipe\">ipipe</a> && <a class=\"id\" href=\"#opipe\">opipe</a> && <a class=\"id\" href=\"#ipipe\">ipipe</a> != <a class=\"id\" href=\"#opipe\">opipe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Keep going, unless we encounter an error. The ipipe/opipe</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ordering doesn't really matter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ipipe_prep\">ipipe_prep</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#opipe_prep\">opipe_prep</a>(<a class=\"id\" href=\"#opipe\">opipe</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#link_pipe\">link_pipe</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>, <a class=\"id\" href=\"#opipe\">opipe</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE4\">SYSCALL_DEFINE4</a>(<a class=\"id\" href=\"#tee\">tee</a>, int, <a class=\"id\" href=\"#fdin\">fdin</a>, int, <a class=\"id\" href=\"#fdout\">fdout</a>, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#len\">len</a>, unsigned int, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#in\">in</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#fput_in\">fput_in</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in\">in</a> = <a class=\"id\" href=\"#fget_light\">fget_light</a>(<a class=\"id\" href=\"#fdin\">fdin</a>, &amp;<a class=\"id\" href=\"#fput_in\">fput_in</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in\">in</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#fput_out\">fput_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#fget_light\">fget_light</a>(<a class=\"id\" href=\"#fdout\">fdout</a>, &amp;<a class=\"id\" href=\"#fput_out\">fput_out</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_tee\">do_tee</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#fput_out\">fput_out</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#fput_in\">fput_in</a>);", 
" <span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
];
xr_frag_insert('l/78/7ee8ce1e96e24b8b6c30f2ee178125998552a4.xr', __xr_tmp);
