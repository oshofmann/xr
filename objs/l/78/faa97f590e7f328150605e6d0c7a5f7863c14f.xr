var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_COMPLETION_H\">__LINUX_COMPLETION_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_COMPLETION_H\">__LINUX_COMPLETION_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * (C) Copyright 2001 Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomic wait-for-completion handler data structures.</span>", 
"<span class=\"comment\"> * See kernel/sched.c for details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct completion - structure used to maintain state for a \"completion\"</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the opaque structure used to maintain the state for a \"completion\".</span>", 
"<span class=\"comment\"> * Completions currently use a FIFO to queue threads that have to wait for</span>", 
"<span class=\"comment\"> * the \"completion\" event.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See also:  complete(), wait_for_completion() (and friends _timeout,</span>", 
"<span class=\"comment\"> * _interruptible, _interruptible_timeout, and _killable), init_completion(),</span>", 
"<span class=\"comment\"> * and macros DECLARE_COMPLETION(), DECLARE_COMPLETION_ONSTACK(), and</span>", 
"<span class=\"comment\"> * INIT_COMPLETION().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#completion\">completion</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COMPLETION_INITIALIZER\">COMPLETION_INITIALIZER</a>(<a class=\"id\" href=\"#work\">work</a>) \\", 
"<span class=\"ts\"/>{ 0, <a class=\"id\" href=\"#__WAIT_QUEUE_HEAD_INITIALIZER\">__WAIT_QUEUE_HEAD_INITIALIZER</a>((<a class=\"id\" href=\"#work\">work</a>).<a class=\"id\" href=\"#wait\">wait</a>) }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COMPLETION_INITIALIZER_ONSTACK\">COMPLETION_INITIALIZER_ONSTACK</a>(<a class=\"id\" href=\"#work\">work</a>) \\", 
"<span class=\"ts\"/>({ <a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#work\">work</a>); <a class=\"id\" href=\"#work\">work</a>; })", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * DECLARE_COMPLETION: - declare and initialize a completion structure</span>", 
"<span class=\"comment\"> * @work:  identifier for the completion structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro declares and initializes a completion structure. Generally used</span>", 
"<span class=\"comment\"> * for static declarations. You should use the _ONSTACK variant for automatic</span>", 
"<span class=\"comment\"> * variables.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_COMPLETION\">DECLARE_COMPLETION</a>(<a class=\"id\" href=\"#work\">work</a>) \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#COMPLETION_INITIALIZER\">COMPLETION_INITIALIZER</a>(<a class=\"id\" href=\"#work\">work</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lockdep needs to run a non-constant initializer for on-stack</span>", 
"<span class=\"comment\"> * completions - so we use the _ONSTACK() variant for those that</span>", 
"<span class=\"comment\"> * are on the kernel stack:</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * DECLARE_COMPLETION_ONSTACK: - declare and initialize a completion structure</span>", 
"<span class=\"comment\"> * @work:  identifier for the completion structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro declares and initializes a completion structure on the kernel</span>", 
"<span class=\"comment\"> * stack.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_COMPLETION_ONSTACK\">DECLARE_COMPLETION_ONSTACK</a>(<a class=\"id\" href=\"#work\">work</a>) \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#COMPLETION_INITIALIZER_ONSTACK\">COMPLETION_INITIALIZER_ONSTACK</a>(<a class=\"id\" href=\"#work\">work</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_COMPLETION_ONSTACK\">DECLARE_COMPLETION_ONSTACK</a>(<a class=\"id\" href=\"#work\">work</a>) <a class=\"id\" href=\"#DECLARE_COMPLETION\">DECLARE_COMPLETION</a>(<a class=\"id\" href=\"#work\">work</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * init_completion: - Initialize a dynamically allocated completion</span>", 
"<span class=\"comment\"> * @x:  completion structure that is to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This inline function will initialize a dynamically created completion</span>", 
"<span class=\"comment\"> * structure.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_completion\">init_completion</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#done\">done</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *);", 
"extern int <a class=\"id\" href=\"#wait_for_completion_interruptible\">wait_for_completion_interruptible</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>);", 
"extern int <a class=\"id\" href=\"#wait_for_completion_killable\">wait_for_completion_killable</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>);", 
"extern unsigned long <a class=\"id\" href=\"#wait_for_completion_timeout\">wait_for_completion_timeout</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"extern unsigned long <a class=\"id\" href=\"#wait_for_completion_interruptible_timeout\">wait_for_completion_interruptible_timeout</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>, unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"extern unsigned long <a class=\"id\" href=\"#wait_for_completion_killable_timeout\">wait_for_completion_killable_timeout</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>, unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#try_wait_for_completion\">try_wait_for_completion</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>);", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#completion_done\">completion_done</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#x\">x</a>);", 
"", 
"extern void <a class=\"id\" href=\"#complete\">complete</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *);", 
"extern void <a class=\"id\" href=\"#complete_all\">complete_all</a>(struct <a class=\"id\" href=\"#completion\">completion</a> *);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * INIT_COMPLETION: - reinitialize a completion structure</span>", 
"<span class=\"comment\"> * @x:  completion structure to be reinitialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro should be used to reinitialize a completion structure so it can</span>", 
"<span class=\"comment\"> * be reused. This is especially important after complete_all() is used.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_COMPLETION\">INIT_COMPLETION</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>).<a class=\"id\" href=\"#done\">done</a> = 0)", 
"", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/78/faa97f590e7f328150605e6d0c7a5f7863c14f.xr', __xr_tmp);
