var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#more\">more</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#first\">first</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> == 0 && <a class=\"id\" href=\"#last\">last</a> == <a class=\"id\" href=\"#MAX_NR_CONSOLES\">MAX_NR_CONSOLES</a> -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deflt\">deflt</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unbind_con_driver\">unbind_con_driver</a>(<a class=\"id\" href=\"#csw\">csw</a>, <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#last\">last</a>, <a class=\"id\" href=\"#deflt\">deflt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deflt\">deflt</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vt_bind\">vt_bind</a>(struct <a class=\"id\" href=\"#con_driver\">con_driver</a> *<a class=\"id\" href=\"#con\">con</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#vt_unbind\">vt_unbind</a>(struct <a class=\"id\" href=\"#con_driver\">con_driver</a> *<a class=\"id\" href=\"#con\">con</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_VT_HW_CONSOLE_BINDING */</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#store_bind\">store_bind</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#con_driver\">con_driver</a> *<a class=\"id\" href=\"#con\">con</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bind\">bind</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bind\">bind</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vt_bind\">vt_bind</a>(<a class=\"id\" href=\"#con\">con</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vt_unbind\">vt_unbind</a>(<a class=\"id\" href=\"#con\">con</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_bind\">show_bind</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#con_driver\">con_driver</a> *<a class=\"id\" href=\"#con\">con</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bind\">bind</a> = <a class=\"id\" href=\"#con_is_bound\">con_is_bound</a>(<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#con\">con</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, \"%i\\n\", <a class=\"id\" href=\"#bind\">bind</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_name\">show_name</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#con_driver\">con_driver</a> *<a class=\"id\" href=\"#con\">con</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, \"%s %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#CON_DRIVER_FLAG_MODULE\">CON_DRIVER_FLAG_MODULE</a>) ? \"(M)\" : \"(S)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#desc\">desc</a>);", 
"", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> <a class=\"id\" href=\"#device_attrs\">device_attrs</a>[] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#bind\">bind</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>, <a class=\"id\" href=\"#show_bind\">show_bind</a>, <a class=\"id\" href=\"#store_bind\">store_bind</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#show_name\">show_name</a>, <a class=\"id\" href=\"#NULL\">NULL</a>),", 
"};", 
"", 
"static int <a class=\"id\" href=\"#vtconsole_init_device\">vtconsole_init_device</a>(struct <a class=\"id\" href=\"#con_driver\">con_driver</a> *<a class=\"id\" href=\"#con\">con</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#flag\">flag</a> |= <a class=\"id\" href=\"#CON_DRIVER_FLAG_ATTR\">CON_DRIVER_FLAG_ATTR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#con\">con</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#device_attrs\">device_attrs</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#device_create_file\">device_create_file</a>(<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#device_attrs\">device_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#i\">i</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_remove_file\">device_remove_file</a>(<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#device_attrs\">device_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#flag\">flag</a> &= ~<a class=\"id\" href=\"#CON_DRIVER_FLAG_ATTR\">CON_DRIVER_FLAG_ATTR</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#vtconsole_deinit_device\">vtconsole_deinit_device</a>(struct <a class=\"id\" href=\"#con_driver\">con_driver</a> *<a class=\"id\" href=\"#con\">con</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#CON_DRIVER_FLAG_ATTR\">CON_DRIVER_FLAG_ATTR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#device_attrs\">device_attrs</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_remove_file\">device_remove_file</a>(<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#device_attrs\">device_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#flag\">flag</a> &= ~<a class=\"id\" href=\"#CON_DRIVER_FLAG_ATTR\">CON_DRIVER_FLAG_ATTR</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * con_is_bound - checks if driver is bound to the console</span>", 
"<span class=\"comment\"> * @csw: console driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS: zero if unbound, nonzero if bound</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Drivers can call this and if zero, they should release</span>", 
"<span class=\"comment\"> * all resources allocated on con_startup()</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#con_is_bound\">con_is_bound</a>(const struct <a class=\"id\" href=\"#consw\">consw</a> *<a class=\"id\" href=\"#csw\">csw</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bound\">bound</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_CONSOLES\">MAX_NR_CONSOLES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#con_driver_map\">con_driver_map</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#csw\">csw</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bound\">bound</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bound\">bound</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#con_is_bound\">con_is_bound</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * con_debug_enter - prepare the console for the kernel debugger</span>", 
"<span class=\"comment\"> * @sw: console driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called when the console is taken over by the kernel debugger, this</span>", 
"<span class=\"comment\"> * function needs to save the current console state, then put the console</span>", 
"<span class=\"comment\"> * into a state suitable for the kernel debugger.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Zero on success, nonzero if a failure occurred when trying to prepare</span>", 
"<span class=\"comment\"> * the console for the debugger.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#con_debug_enter\">con_debug_enter</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_fg_console\">saved_fg_console</a> = <a class=\"id\" href=\"#fg_console\">fg_console</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_last_console\">saved_last_console</a> = <a class=\"id\" href=\"#last_console\">last_console</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_want_console\">saved_want_console</a> = <a class=\"id\" href=\"#want_console\">want_console</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_vc_mode\">saved_vc_mode</a> = <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_mode\">vc_mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_console_blanked\">saved_console_blanked</a> = <a class=\"id\" href=\"#console_blanked\">console_blanked</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_mode\">vc_mode</a> = <a class=\"id\" href=\"#KD_TEXT\">KD_TEXT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_blanked\">console_blanked</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_sw\">vc_sw</a>-><a class=\"id\" href=\"#con_debug_enter\">con_debug_enter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_sw\">vc_sw</a>-><a class=\"id\" href=\"#con_debug_enter\">con_debug_enter</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the initial LINES variable if it is not already set */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_rows\">vc_rows</a> &lt; 999) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#linecount\">linecount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#lns\">lns</a>[4];", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#setargs\">setargs</a>[3] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"set\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"LINES\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lns\">lns</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kdbgetintenv\">kdbgetintenv</a>(<a class=\"id\" href=\"#setargs\">setargs</a>[0], &amp;<a class=\"id\" href=\"#linecount\">linecount</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#lns\">lns</a>, 4, \"%i\", <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_rows\">vc_rows</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdb_set\">kdb_set</a>(2, <a class=\"id\" href=\"#setargs\">setargs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_KGDB_KDB */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#con_debug_enter\">con_debug_enter</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * con_debug_leave - restore console state</span>", 
"<span class=\"comment\"> * @sw: console driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Restore the console state to what it was before the kernel debugger</span>", 
"<span class=\"comment\"> * was invoked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Zero on success, nonzero if a failure occurred when trying to restore</span>", 
"<span class=\"comment\"> * the console.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#con_debug_leave\">con_debug_leave</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fg_console\">fg_console</a> = <a class=\"id\" href=\"#saved_fg_console\">saved_fg_console</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_console\">last_console</a> = <a class=\"id\" href=\"#saved_last_console\">saved_last_console</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#want_console\">want_console</a> = <a class=\"id\" href=\"#saved_want_console\">saved_want_console</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_blanked\">console_blanked</a> = <a class=\"id\" href=\"#saved_console_blanked\">saved_console_blanked</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#fg_console\">fg_console</a>].<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#vc_mode\">vc_mode</a> = <a class=\"id\" href=\"#saved_vc_mode\">saved_vc_mode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vc\">vc</a> = <a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#fg_console\">fg_console</a>].<a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_sw\">vc_sw</a>-><a class=\"id\" href=\"#con_debug_leave\">con_debug_leave</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_sw\">vc_sw</a>-><a class=\"id\" href=\"#con_debug_leave\">con_debug_leave</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#con_debug_leave\">con_debug_leave</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * register_con_driver - register console driver to console layer</span>", 
"<span class=\"comment\"> * @csw: console driver</span>", 
"<span class=\"comment\"> * @first: the first console to take over, minimum value is 0</span>", 
"<span class=\"comment\"> * @last: the last console to take over, maximum value is MAX_NR_CONSOLES -1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: This function registers a console driver which can later</span>", 
"<span class=\"comment\"> * bind to a range of consoles specified by @first and @last. It will</span>", 
"<span class=\"comment\"> * also initialize the console driver by calling con_startup().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_con_driver\">register_con_driver</a>(const struct <a class=\"id\" href=\"#consw\">consw</a> *<a class=\"id\" href=\"#csw\">csw</a>, int <a class=\"id\" href=\"#first\">first</a>, int <a class=\"id\" href=\"#last\">last</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#csw\">csw</a>-><a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#con_driver\">con_driver</a> *<a class=\"id\" href=\"#con_driver\">con_driver</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_CON_DRIVER\">MAX_NR_CON_DRIVER</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a> = &amp;<a class=\"id\" href=\"#registered_con_driver\">registered_con_driver</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* already registered */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#con\">con</a> == <a class=\"id\" href=\"#csw\">csw</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#csw\">csw</a>-><a class=\"id\" href=\"#con_startup\">con_startup</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_CON_DRIVER\">MAX_NR_CON_DRIVER</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a> = &amp;<a class=\"id\" href=\"#registered_con_driver\">registered_con_driver</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#con\">con</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#con\">con</a> = <a class=\"id\" href=\"#csw\">csw</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#flag\">flag</a> = <a class=\"id\" href=\"#CON_DRIVER_FLAG_MODULE\">CON_DRIVER_FLAG_MODULE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>                   <a class=\"id\" href=\"#CON_DRIVER_FLAG_INIT\">CON_DRIVER_FLAG_INIT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#device_create\">device_create</a>(<a class=\"id\" href=\"#vtconsole_class\">vtconsole_class</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MKDEV\">MKDEV</a>(0, <a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#node\">node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, \"vtcon%i\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Unable to create device for %s; \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"errno = %ld\\n\", <a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#desc\">desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vtconsole_init_device\">vtconsole_init_device</a>(<a class=\"id\" href=\"#con_driver\">con_driver</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_con_driver\">register_con_driver</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unregister_con_driver - unregister console driver from console layer</span>", 
"<span class=\"comment\"> * @csw: console driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: All drivers that registers to the console layer must</span>", 
"<span class=\"comment\"> * call this function upon exit, or if the console driver is in a state</span>", 
"<span class=\"comment\"> * where it won't be able to handle console services, such as the</span>", 
"<span class=\"comment\"> * framebuffer console without loaded framebuffer drivers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The driver must unbind first prior to unregistration.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#unregister_con_driver\">unregister_con_driver</a>(const struct <a class=\"id\" href=\"#consw\">consw</a> *<a class=\"id\" href=\"#csw\">csw</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cannot unregister a bound driver */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#con_is_bound\">con_is_bound</a>(<a class=\"id\" href=\"#csw\">csw</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_CON_DRIVER\">MAX_NR_CON_DRIVER</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#con_driver\">con_driver</a> *<a class=\"id\" href=\"#con_driver\">con_driver</a> = &amp;<a class=\"id\" href=\"#registered_con_driver\">registered_con_driver</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#con\">con</a> == <a class=\"id\" href=\"#csw\">csw</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#CON_DRIVER_FLAG_MODULE\">CON_DRIVER_FLAG_MODULE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vtconsole_deinit_device\">vtconsole_deinit_device</a>(<a class=\"id\" href=\"#con_driver\">con_driver</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_destroy\">device_destroy</a>(<a class=\"id\" href=\"#vtconsole_class\">vtconsole_class</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(0, <a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#node\">node</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#con\">con</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#node\">node</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#flag\">flag</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#first\">first</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_driver\">con_driver</a>-><a class=\"id\" href=\"#last\">last</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_con_driver\">unregister_con_driver</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If we support more console drivers, this function is used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>when a driver wants to take over some existing consoles</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and become default driver for newly opened ones.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      take_over_console is basically a register followed by unbind</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#take_over_console\">take_over_console</a>(const struct <a class=\"id\" href=\"#consw\">consw</a> *<a class=\"id\" href=\"#csw\">csw</a>, int <a class=\"id\" href=\"#first\">first</a>, int <a class=\"id\" href=\"#last\">last</a>, int <a class=\"id\" href=\"#deflt\">deflt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_con_driver\">register_con_driver</a>(<a class=\"id\" href=\"#csw\">csw</a>, <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#last\">last</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bind_con_driver\">bind_con_driver</a>(<a class=\"id\" href=\"#csw\">csw</a>, <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#last\">last</a>, <a class=\"id\" href=\"#deflt\">deflt</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * give_up_console is a wrapper to unregister_con_driver. It will only</span>", 
"<span class=\"comment\"> * work if driver is fully unbound.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#give_up_console\">give_up_console</a>(const struct <a class=\"id\" href=\"#consw\">consw</a> *<a class=\"id\" href=\"#csw\">csw</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_con_driver\">unregister_con_driver</a>(<a class=\"id\" href=\"#csw\">csw</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vtconsole_class_init\">vtconsole_class_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vtconsole_class\">vtconsole_class</a> = <a class=\"id\" href=\"#class_create\">class_create</a>(<a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, \"vtconsole\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#vtconsole_class\">vtconsole_class</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Unable to create vt console class; \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"errno = %ld\\n\", <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#vtconsole_class\">vtconsole_class</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vtconsole_class\">vtconsole_class</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add system drivers to sysfs */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_CON_DRIVER\">MAX_NR_CON_DRIVER</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#con_driver\">con_driver</a> *<a class=\"id\" href=\"#con\">con</a> = &amp;<a class=\"id\" href=\"#registered_con_driver\">registered_con_driver</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#con\">con</a> && !<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#device_create\">device_create</a>(<a class=\"id\" href=\"#vtconsole_class\">vtconsole_class</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(0, <a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#node\">node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#NULL\">NULL</a>, \"vtcon%i\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Unable to create \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"device for %s; errno = %ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vtconsole_init_device\">vtconsole_init_device</a>(<a class=\"id\" href=\"#con\">con</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#postcore_initcall\">postcore_initcall</a>(<a class=\"id\" href=\"#vtconsole_class_init\">vtconsole_class_init</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Screen blanking</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#set_vesa_blanking\">set_vesa_blanking</a>(char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mode\">mode</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#p\">p</a> + 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vesa_blank_mode\">vesa_blank_mode</a> = (<a class=\"id\" href=\"#mode\">mode</a> &lt; 4) ? <a class=\"id\" href=\"#mode\">mode</a> : 0;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#do_blank_screen\">do_blank_screen</a>(int <a class=\"id\" href=\"#entering_gfx\">entering_gfx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a> = <a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#fg_console\">fg_console</a>].<a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_CONSOLE_UNLOCKED\">WARN_CONSOLE_UNLOCKED</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_blanked\">console_blanked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blank_state\">blank_state</a> == <a class=\"id\" href=\"#blank_vesa_wait\">blank_vesa_wait</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blank_state\">blank_state</a> = <a class=\"id\" href=\"#blank_off\">blank_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_sw\">vc_sw</a>-><a class=\"id\" href=\"#con_blank\">con_blank</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#vesa_blank_mode\">vesa_blank_mode</a> + 1, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* entering graphics mode? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entering_gfx\">entering_gfx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hide_cursor\">hide_cursor</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_screen\">save_screen</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_sw\">vc_sw</a>-><a class=\"id\" href=\"#con_blank\">con_blank</a>(<a class=\"id\" href=\"#vc\">vc</a>, -1, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_blanked\">console_blanked</a> = <a class=\"id\" href=\"#fg_console\">fg_console</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blank_state\">blank_state</a> = <a class=\"id\" href=\"#blank_off\">blank_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_origin\">set_origin</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blank_state\">blank_state</a> != <a class=\"id\" href=\"#blank_normal_wait\">blank_normal_wait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blank_state\">blank_state</a> = <a class=\"id\" href=\"#blank_off\">blank_off</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't blank graphics */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_mode\">vc_mode</a> != <a class=\"id\" href=\"#KD_TEXT\">KD_TEXT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_blanked\">console_blanked</a> = <a class=\"id\" href=\"#fg_console\">fg_console</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hide_cursor\">hide_cursor</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#console_timer\">console_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blank_timer_expired\">blank_timer_expired</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_screen\">save_screen</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* In case we need to reset origin, blanking hook returns 1 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_sw\">vc_sw</a>-><a class=\"id\" href=\"#con_blank\">con_blank</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#vesa_off_interval\">vesa_off_interval</a> ? 1 : (<a class=\"id\" href=\"#vesa_blank_mode\">vesa_blank_mode</a> + 1), 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_blanked\">console_blanked</a> = <a class=\"id\" href=\"#fg_console\">fg_console</a> + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_origin\">set_origin</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_blank_hook\">console_blank_hook</a> && <a class=\"id\" href=\"#console_blank_hook\">console_blank_hook</a>(1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vesa_off_interval\">vesa_off_interval</a> && <a class=\"id\" href=\"#vesa_blank_mode\">vesa_blank_mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blank_state\">blank_state</a> = <a class=\"id\" href=\"#blank_vesa_wait\">blank_vesa_wait</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#console_timer\">console_timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#vesa_off_interval\">vesa_off_interval</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vt_event_post\">vt_event_post</a>(<a class=\"id\" href=\"#VT_EVENT_BLANK\">VT_EVENT_BLANK</a>, <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_num\">vc_num</a>, <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_num\">vc_num</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#do_blank_screen\">do_blank_screen</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called by timer as well as from vt_console_driver</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#do_unblank_screen\">do_unblank_screen</a>(int <a class=\"id\" href=\"#leaving_gfx\">leaving_gfx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This should now always be called from a \"sane\" (read: can schedule)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * context for the sake of the low level drivers, except in the special</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case of oops_in_progress</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#oops_in_progress\">oops_in_progress</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_CONSOLE_UNLOCKED\">WARN_CONSOLE_UNLOCKED</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ignore_poke\">ignore_poke</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#console_blanked\">console_blanked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vc_cons_allocated\">vc_cons_allocated</a>(<a class=\"id\" href=\"#fg_console\">fg_console</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* impossible */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"unblank_screen: tty %d not allocated ??\\n\", <a class=\"id\" href=\"#fg_console\">fg_console</a>+1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vc\">vc</a> = <a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#fg_console\">fg_console</a>].<a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Try to unblank in oops case too */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_mode\">vc_mode</a> != <a class=\"id\" href=\"#KD_TEXT\">KD_TEXT</a> && !<a class=\"id\" href=\"#vt_force_oops_output\">vt_force_oops_output</a>(<a class=\"id\" href=\"#vc\">vc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return; <span class=\"comment\">/* but leave console_blanked != 0 */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blankinterval\">blankinterval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#console_timer\">console_timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + (<a class=\"id\" href=\"#blankinterval\">blankinterval</a> * <a class=\"id\" href=\"#HZ\">HZ</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blank_state\">blank_state</a> = <a class=\"id\" href=\"#blank_normal_wait\">blank_normal_wait</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_blanked\">console_blanked</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_sw\">vc_sw</a>-><a class=\"id\" href=\"#con_blank\">con_blank</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0, <a class=\"id\" href=\"#leaving_gfx\">leaving_gfx</a>) || <a class=\"id\" href=\"#vt_force_oops_output\">vt_force_oops_output</a>(<a class=\"id\" href=\"#vc\">vc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Low-level driver cannot restore -&gt; do it ourselves */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_screen\">update_screen</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_blank_hook\">console_blank_hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_blank_hook\">console_blank_hook</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_palette\">set_palette</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cursor\">set_cursor</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vt_event_post\">vt_event_post</a>(<a class=\"id\" href=\"#VT_EVENT_UNBLANK\">VT_EVENT_UNBLANK</a>, <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_num\">vc_num</a>, <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_num\">vc_num</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#do_unblank_screen\">do_unblank_screen</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is called by the outside world to cause a forced unblank, mostly for</span>", 
"<span class=\"comment\"> * oopses. Currently, I just call do_unblank_screen(0), but we could eventually</span>", 
"<span class=\"comment\"> * call it with 1 as an argument and so force a mode restore... that may kill</span>", 
"<span class=\"comment\"> * X or at least garbage the screen but would also make the Oops visible...</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unblank_screen\">unblank_screen</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_unblank_screen\">do_unblank_screen</a>(0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We defer the timer blanking to work queue so it can take the console mutex</span>", 
"<span class=\"comment\"> * (console operations can still happen at irq time, but only from printk which</span>", 
"<span class=\"comment\"> * has the console mutex. Not perfect yet, but better than no locking</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#blank_screen_t\">blank_screen_t</a>(unsigned long <a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#keventd_up\">keventd_up</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#console_timer\">console_timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + (<a class=\"id\" href=\"#blankinterval\">blankinterval</a> * <a class=\"id\" href=\"#HZ\">HZ</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blank_timer_expired\">blank_timer_expired</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#console_work\">console_work</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#poke_blanked_console\">poke_blanked_console</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_CONSOLE_UNLOCKED\">WARN_CONSOLE_UNLOCKED</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add this so we quickly catch whoever might call us in a non</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * safe context. Nowadays, unblank_screen() isn't to be called in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * atomic contexts and is allowed to schedule (with the special case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of oops_in_progress, but that isn't of any concern for this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * function. --BenH.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This isn't perfectly race free, but a race here would be mostly harmless,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at worse, we'll do a spurrious blank and it's unlikely</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#console_timer\">console_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blank_timer_expired\">blank_timer_expired</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ignore_poke\">ignore_poke</a> || !<a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#fg_console\">fg_console</a>].<a class=\"id\" href=\"#d\">d</a> || <a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#fg_console\">fg_console</a>].<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#vc_mode\">vc_mode</a> == <a class=\"id\" href=\"#KD_GRAPHICS\">KD_GRAPHICS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_blanked\">console_blanked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unblank_screen\">unblank_screen</a>();", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#blankinterval\">blankinterval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#console_timer\">console_timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + (<a class=\"id\" href=\"#blankinterval\">blankinterval</a> * <a class=\"id\" href=\"#HZ\">HZ</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blank_state\">blank_state</a> = <a class=\"id\" href=\"#blank_normal_wait\">blank_normal_wait</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Palettes</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#set_palette\">set_palette</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_CONSOLE_UNLOCKED\">WARN_CONSOLE_UNLOCKED</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_mode\">vc_mode</a> != <a class=\"id\" href=\"#KD_GRAPHICS\">KD_GRAPHICS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_sw\">vc_sw</a>-><a class=\"id\" href=\"#con_set_palette\">con_set_palette</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#color_table\">color_table</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#set_get_cmap\">set_get_cmap</a>(unsigned char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>, int <a class=\"id\" href=\"#set\">set</a>)", 
"{", 
"    int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#k\">k</a>;", 
"", 
"    <a class=\"id\" href=\"#WARN_CONSOLE_UNLOCKED\">WARN_CONSOLE_UNLOCKED</a>();", 
"", 
"    for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 16; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#set\">set</a>) {", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#default_red\">default_red</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#arg\">arg</a>++);", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#default_grn\">default_grn</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#arg\">arg</a>++);", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#default_blu\">default_blu</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#arg\">arg</a>++);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#default_red\">default_red</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#arg\">arg</a>++);", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#default_grn\">default_grn</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#arg\">arg</a>++);", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#default_blu\">default_blu</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#arg\">arg</a>++);", 
"<span class=\"ts\"/>}", 
"    if (<a class=\"id\" href=\"#set\">set</a>) {", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_CONSOLES\">MAX_NR_CONSOLES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/>    if (<a class=\"id\" href=\"#vc_cons_allocated\">vc_cons_allocated</a>(<a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 16; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#vc_palette\">vc_palette</a>[<a class=\"id\" href=\"#k\">k</a>++] = <a class=\"id\" href=\"#default_red\">default_red</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#vc_palette\">vc_palette</a>[<a class=\"id\" href=\"#k\">k</a>++] = <a class=\"id\" href=\"#default_grn\">default_grn</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#vc_palette\">vc_palette</a>[<a class=\"id\" href=\"#k\">k</a>++] = <a class=\"id\" href=\"#default_blu\">default_blu</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_palette\">set_palette</a>(<a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/>    }", 
"    }", 
"    return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Load palette into the DAC registers. arg points to a colour</span>", 
"<span class=\"comment\"> * map, 3 bytes per colour, 16 colours, range from 0 to 255.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#con_set_cmap\">con_set_cmap</a>(unsigned char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#set_get_cmap\">set_get_cmap</a> (<a class=\"id\" href=\"#arg\">arg</a>,1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#con_get_cmap\">con_get_cmap</a>(unsigned char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#set_get_cmap\">set_get_cmap</a> (<a class=\"id\" href=\"#arg\">arg</a>,0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#reset_palette\">reset_palette</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a>=<a class=\"id\" href=\"#k\">k</a>=0; <a class=\"id\" href=\"#j\">j</a>&lt;16; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_palette\">vc_palette</a>[<a class=\"id\" href=\"#k\">k</a>++] = <a class=\"id\" href=\"#default_red\">default_red</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_palette\">vc_palette</a>[<a class=\"id\" href=\"#k\">k</a>++] = <a class=\"id\" href=\"#default_grn\">default_grn</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_palette\">vc_palette</a>[<a class=\"id\" href=\"#k\">k</a>++] = <a class=\"id\" href=\"#default_blu\">default_blu</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_palette\">set_palette</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Font switching</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Currently we only support fonts up to 32 pixels wide, at a maximum height</span>", 
"<span class=\"comment\"> *  of 32 pixels. Userspace fontdata is stored with 32 bytes (shorts/ints, </span>", 
"<span class=\"comment\"> *  depending on width) reserved for each character which is kinda wasty, but </span>", 
"<span class=\"comment\"> *  this is done in order to maintain compatibility with the EGA/VGA fonts. It </span>", 
"<span class=\"comment\"> *  is upto the actual low-level console-driver convert data into its favorite</span>", 
"<span class=\"comment\"> *  format (maybe we should add a `fontoffset' field to the `display'</span>", 
"<span class=\"comment\"> *  structure so we won't have to convert the fontdata all the time.</span>", 
"<span class=\"comment\"> *  /Jes</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#max_font_size\">max_font_size</a> 65536", 
"", 
"static int <a class=\"id\" href=\"#con_font_get\">con_font_get</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, struct <a class=\"id\" href=\"#console_font_op\">console_font_op</a> *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#console_font\">console_font</a> <a class=\"id\" href=\"#font\">font</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_mode\">vc_mode</a> != <a class=\"id\" href=\"#KD_TEXT\">KD_TEXT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#max_font_size\">max_font_size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_sw\">vc_sw</a>-><a class=\"id\" href=\"#con_font_get\">con_font_get</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_sw\">vc_sw</a>-><a class=\"id\" href=\"#con_font_get\">con_font_get</a>(<a class=\"id\" href=\"#vc\">vc</a>, &amp;<a class=\"id\" href=\"#font\">font</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = (<a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#width\">width</a>+7)/8 * 32 * <a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#charcount\">charcount</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#data\">data</a> && <a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#charcount\">charcount</a> &gt; <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#charcount\">charcount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KD_FONT_FLAG_OLD\">KD_FONT_FLAG_OLD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#width\">width</a> &gt; <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#width\">width</a> || <a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#height\">height</a> &gt; <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#height\">height</a>) ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#width\">width</a> != 8)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if ((<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#height\">height</a> && <a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#height\">height</a> &gt; <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#height\">height</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#height\">height</a> &gt; 32)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#width\">width</a> = <a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#width\">width</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#charcount\">charcount</a> = <a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#charcount\">charcount</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#data\">data</a> && <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#font\">font</a>.<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#con_font_set\">con_font_set</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, struct <a class=\"id\" href=\"#console_font_op\">console_font_op</a> *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#console_font\">console_font</a> <a class=\"id\" href=\"#font\">font</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_mode\">vc_mode</a> != <a class=\"id\" href=\"#KD_TEXT\">KD_TEXT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#charcount\">charcount</a> &gt; 512)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#height\">height</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Need to guess font height [compat] */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#charmap\">charmap</a> = <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If from KDFONTOP ioctl, don't allow things which can be done in userland,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   so that we can get rid of this soon */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KD_FONT_FLAG_OLD\">KD_FONT_FLAG_OLD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#h\">h</a> = 32; <a class=\"id\" href=\"#h\">h</a> &gt; 0; <a class=\"id\" href=\"#h\">h</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#charcount\">charcount</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#charmap\">charmap</a>[32*<a class=\"id\" href=\"#i\">i</a>+<a class=\"id\" href=\"#h\">h</a>-1]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>)", 
];
xr_frag_insert('l/79/2837346e5acf6c93bb361a82e6a86b0a7cc123.xr', __xr_tmp);
