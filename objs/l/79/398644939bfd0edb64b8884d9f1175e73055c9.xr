var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_PTRACE_H\">_LINUX_PTRACE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_PTRACE_H\">_LINUX_PTRACE_H</a>", 
"<span class=\"comment\">/* ptrace.h */</span>", 
"<span class=\"comment\">/* structs and defines to help the user use the ptrace system call. */</span>", 
"", 
"<span class=\"comment\">/* has the defines to get at the registers. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_TRACEME\">PTRACE_TRACEME</a><span class=\"ts\"/><span class=\"ts\"/>   0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_PEEKTEXT\">PTRACE_PEEKTEXT</a><span class=\"ts\"/><span class=\"ts\"/>   1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_PEEKDATA\">PTRACE_PEEKDATA</a><span class=\"ts\"/><span class=\"ts\"/>   2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_PEEKUSR\">PTRACE_PEEKUSR</a><span class=\"ts\"/><span class=\"ts\"/>   3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_POKETEXT\">PTRACE_POKETEXT</a><span class=\"ts\"/><span class=\"ts\"/>   4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_POKEDATA\">PTRACE_POKEDATA</a><span class=\"ts\"/><span class=\"ts\"/>   5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_POKEUSR\">PTRACE_POKEUSR</a><span class=\"ts\"/><span class=\"ts\"/>   6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_CONT\">PTRACE_CONT</a><span class=\"ts\"/><span class=\"ts\"/>   7", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_KILL\">PTRACE_KILL</a><span class=\"ts\"/><span class=\"ts\"/>   8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_SINGLESTEP\">PTRACE_SINGLESTEP</a><span class=\"ts\"/>   9", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_ATTACH\">PTRACE_ATTACH</a><span class=\"ts\"/><span class=\"ts\"/>  16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_DETACH\">PTRACE_DETACH</a><span class=\"ts\"/><span class=\"ts\"/>  17", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_SYSCALL\">PTRACE_SYSCALL</a><span class=\"ts\"/><span class=\"ts\"/>  24", 
"", 
"<span class=\"comment\">/* 0x4200-0x4300 are reserved for architecture-independent additions.  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_SETOPTIONS\">PTRACE_SETOPTIONS</a><span class=\"ts\"/>0x4200", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_GETEVENTMSG\">PTRACE_GETEVENTMSG</a><span class=\"ts\"/>0x4201", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_GETSIGINFO\">PTRACE_GETSIGINFO</a><span class=\"ts\"/>0x4202", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_SETSIGINFO\">PTRACE_SETSIGINFO</a><span class=\"ts\"/>0x4203", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic ptrace interface that exports the architecture specific regsets</span>", 
"<span class=\"comment\"> * using the corresponding NT_* types (which are also used in the core dump).</span>", 
"<span class=\"comment\"> * Please note that the NT_PRSTATUS note type in a core dump contains a full</span>", 
"<span class=\"comment\"> * 'struct elf_prstatus'. But the user_regset for NT_PRSTATUS contains just the</span>", 
"<span class=\"comment\"> * elf_gregset_t that is the pr_reg field of 'struct elf_prstatus'. For all the</span>", 
"<span class=\"comment\"> * other user_regset flavors, the user_regset layout and the ELF core dump note</span>", 
"<span class=\"comment\"> * payload are exactly the same layout.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This interface usage is as follows:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct iovec iov = { buf, len};</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ret = ptrace(PTRACE_GETREGSET/PTRACE_SETREGSET, pid, NT_XXX_TYPE, &amp;iov);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On the successful completion, iov.len will be updated by the kernel,</span>", 
"<span class=\"comment\"> * specifying how much the kernel has written/read to/from the user's iov.buf.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_GETREGSET\">PTRACE_GETREGSET</a><span class=\"ts\"/>0x4204", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_SETREGSET\">PTRACE_SETREGSET</a><span class=\"ts\"/>0x4205", 
"", 
"<span class=\"comment\">/* options set using PTRACE_SETOPTIONS */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_O_TRACESYSGOOD\">PTRACE_O_TRACESYSGOOD</a><span class=\"ts\"/>0x00000001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_O_TRACEFORK\">PTRACE_O_TRACEFORK</a><span class=\"ts\"/>0x00000002", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_O_TRACEVFORK\">PTRACE_O_TRACEVFORK</a><span class=\"ts\"/>0x00000004", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_O_TRACECLONE\">PTRACE_O_TRACECLONE</a><span class=\"ts\"/>0x00000008", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_O_TRACEEXEC\">PTRACE_O_TRACEEXEC</a><span class=\"ts\"/>0x00000010", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_O_TRACEVFORKDONE\">PTRACE_O_TRACEVFORKDONE</a><span class=\"ts\"/>0x00000020", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_O_TRACEEXIT\">PTRACE_O_TRACEEXIT</a><span class=\"ts\"/>0x00000040", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_O_MASK\">PTRACE_O_MASK</a><span class=\"ts\"/><span class=\"ts\"/>0x0000007f", 
"", 
"<span class=\"comment\">/* Wait extended result codes for the above trace options.  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_EVENT_FORK\">PTRACE_EVENT_FORK</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_EVENT_VFORK\">PTRACE_EVENT_VFORK</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_EVENT_CLONE\">PTRACE_EVENT_CLONE</a><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_EVENT_EXEC\">PTRACE_EVENT_EXEC</a><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_EVENT_VFORK_DONE\">PTRACE_EVENT_VFORK_DONE</a><span class=\"ts\"/>5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_EVENT_EXIT\">PTRACE_EVENT_EXIT</a><span class=\"ts\"/>6", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ptrace flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The owner ship rules for task-&gt;ptrace which holds the ptrace</span>", 
"<span class=\"comment\"> * flags is simple.  When a task is running it owns it's task-&gt;ptrace</span>", 
"<span class=\"comment\"> * flags.  When the a task is stopped the ptracer owns task-&gt;ptrace.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_PTRACED\">PT_PTRACED</a><span class=\"ts\"/>0x00000001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_DTRACE\">PT_DTRACE</a><span class=\"ts\"/>0x00000002<span class=\"ts\"/><span class=\"comment\">/* delayed trace (used on m68k, i386) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_TRACESYSGOOD\">PT_TRACESYSGOOD</a><span class=\"ts\"/>0x00000004", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_PTRACE_CAP\">PT_PTRACE_CAP</a><span class=\"ts\"/>0x00000008<span class=\"ts\"/><span class=\"comment\">/* ptracer can follow suid-exec */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_TRACE_FORK\">PT_TRACE_FORK</a><span class=\"ts\"/>0x00000010", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_TRACE_VFORK\">PT_TRACE_VFORK</a><span class=\"ts\"/>0x00000020", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_TRACE_CLONE\">PT_TRACE_CLONE</a><span class=\"ts\"/>0x00000040", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_TRACE_EXEC\">PT_TRACE_EXEC</a><span class=\"ts\"/>0x00000080", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_TRACE_VFORK_DONE\">PT_TRACE_VFORK_DONE</a><span class=\"ts\"/>0x00000100", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_TRACE_EXIT\">PT_TRACE_EXIT</a><span class=\"ts\"/>0x00000200", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_TRACE_MASK\">PT_TRACE_MASK</a><span class=\"ts\"/>0x000003f4", 
"", 
"<span class=\"comment\">/* single stepping state bits (used on ARM and PA-RISC) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_SINGLESTEP_BIT\">PT_SINGLESTEP_BIT</a><span class=\"ts\"/>31", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_SINGLESTEP\">PT_SINGLESTEP</a><span class=\"ts\"/><span class=\"ts\"/>(1<<<a class=\"id\" href=\"#PT_SINGLESTEP_BIT\">PT_SINGLESTEP_BIT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_BLOCKSTEP_BIT\">PT_BLOCKSTEP_BIT</a><span class=\"ts\"/>30", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PT_BLOCKSTEP\">PT_BLOCKSTEP</a><span class=\"ts\"/><span class=\"ts\"/>(1<<<a class=\"id\" href=\"#PT_BLOCKSTEP_BIT\">PT_BLOCKSTEP_BIT</a>)", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For unlikely.  */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For struct task_struct.  */</span>", 
"", 
"", 
"extern long <a class=\"id\" href=\"#arch_ptrace\">arch_ptrace</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, long <a class=\"id\" href=\"#request\">request</a>, long <a class=\"id\" href=\"#addr\">addr</a>, long <a class=\"id\" href=\"#data\">data</a>);", 
"extern int <a class=\"id\" href=\"#ptrace_traceme\">ptrace_traceme</a>(void);", 
"extern int <a class=\"id\" href=\"#ptrace_readdata\">ptrace_readdata</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, unsigned long <a class=\"id\" href=\"#src\">src</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"extern int <a class=\"id\" href=\"#ptrace_writedata\">ptrace_writedata</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#src\">src</a>, unsigned long <a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"extern int <a class=\"id\" href=\"#ptrace_attach\">ptrace_attach</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"extern int <a class=\"id\" href=\"#ptrace_detach\">ptrace_detach</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, unsigned int);", 
"extern void <a class=\"id\" href=\"#ptrace_disable\">ptrace_disable</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern int <a class=\"id\" href=\"#ptrace_check_attach\">ptrace_check_attach</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, int <a class=\"id\" href=\"#kill\">kill</a>);", 
"extern int <a class=\"id\" href=\"#ptrace_request\">ptrace_request</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, long <a class=\"id\" href=\"#request\">request</a>, long <a class=\"id\" href=\"#addr\">addr</a>, long <a class=\"id\" href=\"#data\">data</a>);", 
"extern void <a class=\"id\" href=\"#ptrace_notify\">ptrace_notify</a>(int <a class=\"id\" href=\"#exit_code\">exit_code</a>);", 
"extern void <a class=\"id\" href=\"#__ptrace_link\">__ptrace_link</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#new_parent\">new_parent</a>);", 
"extern void <a class=\"id\" href=\"#__ptrace_unlink\">__ptrace_unlink</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>);", 
"extern void <a class=\"id\" href=\"#exit_ptrace\">exit_ptrace</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tracer\">tracer</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_MODE_READ\">PTRACE_MODE_READ</a>   1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PTRACE_MODE_ATTACH\">PTRACE_MODE_ATTACH</a> 2", 
"<span class=\"comment\">/* Returns 0 on success, -errno on denial. */</span>", 
"extern int <a class=\"id\" href=\"#__ptrace_may_access\">__ptrace_may_access</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"comment\">/* Returns true on success, false on denial. */</span>", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ptrace_may_access\">ptrace_may_access</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ptrace_reparented\">ptrace_reparented</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a> != <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ptrace_unlink\">ptrace_unlink</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#ptrace\">ptrace</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ptrace_unlink\">__ptrace_unlink</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#generic_ptrace_peekdata\">generic_ptrace_peekdata</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, long <a class=\"id\" href=\"#addr\">addr</a>, long <a class=\"id\" href=\"#data\">data</a>);", 
"int <a class=\"id\" href=\"#generic_ptrace_pokedata\">generic_ptrace_pokedata</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, long <a class=\"id\" href=\"#addr\">addr</a>, long <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * task_ptrace - return %PT_* flags that apply to a task</span>", 
"<span class=\"comment\"> * @task:<span class=\"ts\"/>pointer to &amp;task_struct in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the %PT_* flags that apply to @task.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#task_ptrace\">task_ptrace</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#ptrace\">ptrace</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ptrace_event - possibly stop for a ptrace event notification</span>", 
"<span class=\"comment\"> * @mask:<span class=\"ts\"/>%PT_* bit to check in @current-&gt;ptrace</span>", 
"<span class=\"comment\"> * @event:<span class=\"ts\"/>%PTRACE_EVENT_* value to report if @mask is set</span>", 
"<span class=\"comment\"> * @message:<span class=\"ts\"/>value for %PTRACE_GETEVENTMSG to return</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This checks the @mask bit to see if ptrace wants stops for this event.</span>", 
"<span class=\"comment\"> * If so we stop, reporting @event and @message to the ptrace parent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns nonzero if we did a ptrace notification, zero if not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called without locks.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ptrace_event\">ptrace_event</a>(int <a class=\"id\" href=\"#mask\">mask</a>, int <a class=\"id\" href=\"#event\">event</a>, unsigned long <a class=\"id\" href=\"#message\">message</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> && <a class=\"id\" href=\"#likely\">likely</a>(!(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ptrace\">ptrace</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ptrace_message\">ptrace_message</a> = <a class=\"id\" href=\"#message\">message</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptrace_notify\">ptrace_notify</a>((<a class=\"id\" href=\"#event\">event</a> << 8) | <a class=\"id\" href=\"#SIGTRAP\">SIGTRAP</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ptrace_init_task - initialize ptrace state for a new child</span>", 
"<span class=\"comment\"> * @child:<span class=\"ts\"/><span class=\"ts\"/>new child task</span>", 
"<span class=\"comment\"> * @ptrace:<span class=\"ts\"/><span class=\"ts\"/>true if child should be ptrace'd by parent's tracer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called immediately after adding @child to its parent's children</span>", 
"<span class=\"comment\"> * list.  @ptrace is false in the normal case, and true to ptrace @child.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with current's siglock and write_lock_irq(&amp;tasklist_lock) held.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ptrace_init_task\">ptrace_init_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ptrace\">ptrace</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#ptrace_entry\">ptrace_entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#ptraced\">ptraced</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#ptrace\">ptrace</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ptrace\">ptrace</a>) && (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ptrace\">ptrace</a> &amp; <a class=\"id\" href=\"#PT_PTRACED\">PT_PTRACED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#ptrace\">ptrace</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ptrace\">ptrace</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ptrace_link\">__ptrace_link</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ptrace_release_task - final ptrace-related cleanup of a zombie being reaped</span>", 
"<span class=\"comment\"> * @task:<span class=\"ts\"/>task in %EXIT_DEAD state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with write_lock(&amp;tasklist_lock) held.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ptrace_release_task\">ptrace_release_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#ptraced\">ptraced</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptrace_unlink\">ptrace_unlink</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#ptrace_entry\">ptrace_entry</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#force_successful_syscall_return\">force_successful_syscall_return</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * System call handlers that, upon successful completion, need to return a</span>", 
"<span class=\"comment\"> * negative value should call force_successful_syscall_return() right before</span>", 
"<span class=\"comment\"> * returning.  On architectures where the syscall convention provides for a</span>", 
"<span class=\"comment\"> * separate error flag (e.g., alpha, ia64, ppc{,64}, sparc{,64}, possibly</span>", 
"<span class=\"comment\"> * others), this macro can be used to ensure that the error flag will not get</span>", 
"<span class=\"comment\"> * set.  On architectures which do not support a separate error flag, the macro</span>", 
"<span class=\"comment\"> * is a no-op and the spurious error condition needs to be filtered out by some</span>", 
"<span class=\"comment\"> * other means (e.g., in user-level, by passing an extra argument to the</span>", 
"<span class=\"comment\"> * syscall handler, or something along those lines).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#force_successful_syscall_return\">force_successful_syscall_return</a>() do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * &lt;asm/ptrace.h&gt; should define the following things inside #ifdef __KERNEL__.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These do-nothing inlines are used when the arch does not</span>", 
"<span class=\"comment\"> * implement single-step.  The kerneldoc comments are here</span>", 
"<span class=\"comment\"> * to document the interface for all arch definitions.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#arch_has_single_step\">arch_has_single_step</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * arch_has_single_step - does this CPU support user-mode single-step?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If this is defined, then there must be function declarations or</span>", 
"<span class=\"comment\"> * inlines for user_enable_single_step() and user_disable_single_step().</span>", 
"<span class=\"comment\"> * arch_has_single_step() should evaluate to nonzero iff the machine</span>", 
"<span class=\"comment\"> * supports instruction single-step for user mode.</span>", 
"<span class=\"comment\"> * It can be a constant or it can test a CPU feature bit.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_has_single_step\">arch_has_single_step</a>()<span class=\"ts\"/><span class=\"ts\"/>(0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * user_enable_single_step - single-step in user-mode task</span>", 
"<span class=\"comment\"> * @task: either current or a task stopped in %TASK_TRACED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This can only be called when arch_has_single_step() has returned nonzero.</span>", 
"<span class=\"comment\"> * Set @task so that when it returns to user mode, it will trap after the</span>", 
"<span class=\"comment\"> * next single instruction executes.  If arch_has_block_step() is defined,</span>", 
"<span class=\"comment\"> * this must clear the effects of user_enable_block_step() too.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#user_enable_single_step\">user_enable_single_step</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This can never be called.  */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * user_disable_single_step - cancel user-mode single-step</span>", 
"<span class=\"comment\"> * @task: either current or a task stopped in %TASK_TRACED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Clear @task of the effects of user_enable_single_step() and</span>", 
"<span class=\"comment\"> * user_enable_block_step().  This can be called whether or not either</span>", 
"<span class=\"comment\"> * of those was ever called on @task, and even if arch_has_single_step()</span>", 
"<span class=\"comment\"> * returned zero.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#user_disable_single_step\">user_disable_single_step</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"}", 
"#else", 
"extern void <a class=\"id\" href=\"#user_enable_single_step\">user_enable_single_step</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern void <a class=\"id\" href=\"#user_disable_single_step\">user_disable_single_step</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* arch_has_single_step */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#arch_has_block_step\">arch_has_block_step</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * arch_has_block_step - does this CPU support user-mode block-step?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If this is defined, then there must be a function declaration or inline</span>", 
"<span class=\"comment\"> * for user_enable_block_step(), and arch_has_single_step() must be defined</span>", 
"<span class=\"comment\"> * too.  arch_has_block_step() should evaluate to nonzero iff the machine</span>", 
"<span class=\"comment\"> * supports step-until-branch for user mode.  It can be a constant or it</span>", 
"<span class=\"comment\"> * can test a CPU feature bit.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_has_block_step\">arch_has_block_step</a>()<span class=\"ts\"/><span class=\"ts\"/>(0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * user_enable_block_step - step until branch in user-mode task</span>", 
"<span class=\"comment\"> * @task: either current or a task stopped in %TASK_TRACED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This can only be called when arch_has_block_step() has returned nonzero,</span>", 
"<span class=\"comment\"> * and will never be called when single-instruction stepping is being used.</span>", 
"<span class=\"comment\"> * Set @task so that when it returns to user mode, it will trap after the</span>", 
"<span class=\"comment\"> * next branch or trap taken.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#user_enable_block_step\">user_enable_block_step</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This can never be called.  */</span>", 
"}", 
"#else", 
"extern void <a class=\"id\" href=\"#user_enable_block_step\">user_enable_block_step</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* arch_has_block_step */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_HAS_USER_SINGLE_STEP_INFO\">ARCH_HAS_USER_SINGLE_STEP_INFO</a>", 
"extern void <a class=\"id\" href=\"#user_single_step_siginfo\">user_single_step_siginfo</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#user_single_step_siginfo\">user_single_step_siginfo</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#info\">info</a>, 0, sizeof(*<a class=\"id\" href=\"#info\">info</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#SIGTRAP\">SIGTRAP</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#arch_ptrace_stop_needed\">arch_ptrace_stop_needed</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * arch_ptrace_stop_needed - Decide whether arch_ptrace_stop() should be called</span>", 
"<span class=\"comment\"> * @code:<span class=\"ts\"/>current-&gt;exit_code value ptrace will stop with</span>", 
"<span class=\"comment\"> * @info:<span class=\"ts\"/>siginfo_t pointer (or %NULL) for signal ptrace will stop with</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called with the siglock held, to decide whether or not it's</span>", 
"<span class=\"comment\"> * necessary to release the siglock and call arch_ptrace_stop() with the</span>", 
"<span class=\"comment\"> * same @code and @info arguments.  It can be defined to a constant if</span>", 
"<span class=\"comment\"> * arch_ptrace_stop() is never required, or always is.  On machines where</span>", 
"<span class=\"comment\"> * this makes sense, it should be defined to a quick test to optimize out</span>", 
"<span class=\"comment\"> * calling arch_ptrace_stop() when it would be superfluous.  For example,</span>", 
"<span class=\"comment\"> * if the thread has not been back to user mode since the last stop, the</span>", 
"<span class=\"comment\"> * thread state might indicate that nothing needs to be done.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_ptrace_stop_needed\">arch_ptrace_stop_needed</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#info\">info</a>)<span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#arch_ptrace_stop\">arch_ptrace_stop</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * arch_ptrace_stop - Do machine-specific work before stopping for ptrace</span>", 
"<span class=\"comment\"> * @code:<span class=\"ts\"/>current-&gt;exit_code value ptrace will stop with</span>", 
"<span class=\"comment\"> * @info:<span class=\"ts\"/>siginfo_t pointer (or %NULL) for signal ptrace will stop with</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called with no locks held when arch_ptrace_stop_needed() has</span>", 
"<span class=\"comment\"> * just returned nonzero.  It is allowed to block, e.g. for user memory</span>", 
"<span class=\"comment\"> * access.  The arch can have machine-specific work to be done before</span>", 
"<span class=\"comment\"> * ptrace stops.  On ia64, register backing store gets written back to user</span>", 
"<span class=\"comment\"> * memory here.  Since this can be costly (requires dropping the siglock),</span>", 
"<span class=\"comment\"> * we only do it when the arch requires it for this particular stop, as</span>", 
"<span class=\"comment\"> * indicated by arch_ptrace_stop_needed().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_ptrace_stop\">arch_ptrace_stop</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#info\">info</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern int <a class=\"id\" href=\"#task_current_syscall\">task_current_syscall</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>, long *<a class=\"id\" href=\"#callno\">callno</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#args\">args</a>[6], unsigned int <a class=\"id\" href=\"#maxargs\">maxargs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#sp\">sp</a>, unsigned long *<a class=\"id\" href=\"#pc\">pc</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/79/398644939bfd0edb64b8884d9f1175e73055c9.xr', __xr_tmp);
