var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: nsparse - namespace interface to AML parser</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acparser.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acdispat.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"actables.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_NAMESPACE\">ACPI_NAMESPACE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"nsparse\")", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    ns_one_complete_parse</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  pass_number             - 1 or 2</span>", 
"<span class=\"comment\"> *              table_desc              - The table to be parsed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Perform one complete parse of an ACPI/AML table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_one_complete_parse\">acpi_ns_one_complete_parse</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pass_number\">pass_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#table_index\">table_index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#start_node\">start_node</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#parse_root\">parse_root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"       <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#aml_length\">aml_length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#aml_start\">aml_start</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_owner_id\">acpi_owner_id</a> <a class=\"id\" href=\"#owner_id\">owner_id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_one_complete_parse\">ns_one_complete_parse</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_tb_get_owner_id\">acpi_tb_get_owner_id</a>(<a class=\"id\" href=\"#table_index\">table_index</a>, &amp;<a class=\"id\" href=\"#owner_id\">owner_id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create and init a Root Node */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parse_root\">parse_root</a> = <a class=\"id\" href=\"#acpi_ps_create_scope_op\">acpi_ps_create_scope_op</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parse_root\">parse_root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create and initialize a new walk state */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a> = <a class=\"id\" href=\"#acpi_ds_create_walk_state\">acpi_ds_create_walk_state</a>(<a class=\"id\" href=\"#owner_id\">owner_id</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#walk_state\">walk_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_free_op\">acpi_ps_free_op</a>(<a class=\"id\" href=\"#parse_root\">parse_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_get_table_by_index\">acpi_get_table_by_index</a>(<a class=\"id\" href=\"#table_index\">table_index</a>, &amp;<a class=\"id\" href=\"#table\">table</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ds_delete_walk_state\">acpi_ds_delete_walk_state</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_free_op\">acpi_ps_free_op</a>(<a class=\"id\" href=\"#parse_root\">parse_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Table must consist of at least a complete header */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#length\">length</a> &lt; sizeof(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_BAD_HEADER\">AE_BAD_HEADER</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aml_start\">aml_start</a> = (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#table\">table</a> + sizeof(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aml_length\">aml_length</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#length\">length</a> - sizeof(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ds_init_aml_walk\">acpi_ds_init_aml_walk</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>, <a class=\"id\" href=\"#parse_root\">parse_root</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#aml_start\">aml_start</a>, <a class=\"id\" href=\"#aml_length\">aml_length</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#u8\">u8</a>) <a class=\"id\" href=\"#pass_number\">pass_number</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ds_delete_walk_state\">acpi_ds_delete_walk_state</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* start_node is the default location to load the table */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_node\">start_node</a> && <a class=\"id\" href=\"#start_node\">start_node</a> != <a class=\"id\" href=\"#acpi_gbl_root_node\">acpi_gbl_root_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ds_scope_stack_push\">acpi_ds_scope_stack_push</a>(<a class=\"id\" href=\"#start_node\">start_node</a>, <a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ds_delete_walk_state\">acpi_ds_delete_walk_state</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parse the AML */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_PARSE\">ACPI_DB_PARSE</a>, \"*PARSE* pass %u parse\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pass_number\">pass_number</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ps_parse_aml\">acpi_ps_parse_aml</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"", 
"      <a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_delete_parse_tree\">acpi_ps_delete_parse_tree</a>(<a class=\"id\" href=\"#parse_root\">parse_root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_parse_table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  table_desc      - An ACPI table descriptor for table to parse</span>", 
"<span class=\"comment\"> *              start_node      - Where to enter the table into the namespace</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Parse AML within an ACPI table and return a tree of ops</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_parse_table\">acpi_ns_parse_table</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#table_index\">table_index</a>, struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#start_node\">start_node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_parse_table\">ns_parse_table</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * AML Parse, pass 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In this pass, we load most of the namespace.  Control methods</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are not parsed until later.  A parse tree is not created.  Instead,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * each Parser Op subtree is deleted when it is finished.  This saves</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a great deal of memory, and allows a small cache of parse objects</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to service the entire parse.  The second pass of the parse then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * performs another complete parse of the AML.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_PARSE\">ACPI_DB_PARSE</a>, \"**** Start pass 1\\n\"));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_one_complete_parse\">acpi_ns_one_complete_parse</a>(<a class=\"id\" href=\"#ACPI_IMODE_LOAD_PASS1\">ACPI_IMODE_LOAD_PASS1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#table_index\">table_index</a>, <a class=\"id\" href=\"#start_node\">start_node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * AML Parse, pass 2</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In this pass, we resolve forward references and other things</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that could not be completed during the first pass.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Another complete parse of the AML is performed, but the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * overhead of this is compensated for by the fact that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parse objects are all cached.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_PARSE\">ACPI_DB_PARSE</a>, \"**** Start pass 2\\n\"));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_one_complete_parse\">acpi_ns_one_complete_parse</a>(<a class=\"id\" href=\"#ACPI_IMODE_LOAD_PASS2\">ACPI_IMODE_LOAD_PASS2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#table_index\">table_index</a>, <a class=\"id\" href=\"#start_node\">start_node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
];
xr_frag_insert('l/79/acfa35e1f400ebc9effb2d605f08910679348e.xr', __xr_tmp);
