var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_BITMAP_H\">__LINUX_BITMAP_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_BITMAP_H\">__LINUX_BITMAP_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bitmaps provide bit arrays that consume one or more unsigned</span>", 
"<span class=\"comment\"> * longs.  The bitmap interface and available operations are listed</span>", 
"<span class=\"comment\"> * here, in bitmap.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Function implementations generic to all architectures are in</span>", 
"<span class=\"comment\"> * lib/bitmap.c.  Functions implementations that are architecture</span>", 
"<span class=\"comment\"> * specific are in various include/asm-&lt;arch&gt;/bitops.h headers</span>", 
"<span class=\"comment\"> * and other arch/&lt;arch&gt; specific files.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See lib/bitmap.c for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The available bitmap operations and their rough meaning in the</span>", 
"<span class=\"comment\"> * case that the bitmap is a single unsigned long are thus:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that nbits should be always a compile time evaluable constant.</span>", 
"<span class=\"comment\"> * Otherwise many inlines will generate horrible code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * bitmap_zero(dst, nbits)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*dst = 0UL</span>", 
"<span class=\"comment\"> * bitmap_fill(dst, nbits)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*dst = ~0UL</span>", 
"<span class=\"comment\"> * bitmap_copy(dst, src, nbits)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*dst = *src</span>", 
"<span class=\"comment\"> * bitmap_and(dst, src1, src2, nbits)<span class=\"ts\"/><span class=\"ts\"/>*dst = *src1 &amp; *src2</span>", 
"<span class=\"comment\"> * bitmap_or(dst, src1, src2, nbits)<span class=\"ts\"/><span class=\"ts\"/>*dst = *src1 | *src2</span>", 
"<span class=\"comment\"> * bitmap_xor(dst, src1, src2, nbits)<span class=\"ts\"/><span class=\"ts\"/>*dst = *src1 ^ *src2</span>", 
"<span class=\"comment\"> * bitmap_andnot(dst, src1, src2, nbits)<span class=\"ts\"/>*dst = *src1 &amp; ~(*src2)</span>", 
"<span class=\"comment\"> * bitmap_complement(dst, src, nbits)<span class=\"ts\"/><span class=\"ts\"/>*dst = ~(*src)</span>", 
"<span class=\"comment\"> * bitmap_equal(src1, src2, nbits)<span class=\"ts\"/><span class=\"ts\"/>Are *src1 and *src2 equal?</span>", 
"<span class=\"comment\"> * bitmap_intersects(src1, src2, nbits) <span class=\"ts\"/>Do *src1 and *src2 overlap?</span>", 
"<span class=\"comment\"> * bitmap_subset(src1, src2, nbits)<span class=\"ts\"/><span class=\"ts\"/>Is *src1 a subset of *src2?</span>", 
"<span class=\"comment\"> * bitmap_empty(src, nbits)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Are all bits zero in *src?</span>", 
"<span class=\"comment\"> * bitmap_full(src, nbits)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Are all bits set in *src?</span>", 
"<span class=\"comment\"> * bitmap_weight(src, nbits)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Hamming Weight: number set bits</span>", 
"<span class=\"comment\"> * bitmap_set(dst, pos, nbits)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Set specified bit area</span>", 
"<span class=\"comment\"> * bitmap_clear(dst, pos, nbits)<span class=\"ts\"/><span class=\"ts\"/>Clear specified bit area</span>", 
"<span class=\"comment\"> * bitmap_find_next_zero_area(buf, len, pos, n, mask)<span class=\"ts\"/>Find bit free area</span>", 
"<span class=\"comment\"> * bitmap_shift_right(dst, src, n, nbits)<span class=\"ts\"/>*dst = *src &gt;&gt; n</span>", 
"<span class=\"comment\"> * bitmap_shift_left(dst, src, n, nbits)<span class=\"ts\"/>*dst = *src &lt;&lt; n</span>", 
"<span class=\"comment\"> * bitmap_remap(dst, src, old, new, nbits)<span class=\"ts\"/>*dst = map(old, new)(src)</span>", 
"<span class=\"comment\"> * bitmap_bitremap(oldbit, old, new, nbits)<span class=\"ts\"/>newbit = map(old, new)(oldbit)</span>", 
"<span class=\"comment\"> * bitmap_onto(dst, orig, relmap, nbits)<span class=\"ts\"/>*dst = orig relative to relmap</span>", 
"<span class=\"comment\"> * bitmap_fold(dst, orig, sz, nbits)<span class=\"ts\"/><span class=\"ts\"/>dst bits = orig bits mod sz</span>", 
"<span class=\"comment\"> * bitmap_scnprintf(buf, len, src, nbits)<span class=\"ts\"/>Print bitmap src to buf</span>", 
"<span class=\"comment\"> * bitmap_parse(buf, buflen, dst, nbits)<span class=\"ts\"/>Parse bitmap dst from kernel buf</span>", 
"<span class=\"comment\"> * bitmap_parse_user(ubuf, ulen, dst, nbits)<span class=\"ts\"/>Parse bitmap dst from user buf</span>", 
"<span class=\"comment\"> * bitmap_scnlistprintf(buf, len, src, nbits)<span class=\"ts\"/>Print bitmap src as list to buf</span>", 
"<span class=\"comment\"> * bitmap_parselist(buf, dst, nbits)<span class=\"ts\"/><span class=\"ts\"/>Parse bitmap dst from list</span>", 
"<span class=\"comment\"> * bitmap_find_free_region(bitmap, bits, order)<span class=\"ts\"/>Find and allocate bit region</span>", 
"<span class=\"comment\"> * bitmap_release_region(bitmap, pos, order)<span class=\"ts\"/>Free specified bit region</span>", 
"<span class=\"comment\"> * bitmap_allocate_region(bitmap, pos, order)<span class=\"ts\"/>Allocate specified bit region</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Also the following operations in asm/bitops.h apply to bitmaps.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * set_bit(bit, addr)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*addr |= bit</span>", 
"<span class=\"comment\"> * clear_bit(bit, addr)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*addr &amp;= ~bit</span>", 
"<span class=\"comment\"> * change_bit(bit, addr)<span class=\"ts\"/><span class=\"ts\"/>*addr ^= bit</span>", 
"<span class=\"comment\"> * test_bit(bit, addr)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Is bit set in *addr?</span>", 
"<span class=\"comment\"> * test_and_set_bit(bit, addr)<span class=\"ts\"/><span class=\"ts\"/>Set bit and return old value</span>", 
"<span class=\"comment\"> * test_and_clear_bit(bit, addr)<span class=\"ts\"/>Clear bit and return old value</span>", 
"<span class=\"comment\"> * test_and_change_bit(bit, addr)<span class=\"ts\"/>Change bit and return old value</span>", 
"<span class=\"comment\"> * find_first_zero_bit(addr, nbits)<span class=\"ts\"/>Position first zero bit in *addr</span>", 
"<span class=\"comment\"> * find_first_bit(addr, nbits)<span class=\"ts\"/><span class=\"ts\"/>Position first set bit in *addr</span>", 
"<span class=\"comment\"> * find_next_zero_bit(addr, nbits, bit)<span class=\"ts\"/>Position next zero bit in *addr &gt;= bit</span>", 
"<span class=\"comment\"> * find_next_bit(addr, nbits, bit)<span class=\"ts\"/>Position next set bit in *addr &gt;= bit</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The DECLARE_BITMAP(name,bits) macro, in linux/types.h, can be used</span>", 
"<span class=\"comment\"> * to declare an array named 'name' of just enough unsigned longs to</span>", 
"<span class=\"comment\"> * contain all bit positions from 0 to 'bits' - 1.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lib/bitmap.c provides these functions:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"extern int <a class=\"id\" href=\"#__bitmap_empty\">__bitmap_empty</a>(const unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern int <a class=\"id\" href=\"#__bitmap_full\">__bitmap_full</a>(const unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern int <a class=\"id\" href=\"#__bitmap_equal\">__bitmap_equal</a>(const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"                <span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern void <a class=\"id\" href=\"#__bitmap_complement\">__bitmap_complement</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern void <a class=\"id\" href=\"#__bitmap_shift_right\">__bitmap_shift_right</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>,", 
"                        const unsigned long *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#shift\">shift</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern void <a class=\"id\" href=\"#__bitmap_shift_left\">__bitmap_shift_left</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>,", 
"                        const unsigned long *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#shift\">shift</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern int <a class=\"id\" href=\"#__bitmap_and\">__bitmap_and</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern void <a class=\"id\" href=\"#__bitmap_or\">__bitmap_or</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern void <a class=\"id\" href=\"#__bitmap_xor\">__bitmap_xor</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern int <a class=\"id\" href=\"#__bitmap_andnot\">__bitmap_andnot</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern int <a class=\"id\" href=\"#__bitmap_intersects\">__bitmap_intersects</a>(const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern int <a class=\"id\" href=\"#__bitmap_subset\">__bitmap_subset</a>(const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern int <a class=\"id\" href=\"#__bitmap_weight\">__bitmap_weight</a>(const unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"", 
"extern void <a class=\"id\" href=\"#bitmap_set\">bitmap_set</a>(unsigned long *<a class=\"id\" href=\"#map\">map</a>, int <a class=\"id\" href=\"#i\">i</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"extern void <a class=\"id\" href=\"#bitmap_clear\">bitmap_clear</a>(unsigned long *<a class=\"id\" href=\"#map\">map</a>, int <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#nr\">nr</a>);", 
"extern unsigned long <a class=\"id\" href=\"#bitmap_find_next_zero_area\">bitmap_find_next_zero_area</a>(unsigned long *<a class=\"id\" href=\"#map\">map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#nr\">nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#align_mask\">align_mask</a>);", 
"", 
"extern int <a class=\"id\" href=\"#bitmap_scnprintf\">bitmap_scnprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"extern int <a class=\"id\" href=\"#__bitmap_parse\">__bitmap_parse</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#buflen\">buflen</a>, int <a class=\"id\" href=\"#is_user\">is_user</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"extern int <a class=\"id\" href=\"#bitmap_parse_user\">bitmap_parse_user</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>, unsigned int <a class=\"id\" href=\"#ulen\">ulen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"extern int <a class=\"id\" href=\"#bitmap_scnlistprintf\">bitmap_scnlistprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"extern int <a class=\"id\" href=\"#bitmap_parselist\">bitmap_parselist</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long *<a class=\"id\" href=\"#maskp\">maskp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>);", 
"extern void <a class=\"id\" href=\"#bitmap_remap\">bitmap_remap</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#old\">old</a>, const unsigned long *<a class=\"id\" href=\"#new\">new</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern int <a class=\"id\" href=\"#bitmap_bitremap\">bitmap_bitremap</a>(int <a class=\"id\" href=\"#oldbit\">oldbit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#old\">old</a>, const unsigned long *<a class=\"id\" href=\"#new\">new</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern void <a class=\"id\" href=\"#bitmap_onto\">bitmap_onto</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#orig\">orig</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#relmap\">relmap</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern void <a class=\"id\" href=\"#bitmap_fold\">bitmap_fold</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#orig\">orig</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#sz\">sz</a>, int <a class=\"id\" href=\"#bits\">bits</a>);", 
"extern int <a class=\"id\" href=\"#bitmap_find_free_region\">bitmap_find_free_region</a>(unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#bits\">bits</a>, int <a class=\"id\" href=\"#order\">order</a>);", 
"extern void <a class=\"id\" href=\"#bitmap_release_region\">bitmap_release_region</a>(unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#pos\">pos</a>, int <a class=\"id\" href=\"#order\">order</a>);", 
"extern int <a class=\"id\" href=\"#bitmap_allocate_region\">bitmap_allocate_region</a>(unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#pos\">pos</a>, int <a class=\"id\" href=\"#order\">order</a>);", 
"extern void <a class=\"id\" href=\"#bitmap_copy_le\">bitmap_copy_le</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#nbits\">nbits</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"(<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#nbits\">nbits</a>) % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>) ?<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(1UL<<((<a class=\"id\" href=\"#nbits\">nbits</a>) % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>))-1 : ~0UL<span class=\"ts\"/><span class=\"ts\"/>\\", 
")", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#small_const_nbits\">small_const_nbits</a>(<a class=\"id\" href=\"#nbits\">nbits</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#nbits\">nbits</a>) && (<a class=\"id\" href=\"#nbits\">nbits</a>) <= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#small_const_nbits\">small_const_nbits</a>(<a class=\"id\" href=\"#nbits\">nbits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = 0UL;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#nbits\">nbits</a>) * sizeof(unsigned long);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dst\">dst</a>, 0, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bitmap_fill\">bitmap_fill</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nlongs\">nlongs</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#nbits\">nbits</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#small_const_nbits\">small_const_nbits</a>(<a class=\"id\" href=\"#nbits\">nbits</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = (<a class=\"id\" href=\"#nlongs\">nlongs</a> - 1) * sizeof(unsigned long);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dst\">dst</a>, 0xff,  <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#nlongs\">nlongs</a> - 1] = <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bitmap_copy\">bitmap_copy</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#small_const_nbits\">small_const_nbits</a>(<a class=\"id\" href=\"#nbits\">nbits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#nbits\">nbits</a>) * sizeof(unsigned long);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#bitmap_and\">bitmap_and</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#src1\">src1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#src2\">src2</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#small_const_nbits\">small_const_nbits</a>(<a class=\"id\" href=\"#nbits\">nbits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (*<a class=\"id\" href=\"#dst\">dst</a> = *<a class=\"id\" href=\"#src1\">src1</a> &amp; *<a class=\"id\" href=\"#src2\">src2</a>) != 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__bitmap_and\">__bitmap_and</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src1\">src1</a>, <a class=\"id\" href=\"#src2\">src2</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bitmap_or\">bitmap_or</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#src1\">src1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#src2\">src2</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#small_const_nbits\">small_const_nbits</a>(<a class=\"id\" href=\"#nbits\">nbits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = *<a class=\"id\" href=\"#src1\">src1</a> | *<a class=\"id\" href=\"#src2\">src2</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bitmap_or\">__bitmap_or</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src1\">src1</a>, <a class=\"id\" href=\"#src2\">src2</a>, <a class=\"id\" href=\"#nbits\">nbits</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bitmap_xor\">bitmap_xor</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#src1\">src1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#src2\">src2</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
];
xr_frag_insert('l/79/fb29aaba7b5a0d2df3fa56ef5effd02ecd6fd7.xr', __xr_tmp);
