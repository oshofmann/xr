var __xr_tmp = [
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#map_offset_to_paddr\">map_offset_to_paddr</a>(*<a class=\"id\" href=\"#fpos\">fpos</a>, &amp;<a class=\"id\" href=\"#vmcore_list\">vmcore_list</a>, &amp;<a class=\"id\" href=\"#curr_m\">curr_m</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#curr_m\">curr_m</a>)", 
"        <span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tsz\">tsz</a> = (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - (<a class=\"id\" href=\"#start\">start</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>))) &gt; <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsz\">tsz</a> = <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Calculate left bytes in current memory segment. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_bytes\">nr_bytes</a> = (<a class=\"id\" href=\"#curr_m\">curr_m</a>-><a class=\"id\" href=\"#size\">size</a> - (<a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#curr_m\">curr_m</a>-><a class=\"id\" href=\"#paddr\">paddr</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsz\">tsz</a> &gt; <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsz\">tsz</a> = <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#buflen\">buflen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#read_from_oldmem\">read_from_oldmem</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#tsz\">tsz</a>, &amp;<a class=\"id\" href=\"#start\">start</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a> -= <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#fpos\">fpos</a> += <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> += <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acc\">acc</a> += <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= (<a class=\"id\" href=\"#curr_m\">curr_m</a>-><a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#curr_m\">curr_m</a>-><a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curr_m\">curr_m</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a> == &amp;<a class=\"id\" href=\"#vmcore_list\">vmcore_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#acc\">acc</a>;<span class=\"ts\"/><span class=\"comment\">/*EOF*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr_m\">curr_m</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#curr_m\">curr_m</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmcore\">vmcore</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#curr_m\">curr_m</a>-><a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#tsz\">tsz</a> = (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - (<a class=\"id\" href=\"#start\">start</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>))) &gt; <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsz\">tsz</a> = <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Calculate left bytes in current memory segment. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_bytes\">nr_bytes</a> = (<a class=\"id\" href=\"#curr_m\">curr_m</a>-><a class=\"id\" href=\"#size\">size</a> - (<a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#curr_m\">curr_m</a>-><a class=\"id\" href=\"#paddr\">paddr</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsz\">tsz</a> &gt; <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsz\">tsz</a> = <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#acc\">acc</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_vmcore_operations\">proc_vmcore_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#read_vmcore\">read_vmcore</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#default_llseek\">default_llseek</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#vmcore\">vmcore</a>* <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#get_new_element\">get_new_element</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#vmcore\">vmcore</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#get_vmcore_size_elf64\">get_vmcore_size_elf64</a>(char *<a class=\"id\" href=\"#elfptr\">elfptr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a> *<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a> *<a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a> = (<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a> *)<a class=\"id\" href=\"#elfptr\">elfptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a> = (<a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a>*)(<a class=\"id\" href=\"#elfptr\">elfptr</a> + sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>) + ((<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>) * sizeof(<a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#get_vmcore_size_elf32\">get_vmcore_size_elf32</a>(char *<a class=\"id\" href=\"#elfptr\">elfptr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a> *<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a> *<a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a> = (<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a> *)<a class=\"id\" href=\"#elfptr\">elfptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a> = (<a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a>*)(<a class=\"id\" href=\"#elfptr\">elfptr</a> + sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>) + ((<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>) * sizeof(<a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Merges all the PT_NOTE headers into one. */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#merge_note_headers_elf64\">merge_note_headers_elf64</a>(char *<a class=\"id\" href=\"#elfptr\">elfptr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#elfsz\">elfsz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#vc_list\">vc_list</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nr_ptnote\">nr_ptnote</a>=0, <a class=\"id\" href=\"#rc\">rc</a>=0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a> *<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a> <a class=\"id\" href=\"#phdr\">phdr</a>, *<a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf64_Nhdr\">Elf64_Nhdr</a> *<a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#phdr_sz\">phdr_sz</a> = 0, <a class=\"id\" href=\"#note_off\">note_off</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a> = (<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a> *)<a class=\"id\" href=\"#elfptr\">elfptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a> = (<a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a>*)(<a class=\"id\" href=\"#elfptr\">elfptr</a> + sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#notes_section\">notes_section</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmcore\">vmcore</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#max_sz\">max_sz</a>, <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#real_sz\">real_sz</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_type\">p_type</a> != <a class=\"id\" href=\"#PT_NOTE\">PT_NOTE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_ptnote\">nr_ptnote</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_sz\">max_sz</a> = <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notes_section\">notes_section</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#max_sz\">max_sz</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#notes_section\">notes_section</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#read_from_oldmem\">read_from_oldmem</a>(<a class=\"id\" href=\"#notes_section\">notes_section</a>, <a class=\"id\" href=\"#max_sz\">max_sz</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#notes_section\">notes_section</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a> = <a class=\"id\" href=\"#notes_section\">notes_section</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#max_sz\">max_sz</a>; <a class=\"id\" href=\"#j\">j</a> += <a class=\"id\" href=\"#sz\">sz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a>-><a class=\"id\" href=\"#n_namesz\">n_namesz</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> = sizeof(<a class=\"id\" href=\"#Elf64_Nhdr\">Elf64_Nhdr</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a>-><a class=\"id\" href=\"#n_namesz\">n_namesz</a> + 3) &amp; ~3) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a>-><a class=\"id\" href=\"#n_descsz\">n_descsz</a> + 3) &amp; ~3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_sz\">real_sz</a> += <a class=\"id\" href=\"#sz\">sz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a> = (<a class=\"id\" href=\"#Elf64_Nhdr\">Elf64_Nhdr</a>*)((char*)<a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a> + <a class=\"id\" href=\"#sz\">sz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Add this contiguous chunk of notes section to vmcore list.*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#get_new_element\">get_new_element</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#notes_section\">notes_section</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#real_sz\">real_sz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#vc_list\">vc_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr_sz\">phdr_sz</a> += <a class=\"id\" href=\"#real_sz\">real_sz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#notes_section\">notes_section</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Prepare merged PT_NOTE program header. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_type\">p_type</a>    = <a class=\"id\" href=\"#PT_NOTE\">PT_NOTE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_flags\">p_flags</a>   = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note_off\">note_off</a> = sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a> - <a class=\"id\" href=\"#nr_ptnote\">nr_ptnote</a> +1) * sizeof(<a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_offset\">p_offset</a>  = <a class=\"id\" href=\"#note_off\">note_off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>   = <a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_paddr\">p_paddr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_filesz\">p_filesz</a>  = <a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_memsz\">p_memsz</a> = <a class=\"id\" href=\"#phdr_sz\">phdr_sz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_align\">p_align</a>   = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add merged PT_NOTE program header*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#elfptr\">elfptr</a> + sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#phdr\">phdr</a>, sizeof(<a class=\"id\" href=\"#phdr\">phdr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> += sizeof(<a class=\"id\" href=\"#phdr\">phdr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove unwanted PT_NOTE program headers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#nr_ptnote\">nr_ptnote</a> - 1) * sizeof(<a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#elfsz\">elfsz</a> = *<a class=\"id\" href=\"#elfsz\">elfsz</a> - <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#tmp\">tmp</a>+<a class=\"id\" href=\"#i\">i</a>, ((*<a class=\"id\" href=\"#elfsz\">elfsz</a>)-sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>)-sizeof(<a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Modify e_phnum to reflect merged headers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a> = <a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a> - <a class=\"id\" href=\"#nr_ptnote\">nr_ptnote</a> + 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Merges all the PT_NOTE headers into one. */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#merge_note_headers_elf32\">merge_note_headers_elf32</a>(char *<a class=\"id\" href=\"#elfptr\">elfptr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#elfsz\">elfsz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#vc_list\">vc_list</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nr_ptnote\">nr_ptnote</a>=0, <a class=\"id\" href=\"#rc\">rc</a>=0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a> *<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a> <a class=\"id\" href=\"#phdr\">phdr</a>, *<a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf32_Nhdr\">Elf32_Nhdr</a> *<a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#phdr_sz\">phdr_sz</a> = 0, <a class=\"id\" href=\"#note_off\">note_off</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a> = (<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a> *)<a class=\"id\" href=\"#elfptr\">elfptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a> = (<a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a>*)(<a class=\"id\" href=\"#elfptr\">elfptr</a> + sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#notes_section\">notes_section</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmcore\">vmcore</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#max_sz\">max_sz</a>, <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#real_sz\">real_sz</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_type\">p_type</a> != <a class=\"id\" href=\"#PT_NOTE\">PT_NOTE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_ptnote\">nr_ptnote</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_sz\">max_sz</a> = <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notes_section\">notes_section</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#max_sz\">max_sz</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#notes_section\">notes_section</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#read_from_oldmem\">read_from_oldmem</a>(<a class=\"id\" href=\"#notes_section\">notes_section</a>, <a class=\"id\" href=\"#max_sz\">max_sz</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#notes_section\">notes_section</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a> = <a class=\"id\" href=\"#notes_section\">notes_section</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#max_sz\">max_sz</a>; <a class=\"id\" href=\"#j\">j</a> += <a class=\"id\" href=\"#sz\">sz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a>-><a class=\"id\" href=\"#n_namesz\">n_namesz</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> = sizeof(<a class=\"id\" href=\"#Elf32_Nhdr\">Elf32_Nhdr</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a>-><a class=\"id\" href=\"#n_namesz\">n_namesz</a> + 3) &amp; ~3) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a>-><a class=\"id\" href=\"#n_descsz\">n_descsz</a> + 3) &amp; ~3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_sz\">real_sz</a> += <a class=\"id\" href=\"#sz\">sz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a> = (<a class=\"id\" href=\"#Elf32_Nhdr\">Elf32_Nhdr</a>*)((char*)<a class=\"id\" href=\"#nhdr_ptr\">nhdr_ptr</a> + <a class=\"id\" href=\"#sz\">sz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Add this contiguous chunk of notes section to vmcore list.*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#get_new_element\">get_new_element</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#notes_section\">notes_section</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#real_sz\">real_sz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#vc_list\">vc_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr_sz\">phdr_sz</a> += <a class=\"id\" href=\"#real_sz\">real_sz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#notes_section\">notes_section</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Prepare merged PT_NOTE program header. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_type\">p_type</a>    = <a class=\"id\" href=\"#PT_NOTE\">PT_NOTE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_flags\">p_flags</a>   = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note_off\">note_off</a> = sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a> - <a class=\"id\" href=\"#nr_ptnote\">nr_ptnote</a> +1) * sizeof(<a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_offset\">p_offset</a>  = <a class=\"id\" href=\"#note_off\">note_off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>   = <a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_paddr\">p_paddr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_filesz\">p_filesz</a>  = <a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_memsz\">p_memsz</a> = <a class=\"id\" href=\"#phdr_sz\">phdr_sz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>.<a class=\"id\" href=\"#p_align\">p_align</a>   = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add merged PT_NOTE program header*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#elfptr\">elfptr</a> + sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#phdr\">phdr</a>, sizeof(<a class=\"id\" href=\"#phdr\">phdr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> += sizeof(<a class=\"id\" href=\"#phdr\">phdr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove unwanted PT_NOTE program headers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#nr_ptnote\">nr_ptnote</a> - 1) * sizeof(<a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#elfsz\">elfsz</a> = *<a class=\"id\" href=\"#elfsz\">elfsz</a> - <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#tmp\">tmp</a>+<a class=\"id\" href=\"#i\">i</a>, ((*<a class=\"id\" href=\"#elfsz\">elfsz</a>)-sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>)-sizeof(<a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Modify e_phnum to reflect merged headers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a> = <a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a> - <a class=\"id\" href=\"#nr_ptnote\">nr_ptnote</a> + 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Add memory chunks represented by program headers to vmcore list. Also update</span>", 
"<span class=\"comment\"> * the new offset fields of exported program headers. */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#process_ptload_program_headers_elf64\">process_ptload_program_headers_elf64</a>(char *<a class=\"id\" href=\"#elfptr\">elfptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#elfsz\">elfsz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#vc_list\">vc_list</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a> *<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a> *<a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#vmcore_off\">vmcore_off</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmcore\">vmcore</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a> = (<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a> *)<a class=\"id\" href=\"#elfptr\">elfptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a> = (<a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a>*)(<a class=\"id\" href=\"#elfptr\">elfptr</a> + sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>)); <span class=\"comment\">/* PT_NOTE hdr */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First program header is PT_NOTE header. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmcore_off\">vmcore_off</a> = sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>) * sizeof(<a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a>; <span class=\"comment\">/* Note sections */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_type\">p_type</a> != <a class=\"id\" href=\"#PT_LOAD\">PT_LOAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Add this contiguous chunk of memory to vmcore list.*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#get_new_element\">get_new_element</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#vc_list\">vc_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update the program header offset. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a> = <a class=\"id\" href=\"#vmcore_off\">vmcore_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmcore_off\">vmcore_off</a> = <a class=\"id\" href=\"#vmcore_off\">vmcore_off</a> + <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#process_ptload_program_headers_elf32\">process_ptload_program_headers_elf32</a>(char *<a class=\"id\" href=\"#elfptr\">elfptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#elfsz\">elfsz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#vc_list\">vc_list</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a> *<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a> *<a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#vmcore_off\">vmcore_off</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmcore\">vmcore</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a> = (<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a> *)<a class=\"id\" href=\"#elfptr\">elfptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a> = (<a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a>*)(<a class=\"id\" href=\"#elfptr\">elfptr</a> + sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>)); <span class=\"comment\">/* PT_NOTE hdr */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First program header is PT_NOTE header. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmcore_off\">vmcore_off</a> = sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>) * sizeof(<a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a>; <span class=\"comment\">/* Note sections */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_type\">p_type</a> != <a class=\"id\" href=\"#PT_LOAD\">PT_LOAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Add this contiguous chunk of memory to vmcore list.*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#get_new_element\">get_new_element</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#vc_list\">vc_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update the program header offset */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a> = <a class=\"id\" href=\"#vmcore_off\">vmcore_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmcore_off\">vmcore_off</a> = <a class=\"id\" href=\"#vmcore_off\">vmcore_off</a> + <a class=\"id\" href=\"#phdr_ptr\">phdr_ptr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Sets offset fields of vmcore elements. */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_vmcore_list_offsets_elf64\">set_vmcore_list_offsets_elf64</a>(char *<a class=\"id\" href=\"#elfptr\">elfptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#vc_list\">vc_list</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#vmcore_off\">vmcore_off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a> *<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmcore\">vmcore</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a> = (<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a> *)<a class=\"id\" href=\"#elfptr\">elfptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip Elf header and program headers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmcore_off\">vmcore_off</a> = sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>) * sizeof(<a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#vc_list\">vc_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#vmcore_off\">vmcore_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmcore_off\">vmcore_off</a> += <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Sets offset fields of vmcore elements. */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_vmcore_list_offsets_elf32\">set_vmcore_list_offsets_elf32</a>(char *<a class=\"id\" href=\"#elfptr\">elfptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#vc_list\">vc_list</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#vmcore_off\">vmcore_off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a> *<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmcore\">vmcore</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a> = (<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a> *)<a class=\"id\" href=\"#elfptr\">elfptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip Elf header and program headers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmcore_off\">vmcore_off</a> = sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ehdr_ptr\">ehdr_ptr</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a>) * sizeof(<a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#vc_list\">vc_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#vmcore_off\">vmcore_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmcore_off\">vmcore_off</a> += <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_crash_elf64_headers\">parse_crash_elf64_headers</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>=0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a> <a class=\"id\" href=\"#ehdr\">ehdr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#elfcorehdr_addr\">elfcorehdr_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Read Elf header */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#read_from_oldmem\">read_from_oldmem</a>((char*)&amp;<a class=\"id\" href=\"#ehdr\">ehdr</a>, sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>), &amp;<a class=\"id\" href=\"#addr\">addr</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do some basic Verification. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_ident\">e_ident</a>, <a class=\"id\" href=\"#ELFMAG\">ELFMAG</a>, <a class=\"id\" href=\"#SELFMAG\">SELFMAG</a>) != 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_type\">e_type</a> != <a class=\"id\" href=\"#ET_CORE\">ET_CORE</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#vmcore_elf_check_arch\">vmcore_elf_check_arch</a>(&amp;<a class=\"id\" href=\"#ehdr\">ehdr</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_CLASS\">EI_CLASS</a>] != <a class=\"id\" href=\"#ELFCLASS64\">ELFCLASS64</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_VERSION\">EI_VERSION</a>] != <a class=\"id\" href=\"#EV_CURRENT\">EV_CURRENT</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_version\">e_version</a> != <a class=\"id\" href=\"#EV_CURRENT\">EV_CURRENT</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_ehsize\">e_ehsize</a> != sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_phentsize\">e_phentsize</a> != sizeof(<a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Warning: Core image elf header is not\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"sane\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Read in all elf headers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elfcorebuf_sz\">elfcorebuf_sz</a> = sizeof(<a class=\"id\" href=\"#Elf64_Ehdr\">Elf64_Ehdr</a>) + <a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a> * sizeof(<a class=\"id\" href=\"#Elf64_Phdr\">Elf64_Phdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#elfcorebuf_sz\">elfcorebuf_sz</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#elfcorehdr_addr\">elfcorehdr_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#read_from_oldmem\">read_from_oldmem</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>, <a class=\"id\" href=\"#elfcorebuf_sz\">elfcorebuf_sz</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Merge all PT_NOTE headers into one. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#merge_note_headers_elf64\">merge_note_headers_elf64</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>, &amp;<a class=\"id\" href=\"#elfcorebuf_sz\">elfcorebuf_sz</a>, &amp;<a class=\"id\" href=\"#vmcore_list\">vmcore_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#process_ptload_program_headers_elf64\">process_ptload_program_headers_elf64</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>, <a class=\"id\" href=\"#elfcorebuf_sz\">elfcorebuf_sz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#vmcore_list\">vmcore_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_vmcore_list_offsets_elf64\">set_vmcore_list_offsets_elf64</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>, &amp;<a class=\"id\" href=\"#vmcore_list\">vmcore_list</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_crash_elf32_headers\">parse_crash_elf32_headers</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>=0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a> <a class=\"id\" href=\"#ehdr\">ehdr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#elfcorehdr_addr\">elfcorehdr_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Read Elf header */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#read_from_oldmem\">read_from_oldmem</a>((char*)&amp;<a class=\"id\" href=\"#ehdr\">ehdr</a>, sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>), &amp;<a class=\"id\" href=\"#addr\">addr</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do some basic Verification. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_ident\">e_ident</a>, <a class=\"id\" href=\"#ELFMAG\">ELFMAG</a>, <a class=\"id\" href=\"#SELFMAG\">SELFMAG</a>) != 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_type\">e_type</a> != <a class=\"id\" href=\"#ET_CORE\">ET_CORE</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#elf_check_arch\">elf_check_arch</a>(&amp;<a class=\"id\" href=\"#ehdr\">ehdr</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_CLASS\">EI_CLASS</a>] != <a class=\"id\" href=\"#ELFCLASS32\">ELFCLASS32</a>||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_VERSION\">EI_VERSION</a>] != <a class=\"id\" href=\"#EV_CURRENT\">EV_CURRENT</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_version\">e_version</a> != <a class=\"id\" href=\"#EV_CURRENT\">EV_CURRENT</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_ehsize\">e_ehsize</a> != sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_phentsize\">e_phentsize</a> != sizeof(<a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Warning: Core image elf header is not\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"sane\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Read in all elf headers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elfcorebuf_sz\">elfcorebuf_sz</a> = sizeof(<a class=\"id\" href=\"#Elf32_Ehdr\">Elf32_Ehdr</a>) + <a class=\"id\" href=\"#ehdr\">ehdr</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a> * sizeof(<a class=\"id\" href=\"#Elf32_Phdr\">Elf32_Phdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#elfcorebuf_sz\">elfcorebuf_sz</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#elfcorehdr_addr\">elfcorehdr_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#read_from_oldmem\">read_from_oldmem</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>, <a class=\"id\" href=\"#elfcorebuf_sz\">elfcorebuf_sz</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Merge all PT_NOTE headers into one. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#merge_note_headers_elf32\">merge_note_headers_elf32</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>, &amp;<a class=\"id\" href=\"#elfcorebuf_sz\">elfcorebuf_sz</a>, &amp;<a class=\"id\" href=\"#vmcore_list\">vmcore_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#process_ptload_program_headers_elf32\">process_ptload_program_headers_elf32</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>, <a class=\"id\" href=\"#elfcorebuf_sz\">elfcorebuf_sz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#vmcore_list\">vmcore_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_vmcore_list_offsets_elf32\">set_vmcore_list_offsets_elf32</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>, &amp;<a class=\"id\" href=\"#vmcore_list\">vmcore_list</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_crash_elf_headers\">parse_crash_elf_headers</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_NIDENT\">EI_NIDENT</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>=0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#elfcorehdr_addr\">elfcorehdr_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#read_from_oldmem\">read_from_oldmem</a>(<a class=\"id\" href=\"#e_ident\">e_ident</a>, <a class=\"id\" href=\"#EI_NIDENT\">EI_NIDENT</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#e_ident\">e_ident</a>, <a class=\"id\" href=\"#ELFMAG\">ELFMAG</a>, <a class=\"id\" href=\"#SELFMAG\">SELFMAG</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Warning: Core image elf header\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" not found\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_CLASS\">EI_CLASS</a>] == <a class=\"id\" href=\"#ELFCLASS64\">ELFCLASS64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#parse_crash_elf64_headers\">parse_crash_elf64_headers</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Determine vmcore size. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmcore_size\">vmcore_size</a> = <a class=\"id\" href=\"#get_vmcore_size_elf64\">get_vmcore_size_elf64</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_CLASS\">EI_CLASS</a>] == <a class=\"id\" href=\"#ELFCLASS32\">ELFCLASS32</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#parse_crash_elf32_headers\">parse_crash_elf32_headers</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Determine vmcore size. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmcore_size\">vmcore_size</a> = <a class=\"id\" href=\"#get_vmcore_size_elf32\">get_vmcore_size_elf32</a>(<a class=\"id\" href=\"#elfcorebuf\">elfcorebuf</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Warning: Core image elf header is not\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" sane\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Init function for vmcore module. */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vmcore_init\">vmcore_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If elfcorehdr= has been passed in cmdline, then capture the dump.*/</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#is_vmcore_usable\">is_vmcore_usable</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#parse_crash_elf_headers\">parse_crash_elf_headers</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Kdump: vmcore not initialized\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_vmcore\">proc_vmcore</a> = <a class=\"id\" href=\"#proc_create\">proc_create</a>(\"vmcore\", <a class=\"id\" href=\"#S_IRUSR\">S_IRUSR</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_vmcore_operations\">proc_vmcore_operations</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#proc_vmcore\">proc_vmcore</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#proc_vmcore\">proc_vmcore</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#vmcore_size\">vmcore_size</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#vmcore_init\">vmcore_init</a>)", 
];
xr_frag_insert('l/7a/60c4c9d0cb171d13fb3e9d2c18285d6a968b11.xr', __xr_tmp);
