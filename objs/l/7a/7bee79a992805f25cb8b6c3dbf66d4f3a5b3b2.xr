var __xr_tmp = [
"<span class=\"comment\">/* audit -- definition of audit_context structure and supporting types </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 2003-2004 Red Hat, Inc.</span>", 
"<span class=\"comment\"> * Copyright 2005 Hewlett-Packard Development Company, L.P.</span>", 
"<span class=\"comment\"> * Copyright 2005 IBM Corporation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* 0 = no checking</span>", 
"<span class=\"comment\">   1 = put_count checking</span>", 
"<span class=\"comment\">   2 = verbose put_count checking</span>", 
"<span class=\"comment\">*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AUDIT_DEBUG\">AUDIT_DEBUG</a> 0", 
"", 
"<span class=\"comment\">/* At task start time, the audit_state is set in the audit_context using</span>", 
"<span class=\"comment\">   a per-task filter.  At syscall entry, the audit_state is augmented by</span>", 
"<span class=\"comment\">   the syscall filter. */</span>", 
"enum <a class=\"id\" href=\"#audit_state\">audit_state</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AUDIT_DISABLED\">AUDIT_DISABLED</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Do not create per-task audit_context.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * No syscall-specific audit records can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * be generated. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AUDIT_SETUP_CONTEXT\">AUDIT_SETUP_CONTEXT</a>,<span class=\"ts\"/><span class=\"comment\">/* Create the per-task audit_context,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but don't necessarily fill it in at</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * syscall entry time (i.e., filter</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * instead). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AUDIT_BUILD_CONTEXT\">AUDIT_BUILD_CONTEXT</a>,<span class=\"ts\"/><span class=\"comment\">/* Create the per-task audit_context,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and always fill it in at syscall</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * entry time.  This makes a full</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * syscall record available if some</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * other part of the kernel decides it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * should be recorded. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AUDIT_RECORD_CONTEXT\">AUDIT_RECORD_CONTEXT</a><span class=\"ts\"/><span class=\"comment\">/* Create the per-task audit_context,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * always fill it in at syscall entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * time, and always write out the audit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * record at syscall exit time.  */</span>", 
"};", 
"", 
"<span class=\"comment\">/* Rule lists */</span>", 
"struct <a class=\"id\" href=\"#audit_watch\">audit_watch</a>;", 
"struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a>;", 
"struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a>;", 
"", 
"struct <a class=\"id\" href=\"#audit_entry\">audit_entry</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu\">rcu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a><span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"extern int <a class=\"id\" href=\"#audit_enabled\">audit_enabled</a>;", 
"extern int <a class=\"id\" href=\"#audit_ever_enabled\">audit_ever_enabled</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern int <a class=\"id\" href=\"#audit_pid\">audit_pid</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AUDIT_INODE_BUCKETS\">AUDIT_INODE_BUCKETS</a><span class=\"ts\"/>32", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#audit_inode_hash\">audit_inode_hash</a>[<a class=\"id\" href=\"#AUDIT_INODE_BUCKETS\">AUDIT_INODE_BUCKETS</a>];", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#audit_hash_ino\">audit_hash_ino</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ino\">ino</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ino\">ino</a> &amp; (<a class=\"id\" href=\"#AUDIT_INODE_BUCKETS\">AUDIT_INODE_BUCKETS</a>-1));", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#audit_match_class\">audit_match_class</a>(int <a class=\"id\" href=\"#class\">class</a>, unsigned <a class=\"id\" href=\"#syscall\">syscall</a>);", 
"extern int <a class=\"id\" href=\"#audit_comparator\">audit_comparator</a>(const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#left\">left</a>, const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#op\">op</a>, const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#right\">right</a>);", 
"extern int <a class=\"id\" href=\"#audit_compare_dname_path\">audit_compare_dname_path</a>(const char *<a class=\"id\" href=\"#dname\">dname</a>, const char *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int *<a class=\"id\" href=\"#dirlen\">dirlen</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<span class=\"ts\"/>    <a class=\"id\" href=\"#audit_make_reply\">audit_make_reply</a>(int <a class=\"id\" href=\"#pid\">pid</a>, int <a class=\"id\" href=\"#seq\">seq</a>, int <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#done\">done</a>, int <a class=\"id\" href=\"#multi\">multi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#payload\">payload</a>, int <a class=\"id\" href=\"#size\">size</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#audit_send_reply\">audit_send_reply</a>(int <a class=\"id\" href=\"#pid\">pid</a>, int <a class=\"id\" href=\"#seq\">seq</a>, int <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#done\">done</a>, int <a class=\"id\" href=\"#multi\">multi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#payload\">payload</a>, int <a class=\"id\" href=\"#size\">size</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#audit_panic\">audit_panic</a>(const char *<a class=\"id\" href=\"#message\">message</a>);", 
"", 
"struct <a class=\"id\" href=\"#audit_netlink_list\">audit_netlink_list</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> <a class=\"id\" href=\"#q\">q</a>;", 
"};", 
"", 
"int <a class=\"id\" href=\"#audit_send_list\">audit_send_list</a>(void *);", 
"", 
"extern int <a class=\"id\" href=\"#selinux_audit_rule_update\">selinux_audit_rule_update</a>(void);", 
"", 
"extern struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>;", 
"extern void <a class=\"id\" href=\"#audit_free_rule_rcu\">audit_free_rule_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *);", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#audit_filter_list\">audit_filter_list</a>[];", 
"", 
"extern struct <a class=\"id\" href=\"#audit_entry\">audit_entry</a> *<a class=\"id\" href=\"#audit_dupe_rule\">audit_dupe_rule</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#old\">old</a>);", 
"", 
"<span class=\"comment\">/* audit watch functions */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT_WATCH\">CONFIG_AUDIT_WATCH</a>", 
"extern void <a class=\"id\" href=\"#audit_put_watch\">audit_put_watch</a>(struct <a class=\"id\" href=\"#audit_watch\">audit_watch</a> *<a class=\"id\" href=\"#watch\">watch</a>);", 
"extern void <a class=\"id\" href=\"#audit_get_watch\">audit_get_watch</a>(struct <a class=\"id\" href=\"#audit_watch\">audit_watch</a> *<a class=\"id\" href=\"#watch\">watch</a>);", 
"extern int <a class=\"id\" href=\"#audit_to_watch\">audit_to_watch</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#krule\">krule</a>, char *<a class=\"id\" href=\"#path\">path</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#op\">op</a>);", 
"extern int <a class=\"id\" href=\"#audit_add_watch\">audit_add_watch</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#krule\">krule</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> **<a class=\"id\" href=\"#list\">list</a>);", 
"extern void <a class=\"id\" href=\"#audit_remove_watch_rule\">audit_remove_watch_rule</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#krule\">krule</a>);", 
"extern char *<a class=\"id\" href=\"#audit_watch_path\">audit_watch_path</a>(struct <a class=\"id\" href=\"#audit_watch\">audit_watch</a> *<a class=\"id\" href=\"#watch\">watch</a>);", 
"extern int <a class=\"id\" href=\"#audit_watch_compare\">audit_watch_compare</a>(struct <a class=\"id\" href=\"#audit_watch\">audit_watch</a> *<a class=\"id\" href=\"#watch\">watch</a>, unsigned long <a class=\"id\" href=\"#ino\">ino</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_put_watch\">audit_put_watch</a>(<a class=\"id\" href=\"#w\">w</a>) {}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_get_watch\">audit_get_watch</a>(<a class=\"id\" href=\"#w\">w</a>) {}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_to_watch\">audit_to_watch</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#o\">o</a>) (-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_add_watch\">audit_add_watch</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#l\">l</a>) (-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_remove_watch_rule\">audit_remove_watch_rule</a>(<a class=\"id\" href=\"#k\">k</a>) <a class=\"id\" href=\"#BUG\">BUG</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_watch_path\">audit_watch_path</a>(<a class=\"id\" href=\"#w\">w</a>) \"\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_watch_compare\">audit_watch_compare</a>(<a class=\"id\" href=\"#w\">w</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#d\">d</a>) 0", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_AUDIT_WATCH */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT_TREE\">CONFIG_AUDIT_TREE</a>", 
"extern struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#audit_tree_lookup\">audit_tree_lookup</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#audit_put_chunk\">audit_put_chunk</a>(struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *);", 
"extern int <a class=\"id\" href=\"#audit_tree_match\">audit_tree_match</a>(struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *, struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *);", 
"extern int <a class=\"id\" href=\"#audit_make_tree\">audit_make_tree</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *, char *, <a class=\"id\" href=\"#u32\">u32</a>);", 
"extern int <a class=\"id\" href=\"#audit_add_tree_rule\">audit_add_tree_rule</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *);", 
"extern int <a class=\"id\" href=\"#audit_remove_tree_rule\">audit_remove_tree_rule</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *);", 
"extern void <a class=\"id\" href=\"#audit_trim_trees\">audit_trim_trees</a>(void);", 
"extern int <a class=\"id\" href=\"#audit_tag_tree\">audit_tag_tree</a>(char *<a class=\"id\" href=\"#old\">old</a>, char *<a class=\"id\" href=\"#new\">new</a>);", 
"extern const char *<a class=\"id\" href=\"#audit_tree_path\">audit_tree_path</a>(struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *);", 
"extern void <a class=\"id\" href=\"#audit_put_tree\">audit_put_tree</a>(struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *);", 
"extern void <a class=\"id\" href=\"#audit_kill_trees\">audit_kill_trees</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_remove_tree_rule\">audit_remove_tree_rule</a>(<a class=\"id\" href=\"#rule\">rule</a>) <a class=\"id\" href=\"#BUG\">BUG</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_add_tree_rule\">audit_add_tree_rule</a>(<a class=\"id\" href=\"#rule\">rule</a>) -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_make_tree\">audit_make_tree</a>(<a class=\"id\" href=\"#rule\">rule</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#op\">op</a>) -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_trim_trees\">audit_trim_trees</a>() (void)0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_put_tree\">audit_put_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>) (void)0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_tag_tree\">audit_tag_tree</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>) -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_tree_path\">audit_tree_path</a>(<a class=\"id\" href=\"#rule\">rule</a>) \"\"<span class=\"ts\"/><span class=\"comment\">/* never called */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_kill_trees\">audit_kill_trees</a>(<a class=\"id\" href=\"#list\">list</a>) <a class=\"id\" href=\"#BUG\">BUG</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern char *<a class=\"id\" href=\"#audit_unpack_string\">audit_unpack_string</a>(void **, <a class=\"id\" href=\"#size_t\">size_t</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"", 
"extern <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#audit_sig_pid\">audit_sig_pid</a>;", 
"extern <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#audit_sig_uid\">audit_sig_uid</a>;", 
"extern <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#audit_sig_sid\">audit_sig_sid</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDITSYSCALL\">CONFIG_AUDITSYSCALL</a>", 
"extern int <a class=\"id\" href=\"#__audit_signal_info\">__audit_signal_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#audit_signal_info\">audit_signal_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#audit_pid\">audit_pid</a> && <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#tgid\">tgid</a> == <a class=\"id\" href=\"#audit_pid\">audit_pid</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#audit_signals\">audit_signals</a> && !<a class=\"id\" href=\"#audit_dummy_context\">audit_dummy_context</a>())))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__audit_signal_info\">__audit_signal_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"extern void <a class=\"id\" href=\"#audit_filter_inodes\">audit_filter_inodes</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, struct <a class=\"id\" href=\"#audit_context\">audit_context</a> *);", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#audit_killed_trees\">audit_killed_trees</a>(void);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_signal_info\">audit_signal_info</a>(<a class=\"id\" href=\"#s\">s</a>,<a class=\"id\" href=\"#t\">t</a>) <a class=\"id\" href=\"#AUDIT_DISABLED\">AUDIT_DISABLED</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#audit_filter_inodes\">audit_filter_inodes</a>(<a class=\"id\" href=\"#t\">t</a>,<a class=\"id\" href=\"#c\">c</a>) <a class=\"id\" href=\"#AUDIT_DISABLED\">AUDIT_DISABLED</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>;", 
];
xr_frag_insert('l/7a/7bee79a992805f25cb8b6c3dbf66d4f3a5b3b2.xr', __xr_tmp);
