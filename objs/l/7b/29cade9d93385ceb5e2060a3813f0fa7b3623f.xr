var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#tcp6_pseudohdr\">tcp6_pseudohdr</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a><span class=\"ts\"/><a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> <a class=\"id\" href=\"#daddr\">daddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>;<span class=\"ts\"/><span class=\"comment\">/* including padding */</span>", 
"};", 
"", 
"union <a class=\"id\" href=\"#tcp_md5sum_block\">tcp_md5sum_block</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp4_pseudohdr\">tcp4_pseudohdr</a> <a class=\"id\" href=\"#ip4\">ip4</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp6_pseudohdr\">tcp6_pseudohdr</a> <a class=\"id\" href=\"#ip6\">ip6</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/* - pool: digest algorithm, hash description and scratch buffer */</span>", 
"struct <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hash_desc\">hash_desc</a><span class=\"ts\"/><a class=\"id\" href=\"#md5_desc\">md5_desc</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#tcp_md5sum_block\">tcp_md5sum_block</a><span class=\"ts\"/><a class=\"id\" href=\"#md5_blk\">md5_blk</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TCP_MD5SIG_MAXKEYS\">TCP_MD5SIG_MAXKEYS</a><span class=\"ts\"/>(~(<a class=\"id\" href=\"#u32\">u32</a>)0)<span class=\"ts\"/><span class=\"comment\">/* really?! */</span>", 
"", 
"<span class=\"comment\">/* - functions */</span>", 
"extern int <a class=\"id\" href=\"#tcp_v4_md5_hash_skb\">tcp_v4_md5_hash_skb</a>(char *<a class=\"id\" href=\"#md5_hash\">md5_hash</a>, struct <a class=\"id\" href=\"#tcp_md5sig_key\">tcp_md5sig_key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#request_sock\">request_sock</a> *<a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern struct <a class=\"id\" href=\"#tcp_md5sig_key\">tcp_md5sig_key</a> * <a class=\"id\" href=\"#tcp_v4_md5_lookup\">tcp_v4_md5_lookup</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#addr_sk\">addr_sk</a>);", 
"extern int <a class=\"id\" href=\"#tcp_v4_md5_do_add\">tcp_v4_md5_do_add</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#newkey\">newkey</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#newkeylen\">newkeylen</a>);", 
"extern int <a class=\"id\" href=\"#tcp_v4_md5_do_del\">tcp_v4_md5_do_del</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TCP_MD5SIG\">CONFIG_TCP_MD5SIG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tcp_twsk_md5_key\">tcp_twsk_md5_key</a>(<a class=\"id\" href=\"#twsk\">twsk</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#twsk\">twsk</a>)-><a class=\"id\" href=\"#tw_md5_keylen\">tw_md5_keylen</a> ? <span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;(struct <a class=\"id\" href=\"#tcp_md5sig_key\">tcp_md5sig_key</a>) {<span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#key\">key</a> = (<a class=\"id\" href=\"#twsk\">twsk</a>)-><a class=\"id\" href=\"#tw_md5_key\">tw_md5_key</a>,<span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#keylen\">keylen</a> = (<a class=\"id\" href=\"#twsk\">twsk</a>)-><a class=\"id\" href=\"#tw_md5_keylen\">tw_md5_keylen</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} : <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tcp_twsk_md5_key\">tcp_twsk_md5_key</a>(<a class=\"id\" href=\"#twsk\">twsk</a>)<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern struct <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a> * <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#tcp_alloc_md5sig_pool\">tcp_alloc_md5sig_pool</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *);", 
"extern void <a class=\"id\" href=\"#tcp_free_md5sig_pool\">tcp_free_md5sig_pool</a>(void);", 
"", 
"extern struct <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a><span class=\"ts\"/>*<a class=\"id\" href=\"#tcp_get_md5sig_pool\">tcp_get_md5sig_pool</a>(void);", 
"extern void <a class=\"id\" href=\"#tcp_put_md5sig_pool\">tcp_put_md5sig_pool</a>(void);", 
"", 
"extern int <a class=\"id\" href=\"#tcp_md5_hash_header\">tcp_md5_hash_header</a>(struct <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a> *, struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *);", 
"extern int <a class=\"id\" href=\"#tcp_md5_hash_skb_data\">tcp_md5_hash_skb_data</a>(struct <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a> *, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned <a class=\"id\" href=\"#header_len\">header_len</a>);", 
"extern int <a class=\"id\" href=\"#tcp_md5_hash_key\">tcp_md5_hash_key</a>(struct <a class=\"id\" href=\"#tcp_md5sig_pool\">tcp_md5sig_pool</a> *<a class=\"id\" href=\"#hp\">hp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#tcp_md5sig_key\">tcp_md5sig_key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"comment\">/* write queue abstraction */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_write_queue_purge\">tcp_write_queue_purge</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#__skb_dequeue\">__skb_dequeue</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_wmem_free_skb\">sk_wmem_free_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_mem_reclaim\">sk_mem_reclaim</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_clear_all_retrans_hints\">tcp_clear_all_retrans_hints</a>(<a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_peek\">skb_peek</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_write_queue_tail\">tcp_write_queue_tail</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_peek_tail\">skb_peek_tail</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_write_queue_next\">tcp_write_queue_next</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_queue_next\">skb_queue_next</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_write_queue_prev\">tcp_write_queue_prev</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_queue_prev\">skb_queue_prev</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tcp_for_write_queue\">tcp_for_write_queue</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_walk\">skb_queue_walk</a>(&amp;(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tcp_for_write_queue_from\">tcp_for_write_queue_from</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_walk_from\">skb_queue_walk_from</a>(&amp;(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tcp_for_write_queue_from_safe\">tcp_for_write_queue_from_safe</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#sk\">sk</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_walk_from_safe\">skb_queue_walk_from_safe</a>(&amp;(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tmp\">tmp</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_send_head\">sk_send_head</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tcp_skb_is_last\">tcp_skb_is_last</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_queue_is_last\">skb_queue_is_last</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_advance_send_head\">tcp_advance_send_head</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_skb_is_last\">tcp_skb_is_last</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_send_head\">sk_send_head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_send_head\">sk_send_head</a> = <a class=\"id\" href=\"#tcp_write_queue_next\">tcp_write_queue_next</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_check_send_head\">tcp_check_send_head</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_unlinked\">skb_unlinked</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_send_head\">sk_send_head</a> == <a class=\"id\" href=\"#skb_unlinked\">skb_unlinked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_send_head\">sk_send_head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_init_send_head\">tcp_init_send_head</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_send_head\">sk_send_head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__tcp_add_write_queue_tail\">__tcp_add_write_queue_tail</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_tail\">__skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_add_write_queue_tail\">tcp_add_write_queue_tail</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__tcp_add_write_queue_tail\">__tcp_add_write_queue_tail</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Queue it, remembering where we must start sending. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_send_head\">sk_send_head</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_send_head\">sk_send_head</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#highest_sack\">highest_sack</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#highest_sack\">highest_sack</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__tcp_add_write_queue_head\">__tcp_add_write_queue_head</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_head\">__skb_queue_head</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Insert buff after skb on the write queue of sk.  */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_insert_write_queue_after\">tcp_insert_write_queue_after</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#buff\">buff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_after\">__skb_queue_after</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#buff\">buff</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Insert new before skb on the write queue of sk.  */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_insert_write_queue_before\">tcp_insert_write_queue_before</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_before\">__skb_queue_before</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_send_head\">sk_send_head</a> == <a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_send_head\">sk_send_head</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_unlink_write_queue\">tcp_unlink_write_queue</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_unlink\">__skb_unlink</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_write_queue_empty\">tcp_write_queue_empty</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_push_pending_frames\">tcp_push_pending_frames</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__tcp_push_pending_frames\">__tcp_push_pending_frames</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#tcp_current_mss\">tcp_current_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nonagle\">nonagle</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Start sequence of the highest skb with SACKed bit, valid only if</span>", 
"<span class=\"comment\"> * sacked &gt; 0 or when the caller has ensured validity by itself.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tcp_highest_sack_seq\">tcp_highest_sack_seq</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#sacked_out\">sacked_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#highest_sack\">highest_sack</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#highest_sack\">highest_sack</a>)-><a class=\"id\" href=\"#seq\">seq</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_advance_highest_sack\">tcp_advance_highest_sack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#highest_sack\">highest_sack</a> = <a class=\"id\" href=\"#tcp_skb_is_last\">tcp_skb_is_last</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>) ? <a class=\"id\" href=\"#NULL\">NULL</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_write_queue_next\">tcp_write_queue_next</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_highest_sack\">tcp_highest_sack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#highest_sack\">highest_sack</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_highest_sack_reset\">tcp_highest_sack_reset</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#highest_sack\">highest_sack</a> = <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Called when old skb is about to be deleted (to be combined with new skb) */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_highest_sack_combine\">tcp_highest_sack_combine</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#sacked_out\">sacked_out</a> && (<a class=\"id\" href=\"#old\">old</a> == <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#highest_sack\">highest_sack</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#highest_sack\">highest_sack</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Determines whether this is a thin stream (which may suffer from</span>", 
"<span class=\"comment\"> * increased latency). Used to trigger latency-reducing mechanisms.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#tcp_stream_is_thin\">tcp_stream_is_thin</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a> &lt; 4 && !<a class=\"id\" href=\"#tcp_in_initial_slowstart\">tcp_in_initial_slowstart</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* /proc */</span>", 
"enum <a class=\"id\" href=\"#tcp_seq_states\">tcp_seq_states</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SEQ_STATE_LISTENING\">TCP_SEQ_STATE_LISTENING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SEQ_STATE_OPENREQ\">TCP_SEQ_STATE_OPENREQ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SEQ_STATE_ESTABLISHED\">TCP_SEQ_STATE_ESTABLISHED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SEQ_STATE_TIME_WAIT\">TCP_SEQ_STATE_TIME_WAIT</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#tcp_seq_afinfo\">tcp_seq_afinfo</a> {", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_family_t\">sa_family_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#family\">family</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_operations\">file_operations</a><span class=\"ts\"/><a class=\"id\" href=\"#seq_fops\">seq_fops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a><span class=\"ts\"/><a class=\"id\" href=\"#seq_ops\">seq_ops</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#tcp_iter_state\">tcp_iter_state</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_net_private\">seq_net_private</a><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sa_family_t\">sa_family_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#family\">family</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#tcp_seq_states\">tcp_seq_states</a><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#syn_wait_sk\">syn_wait_sk</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sbucket\">sbucket</a>, <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_pos\">last_pos</a>;", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#tcp_proc_register\">tcp_proc_register</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#tcp_seq_afinfo\">tcp_seq_afinfo</a> *<a class=\"id\" href=\"#afinfo\">afinfo</a>);", 
"extern void <a class=\"id\" href=\"#tcp_proc_unregister\">tcp_proc_unregister</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#tcp_seq_afinfo\">tcp_seq_afinfo</a> *<a class=\"id\" href=\"#afinfo\">afinfo</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#request_sock_ops\">request_sock_ops</a> <a class=\"id\" href=\"#tcp_request_sock_ops\">tcp_request_sock_ops</a>;", 
"extern struct <a class=\"id\" href=\"#request_sock_ops\">request_sock_ops</a> <a class=\"id\" href=\"#tcp6_request_sock_ops\">tcp6_request_sock_ops</a>;", 
"", 
"extern void <a class=\"id\" href=\"#tcp_v4_destroy_sock\">tcp_v4_destroy_sock</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"extern int <a class=\"id\" href=\"#tcp_v4_gso_send_check\">tcp_v4_gso_send_check</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_tso_segment\">tcp_tso_segment</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#features\">features</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> **<a class=\"id\" href=\"#tcp_gro_receive\">tcp_gro_receive</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> **<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> **<a class=\"id\" href=\"#tcp4_gro_receive\">tcp4_gro_receive</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> **<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern int <a class=\"id\" href=\"#tcp_gro_complete\">tcp_gro_complete</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern int <a class=\"id\" href=\"#tcp4_gro_complete\">tcp4_gro_complete</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"extern int <a class=\"id\" href=\"#tcp4_proc_init\">tcp4_proc_init</a>(void);", 
"extern void <a class=\"id\" href=\"#tcp4_proc_exit\">tcp4_proc_exit</a>(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* TCP af-specific functions */</span>", 
"struct <a class=\"id\" href=\"#tcp_sock_af_ops\">tcp_sock_af_ops</a> {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TCP_MD5SIG\">CONFIG_TCP_MD5SIG</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_md5sig_key\">tcp_md5sig_key</a><span class=\"ts\"/>*(*<a class=\"id\" href=\"#md5_lookup\">md5_lookup</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#addr_sk\">addr_sk</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#calc_md5_hash\">calc_md5_hash</a>) (char *<a class=\"id\" href=\"#location\">location</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#tcp_md5sig_key\">tcp_md5sig_key</a> *<a class=\"id\" href=\"#md5\">md5</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#request_sock\">request_sock</a> *<a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#md5_add\">md5_add</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#addr_sk\">addr_sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#newkey\">newkey</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#md5_parse\">md5_parse</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#optlen\">optlen</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#tcp_request_sock_ops\">tcp_request_sock_ops</a> {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TCP_MD5SIG\">CONFIG_TCP_MD5SIG</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_md5sig_key\">tcp_md5sig_key</a><span class=\"ts\"/>*(*<a class=\"id\" href=\"#md5_lookup\">md5_lookup</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request_sock\">request_sock</a> *<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#calc_md5_hash\">calc_md5_hash</a>) (char *<a class=\"id\" href=\"#location\">location</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#tcp_md5sig_key\">tcp_md5sig_key</a> *<a class=\"id\" href=\"#md5\">md5</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#request_sock\">request_sock</a> *<a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/* Using SHA1 for now, define some constants.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COOKIE_DIGEST_WORDS\">COOKIE_DIGEST_WORDS</a> (<a class=\"id\" href=\"#SHA_DIGEST_WORDS\">SHA_DIGEST_WORDS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COOKIE_MESSAGE_WORDS\">COOKIE_MESSAGE_WORDS</a> (<a class=\"id\" href=\"#SHA_MESSAGE_BYTES\">SHA_MESSAGE_BYTES</a> / 4)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#COOKIE_WORKSPACE_WORDS\">COOKIE_WORKSPACE_WORDS</a> (<a class=\"id\" href=\"#COOKIE_DIGEST_WORDS\">COOKIE_DIGEST_WORDS</a> + <a class=\"id\" href=\"#COOKIE_MESSAGE_WORDS\">COOKIE_MESSAGE_WORDS</a>)", 
"", 
"extern int <a class=\"id\" href=\"#tcp_cookie_generator\">tcp_cookie_generator</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#bakery\">bakery</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct tcp_cookie_values - each socket needs extra space for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cookies, together with (optional) space for any SYN data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A tcp_sock contains a pointer to the current value, and this is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cloned to the tcp_timewait_sock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @cookie_pair:<span class=\"ts\"/>variable data from the option exchange.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @cookie_desired:<span class=\"ts\"/>user specified tcpct_cookie_desired.  Zero</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>indicates default (sysctl_tcp_cookie_size).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>After cookie sent, remembers size of cookie.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Range 0, TCP_COOKIE_MIN to TCP_COOKIE_MAX.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @s_data_desired:<span class=\"ts\"/>user specified tcpct_s_data_desired.  When the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>constant payload is specified (@s_data_constant),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>holds its length instead.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Range 0 to TCP_MSS_DESIRED.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @s_data_payload:<span class=\"ts\"/>constant data that is to be included in the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>payload of SYN or SYNACK segments when the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>cookie option is present.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tcp_cookie_values\">tcp_cookie_values</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kref\">kref</a><span class=\"ts\"/><a class=\"id\" href=\"#kref\">kref</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cookie_pair\">cookie_pair</a>[<a class=\"id\" href=\"#TCP_COOKIE_PAIR_SIZE\">TCP_COOKIE_PAIR_SIZE</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cookie_pair_size\">cookie_pair_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cookie_desired\">cookie_desired</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_data_desired\">s_data_desired</a>:11,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_data_constant\">s_data_constant</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_data_in\">s_data_in</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_data_out\">s_data_out</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_data_unused\">s_data_unused</a>:2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_data_payload\">s_data_payload</a>[0];", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tcp_cookie_values_release\">tcp_cookie_values_release</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kref\">kref</a>, struct <a class=\"id\" href=\"#tcp_cookie_values\">tcp_cookie_values</a>, <a class=\"id\" href=\"#kref\">kref</a>));", 
"}", 
"", 
"<span class=\"comment\">/* The length of constant payload data.  Note that s_data_desired is</span>", 
"<span class=\"comment\"> * overloaded, depending on s_data_constant: either the length of constant</span>", 
"<span class=\"comment\"> * data (returned here) or the limit on variable data.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcp_s_data_size\">tcp_s_data_size</a>(const struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#cookie_values\">cookie_values</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#cookie_values\">cookie_values</a>-><a class=\"id\" href=\"#s_data_constant\">s_data_constant</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>? <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#cookie_values\">cookie_values</a>-><a class=\"id\" href=\"#s_data_desired\">s_data_desired</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>: 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct tcp_extend_values - tcp_ipv?.c to tcp_output.c workspace.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>As tcp_request_sock has already been extended in other places, the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>only remaining method is to pass stack values along as function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>parameters.  These parameters are not needed after sending SYNACK.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @cookie_bakery:<span class=\"ts\"/>cryptographic secret and message workspace.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @cookie_plus:<span class=\"ts\"/>bytes in authenticator/cookie option, copied from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct tcp_options_received (above).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tcp_extend_values\">tcp_extend_values</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_values\">request_values</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cookie_bakery\">cookie_bakery</a>[<a class=\"id\" href=\"#COOKIE_WORKSPACE_WORDS\">COOKIE_WORKSPACE_WORDS</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cookie_plus\">cookie_plus</a>:6,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cookie_out_never\">cookie_out_never</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cookie_in_always\">cookie_in_always</a>:1;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#tcp_extend_values\">tcp_extend_values</a> *<a class=\"id\" href=\"#tcp_xv\">tcp_xv</a>(struct <a class=\"id\" href=\"#request_values\">request_values</a> *<a class=\"id\" href=\"#rvp\">rvp</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#tcp_extend_values\">tcp_extend_values</a> *)<a class=\"id\" href=\"#rvp\">rvp</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#tcp_v4_init\">tcp_v4_init</a>(void);", 
"extern void <a class=\"id\" href=\"#tcp_init\">tcp_init</a>(void);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _TCP_H */</span>", 
];
xr_frag_insert('l/7b/29cade9d93385ceb5e2060a3813f0fa7b3623f.xr', __xr_tmp);
