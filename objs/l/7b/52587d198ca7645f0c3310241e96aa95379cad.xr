var __xr_tmp = [
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: exsystem - Interface to OS services</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acinterp.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_EXECUTER\">ACPI_EXECUTER</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"exsystem\")", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_system_wait_semaphore</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Semaphore       - Semaphore to wait on</span>", 
"<span class=\"comment\"> *              Timeout         - Max time to wait</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Implements a semaphore wait with a check to see if the</span>", 
"<span class=\"comment\"> *              semaphore is available immediately.  If it is not, the</span>", 
"<span class=\"comment\"> *              interpreter is released before waiting.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ex_system_wait_semaphore\">acpi_ex_system_wait_semaphore</a>(<a class=\"id\" href=\"#acpi_semaphore\">acpi_semaphore</a> <a class=\"id\" href=\"#semaphore\">semaphore</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_system_wait_semaphore\">ex_system_wait_semaphore</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_wait_semaphore\">acpi_os_wait_semaphore</a>(<a class=\"id\" href=\"#semaphore\">semaphore</a>, 1, <a class=\"id\" href=\"#ACPI_DO_NOT_WAIT\">ACPI_DO_NOT_WAIT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_TIME\">AE_TIME</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We must wait, so unlock the interpreter */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_relinquish_interpreter\">acpi_ex_relinquish_interpreter</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_wait_semaphore\">acpi_os_wait_semaphore</a>(<a class=\"id\" href=\"#semaphore\">semaphore</a>, 1, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"*** Thread awake after blocking, %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_format_exception\">acpi_format_exception</a>(<a class=\"id\" href=\"#status\">status</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reacquire the interpreter */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_reacquire_interpreter\">acpi_ex_reacquire_interpreter</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_system_wait_mutex</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Mutex           - Mutex to wait on</span>", 
"<span class=\"comment\"> *              Timeout         - Max time to wait</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Implements a mutex wait with a check to see if the</span>", 
"<span class=\"comment\"> *              mutex is available immediately.  If it is not, the</span>", 
"<span class=\"comment\"> *              interpreter is released before waiting.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ex_system_wait_mutex\">acpi_ex_system_wait_mutex</a>(<a class=\"id\" href=\"#acpi_mutex\">acpi_mutex</a> <a class=\"id\" href=\"#mutex\">mutex</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_system_wait_mutex\">ex_system_wait_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_acquire_mutex\">acpi_os_acquire_mutex</a>(<a class=\"id\" href=\"#mutex\">mutex</a>, <a class=\"id\" href=\"#ACPI_DO_NOT_WAIT\">ACPI_DO_NOT_WAIT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_TIME\">AE_TIME</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We must wait, so unlock the interpreter */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_relinquish_interpreter\">acpi_ex_relinquish_interpreter</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_acquire_mutex\">acpi_os_acquire_mutex</a>(<a class=\"id\" href=\"#mutex\">mutex</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"*** Thread awake after blocking, %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_format_exception\">acpi_format_exception</a>(<a class=\"id\" href=\"#status\">status</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reacquire the interpreter */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_reacquire_interpreter\">acpi_ex_reacquire_interpreter</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_system_do_stall</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  how_long        - The amount of time to stall,</span>", 
"<span class=\"comment\"> *                                in microseconds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Suspend running thread for specified amount of time.</span>", 
"<span class=\"comment\"> *              Note: ACPI specification requires that Stall() does not</span>", 
"<span class=\"comment\"> *              relinquish the processor, and delays longer than 100 usec</span>", 
"<span class=\"comment\"> *              should use Sleep() instead.  We allow stalls up to 255 usec</span>", 
"<span class=\"comment\"> *              for compatibility with other interpreters and existing BIOSs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ex_system_do_stall\">acpi_ex_system_do_stall</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#how_long\">how_long</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#how_long\">how_long</a> &gt; 255) {<span class=\"ts\"/><span class=\"comment\">/* 255 microseconds */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Longer than 255 usec, this is an error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (ACPI specifies 100 usec as max, but this gives some slack in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * order to support existing BIOSs)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Time parameter is too large (%u)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#how_long\">how_long</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_OPERAND_VALUE\">AE_AML_OPERAND_VALUE</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_stall\">acpi_os_stall</a>(<a class=\"id\" href=\"#how_long\">how_long</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_system_do_sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  how_long        - The amount of time to sleep,</span>", 
"<span class=\"comment\"> *                                in milliseconds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Sleep the running thread for specified amount of time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ex_system_do_sleep\">acpi_ex_system_do_sleep</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#how_long\">how_long</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Since this thread will sleep, we must release the interpreter */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_relinquish_interpreter\">acpi_ex_relinquish_interpreter</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For compatibility with other ACPI implementations and to prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * accidental deep sleeps, limit the sleep time to something reasonable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#how_long\">how_long</a> &gt; <a class=\"id\" href=\"#ACPI_MAX_SLEEP\">ACPI_MAX_SLEEP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#how_long\">how_long</a> = <a class=\"id\" href=\"#ACPI_MAX_SLEEP\">ACPI_MAX_SLEEP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_sleep\">acpi_os_sleep</a>(<a class=\"id\" href=\"#how_long\">how_long</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* And now we must get the interpreter again */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_reacquire_interpreter\">acpi_ex_reacquire_interpreter</a>();", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_system_signal_event</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  obj_desc        - The object descriptor for this op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Provides an access point to perform synchronization operations</span>", 
"<span class=\"comment\"> *              within the AML.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ex_system_signal_event\">acpi_ex_system_signal_event</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> * <a class=\"id\" href=\"#obj_desc\">obj_desc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_system_signal_event\">ex_system_signal_event</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_signal_semaphore\">acpi_os_signal_semaphore</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#os_semaphore\">os_semaphore</a>, 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_system_wait_event</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  time_desc       - The 'time to delay' object descriptor</span>", 
"<span class=\"comment\"> *              obj_desc        - The object descriptor for this op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Provides an access point to perform synchronization operations</span>", 
"<span class=\"comment\"> *              within the AML.  This operation is a request to wait for an</span>", 
"<span class=\"comment\"> *              event.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ex_system_wait_event\">acpi_ex_system_wait_event</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#time_desc\">time_desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_system_wait_event\">ex_system_wait_event</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ex_system_wait_semaphore\">acpi_ex_system_wait_semaphore</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#os_semaphore\">os_semaphore</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#u16\">u16</a>) <a class=\"id\" href=\"#time_desc\">time_desc</a>-><a class=\"id\" href=\"#integer\">integer</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_system_reset_event</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  obj_desc        - The object descriptor for this op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Reset an event to a known state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ex_system_reset_event\">acpi_ex_system_reset_event</a>(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_semaphore\">acpi_semaphore</a> <a class=\"id\" href=\"#temp_semaphore\">temp_semaphore</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are going to simply delete the existing semaphore and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * create a new one!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_create_semaphore\">acpi_os_create_semaphore</a>(<a class=\"id\" href=\"#ACPI_NO_UNIT_LIMIT\">ACPI_NO_UNIT_LIMIT</a>, 0, &amp;<a class=\"id\" href=\"#temp_semaphore\">temp_semaphore</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_delete_semaphore\">acpi_os_delete_semaphore</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#os_semaphore\">os_semaphore</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#os_semaphore\">os_semaphore</a> = <a class=\"id\" href=\"#temp_semaphore\">temp_semaphore</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
];
xr_frag_insert('l/7b/52587d198ca7645f0c3310241e96aa95379cad.xr', __xr_tmp);
