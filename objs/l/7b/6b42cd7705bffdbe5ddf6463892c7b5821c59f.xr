var __xr_tmp = [
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#_major\">_major</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_major\">_major</a> = <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_uevent_exit\">out_uevent_exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_uevent_exit\">dm_uevent_exit</a>();", 
"<a class=\"id\" href=\"#out_free_rq_bio_info_cache\">out_free_rq_bio_info_cache</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#_rq_bio_info_cache\">_rq_bio_info_cache</a>);", 
"<a class=\"id\" href=\"#out_free_rq_tio_cache\">out_free_rq_tio_cache</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#_rq_tio_cache\">_rq_tio_cache</a>);", 
"<a class=\"id\" href=\"#out_free_tio_cache\">out_free_tio_cache</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#_tio_cache\">_tio_cache</a>);", 
"<a class=\"id\" href=\"#out_free_io_cache\">out_free_io_cache</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#_io_cache\">_io_cache</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#local_exit\">local_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#_rq_bio_info_cache\">_rq_bio_info_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#_rq_tio_cache\">_rq_tio_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#_tio_cache\">_tio_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#_io_cache\">_io_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_blkdev\">unregister_blkdev</a>(<a class=\"id\" href=\"#_major\">_major</a>, <a class=\"id\" href=\"#_name\">_name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_uevent_exit\">dm_uevent_exit</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_major\">_major</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMINFO\">DMINFO</a>(\"cleaned up\");", 
"}", 
"", 
"static int (*<a class=\"id\" href=\"#_inits\">_inits</a>[])(void) <a class=\"id\" href=\"#__initdata\">__initdata</a> = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_init\">local_init</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_target_init\">dm_target_init</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_linear_init\">dm_linear_init</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_stripe_init\">dm_stripe_init</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_io_init\">dm_io_init</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_kcopyd_init\">dm_kcopyd_init</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_interface_init\">dm_interface_init</a>,", 
"};", 
"", 
"static void (*<a class=\"id\" href=\"#_exits\">_exits</a>[])(void) = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_exit\">local_exit</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_target_exit\">dm_target_exit</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_linear_exit\">dm_linear_exit</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_stripe_exit\">dm_stripe_exit</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_io_exit\">dm_io_exit</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_kcopyd_exit\">dm_kcopyd_exit</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_interface_exit\">dm_interface_exit</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dm_init\">dm_init</a>(void)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#_inits\">_inits</a>);", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#_inits\">_inits</a>[<a class=\"id\" href=\"#i\">i</a>]();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"      <a class=\"id\" href=\"#bad\">bad</a>:", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_exits\">_exits</a>[<a class=\"id\" href=\"#i\">i</a>]();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#dm_exit\">dm_exit</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#_exits\">_exits</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_exits\">_exits</a>[<a class=\"id\" href=\"#i\">i</a>]();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Block device functions</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_deleting_md\">dm_deleting_md</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DMF_DELETING\">DMF_DELETING</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dm_blk_open\">dm_blk_open</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#_minor_lock\">_minor_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#md\">md</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DMF_FREEING\">DMF_FREEING</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dm_deleting_md\">dm_deleting_md</a>(<a class=\"id\" href=\"#md\">md</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_get\">dm_get</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#open_count\">open_count</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#_minor_lock\">_minor_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#md\">md</a> ? 0 : -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dm_blk_close\">dm_blk_close</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_kernel\">lock_kernel</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#open_count\">open_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_put\">dm_put</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_kernel\">unlock_kernel</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dm_open_count\">dm_open_count</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#open_count\">open_count</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Guarantees nothing is using the device before it's deleted.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_lock_for_deletion\">dm_lock_for_deletion</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#_minor_lock\">_minor_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_open_count\">dm_open_count</a>(<a class=\"id\" href=\"#md\">md</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#DMF_DELETING\">DMF_DELETING</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#_minor_lock\">_minor_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dm_blk_getgeo\">dm_blk_getgeo</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, struct <a class=\"id\" href=\"#hd_geometry\">hd_geometry</a> *<a class=\"id\" href=\"#geo\">geo</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dm_get_geometry\">dm_get_geometry</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#geo\">geo</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dm_blk_ioctl\">dm_blk_ioctl</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#dm_get_live_table\">dm_get_live_table</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#tgt\">tgt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#map\">map</a> || !<a class=\"id\" href=\"#dm_table_get_size\">dm_table_get_size</a>(<a class=\"id\" href=\"#map\">map</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We only support devices that have a single target */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_table_get_num_targets\">dm_table_get_num_targets</a>(<a class=\"id\" href=\"#map\">map</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgt\">tgt</a> = <a class=\"id\" href=\"#dm_table_get_target\">dm_table_get_target</a>(<a class=\"id\" href=\"#map\">map</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_suspended_md\">dm_suspended_md</a>(<a class=\"id\" href=\"#md\">md</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#ioctl\">ioctl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#tgt\">tgt</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#ioctl\">ioctl</a>(<a class=\"id\" href=\"#tgt\">tgt</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_table_put\">dm_table_put</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dm_io\">dm_io</a> *<a class=\"id\" href=\"#alloc_io\">alloc_io</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_pool\">io_pool</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_io\">free_io</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, struct <a class=\"id\" href=\"#dm_io\">dm_io</a> *<a class=\"id\" href=\"#io\">io</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#io\">io</a>, <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_pool\">io_pool</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_tio\">free_tio</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, struct <a class=\"id\" href=\"#dm_target_io\">dm_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#tio\">tio</a>, <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#tio_pool\">tio_pool</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#alloc_rq_tio\">alloc_rq_tio</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#tio_pool\">tio_pool</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_rq_tio\">free_rq_tio</a>(struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#tio\">tio</a>, <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#tio_pool\">tio_pool</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dm_rq_clone_bio_info\">dm_rq_clone_bio_info</a> *<a class=\"id\" href=\"#alloc_bio_info\">alloc_bio_info</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_pool\">io_pool</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_bio_info\">free_bio_info</a>(struct <a class=\"id\" href=\"#dm_rq_clone_bio_info\">dm_rq_clone_bio_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_pool\">io_pool</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#md_in_flight\">md_in_flight</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pending\">pending</a>[<a class=\"id\" href=\"#READ\">READ</a>]) +", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pending\">pending</a>[<a class=\"id\" href=\"#WRITE\">WRITE</a>]);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#start_io_acct\">start_io_acct</a>(struct <a class=\"id\" href=\"#dm_io\">dm_io</a> *<a class=\"id\" href=\"#io\">io</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#start_time\">start_time</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#part_stat_lock\">part_stat_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part_round_stats\">part_round_stats</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#md\">md</a>)-><a class=\"id\" href=\"#part0\">part0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part_stat_unlock\">part_stat_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#md\">md</a>)-><a class=\"id\" href=\"#part0\">part0</a>.<a class=\"id\" href=\"#in_flight\">in_flight</a>[<a class=\"id\" href=\"#rw\">rw</a>] = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pending\">pending</a>[<a class=\"id\" href=\"#rw\">rw</a>]);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#end_io_acct\">end_io_acct</a>(struct <a class=\"id\" href=\"#dm_io\">dm_io</a> *<a class=\"id\" href=\"#io\">io</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#duration\">duration</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#start_time\">start_time</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pending\">pending</a>, <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#part_stat_lock\">part_stat_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part_round_stats\">part_round_stats</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#md\">md</a>)-><a class=\"id\" href=\"#part0\">part0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part_stat_add\">part_stat_add</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#md\">md</a>)-><a class=\"id\" href=\"#part0\">part0</a>, <a class=\"id\" href=\"#ticks\">ticks</a>[<a class=\"id\" href=\"#rw\">rw</a>], <a class=\"id\" href=\"#duration\">duration</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part_stat_unlock\">part_stat_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * After this is decremented the bio must not be touched if it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a barrier.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#md\">md</a>)-><a class=\"id\" href=\"#part0\">part0</a>.<a class=\"id\" href=\"#in_flight\">in_flight</a>[<a class=\"id\" href=\"#rw\">rw</a>] = <a class=\"id\" href=\"#pending\">pending</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec_return\">atomic_dec_return</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pending\">pending</a>[<a class=\"id\" href=\"#rw\">rw</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pending\">pending</a> += <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pending\">pending</a>[<a class=\"id\" href=\"#rw\">rw</a>^0x1]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* nudge anyone waiting on suspend queue */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pending\">pending</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add the bio to the list of deferred io.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#queue_io\">queue_io</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_lock\">io_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#deferred_lock\">deferred_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_list_add\">bio_list_add</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#deferred\">deferred</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#deferred_lock\">deferred_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#DMF_QUEUE_IO_TO_THREAD\">DMF_QUEUE_IO_TO_THREAD</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_work\">queue_work</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_lock\">io_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Everyone (including functions in this file), should use this</span>", 
"<span class=\"comment\"> * function to access the md-&gt;map field, and make sure they call</span>", 
"<span class=\"comment\"> * dm_table_put() when finished.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#dm_get_live_table\">dm_get_live_table</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock_irqsave\">read_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#map_lock\">map_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_table_get\">dm_table_get</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock_irqrestore\">read_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#map_lock\">map_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get the geometry associated with a dm device</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_get_geometry\">dm_get_geometry</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, struct <a class=\"id\" href=\"#hd_geometry\">hd_geometry</a> *<a class=\"id\" href=\"#geo\">geo</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#geo\">geo</a> = <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#geometry\">geometry</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set the geometry of a device.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dm_set_geometry\">dm_set_geometry</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, struct <a class=\"id\" href=\"#hd_geometry\">hd_geometry</a> *<a class=\"id\" href=\"#geo\">geo</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sz\">sz</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#geo\">geo</a>-><a class=\"id\" href=\"#cylinders\">cylinders</a> * <a class=\"id\" href=\"#geo\">geo</a>-><a class=\"id\" href=\"#heads\">heads</a> * <a class=\"id\" href=\"#geo\">geo</a>-><a class=\"id\" href=\"#sectors\">sectors</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#geo\">geo</a>-><a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#sz\">sz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"Start sector is beyond the geometry limits.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#geometry\">geometry</a> = *<a class=\"id\" href=\"#geo\">geo</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*-----------------------------------------------------------------</span>", 
"<span class=\"comment\"> * CRUD START:</span>", 
"<span class=\"comment\"> *   A more elegant soln is in the works that uses the queue</span>", 
"<span class=\"comment\"> *   merge fn, unfortunately there are a couple of changes to</span>", 
"<span class=\"comment\"> *   the block layer that I want to make for this.  So in the</span>", 
"<span class=\"comment\"> *   interests of getting something for people to use I give</span>", 
"<span class=\"comment\"> *   you this clearly demarcated crap.</span>", 
"<span class=\"comment\"> *---------------------------------------------------------------*/</span>", 
"", 
"static int <a class=\"id\" href=\"#__noflush_suspending\">__noflush_suspending</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DMF_NOFLUSH_SUSPENDING\">DMF_NOFLUSH_SUSPENDING</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Decrements the number of outstanding ios that a bio has been</span>", 
"<span class=\"comment\"> * cloned into, completing the original io if necc.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dec_pending\">dec_pending</a>(struct <a class=\"id\" href=\"#dm_io\">dm_io</a> *<a class=\"id\" href=\"#io\">io</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#io_error\">io_error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#md\">md</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Push-back supersedes any I/O errors */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#endio_lock\">endio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#error\">error</a> &gt; 0 && <a class=\"id\" href=\"#__noflush_suspending\">__noflush_suspending</a>(<a class=\"id\" href=\"#md\">md</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#endio_lock\">endio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#io_count\">io_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#error\">error</a> == <a class=\"id\" href=\"#DM_ENDIO_REQUEUE\">DM_ENDIO_REQUEUE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Target requested pushing back the I/O.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#deferred_lock\">deferred_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__noflush_suspending\">__noflush_suspending</a>(<a class=\"id\" href=\"#md\">md</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_list_add_head\">bio_list_add_head</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#deferred\">deferred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* noflush suspend was interrupted. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#deferred_lock\">deferred_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_error\">io_error</a> = <a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * There can be just one barrier request so we use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a per-device variable for error reporting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Note that you can't touch the bio after end_io_acct</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We ignore -EOPNOTSUPP for empty flush reported by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * underlying devices. We assume that if the device</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * doesn't support empty barriers, it doesn't need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cache flushing commands.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#barrier_error\">barrier_error</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#bio_empty_barrier\">bio_empty_barrier</a>(<a class=\"id\" href=\"#bio\">bio</a>) && <a class=\"id\" href=\"#io_error\">io_error</a> == -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#barrier_error\">barrier_error</a> = <a class=\"id\" href=\"#io_error\">io_error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_io_acct\">end_io_acct</a>(<a class=\"id\" href=\"#io\">io</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_io\">free_io</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#io\">io</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_io_acct\">end_io_acct</a>(<a class=\"id\" href=\"#io\">io</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_io\">free_io</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#io\">io</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_error\">io_error</a> != <a class=\"id\" href=\"#DM_ENDIO_REQUEUE\">DM_ENDIO_REQUEUE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_bio_complete\">trace_block_bio_complete</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_endio\">bio_endio</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#io_error\">io_error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clone_endio\">clone_endio</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target_io\">dm_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_io\">dm_io</a> *<a class=\"id\" href=\"#io\">io</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#io\">io</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_endio_fn\">dm_endio_fn</a> <a class=\"id\" href=\"#endio\">endio</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#end_io\">end_io</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>) && !<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#endio\">endio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#endio\">endio</a>(<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#error\">error</a>, &amp;<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> &lt; 0 || <a class=\"id\" href=\"#r\">r</a> == <a class=\"id\" href=\"#DM_ENDIO_REQUEUE\">DM_ENDIO_REQUEUE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * error and requeue request are handled</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * in dec_pending().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#r\">r</a> == <a class=\"id\" href=\"#DM_ENDIO_INCOMPLETE\">DM_ENDIO_INCOMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The target will handle the io */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#r\">r</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"unimplemented target endio return value: %d\", <a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Store md for cleanup instead of tio which is about to get freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a> = <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#bs\">bs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_tio\">free_tio</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#tio\">tio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_pending\">dec_pending</a>(<a class=\"id\" href=\"#io\">io</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Partial completion handling for request-based dm</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#end_clone_bio\">end_clone_bio</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#clone\">clone</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_clone_bio_info\">dm_rq_clone_bio_info</a> *<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tio\">tio</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#orig\">orig</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#orig\">orig</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * An error has already been detected on the request.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Once error occurred, just let clone-&gt;end_io() handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the remainder.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't notice the error to the upper layer yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The error handling decision is made by the target driver,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when the request is completed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * I/O for the bio successfully completed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Notice the data completion to the upper layer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bios are processed from the head of the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So the completing bio should always be rq-&gt;bio.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it's not, something wrong is happening.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#orig\">orig</a>-><a class=\"id\" href=\"#bio\">bio</a> != <a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMERR\">DMERR</a>(\"bio completion is going in the middle of the request\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update the original request.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not use blk_end_request() here, because it may complete</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the original request before the clone, and break the ordering.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_update_request\">blk_update_request</a>(<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#orig\">orig</a>, 0, <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#store_barrier_error\">store_barrier_error</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#barrier_error_lock\">barrier_error_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Basically, the first error is taken, but:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   -EOPNOTSUPP supersedes any I/O error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   Requeue request supersedes any I/O error but -EOPNOTSUPP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#barrier_error\">barrier_error</a> || <a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#barrier_error\">barrier_error</a> != -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a> &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#error\">error</a> == <a class=\"id\" href=\"#DM_ENDIO_REQUEUE\">DM_ENDIO_REQUEUE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#barrier_error\">barrier_error</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#barrier_error_lock\">barrier_error_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Don't touch any member of the md after calling this function because</span>", 
"<span class=\"comment\"> * the md may be freed in dm_put() at the end of this function.</span>", 
"<span class=\"comment\"> * Or do dm_get() before calling this function and dm_put() later.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rq_completed\">rq_completed</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, int <a class=\"id\" href=\"#rw\">rw</a>, int <a class=\"id\" href=\"#run_queue\">run_queue</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#pending\">pending</a>[<a class=\"id\" href=\"#rw\">rw</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* nudge anyone waiting on suspend queue */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#md_in_flight\">md_in_flight</a>(<a class=\"id\" href=\"#md\">md</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#run_queue\">run_queue</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_run_queue\">blk_run_queue</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#queue\">queue</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dm_put() must be at the end of this function. See the comment above</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_put\">dm_put</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_rq_clone\">free_rq_clone</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#end_io_data\">end_io_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_unprep_clone\">blk_rq_unprep_clone</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_rq_tio\">free_rq_tio</a>(<a class=\"id\" href=\"#tio\">tio</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Complete the clone and the original request.</span>", 
"<span class=\"comment\"> * Must be called without queue lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dm_end_request\">dm_end_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#run_queue\">run_queue</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_barrier\">is_barrier</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#end_io_data\">end_io_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#orig\">orig</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a> && !<a class=\"id\" href=\"#is_barrier\">is_barrier</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#errors\">errors</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#errors\">errors</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#sense\">sense</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We are using the sense buffer of the original</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * request.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * So setting the length of the sense data is enough.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#sense_len\">sense_len</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#sense_len\">sense_len</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_rq_clone\">free_rq_clone</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_barrier\">is_barrier</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#store_barrier_error\">store_barrier_error</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#run_queue\">run_queue</a> = 0;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_end_request_all\">blk_end_request_all</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_completed\">rq_completed</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#run_queue\">run_queue</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dm_unprep_request\">dm_unprep_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#special\">special</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#special\">special</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &= ~<a class=\"id\" href=\"#REQ_DONTPREP\">REQ_DONTPREP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_rq_clone\">free_rq_clone</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Requeue the original request of a clone.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dm_requeue_unmapped_request\">dm_requeue_unmapped_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#end_io_data\">end_io_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#orig\">orig</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Barrier clones share an original request.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Leave it to dm_end_request(), which handles this special</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_end_request\">dm_end_request</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#DM_ENDIO_REQUEUE\">DM_ENDIO_REQUEUE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_unprep_request\">dm_unprep_request</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elv_queue_empty\">elv_queue_empty</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_plug_device\">blk_plug_device</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_requeue_request\">blk_requeue_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_completed\">rq_completed</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#rw\">rw</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dm_requeue_unmapped_request\">dm_requeue_unmapped_request</a>);", 
"", 
"static void <a class=\"id\" href=\"#__stop_queue\">__stop_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_stop_queue\">blk_stop_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#stop_queue\">stop_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__stop_queue\">__stop_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__start_queue\">__start_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_queue_stopped\">blk_queue_stopped</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_start_queue\">blk_start_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#start_queue\">start_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__start_queue\">__start_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dm_done\">dm_done</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>, int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mapped\">mapped</a>)", 
"{", 
];
xr_frag_insert('l/7b/6b42cd7705bffdbe5ddf6463892c7b5821c59f.xr', __xr_tmp);
