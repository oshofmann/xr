var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#task_ca\">task_ca</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__percpu_counter_add\">__percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpustat\">cpustat</a>[<a class=\"id\" href=\"#idx\">idx</a>], <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#batch\">batch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#ca\">ca</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> <a class=\"id\" href=\"#cpuacct_subsys\">cpuacct_subsys</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"cpuacct\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#create\">create</a> = <a class=\"id\" href=\"#cpuacct_create\">cpuacct_create</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#destroy\">destroy</a> = <a class=\"id\" href=\"#cpuacct_destroy\">cpuacct_destroy</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#populate\">populate</a> = <a class=\"id\" href=\"#cpuacct_populate\">cpuacct_populate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#subsys_id\">subsys_id</a> = <a class=\"id\" href=\"#cpuacct_subsys_id\">cpuacct_subsys_id</a>,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_CGROUP_CPUACCT */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"void <a class=\"id\" href=\"#synchronize_sched_expedited\">synchronize_sched_expedited</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#synchronize_sched_expedited\">synchronize_sched_expedited</a>);", 
"", 
"#else <span class=\"comment\">/* #ifndef CONFIG_SMP */</span>", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#synchronize_sched_expedited_count\">synchronize_sched_expedited_count</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"", 
"static int <a class=\"id\" href=\"#synchronize_sched_expedited_cpu_stop\">synchronize_sched_expedited_cpu_stop</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There must be a full memory barrier on each affected CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * between the time that try_stop_cpus() is called and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time that it returns.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In the current initial implementation of cpu_stop, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * above condition is already met when the control reaches</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this point and the following smp_mb() is not strictly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * necessary.  Do smp_mb() anyway for documentation and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * robustness against future implementation changes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* See above comment block. */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wait for an rcu-sched grace period to elapse, but use \"big hammer\"</span>", 
"<span class=\"comment\"> * approach to force grace period to end quickly.  This consumes</span>", 
"<span class=\"comment\"> * significant time on all CPUs, and is thus not recommended for</span>", 
"<span class=\"comment\"> * any sort of common-case code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that it is illegal to call this function while holding any</span>", 
"<span class=\"comment\"> * lock that is acquired by a CPU-hotplug notifier.  Failing to</span>", 
"<span class=\"comment\"> * observe this restriction will result in deadlock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#synchronize_sched_expedited\">synchronize_sched_expedited</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#snap\">snap</a>, <a class=\"id\" href=\"#trycount\">trycount</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();  <span class=\"comment\">/* ensure prior mod happens before capturing snap. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snap\">snap</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#synchronize_sched_expedited_count\">synchronize_sched_expedited_count</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#try_stop_cpus\">try_stop_cpus</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#synchronize_sched_expedited_cpu_stop\">synchronize_sched_expedited_cpu_stop</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#NULL\">NULL</a>) == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#trycount\">trycount</a>++ &lt; 10)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(<a class=\"id\" href=\"#trycount\">trycount</a> * <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#synchronize_sched_expedited_count\">synchronize_sched_expedited_count</a>) - <a class=\"id\" href=\"#snap\">snap</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* ensure test happens before caller kfree */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#synchronize_sched_expedited_count\">synchronize_sched_expedited_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_atomic_inc\">smp_mb__after_atomic_inc</a>(); <span class=\"comment\">/* ensure post-GP actions seen after GP. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#synchronize_sched_expedited\">synchronize_sched_expedited</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifndef CONFIG_SMP */</span>", 
];
xr_frag_insert('l/7b/a36db63c279b3db6bc00d1de7c1d9ac2ae141d.xr', __xr_tmp);
