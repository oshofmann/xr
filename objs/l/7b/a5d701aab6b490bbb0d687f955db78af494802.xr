var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Routines having to do with the 'struct sk_buff' memory handlers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Authors:<span class=\"ts\"/>Alan Cox &lt;alan@lxorguk.ukuu.org.uk&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Florian La Roche &lt;rzsfl@rz.uni-sb.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Fixes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Fixed the worst of the load</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>balancer bugs.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Dave Platt<span class=\"ts\"/>:<span class=\"ts\"/>Interrupt stacking fix.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Richard Kooijman<span class=\"ts\"/>:<span class=\"ts\"/>Timestamp fixes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Changed buffer format.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>destructor hook for AF_UNIX etc.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Linus Torvalds<span class=\"ts\"/>:<span class=\"ts\"/>Better skb_clone.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Added skb_copy.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Added all the changed routines Linus</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>only put in the headers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Ray VanTassle<span class=\"ts\"/>:<span class=\"ts\"/>Fixed --skb-&gt;lock in free</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>skb_copy copy arp field</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen<span class=\"ts\"/>:<span class=\"ts\"/>slabified it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Robert Olsson<span class=\"ts\"/>:<span class=\"ts\"/>Removed skb_head_pool</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NOTE:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>The __skb_ routines should be called with interrupts</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disabled, or you better be *real* sure that the operation is atomic</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with respect to whatever list is being frobbed (e.g. via lock_sock()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or via disabling bottom half handlers, etc).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The functions in this file will not compile correctly with gcc 2.4.x</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemcheck\">kmemcheck</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#inet\">inet</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_CLS_ACT\">CONFIG_NET_CLS_ACT</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#pkt_sched\">pkt_sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#splice\">splice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtnetlink\">rtnetlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errqueue\">errqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#protocol\">protocol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#checksum\">checksum</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#xfrm\">xfrm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#skb\">skb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"kmap_skb.h\"", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#skbuff_head_cache\">skbuff_head_cache</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#skbuff_fclone_cache\">skbuff_fclone_cache</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static void <a class=\"id\" href=\"#sock_pipe_buf_release\">sock_pipe_buf_release</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sock_pipe_buf_get\">sock_pipe_buf_get</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sock_pipe_buf_steal\">sock_pipe_buf_steal</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Pipe buffer operations for a socket. */</span>", 
"static const struct <a class=\"id\" href=\"#pipe_buf_operations\">pipe_buf_operations</a> <a class=\"id\" href=\"#sock_pipe_buf_ops\">sock_pipe_buf_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#can_merge\">can_merge</a> = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#generic_pipe_buf_map\">generic_pipe_buf_map</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unmap\">unmap</a> = <a class=\"id\" href=\"#generic_pipe_buf_unmap\">generic_pipe_buf_unmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#confirm\">confirm</a> = <a class=\"id\" href=\"#generic_pipe_buf_confirm\">generic_pipe_buf_confirm</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#sock_pipe_buf_release\">sock_pipe_buf_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#steal\">steal</a> = <a class=\"id\" href=\"#sock_pipe_buf_steal\">sock_pipe_buf_steal</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#sock_pipe_buf_get\">sock_pipe_buf_get</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Keep out-of-line to prevent kernel bloat.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__builtin_return_address is not used because it is not always</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reliable.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_over_panic<span class=\"ts\"/>- <span class=\"ts\"/>private function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sz: size</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@here: address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Out of line support code for skb_put(). Not user callable.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#skb_over_panic\">skb_over_panic</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#sz\">sz</a>, void *<a class=\"id\" href=\"#here\">here</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"skb_over_panic: text:%p len:%d put:%d head:%p \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"data:%p tail:%#lx end:%#lx dev:%s\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#here\">here</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/>       (unsigned long)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a>, (unsigned long)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> ? <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> : \"<NULL>\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_under_panic<span class=\"ts\"/>- <span class=\"ts\"/>private function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sz: size</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@here: address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Out of line support code for skb_push(). Not user callable.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#skb_under_panic\">skb_under_panic</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#sz\">sz</a>, void *<a class=\"id\" href=\"#here\">here</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"skb_under_panic: text:%p len:%d put:%d head:%p \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"data:%p tail:%#lx end:%#lx dev:%s\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#here\">here</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/>       (unsigned long)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a>, (unsigned long)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> ? <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> : \"<NULL>\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"<span class=\"comment\">/* <span class=\"ts\"/>Allocate a new skbuff. We do this ourselves so we can fill in a few</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>'private' fields and also do memory statistics to find all the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>[BEEP] leaks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__alloc_skb<span class=\"ts\"/>-<span class=\"ts\"/>allocate a network buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: size to allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: allocation mask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fclone: allocate from fclone cache instead of head cache</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>and allocate a cloned (child) skb</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@node: numa node to allocate memory on</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate a new &amp;sk_buff. The returned buffer has no headroom and a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tail room of size bytes. The object has a reference count of one.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The return is the buffer. On a failure the return is %NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Buffers may only be allocated from interrupts using a @gfp_mask of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%GFP_ATOMIC.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#__alloc_skb\">__alloc_skb</a>(unsigned int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#fclone\">fclone</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a> *<a class=\"id\" href=\"#shinfo\">shinfo</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a> = <a class=\"id\" href=\"#fclone\">fclone</a> ? <a class=\"id\" href=\"#skbuff_fclone_cache\">skbuff_fclone_cache</a> : <a class=\"id\" href=\"#skbuff_head_cache\">skbuff_head_cache</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the HEAD */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>(<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; ~<a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prefetchw\">prefetchw</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#SKB_DATA_ALIGN\">SKB_DATA_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kmalloc_node_track_caller\">kmalloc_node_track_caller</a>(<a class=\"id\" href=\"#size\">size</a> + sizeof(struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nodata\">nodata</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prefetchw\">prefetchw</a>(<a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only clear those fields we need to clear, not those that we will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * actually initialise below. Hence, don't put any more fields after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the tail pointer in struct sk_buff!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>, <a class=\"id\" href=\"#tail\">tail</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a> = <a class=\"id\" href=\"#size\">size</a> + sizeof(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#users\">users</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_tail_pointer\">skb_reset_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_annotate_bitfield\">kmemcheck_annotate_bitfield</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#flags1\">flags1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_annotate_bitfield\">kmemcheck_annotate_bitfield</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#flags2\">flags2</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> = ~0U;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure we initialize shinfo sequentially */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shinfo\">shinfo</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#shinfo\">shinfo</a>, 0, <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a>, <a class=\"id\" href=\"#dataref\">dataref</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#shinfo\">shinfo</a>-><a class=\"id\" href=\"#dataref\">dataref</a>, 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fclone\">fclone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#skb\">skb</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#fclone_ref\">fclone_ref</a> = (<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *) (<a class=\"id\" href=\"#child\">child</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_annotate_bitfield\">kmemcheck_annotate_bitfield</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#flags1\">flags1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_annotate_bitfield\">kmemcheck_annotate_bitfield</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#flags2\">flags2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#fclone\">fclone</a> = <a class=\"id\" href=\"#SKB_FCLONE_ORIG\">SKB_FCLONE_ORIG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(<a class=\"id\" href=\"#fclone_ref\">fclone_ref</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#fclone\">fclone</a> = <a class=\"id\" href=\"#SKB_FCLONE_UNAVAILABLE\">SKB_FCLONE_UNAVAILABLE</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"<a class=\"id\" href=\"#nodata\">nodata</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__alloc_skb\">__alloc_skb</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__netdev_alloc_skb - allocate an skbuff for rx on a specific device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: network device to receive on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@length: length to allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: get_free_pages mask, passed to alloc_skb</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate a new &amp;sk_buff and assign it a usage count of one. The</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>buffer has unspecified headroom built in. Users should allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the headroom they think they need without accounting for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>built in space. The built in space is used for optimisations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%NULL is returned if there is no free memory.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#__netdev_alloc_skb\">__netdev_alloc_skb</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> ? <a class=\"id\" href=\"#dev_to_node\">dev_to_node</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>) : -1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#__alloc_skb\">__alloc_skb</a>(<a class=\"id\" href=\"#length\">length</a> + <a class=\"id\" href=\"#NET_SKB_PAD\">NET_SKB_PAD</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, 0, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#NET_SKB_PAD\">NET_SKB_PAD</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__netdev_alloc_skb\">__netdev_alloc_skb</a>);", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#__netdev_alloc_page\">__netdev_alloc_page</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> ? <a class=\"id\" href=\"#dev_to_node\">dev_to_node</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>) : -1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_node\">alloc_pages_node</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__netdev_alloc_page\">__netdev_alloc_page</a>);", 
"", 
"void <a class=\"id\" href=\"#skb_add_rx_frag\">skb_add_rx_frag</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#i\">i</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#off\">off</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_fill_page_desc\">skb_fill_page_desc</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_add_rx_frag\">skb_add_rx_frag</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_alloc_skb - allocate an skbuff for receiving</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@length: length to allocate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate a new &amp;sk_buff and assign it a usage count of one. The</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>buffer has unspecified headroom built in. Users should allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the headroom they think they need without accounting for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>built in space. The built in space is used for optimisations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%NULL is returned if there is no free memory. Although this function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocates memory it can be called from an interrupt.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#dev_alloc_skb\">dev_alloc_skb</a>(unsigned int <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There is more code here than it seems:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __dev_alloc_skb is an inline</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__dev_alloc_skb\">__dev_alloc_skb</a>(<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_alloc_skb\">dev_alloc_skb</a>);", 
"", 
"static void <a class=\"id\" href=\"#skb_drop_list\">skb_drop_list</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> **<a class=\"id\" href=\"#listp\">listp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#list\">list</a> = *<a class=\"id\" href=\"#listp\">listp</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#listp\">listp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#this\">this</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#list\">list</a>);", 
];
xr_frag_insert('l/7b/a5d701aab6b490bbb0d687f955db78af494802.xr', __xr_tmp);
