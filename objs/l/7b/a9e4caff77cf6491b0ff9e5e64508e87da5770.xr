var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_mb_init_group\">ext4_mb_init_group</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_free\">bb_free</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fragments\">fragments</a> = <a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_fragments\">bb_fragments</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fragments\">fragments</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cr\">cr</a>) {", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_2order\">ac_2order</a> == 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_largest_free_order\">bb_largest_free_order</a> &lt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_2order\">ac_2order</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Avoid using the first bg of a flexgroup for data files */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_DATA\">EXT4_MB_HINT_DATA</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#flex_size\">flex_size</a> >= <a class=\"id\" href=\"#EXT4_FLEX_SIZE_DIR_ALLOC_SCHEME\">EXT4_FLEX_SIZE_DIR_ALLOC_SCHEME</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#group\">group</a> % <a class=\"id\" href=\"#flex_size\">flex_size</a>) == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#free\">free</a> / <a class=\"id\" href=\"#fragments\">fragments</a>) >= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a> >= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 3:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lock the group_info alloc_sem of all the groups</span>", 
"<span class=\"comment\"> * belonging to the same buddy cache page. This</span>", 
"<span class=\"comment\"> * make sure other parallel operation on the buddy</span>", 
"<span class=\"comment\"> * cache doesn't happen  whild holding the buddy cache</span>", 
"<span class=\"comment\"> * lock</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext4_mb_get_buddy_cache_lock\">ext4_mb_get_buddy_cache_lock</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#groups_per_page\">groups_per_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#ext4_get_groups_count\">ext4_get_groups_count</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#first_group\">first_group</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> / <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the buddy cache inode stores the block bitmap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and buddy information in consecutive blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So for each group we need two blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#group\">group</a> * 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#block\">block</a> / <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_group\">first_group</a> = <a class=\"id\" href=\"#pnum\">pnum</a> * <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> / 2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#groups_per_page\">groups_per_page</a> = <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> >> 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#groups_per_page\">groups_per_page</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#groups_per_page\">groups_per_page</a> = 1;", 
"<span class=\"ts\"/><span class=\"comment\">/* read all groups the page covers into the cache */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#groups_per_page\">groups_per_page</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#first_group\">first_group</a> + <a class=\"id\" href=\"#i\">i</a>) >= <a class=\"id\" href=\"#ngroups\">ngroups</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#first_group\">first_group</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* take all groups write allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * semaphore. This make sure there is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no block allocation going on in any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of that groups</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write_nested\">down_write_nested</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#alloc_sem\">alloc_sem</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#ext4_mb_put_buddy_cache_lock\">ext4_mb_put_buddy_cache_lock</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>, int <a class=\"id\" href=\"#locked_group\">locked_group</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#first_group\">first_group</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> / <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the buddy cache inode stores the block bitmap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and buddy information in consecutive blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So for each group we need two blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#group\">group</a> * 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#block\">block</a> / <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_group\">first_group</a> = <a class=\"id\" href=\"#pnum\">pnum</a> * <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> / 2;", 
"<span class=\"ts\"/><span class=\"comment\">/* release locks on all the groups */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#locked_group\">locked_group</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#first_group\">first_group</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* take all groups write allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * semaphore. This make sure there is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no block allocation going on in any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of that groups</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#alloc_sem\">alloc_sem</a>);", 
"<span class=\"ts\"/>}", 
"", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> int", 
"<a class=\"id\" href=\"#ext4_mb_regular_allocator\">ext4_mb_regular_allocator</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#ngroups\">ngroups</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cr\">cr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> <a class=\"id\" href=\"#e4b\">e4b</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#ext4_get_groups_count\">ext4_get_groups_count</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* non-extent files are limited to low blocks/groups */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ext4_test_inode_flag\">ext4_test_inode_flag</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>, <a class=\"id\" href=\"#EXT4_INODE_EXTENTS\">EXT4_INODE_EXTENTS</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_blockfile_groups\">s_blockfile_groups</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> == <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* first, try the goal */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mb_find_by_goal\">ext4_mb_find_by_goal</a>(<a class=\"id\" href=\"#ac\">ac</a>, &amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> || <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> == <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_GOAL_ONLY\">EXT4_MB_HINT_GOAL_ONLY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ac-&gt;ac2_order is set only if the fe_len is a power of 2</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if ac2_order is set we also set criteria to 0 so that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try exact allocation using buddy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_2order\">ac_2order</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We search using buddy data only if the order of the request</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is greater than equal to the sbi_s_mb_order2_reqs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * You can tune it via /sys/fs/ext4/&lt;partition&gt;/mb_order2_req</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_order2_reqs\">s_mb_order2_reqs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This should tell if fe_len is exactly power of 2</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> &amp; (~(1 << (<a class=\"id\" href=\"#i\">i</a> - 1)))) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_2order\">ac_2order</a> = <a class=\"id\" href=\"#i\">i</a> - 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if stream allocation is enabled, use global goal */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_STREAM_ALLOC\">EXT4_MB_STREAM_ALLOC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TBD: may be hot point */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_md_lock\">s_md_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_last_group\">s_mb_last_group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_last_start\">s_mb_last_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_md_lock\">s_md_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Let's just scan groups to find more-less suitable blocks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cr\">cr</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_2order\">ac_2order</a> ? 0 : 1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cr == 0 try to get exact allocation,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cr == 3  try to get anything</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#cr\">cr</a> &lt; 4 && <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> == <a class=\"id\" href=\"#AC_STATUS_CONTINUE\">AC_STATUS_CONTINUE</a>; <a class=\"id\" href=\"#cr\">cr</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_criteria\">ac_criteria</a> = <a class=\"id\" href=\"#cr\">cr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * searching for the right group start</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from the goal value specified</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#group\">group</a>++, <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a> == <a class=\"id\" href=\"#ngroups\">ngroups</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This now checks without needing the buddy page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_mb_good_group\">ext4_mb_good_group</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#cr\">cr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mb_load_buddy\">ext4_mb_load_buddy</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, &amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We need to check again after locking the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * block group</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_mb_good_group\">ext4_mb_good_group</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#cr\">cr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_unload_buddy\">ext4_mb_unload_buddy</a>(&amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_groups_scanned\">ac_groups_scanned</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cr\">cr</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_simple_scan_group\">ext4_mb_simple_scan_group</a>(<a class=\"id\" href=\"#ac\">ac</a>, &amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#cr\">cr</a> == 1 && <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_stripe\">s_stripe</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> % <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_stripe\">s_stripe</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_scan_aligned\">ext4_mb_scan_aligned</a>(<a class=\"id\" href=\"#ac\">ac</a>, &amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_complex_scan_group\">ext4_mb_complex_scan_group</a>(<a class=\"id\" href=\"#ac\">ac</a>, &amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_unload_buddy\">ext4_mb_unload_buddy</a>(&amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> != <a class=\"id\" href=\"#AC_STATUS_CONTINUE\">AC_STATUS_CONTINUE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> &gt; 0 && <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> != <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a> &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_FIRST\">EXT4_MB_HINT_FIRST</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We've been searching too long. Let's try to allocate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the best chunk we've found so far</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_try_best_found\">ext4_mb_try_best_found</a>(<a class=\"id\" href=\"#ac\">ac</a>, &amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> != <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Someone more lucky has already allocated it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The only thing we can do is just take first</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * found block(s)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>printk(KERN_DEBUG \"EXT4-fs: someone won our chunk\\n\");</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> = <a class=\"id\" href=\"#AC_STATUS_CONTINUE\">AC_STATUS_CONTINUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> |= <a class=\"id\" href=\"#EXT4_MB_HINT_FIRST\">EXT4_MB_HINT_FIRST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cr\">cr</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_lost_chunks\">s_mb_lost_chunks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#ext4_mb_seq_groups_start\">ext4_mb_seq_groups_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> &lt; 0 || *<a class=\"id\" href=\"#pos\">pos</a> >= <a class=\"id\" href=\"#ext4_get_groups_count\">ext4_get_groups_count</a>(<a class=\"id\" href=\"#sb\">sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = *<a class=\"id\" href=\"#pos\">pos</a> + 1;", 
"<span class=\"ts\"/>return (void *) ((unsigned long) <a class=\"id\" href=\"#group\">group</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#ext4_mb_seq_groups_next\">ext4_mb_seq_groups_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>;", 
"", 
"<span class=\"ts\"/>++*<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> &lt; 0 || *<a class=\"id\" href=\"#pos\">pos</a> >= <a class=\"id\" href=\"#ext4_get_groups_count\">ext4_get_groups_count</a>(<a class=\"id\" href=\"#sb\">sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = *<a class=\"id\" href=\"#pos\">pos</a> + 1;", 
"<span class=\"ts\"/>return (void *) ((unsigned long) <a class=\"id\" href=\"#group\">group</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_mb_seq_groups_show\">ext4_mb_seq_groups_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#seq\">seq</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a> = (<a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a>) ((unsigned long) <a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> <a class=\"id\" href=\"#e4b\">e4b</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sg\">sg</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#counters\">counters</a>[16];", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#sg\">sg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"#%-5s: %-5s %-5s %-5s \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"[ %-5s %-5s %-5s %-5s %-5s %-5s %-5s \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%-5s %-5s %-5s %-5s %-5s %-5s %-5s ]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"group\", \"free\", \"frags\", \"first\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"2^0\", \"2^1\", \"2^2\", \"2^3\", \"2^4\", \"2^5\", \"2^6\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"2^7\", \"2^8\", \"2^9\", \"2^10\", \"2^11\", \"2^12\", \"2^13\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> + 2) * sizeof(<a class=\"id\" href=\"#sg\">sg</a>.<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#bb_counters\">bb_counters</a>[0]) +", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mb_load_buddy\">ext4_mb_load_buddy</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, &amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"#%-5u: I/O error\\n\", <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>), <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_unload_buddy\">ext4_mb_unload_buddy</a>(&amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"#%-5u: %-5u %-5u %-5u [\", <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#sg\">sg</a>.<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#bb_free\">bb_free</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>.<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#bb_fragments\">bb_fragments</a>, <a class=\"id\" href=\"#sg\">sg</a>.<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#bb_first_free\">bb_first_free</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= 13; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \" %-5u\", <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> + 1 ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>.<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#i\">i</a>] : 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \" ]\\n\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext4_mb_seq_groups_stop\">ext4_mb_seq_groups_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#ext4_mb_seq_groups_ops\">ext4_mb_seq_groups_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a>  = <a class=\"id\" href=\"#ext4_mb_seq_groups_start\">ext4_mb_seq_groups_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a>   = <a class=\"id\" href=\"#ext4_mb_seq_groups_next\">ext4_mb_seq_groups_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a>   = <a class=\"id\" href=\"#ext4_mb_seq_groups_stop\">ext4_mb_seq_groups_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a>   = <a class=\"id\" href=\"#ext4_mb_seq_groups_show\">ext4_mb_seq_groups_show</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#ext4_mb_seq_groups_open\">ext4_mb_seq_groups_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#PDE\">PDE</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#ext4_mb_seq_groups_ops\">ext4_mb_seq_groups_ops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ext4_mb_seq_groups_fops\">ext4_mb_seq_groups_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext4_mb_seq_groups_open\">ext4_mb_seq_groups_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"", 
"<span class=\"comment\">/* Create and initialize ext4_group_info data for the given group. */</span>", 
"int <a class=\"id\" href=\"#ext4_mb_add_groupinfo\">ext4_mb_add_groupinfo</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ext4_group_desc\">ext4_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#metalen\">metalen</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> **<a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First check if this group is the first of a reserved block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it's true, we have to allocate a new table of pointers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to ext4_group_info structures</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a> % <a class=\"id\" href=\"#EXT4_DESC_PER_BLOCK\">EXT4_DESC_PER_BLOCK</a>(<a class=\"id\" href=\"#sb\">sb</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#metalen\">metalen</a> = sizeof(*<a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>) <<", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_DESC_PER_BLOCK_BITS\">EXT4_DESC_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#meta_group_info\">meta_group_info</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#metalen\">metalen</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#meta_group_info\">meta_group_info</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"EXT4-fs: can't allocate mem for a \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"buddy group\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_meta_group_info\">exit_meta_group_info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_info\">s_group_info</a>[<a class=\"id\" href=\"#group\">group</a> >> <a class=\"id\" href=\"#EXT4_DESC_PER_BLOCK_BITS\">EXT4_DESC_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>)] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * calculate needed size. if change bb_counters size,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't forget about ext4_mb_generate_buddy()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#offsetof\">offsetof</a>(<a class=\"id\" href=\"#typeof\">typeof</a>(**<a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bb_counters\">bb_counters</a>[<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> + 2]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#meta_group_info\">meta_group_info</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_info\">s_group_info</a>[<a class=\"id\" href=\"#group\">group</a> >> <a class=\"id\" href=\"#EXT4_DESC_PER_BLOCK_BITS\">EXT4_DESC_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#group\">group</a> &amp; (<a class=\"id\" href=\"#EXT4_DESC_PER_BLOCK\">EXT4_DESC_PER_BLOCK</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"EXT4-fs: can't allocate buddy mem\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_group_info\">exit_group_info</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#EXT4_GROUP_INFO_NEED_INIT_BIT\">EXT4_GROUP_INFO_NEED_INIT_BIT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>&amp;(<a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#bb_state\">bb_state</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initialize bb_free to be able to skip</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * empty groups without initialization</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_flags\">bg_flags</a> &amp; <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#EXT4_BG_BLOCK_UNINIT\">EXT4_BG_BLOCK_UNINIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#bb_free\">bb_free</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blocks_after_init\">ext4_free_blocks_after_init</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#bb_free\">bb_free</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blks_count\">ext4_free_blks_count</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#bb_prealloc_list\">bb_prealloc_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rwsem\">init_rwsem</a>(&amp;<a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#alloc_sem\">alloc_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#bb_free_root\">bb_free_root</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#bb_largest_free_order\">bb_largest_free_order</a> = -1;  <span class=\"comment\">/* uninit */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DOUBLE_CHECK\">DOUBLE_CHECK</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext4_read_block_bitmap\">ext4_read_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bh\">bh</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#meta_group_info\">meta_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#exit_group_info\">exit_group_info</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* If a meta_group_info table has been allocated, release it now */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a> % <a class=\"id\" href=\"#EXT4_DESC_PER_BLOCK\">EXT4_DESC_PER_BLOCK</a>(<a class=\"id\" href=\"#sb\">sb</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_info\">s_group_info</a>[<a class=\"id\" href=\"#group\">group</a> >> <a class=\"id\" href=\"#EXT4_DESC_PER_BLOCK_BITS\">EXT4_DESC_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>)]);", 
"<a class=\"id\" href=\"#exit_meta_group_info\">exit_meta_group_info</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"} <span class=\"comment\">/* ext4_mb_add_groupinfo */</span>", 
"", 
"static int <a class=\"id\" href=\"#ext4_mb_init_backend\">ext4_mb_init_backend</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#ext4_get_groups_count\">ext4_get_groups_count</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_super_block\">ext4_super_block</a> *<a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_meta_group_infos\">num_meta_group_infos</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_meta_group_infos_max\">num_meta_group_infos_max</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#array_size\">array_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_desc\">ext4_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is the number of blocks used by GDT */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_meta_group_infos\">num_meta_group_infos</a> = (<a class=\"id\" href=\"#ngroups\">ngroups</a> + <a class=\"id\" href=\"#EXT4_DESC_PER_BLOCK\">EXT4_DESC_PER_BLOCK</a>(<a class=\"id\" href=\"#sb\">sb</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1) >> <a class=\"id\" href=\"#EXT4_DESC_PER_BLOCK_BITS\">EXT4_DESC_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is the total number of blocks used by GDT including</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the number of reserved blocks for GDT.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The s_group_info array is allocated with this value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to allow a clean online resize without a complex</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * manipulation of pointer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The drawback is the unused memory when no resize</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * occurs but it's very low in terms of pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (see comments below)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need to handle this properly when META_BG resizing is allowed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_meta_group_infos_max\">num_meta_group_infos_max</a> = <a class=\"id\" href=\"#num_meta_group_infos\">num_meta_group_infos</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_reserved_gdt_blocks\">s_reserved_gdt_blocks</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * array_size is the size of s_group_info array. We round it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the next power of two because this approximation is done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * internally by kmalloc so we can have some more memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for free here (e.g. may be used for META_BG resize).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#array_size\">array_size</a> = 1;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#array_size\">array_size</a> &lt; sizeof(*<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_info\">s_group_info</a>) *", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#num_meta_group_infos_max\">num_meta_group_infos_max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#array_size\">array_size</a> = <a class=\"id\" href=\"#array_size\">array_size</a> << 1;", 
"<span class=\"ts\"/><span class=\"comment\">/* An 8TB filesystem with 64-bit pointers requires a 4096 byte</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kmalloc. A 128kb malloc should suffice for a 256TB filesystem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So a two level scheme suffices for now. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_info\">s_group_info</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#array_size\">array_size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_info\">s_group_info</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"EXT4-fs: can't allocate buddy meta group\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_buddy_cache\">s_buddy_cache</a> = <a class=\"id\" href=\"#new_inode\">new_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_buddy_cache\">s_buddy_cache</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"EXT4-fs: can't get new inode\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_freesgi\">err_freesgi</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_buddy_cache\">s_buddy_cache</a>)-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext4_get_group_desc\">ext4_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"EXT4-fs: can't read descriptor %u\\n\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_freebuddy\">err_freebuddy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_mb_add_groupinfo\">ext4_mb_add_groupinfo</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#desc\">desc</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_freebuddy\">err_freebuddy</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_freebuddy\">err_freebuddy</a>:", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a>-- &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#num_meta_group_infos\">num_meta_group_infos</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a>-- &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_info\">s_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_buddy_cache\">s_buddy_cache</a>);", 
"<a class=\"id\" href=\"#err_freesgi\">err_freesgi</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_info\">s_group_info</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ext4_mb_init\">ext4_mb_init</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#needs_recovery\">needs_recovery</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> + 2) * sizeof(*<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_offsets\">s_mb_offsets</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_offsets\">s_mb_offsets</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_offsets\">s_mb_offsets</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> + 2) * sizeof(*<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_maxs\">s_mb_maxs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_maxs\">s_mb_maxs</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_maxs\">s_mb_maxs</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_offsets\">s_mb_offsets</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* order 0 is regular bitmap */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_maxs\">s_mb_maxs</a>[0] = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> << 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_offsets\">s_mb_offsets</a>[0] = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> << 2;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_offsets\">s_mb_offsets</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_maxs\">s_mb_maxs</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += 1 << (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> - <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#max\">max</a> >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* init file for buddy data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_mb_init_backend\">ext4_mb_init_backend</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_offsets\">s_mb_offsets</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_maxs\">s_mb_maxs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_md_lock\">s_md_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_lock\">s_bal_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_max_to_scan\">s_mb_max_to_scan</a> = <a class=\"id\" href=\"#MB_DEFAULT_MAX_TO_SCAN\">MB_DEFAULT_MAX_TO_SCAN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_min_to_scan\">s_mb_min_to_scan</a> = <a class=\"id\" href=\"#MB_DEFAULT_MIN_TO_SCAN\">MB_DEFAULT_MIN_TO_SCAN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_stats\">s_mb_stats</a> = <a class=\"id\" href=\"#MB_DEFAULT_STATS\">MB_DEFAULT_STATS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_stream_request\">s_mb_stream_request</a> = <a class=\"id\" href=\"#MB_DEFAULT_STREAM_THRESHOLD\">MB_DEFAULT_STREAM_THRESHOLD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_order2_reqs\">s_mb_order2_reqs</a> = <a class=\"id\" href=\"#MB_DEFAULT_ORDER2_REQS\">MB_DEFAULT_ORDER2_REQS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_group_prealloc\">s_mb_group_prealloc</a> = <a class=\"id\" href=\"#MB_DEFAULT_GROUP_PREALLOC\">MB_DEFAULT_GROUP_PREALLOC</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_locality_groups\">s_locality_groups</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(struct <a class=\"id\" href=\"#ext4_locality_group\">ext4_locality_group</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_locality_groups\">s_locality_groups</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_offsets\">s_mb_offsets</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_maxs\">s_mb_maxs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_locality_group\">ext4_locality_group</a> *<a class=\"id\" href=\"#lg\">lg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lg\">lg</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_locality_groups\">s_locality_groups</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#lg\">lg</a>-><a class=\"id\" href=\"#lg_mutex\">lg_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#PREALLOC_TB_SIZE\">PREALLOC_TB_SIZE</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#lg\">lg</a>-><a class=\"id\" href=\"#lg_prealloc_list\">lg_prealloc_list</a>[<a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#lg\">lg</a>-><a class=\"id\" href=\"#lg_prealloc_lock\">lg_prealloc_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_proc\">s_proc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#proc_create_data\">proc_create_data</a>(\"mb_groups\", <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_proc\">s_proc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#ext4_mb_seq_groups_fops\">ext4_mb_seq_groups_fops</a>, <a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_journal\">s_journal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_journal\">s_journal</a>-><a class=\"id\" href=\"#j_commit_callback\">j_commit_callback</a> = <a class=\"id\" href=\"#release_blocks_on_commit\">release_blocks_on_commit</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* need to called with the ext4 group lock held */</span>", 
"static void <a class=\"id\" href=\"#ext4_mb_cleanup_pa\">ext4_mb_cleanup_pa</a>(struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#cur\">cur</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_prealloc_list\">bb_prealloc_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#cur\">cur</a>, struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a>, <a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#ext4_pspace_cachep\">ext4_pspace_cachep</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"mballoc: %u PAs left\\n\", <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"}", 
"", 
"int <a class=\"id\" href=\"#ext4_mb_release\">ext4_mb_release</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#ext4_get_groups_count\">ext4_get_groups_count</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_meta_group_infos\">num_meta_group_infos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grinfo\">grinfo</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_info\">s_group_info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grinfo\">grinfo</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DOUBLE_CHECK\">DOUBLE_CHECK</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#grinfo\">grinfo</a>-><a class=\"id\" href=\"#bb_bitmap\">bb_bitmap</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_cleanup_pa\">ext4_mb_cleanup_pa</a>(<a class=\"id\" href=\"#grinfo\">grinfo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#grinfo\">grinfo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_meta_group_infos\">num_meta_group_infos</a> = (<a class=\"id\" href=\"#ngroups\">ngroups</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_DESC_PER_BLOCK\">EXT4_DESC_PER_BLOCK</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 1) >>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_DESC_PER_BLOCK_BITS\">EXT4_DESC_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_meta_group_infos\">num_meta_group_infos</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_info\">s_group_info</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_info\">s_group_info</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_offsets\">s_mb_offsets</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_maxs\">s_mb_maxs</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_buddy_cache\">s_buddy_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_buddy_cache\">s_buddy_cache</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_stats\">s_mb_stats</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"EXT4-fs: mballoc: %u blocks %u reqs (%u success)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_allocated\">s_bal_allocated</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_reqs\">s_bal_reqs</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_success\">s_bal_success</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"EXT4-fs: mballoc: %u extents scanned, %u goal hits, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%u 2^N hits, %u breaks, %u lost\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_ex_scanned\">s_bal_ex_scanned</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_goals\">s_bal_goals</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_2orders\">s_bal_2orders</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_breaks\">s_bal_breaks</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_lost_chunks\">s_mb_lost_chunks</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"EXT4-fs: mballoc: %lu generated and it took %Lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_buddies_generated\">s_mb_buddies_generated</a>++,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_generation_time\">s_mb_generation_time</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"EXT4-fs: mballoc: %u preallocated, %u discarded\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_preallocated\">s_mb_preallocated</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_discarded\">s_mb_discarded</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_locality_groups\">s_locality_groups</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_proc\">s_proc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_proc_entry\">remove_proc_entry</a>(\"mb_groups\", <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_proc\">s_proc</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ext4_issue_discard\">ext4_issue_discard</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#block\">block</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#discard_block\">discard_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#discard_block\">discard_block</a> = <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#ext4_group_first_block_no\">ext4_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_discard_blocks\">trace_ext4_discard_blocks</a>(<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long) <a class=\"id\" href=\"#discard_block\">discard_block</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sb_issue_discard\">sb_issue_discard</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#discard_block\">discard_block</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_warning\">ext4_warning</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"discard not supported, disabling\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_opt\">clear_opt</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_mount_opt\">s_mount_opt</a>, <a class=\"id\" href=\"#DISCARD\">DISCARD</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is called by the jbd2 layer once the commit has finished,</span>", 
"<span class=\"comment\"> * so we know we can free the blocks that were released with that commit.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#release_blocks_on_commit\">release_blocks_on_commit</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#txn\">txn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_private\">j_private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> <a class=\"id\" href=\"#e4b\">e4b</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#db\">db</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#count\">count</a> = 0, <a class=\"id\" href=\"#count2\">count2</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_data\">ext4_free_data</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>, *<a class=\"id\" href=\"#ltmp\">ltmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#ltmp\">ltmp</a>, &amp;<a class=\"id\" href=\"#txn\">txn</a>-><a class=\"id\" href=\"#t_private_list\">t_private_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#ext4_free_data\">ext4_free_data</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"gonna free %u blocks in group %u (0x%p):\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#DISCARD\">DISCARD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_issue_discard\">ext4_issue_discard</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#start_blk\">start_blk</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mb_load_buddy\">ext4_mb_load_buddy</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#group\">group</a>, &amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we expect to find existing buddy because it's pinned */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a> != 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#db\">db</a> = <a class=\"id\" href=\"#e4b\">e4b</a>.<a class=\"id\" href=\"#bd_info\">bd_info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* there are blocks to put in buddy to make them really free */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count2\">count2</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Take it out of per group rb tree */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;(<a class=\"id\" href=\"#db\">db</a>-><a class=\"id\" href=\"#bb_free_root\">bb_free_root</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_free_blocks\">mb_free_blocks</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#start_blk\">start_blk</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#db\">db</a>-><a class=\"id\" href=\"#bb_free_root\">bb_free_root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No more items in the per group rb tree</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * balance refcounts from ext4_mb_free_metadata()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#e4b\">e4b</a>.<a class=\"id\" href=\"#bd_buddy_page\">bd_buddy_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#e4b\">e4b</a>.<a class=\"id\" href=\"#bd_bitmap_page\">bd_bitmap_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#ext4_free_ext_cachep\">ext4_free_ext_cachep</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_unload_buddy\">ext4_mb_unload_buddy</a>(&amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"freed %u blocks in %u structures\\n\", <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#count2\">count2</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EXT4_DEBUG\">CONFIG_EXT4_DEBUG</a>", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#mb_enable_debug\">mb_enable_debug</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_dir\">debugfs_dir</a>;", 
"static struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_debug\">debugfs_debug</a>;", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ext4_create_debugfs_entry\">ext4_create_debugfs_entry</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_dir\">debugfs_dir</a> = <a class=\"id\" href=\"#debugfs_create_dir\">debugfs_create_dir</a>(\"ext4\", <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#debugfs_dir\">debugfs_dir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugfs_debug\">debugfs_debug</a> = <a class=\"id\" href=\"#debugfs_create_u8\">debugfs_create_u8</a>(\"mballoc-debug\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#debugfs_dir\">debugfs_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#mb_enable_debug\">mb_enable_debug</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext4_remove_debugfs_entry\">ext4_remove_debugfs_entry</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#debugfs_debug\">debugfs_debug</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#debugfs_dir\">debugfs_dir</a>);", 
"}", 
"", 
"#else", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ext4_create_debugfs_entry\">ext4_create_debugfs_entry</a>(void)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext4_remove_debugfs_entry\">ext4_remove_debugfs_entry</a>(void)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_ext4_mballoc\">init_ext4_mballoc</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_pspace_cachep\">ext4_pspace_cachep</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"ext4_prealloc_space\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     0, <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_pspace_cachep\">ext4_pspace_cachep</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_ac_cachep\">ext4_ac_cachep</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"ext4_alloc_context\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     0, <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_ac_cachep\">ext4_ac_cachep</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#ext4_pspace_cachep\">ext4_pspace_cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_ext_cachep\">ext4_free_ext_cachep</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"ext4_free_block_extents\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(struct <a class=\"id\" href=\"#ext4_free_data\">ext4_free_data</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     0, <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_free_ext_cachep\">ext4_free_ext_cachep</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#ext4_pspace_cachep\">ext4_pspace_cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#ext4_ac_cachep\">ext4_ac_cachep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_create_debugfs_entry\">ext4_create_debugfs_entry</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#exit_ext4_mballoc\">exit_ext4_mballoc</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for completion of call_rcu()'s on ext4_pspace_cachep</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before destroying the slab cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#ext4_pspace_cachep\">ext4_pspace_cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#ext4_ac_cachep\">ext4_ac_cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#ext4_free_ext_cachep\">ext4_free_ext_cachep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_remove_debugfs_entry\">ext4_remove_debugfs_entry</a>();", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check quota and mark chosen space (ac-&gt;ac_b_ex) non-free in bitmaps</span>", 
"<span class=\"comment\"> * Returns 0 if success or error code</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> int", 
"<a class=\"id\" href=\"#ext4_mb_mark_diskspace_used\">ext4_mb_mark_diskspace_used</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, unsigned int <a class=\"id\" href=\"#reserv_blks\">reserv_blks</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_desc\">ext4_group_desc</a> *<a class=\"id\" href=\"#gdp\">gdp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> != <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> <= 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#ext4_read_block_bitmap\">ext4_read_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_journal_get_write_access\">ext4_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a> = <a class=\"id\" href=\"#ext4_get_group_desc\">ext4_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>, &amp;<a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gdp\">gdp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_debug\">ext4_debug</a>(\"using block group %u(%d)\\n\", <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blks_count\">ext4_free_blks_count</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#gdp\">gdp</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_journal_get_write_access\">ext4_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#ext4_grp_offs_to_block\">ext4_grp_offs_to_block</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_data_block_valid\">ext4_data_block_valid</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_error\">ext4_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"Allocating blocks %llu-%llu which overlap \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"fs metadata\\n\", <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#block\">block</a>+<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* File system mounted not to panic on error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Fix the bitmap and repeat the block allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We leak some of the blocks here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_set_bits\">mb_set_bits</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#AGGRESSIVE_CHECK\">AGGRESSIVE_CHECK</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#mb_test_bit\">mb_test_bit</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> + <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_set_bits\">mb_set_bits</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>,<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_flags\">bg_flags</a> &amp; <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#EXT4_BG_BLOCK_UNINIT\">EXT4_BG_BLOCK_UNINIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_flags\">bg_flags</a> &= <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(~<a class=\"id\" href=\"#EXT4_BG_BLOCK_UNINIT\">EXT4_BG_BLOCK_UNINIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blks_set\">ext4_free_blks_set</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#gdp\">gdp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blocks_after_init\">ext4_free_blocks_after_init</a>(<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>, <a class=\"id\" href=\"#gdp\">gdp</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ext4_free_blks_count\">ext4_free_blks_count</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#gdp\">gdp</a>) - <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blks_set\">ext4_free_blks_set</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#gdp\">gdp</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_checksum\">bg_checksum</a> = <a class=\"id\" href=\"#ext4_group_desc_csum\">ext4_group_desc_csum</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>, <a class=\"id\" href=\"#gdp\">gdp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_sub\">percpu_counter_sub</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_freeblocks_counter\">s_freeblocks_counter</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now reduce the dirty block count also. Should not go negative</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_DELALLOC_RESERVED\">EXT4_MB_DELALLOC_RESERVED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* release all the reserved blocks if non delalloc */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_sub\">percpu_counter_sub</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_dirtyblocks_counter\">s_dirtyblocks_counter</a>, <a class=\"id\" href=\"#reserv_blks\">reserv_blks</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_log_groups_per_flex\">s_log_groups_per_flex</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#flex_group\">flex_group</a> = <a class=\"id\" href=\"#ext4_flex_group\">ext4_flex_group</a>(<a class=\"id\" href=\"#sbi\">sbi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_flex_groups\">s_flex_groups</a>[<a class=\"id\" href=\"#flex_group\">flex_group</a>].<a class=\"id\" href=\"#free_blocks\">free_blocks</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>);", 
"", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mark_super_dirty\">ext4_mark_super_dirty</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * here we normalize request for locality group</span>", 
"<span class=\"comment\"> * Group request are normalized to s_strip size if we set the same via mount</span>", 
"<span class=\"comment\"> * option. If not we set it to s_mb_group_prealloc which can be configured via</span>", 
"<span class=\"comment\"> * /sys/fs/ext4/&lt;partition&gt;/mb_group_prealloc</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * XXX: should we try to preallocate more than the group has now?</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_mb_normalize_group_request\">ext4_mb_normalize_group_request</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_locality_group\">ext4_locality_group</a> *<a class=\"id\" href=\"#lg\">lg</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_lg\">ac_lg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#lg\">lg</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_stripe\">s_stripe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_stripe\">s_stripe</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_mb_group_prealloc\">s_mb_group_prealloc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"#%u: goal %u blocks for locality group\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Normalization means making request better in terms of</span>", 
"<span class=\"comment\"> * size and alignment</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> void", 
"<a class=\"id\" href=\"#ext4_mb_normalize_request\">ext4_mb_normalize_request</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_allocation_request\">ext4_allocation_request</a> *<a class=\"id\" href=\"#ar\">ar</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bsbits\">bsbits</a>, <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#orig_size\">orig_size</a>, <a class=\"id\" href=\"#start_off\">start_off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do normalize only data requests, metadata requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   do not need preallocation */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_DATA\">EXT4_MB_HINT_DATA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sometime caller may want exact blocks */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_GOAL_ONLY\">EXT4_MB_HINT_GOAL_ONLY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* caller may indicate that preallocation isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * required (it's a tail, for example) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_NOPREALLOC\">EXT4_MB_HINT_NOPREALLOC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_GROUP_ALLOC\">EXT4_MB_HINT_GROUP_ALLOC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_normalize_group_request\">ext4_mb_normalize_group_request</a>(<a class=\"id\" href=\"#ac\">ac</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return ;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bsbits\">bsbits</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* first, let's learn actual file size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * given current request is allocated */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> + <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a> << <a class=\"id\" href=\"#bsbits\">bsbits</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#orig_size\">orig_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* max size of free chunks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = 2 << <a class=\"id\" href=\"#bsbits\">bsbits</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NRL_CHECK_SIZE\">NRL_CHECK_SIZE</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#chunk_size\">chunk_size</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#req\">req</a> <= (<a class=\"id\" href=\"#size\">size</a>) || <a class=\"id\" href=\"#max\">max</a> <= (<a class=\"id\" href=\"#chunk_size\">chunk_size</a>))", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* first, try to predict filesize */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX: should this table be tunable? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_off\">start_off</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> <= 16 * 1024) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 16 * 1024;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#size\">size</a> <= 32 * 1024) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 32 * 1024;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#size\">size</a> <= 64 * 1024) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 64 * 1024;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#size\">size</a> <= 128 * 1024) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 128 * 1024;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#size\">size</a> <= 256 * 1024) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 256 * 1024;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#size\">size</a> <= 512 * 1024) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 512 * 1024;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#size\">size</a> <= 1024 * 1024) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 1024 * 1024;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#NRL_CHECK_SIZE\">NRL_CHECK_SIZE</a>(<a class=\"id\" href=\"#size\">size</a>, 4 * 1024 * 1024, <a class=\"id\" href=\"#max\">max</a>, 2 * 1024)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_off\">start_off</a> = ((<a class=\"id\" href=\"#loff_t\">loff_t</a>)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> >>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(21 - <a class=\"id\" href=\"#bsbits\">bsbits</a>)) << 21;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 2 * 1024 * 1024;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#NRL_CHECK_SIZE\">NRL_CHECK_SIZE</a>(<a class=\"id\" href=\"#size\">size</a>, 8 * 1024 * 1024, <a class=\"id\" href=\"#max\">max</a>, 4 * 1024)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_off\">start_off</a> = ((<a class=\"id\" href=\"#loff_t\">loff_t</a>)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> >>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(22 - <a class=\"id\" href=\"#bsbits\">bsbits</a>)) << 22;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 4 * 1024 * 1024;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#NRL_CHECK_SIZE\">NRL_CHECK_SIZE</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(8<<20)>><a class=\"id\" href=\"#bsbits\">bsbits</a>, <a class=\"id\" href=\"#max\">max</a>, 8 * 1024)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_off\">start_off</a> = ((<a class=\"id\" href=\"#loff_t\">loff_t</a>)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> >>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(23 - <a class=\"id\" href=\"#bsbits\">bsbits</a>)) << 23;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 8 * 1024 * 1024;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_off\">start_off</a> = (<a class=\"id\" href=\"#loff_t\">loff_t</a>)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> << <a class=\"id\" href=\"#bsbits\">bsbits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a><span class=\"ts\"/>  = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> << <a class=\"id\" href=\"#bsbits\">bsbits</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a> >> <a class=\"id\" href=\"#bsbits\">bsbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start_off\">start_off</a> >> <a class=\"id\" href=\"#bsbits\">bsbits</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't cover already allocated blocks in selected range */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#pleft\">pleft</a> && <a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#lleft\">lleft</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#lleft\">lleft</a> + 1 - <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#lleft\">lleft</a> + 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#pright\">pright</a> && <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a> - 1 >= <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#lright\">lright</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#lright\">lright</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check we don't cross already preallocated blocks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#pa\">pa</a>, &amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_list\">i_prealloc_list</a>, <a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#pa_end\">pa_end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa_end\">pa_end</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a> + <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* PA must not overlap original request */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> >= <a class=\"id\" href=\"#pa_end\">pa_end</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> &lt; <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip PAs this normalized request doesn't overlap with */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a> >= <a class=\"id\" href=\"#end\">end</a> || <a class=\"id\" href=\"#pa_end\">pa_end</a> <= <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a> <= <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#pa_end\">pa_end</a> >= <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* adjust start or end to be adjacent to this pa */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pa_end\">pa_end</a> <= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pa_end\">pa_end</a> &lt; <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#pa_end\">pa_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a> &gt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a> &gt; <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX: extra loop to check we really don't overlap preallocations */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#pa\">pa</a>, &amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_list\">i_prealloc_list</a>, <a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#pa_end\">pa_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa_end\">pa_end</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a> + <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#pa_end\">pa_end</a> || <a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"start %lu, size %lu, fe_logical %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long) <a class=\"id\" href=\"#start\">start</a>, (unsigned long) <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long) <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#size\">size</a> <= 0 || <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* now prepare goal request */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX: is it better to align blocks WRT to logical</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * placement or satisfy big request as is */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* define goal start in order to merge */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#pright\">pright</a> && (<a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#lright\">lright</a> == (<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* merge to the right */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#pright\">pright</a> - <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_f_ex\">ac_f_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_f_ex\">ac_f_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> |= <a class=\"id\" href=\"#EXT4_MB_HINT_TRY_GOAL\">EXT4_MB_HINT_TRY_GOAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#pleft\">pleft</a> && (<a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#lleft\">lleft</a> + 1 == <a class=\"id\" href=\"#start\">start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* merge to the left */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#pleft\">pleft</a> + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_f_ex\">ac_f_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_f_ex\">ac_f_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> |= <a class=\"id\" href=\"#EXT4_MB_HINT_TRY_GOAL\">EXT4_MB_HINT_TRY_GOAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"goal: %u(was %u) blocks at %u\\n\", (unsigned) <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned) <a class=\"id\" href=\"#orig_size\">orig_size</a>, (unsigned) <a class=\"id\" href=\"#start\">start</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext4_mb_collect_stats\">ext4_mb_collect_stats</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_stats\">s_mb_stats</a> && <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_reqs\">s_bal_reqs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>, &amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_allocated\">s_bal_allocated</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> >= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_success\">s_bal_success</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_found\">ac_found</a>, &amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_ex_scanned\">s_bal_ex_scanned</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> == <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a> == <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_goals\">s_bal_goals</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_found\">ac_found</a> &gt; <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_max_to_scan\">s_mb_max_to_scan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_bal_breaks\">s_bal_breaks</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_op\">ac_op</a> == <a class=\"id\" href=\"#EXT4_MB_HISTORY_ALLOC\">EXT4_MB_HISTORY_ALLOC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_mballoc_alloc\">trace_ext4_mballoc_alloc</a>(<a class=\"id\" href=\"#ac\">ac</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_mballoc_prealloc\">trace_ext4_mballoc_prealloc</a>(<a class=\"id\" href=\"#ac\">ac</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called on failure; free up any blocks from the inode PA for this</span>", 
"<span class=\"comment\"> * context.  We don't need this for MB_GROUP_PA because we only change</span>", 
"<span class=\"comment\"> * pa_free in ext4_mb_release_context(), but on failure, we've already</span>", 
"<span class=\"comment\"> * zeroed out ac-&gt;ac_b_ex.fe_len, so group_pa-&gt;pa_free is not changed.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_discard_allocated_blocks\">ext4_discard_allocated_blocks</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_pa\">ac_pa</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a> && <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_type\">pa_type</a> == <a class=\"id\" href=\"#MB_INODE_PA\">MB_INODE_PA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>}", 
"", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * use blocks preallocated to inode</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_mb_use_inode_pa\">ext4_mb_use_inode_pa</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* found preallocated blocks, use them */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a> + (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> - <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a> + <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>, <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#start\">start</a>, &amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> = <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_pa\">ac_pa</a> = <a class=\"id\" href=\"#pa\">pa</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a> + <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a> &lt; <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"use %llu/%u from inode pa %p\\n\", <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * use blocks preallocated to locality group</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_mb_use_group_pa\">ext4_mb_use_group_pa</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> = <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_pa\">ac_pa</a> = <a class=\"id\" href=\"#pa\">pa</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we don't correct pa_pstart or pa_plen here to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * possible race when the group is being loaded concurrently</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * instead we correct pa later, after blocks are marked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in on-disk bitmap -- see ext4_mb_release_context()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Other CPUs are prevented from allocating from this pa by lg_mutex</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"use %u/%u from group pa %p\\n\", <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a>-<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the prealloc space that have minimal distance</span>", 
"<span class=\"comment\"> * from the goal block. @cpa is the prealloc</span>", 
"<span class=\"comment\"> * space that is having currently known minimal distance</span>", 
"<span class=\"comment\"> * from the goal block.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *", 
"<a class=\"id\" href=\"#ext4_mb_check_group_pa\">ext4_mb_check_group_pa</a>(<a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#goal_block\">goal_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#cpa\">cpa</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#cur_distance\">cur_distance</a>, <a class=\"id\" href=\"#new_distance\">new_distance</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpa\">cpa</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_count\">pa_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pa\">pa</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cur_distance\">cur_distance</a> = <a class=\"id\" href=\"#abs\">abs</a>(<a class=\"id\" href=\"#goal_block\">goal_block</a> - <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_distance\">new_distance</a> = <a class=\"id\" href=\"#abs\">abs</a>(<a class=\"id\" href=\"#goal_block\">goal_block</a> - <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cur_distance\">cur_distance</a> &lt; <a class=\"id\" href=\"#new_distance\">new_distance</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cpa\">cpa</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* drop the previous reference */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pa_count\">pa_count</a>);", 
];
xr_frag_insert('l/7b/a9e4caff77cf6491b0ff9e5e64508e87da5770.xr', __xr_tmp);
