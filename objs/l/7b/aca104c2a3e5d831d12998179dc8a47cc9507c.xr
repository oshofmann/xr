var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Simple insertion-only static-sized priority heap containing</span>", 
"<span class=\"comment\"> * pointers, based on CLR, chapter 7</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#prio_heap\">prio_heap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"int <a class=\"id\" href=\"#heap_init\">heap_init</a>(struct <a class=\"id\" href=\"#ptr_heap\">ptr_heap</a> *<a class=\"id\" href=\"#heap\">heap</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/>      int (*<a class=\"id\" href=\"#gt\">gt</a>)(void *, void *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#ptrs\">ptrs</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#ptrs\">ptrs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#size\">size</a> / sizeof(void *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#gt\">gt</a> = <a class=\"id\" href=\"#gt\">gt</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#heap_free\">heap_free</a>(struct <a class=\"id\" href=\"#ptr_heap\">ptr_heap</a> *<a class=\"id\" href=\"#heap\">heap</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#ptrs\">ptrs</a>);", 
"}", 
"", 
"void *<a class=\"id\" href=\"#heap_insert\">heap_insert</a>(struct <a class=\"id\" href=\"#ptr_heap\">ptr_heap</a> *<a class=\"id\" href=\"#heap\">heap</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>void **<a class=\"id\" href=\"#ptrs\">ptrs</a> = <a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#ptrs\">ptrs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Heap insertion */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#size\">size</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#pos\">pos</a> &gt; 0 && <a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#gt\">gt</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#ptrs\">ptrs</a>[(<a class=\"id\" href=\"#pos\">pos</a>-1)/2])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptrs\">ptrs</a>[<a class=\"id\" href=\"#pos\">pos</a>] = <a class=\"id\" href=\"#ptrs\">ptrs</a>[(<a class=\"id\" href=\"#pos\">pos</a>-1)/2];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#pos\">pos</a>-1)/2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptrs\">ptrs</a>[<a class=\"id\" href=\"#pos\">pos</a>] = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The heap is full, so something will have to be dropped */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the new pointer is greater than the current max, drop it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#gt\">gt</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#ptrs\">ptrs</a>[0]))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Replace the current max and heapify */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptrs\">ptrs</a>[0] = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = 0;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#left\">left</a> = 2 * <a class=\"id\" href=\"#pos\">pos</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#right\">right</a> = 2 * <a class=\"id\" href=\"#pos\">pos</a> + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#largest\">largest</a> = <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a> &lt; <a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#size\">size</a> && <a class=\"id\" href=\"#heap\">heap</a>-><a class=\"id\" href=\"#gt\">gt</a>(<a class=\"id\" href=\"#ptrs\">ptrs</a>[<a class=\"id\" href=\"#left\">left</a>], <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#largest\">largest</a> = <a class=\"id\" href=\"#left\">left</a>;", 
];
xr_frag_insert('l/7b/aca104c2a3e5d831d12998179dc8a47cc9507c.xr', __xr_tmp);
