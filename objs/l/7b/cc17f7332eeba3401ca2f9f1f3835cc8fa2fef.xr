var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic ring buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2008 Steven Rostedt &lt;srostedt@redhat.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ring_buffer\">ring_buffer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#trace_clock\">trace_clock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace_irq\">ftrace_irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemcheck\">kmemcheck</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#local\">local</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The ring buffer header is special. We must manually up keep it.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ring_buffer_print_entry_header\">ring_buffer_print_entry_header</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"# compressed entry header\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\ttype_len    :    5 bits\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\ttime_delta  :   27 bits\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\tarray       :   32 bits\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\tpadding     : type == %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\ttime_extend : type == %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_EXTEND\">RINGBUF_TYPE_TIME_EXTEND</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\tdata max type_len  == %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#RINGBUF_TYPE_DATA_TYPE_LEN_MAX\">RINGBUF_TYPE_DATA_TYPE_LEN_MAX</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The ring buffer is made up of a list of pages. A separate list of pages is</span>", 
"<span class=\"comment\"> * allocated for each CPU. A writer may only write to a buffer that is</span>", 
"<span class=\"comment\"> * associated with the CPU it is currently executing on.  A reader may read</span>", 
"<span class=\"comment\"> * from any per cpu buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The reader is special. For each per cpu buffer, the reader has its own</span>", 
"<span class=\"comment\"> * reader page. When a reader has read the entire reader page, this reader</span>", 
"<span class=\"comment\"> * page is swapped with another page in the ring buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Now, as long as the writer is off the reader page, the reader can do what</span>", 
"<span class=\"comment\"> * ever it wants with that page. The writer will never write to that page</span>", 
"<span class=\"comment\"> * again (as long as it is out of the ring buffer).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Here's some silly ASCII art.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   +------+</span>", 
"<span class=\"comment\"> *   |reader|          RING BUFFER</span>", 
"<span class=\"comment\"> *   |page  |</span>", 
"<span class=\"comment\"> *   +------+        +---+   +---+   +---+</span>", 
"<span class=\"comment\"> *                   |   |--&gt;|   |--&gt;|   |</span>", 
"<span class=\"comment\"> *                   +---+   +---+   +---+</span>", 
"<span class=\"comment\"> *                     ^               |</span>", 
"<span class=\"comment\"> *                     |               |</span>", 
"<span class=\"comment\"> *                     +---------------+</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   +------+</span>", 
"<span class=\"comment\"> *   |reader|          RING BUFFER</span>", 
"<span class=\"comment\"> *   |page  |------------------v</span>", 
"<span class=\"comment\"> *   +------+        +---+   +---+   +---+</span>", 
"<span class=\"comment\"> *                   |   |--&gt;|   |--&gt;|   |</span>", 
"<span class=\"comment\"> *                   +---+   +---+   +---+</span>", 
"<span class=\"comment\"> *                     ^               |</span>", 
"<span class=\"comment\"> *                     |               |</span>", 
"<span class=\"comment\"> *                     +---------------+</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   +------+</span>", 
"<span class=\"comment\"> *   |reader|          RING BUFFER</span>", 
"<span class=\"comment\"> *   |page  |------------------v</span>", 
"<span class=\"comment\"> *   +------+        +---+   +---+   +---+</span>", 
"<span class=\"comment\"> *      ^            |   |--&gt;|   |--&gt;|   |</span>", 
"<span class=\"comment\"> *      |            +---+   +---+   +---+</span>", 
"<span class=\"comment\"> *      |                              |</span>", 
"<span class=\"comment\"> *      |                              |</span>", 
"<span class=\"comment\"> *      +------------------------------+</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   +------+</span>", 
"<span class=\"comment\"> *   |buffer|          RING BUFFER</span>", 
"<span class=\"comment\"> *   |page  |------------------v</span>", 
"<span class=\"comment\"> *   +------+        +---+   +---+   +---+</span>", 
"<span class=\"comment\"> *      ^            |   |   |   |--&gt;|   |</span>", 
"<span class=\"comment\"> *      |   New      +---+   +---+   +---+</span>", 
"<span class=\"comment\"> *      |  Reader------^               |</span>", 
"<span class=\"comment\"> *      |   page                       |</span>", 
"<span class=\"comment\"> *      +------------------------------+</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After we make this swap, the reader can hand this page off to the splice</span>", 
"<span class=\"comment\"> * code and be done with it. It can even allocate a new page if it needs to</span>", 
"<span class=\"comment\"> * and swap that into the ring buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We will be using cmpxchg soon to make all this lockless.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A fast way to enable or disable all ring buffers is to</span>", 
"<span class=\"comment\"> * call tracing_on or tracing_off. Turning off the ring buffers</span>", 
"<span class=\"comment\"> * prevents all ring buffers from being recorded to.</span>", 
"<span class=\"comment\"> * Turning this switch on, makes it OK to write to the</span>", 
"<span class=\"comment\"> * ring buffer, if the ring buffer is enabled itself.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There's three layers that must be on in order to write</span>", 
"<span class=\"comment\"> * to the ring buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1) This global flag must be set.</span>", 
"<span class=\"comment\"> * 2) The ring buffer must be enabled for recording.</span>", 
"<span class=\"comment\"> * 3) The per cpu buffer must be enabled for recording.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In case of an anomaly, this global flag has a bit set that</span>", 
"<span class=\"comment\"> * will permantly disable all ring buffers.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Global flag to disable all recording to ring buffers</span>", 
"<span class=\"comment\"> *  This has two bits: ON, DISABLED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  ON   DISABLED</span>", 
"<span class=\"comment\"> * ---- ----------</span>", 
"<span class=\"comment\"> *   0      0        : ring buffers are off</span>", 
"<span class=\"comment\"> *   1      0        : ring buffers are on</span>", 
"<span class=\"comment\"> *   X      1        : ring buffers are permanently disabled</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_BUFFERS_ON_BIT\">RB_BUFFERS_ON_BIT</a><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_BUFFERS_DISABLED_BIT\">RB_BUFFERS_DISABLED_BIT</a><span class=\"ts\"/>= 1,", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_BUFFERS_ON\">RB_BUFFERS_ON</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << <a class=\"id\" href=\"#RB_BUFFERS_ON_BIT\">RB_BUFFERS_ON_BIT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_BUFFERS_DISABLED\">RB_BUFFERS_DISABLED</a><span class=\"ts\"/>= 1 << <a class=\"id\" href=\"#RB_BUFFERS_DISABLED_BIT\">RB_BUFFERS_DISABLED_BIT</a>,", 
"};", 
"", 
"static unsigned long <a class=\"id\" href=\"#ring_buffer_flags\">ring_buffer_flags</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#RB_BUFFERS_ON\">RB_BUFFERS_ON</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUF_PAGE_HDR_SIZE\">BUF_PAGE_HDR_SIZE</a> <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#buffer_data_page\">buffer_data_page</a>, <a class=\"id\" href=\"#data\">data</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tracing_on - enable all tracing buffers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function enables all tracing buffers that may have been</span>", 
"<span class=\"comment\"> * disabled with tracing_off.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tracing_on\">tracing_on</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#RB_BUFFERS_ON_BIT\">RB_BUFFERS_ON_BIT</a>, &amp;<a class=\"id\" href=\"#ring_buffer_flags\">ring_buffer_flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tracing_on\">tracing_on</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tracing_off - turn off all tracing buffers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function stops all tracing buffers from recording data.</span>", 
"<span class=\"comment\"> * It does not disable any overhead the tracers themselves may</span>", 
"<span class=\"comment\"> * be causing. This function simply causes all recording to</span>", 
"<span class=\"comment\"> * the ring buffers to fail.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tracing_off\">tracing_off</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#RB_BUFFERS_ON_BIT\">RB_BUFFERS_ON_BIT</a>, &amp;<a class=\"id\" href=\"#ring_buffer_flags\">ring_buffer_flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tracing_off\">tracing_off</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tracing_off_permanent - permanently disable ring buffers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function, once called, will disable all ring buffers</span>", 
"<span class=\"comment\"> * permanently.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tracing_off_permanent\">tracing_off_permanent</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#RB_BUFFERS_DISABLED_BIT\">RB_BUFFERS_DISABLED_BIT</a>, &amp;<a class=\"id\" href=\"#ring_buffer_flags\">ring_buffer_flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tracing_is_on - show state of ring buffers enabled</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tracing_is_on\">tracing_is_on</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ring_buffer_flags\">ring_buffer_flags</a> == <a class=\"id\" href=\"#RB_BUFFERS_ON\">RB_BUFFERS_ON</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tracing_is_on\">tracing_is_on</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_EVNT_HDR_SIZE\">RB_EVNT_HDR_SIZE</a> (<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a>, <a class=\"id\" href=\"#array\">array</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_ALIGNMENT\">RB_ALIGNMENT</a><span class=\"ts\"/><span class=\"ts\"/>4U", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_MAX_SMALL_DATA\">RB_MAX_SMALL_DATA</a><span class=\"ts\"/>(<a class=\"id\" href=\"#RB_ALIGNMENT\">RB_ALIGNMENT</a> * <a class=\"id\" href=\"#RINGBUF_TYPE_DATA_TYPE_LEN_MAX\">RINGBUF_TYPE_DATA_TYPE_LEN_MAX</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_EVNT_MIN_SIZE\">RB_EVNT_MIN_SIZE</a><span class=\"ts\"/>8U<span class=\"ts\"/><span class=\"comment\">/* two 32bit words */</span>", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_64BIT\">CONFIG_64BIT</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS\">CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_FORCE_8BYTE_ALIGNMENT\">RB_FORCE_8BYTE_ALIGNMENT</a><span class=\"ts\"/>0", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_ARCH_ALIGNMENT\">RB_ARCH_ALIGNMENT</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RB_ALIGNMENT\">RB_ALIGNMENT</a>", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_FORCE_8BYTE_ALIGNMENT\">RB_FORCE_8BYTE_ALIGNMENT</a><span class=\"ts\"/>1", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_ARCH_ALIGNMENT\">RB_ARCH_ALIGNMENT</a><span class=\"ts\"/><span class=\"ts\"/>8U", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* define RINGBUF_TYPE_DATA for 'case RINGBUF_TYPE_DATA:' */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RINGBUF_TYPE_DATA\">RINGBUF_TYPE_DATA</a> 0 ... <a class=\"id\" href=\"#RINGBUF_TYPE_DATA_TYPE_LEN_MAX\">RINGBUF_TYPE_DATA_TYPE_LEN_MAX</a>", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_LEN_TIME_EXTEND\">RB_LEN_TIME_EXTEND</a> = 8,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_LEN_TIME_STAMP\">RB_LEN_TIME_STAMP</a> = 16,", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rb_null_event\">rb_null_event</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> == <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a> && !<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rb_event_set_padding\">rb_event_set_padding</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* padding has a NULL time_delta */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> = <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a> = 0;", 
"}", 
"", 
"static unsigned", 
"<a class=\"id\" href=\"#rb_event_data_length\">rb_event_data_length</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> * <a class=\"id\" href=\"#RB_ALIGNMENT\">RB_ALIGNMENT</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#length\">length</a> + <a class=\"id\" href=\"#RB_EVNT_HDR_SIZE\">RB_EVNT_HDR_SIZE</a>;", 
"}", 
"", 
"<span class=\"comment\">/* inline for ring buffer fast paths */</span>", 
"static unsigned", 
"<a class=\"id\" href=\"#rb_event_length\">rb_event_length</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_null_event\">rb_null_event</a>(<a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* undefined */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return  <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0] + <a class=\"id\" href=\"#RB_EVNT_HDR_SIZE\">RB_EVNT_HDR_SIZE</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_EXTEND\">RINGBUF_TYPE_TIME_EXTEND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RB_LEN_TIME_EXTEND\">RB_LEN_TIME_EXTEND</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_STAMP\">RINGBUF_TYPE_TIME_STAMP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RB_LEN_TIME_STAMP\">RB_LEN_TIME_STAMP</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_DATA\">RINGBUF_TYPE_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rb_event_data_length\">rb_event_data_length</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* not hit */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_event_length - return the length of the event</span>", 
"<span class=\"comment\"> * @event: the event to get the length of</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned <a class=\"id\" href=\"#ring_buffer_event_length\">ring_buffer_event_length</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#rb_event_length\">rb_event_length</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> &gt; <a class=\"id\" href=\"#RINGBUF_TYPE_DATA_TYPE_LEN_MAX\">RINGBUF_TYPE_DATA_TYPE_LEN_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> -= <a class=\"id\" href=\"#RB_EVNT_HDR_SIZE\">RB_EVNT_HDR_SIZE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#RB_MAX_SMALL_DATA\">RB_MAX_SMALL_DATA</a> + sizeof(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0]))", 
"                <a class=\"id\" href=\"#length\">length</a> -= sizeof(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#length\">length</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_event_length\">ring_buffer_event_length</a>);", 
"", 
"<span class=\"comment\">/* inline for ring buffer fast paths */</span>", 
"static void *", 
"<a class=\"id\" href=\"#rb_event_data\">rb_event_data</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> &gt; <a class=\"id\" href=\"#RINGBUF_TYPE_DATA_TYPE_LEN_MAX\">RINGBUF_TYPE_DATA_TYPE_LEN_MAX</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* If length is in len field, then array[0] has the data */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (void *)&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0];", 
"<span class=\"ts\"/><span class=\"comment\">/* Otherwise length is in array[0] and array[1] has the data */</span>", 
"<span class=\"ts\"/>return (void *)&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[1];", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_event_data - return the data of the event</span>", 
"<span class=\"comment\"> * @event: the event to get the data from</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rb_event_data\">rb_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_buffer_cpu\">for_each_buffer_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TS_SHIFT\">TS_SHIFT</a><span class=\"ts\"/>27", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TS_MASK\">TS_MASK</a><span class=\"ts\"/><span class=\"ts\"/>((1ULL << <a class=\"id\" href=\"#TS_SHIFT\">TS_SHIFT</a>) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TS_DELTA_TEST\">TS_DELTA_TEST</a><span class=\"ts\"/>(~<a class=\"id\" href=\"#TS_MASK\">TS_MASK</a>)", 
"", 
"<span class=\"comment\">/* Flag when events were overwritten */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_MISSED_EVENTS\">RB_MISSED_EVENTS</a><span class=\"ts\"/>(1 << 31)", 
"<span class=\"comment\">/* Missed count stored at end */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_MISSED_STORED\">RB_MISSED_STORED</a><span class=\"ts\"/>(1 << 30)", 
"", 
"struct <a class=\"id\" href=\"#buffer_data_page\">buffer_data_page</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#time_stamp\">time_stamp</a>;<span class=\"ts\"/><span class=\"comment\">/* page time stamp */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#commit\">commit</a>;<span class=\"ts\"/><span class=\"comment\">/* write committed index */</span>", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/> <a class=\"id\" href=\"#data\">data</a>[];<span class=\"ts\"/><span class=\"comment\">/* data of buffer page */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note, the buffer_page list must be first. The buffer pages</span>", 
"<span class=\"comment\"> * are allocated in cache lines, which means that each buffer</span>", 
"<span class=\"comment\"> * page will be at the beginning of a cache line, and thus</span>", 
"<span class=\"comment\"> * the least significant bits will be zero. We use this to</span>", 
"<span class=\"comment\"> * add flags in the list struct pointers, to make the ring buffer</span>", 
"<span class=\"comment\"> * lockless.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* list of buffer pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#write\">write</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* index for next write */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/> <a class=\"id\" href=\"#read\">read</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* index for next read */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#entries\">entries</a>;<span class=\"ts\"/><span class=\"comment\">/* entries on this page */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/> <a class=\"id\" href=\"#real_end\">real_end</a>;<span class=\"ts\"/><span class=\"comment\">/* real end of data */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_data_page\">buffer_data_page</a> *<a class=\"id\" href=\"#page\">page</a>;<span class=\"ts\"/><span class=\"comment\">/* Actual data page */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The buffer page counters, write and entries, must be reset</span>", 
"<span class=\"comment\"> * atomically when crossing page boundaries. To synchronize this</span>", 
"<span class=\"comment\"> * update, two counters are inserted into the number. One is</span>", 
"<span class=\"comment\"> * the actual counter for the write position or count on the page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The other is a counter of updaters. Before an update happens</span>", 
"<span class=\"comment\"> * the update partition of the counter is incremented. This will</span>", 
"<span class=\"comment\"> * allow the updater to update the counter atomically.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The counter is 20 bits, and the state data is 12.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_WRITE_MASK\">RB_WRITE_MASK</a><span class=\"ts\"/><span class=\"ts\"/>0xfffff", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_WRITE_INTCNT\">RB_WRITE_INTCNT</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 20)", 
"", 
"static void <a class=\"id\" href=\"#rb_init_page\">rb_init_page</a>(struct <a class=\"id\" href=\"#buffer_data_page\">buffer_data_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#commit\">commit</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_page_len - the size of data on the page.</span>", 
"<span class=\"comment\"> * @page: The page to read</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the amount of data on the page, including buffer page header.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ring_buffer_page_len\">ring_buffer_page_len</a>(void *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;((struct <a class=\"id\" href=\"#buffer_data_page\">buffer_data_page</a> *)<a class=\"id\" href=\"#page\">page</a>)-><a class=\"id\" href=\"#commit\">commit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#BUF_PAGE_HDR_SIZE\">BUF_PAGE_HDR_SIZE</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Also stolen from mm/slob.c. Thanks to Mathieu Desnoyers for pointing</span>", 
"<span class=\"comment\"> * this issue out.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_buffer_page\">free_buffer_page</a>(struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bpage\">bpage</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need to fit the time_stamp delta into 27 bits.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#test_time_stamp\">test_time_stamp</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &amp; <a class=\"id\" href=\"#TS_DELTA_TEST\">TS_DELTA_TEST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a> (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#BUF_PAGE_HDR_SIZE\">BUF_PAGE_HDR_SIZE</a>)", 
"", 
"<span class=\"comment\">/* Max payload is BUF_PAGE_SIZE - header (8bytes) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUF_MAX_DATA_SIZE\">BUF_MAX_DATA_SIZE</a> (<a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a> - (sizeof(<a class=\"id\" href=\"#u32\">u32</a>) * 2))", 
"", 
"<span class=\"comment\">/* Max number of timestamps that can fit on a page */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_TIMESTAMPS_PER_PAGE\">RB_TIMESTAMPS_PER_PAGE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a> / <a class=\"id\" href=\"#RB_LEN_TIME_EXTEND\">RB_LEN_TIME_EXTEND</a>)", 
"", 
"int <a class=\"id\" href=\"#ring_buffer_print_page_header\">ring_buffer_print_page_header</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_data_page\">buffer_data_page</a> <a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\tfield: u64 timestamp;\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"offset:0;\\tsize:%u;\\tsigned:%u;\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int)sizeof(<a class=\"id\" href=\"#field\">field</a>.<a class=\"id\" href=\"#time_stamp\">time_stamp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int)<a class=\"id\" href=\"#is_signed_type\">is_signed_type</a>(<a class=\"id\" href=\"#u64\">u64</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\tfield: local_t commit;\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"offset:%u;\\tsize:%u;\\tsigned:%u;\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int)<a class=\"id\" href=\"#offsetof\">offsetof</a>(<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#field\">field</a>), <a class=\"id\" href=\"#commit\">commit</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int)sizeof(<a class=\"id\" href=\"#field\">field</a>.<a class=\"id\" href=\"#commit\">commit</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int)<a class=\"id\" href=\"#is_signed_type\">is_signed_type</a>(long));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\tfield: int overwrite;\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"offset:%u;\\tsize:%u;\\tsigned:%u;\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int)<a class=\"id\" href=\"#offsetof\">offsetof</a>(<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#field\">field</a>), <a class=\"id\" href=\"#commit\">commit</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int)<a class=\"id\" href=\"#is_signed_type\">is_signed_type</a>(long));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\tfield: char data;\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"offset:%u;\\tsize:%u;\\tsigned:%u;\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int)<a class=\"id\" href=\"#offsetof\">offsetof</a>(<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#field\">field</a>), <a class=\"id\" href=\"#data\">data</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int)<a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int)<a class=\"id\" href=\"#is_signed_type\">is_signed_type</a>(char));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * head_page == tail_page &amp;&amp; head == tail then buffer is empty.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#record_disabled\">record_disabled</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reader_lock\">reader_lock</a>;<span class=\"ts\"/><span class=\"comment\">/* serialize readers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_key\">lock_key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#head_page\">head_page</a>;<span class=\"ts\"/><span class=\"comment\">/* read from head */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tail_page\">tail_page</a>;<span class=\"ts\"/><span class=\"comment\">/* write to tail */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#commit_page\">commit_page</a>;<span class=\"ts\"/><span class=\"comment\">/* committed pages */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#reader_page\">reader_page</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lost_events\">lost_events</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_overrun\">last_overrun</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit_overrun\">commit_overrun</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#overrun\">overrun</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#committing\">committing</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_t\">local_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commits\">commits</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_stamp\">write_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_stamp\">read_stamp</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> {", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpus\">cpus</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#record_disabled\">record_disabled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask\">cpumask</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#reader_lock_key\">reader_lock_key</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex\">mutex</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a><span class=\"ts\"/>**<a class=\"id\" href=\"#buffers\">buffers</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_notify\">cpu_notify</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#clock\">clock</a>)(void);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a><span class=\"ts\"/>*<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#head_page\">head_page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cache_reader_page\">cache_reader_page</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cache_read\">cache_read</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_stamp\">read_stamp</a>;", 
"};", 
"", 
"<span class=\"comment\">/* buffer may be either ring_buffer or ring_buffer_per_cpu */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#cond\">cond</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#_____ret\">_____ret</a> = <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cond\">cond</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#_____ret\">_____ret</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__same_type\">__same_type</a>(*(<a class=\"id\" href=\"#b\">b</a>), struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a>)) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#__b\">__b</a> =<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void *)<a class=\"id\" href=\"#b\">b</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#__b\">__b</a>-><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_____ret\">_____ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>})", 
"", 
"<span class=\"comment\">/* Up this if you want to test the TIME_EXTENTS and normalization */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEBUG_SHIFT\">DEBUG_SHIFT</a> 0", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rb_time_stamp\">rb_time_stamp</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* shift to debug/test normalization and TIME_EXTENTS */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#clock\">clock</a>() << <a class=\"id\" href=\"#DEBUG_SHIFT\">DEBUG_SHIFT</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ring_buffer_time_stamp\">ring_buffer_time_stamp</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#time\">time</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable_notrace\">preempt_disable_notrace</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#rb_time_stamp\">rb_time_stamp</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched_notrace\">preempt_enable_no_resched_notrace</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#time\">time</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_time_stamp\">ring_buffer_time_stamp</a>);", 
"", 
"void <a class=\"id\" href=\"#ring_buffer_normalize_time_stamp\">ring_buffer_normalize_time_stamp</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Just stupid testing the normalize function and deltas */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ts\">ts</a> >>= <a class=\"id\" href=\"#DEBUG_SHIFT\">DEBUG_SHIFT</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_normalize_time_stamp\">ring_buffer_normalize_time_stamp</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Making the ring buffer lockless makes things tricky.</span>", 
"<span class=\"comment\"> * Although writes only happen on the CPU that they are on,</span>", 
"<span class=\"comment\"> * and they only need to worry about interrupts. Reads can</span>", 
"<span class=\"comment\"> * happen on any CPU.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The reader page is always off the ring buffer, but when the</span>", 
"<span class=\"comment\"> * reader finishes with a page, it needs to swap its page with</span>", 
"<span class=\"comment\"> * a new one from the buffer. The reader needs to take from</span>", 
"<span class=\"comment\"> * the head (writes go to the tail). But if a writer is in overwrite</span>", 
"<span class=\"comment\"> * mode and wraps, it must push the head page forward.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Here lies the problem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The reader must be careful to replace only the head page, and</span>", 
"<span class=\"comment\"> * not another one. As described at the top of the file in the</span>", 
"<span class=\"comment\"> * ASCII art, the reader sets its old page to point to the next</span>", 
"<span class=\"comment\"> * page after head. It then sets the page after head to point to</span>", 
"<span class=\"comment\"> * the old reader page. But if the writer moves the head page</span>", 
"<span class=\"comment\"> * during this operation, the reader could end up with the tail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use cmpxchg to help prevent this race. We also do something</span>", 
"<span class=\"comment\"> * special with the page before head. We set the LSB to 1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When the writer must push the page forward, it will clear the</span>", 
"<span class=\"comment\"> * bit that points to the head page, move the head, and then set</span>", 
"<span class=\"comment\"> * the bit that points to the new head page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We also don't want an interrupt coming in and moving the head</span>", 
"<span class=\"comment\"> * page on another writer. Thus we use the second LSB to catch</span>", 
"<span class=\"comment\"> * that too. Thus:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * head-&gt;list-&gt;prev-&gt;next        bit 1          bit 0</span>", 
"<span class=\"comment\"> *                              -------        -------</span>", 
"<span class=\"comment\"> * Normal page                     0              0</span>", 
"<span class=\"comment\"> * Points to head page             0              1</span>", 
"<span class=\"comment\"> * New head page                   1              0</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note we can not trust the prev pointer of the head page, because:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * +----+       +-----+        +-----+</span>", 
"<span class=\"comment\"> * |    |------&gt;|  T  |---X---&gt;|  N  |</span>", 
"<span class=\"comment\"> * |    |&lt;------|     |        |     |</span>", 
"<span class=\"comment\"> * +----+       +-----+        +-----+</span>", 
"<span class=\"comment\"> *   ^                           ^ |</span>", 
"<span class=\"comment\"> *   |          +-----+          | |</span>", 
"<span class=\"comment\"> *   +----------|  R  |----------+ |</span>", 
"<span class=\"comment\"> *              |     |&lt;-----------+</span>", 
"<span class=\"comment\"> *              +-----+</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Key:  ---X--&gt;  HEAD flag set in pointer</span>", 
"<span class=\"comment\"> *         T      Tail page</span>", 
"<span class=\"comment\"> *         R      Reader page</span>", 
"<span class=\"comment\"> *         N      Next page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (see __rb_reserve_next() to see where this happens)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  What the above shows is that the reader just swapped out</span>", 
"<span class=\"comment\"> *  the reader page with a page in the buffer, but before it</span>", 
"<span class=\"comment\"> *  could make the new header point back to the new page added</span>", 
"<span class=\"comment\"> *  it was preempted by a writer. The writer moved forward onto</span>", 
"<span class=\"comment\"> *  the new page added by the reader and is about to move forward</span>", 
"<span class=\"comment\"> *  again.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You can see, it is legitimate for the previous pointer of</span>", 
"<span class=\"comment\"> *  the head (or any page) not to point back to itself. But only</span>", 
"<span class=\"comment\"> *  temporarially.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_PAGE_NORMAL\">RB_PAGE_NORMAL</a><span class=\"ts\"/><span class=\"ts\"/>0UL", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_PAGE_HEAD\">RB_PAGE_HEAD</a><span class=\"ts\"/><span class=\"ts\"/>1UL", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_PAGE_UPDATE\">RB_PAGE_UPDATE</a><span class=\"ts\"/><span class=\"ts\"/>2UL", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_FLAG_MASK\">RB_FLAG_MASK</a><span class=\"ts\"/><span class=\"ts\"/>3UL", 
"", 
"<span class=\"comment\">/* PAGE_MOVED is not part of the mask */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_PAGE_MOVED\">RB_PAGE_MOVED</a><span class=\"ts\"/><span class=\"ts\"/>4UL", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rb_list_head - remove any bit</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#rb_list_head\">rb_list_head</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a> = (unsigned long)<a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#list_head\">list_head</a> *)(<a class=\"id\" href=\"#val\">val</a> &amp; ~<a class=\"id\" href=\"#RB_FLAG_MASK\">RB_FLAG_MASK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rb_is_head_page - test if the given page is the head page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Because the reader may move the head_page pointer, we can</span>", 
"<span class=\"comment\"> * not trust what the head page is (it may be pointing to</span>", 
"<span class=\"comment\"> * the reader page). But if the next page is a header page,</span>", 
"<span class=\"comment\"> * its flags will be non zero.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#inline\">inline</a>", 
"<a class=\"id\" href=\"#rb_is_head_page\">rb_is_head_page</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = (unsigned long)<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#val\">val</a> &amp; ~<a class=\"id\" href=\"#RB_FLAG_MASK\">RB_FLAG_MASK</a>) != (unsigned long)&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RB_PAGE_MOVED\">RB_PAGE_MOVED</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#RB_FLAG_MASK\">RB_FLAG_MASK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rb_is_reader_page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The unique thing about the reader page, is that, if the</span>", 
"<span class=\"comment\"> * writer is ever on it, the previous pointer never points</span>", 
"<span class=\"comment\"> * back to the reader page.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rb_is_reader_page\">rb_is_reader_page</a>(struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rb_list_head\">rb_list_head</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>) != &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#list\">list</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rb_set_list_to_head - set a list_head to be pointing to head.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rb_set_list_to_head\">rb_set_list_to_head</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = (unsigned long *)&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a> |= <a class=\"id\" href=\"#RB_PAGE_HEAD\">RB_PAGE_HEAD</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a> &= ~<a class=\"id\" href=\"#RB_PAGE_UPDATE\">RB_PAGE_UPDATE</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rb_head_page_activate - sets up head page</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rb_head_page_activate\">rb_head_page_activate</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set the previous list pointer to have the HEAD flag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_set_list_to_head\">rb_set_list_to_head</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rb_list_head_clear\">rb_list_head_clear</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#ptr\">ptr</a> = (unsigned long *)&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a> &= ~<a class=\"id\" href=\"#RB_FLAG_MASK\">RB_FLAG_MASK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rb_head_page_dactivate - clears head page ptr (for free list)</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#rb_head_page_deactivate\">rb_head_page_deactivate</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#hd\">hd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Go through the whole list and clear any pointers found. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_list_head_clear\">rb_list_head_clear</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#hd\">hd</a>, <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_list_head_clear\">rb_list_head_clear</a>(<a class=\"id\" href=\"#hd\">hd</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rb_head_page_set\">rb_head_page_set</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#old_flag\">old_flag</a>, int <a class=\"id\" href=\"#new_flag\">new_flag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a> = (unsigned long)&amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> &= ~<a class=\"id\" href=\"#RB_FLAG_MASK\">RB_FLAG_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>((unsigned long *)&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#val\">val</a> | <a class=\"id\" href=\"#old_flag\">old_flag</a>, <a class=\"id\" href=\"#val\">val</a> | <a class=\"id\" href=\"#new_flag\">new_flag</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check if the reader took the page */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> &amp; ~<a class=\"id\" href=\"#RB_FLAG_MASK\">RB_FLAG_MASK</a>) != <a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RB_PAGE_MOVED\">RB_PAGE_MOVED</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> &amp; <a class=\"id\" href=\"#RB_FLAG_MASK\">RB_FLAG_MASK</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rb_head_page_set_update\">rb_head_page_set_update</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#old_flag\">old_flag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rb_head_page_set\">rb_head_page_set</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_flag\">old_flag</a>, <a class=\"id\" href=\"#RB_PAGE_UPDATE\">RB_PAGE_UPDATE</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rb_head_page_set_head\">rb_head_page_set_head</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#old_flag\">old_flag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rb_head_page_set\">rb_head_page_set</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_flag\">old_flag</a>, <a class=\"id\" href=\"#RB_PAGE_HEAD\">RB_PAGE_HEAD</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rb_head_page_set_normal\">rb_head_page_set_normal</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#old_flag\">old_flag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rb_head_page_set\">rb_head_page_set</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_flag\">old_flag</a>, <a class=\"id\" href=\"#RB_PAGE_NORMAL\">RB_PAGE_NORMAL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rb_inc_page\">rb_inc_page</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> **<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rb_list_head\">rb_list_head</a>((*<a class=\"id\" href=\"#bpage\">bpage</a>)-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#bpage\">bpage</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *", 
"<a class=\"id\" href=\"#rb_set_head_page\">rb_set_head_page</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, !<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sanity check */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#rb_list_head\">rb_list_head</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a>) != <a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is possible that the writer moves the header behind</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * where we started, and we miss in one loop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A second loop should grab the header, but we'll do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * three loops just because I'm paranoid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 3; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_is_head_page\">rb_is_head_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_inc_page\">rb_inc_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#page\">page</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, 1);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rb_head_page_replace\">rb_head_page_replace</a>(struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#ptr\">ptr</a> = (unsigned long *)&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = *<a class=\"id\" href=\"#ptr\">ptr</a> &amp; ~<a class=\"id\" href=\"#RB_FLAG_MASK\">RB_FLAG_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= <a class=\"id\" href=\"#RB_PAGE_HEAD\">RB_PAGE_HEAD</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#val\">val</a>, (unsigned long)&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rb_tail_page_update - move the tail page forward</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if moved tail page, 0 if someone else did.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rb_tail_page_update\">rb_tail_page_update</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#tail_page\">tail_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#next_page\">next_page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#old_tail\">old_tail</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_entries\">old_entries</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_write\">old_write</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The tail page now needs to be moved forward.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to reset the tail page, but without messing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with possible erasing of data brought in by interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that have moved the tail page and are currently on it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We add a counter to the write field to denote this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_write\">old_write</a> = <a class=\"id\" href=\"#local_add_return\">local_add_return</a>(<a class=\"id\" href=\"#RB_WRITE_INTCNT\">RB_WRITE_INTCNT</a>, &amp;<a class=\"id\" href=\"#next_page\">next_page</a>-><a class=\"id\" href=\"#write\">write</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_entries\">old_entries</a> = <a class=\"id\" href=\"#local_add_return\">local_add_return</a>(<a class=\"id\" href=\"#RB_WRITE_INTCNT\">RB_WRITE_INTCNT</a>, &amp;<a class=\"id\" href=\"#next_page\">next_page</a>-><a class=\"id\" href=\"#entries\">entries</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Just make sure we have seen our old_write and synchronize</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with any interrupts that come in.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the tail page is still the same as what we think</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it is, then it is up to us to update the tail</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pointer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tail_page\">tail_page</a> == <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Zero the write counter */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#old_write\">old_write</a> &amp; ~<a class=\"id\" href=\"#RB_WRITE_MASK\">RB_WRITE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#eval\">eval</a> = <a class=\"id\" href=\"#old_entries\">old_entries</a> &amp; ~<a class=\"id\" href=\"#RB_WRITE_MASK\">RB_WRITE_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This will only succeed if an interrupt did</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not come in and change it. In which case, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do not want to modify it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We add (void) to let the compiler know that we do not care</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * about the return value of these functions. We use the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cmpxchg to only update if an interrupt did not already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do it for us. If the cmpxchg fails, we don't care.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#local_cmpxchg\">local_cmpxchg</a>(&amp;<a class=\"id\" href=\"#next_page\">next_page</a>-><a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#old_write\">old_write</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#local_cmpxchg\">local_cmpxchg</a>(&amp;<a class=\"id\" href=\"#next_page\">next_page</a>-><a class=\"id\" href=\"#entries\">entries</a>, <a class=\"id\" href=\"#old_entries\">old_entries</a>, <a class=\"id\" href=\"#eval\">eval</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No need to worry about races with clearing out the commit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it only can increment when a commit takes place. But that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only happens in the outer most nested commit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#next_page\">next_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#commit\">commit</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_tail\">old_tail</a> = <a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#tail_page\">tail_page</a>, <a class=\"id\" href=\"#next_page\">next_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_tail\">old_tail</a> == <a class=\"id\" href=\"#tail_page\">tail_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rb_check_bpage\">rb_check_bpage</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a> = (unsigned long)<a class=\"id\" href=\"#bpage\">bpage</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#RB_FLAG_MASK\">RB_FLAG_MASK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
];
xr_frag_insert('l/7b/cc17f7332eeba3401ca2f9f1f3835cc8fa2fef.xr', __xr_tmp);
