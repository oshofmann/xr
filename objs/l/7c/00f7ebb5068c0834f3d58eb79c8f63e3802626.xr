var __xr_tmp = [
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"scan_unevictable_pages\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#scan_unevictable_pages\">scan_unevictable_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(<a class=\"id\" href=\"#scan_unevictable_pages\">scan_unevictable_pages</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#scan_unevictable_handler\">scan_unevictable_handler</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_FAILURE\">CONFIG_MEMORY_FAILURE</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"memory_failure_early_kill\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#sysctl_memory_failure_early_kill\">sysctl_memory_failure_early_kill</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(<a class=\"id\" href=\"#sysctl_memory_failure_early_kill\">sysctl_memory_failure_early_kill</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#zero\">zero</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra2\">extra2</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#one\">one</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"memory_failure_recovery\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#sysctl_memory_failure_recovery\">sysctl_memory_failure_recovery</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(<a class=\"id\" href=\"#sysctl_memory_failure_recovery\">sysctl_memory_failure_recovery</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#zero\">zero</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra2\">extra2</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#one\">one</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE: do not add new entries to this table unless you have read</span>", 
"<span class=\"comment\"> * Documentation/sysctl/ctl_unnumbered.txt</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BINFMT_MISC\">CONFIG_BINFMT_MISC</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BINFMT_MISC_MODULE\">CONFIG_BINFMT_MISC_MODULE</a>)", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#binfmt_misc_table\">binfmt_misc_table</a>[] = {", 
"<span class=\"ts\"/>{ }", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#fs_table\">fs_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"inode-nr\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= 2*sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0444,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"inode-state\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= 7*sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0444,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"file-nr\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#files_stat\">files_stat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= 3*sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0444,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_nr_files\">proc_nr_files</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"file-max\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#files_stat\">files_stat</a>.<a class=\"id\" href=\"#max_files\">max_files</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"nr_open\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#sysctl_nr_open\">sysctl_nr_open</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#sysctl_nr_open_min\">sysctl_nr_open_min</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra2\">extra2</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#sysctl_nr_open_max\">sysctl_nr_open_max</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"dentry-state\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#dentry_stat\">dentry_stat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= 6*sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0444,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"overflowuid\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#fs_overflowuid\">fs_overflowuid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#minolduid\">minolduid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra2\">extra2</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#maxolduid\">maxolduid</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"overflowgid\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#fs_overflowgid\">fs_overflowgid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#minolduid\">minolduid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra2\">extra2</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#maxolduid\">maxolduid</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FILE_LOCKING\">CONFIG_FILE_LOCKING</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"leases-enable\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#leases_enable\">leases_enable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DNOTIFY\">CONFIG_DNOTIFY</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"dir-notify-enable\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#dir_notify_enable\">dir_notify_enable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FILE_LOCKING\">CONFIG_FILE_LOCKING</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"lease-break-time\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#lease_break_time\">lease_break_time</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AIO\">CONFIG_AIO</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"aio-nr\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#aio_nr\">aio_nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(<a class=\"id\" href=\"#aio_nr\">aio_nr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0444,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"aio-max-nr\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#aio_max_nr\">aio_max_nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(<a class=\"id\" href=\"#aio_max_nr\">aio_max_nr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_AIO */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INOTIFY_USER\">CONFIG_INOTIFY_USER</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"inotify\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0555,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#child\">child</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#inotify_table\">inotify_table</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EPOLL\">CONFIG_EPOLL</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"epoll\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0555,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#child\">child</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#epoll_table\">epoll_table</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"suid_dumpable\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#suid_dumpable\">suid_dumpable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#zero\">zero</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra2\">extra2</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#two\">two</a>,", 
"<span class=\"ts\"/>},", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BINFMT_MISC\">CONFIG_BINFMT_MISC</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BINFMT_MISC_MODULE\">CONFIG_BINFMT_MISC_MODULE</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"binfmt_misc\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0555,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#child\">child</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#binfmt_misc_table\">binfmt_misc_table</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"pipe-max-size\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#pipe_max_size\">pipe_max_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#pipe_proc_fn\">pipe_proc_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#pipe_min_size\">pipe_min_size</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE: do not add new entries to this table unless you have read</span>", 
"<span class=\"comment\"> * Documentation/sysctl/ctl_unnumbered.txt</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#debug_table\">debug_table</a>[] = {", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86\">CONFIG_X86</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PPC\">CONFIG_PPC</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SPARC\">CONFIG_SPARC</a>) || \\", 
"    <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_S390\">CONFIG_S390</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"exception-trace\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#show_unhandled_signals\">show_unhandled_signals</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_OPTPROBES\">CONFIG_OPTPROBES</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#procname\">procname</a><span class=\"ts\"/>= \"kprobes-optimization\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#sysctl_kprobes_optimization\">sysctl_kprobes_optimization</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#maxlen\">maxlen</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(int),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/><span class=\"ts\"/>= 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#proc_handler\">proc_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_kprobes_optimization_handler\">proc_kprobes_optimization_handler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra1\">extra1</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#zero\">zero</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#extra2\">extra2</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#one\">one</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#dev_table\">dev_table</a>[] = {", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"", 
"<span class=\"comment\">/* called under sysctl_lock */</span>", 
"static int <a class=\"id\" href=\"#use_table\">use_table</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unregistering\">unregistering</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#used\">used</a>++;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/* called under sysctl_lock */</span>", 
"static void <a class=\"id\" href=\"#unuse_table\">unuse_table</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#used\">used</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unregistering\">unregistering</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unregistering\">unregistering</a>);", 
"}", 
"", 
"<span class=\"comment\">/* called under sysctl_lock, will reacquire if has to wait */</span>", 
"static void <a class=\"id\" href=\"#start_unregistering\">start_unregistering</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if p-&gt;used is 0, nobody will ever touch that entry again;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we'll eliminate all paths to it before dropping sysctl_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#used\">used</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unregistering\">unregistering</a> = &amp;<a class=\"id\" href=\"#wait\">wait</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* anything non-NULL; we'll never dereference it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unregistering\">unregistering</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do not remove from the list until nobody holds it; walking the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list in do_sysctl() relies on that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ctl_entry\">ctl_entry</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#sysctl_head_get\">sysctl_head_get</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#sysctl_head_put\">sysctl_head_put</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#sysctl_head_grab\">sysctl_head_grab</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#use_table\">use_table</a>(<a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOENT\">ENOENT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#sysctl_head_finish\">sysctl_head_finish</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unuse_table\">unuse_table</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a> *", 
"<a class=\"id\" href=\"#lookup_header_set\">lookup_header_set</a>(struct <a class=\"id\" href=\"#ctl_table_root\">ctl_table_root</a> *<a class=\"id\" href=\"#root\">root</a>, struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#namespaces\">namespaces</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a> *<a class=\"id\" href=\"#set\">set</a> = &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#default_set\">default_set</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#lookup\">lookup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#lookup\">lookup</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#namespaces\">namespaces</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set\">set</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> *", 
"<a class=\"id\" href=\"#lookup_header_list\">lookup_header_list</a>(struct <a class=\"id\" href=\"#ctl_table_root\">ctl_table_root</a> *<a class=\"id\" href=\"#root\">root</a>, struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#namespaces\">namespaces</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a> *<a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#lookup_header_set\">lookup_header_set</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#namespaces\">namespaces</a>);", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#list\">list</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#__sysctl_head_next\">__sysctl_head_next</a>(struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#namespaces\">namespaces</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_root\">ctl_table_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#header_list\">header_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = &amp;<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#ctl_entry\">ctl_entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unuse_table\">unuse_table</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = &amp;<a class=\"id\" href=\"#root_table_header\">root_table_header</a>.<a class=\"id\" href=\"#ctl_entry\">ctl_entry</a>;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a>, <a class=\"id\" href=\"#ctl_entry\">ctl_entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#use_table\">use_table</a>(<a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header_list\">header_list</a> = <a class=\"id\" href=\"#lookup_header_list\">lookup_header_list</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#namespaces\">namespaces</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> != <a class=\"id\" href=\"#header_list\">header_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#root_list\">root_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_root\">ctl_table_root</a>, <a class=\"id\" href=\"#root_list\">root_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a> == &amp;<a class=\"id\" href=\"#sysctl_table_root\">sysctl_table_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header_list\">header_list</a> = <a class=\"id\" href=\"#lookup_header_list\">lookup_header_list</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#namespaces\">namespaces</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#header_list\">header_list</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#header_list\">header_list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#sysctl_head_next\">sysctl_head_next</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__sysctl_head_next\">__sysctl_head_next</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#register_sysctl_root\">register_sysctl_root</a>(struct <a class=\"id\" href=\"#ctl_table_root\">ctl_table_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#root_list\">root_list</a>, &amp;<a class=\"id\" href=\"#sysctl_table_root\">sysctl_table_root</a>.<a class=\"id\" href=\"#root_list\">root_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sysctl_perm does NOT grant the superuser all rights automatically, because</span>", 
"<span class=\"comment\"> * some sysctl variables are readonly even to root.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#test_perm\">test_perm</a>(int <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#current_euid\">current_euid</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> >>= 6;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#in_egroup_p\">in_egroup_p</a>(0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> >>= 3;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#op\">op</a> &amp; ~<a class=\"id\" href=\"#mode\">mode</a> &amp; (<a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>|<a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>|<a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>)) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#sysctl_perm\">sysctl_perm</a>(struct <a class=\"id\" href=\"#ctl_table_root\">ctl_table_root</a> *<a class=\"id\" href=\"#root\">root</a>, struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mode\">mode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_sysctl\">security_sysctl</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#op\">op</a> &amp; (<a class=\"id\" href=\"#MAY_READ\">MAY_READ</a> | <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a> | <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#permissions\">permissions</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#permissions\">permissions</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>, <a class=\"id\" href=\"#table\">table</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#mode\">mode</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_perm\">test_perm</a>(<a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#op\">op</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sysctl_set_parent\">sysctl_set_parent</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#procname\">procname</a>; <a class=\"id\" href=\"#table\">table</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#child\">child</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_set_parent\">sysctl_set_parent</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#sysctl_init\">sysctl_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_set_parent\">sysctl_set_parent</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#root_table\">root_table</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL_SYSCALL_CHECK\">CONFIG_SYSCTL_SYSCALL_CHECK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_check_table\">sysctl_check_table</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>, <a class=\"id\" href=\"#root_table\">root_table</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#sysctl_init\">sysctl_init</a>);", 
"", 
"static struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#is_branch_in\">is_branch_in</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#branch\">branch</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#branch\">branch</a>-><a class=\"id\" href=\"#procname\">procname</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* branch should have named subdirectory as its first element */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a> || !<a class=\"id\" href=\"#branch\">branch</a>-><a class=\"id\" href=\"#child\">child</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ... and nothing else */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#branch\">branch</a>[1].<a class=\"id\" href=\"#procname\">procname</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* table should contain subdirectory with the same name */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#table\">table</a>; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#procname\">procname</a>; <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#child\">child</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#procname\">procname</a> && <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#procname\">procname</a>, <a class=\"id\" href=\"#s\">s</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* see if attaching q to p would be an improvement */</span>", 
"static void <a class=\"id\" href=\"#try_attach\">try_attach</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ctl_table\">ctl_table</a>, *<a class=\"id\" href=\"#by\">by</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ctl_table\">ctl_table</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_better\">is_better</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#not_in_parent\">not_in_parent</a> = !<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#attached_by\">attached_by</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#is_branch_in\">is_branch_in</a>(<a class=\"id\" href=\"#by\">by</a>, <a class=\"id\" href=\"#to\">to</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#by\">by</a> == <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#attached_by\">attached_by</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_better\">is_better</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a> == <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#attached_by\">attached_by</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#not_in_parent\">not_in_parent</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#by\">by</a> = <a class=\"id\" href=\"#by\">by</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_better\">is_better</a> && <a class=\"id\" href=\"#not_in_parent\">not_in_parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#attached_by\">attached_by</a> = <a class=\"id\" href=\"#by\">by</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#attached_to\">attached_to</a> = <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __register_sysctl_paths - register a sysctl hierarchy</span>", 
"<span class=\"comment\"> * @root: List of sysctl headers to register on</span>", 
"<span class=\"comment\"> * @namespaces: Data to compute which lists of sysctl entries are visible</span>", 
"<span class=\"comment\"> * @path: The path to the directory the sysctl table is in.</span>", 
"<span class=\"comment\"> * @table: the top-level table structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register a sysctl table hierarchy. @table should be a filled in ctl_table</span>", 
"<span class=\"comment\"> * array. A completely 0 filled entry terminates the table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The members of the &amp;struct ctl_table structure are used as follows:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * procname - the name of the sysctl file under /proc/sys. Set to %NULL to not</span>", 
"<span class=\"comment\"> *            enter a sysctl file</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * data - a pointer to data for use by proc_handler</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * maxlen - the maximum size in bytes of the data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mode - the file permissions for the /proc/sys file, and for sysctl(2)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * child - a pointer to the child sysctl table if this entry is a directory, or</span>", 
"<span class=\"comment\"> *         %NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * proc_handler - the text handler routine (described below)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * de - for internal use by the sysctl routines</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * extra1, extra2 - extra pointers usable by the proc handler routines</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Leaf nodes in the sysctl tree will be represented by a single file</span>", 
"<span class=\"comment\"> * under /proc; non-leaf nodes will be represented by directories.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * sysctl(2) can automatically manage read and write requests through</span>", 
"<span class=\"comment\"> * the sysctl table.  The data and maxlen fields of the ctl_table</span>", 
"<span class=\"comment\"> * struct enable minimal validation of the values being written to be</span>", 
"<span class=\"comment\"> * performed, and the mode field allows minimal authentication.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There must be a proc_handler routine for any terminal nodes</span>", 
"<span class=\"comment\"> * mirrored under /proc/sys (non-terminals are handled by a built-in</span>", 
"<span class=\"comment\"> * directory handler).  Several default handlers are available to</span>", 
"<span class=\"comment\"> * cover common cases -</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * proc_dostring(), proc_dointvec(), proc_dointvec_jiffies(),</span>", 
"<span class=\"comment\"> * proc_dointvec_userhz_jiffies(), proc_dointvec_minmax(), </span>", 
"<span class=\"comment\"> * proc_doulongvec_ms_jiffies_minmax(), proc_doulongvec_minmax()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is the handler's job to read the input buffer from user memory</span>", 
"<span class=\"comment\"> * and process it. The handler should return 0 on success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine returns %NULL on a failure to register, and a pointer</span>", 
"<span class=\"comment\"> * to the table header on success.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#__register_sysctl_paths\">__register_sysctl_paths</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_root\">ctl_table_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#namespaces\">namespaces</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ctl_path\">ctl_path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#header\">header</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#new\">new</a>, **<a class=\"id\" href=\"#prevp\">prevp</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#npath\">npath</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a> *<a class=\"id\" href=\"#set\">set</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Count the path components */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#npath\">npath</a> = 0; <a class=\"id\" href=\"#path\">path</a>[<a class=\"id\" href=\"#npath\">npath</a>].<a class=\"id\" href=\"#procname\">procname</a>; ++<a class=\"id\" href=\"#npath\">npath</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For each path component, allocate a 2-element ctl_table array.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The first array element will be filled with the sysctl entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for this, the second will be the sentinel (procname == 0).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We allocate everything in one go so that we don't have to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * worry about freeing additional memory in unregister_sysctl_table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (2 * <a class=\"id\" href=\"#npath\">npath</a> * sizeof(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a>)), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#header\">header</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = (struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *) (<a class=\"id\" href=\"#header\">header</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now connect the dots */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prevp\">prevp</a> = &amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#ctl_table\">ctl_table</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = 0; <a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#npath\">npath</a>; ++<a class=\"id\" href=\"#n\">n</a>, ++<a class=\"id\" href=\"#path\">path</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Copy the procname */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#procname\">procname</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#procname\">procname</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mode\">mode</a>     = 0555;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#prevp\">prevp</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prevp\">prevp</a> = &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> += 2;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#prevp\">prevp</a> = <a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#ctl_table_arg\">ctl_table_arg</a> = <a class=\"id\" href=\"#table\">table</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#ctl_entry\">ctl_entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#used\">used</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#unregistering\">unregistering</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_set_parent\">sysctl_set_parent</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#ctl_table\">ctl_table</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#count\">count</a> = 1;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL_SYSCALL_CHECK\">CONFIG_SYSCTL_SYSCALL_CHECK</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_check_table\">sysctl_check_table</a>(<a class=\"id\" href=\"#namespaces\">namespaces</a>, <a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#ctl_table\">ctl_table</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#header\">header</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#lookup_header_set\">lookup_header_set</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#namespaces\">namespaces</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#attached_by\">attached_by</a> = <a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#ctl_table\">ctl_table</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#attached_to\">attached_to</a> = <a class=\"id\" href=\"#root_table\">root_table</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#parent\">parent</a> = &amp;<a class=\"id\" href=\"#root_table_header\">root_table_header</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#set\">set</a>; <a class=\"id\" href=\"#set\">set</a>; <a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#ctl_entry\">ctl_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unregistering\">unregistering</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_attach\">try_attach</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#header\">header</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#ctl_entry\">ctl_entry</a>, &amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#header\">header</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * register_sysctl_table_path - register a sysctl table hierarchy</span>", 
"<span class=\"comment\"> * @path: The path to the directory the sysctl table is in.</span>", 
"<span class=\"comment\"> * @table: the top-level table structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register a sysctl table hierarchy. @table should be a filled in ctl_table</span>", 
"<span class=\"comment\"> * array. A completely 0 filled entry terminates the table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See __register_sysctl_paths for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#register_sysctl_paths\">register_sysctl_paths</a>(const struct <a class=\"id\" href=\"#ctl_path\">ctl_path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__register_sysctl_paths\">__register_sysctl_paths</a>(&amp;<a class=\"id\" href=\"#sysctl_table_root\">sysctl_table_root</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#table\">table</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * register_sysctl_table - register a sysctl table hierarchy</span>", 
"<span class=\"comment\"> * @table: the top-level table structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register a sysctl table hierarchy. @table should be a filled in ctl_table</span>", 
"<span class=\"comment\"> * array. A completely 0 filled entry terminates the table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See register_sysctl_paths for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#register_sysctl_table\">register_sysctl_table</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#ctl_path\">ctl_path</a> <a class=\"id\" href=\"#null_path\">null_path</a>[] = { {} };", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_sysctl_paths\">register_sysctl_paths</a>(<a class=\"id\" href=\"#null_path\">null_path</a>, <a class=\"id\" href=\"#table\">table</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unregister_sysctl_table - unregister a sysctl table hierarchy</span>", 
"<span class=\"comment\"> * @header: the header returned from register_sysctl_table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unregisters the sysctl table and all children. proc entries may not</span>", 
"<span class=\"comment\"> * actually be removed until they are no longer used by anyone.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unregister_sysctl_table\">unregister_sysctl_table</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> * <a class=\"id\" href=\"#header\">header</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#header\">header</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_unregistering\">start_unregistering</a>(<a class=\"id\" href=\"#header\">header</a>);", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#header\">header</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#sysctl_is_seen\">sysctl_is_seen</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a> *<a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#set\">set</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#unregistering\">unregistering</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#is_seen\">is_seen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#is_seen\">is_seen</a>(<a class=\"id\" href=\"#set\">set</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sysctl_lock\">sysctl_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#setup_sysctl_set\">setup_sysctl_set</a>(struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#is_seen\">is_seen</a>)(struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a> *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a> ? <a class=\"id\" href=\"#parent\">parent</a> : &amp;<a class=\"id\" href=\"#sysctl_table_root\">sysctl_table_root</a>.<a class=\"id\" href=\"#default_set\">default_set</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#is_seen\">is_seen</a> = <a class=\"id\" href=\"#is_seen\">is_seen</a>;", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_SYSCTL */</span>", 
"struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#register_sysctl_table\">register_sysctl_table</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> * <a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#register_sysctl_paths\">register_sysctl_paths</a>(const struct <a class=\"id\" href=\"#ctl_path\">ctl_path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#unregister_sysctl_table\">unregister_sysctl_table</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> * <a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"}", 
"", 
"void <a class=\"id\" href=\"#setup_sysctl_set\">setup_sysctl_set</a>(struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#is_seen\">is_seen</a>)(struct <a class=\"id\" href=\"#ctl_table_set\">ctl_table_set</a> *))", 
"{", 
"}", 
"", 
"void <a class=\"id\" href=\"#sysctl_head_put\">sysctl_head_put</a>(struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SYSCTL */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * /proc/sys support</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_SYSCTL\">CONFIG_PROC_SYSCTL</a>", 
"", 
"static int <a class=\"id\" href=\"#_proc_do_string\">_proc_do_string</a>(void* <a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#maxlen\">maxlen</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a> || !<a class=\"id\" href=\"#maxlen\">maxlen</a> || !*<a class=\"id\" href=\"#lenp\">lenp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lenp\">lenp</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &lt; *<a class=\"id\" href=\"#lenp\">lenp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#p\">p</a>++))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == 0 || <a class=\"id\" href=\"#c\">c</a> == '\\n')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#maxlen\">maxlen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#maxlen\">maxlen</a>-1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>((char *) <a class=\"id\" href=\"#data\">data</a>)[<a class=\"id\" href=\"#len\">len</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += *<a class=\"id\" href=\"#lenp\">lenp</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#maxlen\">maxlen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#maxlen\">maxlen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#ppos\">ppos</a> &gt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lenp\">lenp</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> += *<a class=\"id\" href=\"#ppos\">ppos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>  -= *<a class=\"id\" href=\"#ppos\">ppos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; *<a class=\"id\" href=\"#lenp\">lenp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = *<a class=\"id\" href=\"#lenp\">lenp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; *<a class=\"id\" href=\"#lenp\">lenp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#put_user\">put_user</a>('\\n', ((char <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#buffer\">buffer</a>) + <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lenp\">lenp</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * proc_dostring - read a string sysctl</span>", 
"<span class=\"comment\"> * @table: the sysctl table</span>", 
"<span class=\"comment\"> * @write: %TRUE if this is a write to the sysctl file</span>", 
"<span class=\"comment\"> * @buffer: the user buffer</span>", 
"<span class=\"comment\"> * @lenp: the size of the user buffer</span>", 
"<span class=\"comment\"> * @ppos: file position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reads/writes a string from/to the user buffer. If the kernel</span>", 
"<span class=\"comment\"> * buffer provided is not large enough to hold the string, the</span>", 
"<span class=\"comment\"> * string is truncated. The copied string is %NULL-terminated.</span>", 
"<span class=\"comment\"> * If the string is being read by the user process, it is copied</span>", 
"<span class=\"comment\"> * and a newline '\\n' is added. It is truncated if the buffer is</span>", 
"<span class=\"comment\"> * not large enough.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_dostring\">proc_dostring</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#_proc_do_string\">_proc_do_string</a>(<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a>, <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#proc_skip_spaces\">proc_skip_spaces</a>(char **<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(*<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#tmp\">tmp</a> - *<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#proc_skip_char\">proc_skip_char</a>(char **<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#size\">size</a>, const char <a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (**<a class=\"id\" href=\"#buf\">buf</a> != <a class=\"id\" href=\"#v\">v</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#size\">size</a>)--;", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#buf\">buf</a>)++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TMPBUFLEN\">TMPBUFLEN</a> 22", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * proc_get_long - reads an ASCII formatted integer from a user buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @buf: a kernel buffer</span>", 
"<span class=\"comment\"> * @size: size of the kernel buffer</span>", 
"<span class=\"comment\"> * @val: this is where the number will be stored</span>", 
"<span class=\"comment\"> * @neg: set to %TRUE if number is negative</span>", 
"<span class=\"comment\"> * @perm_tr: a vector which contains the allowed trailers</span>", 
"<span class=\"comment\"> * @perm_tr_len: size of the perm_tr vector</span>", 
"<span class=\"comment\"> * @tr: pointer to store the trailer character</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In case of success %0 is returned and @buf and @size are updated with</span>", 
"<span class=\"comment\"> * the amount of bytes read. If @tr is non-NULL and a trailing</span>", 
"<span class=\"comment\"> * character exists (size is non-zero after returning from this</span>", 
"<span class=\"comment\"> * function), @tr is updated with the trailing character.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#proc_get_long\">proc_get_long</a>(char **<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long *<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#bool\">bool</a> *<a class=\"id\" href=\"#neg\">neg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#perm_tr\">perm_tr</a>, unsigned <a class=\"id\" href=\"#perm_tr_len\">perm_tr_len</a>, char *<a class=\"id\" href=\"#tr\">tr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#TMPBUFLEN\">TMPBUFLEN</a>];", 
"", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = *<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#TMPBUFLEN\">TMPBUFLEN</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#TMPBUFLEN\">TMPBUFLEN</a> - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#len\">len</a>] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == '-' && *<a class=\"id\" href=\"#size\">size</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#neg\">neg</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#neg\">neg</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#p\">p</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't know if the next char is whitespace thus we may accept</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalid integers (e.g. 1234...a) or two integers instead of one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (e.g. 123...1). So lets not allow such large numbers. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == <a class=\"id\" href=\"#TMPBUFLEN\">TMPBUFLEN</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; *<a class=\"id\" href=\"#size\">size</a> && <a class=\"id\" href=\"#perm_tr_len\">perm_tr_len</a> && !<a class=\"id\" href=\"#memchr\">memchr</a>(<a class=\"id\" href=\"#perm_tr\">perm_tr</a>, *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#perm_tr_len\">perm_tr_len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tr\">tr</a> && (<a class=\"id\" href=\"#len\">len</a> &lt; *<a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tr\">tr</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * proc_put_long - converts an integer to a decimal ASCII formatted string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @buf: the user buffer</span>", 
"<span class=\"comment\"> * @size: the size of the user buffer</span>", 
"<span class=\"comment\"> * @val: the integer to be converted</span>", 
"<span class=\"comment\"> * @neg: sign of the number, %TRUE for negative</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In case of success %0 is returned and @buf and @size are updated with</span>", 
"<span class=\"comment\"> * the amount of bytes written.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#proc_put_long\">proc_put_long</a>(void <a class=\"id\" href=\"#__user\">__user</a> **<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#val\">val</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#neg\">neg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#TMPBUFLEN\">TMPBUFLEN</a>], *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#p\">p</a>, \"%s%lu\", <a class=\"id\" href=\"#neg\">neg</a> ? \"-\" : \"\", <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; *<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = *<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(*<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#TMPBUFLEN\">TMPBUFLEN</a>", 
"", 
"static int <a class=\"id\" href=\"#proc_put_char\">proc_put_char</a>(void <a class=\"id\" href=\"#__user\">__user</a> **<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#size\">size</a>, char <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> **<a class=\"id\" href=\"#buffer\">buffer</a> = (char <a class=\"id\" href=\"#__user\">__user</a> **)<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#c\">c</a>, *<a class=\"id\" href=\"#buffer\">buffer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#size\">size</a>)--, (*<a class=\"id\" href=\"#buffer\">buffer</a>)++;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_proc_dointvec_conv\">do_proc_dointvec_conv</a>(<a class=\"id\" href=\"#bool\">bool</a> *<a class=\"id\" href=\"#negp\">negp</a>, unsigned long *<a class=\"id\" href=\"#lvalp\">lvalp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int *<a class=\"id\" href=\"#valp\">valp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#write\">write</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#valp\">valp</a> = *<a class=\"id\" href=\"#negp\">negp</a> ? -*<a class=\"id\" href=\"#lvalp\">lvalp</a> : *<a class=\"id\" href=\"#lvalp\">lvalp</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a> = *<a class=\"id\" href=\"#valp\">valp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#negp\">negp</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lvalp\">lvalp</a> = (unsigned long)-<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#negp\">negp</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lvalp\">lvalp</a> = (unsigned long)<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const char <a class=\"id\" href=\"#proc_wspace_sep\">proc_wspace_sep</a>[] = { ' ', '\\t', '\\n' };", 
"", 
"static int <a class=\"id\" href=\"#__do_proc_dointvec\">__do_proc_dointvec</a>(void *<a class=\"id\" href=\"#tbl_data\">tbl_data</a>, struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#write\">write</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int (*<a class=\"id\" href=\"#conv\">conv</a>)(<a class=\"id\" href=\"#bool\">bool</a> *<a class=\"id\" href=\"#negp\">negp</a>, unsigned long *<a class=\"id\" href=\"#lvalp\">lvalp</a>, int *<a class=\"id\" href=\"#valp\">valp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#write\">write</a>, void *<a class=\"id\" href=\"#data\">data</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#vleft\">vleft</a>, <a class=\"id\" href=\"#first\">first</a> = 1, <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page\">page</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#kbuf\">kbuf</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tbl_data\">tbl_data</a> || !<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a> || !*<a class=\"id\" href=\"#lenp\">lenp</a> || (*<a class=\"id\" href=\"#ppos\">ppos</a> && !<a class=\"id\" href=\"#write\">write</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lenp\">lenp</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (int *) <a class=\"id\" href=\"#tbl_data\">tbl_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vleft\">vleft</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a> / sizeof(*<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = *<a class=\"id\" href=\"#lenp\">lenp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#conv\">conv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conv\">conv</a> = <a class=\"id\" href=\"#do_proc_dointvec_conv\">do_proc_dointvec_conv</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_TEMPORARY\">GFP_TEMPORARY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a> = (char *) <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kbuf\">kbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#left\">left</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a>[<a class=\"id\" href=\"#left\">left</a>] = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#left\">left</a> && <a class=\"id\" href=\"#vleft\">vleft</a>--; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#first\">first</a>=0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lval\">lval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#neg\">neg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> -= <a class=\"id\" href=\"#proc_skip_spaces\">proc_skip_spaces</a>(&amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#left\">left</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_get_long\">proc_get_long</a>(&amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, &amp;<a class=\"id\" href=\"#lval\">lval</a>, &amp;<a class=\"id\" href=\"#neg\">neg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#proc_wspace_sep\">proc_wspace_sep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(<a class=\"id\" href=\"#proc_wspace_sep\">proc_wspace_sep</a>), <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conv\">conv</a>(&amp;<a class=\"id\" href=\"#neg\">neg</a>, &amp;<a class=\"id\" href=\"#lval\">lval</a>, <a class=\"id\" href=\"#i\">i</a>, 1, <a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conv\">conv</a>(&amp;<a class=\"id\" href=\"#neg\">neg</a>, &amp;<a class=\"id\" href=\"#lval\">lval</a>, <a class=\"id\" href=\"#i\">i</a>, 0, <a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_put_char\">proc_put_char</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, '\\t');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_put_long\">proc_put_long</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, <a class=\"id\" href=\"#lval\">lval</a>, <a class=\"id\" href=\"#neg\">neg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#write\">write</a> && !<a class=\"id\" href=\"#first\">first</a> && <a class=\"id\" href=\"#left\">left</a> && !<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_put_char\">proc_put_char</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, '\\n');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a> && !<a class=\"id\" href=\"#err\">err</a> && <a class=\"id\" href=\"#left\">left</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> -= <a class=\"id\" href=\"#proc_skip_spaces\">proc_skip_spaces</a>(&amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>);", 
"<a class=\"id\" href=\"#free\">free</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a> ? : -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#lenp\">lenp</a> -= <a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += *<a class=\"id\" href=\"#lenp\">lenp</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_proc_dointvec\">do_proc_dointvec</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int (*<a class=\"id\" href=\"#conv\">conv</a>)(<a class=\"id\" href=\"#bool\">bool</a> *<a class=\"id\" href=\"#negp\">negp</a>, unsigned long *<a class=\"id\" href=\"#lvalp\">lvalp</a>, int *<a class=\"id\" href=\"#valp\">valp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#write\">write</a>, void *<a class=\"id\" href=\"#data\">data</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__do_proc_dointvec\">__do_proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#conv\">conv</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
];
xr_frag_insert('l/7c/00f7ebb5068c0834f3d58eb79c8f63e3802626.xr', __xr_tmp);
