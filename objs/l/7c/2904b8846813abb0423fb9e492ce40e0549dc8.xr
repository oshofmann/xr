var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#posix_timers\">posix_timers</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init\">hrtimer_init</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#real_timer\">real_timer</a>, <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>, <a class=\"id\" href=\"#HRTIMER_MODE_REL\">HRTIMER_MODE_REL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#real_timer\">real_timer</a>.<a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#it_real_fn\">it_real_fn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#rlim\">rlim</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>, sizeof <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#rlim\">rlim</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#posix_cpu_timers_init_group\">posix_cpu_timers_init_group</a>(<a class=\"id\" href=\"#sig\">sig</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_audit_fork\">tty_audit_fork</a>(<a class=\"id\" href=\"#sig\">sig</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#oom_adj\">oom_adj</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#oom_adj\">oom_adj</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#oom_score_adj\">oom_score_adj</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#oom_score_adj\">oom_score_adj</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#copy_flags\">copy_flags</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_flags\">new_flags</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_flags\">new_flags</a> &= ~(<a class=\"id\" href=\"#PF_SUPERPRIV\">PF_SUPERPRIV</a> | <a class=\"id\" href=\"#PF_WQ_WORKER\">PF_WQ_WORKER</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_flags\">new_flags</a> |= <a class=\"id\" href=\"#PF_FORKNOEXEC\">PF_FORKNOEXEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_flags\">new_flags</a> |= <a class=\"id\" href=\"#PF_STARTING\">PF_STARTING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#new_flags\">new_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_freeze_flag\">clear_freeze_flag</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#set_tid_address\">set_tid_address</a>, int <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#tidptr\">tidptr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#clear_child_tid\">clear_child_tid</a> = <a class=\"id\" href=\"#tidptr\">tidptr</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rt_mutex_init_task\">rt_mutex_init_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_MUTEXES\">CONFIG_RT_MUTEXES</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_head_init_raw\">plist_head_init_raw</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_blocked_on\">pi_blocked_on</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MM_OWNER\">CONFIG_MM_OWNER</a>", 
"void <a class=\"id\" href=\"#mm_init_owner\">mm_init_owner</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MM_OWNER */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize POSIX timer handling for a single task.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#posix_cpu_timers_init\">posix_cpu_timers_init</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#prof_exp\">prof_exp</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#virt_exp\">virt_exp</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#sched_exp\">sched_exp</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>[1]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>[2]);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This creates a new process as a copy of the old one,</span>", 
"<span class=\"comment\"> * but does not actually start it yet.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It copies the registers, and all the appropriate</span>", 
"<span class=\"comment\"> * parts of the process environment (as per the clone</span>", 
"<span class=\"comment\"> * flags). The actual kick-off is left to the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#copy_process\">copy_process</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#stack_start\">stack_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#stack_size\">stack_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#child_tidptr\">child_tidptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#trace\">trace</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cgroup_callbacks_done\">cgroup_callbacks_done</a> = 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; (<a class=\"id\" href=\"#CLONE_NEWNS\">CLONE_NEWNS</a>|<a class=\"id\" href=\"#CLONE_FS\">CLONE_FS</a>)) == (<a class=\"id\" href=\"#CLONE_NEWNS\">CLONE_NEWNS</a>|<a class=\"id\" href=\"#CLONE_FS\">CLONE_FS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Thread groups must share signals as well, and detached threads</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can only be started up within the thread group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>) && !(<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_SIGHAND\">CLONE_SIGHAND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Shared signal handlers imply shared VM. By way of the above,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thread groups also imply shared VM. Blocking this case allows</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for various simplifications in other code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_SIGHAND\">CLONE_SIGHAND</a>) && !(<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_VM\">CLONE_VM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Siblings of global init remain as zombies on exit since they are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not reaped by their parent (swapper). To solve this and to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * multi-rooted process trees, prevent global and container-inits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from creating siblings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_PARENT\">CLONE_PARENT</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGNAL_UNKILLABLE\">SIGNAL_UNKILLABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#security_task_create\">security_task_create</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fork_out\">fork_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#dup_task_struct\">dup_task_struct</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fork_out\">fork_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_init_task\">ftrace_graph_init_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_init_task\">rt_mutex_init_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_LOCKS_WARN_ON\">DEBUG_LOCKS_WARN_ON</a>(!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hardirqs_enabled\">hardirqs_enabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_LOCKS_WARN_ON\">DEBUG_LOCKS_WARN_ON</a>(!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#softirqs_enabled\">softirqs_enabled</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#processes\">processes</a>) >=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_rlimit\">task_rlimit</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#RLIMIT_NPROC\">RLIMIT_NPROC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>) && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_RESOURCE\">CAP_SYS_RESOURCE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>-><a class=\"id\" href=\"#user\">user</a> != <a class=\"id\" href=\"#INIT_USER\">INIT_USER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_free\">bad_fork_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_creds\">copy_creds</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#clone_flags\">clone_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_free\">bad_fork_free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If multiple threads are within copy_process(), then this check</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * triggers too late. This doesn't hurt, the check is only there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to stop root fork bombs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_threads\">nr_threads</a> >= <a class=\"id\" href=\"#max_threads\">max_threads</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_count\">bad_fork_cleanup_count</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#exec_domain\">exec_domain</a>-><a class=\"id\" href=\"#module\">module</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_count\">bad_fork_cleanup_count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#did_exec\">did_exec</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delayacct_tsk_init\">delayacct_tsk_init</a>(<a class=\"id\" href=\"#p\">p</a>);<span class=\"ts\"/><span class=\"comment\">/* Must remain after dup_task_struct() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_flags\">copy_flags</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#children\">children</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sibling\">sibling</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_copy_process\">rcu_copy_process</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#vfork_done\">vfork_done</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#alloc_lock\">alloc_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_sigpending\">init_sigpending</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pending\">pending</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#stime\">stime</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#gtime\">gtime</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utimescaled\">utimescaled</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#stimescaled\">stimescaled</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_VIRT_CPU_ACCOUNTING\">CONFIG_VIRT_CPU_ACCOUNTING</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prev_utime\">prev_utime</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prev_stime\">prev_stime</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#SPLIT_RSS_COUNTING\">SPLIT_RSS_COUNTING</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>, 0, sizeof(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#default_timer_slack_ns\">default_timer_slack_ns</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#timer_slack_ns\">timer_slack_ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_io_accounting_init\">task_io_accounting_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ioac\">ioac</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acct_clear_integrals\">acct_clear_integrals</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#posix_cpu_timers_init\">posix_cpu_timers_init</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#lock_depth\">lock_depth</a> = -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* -1 = no lock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_posix_clock_monotonic_gettime\">do_posix_clock_monotonic_gettime</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start_time\">start_time</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_start_time\">real_start_time</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start_time\">start_time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#monotonic_to_bootbased\">monotonic_to_bootbased</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_start_time\">real_start_time</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#io_context\">io_context</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#audit_context\">audit_context</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_fork\">cgroup_fork</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a> = <a class=\"id\" href=\"#mpol_dup\">mpol_dup</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>);", 
" <span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>)) {", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>);", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
" <span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_cgroup\">bad_fork_cleanup_cgroup</a>;", 
" <span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_fix_fork_child_flag\">mpol_fix_fork_child_flag</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACE_IRQFLAGS\">CONFIG_TRACE_IRQFLAGS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#irq_events\">irq_events</a> = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_INTERRUPTS_ON_CTXSW\">__ARCH_WANT_INTERRUPTS_ON_CTXSW</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hardirqs_enabled\">hardirqs_enabled</a> = 1;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hardirqs_enabled\">hardirqs_enabled</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hardirq_enable_ip\">hardirq_enable_ip</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hardirq_enable_event\">hardirq_enable_event</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hardirq_disable_ip\">hardirq_disable_ip</a> = <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hardirq_disable_event\">hardirq_disable_event</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#softirqs_enabled\">softirqs_enabled</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#softirq_enable_ip\">softirq_enable_ip</a> = <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#softirq_enable_event\">softirq_enable_event</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#softirq_disable_ip\">softirq_disable_ip</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#softirq_disable_event\">softirq_disable_event</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#hardirq_context\">hardirq_context</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#softirq_context\">softirq_context</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#lockdep_depth\">lockdep_depth</a> = 0; <span class=\"comment\">/* no locks held yet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#curr_chain_key\">curr_chain_key</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#lockdep_recursion\">lockdep_recursion</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_MUTEXES\">CONFIG_DEBUG_MUTEXES</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#blocked_on\">blocked_on</a> = <a class=\"id\" href=\"#NULL\">NULL</a>; <span class=\"comment\">/* not blocked yet */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR\">CONFIG_CGROUP_MEM_RES_CTLR</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#memcg_batch\">memcg_batch</a>.<a class=\"id\" href=\"#do_batch\">do_batch</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#memcg_batch\">memcg_batch</a>.<a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Perform scheduler related setup. Assign this task to a CPU. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_fork\">sched_fork</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#clone_flags\">clone_flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#perf_event_init_task\">perf_event_init_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_policy\">bad_fork_cleanup_policy</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#audit_alloc\">audit_alloc</a>(<a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_policy\">bad_fork_cleanup_policy</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* copy all the process information */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_semundo\">copy_semundo</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_audit\">bad_fork_cleanup_audit</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_files\">copy_files</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_semundo\">bad_fork_cleanup_semundo</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_fs\">copy_fs</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_files\">bad_fork_cleanup_files</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_sighand\">copy_sighand</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_fs\">bad_fork_cleanup_fs</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_signal\">copy_signal</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_sighand\">bad_fork_cleanup_sighand</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_mm\">copy_mm</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_signal\">bad_fork_cleanup_signal</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_namespaces\">copy_namespaces</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_mm\">bad_fork_cleanup_mm</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_io\">copy_io</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_namespaces\">bad_fork_cleanup_namespaces</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_thread\">copy_thread</a>(<a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#stack_start\">stack_start</a>, <a class=\"id\" href=\"#stack_size\">stack_size</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_io\">bad_fork_cleanup_io</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> != &amp;<a class=\"id\" href=\"#init_struct_pid\">init_struct_pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#alloc_pid\">alloc_pid</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_cleanup_io\">bad_fork_cleanup_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWPID\">CLONE_NEWPID</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pid_ns_prepare_proc\">pid_ns_prepare_proc</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_free_pid\">bad_fork_free_pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#pid_nr\">pid_nr</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#tgid\">tgid</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#tgid\">tgid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a> != <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#ns_cgroup_clone\">ns_cgroup_clone</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_free_pid\">bad_fork_free_pid</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#set_child_tid\">set_child_tid</a> = (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_CHILD_SETTID\">CLONE_CHILD_SETTID</a>) ? <a class=\"id\" href=\"#child_tidptr\">child_tidptr</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear TID on mm_release()?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#clear_child_tid\">clear_child_tid</a> = (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_CHILD_CLEARTID\">CLONE_CHILD_CLEARTID</a>) ? <a class=\"id\" href=\"#child_tidptr\">child_tidptr</a>: <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUTEX\">CONFIG_FUTEX</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#robust_list\">robust_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#compat_robust_list\">compat_robust_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_state_list\">pi_state_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_state_cache\">pi_state_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sigaltstack should be cleared when sharing the same VM</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; (<a class=\"id\" href=\"#CLONE_VM\">CLONE_VM</a>|<a class=\"id\" href=\"#CLONE_VFORK\">CLONE_VFORK</a>)) == <a class=\"id\" href=\"#CLONE_VM\">CLONE_VM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sas_ss_sp\">sas_ss_sp</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sas_ss_size\">sas_ss_size</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Syscall tracing and stepping should be turned off in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * child regardless of CLONE_PTRACE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user_disable_single_step\">user_disable_single_step</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TIF_SYSCALL_TRACE\">TIF_SYSCALL_TRACE</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#TIF_SYSCALL_EMU\">TIF_SYSCALL_EMU</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TIF_SYSCALL_EMU\">TIF_SYSCALL_EMU</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_all_latency_tracing\">clear_all_latency_tracing</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ok, now we should be set up.. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a> = (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>) ? -1 : (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CSIGNAL\">CSIGNAL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pdeath_signal\">pdeath_signal</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ok, make it visible to the rest of the system.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We dont wake it up yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread_group\">thread_group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now that the task is set up, run cgroup callbacks if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * necessary. We need to run them before the task is visible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the tasklist. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_fork_callbacks\">cgroup_fork_callbacks</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_callbacks_done\">cgroup_callbacks_done</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Need tasklist lock for parent etc handling! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* CLONE_PARENT re-uses the old parent */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; (<a class=\"id\" href=\"#CLONE_PARENT\">CLONE_PARENT</a>|<a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#parent_exec_id\">parent_exec_id</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#parent_exec_id\">parent_exec_id</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#parent_exec_id\">parent_exec_id</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#self_exec_id\">self_exec_id</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Process group and session signals need to be delivered to just the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parent before the fork or both the parent and the child after the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fork. Restart if a signal comes in before we add the new process to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's process group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A fatal signal pending means that current will exit, so the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thread can't slip out of an OOM kill (or normal SIGKILL).</span>", 
"<span class=\"comment\"> <span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#recalc_sigpending\">recalc_sigpending</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ERESTARTNOINTR\">ERESTARTNOINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_fork_free_pid\">bad_fork_free_pid</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#nr_threads\">nr_threads</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#live\">live</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#sigcnt\">sigcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread_group\">thread_group</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#thread_group\">thread_group</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pid\">pid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracehook_finish_clone\">tracehook_finish_clone</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, <a class=\"id\" href=\"#trace\">trace</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#thread_group_leader\">thread_group_leader</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWPID\">CLONE_NEWPID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#child_reaper\">child_reaper</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#leader_pid\">leader_pid</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#tty_kref_get\">tty_kref_get</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach_pid\">attach_pid</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>, <a class=\"id\" href=\"#task_pgrp\">task_pgrp</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach_pid\">attach_pid</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PIDTYPE_SID\">PIDTYPE_SID</a>, <a class=\"id\" href=\"#task_session\">task_session</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sibling\">sibling</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>-><a class=\"id\" href=\"#children\">children</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#tasks\">tasks</a>, &amp;<a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#process_counts\">process_counts</a>)++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach_pid\">attach_pid</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_threads\">nr_threads</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_forks\">total_forks</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_fork_connector\">proc_fork_connector</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_post_fork\">cgroup_post_fork</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_fork\">perf_event_fork</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<a class=\"id\" href=\"#bad_fork_free_pid\">bad_fork_free_pid</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> != &amp;<a class=\"id\" href=\"#init_struct_pid\">init_struct_pid</a>)", 
];
xr_frag_insert('l/7c/2904b8846813abb0423fb9e492ce40e0549dc8.xr', __xr_tmp);
