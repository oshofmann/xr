var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#LINUX_CRASH_DUMP_H\">LINUX_CRASH_DUMP_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LINUX_CRASH_DUMP_H\">LINUX_CRASH_DUMP_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CRASH_DUMP\">CONFIG_CRASH_DUMP</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kexec\">kexec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELFCORE_ADDR_MAX\">ELFCORE_ADDR_MAX</a><span class=\"ts\"/>(-1ULL)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELFCORE_ADDR_ERR\">ELFCORE_ADDR_ERR</a><span class=\"ts\"/>(-2ULL)", 
"", 
"extern unsigned long long <a class=\"id\" href=\"#elfcorehdr_addr\">elfcorehdr_addr</a>;", 
"", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#copy_oldmem_page\">copy_oldmem_page</a>(unsigned long, char *, <a class=\"id\" href=\"#size_t\">size_t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long, int);", 
"", 
"<span class=\"comment\">/* Architecture code defines this if there are other possible ELF</span>", 
"<span class=\"comment\"> * machine types, e.g. on bi-arch capable hardware. */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#vmcore_elf_check_arch_cross\">vmcore_elf_check_arch_cross</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#vmcore_elf_check_arch_cross\">vmcore_elf_check_arch_cross</a>(<a class=\"id\" href=\"#x\">x</a>) 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#vmcore_elf_check_arch\">vmcore_elf_check_arch</a>(<a class=\"id\" href=\"#x\">x</a>) (<a class=\"id\" href=\"#elf_check_arch\">elf_check_arch</a>(<a class=\"id\" href=\"#x\">x</a>) || <a class=\"id\" href=\"#vmcore_elf_check_arch_cross\">vmcore_elf_check_arch_cross</a>(<a class=\"id\" href=\"#x\">x</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * is_kdump_kernel() checks whether this kernel is booting after a panic of</span>", 
"<span class=\"comment\"> * previous kernel or not. This is determined by checking if previous kernel</span>", 
"<span class=\"comment\"> * has passed the elf core header address on command line.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is not just a test if CONFIG_CRASH_DUMP is enabled or not. It will</span>", 
"<span class=\"comment\"> * return 1 if CONFIG_CRASH_DUMP=y and if kernel is booting after a panic of</span>", 
"<span class=\"comment\"> * previous kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_kdump_kernel\">is_kdump_kernel</a>(void)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#elfcorehdr_addr\">elfcorehdr_addr</a> != <a class=\"id\" href=\"#ELFCORE_ADDR_MAX\">ELFCORE_ADDR_MAX</a>) ? 1 : 0;", 
"}", 
"", 
"<span class=\"comment\">/* is_vmcore_usable() checks if the kernel is booting after a panic and</span>", 
"<span class=\"comment\"> * the vmcore region is usable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This makes use of the fact that due to alignment -2ULL is not</span>", 
"<span class=\"comment\"> * a valid pointer, much in the vain of IS_ERR(), except</span>", 
"<span class=\"comment\"> * dealing directly with an unsigned long long rather than a pointer.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_vmcore_usable\">is_vmcore_usable</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#is_kdump_kernel\">is_kdump_kernel</a>() && <a class=\"id\" href=\"#elfcorehdr_addr\">elfcorehdr_addr</a> != <a class=\"id\" href=\"#ELFCORE_ADDR_ERR\">ELFCORE_ADDR_ERR</a> ? 1 : 0;", 
"}", 
"", 
"<span class=\"comment\">/* vmcore_unusable() marks the vmcore as unusable,</span>", 
"<span class=\"comment\"> * without disturbing the logic of is_kdump_kernel()</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#vmcore_unusable\">vmcore_unusable</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_kdump_kernel\">is_kdump_kernel</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elfcorehdr_addr\">elfcorehdr_addr</a> = <a class=\"id\" href=\"#ELFCORE_ADDR_ERR\">ELFCORE_ADDR_ERR</a>;", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_CRASH_DUMP */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_kdump_kernel\">is_kdump_kernel</a>(void) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CRASH_DUMP */</span>", 
"", 
"extern unsigned long <a class=\"id\" href=\"#saved_max_pfn\">saved_max_pfn</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* LINUX_CRASHDUMP_H */</span>", 
];
xr_frag_insert('l/7c/55332527f5ab6f21e04b326564b5821e70684f.xr', __xr_tmp);
