var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#hash_mutex\">hash_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_flags\">irq_flags</a> |= <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irqflags\">irqflags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#request_irq\">request_irq</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#serial8250_interrupt\">serial8250_interrupt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#irq_flags\">irq_flags</a>, \"serial\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_do_unlink\">serial_do_unlink</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#serial_unlink_irq_chain\">serial_unlink_irq_chain</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_info\">irq_info</a> *<a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#hash_mutex\">hash_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a> = &amp;<a class=\"id\" href=\"#irq_lists\">irq_lists</a>[<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a> % <a class=\"id\" href=\"#NR_IRQ_HASH\">NR_IRQ_HASH</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each\">hlist_for_each</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#h\">h</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#irq_info\">irq_info</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#irq\">irq</a> == <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#n\">n</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_irq\">free_irq</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_do_unlink\">serial_do_unlink</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#hash_mutex\">hash_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Base timer interval for polling */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#poll_timeout\">poll_timeout</a>(int <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#timeout\">timeout</a> &gt; 6 ? (<a class=\"id\" href=\"#timeout\">timeout</a> / 2 - 2) : 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is used to handle ports that do not have an</span>", 
"<span class=\"comment\"> * interrupt.  This doesn't work very well for 16450's, but gives</span>", 
"<span class=\"comment\"> * barely passable results for a 16550A.  (Although at the expense</span>", 
"<span class=\"comment\"> * of much CPU overhead).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#serial8250_timeout\">serial8250_timeout</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#iir\">iir</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iir\">iir</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#iir\">iir</a> &amp; <a class=\"id\" href=\"#UART_IIR_NO_INT\">UART_IIR_NO_INT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial8250_handle_port\">serial8250_handle_port</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#poll_timeout\">poll_timeout</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#timeout\">timeout</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#serial8250_backup_timeout\">serial8250_backup_timeout</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#iir\">iir</a>, <a class=\"id\" href=\"#ier\">ier</a> = 0, <a class=\"id\" href=\"#lsr\">lsr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must disable interrupts or else we risk racing with the interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * based handler.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_real_interrupt\">is_real_interrupt</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ier\">ier</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iir\">iir</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This should be a safe test for anyone who doesn't trust the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IIR bits on their UART, but it's specifically designed for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the \"Diva\" UART used on the management processor on many HP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ia64 and parisc boxes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lsr\">lsr</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#lsr_saved_flags\">lsr_saved_flags</a> |= <a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#LSR_SAVE_FLAGS\">LSR_SAVE_FLAGS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#iir\">iir</a> &amp; <a class=\"id\" href=\"#UART_IIR_NO_INT\">UART_IIR_NO_INT</a>) && (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#ier\">ier</a> &amp; <a class=\"id\" href=\"#UART_IER_THRI\">UART_IER_THRI</a>) &&", 
"<span class=\"ts\"/>    (!<a class=\"id\" href=\"#uart_circ_empty\">uart_circ_empty</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#xmit\">xmit</a>) || <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#x_char\">x_char</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_THRE\">UART_LSR_THRE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iir\">iir</a> &= ~(<a class=\"id\" href=\"#UART_IIR_ID\">UART_IIR_ID</a> | <a class=\"id\" href=\"#UART_IIR_NO_INT\">UART_IIR_NO_INT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iir\">iir</a> |= <a class=\"id\" href=\"#UART_IIR_THRI\">UART_IIR_THRI</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#iir\">iir</a> &amp; <a class=\"id\" href=\"#UART_IIR_NO_INT\">UART_IIR_NO_INT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial8250_handle_port\">serial8250_handle_port</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_real_interrupt\">is_real_interrupt</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#ier\">ier</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Standard timer interval plus 0.2s to keep the port running */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#poll_timeout\">poll_timeout</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#timeout\">timeout</a>) + <a class=\"id\" href=\"#HZ\">HZ</a> / 5);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#serial8250_tx_empty\">serial8250_tx_empty</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lsr\">lsr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lsr\">lsr</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#lsr_saved_flags\">lsr_saved_flags</a> |= <a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#LSR_SAVE_FLAGS\">LSR_SAVE_FLAGS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#BOTH_EMPTY\">BOTH_EMPTY</a>) == <a class=\"id\" href=\"#BOTH_EMPTY\">BOTH_EMPTY</a> ? <a class=\"id\" href=\"#TIOCSER_TEMT\">TIOCSER_TEMT</a> : 0;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#serial8250_get_mctrl\">serial8250_get_mctrl</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#check_modem_status\">check_modem_status</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_MSR_DCD\">UART_MSR_DCD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#TIOCM_CAR\">TIOCM_CAR</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_MSR_RI\">UART_MSR_RI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#TIOCM_RNG\">TIOCM_RNG</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_MSR_DSR\">UART_MSR_DSR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#TIOCM_DSR\">TIOCM_DSR</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_MSR_CTS\">UART_MSR_CTS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#TIOCM_CTS\">TIOCM_CTS</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#serial8250_set_mctrl\">serial8250_set_mctrl</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>, unsigned int <a class=\"id\" href=\"#mctrl\">mctrl</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#mcr\">mcr</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mctrl\">mctrl</a> &amp; <a class=\"id\" href=\"#TIOCM_RTS\">TIOCM_RTS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mcr\">mcr</a> |= <a class=\"id\" href=\"#UART_MCR_RTS\">UART_MCR_RTS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mctrl\">mctrl</a> &amp; <a class=\"id\" href=\"#TIOCM_DTR\">TIOCM_DTR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mcr\">mcr</a> |= <a class=\"id\" href=\"#UART_MCR_DTR\">UART_MCR_DTR</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mctrl\">mctrl</a> &amp; <a class=\"id\" href=\"#TIOCM_OUT1\">TIOCM_OUT1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mcr\">mcr</a> |= <a class=\"id\" href=\"#UART_MCR_OUT1\">UART_MCR_OUT1</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mctrl\">mctrl</a> &amp; <a class=\"id\" href=\"#TIOCM_OUT2\">TIOCM_OUT2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mcr\">mcr</a> |= <a class=\"id\" href=\"#UART_MCR_OUT2\">UART_MCR_OUT2</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mctrl\">mctrl</a> &amp; <a class=\"id\" href=\"#TIOCM_LOOP\">TIOCM_LOOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mcr\">mcr</a> |= <a class=\"id\" href=\"#UART_MCR_LOOP\">UART_MCR_LOOP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mcr\">mcr</a> = (<a class=\"id\" href=\"#mcr\">mcr</a> &amp; <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#mcr_mask\">mcr_mask</a>) | <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#mcr_force\">mcr_force</a> | <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#mcr\">mcr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>, <a class=\"id\" href=\"#mcr\">mcr</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#serial8250_break_ctl\">serial8250_break_ctl</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>, int <a class=\"id\" href=\"#break_state\">break_state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#break_state\">break_state</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#lcr\">lcr</a> |= <a class=\"id\" href=\"#UART_LCR_SBC\">UART_LCR_SBC</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#lcr\">lcr</a> &= ~<a class=\"id\" href=\"#UART_LCR_SBC\">UART_LCR_SBC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#lcr\">lcr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Wait for transmitter &amp; holding register to empty</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#wait_for_xmitr\">wait_for_xmitr</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#tmout\">tmout</a> = 10000;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait up to 10ms for the character(s) to be sent. */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#lsr_saved_flags\">lsr_saved_flags</a> |= <a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#LSR_SAVE_FLAGS\">LSR_SAVE_FLAGS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#tmout\">tmout</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(1);", 
"<span class=\"ts\"/>} while ((<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#bits\">bits</a>) != <a class=\"id\" href=\"#bits\">bits</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait up to 1s for flow control if necessary */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#UPF_CONS_FLOW\">UPF_CONS_FLOW</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tmout\">tmout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#tmout\">tmout</a> = 1000000; <a class=\"id\" href=\"#tmout\">tmout</a>; <a class=\"id\" href=\"#tmout\">tmout</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#msr\">msr</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MSR\">UART_MSR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#msr_saved_flags\">msr_saved_flags</a> |= <a class=\"id\" href=\"#msr\">msr</a> &amp; <a class=\"id\" href=\"#MSR_SAVE_FLAGS\">MSR_SAVE_FLAGS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msr\">msr</a> &amp; <a class=\"id\" href=\"#UART_MSR_CTS\">UART_MSR_CTS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CONSOLE_POLL\">CONFIG_CONSOLE_POLL</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Console polling routines for writing and reading from the uart while</span>", 
"<span class=\"comment\"> * in an interrupt or debug context.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#serial8250_get_poll_char\">serial8250_get_poll_char</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#lsr\">lsr</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_DR\">UART_LSR_DR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NO_POLL_CHAR\">NO_POLL_CHAR</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RX\">UART_RX</a>);", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#serial8250_put_poll_char\">serial8250_put_poll_char</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned char <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ier\">ier</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>First save the IER then disable the interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ier\">ier</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> &amp; <a class=\"id\" href=\"#UART_CAP_UUE\">UART_CAP_UUE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#UART_IER_UUE\">UART_IER_UUE</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_xmitr\">wait_for_xmitr</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#BOTH_EMPTY\">BOTH_EMPTY</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Send the character out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>If a LF, also do CR...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_TX\">UART_TX</a>, <a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == 10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_xmitr\">wait_for_xmitr</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#BOTH_EMPTY\">BOTH_EMPTY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_TX\">UART_TX</a>, 13);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Finally, wait for transmitter to become empty</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>and restore the IER</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_xmitr\">wait_for_xmitr</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#BOTH_EMPTY\">BOTH_EMPTY</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#ier\">ier</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CONSOLE_POLL */</span>", 
"", 
"static int <a class=\"id\" href=\"#serial8250_startup\">serial8250_startup</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#lsr\">lsr</a>, <a class=\"id\" href=\"#iir\">iir</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> = <a class=\"id\" href=\"#uart_config\">uart_config</a>[<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#mcr\">mcr</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#iotype\">iotype</a> != <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#cur_iotype\">cur_iotype</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_io_from_upio\">set_io_from_upio</a>(<a class=\"id\" href=\"#port\">port</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PORT_16C950\">PORT_16C950</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Wake up and initialize UART */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#acr\">acr</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0xBF);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_EFR\">UART_EFR</a>, <a class=\"id\" href=\"#UART_EFR_ECB\">UART_EFR_ECB</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_icr_write\">serial_icr_write</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_CSR\">UART_CSR</a>, 0); <span class=\"comment\">/* Reset the UART */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0xBF);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_EFR\">UART_EFR</a>, <a class=\"id\" href=\"#UART_EFR_ECB\">UART_EFR_ECB</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SERIAL_8250_RSA\">CONFIG_SERIAL_8250_RSA</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is an RSA port, see if we can kick it up to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * higher speed clock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_rsa\">enable_rsa</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear the FIFO buffers and disable them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (they will be reenabled in set_termios())</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial8250_clear_fifos\">serial8250_clear_fifos</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear the interrupt registers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>(void) <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>);", 
"<span class=\"ts\"/>(void) <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RX\">UART_RX</a>);", 
"<span class=\"ts\"/>(void) <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>);", 
"<span class=\"ts\"/>(void) <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MSR\">UART_MSR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point, there's no way the LSR could still be 0xff;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if it is, then bail out, because there's likely no UART</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#UPF_BUGGY_UART\">UPF_BUGGY_UART</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>) == 0xff)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"ttyS%d: LSR safety check engaged!\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#serial_index\">serial_index</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For a XR16C850, we need to set the trigger levels</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PORT_16850\">PORT_16850</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#fctr\">fctr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0xbf);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fctr\">fctr</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_FCTR\">UART_FCTR</a>) &amp; ~(<a class=\"id\" href=\"#UART_FCTR_RX\">UART_FCTR_RX</a>|<a class=\"id\" href=\"#UART_FCTR_TX\">UART_FCTR_TX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_FCTR\">UART_FCTR</a>, <a class=\"id\" href=\"#fctr\">fctr</a> | <a class=\"id\" href=\"#UART_FCTR_TRGD\">UART_FCTR_TRGD</a> | <a class=\"id\" href=\"#UART_FCTR_RX\">UART_FCTR_RX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_TRG\">UART_TRG</a>, <a class=\"id\" href=\"#UART_TRG_96\">UART_TRG_96</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_FCTR\">UART_FCTR</a>, <a class=\"id\" href=\"#fctr\">fctr</a> | <a class=\"id\" href=\"#UART_FCTR_TRGD\">UART_FCTR_TRGD</a> | <a class=\"id\" href=\"#UART_FCTR_TX\">UART_FCTR_TX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_TRG\">UART_TRG</a>, <a class=\"id\" href=\"#UART_TRG_96\">UART_TRG_96</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_real_interrupt\">is_real_interrupt</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#iir1\">iir1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Test for UARTs that do not reassert THRE when the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * transmitter is idle and the interrupt has already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * been cleared.  Real 16550s should always reassert</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this interrupt whenever the transmitter is idle and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the interrupt is enabled.  Delays are necessary to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allow register changes to become visible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irqflags\">irqflags</a> &amp; <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_irq_nosync\">disable_irq_nosync</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_xmitr\">wait_for_xmitr</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR_THRE\">UART_LSR_THRE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out_sync\">serial_out_sync</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#UART_IER_THRI\">UART_IER_THRI</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(1); <span class=\"comment\">/* allow THRE to set */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iir1\">iir1</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out_sync\">serial_out_sync</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#UART_IER_THRI\">UART_IER_THRI</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(1); <span class=\"comment\">/* allow a working UART time to re-assert THRE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iir\">iir</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irqflags\">irqflags</a> &amp; <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_irq\">enable_irq</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the interrupt is not reasserted, setup a timer to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kick the UART on a regular basis.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#iir1\">iir1</a> &amp; <a class=\"id\" href=\"#UART_IIR_NO_INT\">UART_IIR_NO_INT</a>) && (<a class=\"id\" href=\"#iir\">iir</a> &amp; <a class=\"id\" href=\"#UART_IIR_NO_INT\">UART_IIR_NO_INT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#bugs\">bugs</a> |= <a class=\"id\" href=\"#UART_BUG_THRE\">UART_BUG_THRE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"ttyS%d - using backup timer\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#serial_index\">serial_index</a>(<a class=\"id\" href=\"#port\">port</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The above check will only give an accurate result the first time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the port is opened so this value needs to be preserved.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#bugs\">bugs</a> &amp; <a class=\"id\" href=\"#UART_BUG_THRE\">UART_BUG_THRE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#serial8250_backup_timeout\">serial8250_backup_timeout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#data\">data</a> = (unsigned long)<a class=\"id\" href=\"#up\">up</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#poll_timeout\">poll_timeout</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#timeout\">timeout</a>) + <a class=\"id\" href=\"#HZ\">HZ</a> / 5);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the \"interrupt\" for this port doesn't correspond with any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hardware interrupt, we use a timer-based system.  The original</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * driver used to do this with IRQ0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_real_interrupt\">is_real_interrupt</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#data\">data</a> = (unsigned long)<a class=\"id\" href=\"#up\">up</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#poll_timeout\">poll_timeout</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#timeout\">timeout</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#serial_link_irq_chain\">serial_link_irq_chain</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now, initialize the UART</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, <a class=\"id\" href=\"#UART_LCR_WLEN8\">UART_LCR_WLEN8</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#UPF_FOURPORT\">UPF_FOURPORT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_real_interrupt\">is_real_interrupt</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#mctrl\">mctrl</a> |= <a class=\"id\" href=\"#TIOCM_OUT1\">TIOCM_OUT1</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Most PC uarts need OUT2 raised to enable interrupts.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_real_interrupt\">is_real_interrupt</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#mctrl\">mctrl</a> |= <a class=\"id\" href=\"#TIOCM_OUT2\">TIOCM_OUT2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial8250_set_mctrl\">serial8250_set_mctrl</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#mctrl\">mctrl</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Serial over Lan (SoL) hack:</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Intel 8257x Gigabit ethernet chips have a</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   16550 emulation, to be used for Serial Over Lan.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Those chips take a longer time than a normal</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   serial device to signalize that a transmission</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   data was queued. Due to that, the above test generally</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   fails. One solution would be to delay the reading of</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   iir. However, this is not reliable, since the timeout</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   is variable. So, let's just don't test if we receive</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   TX irq. This way, we'll never enable UART_BUG_TXEN.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skip_txen_test\">skip_txen_test</a> || <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#UPF_NO_TXEN_TEST\">UPF_NO_TXEN_TEST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dont_test_tx_en\">dont_test_tx_en</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do a quick test to see if we receive an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupt when we enable the TX irq.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#UART_IER_THRI\">UART_IER_THRI</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lsr\">lsr</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iir\">iir</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_TEMT\">UART_LSR_TEMT</a> && <a class=\"id\" href=\"#iir\">iir</a> &amp; <a class=\"id\" href=\"#UART_IIR_NO_INT\">UART_IIR_NO_INT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#bugs\">bugs</a> &amp; <a class=\"id\" href=\"#UART_BUG_TXEN\">UART_BUG_TXEN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#bugs\">bugs</a> |= <a class=\"id\" href=\"#UART_BUG_TXEN\">UART_BUG_TXEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"ttyS%d - enabling bad tx status workarounds\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#serial_index\">serial_index</a>(<a class=\"id\" href=\"#port\">port</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#bugs\">bugs</a> &= ~<a class=\"id\" href=\"#UART_BUG_TXEN\">UART_BUG_TXEN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#dont_test_tx_en\">dont_test_tx_en</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear the interrupt registers again for luck, and clear the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * saved flags to avoid getting false values from polling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * routines or the previous session.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RX\">UART_RX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MSR\">UART_MSR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#lsr_saved_flags\">lsr_saved_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#msr_saved_flags\">msr_saved_flags</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Finally, enable interrupts.  Note: Modem status interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are set via set_termios(), which will be occurring imminently</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anyway, so we don't enable them here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#ier\">ier</a> = <a class=\"id\" href=\"#UART_IER_RLSI\">UART_IER_RLSI</a> | <a class=\"id\" href=\"#UART_IER_RDI\">UART_IER_RDI</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#ier\">ier</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#UPF_FOURPORT\">UPF_FOURPORT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#icp\">icp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Enable interrupts on the AST Fourport board</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icp\">icp</a> = (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#iobase\">iobase</a> &amp; 0xfe0) | 0x01f;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb_p\">outb_p</a>(0x80, <a class=\"id\" href=\"#icp\">icp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>(void) <a class=\"id\" href=\"#inb_p\">inb_p</a>(<a class=\"id\" href=\"#icp\">icp</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#serial8250_shutdown\">serial8250_shutdown</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
];
xr_frag_insert('l/7c/7ce62828b1cc35c98331e7854b3d7c33879e19.xr', __xr_tmp);
