var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kref.c - library routines for handling generic reference counted objects</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2004 Greg Kroah-Hartman &lt;greg@kroah.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2004 IBM Corp.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * based on lib/kobject.c which was:</span>", 
"<span class=\"comment\"> * Copyright (C) 2002-2003 Patrick Mochel &lt;mochel@osdl.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kref\">kref</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kref_init - initialize object.</span>", 
"<span class=\"comment\"> * @kref: object in question.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kref_init\">kref_init</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#kref\">kref</a>-><a class=\"id\" href=\"#refcount\">refcount</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kref_get - increment refcount for object.</span>", 
"<span class=\"comment\"> * @kref: object.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kref_get\">kref_get</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kref\">kref</a>-><a class=\"id\" href=\"#refcount\">refcount</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#kref\">kref</a>-><a class=\"id\" href=\"#refcount\">refcount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_atomic_inc\">smp_mb__after_atomic_inc</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kref_put - decrement refcount for object.</span>", 
"<span class=\"comment\"> * @kref: object.</span>", 
"<span class=\"comment\"> * @release: pointer to the function that will clean up the object when the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     last reference to the object is released.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     This pointer is required, and it is not acceptable to pass kfree</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     in as this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Decrement the refcount, and if 0, call release().</span>", 
"<span class=\"comment\"> * Return 1 if the object was removed, otherwise return 0.  Beware, if this</span>", 
"<span class=\"comment\"> * function returns 0, you still can not count on the kref from remaining in</span>", 
"<span class=\"comment\"> * memory.  Only use the return value if you want to see if the kref is now</span>", 
"<span class=\"comment\"> * gone, not present.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kref_put\">kref_put</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>, void (*<a class=\"id\" href=\"#release\">release</a>)(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#release\">release</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#release\">release</a> == (void (*)(struct <a class=\"id\" href=\"#kref\">kref</a> *))<a class=\"id\" href=\"#kfree\">kfree</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#kref\">kref</a>-><a class=\"id\" href=\"#refcount\">refcount</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kref_init\">kref_init</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kref_get\">kref_get</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kref_put\">kref_put</a>);", 
];
xr_frag_insert('l/7c/a99a16d2ad968083a37d5e4d1bf1f3aaafda74.xr', __xr_tmp);
