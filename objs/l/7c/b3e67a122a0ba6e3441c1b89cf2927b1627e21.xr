var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_RCULIST_NULLS_H\">_LINUX_RCULIST_NULLS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_RCULIST_NULLS_H\">_LINUX_RCULIST_NULLS_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * RCU-protected list version</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list_nulls\">list_nulls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_nulls_del_init_rcu - deletes entry from hash list with re-initialization</span>", 
"<span class=\"comment\"> * @n: the element to delete from the hash list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: hlist_nulls_unhashed() on the node return true after this. It is</span>", 
"<span class=\"comment\"> * useful for RCU based read lockfree traversal if the writer side</span>", 
"<span class=\"comment\"> * must know if the list entry is still hashed or already unhashed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In particular, it means that we can not poison the forward pointers</span>", 
"<span class=\"comment\"> * that may still be used for walking the hash list and we can only</span>", 
"<span class=\"comment\"> * zero the pprev pointer so list_unhashed() will return true after</span>", 
"<span class=\"comment\"> * this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must take whatever precautions are necessary (such as</span>", 
"<span class=\"comment\"> * holding appropriate locks) to avoid racing with another</span>", 
"<span class=\"comment\"> * list-mutation primitive, such as hlist_nulls_add_head_rcu() or</span>", 
"<span class=\"comment\"> * hlist_nulls_del_rcu(), running on this same list.  However, it is</span>", 
"<span class=\"comment\"> * perfectly legal to run concurrently with the _rcu list-traversal</span>", 
"<span class=\"comment\"> * primitives, such as hlist_nulls_for_each_entry_rcu().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_nulls_del_init_rcu\">hlist_nulls_del_init_rcu</a>(struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hlist_nulls_unhashed\">hlist_nulls_unhashed</a>(<a class=\"id\" href=\"#n\">n</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__hlist_nulls_del\">__hlist_nulls_del</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_nulls_del_rcu - deletes entry from hash list without re-initialization</span>", 
"<span class=\"comment\"> * @n: the element to delete from the hash list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: hlist_nulls_unhashed() on entry does not return true after this,</span>", 
"<span class=\"comment\"> * the entry is in an undefined state. It is useful for RCU based</span>", 
"<span class=\"comment\"> * lockfree traversal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In particular, it means that we can not poison the forward</span>", 
"<span class=\"comment\"> * pointers that may still be used for walking the hash list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must take whatever precautions are necessary</span>", 
"<span class=\"comment\"> * (such as holding appropriate locks) to avoid racing</span>", 
"<span class=\"comment\"> * with another list-mutation primitive, such as hlist_nulls_add_head_rcu()</span>", 
"<span class=\"comment\"> * or hlist_nulls_del_rcu(), running on this same list.</span>", 
"<span class=\"comment\"> * However, it is perfectly legal to run concurrently with</span>", 
"<span class=\"comment\"> * the _rcu list-traversal primitives, such as</span>", 
"<span class=\"comment\"> * hlist_nulls_for_each_entry().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_nulls_del_rcu\">hlist_nulls_del_rcu</a>(struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hlist_nulls_del\">__hlist_nulls_del</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#LIST_POISON2\">LIST_POISON2</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_nulls_add_head_rcu</span>", 
"<span class=\"comment\"> * @n: the element to add to the hash list.</span>", 
"<span class=\"comment\"> * @h: the list to add to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Adds the specified element to the specified hlist_nulls,</span>", 
"<span class=\"comment\"> * while permitting racing traversals.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must take whatever precautions are necessary</span>", 
"<span class=\"comment\"> * (such as holding appropriate locks) to avoid racing</span>", 
"<span class=\"comment\"> * with another list-mutation primitive, such as hlist_nulls_add_head_rcu()</span>", 
"<span class=\"comment\"> * or hlist_nulls_del_rcu(), running on this same list.</span>", 
"<span class=\"comment\"> * However, it is perfectly legal to run concurrently with</span>", 
"<span class=\"comment\"> * the _rcu list-traversal primitives, such as</span>", 
"<span class=\"comment\"> * hlist_nulls_for_each_entry_rcu(), used to prevent memory-consistency</span>", 
"<span class=\"comment\"> * problems on Alpha CPUs.  Regardless of the type of CPU, the</span>", 
"<span class=\"comment\"> * list-traversal primitive must be guarded by rcu_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_nulls_add_head_rcu\">hlist_nulls_add_head_rcu</a>(struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_head\">hlist_nulls_head</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_a_nulls\">is_a_nulls</a>(<a class=\"id\" href=\"#first\">first</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_nulls_for_each_entry_rcu - iterate over rcu list of given type</span>", 
"<span class=\"comment\"> * @tpos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct hlist_nulls_node to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the hlist_nulls_node within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_nulls_for_each_entry_rcu\">hlist_nulls_for_each_entry_rcu</a>(<a class=\"id\" href=\"#tpos\">tpos</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>((<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#first\">first</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(!<a class=\"id\" href=\"#is_a_nulls\">is_a_nulls</a>(<a class=\"id\" href=\"#pos\">pos</a>)) &&<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ <a class=\"id\" href=\"#tpos\">tpos</a> = <a class=\"id\" href=\"#hlist_nulls_entry\">hlist_nulls_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tpos\">tpos</a>), <a class=\"id\" href=\"#member\">member</a>); 1; }); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/7c/b3e67a122a0ba6e3441c1b89cf2927b1627e21.xr', __xr_tmp);
