var __xr_tmp = [
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_sem_semctl\">security_sem_semctl</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#tbuf\">tbuf</a>, 0, sizeof(<a class=\"id\" href=\"#tbuf\">tbuf</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_to_ipc64_perm\">kernel_to_ipc64_perm</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>, &amp;<a class=\"id\" href=\"#tbuf\">tbuf</a>.<a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tbuf\">tbuf</a>.<a class=\"id\" href=\"#sem_otime\">sem_otime</a>  = <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_otime\">sem_otime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tbuf\">tbuf</a>.<a class=\"id\" href=\"#sem_ctime\">sem_ctime</a>  = <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_ctime\">sem_ctime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tbuf\">tbuf</a>.<a class=\"id\" href=\"#sem_nsems\">sem_nsems</a>  = <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_nsems\">sem_nsems</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_semid_to_user\">copy_semid_to_user</a> (<a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#tbuf\">tbuf</a>, <a class=\"id\" href=\"#version\">version</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#semctl_main\">semctl_main</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, int <a class=\"id\" href=\"#semid\">semid</a>, int <a class=\"id\" href=\"#semnum\">semnum</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cmd\">cmd</a>, int <a class=\"id\" href=\"#version\">version</a>, union <a class=\"id\" href=\"#semun\">semun</a> <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem\">sem</a>* <a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ushort\">ushort</a> <a class=\"id\" href=\"#fast_sem_io\">fast_sem_io</a>[<a class=\"id\" href=\"#SEMMSL_FAST\">SEMMSL_FAST</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ushort\">ushort</a>* <a class=\"id\" href=\"#sem_io\">sem_io</a> = <a class=\"id\" href=\"#fast_sem_io\">fast_sem_io</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nsems\">nsems</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tasks\">tasks</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#sem_lock_check\">sem_lock_check</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#semid\">semid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sma\">sma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsems\">nsems</a> = <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_nsems\">sem_nsems</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipcperms\">ipcperms</a> (&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>, (<a class=\"id\" href=\"#cmd\">cmd</a>==<a class=\"id\" href=\"#SETVAL\">SETVAL</a>||<a class=\"id\" href=\"#cmd\">cmd</a>==<a class=\"id\" href=\"#SETALL\">SETALL</a>)?<a class=\"id\" href=\"#S_IWUGO\">S_IWUGO</a>:<a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_sem_semctl\">security_sem_semctl</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETALL\">GETALL</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ushort\">ushort</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#array\">array</a> = <a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#array\">array</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#nsems\">nsems</a> &gt; <a class=\"id\" href=\"#SEMMSL_FAST\">SEMMSL_FAST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_getref_and_unlock\">sem_getref_and_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_io\">sem_io</a> = <a class=\"id\" href=\"#ipc_alloc\">ipc_alloc</a>(sizeof(<a class=\"id\" href=\"#ushort\">ushort</a>)*<a class=\"id\" href=\"#nsems\">nsems</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#sem_io\">sem_io</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_putref\">sem_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_lock_and_putref\">sem_lock_and_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#deleted\">deleted</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIDRM\">EIDRM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_nsems\">sem_nsems</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_io\">sem_io</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#semval\">semval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#array\">array</a>, <a class=\"id\" href=\"#sem_io\">sem_io</a>, <a class=\"id\" href=\"#nsems\">nsems</a>*sizeof(<a class=\"id\" href=\"#ushort\">ushort</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SETALL\">SETALL</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#un\">un</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_getref_and_unlock\">sem_getref_and_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#nsems\">nsems</a> &gt; <a class=\"id\" href=\"#SEMMSL_FAST\">SEMMSL_FAST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_io\">sem_io</a> = <a class=\"id\" href=\"#ipc_alloc\">ipc_alloc</a>(sizeof(<a class=\"id\" href=\"#ushort\">ushort</a>)*<a class=\"id\" href=\"#nsems\">nsems</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#sem_io\">sem_io</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_putref\">sem_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a> (<a class=\"id\" href=\"#sem_io\">sem_io</a>, <a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#array\">array</a>, <a class=\"id\" href=\"#nsems\">nsems</a>*sizeof(<a class=\"id\" href=\"#ushort\">ushort</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_putref\">sem_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nsems\">nsems</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sem_io\">sem_io</a>[<a class=\"id\" href=\"#i\">i</a>] &gt; <a class=\"id\" href=\"#SEMVMX\">SEMVMX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_putref\">sem_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_lock_and_putref\">sem_lock_and_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#deleted\">deleted</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIDRM\">EIDRM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nsems\">nsems</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#semval\">semval</a> = <a class=\"id\" href=\"#sem_io\">sem_io</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#un\">un</a>, &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#list_id\">list_id</a>, <a class=\"id\" href=\"#list_id\">list_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nsems\">nsems</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#semadj\">semadj</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_ctime\">sem_ctime</a> = <a class=\"id\" href=\"#get_seconds\">get_seconds</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* maybe some queued-up processes were waiting for this */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_smart_update\">do_smart_update</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0, &amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* GETVAL, GETPID, GETNCTN, GETZCNT, SETVAL: fall-through */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#semnum\">semnum</a> &lt; 0 || <a class=\"id\" href=\"#semnum\">semnum</a> >= <a class=\"id\" href=\"#nsems\">nsems</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a>[<a class=\"id\" href=\"#semnum\">semnum</a>];", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETVAL\">GETVAL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#semval\">semval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETPID\">GETPID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sempid\">sempid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETNCNT\">GETNCNT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#count_semncnt\">count_semncnt</a>(<a class=\"id\" href=\"#sma\">sma</a>,<a class=\"id\" href=\"#semnum\">semnum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETZCNT\">GETZCNT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#count_semzcnt\">count_semzcnt</a>(<a class=\"id\" href=\"#sma\">sma</a>,<a class=\"id\" href=\"#semnum\">semnum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SETVAL\">SETVAL</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#un\">un</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &gt; <a class=\"id\" href=\"#SEMVMX\">SEMVMX</a> || <a class=\"id\" href=\"#val\">val</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#un\">un</a>, &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#list_id\">list_id</a>, <a class=\"id\" href=\"#list_id\">list_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#semadj\">semadj</a>[<a class=\"id\" href=\"#semnum\">semnum</a>] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#semval\">semval</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sempid\">sempid</a> = <a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_ctime\">sem_ctime</a> = <a class=\"id\" href=\"#get_seconds\">get_seconds</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* maybe some queued-up processes were waiting for this */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_smart_update\">do_smart_update</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0, &amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_sem_queue_do\">wake_up_sem_queue_do</a>(&amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#sem_io\">sem_io</a> != <a class=\"id\" href=\"#fast_sem_io\">fast_sem_io</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_free\">ipc_free</a>(<a class=\"id\" href=\"#sem_io\">sem_io</a>, sizeof(<a class=\"id\" href=\"#ushort\">ushort</a>)*<a class=\"id\" href=\"#nsems\">nsems</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long", 
"<a class=\"id\" href=\"#copy_semid_from_user\">copy_semid_from_user</a>(struct <a class=\"id\" href=\"#semid64_ds\">semid64_ds</a> *<a class=\"id\" href=\"#out\">out</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#version\">version</a>)", 
"{", 
"<span class=\"ts\"/>switch(<a class=\"id\" href=\"#version\">version</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_64\">IPC_64</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#buf\">buf</a>, sizeof(*<a class=\"id\" href=\"#out\">out</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_OLD\">IPC_OLD</a>:", 
"<span class=\"ts\"/>    {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#semid_ds\">semid_ds</a> <a class=\"id\" href=\"#tbuf_old\">tbuf_old</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#tbuf_old\">tbuf_old</a>, <a class=\"id\" href=\"#buf\">buf</a>, sizeof(<a class=\"id\" href=\"#tbuf_old\">tbuf_old</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#uid\">uid</a><span class=\"ts\"/>= <a class=\"id\" href=\"#tbuf_old\">tbuf_old</a>.<a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#gid\">gid</a><span class=\"ts\"/>= <a class=\"id\" href=\"#tbuf_old\">tbuf_old</a>.<a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#gid\">gid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#mode\">mode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#tbuf_old\">tbuf_old</a>.<a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#mode\">mode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>    }", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function handles some semctl commands which require the rw_mutex</span>", 
"<span class=\"comment\"> * to be held in write mode.</span>", 
"<span class=\"comment\"> * NOTE: no locks must be held, the rw_mutex is taken inside this function.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#semctl_down\">semctl_down</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, int <a class=\"id\" href=\"#semid\">semid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#cmd\">cmd</a>, int <a class=\"id\" href=\"#version\">version</a>, union <a class=\"id\" href=\"#semun\">semun</a> <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#semid64_ds\">semid64_ds</a> <a class=\"id\" href=\"#semid64\">semid64</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>;", 
"", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#IPC_SET\">IPC_SET</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_semid_from_user\">copy_semid_from_user</a>(&amp;<a class=\"id\" href=\"#semid64\">semid64</a>, <a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#version\">version</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipcp\">ipcp</a> = <a class=\"id\" href=\"#ipcctl_pre_down\">ipcctl_pre_down</a>(&amp;<a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>), <a class=\"id\" href=\"#semid\">semid</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, &amp;<a class=\"id\" href=\"#semid64\">semid64</a>.<a class=\"id\" href=\"#sem_perm\">sem_perm</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>, struct <a class=\"id\" href=\"#sem_array\">sem_array</a>, <a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_sem_semctl\">security_sem_semctl</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/>switch(<a class=\"id\" href=\"#cmd\">cmd</a>){", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_RMID\">IPC_RMID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freeary\">freeary</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#ipcp\">ipcp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_up\">out_up</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_SET\">IPC_SET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_update_perm\">ipc_update_perm</a>(&amp;<a class=\"id\" href=\"#semid64\">semid64</a>.<a class=\"id\" href=\"#sem_perm\">sem_perm</a>, <a class=\"id\" href=\"#ipcp\">ipcp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_ctime\">sem_ctime</a> = <a class=\"id\" href=\"#get_seconds\">get_seconds</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<a class=\"id\" href=\"#out_up\">out_up</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>).<a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE\">SYSCALL_DEFINE</a>(<a class=\"id\" href=\"#semctl\">semctl</a>)(int <a class=\"id\" href=\"#semid\">semid</a>, int <a class=\"id\" href=\"#semnum\">semnum</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>, union <a class=\"id\" href=\"#semun\">semun</a> <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#version\">version</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#semid\">semid</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#version\">version</a> = <a class=\"id\" href=\"#ipc_parse_version\">ipc_parse_version</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#ipc_ns\">ipc_ns</a>;", 
"", 
"<span class=\"ts\"/>switch(<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_INFO\">IPC_INFO</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEM_INFO\">SEM_INFO</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_STAT\">IPC_STAT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEM_STAT\">SEM_STAT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#semctl_nolock\">semctl_nolock</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#semid\">semid</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#version\">version</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETALL\">GETALL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETVAL\">GETVAL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETPID\">GETPID</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETNCNT\">GETNCNT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETZCNT\">GETZCNT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SETVAL\">SETVAL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SETALL\">SETALL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#semctl_main\">semctl_main</a>(<a class=\"id\" href=\"#ns\">ns</a>,<a class=\"id\" href=\"#semid\">semid</a>,<a class=\"id\" href=\"#semnum\">semnum</a>,<a class=\"id\" href=\"#cmd\">cmd</a>,<a class=\"id\" href=\"#version\">version</a>,<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_RMID\">IPC_RMID</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_SET\">IPC_SET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#semctl_down\">semctl_down</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#semid\">semid</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#version\">version</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_SYSCALL_WRAPPERS\">CONFIG_HAVE_SYSCALL_WRAPPERS</a>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> long <a class=\"id\" href=\"#SyS_semctl\">SyS_semctl</a>(int <a class=\"id\" href=\"#semid\">semid</a>, int <a class=\"id\" href=\"#semnum\">semnum</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>, union <a class=\"id\" href=\"#semun\">semun</a> <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SYSC_semctl\">SYSC_semctl</a>((int) <a class=\"id\" href=\"#semid\">semid</a>, (int) <a class=\"id\" href=\"#semnum\">semnum</a>, (int) <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"<a class=\"id\" href=\"#SYSCALL_ALIAS\">SYSCALL_ALIAS</a>(<a class=\"id\" href=\"#sys_semctl\">sys_semctl</a>, <a class=\"id\" href=\"#SyS_semctl\">SyS_semctl</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* If the task doesn't already have a undo_list, then allocate one</span>", 
"<span class=\"comment\"> * here.  We guarantee there is only one thread using this undo list,</span>", 
"<span class=\"comment\"> * and current is THE ONE</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If this allocation and assignment succeeds, but later</span>", 
"<span class=\"comment\"> * portions of this code fail, there is no need to free the sem_undo_list.</span>", 
"<span class=\"comment\"> * Just let it stay associated with the task, and it'll be freed later</span>", 
"<span class=\"comment\"> * at exit time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This can block, so callers must hold no locks.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#get_undo_list\">get_undo_list</a>(struct <a class=\"id\" href=\"#sem_undo_list\">sem_undo_list</a> **<a class=\"id\" href=\"#undo_listp\">undo_listp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo_list\">sem_undo_list</a> *<a class=\"id\" href=\"#undo_list\">undo_list</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#undo_list\">undo_list</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sysvsem\">sysvsem</a>.<a class=\"id\" href=\"#undo_list\">undo_list</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#undo_list\">undo_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#undo_list\">undo_list</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#undo_list\">undo_list</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#undo_list\">undo_list</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#undo_list\">undo_list</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#undo_list\">undo_list</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#undo_list\">undo_list</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sysvsem\">sysvsem</a>.<a class=\"id\" href=\"#undo_list\">undo_list</a> = <a class=\"id\" href=\"#undo_list\">undo_list</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#undo_listp\">undo_listp</a> = <a class=\"id\" href=\"#undo_list\">undo_list</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#__lookup_undo\">__lookup_undo</a>(struct <a class=\"id\" href=\"#sem_undo_list\">sem_undo_list</a> *<a class=\"id\" href=\"#ulp\">ulp</a>, int <a class=\"id\" href=\"#semid\">semid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#un\">un</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#un\">un</a>, &amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a>, <a class=\"id\" href=\"#list_proc\">list_proc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#semid\">semid</a> == <a class=\"id\" href=\"#semid\">semid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#un\">un</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#lookup_undo\">lookup_undo</a>(struct <a class=\"id\" href=\"#sem_undo_list\">sem_undo_list</a> *<a class=\"id\" href=\"#ulp\">ulp</a>, int <a class=\"id\" href=\"#semid\">semid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#un\">un</a>;", 
"", 
"  <span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a> = <a class=\"id\" href=\"#__lookup_undo\">__lookup_undo</a>(<a class=\"id\" href=\"#ulp\">ulp</a>, <a class=\"id\" href=\"#semid\">semid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#un\">un</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a>, &amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#un\">un</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_alloc_undo - Lookup (and if not present create) undo array</span>", 
"<span class=\"comment\"> * @ns: namespace</span>", 
"<span class=\"comment\"> * @semid: semaphore array id</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function looks up (and if not present creates) the undo structure.</span>", 
"<span class=\"comment\"> * The size of the undo structure depends on the size of the semaphore</span>", 
"<span class=\"comment\"> * array, thus the alloc path is not that straightforward.</span>", 
"<span class=\"comment\"> * Lifetime-rules: sem_undo is rcu-protected, on success, the function</span>", 
"<span class=\"comment\"> * performs a rcu_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#find_alloc_undo\">find_alloc_undo</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, int <a class=\"id\" href=\"#semid\">semid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo_list\">sem_undo_list</a> *<a class=\"id\" href=\"#ulp\">ulp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#un\">un</a>, *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nsems\">nsems</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_undo_list\">get_undo_list</a>(&amp;<a class=\"id\" href=\"#ulp\">ulp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a> = <a class=\"id\" href=\"#lookup_undo\">lookup_undo</a>(<a class=\"id\" href=\"#ulp\">ulp</a>, <a class=\"id\" href=\"#semid\">semid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#un\">un</a>!=<a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no undo structure around - allocate one. */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* step 1: figure out the size of the semaphore array */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#sem_lock_check\">sem_lock_check</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#semid\">semid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sma\">sma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_CAST\">ERR_CAST</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsems\">nsems</a> = <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_nsems\">sem_nsems</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_getref_and_unlock\">sem_getref_and_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* step 2: allocate new undo structure */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a>) + sizeof(short)*<a class=\"id\" href=\"#nsems\">nsems</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_putref\">sem_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* step 3: Acquire the lock on semaphore array */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_lock_and_putref\">sem_lock_and_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#deleted\">deleted</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EIDRM\">EIDRM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * step 4: check for races: did someone else allocate the undo struct?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a> = <a class=\"id\" href=\"#lookup_undo\">lookup_undo</a>(<a class=\"id\" href=\"#ulp\">ulp</a>, <a class=\"id\" href=\"#semid\">semid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#un\">un</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#success\">success</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* step 5: initialize &amp; link new undo structure */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#semadj\">semadj</a> = (short *) &amp;<a class=\"id\" href=\"#new\">new</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#ulp\">ulp</a> = <a class=\"id\" href=\"#ulp\">ulp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#semid\">semid</a> = <a class=\"id\" href=\"#semid\">semid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a>, &amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list_id\">list_id</a>, &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#list_id\">list_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<a class=\"id\" href=\"#success\">success</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#un\">un</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_queue_result - Retrieve the result code from sem_queue</span>", 
"<span class=\"comment\"> * @q: Pointer to queue structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Retrieve the return code from the pending queue. If IN_WAKEUP is found in</span>", 
"<span class=\"comment\"> * q-&gt;status, then we must loop until the value is replaced with the final</span>", 
"<span class=\"comment\"> * value: This may happen if a task is woken up by an unrelated event (e.g.</span>", 
"<span class=\"comment\"> * signal) and in parallel the task is woken up by another task because it got</span>", 
"<span class=\"comment\"> * the requested semaphores.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function can be called with or without holding the semaphore spinlock.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#get_queue_result\">get_queue_result</a>(struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a> == <a class=\"id\" href=\"#IN_WAKEUP\">IN_WAKEUP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE4\">SYSCALL_DEFINE4</a>(<a class=\"id\" href=\"#semtimedop\">semtimedop</a>, int, <a class=\"id\" href=\"#semid\">semid</a>, struct <a class=\"id\" href=\"#sembuf\">sembuf</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#tsops\">tsops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned, <a class=\"id\" href=\"#nsops\">nsops</a>, const struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sembuf\">sembuf</a> <a class=\"id\" href=\"#fast_sops\">fast_sops</a>[<a class=\"id\" href=\"#SEMOPM_FAST\">SEMOPM_FAST</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sembuf\">sembuf</a>* <a class=\"id\" href=\"#sops\">sops</a> = <a class=\"id\" href=\"#fast_sops\">fast_sops</a>, *<a class=\"id\" href=\"#sop\">sop</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#un\">un</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#undos\">undos</a> = 0, <a class=\"id\" href=\"#alter\">alter</a> = 0, <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> <a class=\"id\" href=\"#queue\">queue</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#jiffies_left\">jiffies_left</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tasks\">tasks</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#ipc_ns\">ipc_ns</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nsops\">nsops</a> &lt; 1 || <a class=\"id\" href=\"#semid\">semid</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nsops\">nsops</a> &gt; <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semopm\">sc_semopm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#E2BIG\">E2BIG</a>;", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#nsops\">nsops</a> &gt; <a class=\"id\" href=\"#SEMOPM_FAST\">SEMOPM_FAST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sops\">sops</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#sops\">sops</a>)*<a class=\"id\" href=\"#nsops\">nsops</a>,<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#sops\">sops</a>==<a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a> (<a class=\"id\" href=\"#sops\">sops</a>, <a class=\"id\" href=\"#tsops\">tsops</a>, <a class=\"id\" href=\"#nsops\">nsops</a> * sizeof(*<a class=\"id\" href=\"#tsops\">tsops</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>=-<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#_timeout\">_timeout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#_timeout\">_timeout</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, sizeof(*<a class=\"id\" href=\"#timeout\">timeout</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#_timeout\">_timeout</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> &lt; 0 || <a class=\"id\" href=\"#_timeout\">_timeout</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> &lt; 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_timeout\">_timeout</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> >= 1000000000L) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jiffies_left\">jiffies_left</a> = <a class=\"id\" href=\"#timespec_to_jiffies\">timespec_to_jiffies</a>(&amp;<a class=\"id\" href=\"#_timeout\">_timeout</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#sop\">sop</a> = <a class=\"id\" href=\"#sops\">sops</a>; <a class=\"id\" href=\"#sop\">sop</a> &lt; <a class=\"id\" href=\"#sops\">sops</a> + <a class=\"id\" href=\"#nsops\">nsops</a>; <a class=\"id\" href=\"#sop\">sop</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_num\">sem_num</a> >= <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_num\">sem_num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_flg\">sem_flg</a> &amp; <a class=\"id\" href=\"#SEM_UNDO\">SEM_UNDO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#undos\">undos</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_op\">sem_op</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alter\">alter</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#undos\">undos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a> = <a class=\"id\" href=\"#find_alloc_undo\">find_alloc_undo</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#semid\">semid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#un\">un</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#un\">un</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#sem_lock_check\">sem_lock_check</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#semid\">semid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sma\">sma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#un\">un</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * semid identifiers are not unique - find_alloc_undo may have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocated an undo structure, it was invalidated by an RMID</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and now a new array with received the same id. Check and fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This case can be detected checking un-&gt;semid. The existance of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"un\" itself is guaranteed by rcu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EIDRM\">EIDRM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#un\">un</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#semid\">semid</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_free\">out_unlock_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * rcu lock can be released, \"un\" cannot disappear:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * - sem_lock is acquired, thus IPC_RMID is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *   impossible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * - exit_sem is impossible, it always operates on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *   current (or a dead task).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFBIG\">EFBIG</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a> >= <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_nsems\">sem_nsems</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_free\">out_unlock_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipcperms\">ipcperms</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>, <a class=\"id\" href=\"#alter\">alter</a> ? <a class=\"id\" href=\"#S_IWUGO\">S_IWUGO</a> : <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_free\">out_unlock_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_sem_semop\">security_sem_semop</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#sops\">sops</a>, <a class=\"id\" href=\"#nsops\">nsops</a>, <a class=\"id\" href=\"#alter\">alter</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_free\">out_unlock_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#try_atomic_semop\">try_atomic_semop</a> (<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#sops\">sops</a>, <a class=\"id\" href=\"#nsops\">nsops</a>, <a class=\"id\" href=\"#un\">un</a>, <a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alter\">alter</a> && <a class=\"id\" href=\"#error\">error</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_smart_update\">do_smart_update</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#sops\">sops</a>, <a class=\"id\" href=\"#nsops\">nsops</a>, 1, &amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_free\">out_unlock_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We need to sleep on this operation, so we put the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task into the pending queue and go to sleep.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#sops\">sops</a> = <a class=\"id\" href=\"#sops\">sops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#nsops\">nsops</a> = <a class=\"id\" href=\"#nsops\">nsops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#undo\">undo</a> = <a class=\"id\" href=\"#un\">un</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#alter\">alter</a> = <a class=\"id\" href=\"#alter\">alter</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alter\">alter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_pending\">sem_pending</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_pending\">sem_pending</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nsops\">nsops</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sem\">sem</a> *<a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a>[<a class=\"id\" href=\"#sops\">sops</a>-><a class=\"id\" href=\"#sem_num\">sem_num</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alter\">alter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#simple_list\">simple_list</a>, &amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sem_pending\">sem_pending</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#simple_list\">simple_list</a>, &amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sem_pending\">sem_pending</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#simple_list\">simple_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#complex_count\">complex_count</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#sleeper\">sleeper</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jiffies_left\">jiffies_left</a> = <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#jiffies_left\">jiffies_left</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_queue_result\">get_queue_result</a>(&amp;<a class=\"id\" href=\"#queue\">queue</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> != -<a class=\"id\" href=\"#EINTR\">EINTR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fast path: update_queue already obtained all requested</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * resources.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Perform a smp_mb(): User space could assume that semop()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is a memory barrier: Without the mb(), the cpu could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * speculatively read in user space stale data that was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * overwritten by the previous owner of the semaphore.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#sem_lock\">sem_lock</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#semid\">semid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sma\">sma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EIDRM\">EIDRM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_queue_result\">get_queue_result</a>(&amp;<a class=\"id\" href=\"#queue\">queue</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If queue.status != -EINTR we are woken up by another process</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> != -<a class=\"id\" href=\"#EINTR\">EINTR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_free\">out_unlock_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If an interrupt occurred we have to clean up the queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a> && <a class=\"id\" href=\"#jiffies_left\">jiffies_left</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlink_queue\">unlink_queue</a>(<a class=\"id\" href=\"#sma\">sma</a>, &amp;<a class=\"id\" href=\"#queue\">queue</a>);", 
"", 
"<a class=\"id\" href=\"#out_unlock_free\">out_unlock_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_sem_queue_do\">wake_up_sem_queue_do</a>(&amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#sops\">sops</a> != <a class=\"id\" href=\"#fast_sops\">fast_sops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sops\">sops</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#semop\">semop</a>, int, <a class=\"id\" href=\"#semid\">semid</a>, struct <a class=\"id\" href=\"#sembuf\">sembuf</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#tsops\">tsops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned, <a class=\"id\" href=\"#nsops\">nsops</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_semtimedop\">sys_semtimedop</a>(<a class=\"id\" href=\"#semid\">semid</a>, <a class=\"id\" href=\"#tsops\">tsops</a>, <a class=\"id\" href=\"#nsops\">nsops</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/* If CLONE_SYSVSEM is set, establish sharing of SEM_UNDO state between</span>", 
"<span class=\"comment\"> * parent and child tasks.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#copy_semundo\">copy_semundo</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo_list\">sem_undo_list</a> *<a class=\"id\" href=\"#undo_list\">undo_list</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_SYSVSEM\">CLONE_SYSVSEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_undo_list\">get_undo_list</a>(&amp;<a class=\"id\" href=\"#undo_list\">undo_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#undo_list\">undo_list</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sysvsem\">sysvsem</a>.<a class=\"id\" href=\"#undo_list\">undo_list</a> = <a class=\"id\" href=\"#undo_list\">undo_list</a>;", 
"<span class=\"ts\"/>} else ", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sysvsem\">sysvsem</a>.<a class=\"id\" href=\"#undo_list\">undo_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * add semadj values to semaphores, free undo structures.</span>", 
"<span class=\"comment\"> * undo structures are not freed when semaphore arrays are destroyed</span>", 
"<span class=\"comment\"> * so some of them may be out of date.</span>", 
"<span class=\"comment\"> * IMPLEMENTATION NOTE: There is some confusion over whether the</span>", 
"<span class=\"comment\"> * set of adjustments that needs to be done should be done in an atomic</span>", 
"<span class=\"comment\"> * manner or not. That is, if we are attempting to decrement the semval</span>", 
"<span class=\"comment\"> * should we queue up and wait until we can do so legally?</span>", 
"<span class=\"comment\"> * The original implementation attempted to do this (queue and wait).</span>", 
"<span class=\"comment\"> * The current implementation does not do so. The POSIX standard</span>", 
"<span class=\"comment\"> * and SVID should be consulted to determine what behavior is mandated.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#exit_sem\">exit_sem</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo_list\">sem_undo_list</a> *<a class=\"id\" href=\"#ulp\">ulp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ulp\">ulp</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sysvsem\">sysvsem</a>.<a class=\"id\" href=\"#undo_list\">undo_list</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ulp\">ulp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sysvsem\">sysvsem</a>.<a class=\"id\" href=\"#undo_list\">undo_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#un\">un</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tasks\">tasks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#semid\">semid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a> = <a class=\"id\" href=\"#list_entry_rcu\">list_entry_rcu</a>(<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a>, <a class=\"id\" href=\"#list_proc\">list_proc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a> == &amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#semid\">semid</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/> else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#semid\">semid</a> = <a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#semid\">semid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#semid\">semid</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#sem_lock_check\">sem_lock_check</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#ipc_ns\">ipc_ns</a>, <a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#semid\">semid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* exit_sem raced with IPC_RMID, nothing to do */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sma\">sma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a> = <a class=\"id\" href=\"#__lookup_undo\">__lookup_undo</a>(<a class=\"id\" href=\"#ulp\">ulp</a>, <a class=\"id\" href=\"#semid\">semid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#un\">un</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* exit_sem raced with IPC_RMID+semget() that created</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * exactly the same semid. Nothing to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remove un from the linked lists */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#list_id\">list_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* perform adjustments registered in un */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_nsems\">sem_nsems</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sem\">sem</a> * <a class=\"id\" href=\"#semaphore\">semaphore</a> = &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#semadj\">semadj</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#semaphore\">semaphore</a>-><a class=\"id\" href=\"#semval\">semval</a> += <a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#semadj\">semadj</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Range checks of the new semaphore value,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not defined by sus:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * - Some unices ignore the undo entirely</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *   (e.g. HP UX 11i 11.22, Tru64 V5.1)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * - some cap the value (e.g. FreeBSD caps</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *   at 0, but doesn't enforce SEMVMX)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Linux caps the semaphore value, both at 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and at SEMVMX.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * <span class=\"ts\"/>Manfred &lt;manfred@colorfullife.com&gt;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#semaphore\">semaphore</a>-><a class=\"id\" href=\"#semval\">semval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#semaphore\">semaphore</a>-><a class=\"id\" href=\"#semval\">semval</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#semaphore\">semaphore</a>-><a class=\"id\" href=\"#semval\">semval</a> &gt; <a class=\"id\" href=\"#SEMVMX\">SEMVMX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#semaphore\">semaphore</a>-><a class=\"id\" href=\"#semval\">semval</a> = <a class=\"id\" href=\"#SEMVMX\">SEMVMX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#semaphore\">semaphore</a>-><a class=\"id\" href=\"#sempid\">sempid</a> = <a class=\"id\" href=\"#task_tgid_vnr\">task_tgid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* maybe some queued-up processes were waiting for this */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_smart_update\">do_smart_update</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, 1, &amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_sem_queue_do\">wake_up_sem_queue_do</a>(&amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#free_un\">free_un</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ulp\">ulp</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"static int <a class=\"id\" href=\"#sysvipc_sem_proc_show\">sysvipc_sem_proc_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#it\">it</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#it\">it</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%10d %10d  %4o %10u %5u %5u %5u %5u %10lu %10lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_nsems\">sem_nsems</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#uid\">uid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#gid\">gid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#cuid\">cuid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#cgid\">cgid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_otime\">sem_otime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_ctime\">sem_ctime</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/7c/b5faf2b58c25401b91c9b5663e0e977984cf04.xr', __xr_tmp);
