var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Kernel Probes (KProbes)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) IBM Corporation, 2002, 2004</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2002-Oct<span class=\"ts\"/>Created by Vamsi Krishna S &lt;vamsi_krishna@in.ibm.com&gt; Kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Probes initial implementation ( includes contributions from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Rusty Russell).</span>", 
"<span class=\"comment\"> * 2004-July<span class=\"ts\"/>Suparna Bhattacharya &lt;suparna@in.ibm.com&gt; added jumper probes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interface to access function arguments.</span>", 
"<span class=\"comment\"> * 2004-Oct<span class=\"ts\"/>Jim Keniston &lt;jkenisto@us.ibm.com&gt; and Prasanna S Panchamukhi</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>&lt;prasanna@in.ibm.com&gt; adapted for x86_64 from i386.</span>", 
"<span class=\"comment\"> * 2005-Mar<span class=\"ts\"/>Roland McGrath &lt;roland@redhat.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fixed to handle %rip-relative addressing mode correctly.</span>", 
"<span class=\"comment\"> * 2005-May<span class=\"ts\"/>Hien Nguyen &lt;hien@us.ibm.com&gt;, Jim Keniston</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>&lt;jkenisto@us.ibm.com&gt; and Prasanna S Panchamukhi</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>&lt;prasanna@in.ibm.com&gt; added function-return probes.</span>", 
"<span class=\"comment\"> * 2005-May<span class=\"ts\"/>Rusty Lynch &lt;rusty.lynch@intel.com&gt;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>Added function return probes functionality</span>", 
"<span class=\"comment\"> * 2006-Feb<span class=\"ts\"/>Masami Hiramatsu &lt;hiramatu@sdl.hitachi.co.jp&gt; added</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>kprobe-booster and kretprobe-booster for i386.</span>", 
"<span class=\"comment\"> * 2007-Dec<span class=\"ts\"/>Masami Hiramatsu &lt;mhiramat@redhat.com&gt; added kprobe-booster</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>and kretprobe-booster for x86-64</span>", 
"<span class=\"comment\"> * 2007-Dec<span class=\"ts\"/>Masami Hiramatsu &lt;mhiramat@redhat.com&gt;, Arjan van de Ven</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>&lt;arjan@infradead.org&gt; and Jim Keniston &lt;jkenisto@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>unified x86 kprobes code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#preempt\">preempt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#alternative\">alternative</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#debugreg\">debugreg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"void <a class=\"id\" href=\"#jprobe_return_end\">jprobe_return_end</a>(void);", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *, <a class=\"id\" href=\"#current_kprobe\">current_kprobe</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a>, <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#stack_addr\">stack_addr</a>(<a class=\"id\" href=\"#regs\">regs</a>) ((unsigned long *)<a class=\"id\" href=\"#kernel_stack_pointer\">kernel_stack_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#W\">W</a>(<a class=\"id\" href=\"#row\">row</a>, <a class=\"id\" href=\"#b0\">b0</a>, <a class=\"id\" href=\"#b1\">b1</a>, <a class=\"id\" href=\"#b2\">b2</a>, <a class=\"id\" href=\"#b3\">b3</a>, <a class=\"id\" href=\"#b4\">b4</a>, <a class=\"id\" href=\"#b5\">b5</a>, <a class=\"id\" href=\"#b6\">b6</a>, <a class=\"id\" href=\"#b7\">b7</a>, <a class=\"id\" href=\"#b8\">b8</a>, <a class=\"id\" href=\"#b9\">b9</a>, <a class=\"id\" href=\"#ba\">ba</a>, <a class=\"id\" href=\"#bb\">bb</a>, <a class=\"id\" href=\"#bc\">bc</a>, <a class=\"id\" href=\"#bd\">bd</a>, <a class=\"id\" href=\"#be\">be</a>, <a class=\"id\" href=\"#bf\">bf</a>)\\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#b0\">b0</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0x0)|(<a class=\"id\" href=\"#b1\">b1</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0x1)|(<a class=\"id\" href=\"#b2\">b2</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0x2)|(<a class=\"id\" href=\"#b3\">b3</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0x3) |   \\", 
"<span class=\"ts\"/>  (<a class=\"id\" href=\"#b4\">b4</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0x4)|(<a class=\"id\" href=\"#b5\">b5</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0x5)|(<a class=\"id\" href=\"#b6\">b6</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0x6)|(<a class=\"id\" href=\"#b7\">b7</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0x7) |   \\", 
"<span class=\"ts\"/>  (<a class=\"id\" href=\"#b8\">b8</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0x8)|(<a class=\"id\" href=\"#b9\">b9</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0x9)|(<a class=\"id\" href=\"#ba\">ba</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0xa)|(<a class=\"id\" href=\"#bb\">bb</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0xb) |   \\", 
"<span class=\"ts\"/>  (<a class=\"id\" href=\"#bc\">bc</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0xc)|(<a class=\"id\" href=\"#bd\">bd</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0xd)|(<a class=\"id\" href=\"#be\">be</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0xe)|(<a class=\"id\" href=\"#bf\">bf</a>##<a class=\"id\" href=\"#UL\">UL</a> << 0xf))    \\", 
"<span class=\"ts\"/> << (<a class=\"id\" href=\"#row\">row</a> % 32))", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Undefined/reserved opcodes, conditional jump, Opcode Extension</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Groups, and some special opcodes can not boost.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"static const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#twobyte_is_boostable\">twobyte_is_boostable</a>[256 / 32] = {", 
"<span class=\"ts\"/><span class=\"comment\">/*      0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f          */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*      ----------------------------------------------          */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0x00, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0) | <span class=\"comment\">/* 00 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0x10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) , <span class=\"comment\">/* 10 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0x20, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) | <span class=\"comment\">/* 20 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0x30, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) , <span class=\"comment\">/* 30 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0x40, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) | <span class=\"comment\">/* 40 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0x50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) , <span class=\"comment\">/* 50 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0x60, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1) | <span class=\"comment\">/* 60 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0x70, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1) , <span class=\"comment\">/* 70 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) | <span class=\"comment\">/* 80 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0x90, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) , <span class=\"comment\">/* 90 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0xa0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1) | <span class=\"comment\">/* a0 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0xb0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1) , <span class=\"comment\">/* b0 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0xc0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1) | <span class=\"comment\">/* c0 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0xd0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1) , <span class=\"comment\">/* d0 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0xe0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1) | <span class=\"comment\">/* e0 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#W\">W</a>(0xf0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0)   <span class=\"comment\">/* f0 */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*      -----------------------------------------------         */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*      0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f          */</span>", 
"};", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#W\">W</a>", 
"", 
"struct <a class=\"id\" href=\"#kretprobe_blackpoint\">kretprobe_blackpoint</a> <a class=\"id\" href=\"#kretprobe_blacklist\">kretprobe_blacklist</a>[] = {", 
"<span class=\"ts\"/>{\"__switch_to\", }, <span class=\"comment\">/* This function switches only current task, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      doesn't switch kernel stack.*/</span>", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>}<span class=\"ts\"/><span class=\"comment\">/* Terminator */</span>", 
"};", 
"const int <a class=\"id\" href=\"#kretprobe_blacklist_size\">kretprobe_blacklist_size</a> = <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#kretprobe_blacklist\">kretprobe_blacklist</a>);", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#__synthesize_relative_insn\">__synthesize_relative_insn</a>(void *<a class=\"id\" href=\"#from\">from</a>, void *<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__arch_relative_insn\">__arch_relative_insn</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#raddr\">raddr</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#packed\">packed</a>)) *<a class=\"id\" href=\"#insn\">insn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a> = (struct <a class=\"id\" href=\"#__arch_relative_insn\">__arch_relative_insn</a> *)<a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#raddr\">raddr</a> = (<a class=\"id\" href=\"#s32\">s32</a>)((long)(<a class=\"id\" href=\"#to\">to</a>) - ((long)(<a class=\"id\" href=\"#from\">from</a>) + 5));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#op\">op</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Insert a jump instruction at address 'from', which jumps to address 'to'.*/</span>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#synthesize_reljump\">synthesize_reljump</a>(void *<a class=\"id\" href=\"#from\">from</a>, void *<a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__synthesize_relative_insn\">__synthesize_relative_insn</a>(<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#RELATIVEJUMP_OPCODE\">RELATIVEJUMP_OPCODE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Skip the prefixes of the instruction.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#skip_prefixes\">skip_prefixes</a>(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_attr_t\">insn_attr_t</a> <a class=\"id\" href=\"#attr\">attr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#inat_get_opcode_attribute\">inat_get_opcode_attribute</a>((<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>)*<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#inat_is_legacy_prefix\">inat_is_legacy_prefix</a>(<a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#inat_get_opcode_attribute\">inat_get_opcode_attribute</a>((<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>)*<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inat_is_rex_prefix\">inat_is_rex_prefix</a>(<a class=\"id\" href=\"#attr\">attr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>++;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#insn\">insn</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns non-zero if opcode is boostable.</span>", 
"<span class=\"comment\"> * RIP relative instructions are adjusted at copying time in 64 bits mode</span>", 
];
xr_frag_insert('l/7c/ef864863a5466cd82497d800661aa57d7ac110.xr', __xr_tmp);
