var __xr_tmp = [
"<span class=\"comment\">/* user-type.h: User-defined key type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 Red Hat, Inc. All Rights Reserved.</span>", 
"<span class=\"comment\"> * Written by David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> * 2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_KEYS_USER_TYPE_H\">_KEYS_USER_TYPE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_KEYS_USER_TYPE_H\">_KEYS_USER_TYPE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the payload for a key of type \"user\"</span>", 
"<span class=\"comment\"> * - once filled in and attached to a key:</span>", 
"<span class=\"comment\"> *   - the payload struct is invariant may not be changed, only replaced</span>", 
"<span class=\"comment\"> *   - the payload must be read with RCU procedures or with the key semaphore</span>", 
"<span class=\"comment\"> *     held</span>", 
"<span class=\"comment\"> *   - the payload may only be replaced with the key semaphore write-locked</span>", 
"<span class=\"comment\"> * - the key's data length is the size of the actual data, not including the</span>", 
"<span class=\"comment\"> *   payload wrapper</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#user_key_payload\">user_key_payload</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><a class=\"id\" href=\"#rcu\">rcu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* RCU destructor */</span>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#datalen\">datalen</a>;<span class=\"ts\"/><span class=\"comment\">/* length of this data */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>[0];<span class=\"ts\"/><span class=\"comment\">/* actual data */</span>", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#key_type\">key_type</a> <a class=\"id\" href=\"#key_type_user\">key_type_user</a>;", 
"", 
"extern int <a class=\"id\" href=\"#user_instantiate\">user_instantiate</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, const void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>);", 
"extern int <a class=\"id\" href=\"#user_update\">user_update</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, const void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>);", 
"extern int <a class=\"id\" href=\"#user_match\">user_match</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, const void *<a class=\"id\" href=\"#criterion\">criterion</a>);", 
"extern void <a class=\"id\" href=\"#user_revoke\">user_revoke</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"extern void <a class=\"id\" href=\"#user_destroy\">user_destroy</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"extern void <a class=\"id\" href=\"#user_describe\">user_describe</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#user\">user</a>, struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>);", 
"extern long <a class=\"id\" href=\"#user_read\">user_read</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _KEYS_USER_TYPE_H */</span>", 
];
xr_frag_insert('l/7d/0366af2f5e939b2fa316dba5460f4fe011ec6a.xr', __xr_tmp);
