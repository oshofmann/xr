var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>PCI searching functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright (C) 1993 -- 1997 Drew Eckhardt, Frederic Potter,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>David Mosberger-Tang</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright (C) 1997 -- 2000 Martin Mares &lt;mj@ucw.cz&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright (C) 2003 -- 2004 Greg Kroah-Hartman &lt;greg@kroah.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"pci.h\"", 
"", 
"<a class=\"id\" href=\"#DECLARE_RWSEM\">DECLARE_RWSEM</a>(<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find the upstream PCIe-to-PCI bridge of a PCI device</span>", 
"<span class=\"comment\"> * if the device is PCIE, return NULL</span>", 
"<span class=\"comment\"> * if the device isn't connected to a PCIe bridge (that is its parent is a</span>", 
"<span class=\"comment\"> * legacy PCI bridge and the bridge is directly connected to bus 0), return its</span>", 
"<span class=\"comment\"> * parent</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *", 
"<a class=\"id\" href=\"#pci_find_upstream_pcie_bridge\">pci_find_upstream_pcie_bridge</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_is_pcie\">pci_is_pcie</a>(<a class=\"id\" href=\"#pdev\">pdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_is_root_bus\">pci_is_root_bus</a>(<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#bus\">bus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* a p2p bridge */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_is_pcie\">pci_is_pcie</a>(<a class=\"id\" href=\"#pdev\">pdev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#pdev\">pdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* PCI device should connect to a PCIe bridge */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a> != <a class=\"id\" href=\"#PCI_EXP_TYPE_PCI_BRIDGE\">PCI_EXP_TYPE_PCI_BRIDGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Busted hardware? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pdev\">pdev</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#pci_do_find_bus\">pci_do_find_bus</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, unsigned char <a class=\"id\" href=\"#busnr\">busnr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a>* <a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#number\">number</a> == <a class=\"id\" href=\"#busnr\">busnr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bus\">bus</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#children\">children</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#pci_do_find_bus\">pci_do_find_bus</a>(<a class=\"id\" href=\"#pci_bus_b\">pci_bus_b</a>(<a class=\"id\" href=\"#tmp\">tmp</a>), <a class=\"id\" href=\"#busnr\">busnr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#child\">child</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_find_bus - locate PCI bus from a given domain and bus number</span>", 
"<span class=\"comment\"> * @domain: number of PCI domain to search</span>", 
"<span class=\"comment\"> * @busnr: number of desired PCI bus</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given a PCI bus number and domain number, the desired PCI bus is located</span>", 
"<span class=\"comment\"> * in the global list of PCI buses.  If the bus is found, a pointer to its</span>", 
"<span class=\"comment\"> * data structure is returned.  If no bus is found, %NULL is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> * <a class=\"id\" href=\"#pci_find_bus\">pci_find_bus</a>(int <a class=\"id\" href=\"#domain\">domain</a>, int <a class=\"id\" href=\"#busnr\">busnr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#tmp_bus\">tmp_bus</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#pci_find_next_bus\">pci_find_next_bus</a>(<a class=\"id\" href=\"#bus\">bus</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>)  {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_domain_nr\">pci_domain_nr</a>(<a class=\"id\" href=\"#bus\">bus</a>) != <a class=\"id\" href=\"#domain\">domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp_bus\">tmp_bus</a> = <a class=\"id\" href=\"#pci_do_find_bus\">pci_do_find_bus</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#busnr\">busnr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp_bus\">tmp_bus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tmp_bus\">tmp_bus</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_find_next_bus - begin or continue searching for a PCI bus</span>", 
"<span class=\"comment\"> * @from: Previous PCI bus found, or %NULL for new search.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterates through the list of known PCI busses.  A new search is</span>", 
"<span class=\"comment\"> * initiated by passing %NULL as the @from argument.  Otherwise if</span>", 
"<span class=\"comment\"> * @from is not %NULL, searches continue from next device on the</span>", 
"<span class=\"comment\"> * global list.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> * ", 
"<a class=\"id\" href=\"#pci_find_next_bus\">pci_find_next_bus</a>(const struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#from\">from</a> ? <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#node\">node</a>.<a class=\"id\" href=\"#next\">next</a> : <a class=\"id\" href=\"#pci_root_buses\">pci_root_buses</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> != &amp;<a class=\"id\" href=\"#pci_root_buses\">pci_root_buses</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#pci_bus_b\">pci_bus_b</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#b\">b</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_get_slot - locate PCI device for a given PCI slot</span>", 
"<span class=\"comment\"> * @bus: PCI bus on which desired PCI device resides</span>", 
"<span class=\"comment\"> * @devfn: encodes number of PCI slot in which the desired PCI </span>", 
"<span class=\"comment\"> * device resides and the logical device number within that slot </span>", 
"<span class=\"comment\"> * in case of multi-function devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given a PCI bus and slot/function number, the desired PCI device </span>", 
"<span class=\"comment\"> * is located in the list of PCI devices.</span>", 
"<span class=\"comment\"> * If the device is found, its reference count is increased and this</span>", 
"<span class=\"comment\"> * function returns a pointer to its data structure.  The caller must</span>", 
"<span class=\"comment\"> * decrement the reference count by calling pci_dev_put().</span>", 
"<span class=\"comment\"> * If no device is found, %NULL is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> * <a class=\"id\" href=\"#pci_get_slot\">pci_get_slot</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#pci_dev_b\">pci_dev_b</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a> == <a class=\"id\" href=\"#devfn\">devfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_get\">pci_dev_get</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_get_domain_bus_and_slot - locate PCI device for a given PCI domain (segment), bus, and slot</span>", 
"<span class=\"comment\"> * @domain: PCI domain/segment on which the PCI device resides.</span>", 
"<span class=\"comment\"> * @bus: PCI bus on which desired PCI device resides</span>", 
"<span class=\"comment\"> * @devfn: encodes number of PCI slot in which the desired PCI device</span>", 
"<span class=\"comment\"> * resides and the logical device number within that slot in case of</span>", 
"<span class=\"comment\"> * multi-function devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given a PCI domain, bus, and slot/function number, the desired PCI</span>", 
"<span class=\"comment\"> * device is located in the list of PCI devices. If the device is</span>", 
"<span class=\"comment\"> * found, its reference count is increased and this function returns a</span>", 
"<span class=\"comment\"> * pointer to its data structure.  The caller must decrement the</span>", 
"<span class=\"comment\"> * reference count by calling pci_dev_put().  If no device is found,</span>", 
"<span class=\"comment\"> * %NULL is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pci_get_domain_bus_and_slot\">pci_get_domain_bus_and_slot</a>(int <a class=\"id\" href=\"#domain\">domain</a>, unsigned int <a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_pci_dev\">for_each_pci_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_domain_nr\">pci_domain_nr</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>) == <a class=\"id\" href=\"#domain\">domain</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#number\">number</a> == <a class=\"id\" href=\"#bus\">bus</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a> == <a class=\"id\" href=\"#devfn\">devfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_get_domain_bus_and_slot\">pci_get_domain_bus_and_slot</a>);", 
"", 
"static int <a class=\"id\" href=\"#match_pci_dev_by_id\">match_pci_dev_by_id</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_pci_dev\">to_pci_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_device_id\">pci_device_id</a> *<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_match_one_device\">pci_match_one_device</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#pdev\">pdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pci_get_dev_by_id - begin or continue searching for a PCI device by id</span>", 
"<span class=\"comment\"> * @id: pointer to struct pci_device_id to match for the device</span>", 
"<span class=\"comment\"> * @from: Previous PCI device found in search, or %NULL for new search.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterates through the list of known PCI devices.  If a PCI device is found</span>", 
"<span class=\"comment\"> * with a matching id a pointer to its device structure is returned, and the</span>", 
"<span class=\"comment\"> * reference count to the device is incremented.  Otherwise, %NULL is returned.</span>", 
"<span class=\"comment\"> * A new search is initiated by passing %NULL as the @from argument.  Otherwise</span>", 
"<span class=\"comment\"> * if @from is not %NULL, searches continue from next device on the global</span>", 
"<span class=\"comment\"> * list.  The reference count for @from is always decremented if it is not</span>", 
"<span class=\"comment\"> * %NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is an internal function for use by the other search functions in</span>", 
"<span class=\"comment\"> * this file.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pci_get_dev_by_id\">pci_get_dev_by_id</a>(const struct <a class=\"id\" href=\"#pci_device_id\">pci_device_id</a> *<a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev_start\">dev_start</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#from\">from</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_start\">dev_start</a> = &amp;<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#bus_find_device\">bus_find_device</a>(&amp;<a class=\"id\" href=\"#pci_bus_type\">pci_bus_type</a>, <a class=\"id\" href=\"#dev_start\">dev_start</a>, (void *)<a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#match_pci_dev_by_id\">match_pci_dev_by_id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_pci_dev\">to_pci_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#from\">from</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pdev\">pdev</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_get_subsys - begin or continue searching for a PCI device by vendor/subvendor/device/subdevice id</span>", 
"<span class=\"comment\"> * @vendor: PCI vendor id to match, or %PCI_ANY_ID to match all vendor ids</span>", 
"<span class=\"comment\"> * @device: PCI device id to match, or %PCI_ANY_ID to match all device ids</span>", 
"<span class=\"comment\"> * @ss_vendor: PCI subsystem vendor id to match, or %PCI_ANY_ID to match all vendor ids</span>", 
"<span class=\"comment\"> * @ss_device: PCI subsystem device id to match, or %PCI_ANY_ID to match all device ids</span>", 
"<span class=\"comment\"> * @from: Previous PCI device found in search, or %NULL for new search.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterates through the list of known PCI devices.  If a PCI device is found</span>", 
"<span class=\"comment\"> * with a matching @vendor, @device, @ss_vendor and @ss_device, a pointer to its</span>", 
"<span class=\"comment\"> * device structure is returned, and the reference count to the device is</span>", 
"<span class=\"comment\"> * incremented.  Otherwise, %NULL is returned.  A new search is initiated by</span>", 
"<span class=\"comment\"> * passing %NULL as the @from argument.  Otherwise if @from is not %NULL,</span>", 
"<span class=\"comment\"> * searches continue from next device on the global list.</span>", 
"<span class=\"comment\"> * The reference count for @from is always decremented if it is not %NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pci_get_subsys\">pci_get_subsys</a>(unsigned int <a class=\"id\" href=\"#vendor\">vendor</a>, unsigned int <a class=\"id\" href=\"#device\">device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#ss_vendor\">ss_vendor</a>, unsigned int <a class=\"id\" href=\"#ss_device\">ss_device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_device_id\">pci_device_id</a> *<a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pci_find_subsys() can be called on the ide_setup() path,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * super-early in boot.  But the down_read() will enable local</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupts, which can cause some machines to crash.  So here we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * detect and flag that situation and bail out early.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#no_pci_devices\">no_pci_devices</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#id\">id</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#vendor\">vendor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#subvendor\">subvendor</a> = <a class=\"id\" href=\"#ss_vendor\">ss_vendor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#subdevice\">subdevice</a> = <a class=\"id\" href=\"#ss_device\">ss_device</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#pci_get_dev_by_id\">pci_get_dev_by_id</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pdev\">pdev</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_get_device - begin or continue searching for a PCI device by vendor/device id</span>", 
"<span class=\"comment\"> * @vendor: PCI vendor id to match, or %PCI_ANY_ID to match all vendor ids</span>", 
"<span class=\"comment\"> * @device: PCI device id to match, or %PCI_ANY_ID to match all device ids</span>", 
"<span class=\"comment\"> * @from: Previous PCI device found in search, or %NULL for new search.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterates through the list of known PCI devices.  If a PCI device is</span>", 
"<span class=\"comment\"> * found with a matching @vendor and @device, the reference count to the</span>", 
"<span class=\"comment\"> * device is incremented and a pointer to its device structure is returned.</span>", 
"<span class=\"comment\"> * Otherwise, %NULL is returned.  A new search is initiated by passing %NULL</span>", 
"<span class=\"comment\"> * as the @from argument.  Otherwise if @from is not %NULL, searches continue</span>", 
"<span class=\"comment\"> * from next device on the global list.  The reference count for @from is</span>", 
"<span class=\"comment\"> * always decremented if it is not %NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *", 
"<a class=\"id\" href=\"#pci_get_device\">pci_get_device</a>(unsigned int <a class=\"id\" href=\"#vendor\">vendor</a>, unsigned int <a class=\"id\" href=\"#device\">device</a>, struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_get_subsys\">pci_get_subsys</a>(<a class=\"id\" href=\"#vendor\">vendor</a>, <a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#from\">from</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_get_class - begin or continue searching for a PCI device by class</span>", 
"<span class=\"comment\"> * @class: search for a PCI device with this class designation</span>", 
"<span class=\"comment\"> * @from: Previous PCI device found in search, or %NULL for new search.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterates through the list of known PCI devices.  If a PCI device is</span>", 
"<span class=\"comment\"> * found with a matching @class, the reference count to the device is</span>", 
"<span class=\"comment\"> * incremented and a pointer to its device structure is returned.</span>", 
"<span class=\"comment\"> * Otherwise, %NULL is returned.</span>", 
"<span class=\"comment\"> * A new search is initiated by passing %NULL as the @from argument.</span>", 
"<span class=\"comment\"> * Otherwise if @from is not %NULL, searches continue from next device</span>", 
"<span class=\"comment\"> * on the global list.  The reference count for @from is always decremented</span>", 
"<span class=\"comment\"> * if it is not %NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pci_get_class\">pci_get_class</a>(unsigned int <a class=\"id\" href=\"#class\">class</a>, struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_device_id\">pci_device_id</a> *<a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#id\">id</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#subvendor\">subvendor</a> = <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#subdevice\">subdevice</a> = <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#class_mask\">class_mask</a> = <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#class\">class</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#pci_get_dev_by_id\">pci_get_dev_by_id</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_dev_present - Returns 1 if device matching the device list is present, 0 if not.</span>", 
"<span class=\"comment\"> * @ids: A pointer to a null terminated list of struct pci_device_id structures</span>", 
"<span class=\"comment\"> * that describe the type of PCI device the caller is trying to find.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Obvious fact: You do not have a reference to any device that might be found</span>", 
"<span class=\"comment\"> * by this function, so if that device is removed from the system right after</span>", 
"<span class=\"comment\"> * this function is finished, the value will be stale.  Use this function to</span>", 
"<span class=\"comment\"> * find devices that are usually built into a system, or for a general hint as</span>", 
"<span class=\"comment\"> * to if another device happens to be present at this specific moment in time.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_dev_present\">pci_dev_present</a>(const struct <a class=\"id\" href=\"#pci_device_id\">pci_device_id</a> *<a class=\"id\" href=\"#ids\">ids</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#vendor\">vendor</a> || <a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#subvendor\">subvendor</a> || <a class=\"id\" href=\"#ids\">ids</a>-><a class=\"id\" href=\"#class_mask\">class_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#pci_get_dev_by_id\">pci_get_dev_by_id</a>(<a class=\"id\" href=\"#ids\">ids</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ids\">ids</a>++;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_dev_present\">pci_dev_present</a>);", 
"", 
"<span class=\"comment\">/* For boot time work */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_find_bus\">pci_find_bus</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_find_next_bus\">pci_find_next_bus</a>);", 
"<span class=\"comment\">/* For everyone */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_get_device\">pci_get_device</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_get_subsys\">pci_get_subsys</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_get_slot\">pci_get_slot</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_get_class\">pci_get_class</a>);", 
];
xr_frag_insert('l/7d/25661901500e93e5888266d83cccc85d4909e5.xr', __xr_tmp);
