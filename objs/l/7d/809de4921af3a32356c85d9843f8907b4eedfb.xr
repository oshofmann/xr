var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A generic kernel FIFO implementation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2009/2010 Stefani Seibold &lt;stefani@seibold.net&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_KFIFO_H\">_LINUX_KFIFO_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_KFIFO_H\">_LINUX_KFIFO_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * How to porting drivers to the new generic FIFO API:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - Modify the declaration of the \"struct kfifo *\" object into a</span>", 
"<span class=\"comment\"> *   in-place \"struct kfifo\" object</span>", 
"<span class=\"comment\"> * - Init the in-place object with kfifo_alloc() or kfifo_init()</span>", 
"<span class=\"comment\"> *   Note: The address of the in-place \"struct kfifo\" object must be</span>", 
"<span class=\"comment\"> *   passed as the first argument to this functions</span>", 
"<span class=\"comment\"> * - Replace the use of __kfifo_put into kfifo_in and __kfifo_get</span>", 
"<span class=\"comment\"> *   into kfifo_out</span>", 
"<span class=\"comment\"> * - Replace the use of kfifo_put into kfifo_in_spinlocked and kfifo_get</span>", 
"<span class=\"comment\"> *   into kfifo_out_spinlocked</span>", 
"<span class=\"comment\"> *   Note: the spinlock pointer formerly passed to kfifo_init/kfifo_alloc</span>", 
"<span class=\"comment\"> *   must be passed now to the kfifo_in_spinlocked and kfifo_out_spinlocked</span>", 
"<span class=\"comment\"> *   as the last parameter</span>", 
"<span class=\"comment\"> * - The formerly __kfifo_* functions are renamed into kfifo_*</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note about locking : There is no locking required until only * one reader</span>", 
"<span class=\"comment\"> * and one writer is using the fifo and no kfifo_reset() will be * called</span>", 
"<span class=\"comment\"> *  kfifo_reset_out() can be safely used, until it will be only called</span>", 
"<span class=\"comment\"> * in the reader thread.</span>", 
"<span class=\"comment\"> *  For multiple writer and one reader there is only a need to lock the writer.</span>", 
"<span class=\"comment\"> * And vice versa for only one writer and multiple reader there is only a need</span>", 
"<span class=\"comment\"> * to lock the reader.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> {", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#in\">in</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#esize\">esize</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__STRUCT_KFIFO_COMMON\">__STRUCT_KFIFO_COMMON</a>(<a class=\"id\" href=\"#datatype\">datatype</a>, <a class=\"id\" href=\"#recsize\">recsize</a>, <a class=\"id\" href=\"#ptrtype\">ptrtype</a>) \\", 
"<span class=\"ts\"/>union { \\", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#datatype\">datatype</a><span class=\"ts\"/>*<a class=\"id\" href=\"#type\">type</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#rectype\">rectype</a>)[<a class=\"id\" href=\"#recsize\">recsize</a>]; \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptrtype\">ptrtype</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#ptrtype\">ptrtype</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ptr_const\">ptr_const</a>; \\", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__STRUCT_KFIFO\">__STRUCT_KFIFO</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#recsize\">recsize</a>, <a class=\"id\" href=\"#ptrtype\">ptrtype</a>) \\", 
"{ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__STRUCT_KFIFO_COMMON\">__STRUCT_KFIFO_COMMON</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#recsize\">recsize</a>, <a class=\"id\" href=\"#ptrtype\">ptrtype</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[((<a class=\"id\" href=\"#size\">size</a> &lt; 2) || (<a class=\"id\" href=\"#size\">size</a> &amp; (<a class=\"id\" href=\"#size\">size</a> - 1))) ? -1 : <a class=\"id\" href=\"#size\">size</a>]; \\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STRUCT_KFIFO\">STRUCT_KFIFO</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#size\">size</a>) \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__STRUCT_KFIFO\">__STRUCT_KFIFO</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#size\">size</a>, 0, <a class=\"id\" href=\"#type\">type</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__STRUCT_KFIFO_PTR\">__STRUCT_KFIFO_PTR</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#recsize\">recsize</a>, <a class=\"id\" href=\"#ptrtype\">ptrtype</a>) \\", 
"{ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__STRUCT_KFIFO_COMMON\">__STRUCT_KFIFO_COMMON</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#recsize\">recsize</a>, <a class=\"id\" href=\"#ptrtype\">ptrtype</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0]; \\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STRUCT_KFIFO_PTR\">STRUCT_KFIFO_PTR</a>(<a class=\"id\" href=\"#type\">type</a>) \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__STRUCT_KFIFO_PTR\">__STRUCT_KFIFO_PTR</a>(<a class=\"id\" href=\"#type\">type</a>, 0, <a class=\"id\" href=\"#type\">type</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * define compatibility \"struct kfifo\" for dynamic allocated fifos</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kfifo\">kfifo</a> <a class=\"id\" href=\"#__STRUCT_KFIFO_PTR\">__STRUCT_KFIFO_PTR</a>(unsigned char, 0, void);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STRUCT_KFIFO_REC_1\">STRUCT_KFIFO_REC_1</a>(<a class=\"id\" href=\"#size\">size</a>) \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__STRUCT_KFIFO\">__STRUCT_KFIFO</a>(unsigned char, <a class=\"id\" href=\"#size\">size</a>, 1, void)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STRUCT_KFIFO_REC_2\">STRUCT_KFIFO_REC_2</a>(<a class=\"id\" href=\"#size\">size</a>) \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__STRUCT_KFIFO\">__STRUCT_KFIFO</a>(unsigned char, <a class=\"id\" href=\"#size\">size</a>, 2, void)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * define kfifo_rec types</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kfifo_rec_ptr_1\">kfifo_rec_ptr_1</a> <a class=\"id\" href=\"#__STRUCT_KFIFO_PTR\">__STRUCT_KFIFO_PTR</a>(unsigned char, 1, void);", 
"struct <a class=\"id\" href=\"#kfifo_rec_ptr_2\">kfifo_rec_ptr_2</a> <a class=\"id\" href=\"#__STRUCT_KFIFO_PTR\">__STRUCT_KFIFO_PTR</a>(unsigned char, 2, void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * helper macro to distinguish between real in place fifo where the fifo</span>", 
"<span class=\"comment\"> * array is a part of the structure and the fifo type where the array is</span>", 
"<span class=\"comment\"> * outside of the fifo structure.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#__is_kfifo_ptr\">__is_kfifo_ptr</a>(<a class=\"id\" href=\"#fifo\">fifo</a>)<span class=\"ts\"/>(sizeof(*<a class=\"id\" href=\"#fifo\">fifo</a>) == sizeof(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * DECLARE_KFIFO_PTR - macro to declare a fifo pointer object</span>", 
"<span class=\"comment\"> * @fifo: name of the declared fifo</span>", 
"<span class=\"comment\"> * @type: type of the fifo elements</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_KFIFO_PTR\">DECLARE_KFIFO_PTR</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><a class=\"id\" href=\"#STRUCT_KFIFO_PTR\">STRUCT_KFIFO_PTR</a>(<a class=\"id\" href=\"#type\">type</a>) <a class=\"id\" href=\"#fifo\">fifo</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * DECLARE_KFIFO - macro to declare a fifo object</span>", 
"<span class=\"comment\"> * @fifo: name of the declared fifo</span>", 
"<span class=\"comment\"> * @type: type of the fifo elements</span>", 
"<span class=\"comment\"> * @size: the number of elements in the fifo, this must be a power of 2</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_KFIFO\">DECLARE_KFIFO</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#size\">size</a>)<span class=\"ts\"/><a class=\"id\" href=\"#STRUCT_KFIFO\">STRUCT_KFIFO</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#size\">size</a>) <a class=\"id\" href=\"#fifo\">fifo</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * INIT_KFIFO - Initialize a fifo declared by DECLARE_KFIFO</span>", 
"<span class=\"comment\"> * @fifo: name of the declared fifo datatype</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_KFIFO\">INIT_KFIFO</a>(<a class=\"id\" href=\"#fifo\">fifo</a>) \\", 
"(void)({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(&amp;(<a class=\"id\" href=\"#fifo\">fifo</a>)) <a class=\"id\" href=\"#__tmp\">__tmp</a> = &amp;(<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#in\">in</a> = 0; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#out\">out</a> = 0; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#__is_kfifo_ptr\">__is_kfifo_ptr</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>) ? 0 : <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#buf\">buf</a>) - 1;\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#esize\">esize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#buf\">buf</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#__is_kfifo_ptr\">__is_kfifo_ptr</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>) ?  <a class=\"id\" href=\"#NULL\">NULL</a> : <a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#buf\">buf</a>; \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * DEFINE_KFIFO - macro to define and initialize a fifo</span>", 
"<span class=\"comment\"> * @fifo: name of the declared fifo datatype</span>", 
"<span class=\"comment\"> * @type: type of the fifo elements</span>", 
"<span class=\"comment\"> * @size: the number of elements in the fifo, this must be a power of 2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: the macro can be used for global and local fifo data type variables.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_KFIFO\">DEFINE_KFIFO</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#size\">size</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_KFIFO\">DECLARE_KFIFO</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#size\">size</a>) = \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#fifo\">fifo</a>)) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#in\">in</a><span class=\"ts\"/>= 0, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#out\">out</a><span class=\"ts\"/>= 0, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mask\">mask</a><span class=\"ts\"/>= <a class=\"id\" href=\"#__is_kfifo_ptr\">__is_kfifo_ptr</a>(&amp;(<a class=\"id\" href=\"#fifo\">fifo</a>)) ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  0 : \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>((<a class=\"id\" href=\"#fifo\">fifo</a>).<a class=\"id\" href=\"#buf\">buf</a>) - 1, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#esize\">esize</a><span class=\"ts\"/>= sizeof(*(<a class=\"id\" href=\"#fifo\">fifo</a>).<a class=\"id\" href=\"#buf\">buf</a>), \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/>= <a class=\"id\" href=\"#__is_kfifo_ptr\">__is_kfifo_ptr</a>(&amp;(<a class=\"id\" href=\"#fifo\">fifo</a>)) ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a> : \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#fifo\">fifo</a>).<a class=\"id\" href=\"#buf\">buf</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} \\", 
"<span class=\"ts\"/><span class=\"ts\"/>} \\", 
"<span class=\"ts\"/>}", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#__must_check\">__must_check</a>", 
"<a class=\"id\" href=\"#__kfifo_must_check_helper\">__kfifo_must_check_helper</a>(unsigned int <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_initialized - Check if the fifo is initialized</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return %true if fifo is initialized, otherwise %false.</span>", 
"<span class=\"comment\"> * Assumes the fifo was 0 before.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_initialized\">kfifo_initialized</a>(<a class=\"id\" href=\"#fifo\">fifo</a>) ((<a class=\"id\" href=\"#fifo\">fifo</a>)-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#mask\">mask</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_esize - returns the size of the element managed by the fifo</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_esize\">kfifo_esize</a>(<a class=\"id\" href=\"#fifo\">fifo</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#fifo\">fifo</a>)-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#esize\">esize</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_recsize - returns the size of the record length field</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_recsize\">kfifo_recsize</a>(<a class=\"id\" href=\"#fifo\">fifo</a>)<span class=\"ts\"/>(sizeof(*(<a class=\"id\" href=\"#fifo\">fifo</a>)-><a class=\"id\" href=\"#rectype\">rectype</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_size - returns the size of the fifo in elements</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_size\">kfifo_size</a>(<a class=\"id\" href=\"#fifo\">fifo</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#fifo\">fifo</a>)-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#mask\">mask</a> + 1)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_reset - removes the entire fifo content</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: usage of kfifo_reset() is dangerous. It should be only called when the</span>", 
"<span class=\"comment\"> * fifo is exclusived locked or when it is secured that no other thread is</span>", 
"<span class=\"comment\"> * accessing the fifo.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_reset\">kfifo_reset</a>(<a class=\"id\" href=\"#fifo\">fifo</a>) \\", 
"(void)({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#in\">in</a> = <a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#out\">out</a> = 0; \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_reset_out - skip fifo content</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: The usage of kfifo_reset_out() is safe until it will be only called</span>", 
"<span class=\"comment\"> * from the reader thread and there is only one concurrent reader. Otherwise</span>", 
"<span class=\"comment\"> * it is dangerous and must be handled in the same way as kfifo_reset().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_reset_out\">kfifo_reset_out</a>(<a class=\"id\" href=\"#fifo\">fifo</a>)<span class=\"ts\"/>\\", 
"(void)({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#in\">in</a>; \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_len - returns the number of used elements in the fifo</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_len\">kfifo_len</a>(<a class=\"id\" href=\"#fifo\">fifo</a>) \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmpl\">__tmpl</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__tmpl\">__tmpl</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#in\">in</a> - <a class=\"id\" href=\"#__tmpl\">__tmpl</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#out\">out</a>; \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_is_empty - returns true if the fifo is empty</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_is_empty\">kfifo_is_empty</a>(<a class=\"id\" href=\"#fifo\">fifo</a>) \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmpq\">__tmpq</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__tmpq\">__tmpq</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#in\">in</a> == <a class=\"id\" href=\"#__tmpq\">__tmpq</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#out\">out</a>; \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_is_full - returns true if the fifo is full</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_is_full\">kfifo_is_full</a>(<a class=\"id\" href=\"#fifo\">fifo</a>) \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmpq\">__tmpq</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfifo_len\">kfifo_len</a>(<a class=\"id\" href=\"#__tmpq\">__tmpq</a>) &gt; <a class=\"id\" href=\"#__tmpq\">__tmpq</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#mask\">mask</a>; \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_avail - returns the number of unused elements in the fifo</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_avail\">kfifo_avail</a>(<a class=\"id\" href=\"#fifo\">fifo</a>) \\", 
"<a class=\"id\" href=\"#__kfifo_must_check_helper\">__kfifo_must_check_helper</a>( \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmpq\">__tmpq</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmpq\">__tmpq</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__avail\">__avail</a> = <a class=\"id\" href=\"#kfifo_size\">kfifo_size</a>(<a class=\"id\" href=\"#__tmpq\">__tmpq</a>) - <a class=\"id\" href=\"#kfifo_len\">kfifo_len</a>(<a class=\"id\" href=\"#__tmpq\">__tmpq</a>); \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__recsize\">__recsize</a>) ? ((<a class=\"id\" href=\"#__avail\">__avail</a> <= <a class=\"id\" href=\"#__recsize\">__recsize</a>) ? 0 : \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_max_r\">__kfifo_max_r</a>(<a class=\"id\" href=\"#__avail\">__avail</a> - <a class=\"id\" href=\"#__recsize\">__recsize</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>)) : \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__avail\">__avail</a>; \\", 
"}) \\", 
")", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_skip - skip output data</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_skip\">kfifo_skip</a>(<a class=\"id\" href=\"#fifo\">fifo</a>) \\", 
"(void)({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__recsize\">__recsize</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_skip_r\">__kfifo_skip_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>); \\", 
"<span class=\"ts\"/>else \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#out\">out</a>++; \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_peek_len - gets the size of the next fifo record</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns the size of the next fifo record in number of bytes.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_peek_len\">kfifo_peek_len</a>(<a class=\"id\" href=\"#fifo\">fifo</a>) \\", 
"<a class=\"id\" href=\"#__kfifo_must_check_helper\">__kfifo_must_check_helper</a>( \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>(!<a class=\"id\" href=\"#__recsize\">__recsize</a>) ? <a class=\"id\" href=\"#kfifo_len\">kfifo_len</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>) * sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#type\">type</a>) : \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_len_r\">__kfifo_len_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>); \\", 
"}) \\", 
")", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_alloc - dynamically allocates a new fifo buffer</span>", 
"<span class=\"comment\"> * @fifo: pointer to the fifo</span>", 
"<span class=\"comment\"> * @size: the number of elements in the fifo, this must be a power of 2</span>", 
"<span class=\"comment\"> * @gfp_mask: get_free_pages mask, passed to kmalloc()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro dynamically allocates a new fifo buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The numer of elements will be rounded-up to a power of 2.</span>", 
"<span class=\"comment\"> * The fifo will be release with kfifo_free().</span>", 
"<span class=\"comment\"> * Return 0 if no error, otherwise an error code.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_alloc\">kfifo_alloc</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>) \\", 
"<a class=\"id\" href=\"#__kfifo_must_check_helper\">__kfifo_must_check_helper</a>( \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__is_kfifo_ptr\">__is_kfifo_ptr</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>) ? \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_alloc\">__kfifo_alloc</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#size\">size</a>, sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#type\">type</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>) : \\", 
"<span class=\"ts\"/>-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>; \\", 
"}) \\", 
")", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_free - frees the fifo</span>", 
"<span class=\"comment\"> * @fifo: the fifo to be freed</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_free\">kfifo_free</a>(<a class=\"id\" href=\"#fifo\">fifo</a>) \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__is_kfifo_ptr\">__is_kfifo_ptr</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>)) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_free\">__kfifo_free</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>); \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_init - initialize a fifo using a preallocated buffer</span>", 
"<span class=\"comment\"> * @fifo: the fifo to assign the buffer</span>", 
"<span class=\"comment\"> * @buffer: the preallocated buffer to be used</span>", 
"<span class=\"comment\"> * @size: the size of the internal buffer, this have to be a power of 2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro initialize a fifo using a preallocated buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The numer of elements will be rounded-up to a power of 2.</span>", 
"<span class=\"comment\"> * Return 0 if no error, otherwise an error code.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_init\">kfifo_init</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size\">size</a>) \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__is_kfifo_ptr\">__is_kfifo_ptr</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>) ? \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_init\">__kfifo_init</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size\">size</a>, sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#type\">type</a>)) : \\", 
"<span class=\"ts\"/>-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>; \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_put - put data into the fifo</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @val: the data to be added</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro copies the given value into the fifo.</span>", 
"<span class=\"comment\"> * It returns 0 if the fifo was full. Otherwise it returns the number</span>", 
"<span class=\"comment\"> * processed elements.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macro.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_put\">kfifo_put</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#val\">val</a>) \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#val\">val</a>) + 1) <a class=\"id\" href=\"#__val\">__val</a> = (<a class=\"id\" href=\"#val\">val</a>); \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__ret\">__ret</a>; \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>if (0) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#ptr_const\">ptr_const</a>) <a class=\"id\" href=\"#__dummy\">__dummy</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#unused\">unused</a>)); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dummy\">__dummy</a> = (<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__val\">__val</a>))<a class=\"id\" href=\"#NULL\">NULL</a>; \\", 
"<span class=\"ts\"/>} \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__recsize\">__recsize</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = <a class=\"id\" href=\"#__kfifo_in_r\">__kfifo_in_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__val\">__val</a>, sizeof(*<a class=\"id\" href=\"#__val\">__val</a>), \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__recsize\">__recsize</a>); \\", 
"<span class=\"ts\"/>else { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = !<a class=\"id\" href=\"#kfifo_is_full\">kfifo_is_full</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__ret\">__ret</a>) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__is_kfifo_ptr\">__is_kfifo_ptr</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>) ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#type\">type</a>))<a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#data\">data</a>) : \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#buf\">buf</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>)[<a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#in\">in</a> &amp; <a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#mask\">mask</a>] = \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#type\">type</a>))<a class=\"id\" href=\"#__val\">__val</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>(); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#in\">in</a>++; \\", 
"<span class=\"ts\"/><span class=\"ts\"/>} \\", 
"<span class=\"ts\"/>} \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>; \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_get - get data from the fifo</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @val: the var where to store the data to be added</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro reads the data from the fifo.</span>", 
"<span class=\"comment\"> * It returns 0 if the fifo was empty. Otherwise it returns the number</span>", 
"<span class=\"comment\"> * processed elements.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macro.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_get\">kfifo_get</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#val\">val</a>) \\", 
"<a class=\"id\" href=\"#__kfifo_must_check_helper\">__kfifo_must_check_helper</a>( \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#val\">val</a>) + 1) <a class=\"id\" href=\"#__val\">__val</a> = (<a class=\"id\" href=\"#val\">val</a>); \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__ret\">__ret</a>; \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>if (0) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__val\">__val</a> = (<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#ptr\">ptr</a>))0; \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__recsize\">__recsize</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = <a class=\"id\" href=\"#__kfifo_out_r\">__kfifo_out_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__val\">__val</a>, sizeof(*<a class=\"id\" href=\"#__val\">__val</a>), \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__recsize\">__recsize</a>); \\", 
"<span class=\"ts\"/>else { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = !<a class=\"id\" href=\"#kfifo_is_empty\">kfifo_is_empty</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__ret\">__ret</a>) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#type\">type</a>))<a class=\"id\" href=\"#__val\">__val</a> = \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__is_kfifo_ptr\">__is_kfifo_ptr</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>) ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#type\">type</a>))<a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#data\">data</a>) : \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#buf\">buf</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>)[<a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#out\">out</a> &amp; <a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#mask\">mask</a>]; \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>(); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#out\">out</a>++; \\", 
"<span class=\"ts\"/><span class=\"ts\"/>} \\", 
"<span class=\"ts\"/>} \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>; \\", 
"}) \\", 
")", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_peek - get data from the fifo without removing</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @val: the var where to store the data to be added</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This reads the data from the fifo without removing it from the fifo.</span>", 
"<span class=\"comment\"> * It returns 0 if the fifo was empty. Otherwise it returns the number</span>", 
"<span class=\"comment\"> * processed elements.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macro.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_peek\">kfifo_peek</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#val\">val</a>) \\", 
"<a class=\"id\" href=\"#__kfifo_must_check_helper\">__kfifo_must_check_helper</a>( \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#val\">val</a>) + 1) <a class=\"id\" href=\"#__val\">__val</a> = (<a class=\"id\" href=\"#val\">val</a>); \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__ret\">__ret</a>; \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>if (0) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__val\">__val</a> = (<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#ptr\">ptr</a>))<a class=\"id\" href=\"#NULL\">NULL</a>; \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__recsize\">__recsize</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = <a class=\"id\" href=\"#__kfifo_out_peek_r\">__kfifo_out_peek_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__val\">__val</a>, sizeof(*<a class=\"id\" href=\"#__val\">__val</a>), \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__recsize\">__recsize</a>); \\", 
"<span class=\"ts\"/>else { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = !<a class=\"id\" href=\"#kfifo_is_empty\">kfifo_is_empty</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__ret\">__ret</a>) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#type\">type</a>))<a class=\"id\" href=\"#__val\">__val</a> = \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__is_kfifo_ptr\">__is_kfifo_ptr</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>) ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#type\">type</a>))<a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#data\">data</a>) : \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#buf\">buf</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>)[<a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#out\">out</a> &amp; <a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>.<a class=\"id\" href=\"#mask\">mask</a>]; \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>(); \\", 
"<span class=\"ts\"/><span class=\"ts\"/>} \\", 
"<span class=\"ts\"/>} \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>; \\", 
"}) \\", 
")", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_in - put data into the fifo</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @buf: the data to be added</span>", 
"<span class=\"comment\"> * @n: number of elements to be added</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro copies the given buffer into the fifo and returns the</span>", 
"<span class=\"comment\"> * number of copied elements.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macro.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_in\">kfifo_in</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>) \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#buf\">buf</a>) + 1) <a class=\"id\" href=\"#__buf\">__buf</a> = (<a class=\"id\" href=\"#buf\">buf</a>); \\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__n\">__n</a> = (<a class=\"id\" href=\"#n\">n</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>if (0) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#ptr_const\">ptr_const</a>) <a class=\"id\" href=\"#__dummy\">__dummy</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#unused\">unused</a>)); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dummy\">__dummy</a> = (<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__buf\">__buf</a>))<a class=\"id\" href=\"#NULL\">NULL</a>; \\", 
"<span class=\"ts\"/>} \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__recsize\">__recsize</a>) ?\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_in_r\">__kfifo_in_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__buf\">__buf</a>, <a class=\"id\" href=\"#__n\">__n</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>) : \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_in\">__kfifo_in</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__buf\">__buf</a>, <a class=\"id\" href=\"#__n\">__n</a>); \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_in_spinlocked - put data into the fifo using a spinlock for locking</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @buf: the data to be added</span>", 
"<span class=\"comment\"> * @n: number of elements to be added</span>", 
"<span class=\"comment\"> * @lock: pointer to the spinlock to use for locking</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro copies the given values buffer into the fifo and returns the</span>", 
"<span class=\"comment\"> * number of copied elements.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_in_spinlocked\">kfifo_in_spinlocked</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#lock\">lock</a>) \\", 
"({ \\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__flags\">__flags</a>; \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__ret\">__ret</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#__flags\">__flags</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = <a class=\"id\" href=\"#kfifo_in\">kfifo_in</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#__flags\">__flags</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>; \\", 
"})", 
"", 
"<span class=\"comment\">/* alias for kfifo_in_spinlocked, will be removed in a future release */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_in_locked\">kfifo_in_locked</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#lock\">lock</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_in_spinlocked\">kfifo_in_spinlocked</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#lock\">lock</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_out - get data from the fifo</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @buf: pointer to the storage buffer</span>", 
"<span class=\"comment\"> * @n: max. number of elements to get</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro get some data from the fifo and return the numbers of elements</span>", 
"<span class=\"comment\"> * copied.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macro.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_out\">kfifo_out</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>) \\", 
"<a class=\"id\" href=\"#__kfifo_must_check_helper\">__kfifo_must_check_helper</a>( \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#buf\">buf</a>) + 1) <a class=\"id\" href=\"#__buf\">__buf</a> = (<a class=\"id\" href=\"#buf\">buf</a>); \\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__n\">__n</a> = (<a class=\"id\" href=\"#n\">n</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>if (0) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#ptr\">ptr</a>) <a class=\"id\" href=\"#__dummy\">__dummy</a> = <a class=\"id\" href=\"#NULL\">NULL</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__buf\">__buf</a> = <a class=\"id\" href=\"#__dummy\">__dummy</a>; \\", 
"<span class=\"ts\"/>} \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__recsize\">__recsize</a>) ?\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_out_r\">__kfifo_out_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__buf\">__buf</a>, <a class=\"id\" href=\"#__n\">__n</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>) : \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_out\">__kfifo_out</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__buf\">__buf</a>, <a class=\"id\" href=\"#__n\">__n</a>); \\", 
"}) \\", 
")", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_out_spinlocked - get data from the fifo using a spinlock for locking</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @buf: pointer to the storage buffer</span>", 
"<span class=\"comment\"> * @n: max. number of elements to get</span>", 
"<span class=\"comment\"> * @lock: pointer to the spinlock to use for locking</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro get the data from the fifo and return the numbers of elements</span>", 
"<span class=\"comment\"> * copied.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_out_spinlocked\">kfifo_out_spinlocked</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#lock\">lock</a>) \\", 
"<a class=\"id\" href=\"#__kfifo_must_check_helper\">__kfifo_must_check_helper</a>( \\", 
"({ \\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__flags\">__flags</a>; \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__ret\">__ret</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#__flags\">__flags</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = <a class=\"id\" href=\"#kfifo_out\">kfifo_out</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#__flags\">__flags</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>; \\", 
"}) \\", 
")", 
"", 
"<span class=\"comment\">/* alias for kfifo_out_spinlocked, will be removed in a future release */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_out_locked\">kfifo_out_locked</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#lock\">lock</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_out_spinlocked\">kfifo_out_spinlocked</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#lock\">lock</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_from_user - puts some data from user space into the fifo</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @from: pointer to the data to be added</span>", 
"<span class=\"comment\"> * @len: the length of the data to be added</span>", 
"<span class=\"comment\"> * @copied: pointer to output variable to store the number of copied bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro copies at most @len bytes from the @from into the</span>", 
"<span class=\"comment\"> * fifo, depending of the available space and returns -EFAULT/0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macro.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_from_user\">kfifo_from_user</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>) \\", 
"<a class=\"id\" href=\"#__kfifo_must_check_helper\">__kfifo_must_check_helper</a>( \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#__from\">__from</a> = (<a class=\"id\" href=\"#from\">from</a>); \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__len\">__len</a> = (<a class=\"id\" href=\"#len\">len</a>); \\", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#__copied\">__copied</a> = (<a class=\"id\" href=\"#copied\">copied</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__recsize\">__recsize</a>) ? \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_from_user_r\">__kfifo_from_user_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__from\">__from</a>, <a class=\"id\" href=\"#__len\">__len</a>,  <a class=\"id\" href=\"#__copied\">__copied</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>) : \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_from_user\">__kfifo_from_user</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__from\">__from</a>, <a class=\"id\" href=\"#__len\">__len</a>, <a class=\"id\" href=\"#__copied\">__copied</a>); \\", 
"}) \\", 
")", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_to_user - copies data from the fifo into user space</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @to: where the data must be copied</span>", 
"<span class=\"comment\"> * @len: the size of the destination buffer</span>", 
"<span class=\"comment\"> * @copied: pointer to output variable to store the number of copied bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro copies at most @len bytes from the fifo into the</span>", 
"<span class=\"comment\"> * @to buffer and returns -EFAULT/0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macro.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_to_user\">kfifo_to_user</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>) \\", 
"<a class=\"id\" href=\"#__kfifo_must_check_helper\">__kfifo_must_check_helper</a>( \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#__to\">__to</a> = (<a class=\"id\" href=\"#to\">to</a>); \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__len\">__len</a> = (<a class=\"id\" href=\"#len\">len</a>); \\", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#__copied\">__copied</a> = (<a class=\"id\" href=\"#copied\">copied</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__recsize\">__recsize</a>) ? \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_to_user_r\">__kfifo_to_user_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__to\">__to</a>, <a class=\"id\" href=\"#__len\">__len</a>, <a class=\"id\" href=\"#__copied\">__copied</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>) : \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_to_user\">__kfifo_to_user</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__to\">__to</a>, <a class=\"id\" href=\"#__len\">__len</a>, <a class=\"id\" href=\"#__copied\">__copied</a>); \\", 
"}) \\", 
")", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_dma_in_prepare - setup a scatterlist for DMA input</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @sgl: pointer to the scatterlist array</span>", 
"<span class=\"comment\"> * @nents: number of entries in the scatterlist array</span>", 
"<span class=\"comment\"> * @len: number of elements to transfer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro fills a scatterlist for DMA input.</span>", 
"<span class=\"comment\"> * It returns the number entries in the scatterlist array.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macros.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_dma_in_prepare\">kfifo_dma_in_prepare</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#len\">len</a>) \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#__sgl\">__sgl</a> = (<a class=\"id\" href=\"#sgl\">sgl</a>); \\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__nents\">__nents</a> = (<a class=\"id\" href=\"#nents\">nents</a>); \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__len\">__len</a> = (<a class=\"id\" href=\"#len\">len</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__recsize\">__recsize</a>) ? \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_dma_in_prepare_r\">__kfifo_dma_in_prepare_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__sgl\">__sgl</a>, <a class=\"id\" href=\"#__nents\">__nents</a>, <a class=\"id\" href=\"#__len\">__len</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>) : \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_dma_in_prepare\">__kfifo_dma_in_prepare</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__sgl\">__sgl</a>, <a class=\"id\" href=\"#__nents\">__nents</a>, <a class=\"id\" href=\"#__len\">__len</a>); \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_dma_in_finish - finish a DMA IN operation</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @len: number of bytes to received</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro finish a DMA IN operation. The in counter will be updated by</span>", 
"<span class=\"comment\"> * the len parameter. No error checking will be done.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macros.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_dma_in_finish\">kfifo_dma_in_finish</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#len\">len</a>) \\", 
"(void)({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__len\">__len</a> = (<a class=\"id\" href=\"#len\">len</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__recsize\">__recsize</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_dma_in_finish_r\">__kfifo_dma_in_finish_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__len\">__len</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>); \\", 
"<span class=\"ts\"/>else \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#in\">in</a> += <a class=\"id\" href=\"#__len\">__len</a> / sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#type\">type</a>); \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_dma_out_prepare - setup a scatterlist for DMA output</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @sgl: pointer to the scatterlist array</span>", 
"<span class=\"comment\"> * @nents: number of entries in the scatterlist array</span>", 
"<span class=\"comment\"> * @len: number of elements to transfer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro fills a scatterlist for DMA output which at most @len bytes</span>", 
"<span class=\"comment\"> * to transfer.</span>", 
"<span class=\"comment\"> * It returns the number entries in the scatterlist array.</span>", 
"<span class=\"comment\"> * A zero means there is no space available and the scatterlist is not filled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macros.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_dma_out_prepare\">kfifo_dma_out_prepare</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#len\">len</a>) \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>);  \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#__sgl\">__sgl</a> = (<a class=\"id\" href=\"#sgl\">sgl</a>); \\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__nents\">__nents</a> = (<a class=\"id\" href=\"#nents\">nents</a>); \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__len\">__len</a> = (<a class=\"id\" href=\"#len\">len</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__recsize\">__recsize</a>) ? \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_dma_out_prepare_r\">__kfifo_dma_out_prepare_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__sgl\">__sgl</a>, <a class=\"id\" href=\"#__nents\">__nents</a>, <a class=\"id\" href=\"#__len\">__len</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>) : \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_dma_out_prepare\">__kfifo_dma_out_prepare</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__sgl\">__sgl</a>, <a class=\"id\" href=\"#__nents\">__nents</a>, <a class=\"id\" href=\"#__len\">__len</a>); \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_dma_out_finish - finish a DMA OUT operation</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @len: number of bytes transferd</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro finish a DMA OUT operation. The out counter will be updated by</span>", 
"<span class=\"comment\"> * the len parameter. No error checking will be done.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macros.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kfifo_dma_out_finish\">kfifo_dma_out_finish</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#len\">len</a>) \\", 
"(void)({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#__len\">__len</a> = (<a class=\"id\" href=\"#len\">len</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__recsize\">__recsize</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_dma_out_finish_r\">__kfifo_dma_out_finish_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>); \\", 
"<span class=\"ts\"/>else \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfifo\">__kfifo</a>-><a class=\"id\" href=\"#out\">out</a> += <a class=\"id\" href=\"#__len\">__len</a> / sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#type\">type</a>); \\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kfifo_out_peek - gets some data from the fifo</span>", 
"<span class=\"comment\"> * @fifo: address of the fifo to be used</span>", 
"<span class=\"comment\"> * @buf: pointer to the storage buffer</span>", 
"<span class=\"comment\"> * @n: max. number of elements to get</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro get the data from the fifo and return the numbers of elements</span>", 
"<span class=\"comment\"> * copied. The data is not removed from the fifo.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that with only one concurrent reader and one concurrent</span>", 
"<span class=\"comment\"> * writer, you don't need extra locking to use these macro.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kfifo_out_peek\">kfifo_out_peek</a>(<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#n\">n</a>) \\", 
"<a class=\"id\" href=\"#__kfifo_must_check_helper\">__kfifo_must_check_helper</a>( \\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#fifo\">fifo</a>) + 1) <a class=\"id\" href=\"#__tmp\">__tmp</a> = (<a class=\"id\" href=\"#fifo\">fifo</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#buf\">buf</a>) + 1) <a class=\"id\" href=\"#__buf\">__buf</a> = (<a class=\"id\" href=\"#buf\">buf</a>); \\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__n\">__n</a> = (<a class=\"id\" href=\"#n\">n</a>); \\", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#__recsize\">__recsize</a> = sizeof(*<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#rectype\">rectype</a>); \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#__kfifo\">__kfifo</a> = &amp;<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#kfifo\">kfifo</a>; \\", 
"<span class=\"ts\"/>if (0) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#__tmp\">__tmp</a>-><a class=\"id\" href=\"#ptr\">ptr</a>) <a class=\"id\" href=\"#__dummy\">__dummy</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#unused\">unused</a>)) = <a class=\"id\" href=\"#NULL\">NULL</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__buf\">__buf</a> = <a class=\"id\" href=\"#__dummy\">__dummy</a>; \\", 
"<span class=\"ts\"/>} \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__recsize\">__recsize</a>) ? \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_out_peek_r\">__kfifo_out_peek_r</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__buf\">__buf</a>, <a class=\"id\" href=\"#__n\">__n</a>, <a class=\"id\" href=\"#__recsize\">__recsize</a>) : \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfifo_out_peek\">__kfifo_out_peek</a>(<a class=\"id\" href=\"#__kfifo\">__kfifo</a>, <a class=\"id\" href=\"#__buf\">__buf</a>, <a class=\"id\" href=\"#__n\">__n</a>); \\", 
"}) \\", 
")", 
"", 
"extern int <a class=\"id\" href=\"#__kfifo_alloc\">__kfifo_alloc</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#esize\">esize</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"extern void <a class=\"id\" href=\"#__kfifo_free\">__kfifo_free</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>);", 
"", 
"extern int <a class=\"id\" href=\"#__kfifo_init\">__kfifo_init</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>, void *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#esize\">esize</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_in\">__kfifo_in</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>const void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_out\">__kfifo_out</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"extern int <a class=\"id\" href=\"#__kfifo_from_user\">__kfifo_from_user</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#from\">from</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>, unsigned int *<a class=\"id\" href=\"#copied\">copied</a>);", 
"", 
"extern int <a class=\"id\" href=\"#__kfifo_to_user\">__kfifo_to_user</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#to\">to</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>, unsigned int *<a class=\"id\" href=\"#copied\">copied</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_dma_in_prepare\">__kfifo_dma_in_prepare</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, int <a class=\"id\" href=\"#nents\">nents</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_dma_out_prepare\">__kfifo_dma_out_prepare</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, int <a class=\"id\" href=\"#nents\">nents</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_out_peek\">__kfifo_out_peek</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_in_r\">__kfifo_in_r</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>const void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_out_r\">__kfifo_out_r</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"extern int <a class=\"id\" href=\"#__kfifo_from_user_r\">__kfifo_from_user_r</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#from\">from</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>, unsigned int *<a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"extern int <a class=\"id\" href=\"#__kfifo_to_user_r\">__kfifo_to_user_r</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#len\">len</a>, unsigned int *<a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_dma_in_prepare_r\">__kfifo_dma_in_prepare_r</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, int <a class=\"id\" href=\"#nents\">nents</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"extern void <a class=\"id\" href=\"#__kfifo_dma_in_finish_r\">__kfifo_dma_in_finish_r</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_dma_out_prepare_r\">__kfifo_dma_out_prepare_r</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, int <a class=\"id\" href=\"#nents\">nents</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"extern void <a class=\"id\" href=\"#__kfifo_dma_out_finish_r\">__kfifo_dma_out_finish_r</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_len_r\">__kfifo_len_r</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"extern void <a class=\"id\" href=\"#__kfifo_skip_r\">__kfifo_skip_r</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_out_peek_r\">__kfifo_out_peek_r</a>(struct <a class=\"id\" href=\"#__kfifo\">__kfifo</a> *<a class=\"id\" href=\"#fifo\">fifo</a>,", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#__kfifo_max_r\">__kfifo_max_r</a>(unsigned int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#recsize\">recsize</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/7d/809de4921af3a32356c85d9843f8907b4eedfb.xr', __xr_tmp);
