var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Exceptions for specific devices. Usually work-arounds for fatal design flaws.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pci_x86\">pci_x86</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#pci_fixup_i450nx\">pci_fixup_i450nx</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i450NX -- Find and scan all secondary buses on all PXB's.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pxb\">pxb</a>, <a class=\"id\" href=\"#reg\">reg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#busno\">busno</a>, <a class=\"id\" href=\"#suba\">suba</a>, <a class=\"id\" href=\"#subb\">subb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Searching for i450NX host bridges\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> = 0xd0;", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#pxb\">pxb</a> = 0; <a class=\"id\" href=\"#pxb\">pxb</a> &lt; 2; <a class=\"id\" href=\"#pxb\">pxb</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#reg\">reg</a>++, &amp;<a class=\"id\" href=\"#busno\">busno</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#reg\">reg</a>++, &amp;<a class=\"id\" href=\"#suba\">suba</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#reg\">reg</a>++, &amp;<a class=\"id\" href=\"#subb\">subb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"i450NX PXB %d: %02x/%02x/%02x\\n\", <a class=\"id\" href=\"#pxb\">pxb</a>, <a class=\"id\" href=\"#busno\">busno</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#suba\">suba</a>, <a class=\"id\" href=\"#subb\">subb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#busno\">busno</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_scan_bus_with_sysdata\">pci_scan_bus_with_sysdata</a>(<a class=\"id\" href=\"#busno\">busno</a>);<span class=\"ts\"/><span class=\"comment\">/* Bus A */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#suba\">suba</a> &lt; <a class=\"id\" href=\"#subb\">subb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_scan_bus_with_sysdata\">pci_scan_bus_with_sysdata</a>(<a class=\"id\" href=\"#suba\">suba</a>+1);<span class=\"ts\"/><span class=\"comment\">/* Bus B */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_last_bus\">pcibios_last_bus</a> = -1;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82451NX\">PCI_DEVICE_ID_INTEL_82451NX</a>, <a class=\"id\" href=\"#pci_fixup_i450nx\">pci_fixup_i450nx</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#pci_fixup_i450gx\">pci_fixup_i450gx</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i450GX and i450KX -- Find and scan all secondary buses.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (called separately for each PCI bridge found)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#busno\">busno</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#d\">d</a>, 0x4a, &amp;<a class=\"id\" href=\"#busno\">busno</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"i440KX/GX host bridge; secondary bus %02x\\n\", <a class=\"id\" href=\"#busno\">busno</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_scan_bus_with_sysdata\">pci_scan_bus_with_sysdata</a>(<a class=\"id\" href=\"#busno\">busno</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_last_bus\">pcibios_last_bus</a> = -1;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82454GX\">PCI_DEVICE_ID_INTEL_82454GX</a>, <a class=\"id\" href=\"#pci_fixup_i450gx\">pci_fixup_i450gx</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a>  <a class=\"id\" href=\"#pci_fixup_umc_ide\">pci_fixup_umc_ide</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * UM8886BF IDE controller sets region type bits incorrectly,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * therefore they look like memory despite of them being I/O.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Fixing base address flags\\n\");", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PCI_BASE_ADDRESS_SPACE_IO\">PCI_BASE_ADDRESS_SPACE_IO</a>;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_UMC\">PCI_VENDOR_ID_UMC</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_UMC_UM8886BF\">PCI_DEVICE_ID_UMC_UM8886BF</a>, <a class=\"id\" href=\"#pci_fixup_umc_ide\">pci_fixup_umc_ide</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a>  <a class=\"id\" href=\"#pci_fixup_ncr53c810\">pci_fixup_ncr53c810</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NCR 53C810 returns class code 0 (at least on some systems).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fix class to be PCI_CLASS_STORAGE_SCSI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#class\">class</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Fixing NCR 53C810 class code\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#PCI_CLASS_STORAGE_SCSI\">PCI_CLASS_STORAGE_SCSI</a> << 8;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NCR\">PCI_VENDOR_ID_NCR</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_NCR_53C810\">PCI_DEVICE_ID_NCR_53C810</a>, <a class=\"id\" href=\"#pci_fixup_ncr53c810\">pci_fixup_ncr53c810</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a>  <a class=\"id\" href=\"#pci_fixup_latency\">pci_fixup_latency</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  SiS 5597 and 5598 chipsets require latency timer set to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  at most 32 to avoid lockups.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Setting max latency to 32\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_max_latency\">pcibios_max_latency</a> = 32;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SI\">PCI_VENDOR_ID_SI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_SI_5597\">PCI_DEVICE_ID_SI_5597</a>, <a class=\"id\" href=\"#pci_fixup_latency\">pci_fixup_latency</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SI\">PCI_VENDOR_ID_SI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_SI_5598\">PCI_DEVICE_ID_SI_5598</a>, <a class=\"id\" href=\"#pci_fixup_latency\">pci_fixup_latency</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#pci_fixup_piix4_acpi\">pci_fixup_piix4_acpi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PIIX4 ACPI device: hardwired IRQ9</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#irq\">irq</a> = 9;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82371AB_3\">PCI_DEVICE_ID_INTEL_82371AB_3</a>, <a class=\"id\" href=\"#pci_fixup_piix4_acpi\">pci_fixup_piix4_acpi</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Addresses issues with problems in the memory write queue timer in</span>", 
"<span class=\"comment\"> * certain VIA Northbridges.  This bugfix is per VIA's specifications,</span>", 
"<span class=\"comment\"> * except for the KL133/KM133: clearing bit 5 on those Northbridges seems</span>", 
"<span class=\"comment\"> * to trigger a bug in its integrated ProSavage video card, which</span>", 
"<span class=\"comment\"> * causes screen corruption.  We only clear bits 6 and 7 for that chipset,</span>", 
"<span class=\"comment\"> * until VIA can provide us with definitive information on why screen</span>", 
"<span class=\"comment\"> * corruption occurs, and what exactly those bits do.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * VIA 8363,8622,8361 Northbridges:</span>", 
"<span class=\"comment\"> *  - bits  5, 6, 7 at offset 0x55 need to be turned off</span>", 
"<span class=\"comment\"> * VIA 8367 (KT266x) Northbridges:</span>", 
"<span class=\"comment\"> *  - bits  5, 6, 7 at offset 0x95 need to be turned off</span>", 
"<span class=\"comment\"> * VIA 8363 rev 0x81/0x84 (KL133/KM133) Northbridges:</span>", 
"<span class=\"comment\"> *  - bits     6, 7 at offset 0x55 need to be turned off</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIA_8363_KL133_REVISION_ID\">VIA_8363_KL133_REVISION_ID</a> 0x81", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIA_8363_KM133_REVISION_ID\">VIA_8363_KM133_REVISION_ID</a> 0x84", 
"", 
"static void <a class=\"id\" href=\"#pci_fixup_via_northbridge_bug\">pci_fixup_via_northbridge_bug</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#where\">where</a> = 0x55;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mask\">mask</a> = 0x1f; <span class=\"comment\">/* clear bits 5, 6, 7 by default */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8367_0\">PCI_DEVICE_ID_VIA_8367_0</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fix pci bus latency issues resulted by NB bios error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   it appears on bug free^Wreduced kt266x's bios forces</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   NB latency to zero */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#PCI_LATENCY_TIMER\">PCI_LATENCY_TIMER</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#where\">where</a> = 0x95; <span class=\"comment\">/* the memory write queue timer register is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>different for the KT266x's: 0x95 not 0x55 */</span>", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8363_0\">PCI_DEVICE_ID_VIA_8363_0</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#revision\">revision</a> == <a class=\"id\" href=\"#VIA_8363_KL133_REVISION_ID\">VIA_8363_KL133_REVISION_ID</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#revision\">revision</a> == <a class=\"id\" href=\"#VIA_8363_KM133_REVISION_ID\">VIA_8363_KM133_REVISION_ID</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = 0x3f; <span class=\"comment\">/* clear only bits 6 and 7; clearing bit 5</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>causes screen corruption on the KL133/KM133 */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#where\">where</a>, &amp;<a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> &amp; ~<a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Disabling VIA memory write queue (PCI ID %04x, rev %02x): [%02x] %02x & %02x -> %02x\\n\", \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#revision\">revision</a>, <a class=\"id\" href=\"#where\">where</a>, <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#v\">v</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> &= <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#where\">where</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8363_0\">PCI_DEVICE_ID_VIA_8363_0</a>, <a class=\"id\" href=\"#pci_fixup_via_northbridge_bug\">pci_fixup_via_northbridge_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8622\">PCI_DEVICE_ID_VIA_8622</a>, <a class=\"id\" href=\"#pci_fixup_via_northbridge_bug\">pci_fixup_via_northbridge_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8361\">PCI_DEVICE_ID_VIA_8361</a>, <a class=\"id\" href=\"#pci_fixup_via_northbridge_bug\">pci_fixup_via_northbridge_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8367_0\">PCI_DEVICE_ID_VIA_8367_0</a>, <a class=\"id\" href=\"#pci_fixup_via_northbridge_bug\">pci_fixup_via_northbridge_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8363_0\">PCI_DEVICE_ID_VIA_8363_0</a>, <a class=\"id\" href=\"#pci_fixup_via_northbridge_bug\">pci_fixup_via_northbridge_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8622\">PCI_DEVICE_ID_VIA_8622</a>, <a class=\"id\" href=\"#pci_fixup_via_northbridge_bug\">pci_fixup_via_northbridge_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8361\">PCI_DEVICE_ID_VIA_8361</a>, <a class=\"id\" href=\"#pci_fixup_via_northbridge_bug\">pci_fixup_via_northbridge_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8367_0\">PCI_DEVICE_ID_VIA_8367_0</a>, <a class=\"id\" href=\"#pci_fixup_via_northbridge_bug\">pci_fixup_via_northbridge_bug</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For some reasons Intel decided that certain parts of their</span>", 
"<span class=\"comment\"> * 815, 845 and some other chipsets must look like PCI-to-PCI bridges</span>", 
"<span class=\"comment\"> * while they are obviously not. The 82801 family (AA, AB, BAM/CAM,</span>", 
"<span class=\"comment\"> * BA/CA/DB and E) PCI bridges are actually HUB-to-PCI ones, according</span>", 
"<span class=\"comment\"> * to Intel terminology. These devices do forward all addresses from</span>", 
"<span class=\"comment\"> * system to PCI bus no matter what are their window settings, so they are</span>", 
"<span class=\"comment\"> * \"transparent\" (or subtractive decoding) from programmers point of view.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#pci_fixup_transparent_bridge\">pci_fixup_transparent_bridge</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) == <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_PCI\">PCI_CLASS_BRIDGE_PCI</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a> &amp; 0xff00) == 0x2400)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#transparent\">transparent</a> = 1;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#pci_fixup_transparent_bridge\">pci_fixup_transparent_bridge</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fixup for C1 Halt Disconnect problem on nForce2 systems.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * From information provided by \"Allen Martin\" &lt;AMartin@nvidia.com&gt;:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A hang is caused when the CPU generates a very fast CONNECT/HALT cycle</span>", 
"<span class=\"comment\"> * sequence.  Workaround is to set the SYSTEM_IDLE_TIMEOUT to 80 ns.</span>", 
"<span class=\"comment\"> * This allows the state-machine and timer to return to a proper state within</span>", 
"<span class=\"comment\"> * 80 ns of the CONNECT and probe appearing together.  Since the CPU will not</span>", 
"<span class=\"comment\"> * issue another HALT within 80 ns of the initial HALT, the failure condition</span>", 
"<span class=\"comment\"> * is avoided.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pci_fixup_nforce2\">pci_fixup_nforce2</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Chip  Old value   New value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * C17   0x1F0FFF01  0x1F01FF01</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * C18D  0x9F0FFF01  0x9F01FF01</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Northbridge chip version may be determined by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reading the PCI revision ID (0xC1 or greater is C18D).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x6c, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Apply fixup if needed, but don't touch disconnect state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#val\">val</a> &amp; 0x00FF0000) != 0x00010000) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"nForce2 C1 Halt Disconnect fixup\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x6c, (<a class=\"id\" href=\"#val\">val</a> &amp; 0xFF00FFFF) | 0x00010000);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NVIDIA\">PCI_VENDOR_ID_NVIDIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_NVIDIA_NFORCE2\">PCI_DEVICE_ID_NVIDIA_NFORCE2</a>, <a class=\"id\" href=\"#pci_fixup_nforce2\">pci_fixup_nforce2</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NVIDIA\">PCI_VENDOR_ID_NVIDIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_NVIDIA_NFORCE2\">PCI_DEVICE_ID_NVIDIA_NFORCE2</a>, <a class=\"id\" href=\"#pci_fixup_nforce2\">pci_fixup_nforce2</a>);", 
"", 
"<span class=\"comment\">/* Max PCI Express root ports */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_PCIEROOT\">MAX_PCIEROOT</a><span class=\"ts\"/>6", 
"static int <a class=\"id\" href=\"#quirk_aspm_offset\">quirk_aspm_offset</a>[<a class=\"id\" href=\"#MAX_PCIEROOT\">MAX_PCIEROOT</a> << 3];", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GET_INDEX\">GET_INDEX</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>) ((((<a class=\"id\" href=\"#a\">a</a>) - <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_MCH_PA\">PCI_DEVICE_ID_INTEL_MCH_PA</a>) << 3) + ((<a class=\"id\" href=\"#b\">b</a>) &amp; 7))", 
"", 
"static int <a class=\"id\" href=\"#quirk_pcie_aspm_read\">quirk_pcie_aspm_read</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>, int <a class=\"id\" href=\"#where\">where</a>, int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#raw_pci_read\">raw_pci_read</a>(<a class=\"id\" href=\"#pci_domain_nr\">pci_domain_nr</a>(<a class=\"id\" href=\"#bus\">bus</a>), <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#number\">number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#where\">where</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Replace the original pci bus ops for write with a new one that will filter</span>", 
"<span class=\"comment\"> * the request to insure ASPM cannot be enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#quirk_pcie_aspm_write\">quirk_pcie_aspm_write</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, unsigned int <a class=\"id\" href=\"#devfn\">devfn</a>, int <a class=\"id\" href=\"#where\">where</a>, int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#quirk_aspm_offset\">quirk_aspm_offset</a>[<a class=\"id\" href=\"#GET_INDEX\">GET_INDEX</a>(<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>-><a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#devfn\">devfn</a>)];", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#offset\">offset</a>) && (<a class=\"id\" href=\"#where\">where</a> == <a class=\"id\" href=\"#offset\">offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#value\">value</a> &amp; 0xfffffffc;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#raw_pci_write\">raw_pci_write</a>(<a class=\"id\" href=\"#pci_domain_nr\">pci_domain_nr</a>(<a class=\"id\" href=\"#bus\">bus</a>), <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#number\">number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devfn\">devfn</a>, <a class=\"id\" href=\"#where\">where</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pci_ops\">pci_ops</a> <a class=\"id\" href=\"#quirk_pcie_aspm_ops\">quirk_pcie_aspm_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#quirk_pcie_aspm_read\">quirk_pcie_aspm_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#quirk_pcie_aspm_write\">quirk_pcie_aspm_write</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prevents PCI Express ASPM (Active State Power Management) being enabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Save the register offset, where the ASPM control bits are located,</span>", 
"<span class=\"comment\"> * for each PCI Express device that is in the device list of</span>", 
"<span class=\"comment\"> * the root port in an array for fast indexing. Replace the bus ops</span>", 
"<span class=\"comment\"> * with the modified one.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pcie_rootport_aspm_quirk\">pcie_rootport_aspm_quirk</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cap_base\">cap_base</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a>  *<a class=\"id\" href=\"#pbus\">pbus</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pbus\">pbus</a> = <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if the DID of pdev matches one of the six root ports. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check is needed in the case this function is called directly by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hot-plug driver.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#device\">device</a> &lt; <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_MCH_PA\">PCI_DEVICE_ID_INTEL_MCH_PA</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#device\">device</a> &gt; <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_MCH_PC1\">PCI_DEVICE_ID_INTEL_MCH_PC1</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pbus\">pbus</a>-><a class=\"id\" href=\"#devices\">devices</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If no device is attached to the root port at power-up or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * after hot-remove, the pbus-&gt;devices is empty and this code</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will set the offsets to zero and the bus ops to parent's bus</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ops, which is unmodified.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#GET_INDEX\">GET_INDEX</a>(<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#device\">device</a>, 0); <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#GET_INDEX\">GET_INDEX</a>(<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#device\">device</a>, 7); ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_aspm_offset\">quirk_aspm_offset</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pbus\">pbus</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#pbus\">pbus</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If devices are attached to the root port at power-up or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * after hot-add, the code loops through the device list of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * each root port to save the register offsets and replace the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bus ops.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#pbus\">pbus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There are 0 to 8 devices attached to this bus */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap_base\">cap_base</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_EXP\">PCI_CAP_ID_EXP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_aspm_offset\">quirk_aspm_offset</a>[<a class=\"id\" href=\"#GET_INDEX\">GET_INDEX</a>(<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>)] = <a class=\"id\" href=\"#cap_base\">cap_base</a> + 0x10;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pbus\">pbus</a>-><a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#quirk_pcie_aspm_ops\">quirk_pcie_aspm_ops</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_MCH_PA\">PCI_DEVICE_ID_INTEL_MCH_PA</a>,<span class=\"ts\"/><a class=\"id\" href=\"#pcie_rootport_aspm_quirk\">pcie_rootport_aspm_quirk</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_MCH_PA1\">PCI_DEVICE_ID_INTEL_MCH_PA1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#pcie_rootport_aspm_quirk\">pcie_rootport_aspm_quirk</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_MCH_PB\">PCI_DEVICE_ID_INTEL_MCH_PB</a>,<span class=\"ts\"/><a class=\"id\" href=\"#pcie_rootport_aspm_quirk\">pcie_rootport_aspm_quirk</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_MCH_PB1\">PCI_DEVICE_ID_INTEL_MCH_PB1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#pcie_rootport_aspm_quirk\">pcie_rootport_aspm_quirk</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_MCH_PC\">PCI_DEVICE_ID_INTEL_MCH_PC</a>,<span class=\"ts\"/><a class=\"id\" href=\"#pcie_rootport_aspm_quirk\">pcie_rootport_aspm_quirk</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_MCH_PC1\">PCI_DEVICE_ID_INTEL_MCH_PC1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#pcie_rootport_aspm_quirk\">pcie_rootport_aspm_quirk</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fixup to mark boot BIOS video selected by BIOS before it changes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * From information provided by \"Jon Smirl\" &lt;jonsmirl@gmail.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The standard boot ROM sequence for an x86 machine uses the BIOS</span>", 
"<span class=\"comment\"> * to select an initial video card for boot display. This boot video</span>", 
"<span class=\"comment\"> * card will have it's BIOS copied to C0000 in system RAM.</span>", 
"<span class=\"comment\"> * IORESOURCE_ROM_SHADOW is used to associate the boot video</span>", 
"<span class=\"comment\"> * card with this copy. On laptops this copy has to be used since</span>", 
"<span class=\"comment\"> * the main ROM may be compressed or combined with another image.</span>", 
"<span class=\"comment\"> * See pci_map_rom() for use of this flag. IORESOURCE_ROM_SHADOW</span>", 
"<span class=\"comment\"> * is marked here since the boot video device will be the only enabled</span>", 
"<span class=\"comment\"> * video device at this point.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#pci_fixup_video\">pci_fixup_video</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#config\">config</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) != <a class=\"id\" href=\"#PCI_CLASS_DISPLAY_VGA\">PCI_CLASS_DISPLAY_VGA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is VGA routed to us? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#bus\">bus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * From information provided by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * \"David Miller\" &lt;davem@davemloft.net&gt;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The bridge control register is valid for PCI header</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * type BRIDGE, or CARDBUS. Host to PCI controllers use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * PCI header type NORMAL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bridge\">bridge</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    && ((<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#hdr_type\">hdr_type</a> == <a class=\"id\" href=\"#PCI_HEADER_TYPE_BRIDGE\">PCI_HEADER_TYPE_BRIDGE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>       || (<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#hdr_type\">hdr_type</a> == <a class=\"id\" href=\"#PCI_HEADER_TYPE_CARDBUS\">PCI_HEADER_TYPE_CARDBUS</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#PCI_BRIDGE_CONTROL\">PCI_BRIDGE_CONTROL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#config\">config</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#config\">config</a> &amp; <a class=\"id\" href=\"#PCI_BRIDGE_CTL_VGA\">PCI_BRIDGE_CTL_VGA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#config\">config</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#config\">config</a> &amp; (<a class=\"id\" href=\"#PCI_COMMAND_IO\">PCI_COMMAND_IO</a> | <a class=\"id\" href=\"#PCI_COMMAND_MEMORY\">PCI_COMMAND_MEMORY</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#PCI_ROM_RESOURCE\">PCI_ROM_RESOURCE</a>].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_ROM_SHADOW\">IORESOURCE_ROM_SHADOW</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Boot video device\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#pci_fixup_video\">pci_fixup_video</a>);", 
"", 
"", 
"static const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> <a class=\"id\" href=\"#__devinitconst\">__devinitconst</a> <a class=\"id\" href=\"#msi_k8t_dmi_table\">msi_k8t_dmi_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"MSI-K8T-Neo2Fir\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"MSI\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, \"MS-6702E\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{}", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The AMD-Athlon64 board MSI \"K8T Neo2-FIR\" disables the onboard sound</span>", 
"<span class=\"comment\"> * card if a PCI-soundcard is added.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The BIOS only gives options \"DISABLED\" and \"AUTO\". This code sets</span>", 
"<span class=\"comment\"> * the corresponding register-value to enable the soundcard.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The soundcard is only enabled, if the mainborad is identified</span>", 
"<span class=\"comment\"> * via DMI-tables and the soundcard is detected to be off.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#pci_fixup_msi_k8t_onboard_sound\">pci_fixup_msi_k8t_onboard_sound</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dmi_check_system\">dmi_check_system</a>(<a class=\"id\" href=\"#msi_k8t_dmi_table\">msi_k8t_dmi_table</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return; <span class=\"comment\">/* only applies to MSI K8T Neo2-FIR */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x50, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; 0x40) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x50, <a class=\"id\" href=\"#val\">val</a> &amp; (~0x40));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* verify the change for status output */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x50, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; 0x40)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Detected MSI K8T Neo2-FIR; \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"can't enable onboard soundcard!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Detected MSI K8T Neo2-FIR; \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"enabled onboard soundcard\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8237\">PCI_DEVICE_ID_VIA_8237</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_fixup_msi_k8t_onboard_sound\">pci_fixup_msi_k8t_onboard_sound</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8237\">PCI_DEVICE_ID_VIA_8237</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_fixup_msi_k8t_onboard_sound\">pci_fixup_msi_k8t_onboard_sound</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some Toshiba laptops need extra code to enable their TI TSB43AB22/A.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We pretend to bring them out of full D3 state, and restore the proper</span>", 
"<span class=\"comment\"> * IRQ, PCI cache line size, and BARs, otherwise the device won't function</span>", 
"<span class=\"comment\"> * properly.  In some cases, the device will generate an interrupt on</span>", 
"<span class=\"comment\"> * the wrong IRQ line, causing any devices sharing the line it's</span>", 
"<span class=\"comment\"> * *supposed* to use to be disabled by the kernel's IRQ debug code.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#toshiba_line_size\">toshiba_line_size</a>;", 
"", 
"static const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> <a class=\"id\" href=\"#__devinitconst\">__devinitconst</a> <a class=\"id\" href=\"#toshiba_ohci1394_dmi_table\">toshiba_ohci1394_dmi_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Toshiba PS5 based laptop\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"TOSHIBA\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_VERSION\">DMI_PRODUCT_VERSION</a>, \"PS5\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Toshiba PSM4 based laptop\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"TOSHIBA\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_VERSION\">DMI_PRODUCT_VERSION</a>, \"PSM4\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"Toshiba A40 based laptop\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"TOSHIBA\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_VERSION\">DMI_PRODUCT_VERSION</a>, \"PSA40U\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#pci_pre_fixup_toshiba_ohci1394\">pci_pre_fixup_toshiba_ohci1394</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dmi_check_system\">dmi_check_system</a>(<a class=\"id\" href=\"#toshiba_ohci1394_dmi_table\">toshiba_ohci1394_dmi_table</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return; <span class=\"comment\">/* only applies to certain Toshibas (so far) */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> = <a class=\"id\" href=\"#PCI_D3cold\">PCI_D3cold</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CACHE_LINE_SIZE\">PCI_CACHE_LINE_SIZE</a>, &amp;<a class=\"id\" href=\"#toshiba_line_size\">toshiba_line_size</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_TI\">PCI_VENDOR_ID_TI</a>, 0x8032,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pci_pre_fixup_toshiba_ohci1394\">pci_pre_fixup_toshiba_ohci1394</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#pci_post_fixup_toshiba_ohci1394\">pci_post_fixup_toshiba_ohci1394</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dmi_check_system\">dmi_check_system</a>(<a class=\"id\" href=\"#toshiba_ohci1394_dmi_table\">toshiba_ohci1394_dmi_table</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return; <span class=\"comment\">/* only applies to certain Toshibas (so far) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Restore config space on Toshiba laptops */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CACHE_LINE_SIZE\">PCI_CACHE_LINE_SIZE</a>, <a class=\"id\" href=\"#toshiba_line_size\">toshiba_line_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_INTERRUPT_LINE\">PCI_INTERRUPT_LINE</a>, (<a class=\"id\" href=\"#u8\">u8</a> *)&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_BASE_ADDRESS_0\">PCI_BASE_ADDRESS_0</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_BASE_ADDRESS_1\">PCI_BASE_ADDRESS_1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#dev\">dev</a>, 1));", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_ENABLE\">DECLARE_PCI_FIXUP_ENABLE</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_TI\">PCI_VENDOR_ID_TI</a>, 0x8032,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pci_post_fixup_toshiba_ohci1394\">pci_post_fixup_toshiba_ohci1394</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prevent the BIOS trapping accesses to the Cyrix CS5530A video device</span>", 
"<span class=\"comment\"> * configuration space.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pci_early_fixup_cyrix_5530\">pci_early_fixup_cyrix_5530</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* clear 'F4 Video Configuration Trap' bit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x42, &amp;<a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> &= 0xfd;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x42, <a class=\"id\" href=\"#r\">r</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_CYRIX\">PCI_VENDOR_ID_CYRIX</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_CYRIX_5530_LEGACY\">PCI_DEVICE_ID_CYRIX_5530_LEGACY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_early_fixup_cyrix_5530\">pci_early_fixup_cyrix_5530</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_CYRIX\">PCI_VENDOR_ID_CYRIX</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_CYRIX_5530_LEGACY\">PCI_DEVICE_ID_CYRIX_5530_LEGACY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_early_fixup_cyrix_5530\">pci_early_fixup_cyrix_5530</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Siemens Nixdorf AG FSC Multiprocessor Interrupt Controller:</span>", 
"<span class=\"comment\"> * prevent update of the BAR0, which doesn't look like a normal BAR.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#pci_siemens_interrupt_controller\">pci_siemens_interrupt_controller</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[0].<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#IORESOURCE_PCI_FIXED\">IORESOURCE_PCI_FIXED</a>;", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SIEMENS\">PCI_VENDOR_ID_SIEMENS</a>, 0x0015,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pci_siemens_interrupt_controller\">pci_siemens_interrupt_controller</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SB600: Disable BAR1 on device 14.0 to avoid HPET resources from</span>", 
"<span class=\"comment\"> * confusing the PCI engine:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sb600_disable_hpet_bar\">sb600_disable_hpet_bar</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The SB600 and SB700 both share the same device</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ID, but the PM register 0x55 does something different</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the SB700, so make sure we are dealing with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SB600 before touching the bit:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x08, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; 0x2F) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0x55, 0xCD6);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#inb\">inb</a>(0xCD7);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set bit 7 in PM register 0x55 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0x55, 0xCD6);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#val\">val</a> | 0x80, 0xCD7);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, 0x4385, <a class=\"id\" href=\"#sb600_disable_hpet_bar\">sb600_disable_hpet_bar</a>);", 
];
xr_frag_insert('l/7d/eb64e43e7e60e9643da848e4628ba172e1677d.xr', __xr_tmp);
