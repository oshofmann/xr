var __xr_tmp = [
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_time\">start_time</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_iopoll\">blk_iopoll</a> *<a class=\"id\" href=\"#iop\">iop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If softirq window is exhausted then punt.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#budget\">budget</a> <= 0 || <a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#start_time\">start_time</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rearm\">rearm</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Even though interrupts have been re-enabled, this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * access is safe because interrupts can only add new</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * entries to the tail of this list, and only -&gt;poll()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * calls can remove this head entry from the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iop\">iop</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#blk_iopoll\">blk_iopoll</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#IOPOLL_F_SCHED\">IOPOLL_F_SCHED</a>, &amp;<a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#poll\">poll</a>(<a class=\"id\" href=\"#iop\">iop</a>, <a class=\"id\" href=\"#weight\">weight</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#budget\">budget</a> -= <a class=\"id\" href=\"#work\">work</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Drivers must not modify the iopoll state, if they</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * consume their assigned weight (or more, some drivers can't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * easily just stop processing, they have to complete an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * entire mask of commands).In such cases this code</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * still \"owns\" the iopoll instance and therefore can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * move the instance around on the list at-will.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a> >= <a class=\"id\" href=\"#weight\">weight</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_iopoll_disable_pending\">blk_iopoll_disable_pending</a>(<a class=\"id\" href=\"#iop\">iop</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__blk_iopoll_complete\">__blk_iopoll_complete</a>(<a class=\"id\" href=\"#iop\">iop</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rearm\">rearm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__raise_softirq_irqoff\">__raise_softirq_irqoff</a>(<a class=\"id\" href=\"#BLOCK_IOPOLL_SOFTIRQ\">BLOCK_IOPOLL_SOFTIRQ</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_iopoll_disable - Disable iopoll on this @iop</span>", 
"<span class=\"comment\"> * @iop:      The parent iopoll structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Disable io polling and wait for any pending callbacks to have completed.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_iopoll_disable\">blk_iopoll_disable</a>(struct <a class=\"id\" href=\"#blk_iopoll\">blk_iopoll</a> *<a class=\"id\" href=\"#iop\">iop</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#IOPOLL_F_DISABLE\">IOPOLL_F_DISABLE</a>, &amp;<a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#IOPOLL_F_SCHED\">IOPOLL_F_SCHED</a>, &amp;<a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#IOPOLL_F_DISABLE\">IOPOLL_F_DISABLE</a>, &amp;<a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_iopoll_disable\">blk_iopoll_disable</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_iopoll_enable - Enable iopoll on this @iop</span>", 
"<span class=\"comment\"> * @iop:      The parent iopoll structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Enable iopoll on this @iop. Note that the handler run will not be</span>", 
"<span class=\"comment\"> *     scheduled, it will only mark it as active.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_iopoll_enable\">blk_iopoll_enable</a>(struct <a class=\"id\" href=\"#blk_iopoll\">blk_iopoll</a> *<a class=\"id\" href=\"#iop\">iop</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#IOPOLL_F_SCHED\">IOPOLL_F_SCHED</a>, &amp;<a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#state\">state</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__before_clear_bit\">smp_mb__before_clear_bit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit_unlock\">clear_bit_unlock</a>(<a class=\"id\" href=\"#IOPOLL_F_SCHED\">IOPOLL_F_SCHED</a>, &amp;<a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_iopoll_enable\">blk_iopoll_enable</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_iopoll_init - Initialize this @iop</span>", 
"<span class=\"comment\"> * @iop:      The parent iopoll structure</span>", 
"<span class=\"comment\"> * @weight:   The default weight (or command completion budget)</span>", 
"<span class=\"comment\"> * @poll_fn:  The handler to invoke</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Initialize this blk_iopoll structure. Before being actively used, the</span>", 
"<span class=\"comment\"> *     driver must call blk_iopoll_enable().</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_iopoll_init\">blk_iopoll_init</a>(struct <a class=\"id\" href=\"#blk_iopoll\">blk_iopoll</a> *<a class=\"id\" href=\"#iop\">iop</a>, int <a class=\"id\" href=\"#weight\">weight</a>, <a class=\"id\" href=\"#blk_iopoll_fn\">blk_iopoll_fn</a> *<a class=\"id\" href=\"#poll_fn\">poll_fn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#iop\">iop</a>, 0, sizeof(*<a class=\"id\" href=\"#iop\">iop</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#poll\">poll</a> = <a class=\"id\" href=\"#poll_fn\">poll_fn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#IOPOLL_F_SCHED\">IOPOLL_F_SCHED</a>, &amp;<a class=\"id\" href=\"#iop\">iop</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_iopoll_init\">blk_iopoll_init</a>);", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#blk_iopoll_cpu_notify\">blk_iopoll_cpu_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If a CPU goes away, splice its entries to the current CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and trigger a run of the softirq</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a> || <a class=\"id\" href=\"#action\">action</a> == <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = (unsigned long) <a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#blk_cpu_iopoll\">blk_cpu_iopoll</a>, <a class=\"id\" href=\"#cpu\">cpu</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#blk_cpu_iopoll\">blk_cpu_iopoll</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__raise_softirq_irqoff\">__raise_softirq_irqoff</a>(<a class=\"id\" href=\"#BLOCK_IOPOLL_SOFTIRQ\">BLOCK_IOPOLL_SOFTIRQ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#blk_iopoll_cpu_notifier\">blk_iopoll_cpu_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a><span class=\"ts\"/>= <a class=\"id\" href=\"#blk_iopoll_cpu_notify\">blk_iopoll_cpu_notify</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#blk_iopoll_setup\">blk_iopoll_setup</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#blk_cpu_iopoll\">blk_cpu_iopoll</a>, <a class=\"id\" href=\"#i\">i</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_softirq\">open_softirq</a>(<a class=\"id\" href=\"#BLOCK_IOPOLL_SOFTIRQ\">BLOCK_IOPOLL_SOFTIRQ</a>, <a class=\"id\" href=\"#blk_iopoll_softirq\">blk_iopoll_softirq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_hotcpu_notifier\">register_hotcpu_notifier</a>(&amp;<a class=\"id\" href=\"#blk_iopoll_cpu_notifier\">blk_iopoll_cpu_notifier</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#blk_iopoll_setup\">blk_iopoll_setup</a>);", 
];
xr_frag_insert('l/7f/083f85fad2349b2d56b9bb943bf0b72bf05a60.xr', __xr_tmp);
