var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lib/textsearch.c<span class=\"ts\"/>Generic text search interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Thomas Graf &lt;tgraf@suug.ch&gt;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>Pablo Neira Ayuso &lt;pablo@netfilter.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ==========================================================================</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * INTRODUCTION</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   The textsearch infrastructure provides text searching facitilies for</span>", 
"<span class=\"comment\"> *   both linear and non-linear data. Individual search algorithms are</span>", 
"<span class=\"comment\"> *   implemented in modules and chosen by the user.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ARCHITECTURE</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      User</span>", 
"<span class=\"comment\"> *     +----------------+</span>", 
"<span class=\"comment\"> *     |        finish()|&lt;--------------(6)-----------------+</span>", 
"<span class=\"comment\"> *     |get_next_block()|&lt;--------------(5)---------------+ |</span>", 
"<span class=\"comment\"> *     |                |                     Algorithm   | |</span>", 
"<span class=\"comment\"> *     |                |                    +------------------------------+</span>", 
"<span class=\"comment\"> *     |                |                    |  init()   find()   destroy() |</span>", 
"<span class=\"comment\"> *     |                |                    +------------------------------+</span>", 
"<span class=\"comment\"> *     |                |       Core API           ^       ^          ^</span>", 
"<span class=\"comment\"> *     |                |      +---------------+  (2)     (4)        (8)</span>", 
"<span class=\"comment\"> *     |             (1)|-----&gt;| prepare()     |---+       |          |</span>", 
"<span class=\"comment\"> *     |             (3)|-----&gt;| find()/next() |-----------+          |</span>", 
"<span class=\"comment\"> *     |             (7)|-----&gt;| destroy()     |----------------------+</span>", 
"<span class=\"comment\"> *     +----------------+      +---------------+</span>", 
"<span class=\"comment\"> *  </span>", 
"<span class=\"comment\"> *   (1) User configures a search by calling _prepare() specifying the</span>", 
"<span class=\"comment\"> *       search parameters such as the pattern and algorithm name.</span>", 
"<span class=\"comment\"> *   (2) Core requests the algorithm to allocate and initialize a search</span>", 
"<span class=\"comment\"> *       configuration according to the specified parameters.</span>", 
"<span class=\"comment\"> *   (3) User starts the search(es) by calling _find() or _next() to</span>", 
"<span class=\"comment\"> *       fetch subsequent occurrences. A state variable is provided</span>", 
"<span class=\"comment\"> *       to the algorithm to store persistent variables.</span>", 
"<span class=\"comment\"> *   (4) Core eventually resets the search offset and forwards the find()</span>", 
"<span class=\"comment\"> *       request to the algorithm.</span>", 
"<span class=\"comment\"> *   (5) Algorithm calls get_next_block() provided by the user continously</span>", 
"<span class=\"comment\"> *       to fetch the data to be searched in block by block.</span>", 
"<span class=\"comment\"> *   (6) Algorithm invokes finish() after the last call to get_next_block</span>", 
"<span class=\"comment\"> *       to clean up any leftovers from get_next_block. (Optional)</span>", 
"<span class=\"comment\"> *   (7) User destroys the configuration by calling _destroy().</span>", 
"<span class=\"comment\"> *   (8) Core notifies the algorithm to destroy algorithm specific</span>", 
"<span class=\"comment\"> *       allocations. (Optional)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * USAGE</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Before a search can be performed, a configuration must be created</span>", 
"<span class=\"comment\"> *   by calling textsearch_prepare() specifying the searching algorithm,</span>", 
"<span class=\"comment\"> *   the pattern to look for and flags. As a flag, you can set TS_IGNORECASE</span>", 
"<span class=\"comment\"> *   to perform case insensitive matching. But it might slow down</span>", 
"<span class=\"comment\"> *   performance of algorithm, so you should use it at own your risk.</span>", 
"<span class=\"comment\"> *   The returned configuration may then be used for an arbitary</span>", 
"<span class=\"comment\"> *   amount of times and even in parallel as long as a separate struct</span>", 
"<span class=\"comment\"> *   ts_state variable is provided to every instance.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   The actual search is performed by either calling textsearch_find_-</span>", 
"<span class=\"comment\"> *   continuous() for linear data or by providing an own get_next_block()</span>", 
"<span class=\"comment\"> *   implementation and calling textsearch_find(). Both functions return</span>", 
"<span class=\"comment\"> *   the position of the first occurrence of the patern or UINT_MAX if</span>", 
"<span class=\"comment\"> *   no match was found. Subsequent occurences can be found by calling</span>", 
"<span class=\"comment\"> *   textsearch_next() regardless of the linearity of the data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Once you're done using a configuration it must be given back via</span>", 
"<span class=\"comment\"> *   textsearch_destroy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * EXAMPLE</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   int pos;</span>", 
"<span class=\"comment\"> *   struct ts_config *conf;</span>", 
"<span class=\"comment\"> *   struct ts_state state;</span>", 
"<span class=\"comment\"> *   const char *pattern = \"chicken\";</span>", 
"<span class=\"comment\"> *   const char *example = \"We dance the funky chicken\";</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   conf = textsearch_prepare(\"kmp\", pattern, strlen(pattern),</span>", 
"<span class=\"comment\"> *                             GFP_KERNEL, TS_AUTOLOAD);</span>", 
"<span class=\"comment\"> *   if (IS_ERR(conf)) {</span>", 
"<span class=\"comment\"> *       err = PTR_ERR(conf);</span>", 
"<span class=\"comment\"> *       goto errout;</span>", 
"<span class=\"comment\"> *   }</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   pos = textsearch_find_continuous(conf, &amp;state, example, strlen(example));</span>", 
"<span class=\"comment\"> *   if (pos != UINT_MAX)</span>", 
"<span class=\"comment\"> *       panic(\"Oh my god, dancing chickens at %d\\n\", pos);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   textsearch_destroy(conf);</span>", 
"<span class=\"comment\"> * ==========================================================================</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#textsearch\">textsearch</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#ts_ops\">ts_ops</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#ts_mod_lock\">ts_mod_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#ts_ops\">ts_ops</a> *<a class=\"id\" href=\"#lookup_ts_algo\">lookup_ts_algo</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_ops\">ts_ops</a> *<a class=\"id\" href=\"#o\">o</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#o\">o</a>, &amp;<a class=\"id\" href=\"#ts_ops\">ts_ops</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#o\">o</a>-><a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#o\">o</a>-><a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#o\">o</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#o\">o</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * textsearch_register - register a textsearch module</span>", 
"<span class=\"comment\"> * @ops: operations lookup table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function must be called by textsearch modules to announce</span>", 
"<span class=\"comment\"> * their presence. The specified &amp;@ops must have %name set to a</span>", 
"<span class=\"comment\"> * unique identifier and the callbacks find(), init(), get_pattern(),</span>", 
"<span class=\"comment\"> * and get_pattern_len() must be implemented.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 or -EEXISTS if another module has already registered</span>", 
"<span class=\"comment\"> * with same name.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#textsearch_register\">textsearch_register</a>(struct <a class=\"id\" href=\"#ts_ops\">ts_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_ops\">ts_ops</a> *<a class=\"id\" href=\"#o\">o</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#name\">name</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#find\">find</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#init\">init</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get_pattern\">get_pattern</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get_pattern_len\">get_pattern_len</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ts_mod_lock\">ts_mod_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#o\">o</a>, &amp;<a class=\"id\" href=\"#ts_ops\">ts_ops</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#o\">o</a>-><a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#ts_ops\">ts_ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<a class=\"id\" href=\"#errout\">errout</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ts_mod_lock\">ts_mod_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * textsearch_unregister - unregister a textsearch module</span>", 
"<span class=\"comment\"> * @ops: operations lookup table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function must be called by textsearch modules to announce</span>", 
"<span class=\"comment\"> * their disappearance for examples when the module gets unloaded.</span>", 
"<span class=\"comment\"> * The &amp;ops parameter must be the same as the one during the</span>", 
"<span class=\"comment\"> * registration.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or -ENOENT if no matching textsearch</span>", 
"<span class=\"comment\"> * registration was found.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#textsearch_unregister\">textsearch_unregister</a>(struct <a class=\"id\" href=\"#ts_ops\">ts_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_ops\">ts_ops</a> *<a class=\"id\" href=\"#o\">o</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ts_mod_lock\">ts_mod_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#o\">o</a>, &amp;<a class=\"id\" href=\"#ts_ops\">ts_ops</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#o\">o</a> == <a class=\"id\" href=\"#ops\">ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#o\">o</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ts_mod_lock\">ts_mod_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#ts_linear_state\">ts_linear_state</a>", 
"{", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>const void<span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;", 
"};", 
"", 
"static unsigned int <a class=\"id\" href=\"#get_linear_data\">get_linear_data</a>(unsigned int <a class=\"id\" href=\"#consumed\">consumed</a>, const <a class=\"id\" href=\"#u8\">u8</a> **<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ts_state\">ts_state</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_linear_state\">ts_linear_state</a> *<a class=\"id\" href=\"#st\">st</a> = (struct <a class=\"id\" href=\"#ts_linear_state\">ts_linear_state</a> *) <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#cb\">cb</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#consumed\">consumed</a> &lt; <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#consumed\">consumed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#consumed\">consumed</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * textsearch_find_continuous - search a pattern in continuous/linear data</span>", 
"<span class=\"comment\"> * @conf: search configuration</span>", 
"<span class=\"comment\"> * @state: search state</span>", 
"<span class=\"comment\"> * @data: data to search in</span>", 
"<span class=\"comment\"> * @len: length of data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A simplified version of textsearch_find() for continuous/linear data.</span>", 
"<span class=\"comment\"> * Call textsearch_next() to retrieve subsequent matches.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the position of first occurrence of the pattern or</span>", 
"<span class=\"comment\"> * %UINT_MAX if no occurrence was found.</span>", 
"<span class=\"comment\"> */</span> ", 
"unsigned int <a class=\"id\" href=\"#textsearch_find_continuous\">textsearch_find_continuous</a>(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_state\">ts_state</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const void *<a class=\"id\" href=\"#data\">data</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_linear_state\">ts_linear_state</a> *<a class=\"id\" href=\"#st\">st</a> = (struct <a class=\"id\" href=\"#ts_linear_state\">ts_linear_state</a> *) <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#cb\">cb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conf\">conf</a>-><a class=\"id\" href=\"#get_next_block\">get_next_block</a> = <a class=\"id\" href=\"#get_linear_data\">get_linear_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#textsearch_find\">textsearch_find</a>(<a class=\"id\" href=\"#conf\">conf</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * textsearch_prepare - Prepare a search</span>", 
"<span class=\"comment\"> * @algo: name of search algorithm</span>", 
"<span class=\"comment\"> * @pattern: pattern data</span>", 
"<span class=\"comment\"> * @len: length of pattern</span>", 
"<span class=\"comment\"> * @gfp_mask: allocation mask</span>", 
"<span class=\"comment\"> * @flags: search flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Looks up the search algorithm module and creates a new textsearch</span>", 
"<span class=\"comment\"> * configuration for the specified pattern. Upon completion all</span>", 
"<span class=\"comment\"> * necessary refcnts are held and the configuration must be put back</span>", 
"<span class=\"comment\"> * using textsearch_put() after usage.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: The format of the pattern may not be compatible between</span>", 
"<span class=\"comment\"> *       the various search algorithms.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a new textsearch configuration according to the specified</span>", 
"<span class=\"comment\"> * parameters or a ERR_PTR(). If a zero length pattern is passed, this</span>", 
"<span class=\"comment\"> * function returns EINVAL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#textsearch_prepare\">textsearch_prepare</a>(const char *<a class=\"id\" href=\"#algo\">algo</a>, const void *<a class=\"id\" href=\"#pattern\">pattern</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_ops\">ts_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#lookup_ts_algo\">lookup_ts_algo</a>(<a class=\"id\" href=\"#algo\">algo</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Why not always autoload you may ask. Some users are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in a situation where requesting a module may deadlock,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * especially when the module is located on a NFS mount.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a> == <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TS_AUTOLOAD\">TS_AUTOLOAD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"ts_%s\", <a class=\"id\" href=\"#algo\">algo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#lookup_ts_algo\">lookup_ts_algo</a>(<a class=\"id\" href=\"#algo\">algo</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conf\">conf</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#init\">init</a>(<a class=\"id\" href=\"#pattern\">pattern</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#conf\">conf</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#conf\">conf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conf\">conf</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#conf\">conf</a>;", 
"", 
"<a class=\"id\" href=\"#errout\">errout</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * textsearch_destroy - destroy a search configuration</span>", 
"<span class=\"comment\"> * @conf: search configuration</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Releases all references of the configuration and frees</span>", 
"<span class=\"comment\"> * up the memory.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#textsearch_destroy\">textsearch_destroy</a>(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#conf\">conf</a>-><a class=\"id\" href=\"#ops\">ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conf\">conf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#destroy\">destroy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conf\">conf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#conf\">conf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#conf\">conf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#conf\">conf</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#textsearch_register\">textsearch_register</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#textsearch_unregister\">textsearch_unregister</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#textsearch_prepare\">textsearch_prepare</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#textsearch_find_continuous\">textsearch_find_continuous</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#textsearch_destroy\">textsearch_destroy</a>);", 
];
xr_frag_insert('l/7f/4cc6cbb8194671a119189237ca8efc6f17cc80.xr', __xr_tmp);
