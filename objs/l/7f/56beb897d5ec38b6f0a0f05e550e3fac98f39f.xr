var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = (unsigned long)<a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#alloc_size\">alloc_size</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_task_group\">init_task_group</a>.<a class=\"id\" href=\"#se\">se</a> = (struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> **)<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(void **);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_task_group\">init_task_group</a>.<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = (struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> **)<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(void **);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FAIR_GROUP_SCHED */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_task_group\">init_task_group</a>.<a class=\"id\" href=\"#rt_se\">rt_se</a> = (struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> **)<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(void **);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_task_group\">init_task_group</a>.<a class=\"id\" href=\"#rt_rq\">rt_rq</a> = (struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> **)<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(void **);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_RT_GROUP_SCHED */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPUMASK_OFFSTACK\">CONFIG_CPUMASK_OFFSTACK</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#load_balance_tmpmask\">load_balance_tmpmask</a>, <a class=\"id\" href=\"#i\">i</a>) = (void *)<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#cpumask_size\">cpumask_size</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CPUMASK_OFFSTACK */</span>", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_defrootdomain\">init_defrootdomain</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rt_bandwidth\">init_rt_bandwidth</a>(&amp;<a class=\"id\" href=\"#def_rt_bandwidth\">def_rt_bandwidth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_rt_period\">global_rt_period</a>(), <a class=\"id\" href=\"#global_rt_runtime\">global_rt_runtime</a>());", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rt_bandwidth\">init_rt_bandwidth</a>(&amp;<a class=\"id\" href=\"#init_task_group\">init_task_group</a>.<a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_rt_period\">global_rt_period</a>(), <a class=\"id\" href=\"#global_rt_runtime\">global_rt_runtime</a>());", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_RT_GROUP_SCHED */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_SCHED\">CONFIG_CGROUP_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#init_task_group\">init_task_group</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#task_groups\">task_groups</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#init_task_group\">init_task_group</a>.<a class=\"id\" href=\"#children\">children</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CGROUP_SCHED */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a> && <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_shares_data\">update_shares_data</a> = <a class=\"id\" href=\"#__alloc_percpu\">__alloc_percpu</a>(<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(unsigned long),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__alignof__\">__alignof__</a>(unsigned long));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#calc_load_active\">calc_load_active</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#calc_load_update\">calc_load_update</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#LOAD_FREQ\">LOAD_FREQ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_cfs_rq\">init_cfs_rq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cfs\">cfs</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_rt_rq\">init_rt_rq</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_task_group\">init_task_group</a>.<a class=\"id\" href=\"#shares\">shares</a> = <a class=\"id\" href=\"#init_task_group_load\">init_task_group_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#leaf_cfs_rq_list\">leaf_cfs_rq_list</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_SCHED\">CONFIG_CGROUP_SCHED</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * How much cpu bandwidth does init_task_group get?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In case of task-groups formed thr' the cgroup filesystem, it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * gets 100% of the cpu resources in the system. This overall</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * system cpu resource is divided among the tasks of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * init_task_group and its child task-groups in a fair manner,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * based on each entity's (task or task-group's) weight</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (se-&gt;load.weight).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In other words, if init_task_group has 10 tasks of weight</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 1024) and two child groups A0 and A1 (of weight 1024 each),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then A0's share of the cpu resource is:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>A0's bandwidth = 1024 / (10*1024 + 1024 + 1024) = 8.33%</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We achieve this by letting init_task_group's tasks sit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * directly in rq-&gt;cfs (i.e init_task_group-&gt;se[] = NULL).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_tg_cfs_entry\">init_tg_cfs_entry</a>(&amp;<a class=\"id\" href=\"#init_task_group\">init_task_group</a>, &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cfs\">cfs</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FAIR_GROUP_SCHED */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> = <a class=\"id\" href=\"#def_rt_bandwidth\">def_rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#leaf_rt_rq_list\">leaf_rt_rq_list</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_SCHED\">CONFIG_CGROUP_SCHED</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_tg_rt_entry\">init_tg_rt_entry</a>(&amp;<a class=\"id\" href=\"#init_task_group\">init_task_group</a>, &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i\">i</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#CPU_LOAD_IDX_MAX\">CPU_LOAD_IDX_MAX</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu_load\">cpu_load</a>[<a class=\"id\" href=\"#j\">j</a>] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#last_load_update_tick\">last_load_update_tick</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> = <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#post_schedule\">post_schedule</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#active_balance\">active_balance</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#next_balance\">next_balance</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#push_cpu\">push_cpu</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#online\">online</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle_stamp\">idle_stamp</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#avg_idle\">avg_idle</a> = 2*<a class=\"id\" href=\"#sysctl_sched_migration_cost\">sysctl_sched_migration_cost</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_attach_root\">rq_attach_root</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#def_root_domain\">def_root_domain</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nohz_balance_kick\">nohz_balance_kick</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_sched_softirq_csd\">init_sched_softirq_csd</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#remote_sched_softirq_cb\">remote_sched_softirq_cb</a>, <a class=\"id\" href=\"#i\">i</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_rq_hrtick\">init_rq_hrtick</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_iowait\">nr_iowait</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_load_weight\">set_load_weight</a>(&amp;<a class=\"id\" href=\"#init_task\">init_task</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT_NOTIFIERS\">CONFIG_PREEMPT_NOTIFIERS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#preempt_notifiers\">preempt_notifiers</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_softirq\">open_softirq</a>(<a class=\"id\" href=\"#SCHED_SOFTIRQ\">SCHED_SOFTIRQ</a>, <a class=\"id\" href=\"#run_rebalance_domains\">run_rebalance_domains</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_MUTEXES\">CONFIG_RT_MUTEXES</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_head_init_raw\">plist_head_init_raw</a>(&amp;<a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#pi_waiters\">pi_waiters</a>, &amp;<a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The boot idle thread does lazy MMU switching as well:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#mm_count\">mm_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enter_lazy_tlb\">enter_lazy_tlb</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make us the idle thread. Technically, schedule() should not be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * called from this thread, however somewhere below it might be,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but because we are the idle thread, we just pick up running again</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when this runqueue becomes \"idle\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_idle\">init_idle</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calc_load_update\">calc_load_update</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#LOAD_FREQ\">LOAD_FREQ</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * During early bootup we pretend to be a normal task:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a> = &amp;<a class=\"id\" href=\"#fair_sched_class\">fair_sched_class</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate the nohz_cpu_mask if CONFIG_CPUMASK_OFFSTACK */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#nohz_cpu_mask\">nohz_cpu_mask</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#idle_cpus_mask\">idle_cpus_mask</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#grp_idle_mask\">grp_idle_mask</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#load_balancer\">load_balancer</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#first_pick_cpu\">first_pick_cpu</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#second_pick_cpu\">second_pick_cpu</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* May be allocated at isolcpus cmdline parse time */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_isolated_map\">cpu_isolated_map</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#cpu_isolated_map\">cpu_isolated_map</a>, <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* SMP */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_init\">perf_event_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scheduler_running\">scheduler_running</a> = 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SPINLOCK_SLEEP\">CONFIG_DEBUG_SPINLOCK_SLEEP</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#preempt_count_equals\">preempt_count_equals</a>(int <a class=\"id\" href=\"#preempt_offset\">preempt_offset</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nested\">nested</a> = (<a class=\"id\" href=\"#preempt_count\">preempt_count</a>() &amp; ~<a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a>) + <a class=\"id\" href=\"#rcu_preempt_depth\">rcu_preempt_depth</a>();", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#nested\">nested</a> == <a class=\"id\" href=\"#PREEMPT_INATOMIC_BASE\">PREEMPT_INATOMIC_BASE</a> + <a class=\"id\" href=\"#preempt_offset\">preempt_offset</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__might_sleep\">__might_sleep</a>(const char *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#line\">line</a>, int <a class=\"id\" href=\"#preempt_offset\">preempt_offset</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#in_atomic\">in_atomic</a>", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#prev_jiffy\">prev_jiffy</a>;<span class=\"ts\"/><span class=\"comment\">/* ratelimiting */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#preempt_count_equals\">preempt_count_equals</a>(<a class=\"id\" href=\"#preempt_offset\">preempt_offset</a>) && !<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#system_state\">system_state</a> != <a class=\"id\" href=\"#SYSTEM_RUNNING\">SYSTEM_RUNNING</a> || <a class=\"id\" href=\"#oops_in_progress\">oops_in_progress</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#prev_jiffy\">prev_jiffy</a> + <a class=\"id\" href=\"#HZ\">HZ</a>) && <a class=\"id\" href=\"#prev_jiffy\">prev_jiffy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_jiffy\">prev_jiffy</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"BUG: sleeping function called from invalid context at %s:%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#line\">line</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"in_atomic(): %d, irqs_disabled(): %d, pid: %d, name: %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_atomic\">in_atomic</a>(), <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_show_held_locks\">debug_show_held_locks</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_irqtrace_events\">print_irqtrace_events</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__might_sleep\">__might_sleep</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MAGIC_SYSRQ\">CONFIG_MAGIC_SYSRQ</a>", 
"static void <a class=\"id\" href=\"#normalize_task\">normalize_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#on_rq\">on_rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_rq\">on_rq</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_task\">deactivate_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__setscheduler\">__setscheduler</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#SCHED_NORMAL\">SCHED_NORMAL</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rq\">on_rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#activate_task\">activate_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#normalize_rt_tasks\">normalize_rt_tasks</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#g\">g</a>, *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock_irqsave\">read_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_thread\">do_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only normalize user tasks:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#exec_start\">exec_start</a><span class=\"ts\"/><span class=\"ts\"/>= 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_start\">wait_start</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#sleep_start\">sleep_start</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#block_start\">block_start</a><span class=\"ts\"/>= 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_task\">rt_task</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Renice negative nice level userspace</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * tasks back to 0:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TASK_NICE\">TASK_NICE</a>(<a class=\"id\" href=\"#p\">p</a>) &lt; 0 && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>(<a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#__task_rq_lock\">__task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#normalize_task\">normalize_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__task_rq_unlock\">__task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pi_lock\">pi_lock</a>);", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock_irqrestore\">read_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MAGIC_SYSRQ */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IA64\">CONFIG_IA64</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These functions are only useful for the IA64 MCA handling, or kdb.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * They can only be called when the whole system has been</span>", 
"<span class=\"comment\"> * stopped - every CPU needs to be quiescent, and no scheduling</span>", 
"<span class=\"comment\"> * activity can take place. Using them for anything else would</span>", 
"<span class=\"comment\"> * be a serious bug, and as a result, they aren't even visible</span>", 
"<span class=\"comment\"> * under any other configuration.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * curr_task - return the current task for a given cpu.</span>", 
"<span class=\"comment\"> * @cpu: the processor in question.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ONLY VALID WHEN THE WHOLE SYSTEM IS STOPPED!</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr_task\">curr_task</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_curr\">cpu_curr</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* defined(CONFIG_IA64) || defined(CONFIG_KGDB_KDB) */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IA64\">CONFIG_IA64</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_curr_task - set the current task for a given cpu.</span>", 
"<span class=\"comment\"> * @cpu: the processor in question.</span>", 
"<span class=\"comment\"> * @p: the task pointer to set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: This function must only be used when non-maskable interrupts</span>", 
"<span class=\"comment\"> * are serviced on a separate stack. It allows the architecture to switch the</span>", 
"<span class=\"comment\"> * notion of the current task on a cpu in a non-blocking manner. This function</span>", 
"<span class=\"comment\"> * must be called with all CPU's synchronized, and interrupts disabled, the</span>", 
"<span class=\"comment\"> * and caller must save the original value of the current task (see</span>", 
"<span class=\"comment\"> * curr_task() above) and restore that value before reenabling interrupts and</span>", 
"<span class=\"comment\"> * re-starting the system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ONLY VALID WHEN THE WHOLE SYSTEM IS STOPPED!</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#set_curr_task\">set_curr_task</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_curr\">cpu_curr</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"static void <a class=\"id\" href=\"#free_fair_sched_group\">free_fair_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a>);", 
"}", 
"", 
"static", 
"int <a class=\"id\" href=\"#alloc_fair_sched_group\">alloc_fair_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>) * <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(<a class=\"id\" href=\"#se\">se</a>) * <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#shares\">shares</a> = <a class=\"id\" href=\"#NICE_0_LOAD\">NICE_0_LOAD</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#se\">se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free_rq\">err_free_rq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_tg_cfs_entry\">init_tg_cfs_entry</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>, <a class=\"id\" href=\"#i\">i</a>, 0, <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#se\">se</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"", 
" <a class=\"id\" href=\"#err_free_rq\">err_free_rq</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
" <a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#register_fair_sched_group\">register_fair_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]-><a class=\"id\" href=\"#leaf_cfs_rq_list\">leaf_cfs_rq_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#leaf_cfs_rq_list\">leaf_cfs_rq_list</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unregister_fair_sched_group\">unregister_fair_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]-><a class=\"id\" href=\"#leaf_cfs_rq_list\">leaf_cfs_rq_list</a>);", 
"}", 
"#else <span class=\"comment\">/* !CONFG_FAIR_GROUP_SCHED */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_fair_sched_group\">free_fair_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"int <a class=\"id\" href=\"#alloc_fair_sched_group\">alloc_fair_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#register_fair_sched_group\">register_fair_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unregister_fair_sched_group\">unregister_fair_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FAIR_GROUP_SCHED */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"static void <a class=\"id\" href=\"#free_rt_sched_group\">free_rt_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_rt_bandwidth\">destroy_rt_bandwidth</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_rq\">rt_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_rq\">rt_rq</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_se\">rt_se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_se\">rt_se</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"}", 
"", 
"static", 
"int <a class=\"id\" href=\"#alloc_rt_sched_group\">alloc_rt_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_rq\">rt_rq</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(<a class=\"id\" href=\"#rt_rq\">rt_rq</a>) * <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_rq\">rt_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_se\">rt_se</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(<a class=\"id\" href=\"#rt_se\">rt_se</a>) * <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_se\">rt_se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rt_bandwidth\">init_rt_bandwidth</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#def_rt_bandwidth\">def_rt_bandwidth</a>.<a class=\"id\" href=\"#rt_period\">rt_period</a>), 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_rq\">rt_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_se\">rt_se</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_se\">rt_se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free_rq\">err_free_rq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_tg_rt_entry\">init_tg_rt_entry</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#rt_rq\">rt_rq</a>, <a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#i\">i</a>, 0, <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#rt_se\">rt_se</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"", 
" <a class=\"id\" href=\"#err_free_rq\">err_free_rq</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
" <a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#register_rt_sched_group\">register_rt_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_rq\">rt_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]-><a class=\"id\" href=\"#leaf_rt_rq_list\">leaf_rt_rq_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#leaf_rt_rq_list\">leaf_rt_rq_list</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unregister_rt_sched_group\">unregister_rt_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_rq\">rt_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]-><a class=\"id\" href=\"#leaf_rt_rq_list\">leaf_rt_rq_list</a>);", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_RT_GROUP_SCHED */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_rt_sched_group\">free_rt_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"int <a class=\"id\" href=\"#alloc_rt_sched_group\">alloc_rt_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#register_rt_sched_group\">register_rt_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unregister_rt_sched_group\">unregister_rt_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_RT_GROUP_SCHED */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_SCHED\">CONFIG_CGROUP_SCHED</a>", 
"static void <a class=\"id\" href=\"#free_sched_group\">free_sched_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_fair_sched_group\">free_fair_sched_group</a>(<a class=\"id\" href=\"#tg\">tg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_rt_sched_group\">free_rt_sched_group</a>(<a class=\"id\" href=\"#tg\">tg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tg\">tg</a>);", 
"}", 
"", 
"<span class=\"comment\">/* allocate runqueue etc for a new task group */</span>", 
"struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#sched_create_group\">sched_create_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#tg\">tg</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tg\">tg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_fair_sched_group\">alloc_fair_sched_group</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#parent\">parent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_rt_sched_group\">alloc_rt_sched_group</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#parent\">parent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#task_group_lock\">task_group_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_fair_sched_group\">register_fair_sched_group</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_rt_sched_group\">register_rt_sched_group</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#task_groups\">task_groups</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#parent\">parent</a>); <span class=\"comment\">/* root should already exist */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#children\">children</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#siblings\">siblings</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#children\">children</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task_group_lock\">task_group_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tg\">tg</a>;", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_sched_group\">free_sched_group</a>(<a class=\"id\" href=\"#tg\">tg</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"}", 
"", 
"<span class=\"comment\">/* rcu callback to free various structures associated with a task group */</span>", 
"static void <a class=\"id\" href=\"#free_sched_group_rcu\">free_sched_group_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rhp\">rhp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* now it should be safe to free those cfs_rqs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_sched_group\">free_sched_group</a>(<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rhp\">rhp</a>, struct <a class=\"id\" href=\"#task_group\">task_group</a>, <a class=\"id\" href=\"#rcu\">rcu</a>));", 
"}", 
"", 
"<span class=\"comment\">/* Destroy runqueue etc associated with a task group */</span>", 
"void <a class=\"id\" href=\"#sched_destroy_group\">sched_destroy_group</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#task_group_lock\">task_group_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_fair_sched_group\">unregister_fair_sched_group</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_rt_sched_group\">unregister_rt_sched_group</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#siblings\">siblings</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task_group_lock\">task_group_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait for possible concurrent references to cfs_rqs complete */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#free_sched_group_rcu\">free_sched_group_rcu</a>);", 
"}", 
"", 
"<span class=\"comment\">/* change task's runqueue when it moves between groups.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller of this function should have put the task in its new group</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by now. This function just updates tsk-&gt;se.cfs_rq and tsk-&gt;se.parent to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reflect its new group.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sched_move_task\">sched_move_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#on_rq\">on_rq</a>, <a class=\"id\" href=\"#running\">running</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#running\">running</a> = <a class=\"id\" href=\"#task_current\">task_current</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_rq\">on_rq</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dequeue_task\">dequeue_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#running\">running</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#put_prev_task\">put_prev_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_task_rq\">set_task_rq</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#tsk\">tsk</a>));", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#moved_group\">moved_group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#moved_group\">moved_group</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#on_rq\">on_rq</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#running\">running</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#set_curr_task\">set_curr_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_task\">enqueue_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CGROUP_SCHED */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"static void <a class=\"id\" href=\"#__set_se_shares\">__set_se_shares</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>, unsigned long <a class=\"id\" href=\"#shares\">shares</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#on_rq\">on_rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_rq\">on_rq</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#on_rq\">on_rq</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dequeue_entity\">dequeue_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#shares\">shares</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#inv_weight\">inv_weight</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_entity\">enqueue_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>, 0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_se_shares\">set_se_shares</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>, unsigned long <a class=\"id\" href=\"#shares\">shares</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_se_shares\">__set_se_shares</a>(<a class=\"id\" href=\"#se\">se</a>, <a class=\"id\" href=\"#shares\">shares</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#shares_mutex\">shares_mutex</a>);", 
"", 
"int <a class=\"id\" href=\"#sched_group_set_shares\">sched_group_set_shares</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, unsigned long <a class=\"id\" href=\"#shares\">shares</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can't change the weight of the root cgroup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shares\">shares</a> &lt; <a class=\"id\" href=\"#MIN_SHARES\">MIN_SHARES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shares\">shares</a> = <a class=\"id\" href=\"#MIN_SHARES\">MIN_SHARES</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#shares\">shares</a> &gt; <a class=\"id\" href=\"#MAX_SHARES\">MAX_SHARES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shares\">shares</a> = <a class=\"id\" href=\"#MAX_SHARES\">MAX_SHARES</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#shares_mutex\">shares_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#shares\">shares</a> == <a class=\"id\" href=\"#shares\">shares</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#task_group_lock\">task_group_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_fair_sched_group\">unregister_fair_sched_group</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#siblings\">siblings</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task_group_lock\">task_group_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait for any ongoing reference to this group to finish */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now we are free to modify the group's share on each cpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * w/o tripping rebalance_share or load_balance_fair.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#shares\">shares</a> = <a class=\"id\" href=\"#shares\">shares</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * force a rebalance</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq_set_shares\">cfs_rq_set_shares</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#i\">i</a>], 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_se_shares\">set_se_shares</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#shares\">shares</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enable load balance activity on this group, by inserting it back on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * each cpu's rq-&gt;leaf_cfs_rq_list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#task_group_lock\">task_group_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_fair_sched_group\">register_fair_sched_group</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#siblings\">siblings</a>, &amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#children\">children</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#task_group_lock\">task_group_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#shares_mutex\">shares_mutex</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#sched_group_shares\">sched_group_shares</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#shares\">shares</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ensure that the real time constraints are schedulable.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#rt_constraints_mutex\">rt_constraints_mutex</a>);", 
"", 
"static unsigned long <a class=\"id\" href=\"#to_ratio\">to_ratio</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#runtime\">runtime</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#runtime\">runtime</a> == <a class=\"id\" href=\"#RUNTIME_INF\">RUNTIME_INF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1ULL << 20;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div64_u64\">div64_u64</a>(<a class=\"id\" href=\"#runtime\">runtime</a> << 20, <a class=\"id\" href=\"#period\">period</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Must be called with tasklist_lock held */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tg_has_rt_tasks\">tg_has_rt_tasks</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#g\">g</a>, *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_thread\">do_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_task\">rt_task</a>(<a class=\"id\" href=\"#p\">p</a>) && <a class=\"id\" href=\"#rt_rq_of_se\">rt_rq_of_se</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>)-><a class=\"id\" href=\"#tg\">tg</a> == <a class=\"id\" href=\"#tg\">tg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#rt_schedulable_data\">rt_schedulable_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_period\">rt_period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#tg_schedulable\">tg_schedulable</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_schedulable_data\">rt_schedulable_data</a> *<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total\">total</a>, <a class=\"id\" href=\"#sum\">sum</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#runtime\">runtime</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_period\">rt_period</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#runtime\">runtime</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tg\">tg</a> == <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tg\">tg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#rt_period\">rt_period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#runtime\">runtime</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cannot have more runtime than the period.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#runtime\">runtime</a> &gt; <a class=\"id\" href=\"#period\">period</a> && <a class=\"id\" href=\"#runtime\">runtime</a> != <a class=\"id\" href=\"#RUNTIME_INF\">RUNTIME_INF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure we don't starve existing RT tasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_bandwidth_enabled\">rt_bandwidth_enabled</a>() && !<a class=\"id\" href=\"#runtime\">runtime</a> && <a class=\"id\" href=\"#tg_has_rt_tasks\">tg_has_rt_tasks</a>(<a class=\"id\" href=\"#tg\">tg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> = <a class=\"id\" href=\"#to_ratio\">to_ratio</a>(<a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#runtime\">runtime</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Nobody can have more than the global setting allows.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#total\">total</a> &gt; <a class=\"id\" href=\"#to_ratio\">to_ratio</a>(<a class=\"id\" href=\"#global_rt_period\">global_rt_period</a>(), <a class=\"id\" href=\"#global_rt_runtime\">global_rt_runtime</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The sum of our children's runtime should not exceed our own.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#child\">child</a>, &amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#children\">children</a>, <a class=\"id\" href=\"#siblings\">siblings</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_period\">rt_period</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#runtime\">runtime</a> = <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#child\">child</a> == <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#tg\">tg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#rt_period\">rt_period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#runtime\">runtime</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> += <a class=\"id\" href=\"#to_ratio\">to_ratio</a>(<a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#runtime\">runtime</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sum\">sum</a> &gt; <a class=\"id\" href=\"#total\">total</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__rt_schedulable\">__rt_schedulable</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#runtime\">runtime</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_schedulable_data\">rt_schedulable_data</a> <a class=\"id\" href=\"#data\">data</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tg\">tg</a> = <a class=\"id\" href=\"#tg\">tg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#rt_period\">rt_period</a> = <a class=\"id\" href=\"#period\">period</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> = <a class=\"id\" href=\"#runtime\">runtime</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#walk_tg_tree\">walk_tg_tree</a>(<a class=\"id\" href=\"#tg_schedulable\">tg_schedulable</a>, <a class=\"id\" href=\"#tg_nop\">tg_nop</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tg_set_bandwidth\">tg_set_bandwidth</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_period\">rt_period</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#rt_constraints_mutex\">rt_constraints_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__rt_schedulable\">__rt_schedulable</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#rt_period\">rt_period</a>, <a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime_lock\">rt_runtime_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_period\">rt_period</a> = <a class=\"id\" href=\"#ns_to_ktime\">ns_to_ktime</a>(<a class=\"id\" href=\"#rt_period\">rt_period</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> = <a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_rq\">rt_rq</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_runtime_lock\">rt_runtime_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> = <a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_runtime_lock\">rt_runtime_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime_lock\">rt_runtime_lock</a>);", 
" <a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#rt_constraints_mutex\">rt_constraints_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#sched_group_set_rt_runtime\">sched_group_set_rt_runtime</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, long <a class=\"id\" href=\"#rt_runtime_us\">rt_runtime_us</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>, <a class=\"id\" href=\"#rt_period\">rt_period</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_period\">rt_period</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_period\">rt_period</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#rt_runtime_us\">rt_runtime_us</a> * <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_runtime_us\">rt_runtime_us</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> = <a class=\"id\" href=\"#RUNTIME_INF\">RUNTIME_INF</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tg_set_bandwidth\">tg_set_bandwidth</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#rt_period\">rt_period</a>, <a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>);", 
"}", 
"", 
"long <a class=\"id\" href=\"#sched_group_rt_runtime\">sched_group_rt_runtime</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_runtime_us\">rt_runtime_us</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> == <a class=\"id\" href=\"#RUNTIME_INF\">RUNTIME_INF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_runtime_us\">rt_runtime_us</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#rt_runtime_us\">rt_runtime_us</a>, <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rt_runtime_us\">rt_runtime_us</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#sched_group_set_rt_period\">sched_group_set_rt_period</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, long <a class=\"id\" href=\"#rt_period_us\">rt_period_us</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>, <a class=\"id\" href=\"#rt_period\">rt_period</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_period\">rt_period</a> = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#rt_period_us\">rt_period_us</a> * <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_period\">rt_period</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tg_set_bandwidth\">tg_set_bandwidth</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#rt_period\">rt_period</a>, <a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>);", 
"}", 
"", 
"long <a class=\"id\" href=\"#sched_group_rt_period\">sched_group_rt_period</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_period_us\">rt_period_us</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_period_us\">rt_period_us</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_period\">rt_period</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#rt_period_us\">rt_period_us</a>, <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rt_period_us\">rt_period_us</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sched_rt_global_constraints\">sched_rt_global_constraints</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#runtime\">runtime</a>, <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_sched_rt_period\">sysctl_sched_rt_period</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#runtime\">runtime</a> = <a class=\"id\" href=\"#global_rt_runtime\">global_rt_runtime</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#global_rt_period\">global_rt_period</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sanity check on the sysctl variables.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#runtime\">runtime</a> &gt; <a class=\"id\" href=\"#period\">period</a> && <a class=\"id\" href=\"#runtime\">runtime</a> != <a class=\"id\" href=\"#RUNTIME_INF\">RUNTIME_INF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#rt_constraints_mutex\">rt_constraints_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__rt_schedulable\">__rt_schedulable</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#rt_constraints_mutex\">rt_constraints_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#sched_rt_can_attach\">sched_rt_can_attach</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't accept realtime tasks when there is no way for them to run */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_task\">rt_task</a>(<a class=\"id\" href=\"#tsk\">tsk</a>) && <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_RT_GROUP_SCHED */</span>", 
"static int <a class=\"id\" href=\"#sched_rt_global_constraints\">sched_rt_global_constraints</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_sched_rt_period\">sysctl_sched_rt_period</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There's always some RT tasks in the root group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -- migration, kstopmachine etc..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_sched_rt_runtime\">sysctl_sched_rt_runtime</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#def_rt_bandwidth\">def_rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime_lock\">rt_runtime_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a> = &amp;<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#rt\">rt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_runtime_lock\">rt_runtime_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> = <a class=\"id\" href=\"#global_rt_runtime\">global_rt_runtime</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_runtime_lock\">rt_runtime_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#def_rt_bandwidth\">def_rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime_lock\">rt_runtime_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_RT_GROUP_SCHED */</span>", 
"", 
"int <a class=\"id\" href=\"#sched_rt_handler\">sched_rt_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_period\">old_period</a>, <a class=\"id\" href=\"#old_runtime\">old_runtime</a>;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_period\">old_period</a> = <a class=\"id\" href=\"#sysctl_sched_rt_period\">sysctl_sched_rt_period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_runtime\">old_runtime</a> = <a class=\"id\" href=\"#sysctl_sched_rt_runtime\">sysctl_sched_rt_runtime</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sched_rt_global_constraints\">sched_rt_global_constraints</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_sched_rt_period\">sysctl_sched_rt_period</a> = <a class=\"id\" href=\"#old_period\">old_period</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_sched_rt_runtime\">sysctl_sched_rt_runtime</a> = <a class=\"id\" href=\"#old_runtime\">old_runtime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#def_rt_bandwidth\">def_rt_bandwidth</a>.<a class=\"id\" href=\"#rt_runtime\">rt_runtime</a> = <a class=\"id\" href=\"#global_rt_runtime\">global_rt_runtime</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#def_rt_bandwidth\">def_rt_bandwidth</a>.<a class=\"id\" href=\"#rt_period\">rt_period</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns_to_ktime\">ns_to_ktime</a>(<a class=\"id\" href=\"#global_rt_period\">global_rt_period</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_SCHED\">CONFIG_CGROUP_SCHED</a>", 
"", 
"<span class=\"comment\">/* return corresponding task_group object of a cgroup */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#cgroup_tg\">cgroup_tg</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cpu_cgroup_subsys_id\">cpu_cgroup_subsys_id</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#task_group\">task_group</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *", 
"<a class=\"id\" href=\"#cpu_cgroup_create\">cpu_cgroup_create</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is early initialization for the top cgroup */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#init_task_group\">init_task_group</a>.<a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#cgroup_tg\">cgroup_tg</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a> = <a class=\"id\" href=\"#sched_create_group\">sched_create_group</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#tg\">tg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#css\">css</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#cpu_cgroup_destroy\">cpu_cgroup_destroy</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a> = <a class=\"id\" href=\"#cgroup_tg\">cgroup_tg</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_destroy_group\">sched_destroy_group</a>(<a class=\"id\" href=\"#tg\">tg</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#cpu_cgroup_can_attach_task\">cpu_cgroup_can_attach_task</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_rt_can_attach\">sched_rt_can_attach</a>(<a class=\"id\" href=\"#cgroup_tg\">cgroup_tg</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>), <a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't support RT-tasks being in separate groups */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a> != &amp;<a class=\"id\" href=\"#fair_sched_class\">fair_sched_class</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#cpu_cgroup_can_attach\">cpu_cgroup_can_attach</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#threadgroup\">threadgroup</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#cpu_cgroup_can_attach_task\">cpu_cgroup_can_attach_task</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#threadgroup\">threadgroup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#c\">c</a>, &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread_group\">thread_group</a>, <a class=\"id\" href=\"#thread_group\">thread_group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#cpu_cgroup_can_attach_task\">cpu_cgroup_can_attach_task</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#cpu_cgroup_attach\">cpu_cgroup_attach</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#old_cont\">old_cont</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#threadgroup\">threadgroup</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_move_task\">sched_move_task</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#threadgroup\">threadgroup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#c\">c</a>, &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread_group\">thread_group</a>, <a class=\"id\" href=\"#thread_group\">thread_group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_move_task\">sched_move_task</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"static int <a class=\"id\" href=\"#cpu_shares_write_u64\">cpu_shares_write_u64</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cftype\">cftype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#shareval\">shareval</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sched_group_set_shares\">sched_group_set_shares</a>(<a class=\"id\" href=\"#cgroup_tg\">cgroup_tg</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>), <a class=\"id\" href=\"#shareval\">shareval</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cpu_shares_read_u64\">cpu_shares_read_u64</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a> = <a class=\"id\" href=\"#cgroup_tg\">cgroup_tg</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#shares\">shares</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FAIR_GROUP_SCHED */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"static int <a class=\"id\" href=\"#cpu_rt_runtime_write\">cpu_rt_runtime_write</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sched_group_set_rt_runtime\">sched_group_set_rt_runtime</a>(<a class=\"id\" href=\"#cgroup_tg\">cgroup_tg</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>), <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#cpu_rt_runtime_read\">cpu_rt_runtime_read</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sched_group_rt_runtime\">sched_group_rt_runtime</a>(<a class=\"id\" href=\"#cgroup_tg\">cgroup_tg</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cpu_rt_period_write_uint\">cpu_rt_period_write_uint</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cftype\">cftype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_period_us\">rt_period_us</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sched_group_set_rt_period\">sched_group_set_rt_period</a>(<a class=\"id\" href=\"#cgroup_tg\">cgroup_tg</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>), <a class=\"id\" href=\"#rt_period_us\">rt_period_us</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cpu_rt_period_read_uint\">cpu_rt_period_read_uint</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sched_group_rt_period\">sched_group_rt_period</a>(<a class=\"id\" href=\"#cgroup_tg\">cgroup_tg</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>));", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_RT_GROUP_SCHED */</span>", 
"", 
"static struct <a class=\"id\" href=\"#cftype\">cftype</a> <a class=\"id\" href=\"#cpu_files\">cpu_files</a>[] = {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"shares\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpu_shares_read_u64\">cpu_shares_read_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpu_shares_write_u64\">cpu_shares_write_u64</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"rt_runtime_us\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_s64\">read_s64</a> = <a class=\"id\" href=\"#cpu_rt_runtime_read\">cpu_rt_runtime_read</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_s64\">write_s64</a> = <a class=\"id\" href=\"#cpu_rt_runtime_write\">cpu_rt_runtime_write</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"rt_period_us\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpu_rt_period_read_uint\">cpu_rt_period_read_uint</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpu_rt_period_write_uint\">cpu_rt_period_write_uint</a>,", 
"<span class=\"ts\"/>},", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#cpu_cgroup_populate\">cpu_cgroup_populate</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cgroup_add_files\">cgroup_add_files</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#cpu_files\">cpu_files</a>, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#cpu_files\">cpu_files</a>));", 
"}", 
"", 
"struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> <a class=\"id\" href=\"#cpu_cgroup_subsys\">cpu_cgroup_subsys</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"cpu\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#create\">create</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_cgroup_create\">cpu_cgroup_create</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#destroy\">destroy</a><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_cgroup_destroy\">cpu_cgroup_destroy</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#can_attach\">can_attach</a><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_cgroup_can_attach\">cpu_cgroup_can_attach</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attach\">attach</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_cgroup_attach\">cpu_cgroup_attach</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#populate\">populate</a><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_cgroup_populate\">cpu_cgroup_populate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#subsys_id\">subsys_id</a><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_cgroup_subsys_id\">cpu_cgroup_subsys_id</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#early_init\">early_init</a><span class=\"ts\"/>= 1,", 
"};", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_CGROUP_SCHED */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_CPUACCT\">CONFIG_CGROUP_CPUACCT</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CPU accounting code for task groups.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on the work by Paul Menage (menage@google.com) and Balbir Singh</span>", 
"<span class=\"comment\"> * (balbir@in.ibm.com).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* track cpu usage of a group of tasks and its child groups */</span>", 
"struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> <a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* cpuusage holds pointer to a u64-type object on every cpu */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#cpuusage\">cpuusage</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#percpu_counter\">percpu_counter</a> <a class=\"id\" href=\"#cpustat\">cpustat</a>[<a class=\"id\" href=\"#CPUACCT_STAT_NSTATS\">CPUACCT_STAT_NSTATS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> <a class=\"id\" href=\"#cpuacct_subsys\">cpuacct_subsys</a>;", 
"", 
"<span class=\"comment\">/* return cpu accounting group corresponding to this container */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#cgroup_ca\">cgroup_ca</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#cpuacct_subsys_id\">cpuacct_subsys_id</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"<span class=\"comment\">/* return cpu accounting group to which this task belongs */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#task_ca\">task_ca</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#task_subsys_state\">task_subsys_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#cpuacct_subsys_id\">cpuacct_subsys_id</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"<span class=\"comment\">/* create a new cpu accounting group */</span>", 
"static struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#cpuacct_create\">cpuacct_create</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#ca\">ca</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ca\">ca</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpuusage\">cpuusage</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(<a class=\"id\" href=\"#u64\">u64</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpuusage\">cpuusage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_ca\">out_free_ca</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CPUACCT_STAT_NSTATS\">CPUACCT_STAT_NSTATS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#percpu_counter_init\">percpu_counter_init</a>(&amp;<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpustat\">cpustat</a>[<a class=\"id\" href=\"#i\">i</a>], 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_counters\">out_free_counters</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#cgroup_ca\">cgroup_ca</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#css\">css</a>;", 
"", 
"<a class=\"id\" href=\"#out_free_counters\">out_free_counters</a>:", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#i\">i</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_destroy\">percpu_counter_destroy</a>(&amp;<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpustat\">cpustat</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpuusage\">cpuusage</a>);", 
"<a class=\"id\" href=\"#out_free_ca\">out_free_ca</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ca\">ca</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"}", 
"", 
"<span class=\"comment\">/* destroy an existing cpu accounting group */</span>", 
"static void", 
"<a class=\"id\" href=\"#cpuacct_destroy\">cpuacct_destroy</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#cgroup_ca\">cgroup_ca</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CPUACCT_STAT_NSTATS\">CPUACCT_STAT_NSTATS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_destroy\">percpu_counter_destroy</a>(&amp;<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpustat\">cpustat</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpuusage\">cpuusage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ca\">ca</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cpuacct_cpuusage_read\">cpuacct_cpuusage_read</a>(struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#ca\">ca</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#cpuusage\">cpuusage</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpuusage\">cpuusage</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_64BIT\">CONFIG_64BIT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Take rq-&gt;lock to make 64-bit read safe on 32-bit platforms.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = *<a class=\"id\" href=\"#cpuusage\">cpuusage</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#lock\">lock</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = *<a class=\"id\" href=\"#cpuusage\">cpuusage</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cpuacct_cpuusage_write\">cpuacct_cpuusage_write</a>(struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#ca\">ca</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#cpuusage\">cpuusage</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpuusage\">cpuusage</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_64BIT\">CONFIG_64BIT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Take rq-&gt;lock to make 64-bit write safe on 32-bit platforms.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cpuusage\">cpuusage</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#lock\">lock</a>);", 
"#else", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cpuusage\">cpuusage</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* return total cpu usage (in nanoseconds) of a group */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cpuusage_read\">cpuusage_read</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#cgroup_ca\">cgroup_ca</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#totalcpuusage\">totalcpuusage</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_present_cpu\">for_each_present_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totalcpuusage\">totalcpuusage</a> += <a class=\"id\" href=\"#cpuacct_cpuusage_read\">cpuacct_cpuusage_read</a>(<a class=\"id\" href=\"#ca\">ca</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#totalcpuusage\">totalcpuusage</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cpuusage_write\">cpuusage_write</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cftype\">cftype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#reset\">reset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#cgroup_ca\">cgroup_ca</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reset\">reset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_present_cpu\">for_each_present_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuacct_cpuusage_write\">cpuacct_cpuusage_write</a>(<a class=\"id\" href=\"#ca\">ca</a>, <a class=\"id\" href=\"#i\">i</a>, 0);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cpuacct_percpu_seq_read\">cpuacct_percpu_seq_read</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#cgroup_ca\">cgroup_ca</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#percpu\">percpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_present_cpu\">for_each_present_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu\">percpu</a> = <a class=\"id\" href=\"#cpuacct_cpuusage_read\">cpuacct_cpuusage_read</a>(<a class=\"id\" href=\"#ca\">ca</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%llu \", (unsigned long long) <a class=\"id\" href=\"#percpu\">percpu</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const char *<a class=\"id\" href=\"#cpuacct_stat_desc\">cpuacct_stat_desc</a>[] = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#CPUACCT_STAT_USER\">CPUACCT_STAT_USER</a>] = \"user\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#CPUACCT_STAT_SYSTEM\">CPUACCT_STAT_SYSTEM</a>] = \"system\",", 
"};", 
"", 
"static int <a class=\"id\" href=\"#cpuacct_stats_show\">cpuacct_stats_show</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_map_cb\">cgroup_map_cb</a> *<a class=\"id\" href=\"#cb\">cb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#cgroup_ca\">cgroup_ca</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CPUACCT_STAT_NSTATS\">CPUACCT_STAT_NSTATS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#percpu_counter_read\">percpu_counter_read</a>(&amp;<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpustat\">cpustat</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#cputime64_to_clock_t\">cputime64_to_clock_t</a>(<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#cb\">cb</a>, <a class=\"id\" href=\"#cpuacct_stat_desc\">cpuacct_stat_desc</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cftype\">cftype</a> <a class=\"id\" href=\"#files\">files</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"usage\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpuusage_read\">cpuusage_read</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpuusage_write\">cpuusage_write</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"usage_percpu\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_seq_string\">read_seq_string</a> = <a class=\"id\" href=\"#cpuacct_percpu_seq_read\">cpuacct_percpu_seq_read</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"stat\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_map\">read_map</a> = <a class=\"id\" href=\"#cpuacct_stats_show\">cpuacct_stats_show</a>,", 
"<span class=\"ts\"/>},", 
"};", 
"", 
"static int <a class=\"id\" href=\"#cpuacct_populate\">cpuacct_populate</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cgroup_add_files\">cgroup_add_files</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#files\">files</a>, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#files\">files</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * charge this task's execution time to its accounting group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * called with rq-&gt;lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cpuacct_charge\">cpuacct_charge</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cputime\">cputime</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#ca\">ca</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cpuacct_subsys\">cpuacct_subsys</a>.<a class=\"id\" href=\"#active\">active</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#task_ca\">task_ca</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#ca\">ca</a>; <a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#cpuusage\">cpuusage</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cpuusage\">cpuusage</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cpuusage\">cpuusage</a> += <a class=\"id\" href=\"#cputime\">cputime</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When CONFIG_VIRT_CPU_ACCOUNTING is enabled one jiffy can be very large</span>", 
"<span class=\"comment\"> * in cputime_t units. As a result, cpuacct_update_stats calls</span>", 
"<span class=\"comment\"> * percpu_counter_add with values large enough to always overflow the</span>", 
"<span class=\"comment\"> * per cpu batch limit causing bad SMP scalability.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To fix this we scale percpu_counter_batch by cputime_one_jiffy so we</span>", 
"<span class=\"comment\"> * batch the same amount of time with CONFIG_VIRT_CPU_ACCOUNTING disabled</span>", 
"<span class=\"comment\"> * and enabled. We cap it at INT_MAX which is the largest allowed batch value.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPUACCT_BATCH\">CPUACCT_BATCH</a><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_t\">min_t</a>(long, <a class=\"id\" href=\"#percpu_counter_batch\">percpu_counter_batch</a> * <a class=\"id\" href=\"#cputime_one_jiffy\">cputime_one_jiffy</a>, <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPUACCT_BATCH\">CPUACCT_BATCH</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Charge the system/user time to the task's accounting group.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cpuacct_update_stats\">cpuacct_update_stats</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#cpuacct_stat_index\">cpuacct_stat_index</a> <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuacct\">cpuacct</a> *<a class=\"id\" href=\"#ca\">ca</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#batch\">batch</a> = <a class=\"id\" href=\"#CPUACCT_BATCH\">CPUACCT_BATCH</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cpuacct_subsys\">cpuacct_subsys</a>.<a class=\"id\" href=\"#active\">active</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
];
xr_frag_insert('l/7f/56beb897d5ec38b6f0a0f05e550e3fac98f39f.xr', __xr_tmp);
