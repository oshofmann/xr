var __xr_tmp = [
"<span class=\"comment\">/* zutil.h -- internal interface and configuration of the compression library</span>", 
"<span class=\"comment\"> * Copyright (C) 1995-1998 Jean-loup Gailly.</span>", 
"<span class=\"comment\"> * For conditions of distribution and use, see copyright notice in zlib.h</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* WARNING: this file should *not* be used by applications. It is</span>", 
"<span class=\"comment\">   part of the implementation of the compression library and is</span>", 
"<span class=\"comment\">   subject to change. Applications should only use zlib.h.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* @(#) $Id: zutil.h,v 1.1 2000/01/01 03:32:23 davem Exp $ */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_Z_UTIL_H\">_Z_UTIL_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_Z_UTIL_H\">_Z_UTIL_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#zlib\">zlib</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"typedef unsigned char  <a class=\"id\" href=\"#uch\">uch</a>;", 
"typedef unsigned short <a class=\"id\" href=\"#ush\">ush</a>;", 
"typedef unsigned long  <a class=\"id\" href=\"#ulg\">ulg</a>;", 
"", 
"        <span class=\"comment\">/* common constants */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STORED_BLOCK\">STORED_BLOCK</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATIC_TREES\">STATIC_TREES</a> 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DYN_TREES\">DYN_TREES</a>    2", 
"<span class=\"comment\">/* The three kinds of block type */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MIN_MATCH\">MIN_MATCH</a>  3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_MATCH\">MAX_MATCH</a>  258", 
"<span class=\"comment\">/* The minimum and maximum match lengths */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PRESET_DICT\">PRESET_DICT</a> 0x20 <span class=\"comment\">/* preset dictionary flag in zlib header */</span>", 
"", 
"        <span class=\"comment\">/* target dependencies */</span>", 
"", 
"        <span class=\"comment\">/* Common defaults */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#OS_CODE\">OS_CODE</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OS_CODE\">OS_CODE</a>  0x03  <span class=\"comment\">/* assume Unix */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"         <span class=\"comment\">/* functions */</span>", 
"", 
"typedef <a class=\"id\" href=\"#uLong\">uLong</a> (*<a class=\"id\" href=\"#check_func\">check_func</a>) (<a class=\"id\" href=\"#uLong\">uLong</a> <a class=\"id\" href=\"#check\">check</a>, const <a class=\"id\" href=\"#Byte\">Byte</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#uInt\">uInt</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"", 
"                        <span class=\"comment\">/* checksum functions */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BASE\">BASE</a> 65521L <span class=\"comment\">/* largest prime smaller than 65536 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NMAX\">NMAX</a> 5552", 
"<span class=\"comment\">/* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) &lt;= 2^32-1 */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO1\">DO1</a>(<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#i\">i</a>)  {<a class=\"id\" href=\"#s1\">s1</a> += <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#s2\">s2</a> += <a class=\"id\" href=\"#s1\">s1</a>;}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO2\">DO2</a>(<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#i\">i</a>)  <a class=\"id\" href=\"#DO1\">DO1</a>(<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#i\">i</a>); <a class=\"id\" href=\"#DO1\">DO1</a>(<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#i\">i</a>+1);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO4\">DO4</a>(<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#i\">i</a>)  <a class=\"id\" href=\"#DO2\">DO2</a>(<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#i\">i</a>); <a class=\"id\" href=\"#DO2\">DO2</a>(<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#i\">i</a>+2);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO8\">DO8</a>(<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#i\">i</a>)  <a class=\"id\" href=\"#DO4\">DO4</a>(<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#i\">i</a>); <a class=\"id\" href=\"#DO4\">DO4</a>(<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#i\">i</a>+4);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO16\">DO16</a>(<a class=\"id\" href=\"#buf\">buf</a>)   <a class=\"id\" href=\"#DO8\">DO8</a>(<a class=\"id\" href=\"#buf\">buf</a>,0); <a class=\"id\" href=\"#DO8\">DO8</a>(<a class=\"id\" href=\"#buf\">buf</a>,8);", 
"", 
"<span class=\"comment\">/* ========================================================================= */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">     Update a running Adler-32 checksum with the bytes buf[0..len-1] and</span>", 
"<span class=\"comment\">   return the updated checksum. If buf is NULL, this function returns</span>", 
"<span class=\"comment\">   the required initial value for the checksum.</span>", 
"<span class=\"comment\">   An Adler-32 checksum is almost as reliable as a CRC32 but can be computed</span>", 
"<span class=\"comment\">   much faster. Usage example:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">     uLong adler = adler32(0L, NULL, 0);</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">     while (read_buffer(buffer, length) != EOF) {</span>", 
"<span class=\"comment\">       adler = adler32(adler, buffer, length);</span>", 
"<span class=\"comment\">     }</span>", 
"<span class=\"comment\">     if (adler != original_adler) error();</span>", 
"<span class=\"comment\">*/</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#uLong\">uLong</a> <a class=\"id\" href=\"#zlib_adler32\">zlib_adler32</a>(<a class=\"id\" href=\"#uLong\">uLong</a> <a class=\"id\" href=\"#adler\">adler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const <a class=\"id\" href=\"#Byte\">Byte</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#uInt\">uInt</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"    unsigned long <a class=\"id\" href=\"#s1\">s1</a> = <a class=\"id\" href=\"#adler\">adler</a> &amp; 0xffff;", 
"    unsigned long <a class=\"id\" href=\"#s2\">s2</a> = (<a class=\"id\" href=\"#adler\">adler</a> >> 16) &amp; 0xffff;", 
"    int <a class=\"id\" href=\"#k\">k</a>;", 
"", 
"    if (<a class=\"id\" href=\"#buf\">buf</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) return 1L;", 
"", 
"    while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"        <a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#NMAX\">NMAX</a> ? <a class=\"id\" href=\"#len\">len</a> : <a class=\"id\" href=\"#NMAX\">NMAX</a>;", 
"        <a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#k\">k</a>;", 
"        while (<a class=\"id\" href=\"#k\">k</a> >= 16) {", 
"            <a class=\"id\" href=\"#DO16\">DO16</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#buf\">buf</a> += 16;", 
"            <a class=\"id\" href=\"#k\">k</a> -= 16;", 
"        }", 
"        if (<a class=\"id\" href=\"#k\">k</a> != 0) do {", 
"            <a class=\"id\" href=\"#s1\">s1</a> += *<a class=\"id\" href=\"#buf\">buf</a>++;", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#s2\">s2</a> += <a class=\"id\" href=\"#s1\">s1</a>;", 
"        } while (--<a class=\"id\" href=\"#k\">k</a>);", 
"        <a class=\"id\" href=\"#s1\">s1</a> %= <a class=\"id\" href=\"#BASE\">BASE</a>;", 
"        <a class=\"id\" href=\"#s2\">s2</a> %= <a class=\"id\" href=\"#BASE\">BASE</a>;", 
"    }", 
"    return (<a class=\"id\" href=\"#s2\">s2</a> << 16) | <a class=\"id\" href=\"#s1\">s1</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _Z_UTIL_H */</span>", 
];
xr_frag_insert('l/7f/9b068f3eb1680cf80c777e48b39d09df65ee7a.xr', __xr_tmp);
