var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_MEMORY_HOTPLUG_H\">__LINUX_MEMORY_HOTPLUG_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_MEMORY_HOTPLUG_H\">__LINUX_MEMORY_HOTPLUG_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmzone\">mmzone</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a>;", 
"struct <a class=\"id\" href=\"#zone\">zone</a>;", 
"struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a>;", 
"struct <a class=\"id\" href=\"#mem_section\">mem_section</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Types for free bootmem.</span>", 
"<span class=\"comment\"> * The normal smallest mapcount is -1. Here is smaller value than it.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTION_INFO\">SECTION_INFO</a><span class=\"ts\"/><span class=\"ts\"/>(-1 - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MIX_SECTION_INFO\">MIX_SECTION_INFO</a><span class=\"ts\"/>(-1 - 2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NODE_INFO\">NODE_INFO</a><span class=\"ts\"/><span class=\"ts\"/>(-1 - 3)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pgdat resizing functions</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#pgdat_resize_lock\">pgdat_resize_lock</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_size_lock\">node_size_lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#pgdat_resize_unlock\">pgdat_resize_unlock</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_size_lock\">node_size_lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#pgdat_resize_init\">pgdat_resize_init</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#pgdat\">pgdat</a>-><a class=\"id\" href=\"#node_size_lock\">node_size_lock</a>);", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Zone resizing functions</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#zone_span_seqbegin\">zone_span_seqbegin</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#span_seqlock\">span_seqlock</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#zone_span_seqretry\">zone_span_seqretry</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned <a class=\"id\" href=\"#iv\">iv</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#span_seqlock\">span_seqlock</a>, <a class=\"id\" href=\"#iv\">iv</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#zone_span_writelock\">zone_span_writelock</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_seqlock\">write_seqlock</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#span_seqlock\">span_seqlock</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#zone_span_writeunlock\">zone_span_writeunlock</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_sequnlock\">write_sequnlock</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#span_seqlock\">span_seqlock</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#zone_seqlock_init\">zone_seqlock_init</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seqlock_init\">seqlock_init</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#span_seqlock\">span_seqlock</a>);", 
"}", 
"extern int <a class=\"id\" href=\"#zone_grow_free_lists\">zone_grow_free_lists</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#new_nr_pages\">new_nr_pages</a>);", 
"extern int <a class=\"id\" href=\"#zone_grow_waitqueues\">zone_grow_waitqueues</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"extern int <a class=\"id\" href=\"#add_one_highpage\">add_one_highpage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#pfn\">pfn</a>, int <a class=\"id\" href=\"#bad_ppro\">bad_ppro</a>);", 
"<span class=\"comment\">/* need some defines for these for archs that don't support it */</span>", 
"extern void <a class=\"id\" href=\"#online_page\">online_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"comment\">/* VM interface that may be used by firmware interface */</span>", 
"extern int <a class=\"id\" href=\"#online_pages\">online_pages</a>(unsigned long, unsigned long);", 
"extern void <a class=\"id\" href=\"#__offline_isolated_pages\">__offline_isolated_pages</a>(unsigned long, unsigned long);", 
"", 
"<span class=\"comment\">/* reasonably generic interface to expand the physical pages in a zone  */</span>", 
"extern int <a class=\"id\" href=\"#__add_pages\">__add_pages</a>(int <a class=\"id\" href=\"#nid\">nid</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"extern int <a class=\"id\" href=\"#__remove_pages\">__remove_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"extern int <a class=\"id\" href=\"#memory_add_physaddr_to_nid\">memory_add_physaddr_to_nid</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#memory_add_physaddr_to_nid\">memory_add_physaddr_to_nid</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_ARCH_NODEDATA_EXTENSION\">CONFIG_HAVE_ARCH_NODEDATA_EXTENSION</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For supporting node-hotadd, we have to allocate a new pgdat.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If an arch has generic style NODE_DATA(),</span>", 
"<span class=\"comment\"> * node_data[nid] = kzalloc() works well. But it depends on the architecture.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In general, generic_alloc_nodedata() is used.</span>", 
"<span class=\"comment\"> * Now, arch_free_nodedata() is just defined for error path of node_hot_add.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#arch_alloc_nodedata\">arch_alloc_nodedata</a>(int <a class=\"id\" href=\"#nid\">nid</a>);", 
"extern void <a class=\"id\" href=\"#arch_free_nodedata\">arch_free_nodedata</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"extern void <a class=\"id\" href=\"#arch_refresh_nodedata\">arch_refresh_nodedata</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>);", 
"", 
"#else <span class=\"comment\">/* CONFIG_HAVE_ARCH_NODEDATA_EXTENSION */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_alloc_nodedata\">arch_alloc_nodedata</a>(<a class=\"id\" href=\"#nid\">nid</a>)<span class=\"ts\"/><a class=\"id\" href=\"#generic_alloc_nodedata\">generic_alloc_nodedata</a>(<a class=\"id\" href=\"#nid\">nid</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_free_nodedata\">arch_free_nodedata</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>)<span class=\"ts\"/><a class=\"id\" href=\"#generic_free_nodedata\">generic_free_nodedata</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If ARCH_HAS_NODEDATA_EXTENSION=n, this func is used to allocate pgdat.</span>", 
"<span class=\"comment\"> * XXX: kmalloc_node() can't work well to get new node's memory at this time.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Because, pgdat for the new node is not allocated/initialized yet itself.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>To use new node's memory, more consideration will be necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#generic_alloc_nodedata\">generic_alloc_nodedata</a>(<a class=\"id\" href=\"#nid\">nid</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This definition is just for error path in node hotadd.</span>", 
"<span class=\"comment\"> * For node hotremove, we have to replace this.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#generic_free_nodedata\">generic_free_nodedata</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>)<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"", 
"extern <a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#node_data\">node_data</a>[];", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#arch_refresh_nodedata\">arch_refresh_nodedata</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_data\">node_data</a>[<a class=\"id\" href=\"#nid\">nid</a>] = <a class=\"id\" href=\"#pgdat\">pgdat</a>;", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_NUMA */</span>", 
"", 
"<span class=\"comment\">/* never called */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#generic_alloc_nodedata\">generic_alloc_nodedata</a>(int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#generic_free_nodedata\">generic_free_nodedata</a>(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#arch_refresh_nodedata\">arch_refresh_nodedata</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HAVE_ARCH_NODEDATA_EXTENSION */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_VMEMMAP\">CONFIG_SPARSEMEM_VMEMMAP</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#register_page_bootmem_info_node\">register_page_bootmem_info_node</a>(struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#pgdat\">pgdat</a>)", 
];
xr_frag_insert('l/7f/a8ddfd1dd12f10bca215d6c58e149cd09b6f19.xr', __xr_tmp);
