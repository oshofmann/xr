var __xr_tmp = [
"<span class=\"comment\">/*  Generic MTRR (Memory Type Range Register) driver.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    Copyright (C) 1997-2000  Richard Gooch</span>", 
"<span class=\"comment\">    Copyright (c) 2002<span class=\"ts\"/>     Patrick Mochel</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    This library is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\">    modify it under the terms of the GNU Library General Public</span>", 
"<span class=\"comment\">    License as published by the Free Software Foundation; either</span>", 
"<span class=\"comment\">    version 2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    This library is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\">    Library General Public License for more details.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    You should have received a copy of the GNU Library General Public</span>", 
"<span class=\"comment\">    License along with this library; if not, write to the Free</span>", 
"<span class=\"comment\">    Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    Richard Gooch may be reached by email at  rgooch@atnf.csiro.au</span>", 
"<span class=\"comment\">    The postal address is:</span>", 
"<span class=\"comment\">      Richard Gooch, c/o ATNF, P. O. Box 76, Epping, N.S.W., 2121, Australia.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    Source: \"Pentium Pro Family Developer's Manual, Volume 3:</span>", 
"<span class=\"comment\">    Operating System Writer's Guide\" (Intel document number 242692),</span>", 
"<span class=\"comment\">    section 11.11.7</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    This was cleaned and made readable by Patrick Mochel &lt;mochel@osdl.org&gt;</span>", 
"<span class=\"comment\">    on 6-7 March 2002.</span>", 
"<span class=\"comment\">    Source: Intel Architecture Software Developers Manual, Volume 3:</span>", 
"<span class=\"comment\">    System Programming Guide; Section 9.11. (1997 edition - PPro).</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* FIXME: kvm_para.h needs this */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stop_machine\">stop_machine</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kvm_para\">kvm_para</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sort\">sort</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mtrr\">mtrr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#msr\">msr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"mtrr.h\"", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#num_var_ranges\">num_var_ranges</a>;", 
"", 
"unsigned int <a class=\"id\" href=\"#mtrr_usage_table\">mtrr_usage_table</a>[<a class=\"id\" href=\"#MTRR_MAX_VAR_RANGES\">MTRR_MAX_VAR_RANGES</a>];", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#mtrr_mutex\">mtrr_mutex</a>);", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size_or_mask\">size_or_mask</a>, <a class=\"id\" href=\"#size_and_mask\">size_and_mask</a>;", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mtrr_aps_delayed_init\">mtrr_aps_delayed_init</a>;", 
"", 
"static const struct <a class=\"id\" href=\"#mtrr_ops\">mtrr_ops</a> *<a class=\"id\" href=\"#mtrr_ops\">mtrr_ops</a>[<a class=\"id\" href=\"#X86_VENDOR_NUM\">X86_VENDOR_NUM</a>];", 
"", 
"const struct <a class=\"id\" href=\"#mtrr_ops\">mtrr_ops</a> *<a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>;", 
"", 
"static void <a class=\"id\" href=\"#set_mtrr\">set_mtrr</a>(unsigned int <a class=\"id\" href=\"#reg\">reg</a>, unsigned long <a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#mtrr_type\">mtrr_type</a> <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"void <a class=\"id\" href=\"#set_mtrr_ops\">set_mtrr_ops</a>(const struct <a class=\"id\" href=\"#mtrr_ops\">mtrr_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#vendor\">vendor</a> && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#vendor\">vendor</a> &lt; <a class=\"id\" href=\"#X86_VENDOR_NUM\">X86_VENDOR_NUM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_ops\">mtrr_ops</a>[<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#vendor\">vendor</a>] = <a class=\"id\" href=\"#ops\">ops</a>;", 
"}", 
"", 
"<span class=\"comment\">/*  Returns non-zero if we have the write-combining memory type  */</span>", 
"static int <a class=\"id\" href=\"#have_wrcomb\">have_wrcomb</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#rev\">rev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#pci_get_class\">pci_get_class</a>(<a class=\"id\" href=\"#PCI_CLASS_BRIDGE_HOST\">PCI_CLASS_BRIDGE_HOST</a> << 8, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ServerWorks LE chipsets &lt; rev 6 have problems with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * write-combining. Don't allow it and leave room for other</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * chipsets to be tagged</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a> == <a class=\"id\" href=\"#PCI_VENDOR_ID_SERVERWORKS\">PCI_VENDOR_ID_SERVERWORKS</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#PCI_DEVICE_ID_SERVERWORKS_LE\">PCI_DEVICE_ID_SERVERWORKS_LE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CLASS_REVISION\">PCI_CLASS_REVISION</a>, &amp;<a class=\"id\" href=\"#rev\">rev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rev\">rev</a> <= 5) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"mtrr: Serverworks LE rev < 6 detected. Write-combining disabled.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Intel 450NX errata # 23. Non ascending cacheline evictions to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * write combining memory may resulting in data corruption</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a> == <a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82451NX\">PCI_DEVICE_ID_INTEL_82451NX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"mtrr: Intel 450NX MMC detected. Write-combining disabled.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#have_wrcomb\">have_wrcomb</a> ? <a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#have_wrcomb\">have_wrcomb</a>() : 0;", 
"}", 
"", 
"<span class=\"comment\">/*  This function returns the number of variable MTRRs  */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_num_var_ranges\">set_num_var_ranges</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#config\">config</a> = 0, <a class=\"id\" href=\"#dummy\">dummy</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#use_intel\">use_intel</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_MTRRcap\">MSR_MTRRcap</a>, <a class=\"id\" href=\"#config\">config</a>, <a class=\"id\" href=\"#dummy\">dummy</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#is_cpu\">is_cpu</a>(<a class=\"id\" href=\"#AMD\">AMD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#config\">config</a> = 2;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#is_cpu\">is_cpu</a>(<a class=\"id\" href=\"#CYRIX\">CYRIX</a>) || <a class=\"id\" href=\"#is_cpu\">is_cpu</a>(<a class=\"id\" href=\"#CENTAUR\">CENTAUR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#config\">config</a> = 8;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_var_ranges\">num_var_ranges</a> = <a class=\"id\" href=\"#config\">config</a> &amp; 0xff;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_table\">init_table</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#num_var_ranges\">num_var_ranges</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max\">max</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_usage_table\">mtrr_usage_table</a>[<a class=\"id\" href=\"#i\">i</a>] = 1;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#set_mtrr_data\">set_mtrr_data</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#smp_base\">smp_base</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#smp_size\">smp_size</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#smp_reg\">smp_reg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_type\">mtrr_type</a><span class=\"ts\"/><a class=\"id\" href=\"#smp_type\">smp_type</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a>, <a class=\"id\" href=\"#mtrr_work\">mtrr_work</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mtrr_work_handler - Synchronisation handler. Executed by \"other\" CPUs.</span>", 
"<span class=\"comment\"> * @info: pointer to mtrr configuration data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mtrr_work_handler\">mtrr_work_handler</a>(void *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#set_mtrr_data\">set_mtrr_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#gate\">gate</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#gate\">gate</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*  The master has cleared me to execute  */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#smp_reg\">smp_reg</a> != ~0U) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#set\">set</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#smp_reg\">smp_reg</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#smp_base\">smp_base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#smp_size\">smp_size</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#smp_type\">smp_type</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#mtrr_aps_delayed_init\">mtrr_aps_delayed_init</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Initialize the MTRRs inaddition to the synchronisation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#set_all\">set_all</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#gate\">gate</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#types_compatible\">types_compatible</a>(<a class=\"id\" href=\"#mtrr_type\">mtrr_type</a> <a class=\"id\" href=\"#type1\">type1</a>, <a class=\"id\" href=\"#mtrr_type\">mtrr_type</a> <a class=\"id\" href=\"#type2\">type2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#type1\">type1</a> == <a class=\"id\" href=\"#MTRR_TYPE_UNCACHABLE\">MTRR_TYPE_UNCACHABLE</a> ||", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#type2\">type2</a> == <a class=\"id\" href=\"#MTRR_TYPE_UNCACHABLE\">MTRR_TYPE_UNCACHABLE</a> ||", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#type1\">type1</a> == <a class=\"id\" href=\"#MTRR_TYPE_WRTHROUGH\">MTRR_TYPE_WRTHROUGH</a> && <a class=\"id\" href=\"#type2\">type2</a> == <a class=\"id\" href=\"#MTRR_TYPE_WRBACK\">MTRR_TYPE_WRBACK</a>) ||", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#type1\">type1</a> == <a class=\"id\" href=\"#MTRR_TYPE_WRBACK\">MTRR_TYPE_WRBACK</a> && <a class=\"id\" href=\"#type2\">type2</a> == <a class=\"id\" href=\"#MTRR_TYPE_WRTHROUGH\">MTRR_TYPE_WRTHROUGH</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_mtrr - update mtrrs on all processors</span>", 
"<span class=\"comment\"> * @reg:<span class=\"ts\"/>mtrr in question</span>", 
"<span class=\"comment\"> * @base:<span class=\"ts\"/>mtrr base</span>", 
"<span class=\"comment\"> * @size:<span class=\"ts\"/>mtrr size</span>", 
"<span class=\"comment\"> * @type:<span class=\"ts\"/>mtrr type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is kinda tricky, but fortunately, Intel spelled it out for us cleanly:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1. Queue work to do the following on all processors:</span>", 
"<span class=\"comment\"> * 2. Disable Interrupts</span>", 
"<span class=\"comment\"> * 3. Wait for all procs to do so</span>", 
"<span class=\"comment\"> * 4. Enter no-fill cache mode</span>", 
"<span class=\"comment\"> * 5. Flush caches</span>", 
"<span class=\"comment\"> * 6. Clear PGE bit</span>", 
"<span class=\"comment\"> * 7. Flush all TLBs</span>", 
"<span class=\"comment\"> * 8. Disable all range registers</span>", 
"<span class=\"comment\"> * 9. Update the MTRRs</span>", 
"<span class=\"comment\"> * 10. Enable all range registers</span>", 
"<span class=\"comment\"> * 11. Flush all TLBs and caches again</span>", 
"<span class=\"comment\"> * 12. Enter normal cache mode and reenable caching</span>", 
"<span class=\"comment\"> * 13. Set PGE</span>", 
"<span class=\"comment\"> * 14. Wait for buddies to catch up</span>", 
"<span class=\"comment\"> * 15. Enable interrupts.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * What does that mean for us? Well, first we set data.count to the number</span>", 
"<span class=\"comment\"> * of CPUs. As each CPU announces that it started the rendezvous handler by</span>", 
"<span class=\"comment\"> * decrementing the count, We reset data.count and set the data.gate flag</span>", 
"<span class=\"comment\"> * allowing all the cpu's to proceed with the work. As each cpu disables</span>", 
"<span class=\"comment\"> * interrupts, it'll decrement data.count once. We wait until it hits 0 and</span>", 
"<span class=\"comment\"> * proceed. We clear the data.gate flag and reset data.count. Meanwhile, they</span>", 
"<span class=\"comment\"> * are waiting for that flag to be cleared. Once it's cleared, each</span>", 
"<span class=\"comment\"> * CPU goes through the transition of updating MTRRs.</span>", 
"<span class=\"comment\"> * The CPU vendors may each do it differently,</span>", 
"<span class=\"comment\"> * so we call mtrr_if-&gt;set() callback and let them take care of it.</span>", 
"<span class=\"comment\"> * When they're done, they again decrement data-&gt;count and wait for data.gate</span>", 
"<span class=\"comment\"> * to be set.</span>", 
"<span class=\"comment\"> * When we finish, we wait for data.count to hit 0 and toggle the data.gate flag</span>", 
"<span class=\"comment\"> * Everyone then enables interrupts and we all continue on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that the mechanism is the same for UP systems, too; all the SMP stuff</span>", 
"<span class=\"comment\"> * becomes nops.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#set_mtrr\">set_mtrr</a>(unsigned int <a class=\"id\" href=\"#reg\">reg</a>, unsigned long <a class=\"id\" href=\"#base\">base</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#mtrr_type\">mtrr_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#set_mtrr_data\">set_mtrr_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#smp_reg\">smp_reg</a> = <a class=\"id\" href=\"#reg\">reg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#smp_base\">smp_base</a> = <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#smp_size\">smp_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#smp_type\">smp_type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#num_booting_cpus\">num_booting_cpus</a>() - 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure data.count is visible before unleashing other CPUs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#gate\">gate</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Start the ball rolling on other CPUs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a> *<a class=\"id\" href=\"#work\">work</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#mtrr_work\">mtrr_work</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_one_cpu_nowait\">stop_one_cpu_nowait</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mtrr_work_handler\">mtrr_work_handler</a>, &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, reset count and toggle gate */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#num_booting_cpus\">num_booting_cpus</a>() - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#gate\">gate</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, reset count and toggle gate */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#num_booting_cpus\">num_booting_cpus</a>() - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#gate\">gate</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do our MTRR business */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * HACK!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use this same function to initialize the mtrrs on boot.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The state of the boot cpu's mtrrs has been saved, and we want</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to replicate across all the APs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're doing that @reg is set to something special...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a> != ~0U)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#set\">set</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#mtrr_aps_delayed_init\">mtrr_aps_delayed_init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#set_all\">set_all</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for the others */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#num_booting_cpus\">num_booting_cpus</a>() - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#gate\">gate</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait here for everyone to have seen the gate change</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So we're the last ones to touch 'data'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mtrr_add_page - Add a memory type region</span>", 
"<span class=\"comment\"> * @base: Physical base address of region in pages (in units of 4 kB!)</span>", 
"<span class=\"comment\"> * @size: Physical size of region in pages (4 kB)</span>", 
"<span class=\"comment\"> * @type: Type of MTRR desired</span>", 
"<span class=\"comment\"> * @increment: If this is true do usage counting on the region</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Memory type region registers control the caching on newer Intel and</span>", 
"<span class=\"comment\"> * non Intel processors. This function allows drivers to request an</span>", 
"<span class=\"comment\"> * MTRR is added. The details and hardware specifics of each processor's</span>", 
"<span class=\"comment\"> * implementation are hidden from the caller, but nevertheless the</span>", 
"<span class=\"comment\"> * caller should expect to need to provide a power of two size on an</span>", 
"<span class=\"comment\"> * equivalent power of two boundary.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the region cannot be added either because all regions are in use</span>", 
"<span class=\"comment\"> * or the CPU cannot support it a negative value is returned. On success</span>", 
"<span class=\"comment\"> * the register number for this entry is returned, but should be treated</span>", 
"<span class=\"comment\"> * as a cookie only.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On a multiprocessor machine the changes are made to all processors.</span>", 
"<span class=\"comment\"> * This is required on x86 by the Intel processors.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The available types are</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %MTRR_TYPE_UNCACHABLE - No caching</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %MTRR_TYPE_WRBACK - Write data back in bursts whenever</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %MTRR_TYPE_WRCOMB - Write data back soon but allow bursts</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %MTRR_TYPE_WRTHROUGH - Cache reads but not writes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * BUGS: Needs a quiet flag for the cases where drivers do not mind</span>", 
"<span class=\"comment\"> * failures and do not wish system log messages to be sent.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mtrr_add_page\">mtrr_add_page</a>(unsigned long <a class=\"id\" href=\"#base\">base</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#increment\">increment</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lbase\">lbase</a>, <a class=\"id\" href=\"#lsize\">lsize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#replace\">replace</a>, <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_type\">mtrr_type</a> <a class=\"id\" href=\"#ltype\">ltype</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#validate_add_page\">validate_add_page</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> >= <a class=\"id\" href=\"#MTRR_NUM_TYPES\">MTRR_NUM_TYPES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"mtrr: type: %u invalid\\n\", <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the type is WC, check that this processor supports it */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#MTRR_TYPE_WRCOMB\">MTRR_TYPE_WRCOMB</a>) && !<a class=\"id\" href=\"#have_wrcomb\">have_wrcomb</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"mtrr: your processor doesn't support write-combining\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"mtrr: zero sized request\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> &amp; <a class=\"id\" href=\"#size_or_mask\">size_or_mask</a> || <a class=\"id\" href=\"#size\">size</a> &amp; <a class=\"id\" href=\"#size_or_mask\">size_or_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"mtrr: base or size exceeds the MTRR width\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#replace\">replace</a> = -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No CPU hotplug when we change MTRR entries */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Search for existing MTRR  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#mtrr_mutex\">mtrr_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_var_ranges\">num_var_ranges</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_if\">mtrr_if</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#lbase\">lbase</a>, &amp;<a class=\"id\" href=\"#lsize\">lsize</a>, &amp;<a class=\"id\" href=\"#ltype\">ltype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#lsize\">lsize</a> || <a class=\"id\" href=\"#base\">base</a> &gt; <a class=\"id\" href=\"#lbase\">lbase</a> + <a class=\"id\" href=\"#lsize\">lsize</a> - 1 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#size\">size</a> - 1 &lt; <a class=\"id\" href=\"#lbase\">lbase</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * At this point we know there is some kind of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * overlap/enclosure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> &lt; <a class=\"id\" href=\"#lbase\">lbase</a> || <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#size\">size</a> - 1 &gt; <a class=\"id\" href=\"#lbase\">lbase</a> + <a class=\"id\" href=\"#lsize\">lsize</a> - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> <= <a class=\"id\" href=\"#lbase\">lbase</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#size\">size</a> - 1 >= <a class=\"id\" href=\"#lbase\">lbase</a> + <a class=\"id\" href=\"#lsize\">lsize</a> - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  New region encloses an existing region  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ltype\">ltype</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#replace\">replace</a> = <a class=\"id\" href=\"#replace\">replace</a> == -1 ? <a class=\"id\" href=\"#i\">i</a> : -2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#types_compatible\">types_compatible</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#ltype\">ltype</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"mtrr: 0x%lx000,0x%lx000 overlaps existing\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" 0x%lx000,0x%lx000\\n\", <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#lbase\">lbase</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lsize\">lsize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* New region is enclosed by an existing region */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ltype\">ltype</a> != <a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#types_compatible\">types_compatible</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#ltype\">ltype</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"mtrr: type mismatch for %lx000,%lx000 old: %s new: %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#mtrr_attrib_to_str\">mtrr_attrib_to_str</a>(<a class=\"id\" href=\"#ltype\">ltype</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtrr_attrib_to_str\">mtrr_attrib_to_str</a>(<a class=\"id\" href=\"#type\">type</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
];
xr_frag_insert('l/80/1c670150604e44faf1e91d9dff8838c79fbe73.xr', __xr_tmp);
