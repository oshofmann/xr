var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/ext2/inode.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1992, 1993, 1994, 1995</span>", 
"<span class=\"comment\"> * Remy Card (card@masi.ibp.fr)</span>", 
"<span class=\"comment\"> * Laboratoire MASI - Institut Blaise Pascal</span>", 
"<span class=\"comment\"> * Universite Pierre et Marie Curie (Paris VI)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/fs/minix/inode.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Goal-directed block allocation by Stephen Tweedie</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>(sct@dcs.ed.ac.uk), 1993, 1998</span>", 
"<span class=\"comment\"> *  Big-endian to little-endian byte-swapping/bitmaps by</span>", 
"<span class=\"comment\"> *        David S. Miller (davem@caip.rutgers.edu), 1995</span>", 
"<span class=\"comment\"> *  64-bit file support on 64-bit platforms by Jakub Jelinek</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>(jj@sunsite.ms.mff.cuni.cz)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Assorted race fixes, rewrite of ext2_get_block() by Al Viro, 2000</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highuid\">highuid</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mpage\">mpage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"ext2.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acl.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"xip.h\"", 
"", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Remy Card and others\");", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"Second Extended Filesystem\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"", 
"static int <a class=\"id\" href=\"#__ext2_write_inode\">__ext2_write_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#do_sync\">do_sync</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test whether an inode is a fast symlink.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ext2_inode_is_fast_symlink\">ext2_inode_is_fast_symlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ea_blocks\">ea_blocks</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> >> 9) : 0;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> - <a class=\"id\" href=\"#ea_blocks\">ea_blocks</a> == 0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext2_truncate_blocks\">ext2_truncate_blocks</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"static void <a class=\"id\" href=\"#ext2_write_failed\">ext2_write_failed</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#truncate_pagecache\">truncate_pagecache</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_truncate_blocks\">ext2_truncate_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called at the last iput() if i_nlink is zero.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext2_evict_inode\">ext2_evict_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_block_alloc_info\">ext2_block_alloc_info</a> *<a class=\"id\" href=\"#rsv\">rsv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#want_delete\">want_delete</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> && !<a class=\"id\" href=\"#is_bad_inode\">is_bad_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#want_delete\">want_delete</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_initialize\">dquot_initialize</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_drop\">dquot_drop</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#want_delete\">want_delete</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set dtime */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_dtime\">i_dtime</a><span class=\"ts\"/>= <a class=\"id\" href=\"#get_seconds\">get_seconds</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ext2_write_inode\">__ext2_write_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#inode_needs_sync\">inode_needs_sync</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* truncate to 0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_truncate_blocks\">ext2_truncate_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#invalidate_inode_buffers\">invalidate_inode_buffers</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_writeback\">end_writeback</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_discard_reservation\">ext2_discard_reservation</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rsv\">rsv</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#rsv\">rsv</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#want_delete\">want_delete</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_inode\">ext2_free_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"typedef struct {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"} <a class=\"id\" href=\"#Indirect\">Indirect</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_chain\">add_chain</a>(<a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a> = *(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#verify_chain\">verify_chain</a>(<a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#from\">from</a> <= <a class=\"id\" href=\"#to\">to</a> && <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#key\">key</a> == *<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a>++;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#from\">from</a> &gt; <a class=\"id\" href=\"#to\">to</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_block_to_path - parse the block number into array of offsets</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: inode in question (we are only interested in its superblock)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@i_block: block number to be parsed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: array to store the offsets in</span>", 
"<span class=\"comment\"> *      @boundary: set this non-zero if the referred-to block is likely to be</span>", 
"<span class=\"comment\"> *             followed (on disk) by an indirect block.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>To store the locations of file's data ext2 uses a data structure common</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for UNIX filesystems - tree of pointers anchored in the inode, with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>data blocks at leaves and indirect blocks in intermediate nodes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function translates the block number into path in that tree -</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>return value is the path length and @offsets[n] is the offset of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pointer to (n+1)th node in the nth one. If @block is out of range</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(negative or too large) warning is printed and zero returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: function doesn't find node addresses, so no IO is needed. All</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>we need to know is the capacity of indirect blocks (taken from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>inode-&gt;i_sb).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Portability note: the last comparison (check that we fit into triple</span>", 
"<span class=\"comment\"> * indirect block) is spelled differently, because otherwise on an</span>", 
"<span class=\"comment\"> * architecture with 32-bit longs and 8Kb pages we might get into trouble</span>", 
"<span class=\"comment\"> * if our filesystem had 8Kb blocks. We might use long long, but that would</span>", 
"<span class=\"comment\"> * kill us on x86. Oh, well, at least the sign propagation does not matter -</span>", 
"<span class=\"comment\"> * i_block would have to be negative in the very beginning, so we would not</span>", 
"<span class=\"comment\"> * get there at all.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#ext2_block_to_path\">ext2_block_to_path</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#i_block\">i_block</a>, int <a class=\"id\" href=\"#offsets\">offsets</a>[4], int *<a class=\"id\" href=\"#boundary\">boundary</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ptrs\">ptrs</a> = <a class=\"id\" href=\"#EXT2_ADDR_PER_BLOCK\">EXT2_ADDR_PER_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> = <a class=\"id\" href=\"#EXT2_ADDR_PER_BLOCK_BITS\">EXT2_ADDR_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>const long <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a> = <a class=\"id\" href=\"#EXT2_NDIR_BLOCKS\">EXT2_NDIR_BLOCKS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#indirect_blocks\">indirect_blocks</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_blocks\">double_blocks</a> = (1 << (<a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> * 2));", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#final\">final</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i_block\">i_block</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_msg\">ext2_msg</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"warning: %s: block < 0\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#i_block\">i_block</a> &lt; <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a>;", 
"<span class=\"ts\"/>} else if ( (<a class=\"id\" href=\"#i_block\">i_block</a> -= <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a>) &lt; <a class=\"id\" href=\"#indirect_blocks\">indirect_blocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#EXT2_IND_BLOCK\">EXT2_IND_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>;", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#i_block\">i_block</a> -= <a class=\"id\" href=\"#indirect_blocks\">indirect_blocks</a>) &lt; <a class=\"id\" href=\"#double_blocks\">double_blocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#EXT2_DIND_BLOCK\">EXT2_DIND_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> >> <a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>;", 
"<span class=\"ts\"/>} else if (((<a class=\"id\" href=\"#i_block\">i_block</a> -= <a class=\"id\" href=\"#double_blocks\">double_blocks</a>) >> (<a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> * 2)) &lt; <a class=\"id\" href=\"#ptrs\">ptrs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#EXT2_TIND_BLOCK\">EXT2_TIND_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> >> (<a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> * 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = (<a class=\"id\" href=\"#i_block\">i_block</a> >> <a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a>) &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_msg\">ext2_msg</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"warning: %s: block is too big\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boundary\">boundary</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#boundary\">boundary</a> = <a class=\"id\" href=\"#final\">final</a> - 1 - (<a class=\"id\" href=\"#i_block\">i_block</a> &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_get_branch - read the chain of indirect blocks leading to data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: inode in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@depth: depth of the chain (1 - direct pointer, etc.)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: offsets of pointers in inode/indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chain: place to store the result</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@err: here we store the error value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Function fills the array of triples &lt;key, p, bh&gt; and returns %NULL</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if everything went OK or the pointer to the last filled triple</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(incomplete one) otherwise. Upon the return chain[i].key contains</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the number of (i+1)-th block in the chain (as it is stored in memory,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>i.e. little-endian 32-bit), chain[i].p contains the address of that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>number (it points into struct inode for i==0 and into the bh-&gt;b_data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for i&gt;0) and chain[i].bh points to the buffer_head of i-th indirect</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>block for i&gt;0 and NULL for i==0. In other words, it holds the block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>numbers of the chain, addresses they were taken from (and where we can</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>verify that chain did not change) and buffer_heads hosting these</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>numbers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Function stops when it stumbles upon zero pointer (absent block)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>(pointer to last triple returned, *@err == 0)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or when it gets an IO error reading an indirect block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>(ditto, *@err == -EIO)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or when it notices that chain had been changed while it was reading</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>(ditto, *@err == -EAGAIN)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or when it reads all @depth-1 indirect blocks successfully and finds</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the whole chain, all way to the data (returns %NULL, *err == 0).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#ext2_get_branch\">ext2_get_branch</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#depth\">depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int *<a class=\"id\" href=\"#offsets\">offsets</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int *<a class=\"id\" href=\"#err\">err</a>)", 
];
xr_frag_insert('l/80/2cc297c908cf5e5c61890c0de4770d11b67e3a.xr', __xr_tmp);
