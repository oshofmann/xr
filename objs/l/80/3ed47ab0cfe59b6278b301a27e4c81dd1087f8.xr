var __xr_tmp = [
"<span class=\"comment\">/* inflate.c -- zlib decompression</span>", 
"<span class=\"comment\"> * Copyright (C) 1995-2005 Mark Adler</span>", 
"<span class=\"comment\"> * For conditions of distribution and use, see copyright notice in zlib.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on zlib 1.2.3 but modified for the Linux Kernel by</span>", 
"<span class=\"comment\"> * Richard Purdie &lt;richard@openedhand.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Changes mainly for static instead of dynamic memory allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#zutil\">zutil</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"inftrees.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"inflate.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"inffast.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"infutil.h\"", 
"", 
"int <a class=\"id\" href=\"#zlib_inflate_workspacesize\">zlib_inflate_workspacesize</a>(void)", 
"{", 
"    return sizeof(struct <a class=\"id\" href=\"#inflate_workspace\">inflate_workspace</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#zlib_inflateReset\">zlib_inflateReset</a>(<a class=\"id\" href=\"#z_streamp\">z_streamp</a> <a class=\"id\" href=\"#strm\">strm</a>)", 
"{", 
"    struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"    if (<a class=\"id\" href=\"#strm\">strm</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"    <a class=\"id\" href=\"#state\">state</a> = (struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *)<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#total_in\">total_in</a> = <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#total_out\">total_out</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#total\">total</a> = 0;", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#adler\">adler</a> = 1;        <span class=\"comment\">/* to support ill-conceived Java test suite */</span>", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#HEAD\">HEAD</a>;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#last\">last</a> = 0;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#havedict\">havedict</a> = 0;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#dmax\">dmax</a> = 32768U;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#hold\">hold</a> = 0;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> = 0;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lencode\">lencode</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#distcode\">distcode</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#codes\">codes</a>;", 
"", 
"    <span class=\"comment\">/* Initialise Window */</span>", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a> = 1U << <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wbits\">wbits</a>;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a> = 0;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#whave\">whave</a> = 0;", 
"", 
"    return <a class=\"id\" href=\"#Z_OK\">Z_OK</a>;", 
"}", 
"", 
"#if 0", 
"int <a class=\"id\" href=\"#zlib_inflatePrime\">zlib_inflatePrime</a>(<a class=\"id\" href=\"#z_streamp\">z_streamp</a> <a class=\"id\" href=\"#strm\">strm</a>, int <a class=\"id\" href=\"#bits\">bits</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"    struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"    if (<a class=\"id\" href=\"#strm\">strm</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"    <a class=\"id\" href=\"#state\">state</a> = (struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *)<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"    if (<a class=\"id\" href=\"#bits\">bits</a> &gt; 16 || <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> + <a class=\"id\" href=\"#bits\">bits</a> &gt; 32) return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"    <a class=\"id\" href=\"#value\">value</a> &= (1L << <a class=\"id\" href=\"#bits\">bits</a>) - 1;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#hold\">hold</a> += <a class=\"id\" href=\"#value\">value</a> << <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a>;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> += <a class=\"id\" href=\"#bits\">bits</a>;", 
"    return <a class=\"id\" href=\"#Z_OK\">Z_OK</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#zlib_inflateInit2\">zlib_inflateInit2</a>(<a class=\"id\" href=\"#z_streamp\">z_streamp</a> <a class=\"id\" href=\"#strm\">strm</a>, int <a class=\"id\" href=\"#windowBits\">windowBits</a>)", 
"{", 
"    struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"    if (<a class=\"id\" href=\"#strm\">strm</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;                 <span class=\"comment\">/* in case we return an error */</span>", 
"", 
"    <a class=\"id\" href=\"#state\">state</a> = &amp;<a class=\"id\" href=\"#WS\">WS</a>(<a class=\"id\" href=\"#strm\">strm</a>)-><a class=\"id\" href=\"#inflate_state\">inflate_state</a>;", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a> = (struct <a class=\"id\" href=\"#internal_state\">internal_state</a> *)<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"    if (<a class=\"id\" href=\"#windowBits\">windowBits</a> &lt; 0) {", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wrap\">wrap</a> = 0;", 
"        <a class=\"id\" href=\"#windowBits\">windowBits</a> = -<a class=\"id\" href=\"#windowBits\">windowBits</a>;", 
"    }", 
"    else {", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wrap\">wrap</a> = (<a class=\"id\" href=\"#windowBits\">windowBits</a> >> 4) + 1;", 
"    }", 
"    if (<a class=\"id\" href=\"#windowBits\">windowBits</a> &lt; 8 || <a class=\"id\" href=\"#windowBits\">windowBits</a> &gt; 15) {", 
"        return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"    }", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wbits\">wbits</a> = (unsigned)<a class=\"id\" href=\"#windowBits\">windowBits</a>;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#window\">window</a> = &amp;<a class=\"id\" href=\"#WS\">WS</a>(<a class=\"id\" href=\"#strm\">strm</a>)-><a class=\"id\" href=\"#working_window\">working_window</a>[0];", 
"", 
"    return <a class=\"id\" href=\"#zlib_inflateReset\">zlib_inflateReset</a>(<a class=\"id\" href=\"#strm\">strm</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   Return state with length and distance decoding tables and index sizes set to</span>", 
"<span class=\"comment\">   fixed code decoding.  This returns fixed tables from inffixed.h.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#zlib_fixedtables\">zlib_fixedtables</a>(struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"#   <a class=\"id\" href=\"#include\">include</a> \"inffixed.h\"", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lencode\">lencode</a> = <a class=\"id\" href=\"#lenfix\">lenfix</a>;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lenbits\">lenbits</a> = 9;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#distcode\">distcode</a> = <a class=\"id\" href=\"#distfix\">distfix</a>;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#distbits\">distbits</a> = 5;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   Update the window with the last wsize (normally 32K) bytes written before</span>", 
"<span class=\"comment\">   returning. This is only called when a window is already in use, or when</span>", 
"<span class=\"comment\">   output has been written during this inflate call, but the end of the deflate</span>", 
"<span class=\"comment\">   stream has not been reached yet. It is also called to window dictionary data</span>", 
"<span class=\"comment\">   when a dictionary is loaded.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Providing output buffers larger than 32K to inflate() should provide a speed</span>", 
"<span class=\"comment\">   advantage, since only the last 32K of output is copied to the sliding window</span>", 
"<span class=\"comment\">   upon return from inflate(), and since all distances after the first 32K of</span>", 
"<span class=\"comment\">   output will fall in the output data, making match copies simpler and faster.</span>", 
"<span class=\"comment\">   The advantage may be dependent on the size of the processor's data caches.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#zlib_updatewindow\">zlib_updatewindow</a>(<a class=\"id\" href=\"#z_streamp\">z_streamp</a> <a class=\"id\" href=\"#strm\">strm</a>, unsigned <a class=\"id\" href=\"#out\">out</a>)", 
"{", 
"    struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"    unsigned <a class=\"id\" href=\"#copy\">copy</a>, <a class=\"id\" href=\"#dist\">dist</a>;", 
"", 
"    <a class=\"id\" href=\"#state\">state</a> = (struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *)<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"", 
"    <span class=\"comment\">/* copy state-&gt;wsize or less output bytes into the circular window */</span>", 
"    <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#out\">out</a> - <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a>;", 
"    if (<a class=\"id\" href=\"#copy\">copy</a> >= <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>) {", 
"        <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#window\">window</a>, <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_out\">next_out</a> - <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>);", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a> = 0;", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#whave\">whave</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>;", 
"    }", 
"    else {", 
"        <a class=\"id\" href=\"#dist\">dist</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a> - <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a>;", 
"        if (<a class=\"id\" href=\"#dist\">dist</a> &gt; <a class=\"id\" href=\"#copy\">copy</a>) <a class=\"id\" href=\"#dist\">dist</a> = <a class=\"id\" href=\"#copy\">copy</a>;", 
"        <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#window\">window</a> + <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_out\">next_out</a> - <a class=\"id\" href=\"#copy\">copy</a>, <a class=\"id\" href=\"#dist\">dist</a>);", 
"        <a class=\"id\" href=\"#copy\">copy</a> -= <a class=\"id\" href=\"#dist\">dist</a>;", 
"        if (<a class=\"id\" href=\"#copy\">copy</a>) {", 
"            <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#window\">window</a>, <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_out\">next_out</a> - <a class=\"id\" href=\"#copy\">copy</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#copy\">copy</a>;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#whave\">whave</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>;", 
"        }", 
"        else {", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a> += <a class=\"id\" href=\"#dist\">dist</a>;", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a> == <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>) <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a> = 0;", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#whave\">whave</a> &lt; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>) <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#whave\">whave</a> += <a class=\"id\" href=\"#dist\">dist</a>;", 
"        }", 
"    }", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * At the end of a Deflate-compressed PPP packet, we expect to have seen</span>", 
"<span class=\"comment\"> * a `stored' block type value but not the (zero) length bytes.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   Returns true if inflate is currently at the end of a block generated by</span>", 
"<span class=\"comment\">   Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP</span>", 
"<span class=\"comment\">   implementation to provide an additional safety check. PPP uses</span>", 
"<span class=\"comment\">   Z_SYNC_FLUSH but removes the length bytes of the resulting empty stored</span>", 
"<span class=\"comment\">   block. When decompressing, PPP checks that at the end of input packet,</span>", 
"<span class=\"comment\">   inflate is waiting for these length bytes.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#zlib_inflateSyncPacket\">zlib_inflateSyncPacket</a>(<a class=\"id\" href=\"#z_streamp\">z_streamp</a> <a class=\"id\" href=\"#strm\">strm</a>)", 
"{", 
"    struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"    if (<a class=\"id\" href=\"#strm\">strm</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"    <a class=\"id\" href=\"#state\">state</a> = (struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *)<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"", 
"    if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#STORED\">STORED</a> && <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> == 0) {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TYPE\">TYPE</a>;", 
"        return <a class=\"id\" href=\"#Z_OK\">Z_OK</a>;", 
"    }", 
"    return <a class=\"id\" href=\"#Z_DATA_ERROR\">Z_DATA_ERROR</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Macros for inflate(): */</span>", 
"", 
"<span class=\"comment\">/* check function to use adler32() for zlib or crc32() for gzip */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UPDATE\">UPDATE</a>(<a class=\"id\" href=\"#check\">check</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>) <a class=\"id\" href=\"#zlib_adler32\">zlib_adler32</a>(<a class=\"id\" href=\"#check\">check</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>)", 
"", 
"<span class=\"comment\">/* Load registers with state in inflate() for speed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOAD\">LOAD</a>() \\", 
"    do { \\", 
"        <a class=\"id\" href=\"#put\">put</a> = <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_out\">next_out</a>; \\", 
"        <a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a>; \\", 
"        <a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_in\">next_in</a>; \\", 
"        <a class=\"id\" href=\"#have\">have</a> = <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a>; \\", 
"        <a class=\"id\" href=\"#hold\">hold</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#hold\">hold</a>; \\", 
"        <a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a>; \\", 
"    } while (0)", 
"", 
"<span class=\"comment\">/* Restore state from registers in inflate() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RESTORE\">RESTORE</a>() \\", 
"    do { \\", 
"        <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_out\">next_out</a> = <a class=\"id\" href=\"#put\">put</a>; \\", 
"        <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a> = <a class=\"id\" href=\"#left\">left</a>; \\", 
"        <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_in\">next_in</a> = <a class=\"id\" href=\"#next\">next</a>; \\", 
"        <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a> = <a class=\"id\" href=\"#have\">have</a>; \\", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#hold\">hold</a> = <a class=\"id\" href=\"#hold\">hold</a>; \\", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#bits\">bits</a>; \\", 
"    } while (0)", 
"", 
"<span class=\"comment\">/* Clear the input bit accumulator */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INITBITS\">INITBITS</a>() \\", 
"    do { \\", 
"        <a class=\"id\" href=\"#hold\">hold</a> = 0; \\", 
"        <a class=\"id\" href=\"#bits\">bits</a> = 0; \\", 
"    } while (0)", 
"", 
"<span class=\"comment\">/* Get a byte of input into the bit accumulator, or return from inflate()</span>", 
"<span class=\"comment\">   if there is no input available. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PULLBYTE\">PULLBYTE</a>() \\", 
"    do { \\", 
"        if (<a class=\"id\" href=\"#have\">have</a> == 0) goto <a class=\"id\" href=\"#inf_leave\">inf_leave</a>; \\", 
"        <a class=\"id\" href=\"#have\">have</a>--; \\", 
"        <a class=\"id\" href=\"#hold\">hold</a> += (unsigned long)(*<a class=\"id\" href=\"#next\">next</a>++) << <a class=\"id\" href=\"#bits\">bits</a>; \\", 
"        <a class=\"id\" href=\"#bits\">bits</a> += 8; \\", 
"    } while (0)", 
"", 
"<span class=\"comment\">/* Assure that there are at least n bits in the bit accumulator.  If there is</span>", 
"<span class=\"comment\">   not enough available input to do that, then return from inflate(). */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(<a class=\"id\" href=\"#n\">n</a>) \\", 
"    do { \\", 
"        while (<a class=\"id\" href=\"#bits\">bits</a> &lt; (unsigned)(<a class=\"id\" href=\"#n\">n</a>)) \\", 
"            <a class=\"id\" href=\"#PULLBYTE\">PULLBYTE</a>(); \\", 
"    } while (0)", 
"", 
"<span class=\"comment\">/* Return the low n bits of the bit accumulator (n &lt; 16) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BITS\">BITS</a>(<a class=\"id\" href=\"#n\">n</a>) \\", 
"    ((unsigned)<a class=\"id\" href=\"#hold\">hold</a> &amp; ((1U << (<a class=\"id\" href=\"#n\">n</a>)) - 1))", 
"", 
"<span class=\"comment\">/* Remove n bits from the bit accumulator */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(<a class=\"id\" href=\"#n\">n</a>) \\", 
"    do { \\", 
"        <a class=\"id\" href=\"#hold\">hold</a> >>= (<a class=\"id\" href=\"#n\">n</a>); \\", 
"        <a class=\"id\" href=\"#bits\">bits</a> -= (unsigned)(<a class=\"id\" href=\"#n\">n</a>); \\", 
"    } while (0)", 
"", 
"<span class=\"comment\">/* Remove zero to seven bits as needed to go to a byte boundary */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BYTEBITS\">BYTEBITS</a>() \\", 
"    do { \\", 
"        <a class=\"id\" href=\"#hold\">hold</a> >>= <a class=\"id\" href=\"#bits\">bits</a> &amp; 7; \\", 
"        <a class=\"id\" href=\"#bits\">bits</a> -= <a class=\"id\" href=\"#bits\">bits</a> &amp; 7; \\", 
"    } while (0)", 
"", 
"<span class=\"comment\">/* Reverse the bytes in a 32-bit value */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REVERSE\">REVERSE</a>(<a class=\"id\" href=\"#q\">q</a>) \\", 
"    ((((<a class=\"id\" href=\"#q\">q</a>) >> 24) &amp; 0xff) + (((<a class=\"id\" href=\"#q\">q</a>) >> 8) &amp; 0xff00) + \\", 
"     (((<a class=\"id\" href=\"#q\">q</a>) &amp; 0xff00) << 8) + (((<a class=\"id\" href=\"#q\">q</a>) &amp; 0xff) << 24))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   inflate() uses a state machine to process as much input data and generate as</span>", 
"<span class=\"comment\">   much output data as possible before returning.  The state machine is</span>", 
"<span class=\"comment\">   structured roughly as follows:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    for (;;) switch (state) {</span>", 
"<span class=\"comment\">    ...</span>", 
"<span class=\"comment\">    case STATEn:</span>", 
"<span class=\"comment\">        if (not enough input data or output space to make progress)</span>", 
"<span class=\"comment\">            return;</span>", 
"<span class=\"comment\">        ... make progress ...</span>", 
"<span class=\"comment\">        state = STATEm;</span>", 
"<span class=\"comment\">        break;</span>", 
"<span class=\"comment\">    ...</span>", 
"<span class=\"comment\">    }</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   so when inflate() is called again, the same case is attempted again, and</span>", 
"<span class=\"comment\">   if the appropriate resources are provided, the machine proceeds to the</span>", 
"<span class=\"comment\">   next state.  The NEEDBITS() macro is usually the way the state evaluates</span>", 
"<span class=\"comment\">   whether it can proceed or should return.  NEEDBITS() does the return if</span>", 
"<span class=\"comment\">   the requested bits are not available.  The typical use of the BITS macros</span>", 
"<span class=\"comment\">   is:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">        NEEDBITS(n);</span>", 
"<span class=\"comment\">        ... do something with BITS(n) ...</span>", 
"<span class=\"comment\">        DROPBITS(n);</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   where NEEDBITS(n) either returns from inflate() if there isn't enough</span>", 
"<span class=\"comment\">   input left to load n bits into the accumulator, or it continues.  BITS(n)</span>", 
"<span class=\"comment\">   gives the low n bits in the accumulator.  When done, DROPBITS(n) drops</span>", 
"<span class=\"comment\">   the low n bits off the accumulator.  INITBITS() clears the accumulator</span>", 
"<span class=\"comment\">   and sets the number of available bits to zero.  BYTEBITS() discards just</span>", 
"<span class=\"comment\">   enough bits to put the accumulator on a byte boundary.  After BYTEBITS()</span>", 
"<span class=\"comment\">   and a NEEDBITS(8), then BITS(8) would return the next byte in the stream.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   NEEDBITS(n) uses PULLBYTE() to get an available byte of input, or to return</span>", 
"<span class=\"comment\">   if there is no input available.  The decoding of variable length codes uses</span>", 
"<span class=\"comment\">   PULLBYTE() directly in order to pull just enough bytes to decode the next</span>", 
"<span class=\"comment\">   code, and no more.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Some states loop until they get enough input, making sure that enough</span>", 
"<span class=\"comment\">   state information is maintained to continue the loop where it left off</span>", 
"<span class=\"comment\">   if NEEDBITS() returns in the loop.  For example, want, need, and keep</span>", 
"<span class=\"comment\">   would all have to actually be part of the saved state in case NEEDBITS()</span>", 
"<span class=\"comment\">   returns:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    case STATEw:</span>", 
"<span class=\"comment\">        while (want &lt; need) {</span>", 
"<span class=\"comment\">            NEEDBITS(n);</span>", 
"<span class=\"comment\">            keep[want++] = BITS(n);</span>", 
"<span class=\"comment\">            DROPBITS(n);</span>", 
"<span class=\"comment\">        }</span>", 
"<span class=\"comment\">        state = STATEx;</span>", 
"<span class=\"comment\">    case STATEx:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   As shown above, if the next state is also the next case, then the break</span>", 
"<span class=\"comment\">   is omitted.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   A state may also return if there is not enough output space available to</span>", 
"<span class=\"comment\">   complete that state.  Those states are copying stored data, writing a</span>", 
"<span class=\"comment\">   literal byte, and copying a matching string.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   When returning, a \"goto inf_leave\" is used to update the total counters,</span>", 
"<span class=\"comment\">   update the check value, and determine whether any progress has been made</span>", 
"<span class=\"comment\">   during that inflate() call in order to return the proper return code.</span>", 
"<span class=\"comment\">   Progress is defined as a change in either strm-&gt;avail_in or strm-&gt;avail_out.</span>", 
"<span class=\"comment\">   When there is a window, goto inf_leave will update the window with the last</span>", 
"<span class=\"comment\">   output written.  If a goto inf_leave occurs in the middle of decompression</span>", 
"<span class=\"comment\">   and there is no window currently, goto inf_leave will create one and copy</span>", 
"<span class=\"comment\">   output to the window for the next call of inflate().</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   In this implementation, the flush parameter of inflate() only affects the</span>", 
"<span class=\"comment\">   return code (per zlib.h).  inflate() always writes as much as possible to</span>", 
"<span class=\"comment\">   strm-&gt;next_out, given the space available and the provided input--the effect</span>", 
"<span class=\"comment\">   documented in zlib.h of Z_SYNC_FLUSH.  Furthermore, inflate() always defers</span>", 
"<span class=\"comment\">   the allocation of and copying into a sliding window until necessary, which</span>", 
"<span class=\"comment\">   provides the effect documented in zlib.h for Z_FINISH when the entire input</span>", 
"<span class=\"comment\">   stream available.  So the only thing the flush parameter actually does is:</span>", 
"<span class=\"comment\">   when flush is set to Z_FINISH, inflate() cannot return Z_OK.  Instead it</span>", 
"<span class=\"comment\">   will return Z_BUF_ERROR if it has not reached the end of the stream.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#zlib_inflate\">zlib_inflate</a>(<a class=\"id\" href=\"#z_streamp\">z_streamp</a> <a class=\"id\" href=\"#strm\">strm</a>, int <a class=\"id\" href=\"#flush\">flush</a>)", 
"{", 
"    struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"    const unsigned char *<a class=\"id\" href=\"#next\">next</a>;  <span class=\"comment\">/* next input */</span>", 
"    unsigned char *<a class=\"id\" href=\"#put\">put</a>;         <span class=\"comment\">/* next output */</span>", 
"    unsigned <a class=\"id\" href=\"#have\">have</a>, <a class=\"id\" href=\"#left\">left</a>;        <span class=\"comment\">/* available input and output */</span>", 
"    unsigned long <a class=\"id\" href=\"#hold\">hold</a>;         <span class=\"comment\">/* bit buffer */</span>", 
"    unsigned <a class=\"id\" href=\"#bits\">bits</a>;              <span class=\"comment\">/* bits in bit buffer */</span>", 
"    unsigned <a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#out\">out</a>;           <span class=\"comment\">/* save starting available input and output */</span>", 
"    unsigned <a class=\"id\" href=\"#copy\">copy</a>;              <span class=\"comment\">/* number of stored or match bytes to copy */</span>", 
"    unsigned char *<a class=\"id\" href=\"#from\">from</a>;        <span class=\"comment\">/* where to copy match bytes from */</span>", 
"    <a class=\"id\" href=\"#code\">code</a> <a class=\"id\" href=\"#this\">this</a>;                  <span class=\"comment\">/* current decoding table entry */</span>", 
"    <a class=\"id\" href=\"#code\">code</a> <a class=\"id\" href=\"#last\">last</a>;                  <span class=\"comment\">/* parent table entry */</span>", 
"    unsigned <a class=\"id\" href=\"#len\">len</a>;               <span class=\"comment\">/* length to copy for repeats, bits to drop */</span>", 
"    int <a class=\"id\" href=\"#ret\">ret</a>;                    <span class=\"comment\">/* return code */</span>", 
"    static const unsigned short <a class=\"id\" href=\"#order\">order</a>[19] = <span class=\"comment\">/* permutation of code lengths */</span>", 
"        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};", 
"", 
"    <span class=\"comment\">/* Do not check for strm-&gt;next_out == NULL here as ppc zImage</span>", 
"<span class=\"comment\">       inflates to strm-&gt;next_out = 0 */</span>", 
"", 
"    if (<a class=\"id\" href=\"#strm\">strm</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ||", 
"        (<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_in\">next_in</a> == <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a> != 0))", 
"        return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"", 
"    <a class=\"id\" href=\"#state\">state</a> = (struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *)<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"", 
"    if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#TYPE\">TYPE</a>) <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TYPEDO\">TYPEDO</a>;      <span class=\"comment\">/* skip check */</span>", 
"    <a class=\"id\" href=\"#LOAD\">LOAD</a>();", 
"    <a class=\"id\" href=\"#in\">in</a> = <a class=\"id\" href=\"#have\">have</a>;", 
"    <a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#left\">left</a>;", 
"    <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#Z_OK\">Z_OK</a>;", 
"    for (;;)", 
"        switch (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a>) {", 
"        case <a class=\"id\" href=\"#HEAD\">HEAD</a>:", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wrap\">wrap</a> == 0) {", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TYPEDO\">TYPEDO</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(16);", 
"            if (", 
"                ((<a class=\"id\" href=\"#BITS\">BITS</a>(8) << 8) + (<a class=\"id\" href=\"#hold\">hold</a> >> 8)) % 31) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"incorrect header check\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"            if (<a class=\"id\" href=\"#BITS\">BITS</a>(4) != <a class=\"id\" href=\"#Z_DEFLATED\">Z_DEFLATED</a>) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"unknown compression method\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(4);", 
"            <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#BITS\">BITS</a>(4) + 8;", 
"            if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wbits\">wbits</a>) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid window size\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#dmax\">dmax</a> = 1U << <a class=\"id\" href=\"#len\">len</a>;", 
"            <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#adler\">adler</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#check\">check</a> = <a class=\"id\" href=\"#zlib_adler32\">zlib_adler32</a>(0L, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#hold\">hold</a> &amp; 0x200 ? <a class=\"id\" href=\"#DICTID\">DICTID</a> : <a class=\"id\" href=\"#TYPE\">TYPE</a>;", 
"            <a class=\"id\" href=\"#INITBITS\">INITBITS</a>();", 
"            break;", 
"        case <a class=\"id\" href=\"#DICTID\">DICTID</a>:", 
"            <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(32);", 
"            <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#adler\">adler</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#check\">check</a> = <a class=\"id\" href=\"#REVERSE\">REVERSE</a>(<a class=\"id\" href=\"#hold\">hold</a>);", 
"            <a class=\"id\" href=\"#INITBITS\">INITBITS</a>();", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#DICT\">DICT</a>;", 
"        case <a class=\"id\" href=\"#DICT\">DICT</a>:", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#havedict\">havedict</a> == 0) {", 
"                <a class=\"id\" href=\"#RESTORE\">RESTORE</a>();", 
"                return <a class=\"id\" href=\"#Z_NEED_DICT\">Z_NEED_DICT</a>;", 
"            }", 
"            <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#adler\">adler</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#check\">check</a> = <a class=\"id\" href=\"#zlib_adler32\">zlib_adler32</a>(0L, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TYPE\">TYPE</a>;", 
"        case <a class=\"id\" href=\"#TYPE\">TYPE</a>:", 
"            if (<a class=\"id\" href=\"#flush\">flush</a> == <a class=\"id\" href=\"#Z_BLOCK\">Z_BLOCK</a>) goto <a class=\"id\" href=\"#inf_leave\">inf_leave</a>;", 
"        case <a class=\"id\" href=\"#TYPEDO\">TYPEDO</a>:", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#last\">last</a>) {", 
"                <a class=\"id\" href=\"#BYTEBITS\">BYTEBITS</a>();", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#CHECK\">CHECK</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(3);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#BITS\">BITS</a>(1);", 
"            <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(1);", 
"            switch (<a class=\"id\" href=\"#BITS\">BITS</a>(2)) {", 
"            case 0:                             <span class=\"comment\">/* stored block */</span>", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#STORED\">STORED</a>;", 
"                break;", 
"            case 1:                             <span class=\"comment\">/* fixed block */</span>", 
"                <a class=\"id\" href=\"#zlib_fixedtables\">zlib_fixedtables</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#LEN\">LEN</a>;              <span class=\"comment\">/* decode codes */</span>", 
"                break;", 
"            case 2:                             <span class=\"comment\">/* dynamic block */</span>", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TABLE\">TABLE</a>;", 
"                break;", 
"            case 3:", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid block type\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"            }", 
"            <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(2);", 
"            break;", 
"        case <a class=\"id\" href=\"#STORED\">STORED</a>:", 
"            <a class=\"id\" href=\"#BYTEBITS\">BYTEBITS</a>();                         <span class=\"comment\">/* go to byte boundary */</span>", 
"            <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(32);", 
"            if ((<a class=\"id\" href=\"#hold\">hold</a> &amp; 0xffff) != ((<a class=\"id\" href=\"#hold\">hold</a> >> 16) ^ 0xffff)) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid stored block lengths\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#length\">length</a> = (unsigned)<a class=\"id\" href=\"#hold\">hold</a> &amp; 0xffff;", 
"            <a class=\"id\" href=\"#INITBITS\">INITBITS</a>();", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#COPY\">COPY</a>;", 
"        case <a class=\"id\" href=\"#COPY\">COPY</a>:", 
"            <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"            if (<a class=\"id\" href=\"#copy\">copy</a>) {", 
"                if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#have\">have</a>) <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#have\">have</a>;", 
"                if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#left\">left</a>) <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#left\">left</a>;", 
"                if (<a class=\"id\" href=\"#copy\">copy</a> == 0) goto <a class=\"id\" href=\"#inf_leave\">inf_leave</a>;", 
"                <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#put\">put</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"                <a class=\"id\" href=\"#have\">have</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"                <a class=\"id\" href=\"#next\">next</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"                <a class=\"id\" href=\"#left\">left</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"                <a class=\"id\" href=\"#put\">put</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#length\">length</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TYPE\">TYPE</a>;", 
"            break;", 
"        case <a class=\"id\" href=\"#TABLE\">TABLE</a>:", 
"            <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(14);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#nlen\">nlen</a> = <a class=\"id\" href=\"#BITS\">BITS</a>(5) + 257;", 
"            <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(5);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#ndist\">ndist</a> = <a class=\"id\" href=\"#BITS\">BITS</a>(5) + 1;", 
"            <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(5);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#ncode\">ncode</a> = <a class=\"id\" href=\"#BITS\">BITS</a>(4) + 4;", 
"            <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(4);", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#PKZIP_BUG_WORKAROUND\">PKZIP_BUG_WORKAROUND</a>", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#nlen\">nlen</a> &gt; 286 || <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#ndist\">ndist</a> &gt; 30) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"too many length or distance symbols\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a> = 0;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#LENLENS\">LENLENS</a>;", 
"        case <a class=\"id\" href=\"#LENLENS\">LENLENS</a>:", 
"            while (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a> &lt; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#ncode\">ncode</a>) {", 
"                <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(3);", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lens\">lens</a>[<a class=\"id\" href=\"#order\">order</a>[<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a>++]] = (unsigned short)<a class=\"id\" href=\"#BITS\">BITS</a>(3);", 
"                <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(3);", 
"            }", 
"            while (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a> &lt; 19)", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lens\">lens</a>[<a class=\"id\" href=\"#order\">order</a>[<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a>++]] = 0;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#codes\">codes</a>;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lencode\">lencode</a> = (<a class=\"id\" href=\"#code\">code</a> const *)(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lenbits\">lenbits</a> = 7;", 
"            <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#zlib_inflate_table\">zlib_inflate_table</a>(<a class=\"id\" href=\"#CODES\">CODES</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lens\">lens</a>, 19, &amp;(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>),", 
"                                &amp;(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lenbits\">lenbits</a>), <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"            if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid code lengths set\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a> = 0;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#CODELENS\">CODELENS</a>;", 
"        case <a class=\"id\" href=\"#CODELENS\">CODELENS</a>:", 
"            while (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a> &lt; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#nlen\">nlen</a> + <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#ndist\">ndist</a>) {", 
"                for (;;) {", 
"                    <a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lencode\">lencode</a>[<a class=\"id\" href=\"#BITS\">BITS</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lenbits\">lenbits</a>)];", 
"                    if ((unsigned)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>) <= <a class=\"id\" href=\"#bits\">bits</a>) break;", 
"                    <a class=\"id\" href=\"#PULLBYTE\">PULLBYTE</a>();", 
"                }", 
"                if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a> &lt; 16) {", 
"                    <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"                    <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"                    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lens\">lens</a>[<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a>++] = <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a>;", 
"                }", 
"                else {", 
"                    if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a> == 16) {", 
"                        <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a> + 2);", 
"                        <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"                        if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a> == 0) {", 
"                            <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid bit length repeat\";", 
"                            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                            break;", 
"                        }", 
"                        <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lens\">lens</a>[<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a> - 1];", 
"                        <a class=\"id\" href=\"#copy\">copy</a> = 3 + <a class=\"id\" href=\"#BITS\">BITS</a>(2);", 
"                        <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(2);", 
"                    }", 
"                    else if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a> == 17) {", 
"                        <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a> + 3);", 
"                        <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"                        <a class=\"id\" href=\"#len\">len</a> = 0;", 
"                        <a class=\"id\" href=\"#copy\">copy</a> = 3 + <a class=\"id\" href=\"#BITS\">BITS</a>(3);", 
"                        <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(3);", 
"                    }", 
"                    else {", 
"                        <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a> + 7);", 
"                        <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"                        <a class=\"id\" href=\"#len\">len</a> = 0;", 
"                        <a class=\"id\" href=\"#copy\">copy</a> = 11 + <a class=\"id\" href=\"#BITS\">BITS</a>(7);", 
"                        <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(7);", 
"                    }", 
"                    if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a> + <a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#nlen\">nlen</a> + <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#ndist\">ndist</a>) {", 
"                        <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid bit length repeat\";", 
"                        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                        break;", 
"                    }", 
"                    while (<a class=\"id\" href=\"#copy\">copy</a>--)", 
"                        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lens\">lens</a>[<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a>++] = (unsigned short)<a class=\"id\" href=\"#len\">len</a>;", 
"                }", 
"            }", 
"", 
"            <span class=\"comment\">/* handle error breaks in while */</span>", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#BAD\">BAD</a>) break;", 
"", 
"            <span class=\"comment\">/* build code tables */</span>", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#codes\">codes</a>;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lencode\">lencode</a> = (<a class=\"id\" href=\"#code\">code</a> const *)(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lenbits\">lenbits</a> = 9;", 
"            <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#zlib_inflate_table\">zlib_inflate_table</a>(<a class=\"id\" href=\"#LENS\">LENS</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lens\">lens</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#nlen\">nlen</a>, &amp;(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>),", 
"                                &amp;(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lenbits\">lenbits</a>), <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"            if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid literal/lengths set\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#distcode\">distcode</a> = (<a class=\"id\" href=\"#code\">code</a> const *)(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#distbits\">distbits</a> = 6;", 
"            <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#zlib_inflate_table\">zlib_inflate_table</a>(<a class=\"id\" href=\"#DISTS\">DISTS</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lens\">lens</a> + <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#nlen\">nlen</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#ndist\">ndist</a>,", 
"                            &amp;(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>), &amp;(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#distbits\">distbits</a>), <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#work\">work</a>);", 
"            if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid distances set\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#LEN\">LEN</a>;", 
"        case <a class=\"id\" href=\"#LEN\">LEN</a>:", 
"            if (<a class=\"id\" href=\"#have\">have</a> >= 6 && <a class=\"id\" href=\"#left\">left</a> >= 258) {", 
"                <a class=\"id\" href=\"#RESTORE\">RESTORE</a>();", 
"                <a class=\"id\" href=\"#inflate_fast\">inflate_fast</a>(<a class=\"id\" href=\"#strm\">strm</a>, <a class=\"id\" href=\"#out\">out</a>);", 
"                <a class=\"id\" href=\"#LOAD\">LOAD</a>();", 
"                break;", 
"            }", 
"            for (;;) {", 
"                <a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lencode\">lencode</a>[<a class=\"id\" href=\"#BITS\">BITS</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lenbits\">lenbits</a>)];", 
"                if ((unsigned)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>) <= <a class=\"id\" href=\"#bits\">bits</a>) break;", 
"                <a class=\"id\" href=\"#PULLBYTE\">PULLBYTE</a>();", 
"            }", 
"            if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a> && (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a> &amp; 0xf0) == 0) {", 
"                <a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#this\">this</a>;", 
"                for (;;) {", 
"                    <a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#lencode\">lencode</a>[<a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#val\">val</a> +", 
"                            (<a class=\"id\" href=\"#BITS\">BITS</a>(<a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#bits\">bits</a> + <a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#op\">op</a>) >> <a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#bits\">bits</a>)];", 
"                    if ((unsigned)(<a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#bits\">bits</a> + <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>) <= <a class=\"id\" href=\"#bits\">bits</a>) break;", 
"                    <a class=\"id\" href=\"#PULLBYTE\">PULLBYTE</a>();", 
"                }", 
"                <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(<a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"            }", 
"            <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#length\">length</a> = (unsigned)<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a>;", 
"            if ((int)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a>) == 0) {", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#LIT\">LIT</a>;", 
"                break;", 
"            }", 
"            if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a> &amp; 32) {", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TYPE\">TYPE</a>;", 
"                break;", 
"            }", 
"            if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a> &amp; 64) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid literal/length code\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#extra\">extra</a> = (unsigned)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a>) &amp; 15;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#LENEXT\">LENEXT</a>;", 
"        case <a class=\"id\" href=\"#LENEXT\">LENEXT</a>:", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#extra\">extra</a>) {", 
"                <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#extra\">extra</a>);", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#length\">length</a> += <a class=\"id\" href=\"#BITS\">BITS</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#extra\">extra</a>);", 
"                <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#extra\">extra</a>);", 
"            }", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#DIST\">DIST</a>;", 
"        case <a class=\"id\" href=\"#DIST\">DIST</a>:", 
"            for (;;) {", 
"                <a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#distcode\">distcode</a>[<a class=\"id\" href=\"#BITS\">BITS</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#distbits\">distbits</a>)];", 
"                if ((unsigned)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>) <= <a class=\"id\" href=\"#bits\">bits</a>) break;", 
"                <a class=\"id\" href=\"#PULLBYTE\">PULLBYTE</a>();", 
"            }", 
"            if ((<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a> &amp; 0xf0) == 0) {", 
"                <a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#this\">this</a>;", 
"                for (;;) {", 
"                    <a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#distcode\">distcode</a>[<a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#val\">val</a> +", 
"                            (<a class=\"id\" href=\"#BITS\">BITS</a>(<a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#bits\">bits</a> + <a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#op\">op</a>) >> <a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#bits\">bits</a>)];", 
"                    if ((unsigned)(<a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#bits\">bits</a> + <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>) <= <a class=\"id\" href=\"#bits\">bits</a>) break;", 
"                    <a class=\"id\" href=\"#PULLBYTE\">PULLBYTE</a>();", 
"                }", 
"                <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(<a class=\"id\" href=\"#last\">last</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"            }", 
"            <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"            if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a> &amp; 64) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid distance code\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#offset\">offset</a> = (unsigned)<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#val\">val</a>;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#extra\">extra</a> = (unsigned)(<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#op\">op</a>) &amp; 15;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#DISTEXT\">DISTEXT</a>;", 
"        case <a class=\"id\" href=\"#DISTEXT\">DISTEXT</a>:", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#extra\">extra</a>) {", 
"                <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#extra\">extra</a>);", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#BITS\">BITS</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#extra\">extra</a>);", 
"                <a class=\"id\" href=\"#DROPBITS\">DROPBITS</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#extra\">extra</a>);", 
"            }", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#INFLATE_STRICT\">INFLATE_STRICT</a>", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#offset\">offset</a> &gt; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#dmax\">dmax</a>) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid distance too far back\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#offset\">offset</a> &gt; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#whave\">whave</a> + <a class=\"id\" href=\"#out\">out</a> - <a class=\"id\" href=\"#left\">left</a>) {", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"invalid distance too far back\";", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                break;", 
"            }", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#MATCH\">MATCH</a>;", 
"        case <a class=\"id\" href=\"#MATCH\">MATCH</a>:", 
"            if (<a class=\"id\" href=\"#left\">left</a> == 0) goto <a class=\"id\" href=\"#inf_leave\">inf_leave</a>;", 
"            <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#out\">out</a> - <a class=\"id\" href=\"#left\">left</a>;", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#offset\">offset</a> &gt; <a class=\"id\" href=\"#copy\">copy</a>) {         <span class=\"comment\">/* copy from window */</span>", 
"                <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#copy\">copy</a>;", 
"                if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a>) {", 
"                    <a class=\"id\" href=\"#copy\">copy</a> -= <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a>;", 
"                    <a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#window\">window</a> + (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a> - <a class=\"id\" href=\"#copy\">copy</a>);", 
"                }", 
"                else", 
"                    <a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#window\">window</a> + (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#write\">write</a> - <a class=\"id\" href=\"#copy\">copy</a>);", 
"                if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#length\">length</a>) <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"            }", 
"            else {                              <span class=\"comment\">/* copy from output */</span>", 
"                <a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#put\">put</a> - <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"                <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"            }", 
"            if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#left\">left</a>) <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#left\">left</a>;", 
"            <a class=\"id\" href=\"#left\">left</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#length\">length</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"            do {", 
"                *<a class=\"id\" href=\"#put\">put</a>++ = *<a class=\"id\" href=\"#from\">from</a>++;", 
"            } while (--<a class=\"id\" href=\"#copy\">copy</a>);", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#length\">length</a> == 0) <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#LEN\">LEN</a>;", 
"            break;", 
"        case <a class=\"id\" href=\"#LIT\">LIT</a>:", 
"            if (<a class=\"id\" href=\"#left\">left</a> == 0) goto <a class=\"id\" href=\"#inf_leave\">inf_leave</a>;", 
"            *<a class=\"id\" href=\"#put\">put</a>++ = (unsigned char)(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"            <a class=\"id\" href=\"#left\">left</a>--;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#LEN\">LEN</a>;", 
"            break;", 
"        case <a class=\"id\" href=\"#CHECK\">CHECK</a>:", 
"            if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wrap\">wrap</a>) {", 
"                <a class=\"id\" href=\"#NEEDBITS\">NEEDBITS</a>(32);", 
"                <a class=\"id\" href=\"#out\">out</a> -= <a class=\"id\" href=\"#left\">left</a>;", 
"                <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#total_out\">total_out</a> += <a class=\"id\" href=\"#out\">out</a>;", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#out\">out</a>;", 
"                if (<a class=\"id\" href=\"#out\">out</a>)", 
"                    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#adler\">adler</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#check\">check</a> =", 
"                        <a class=\"id\" href=\"#UPDATE\">UPDATE</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#check\">check</a>, <a class=\"id\" href=\"#put\">put</a> - <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#out\">out</a>);", 
"                <a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#left\">left</a>;", 
"                if ((", 
"                     <a class=\"id\" href=\"#REVERSE\">REVERSE</a>(<a class=\"id\" href=\"#hold\">hold</a>)) != <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#check\">check</a>) {", 
"                    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#msg\">msg</a> = (char *)\"incorrect data check\";", 
"                    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#BAD\">BAD</a>;", 
"                    break;", 
"                }", 
"                <a class=\"id\" href=\"#INITBITS\">INITBITS</a>();", 
"            }", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#DONE\">DONE</a>;", 
"        case <a class=\"id\" href=\"#DONE\">DONE</a>:", 
"            <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#Z_STREAM_END\">Z_STREAM_END</a>;", 
"            goto <a class=\"id\" href=\"#inf_leave\">inf_leave</a>;", 
"        case <a class=\"id\" href=\"#BAD\">BAD</a>:", 
"            <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#Z_DATA_ERROR\">Z_DATA_ERROR</a>;", 
"            goto <a class=\"id\" href=\"#inf_leave\">inf_leave</a>;", 
"        case <a class=\"id\" href=\"#MEM\">MEM</a>:", 
"            return <a class=\"id\" href=\"#Z_MEM_ERROR\">Z_MEM_ERROR</a>;", 
"        case <a class=\"id\" href=\"#SYNC\">SYNC</a>:", 
"        default:", 
"            return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"        }", 
"", 
"    <span class=\"comment\">/*</span>", 
"<span class=\"comment\">       Return from inflate(), updating the total counts and the check value.</span>", 
"<span class=\"comment\">       If there was no progress during the inflate() call, return a buffer</span>", 
"<span class=\"comment\">       error.  Call zlib_updatewindow() to create and/or update the window state.</span>", 
"<span class=\"comment\">     */</span>", 
"  <a class=\"id\" href=\"#inf_leave\">inf_leave</a>:", 
"    <a class=\"id\" href=\"#RESTORE\">RESTORE</a>();", 
"    if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a> || (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> &lt; <a class=\"id\" href=\"#CHECK\">CHECK</a> && <a class=\"id\" href=\"#out\">out</a> != <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a>))", 
"        <a class=\"id\" href=\"#zlib_updatewindow\">zlib_updatewindow</a>(<a class=\"id\" href=\"#strm\">strm</a>, <a class=\"id\" href=\"#out\">out</a>);", 
"", 
"    <a class=\"id\" href=\"#in\">in</a> -= <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a>;", 
"    <a class=\"id\" href=\"#out\">out</a> -= <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a>;", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#total_in\">total_in</a> += <a class=\"id\" href=\"#in\">in</a>;", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#total_out\">total_out</a> += <a class=\"id\" href=\"#out\">out</a>;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#out\">out</a>;", 
"    if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wrap\">wrap</a> && <a class=\"id\" href=\"#out\">out</a>)", 
"        <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#adler\">adler</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#check\">check</a> =", 
"            <a class=\"id\" href=\"#UPDATE\">UPDATE</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#check\">check</a>, <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_out\">next_out</a> - <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#out\">out</a>);", 
"", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#data_type\">data_type</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> + (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#last\">last</a> ? 64 : 0) +", 
"                      (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#TYPE\">TYPE</a> ? 128 : 0);", 
"", 
"    if (<a class=\"id\" href=\"#flush\">flush</a> == <a class=\"id\" href=\"#Z_PACKET_FLUSH\">Z_PACKET_FLUSH</a> && <a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#Z_OK\">Z_OK</a> &&", 
"            <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a> != 0 && <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#zlib_inflateSyncPacket\">zlib_inflateSyncPacket</a>(<a class=\"id\" href=\"#strm\">strm</a>);", 
"", 
"    if (((<a class=\"id\" href=\"#in\">in</a> == 0 && <a class=\"id\" href=\"#out\">out</a> == 0) || <a class=\"id\" href=\"#flush\">flush</a> == <a class=\"id\" href=\"#Z_FINISH\">Z_FINISH</a>) && <a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#Z_OK\">Z_OK</a>)", 
"        <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#Z_BUF_ERROR\">Z_BUF_ERROR</a>;", 
"", 
"    return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#zlib_inflateEnd\">zlib_inflateEnd</a>(<a class=\"id\" href=\"#z_streamp\">z_streamp</a> <a class=\"id\" href=\"#strm\">strm</a>)", 
"{", 
"    if (<a class=\"id\" href=\"#strm\">strm</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"        return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"    return <a class=\"id\" href=\"#Z_OK\">Z_OK</a>;", 
"}", 
"", 
"#if 0", 
"int <a class=\"id\" href=\"#zlib_inflateSetDictionary\">zlib_inflateSetDictionary</a>(<a class=\"id\" href=\"#z_streamp\">z_streamp</a> <a class=\"id\" href=\"#strm\">strm</a>, const <a class=\"id\" href=\"#Byte\">Byte</a> *<a class=\"id\" href=\"#dictionary\">dictionary</a>,", 
"        <a class=\"id\" href=\"#uInt\">uInt</a> <a class=\"id\" href=\"#dictLength\">dictLength</a>)", 
"{", 
"    struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"    unsigned long <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"    <span class=\"comment\">/* check state */</span>", 
"    if (<a class=\"id\" href=\"#strm\">strm</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"    <a class=\"id\" href=\"#state\">state</a> = (struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *)<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"    if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wrap\">wrap</a> != 0 && <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#DICT\">DICT</a>)", 
"        return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"", 
"    <span class=\"comment\">/* check for correct dictionary id */</span>", 
"    if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#DICT\">DICT</a>) {", 
"        <a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#zlib_adler32\">zlib_adler32</a>(0L, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"        <a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#zlib_adler32\">zlib_adler32</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#dictionary\">dictionary</a>, <a class=\"id\" href=\"#dictLength\">dictLength</a>);", 
"        if (<a class=\"id\" href=\"#id\">id</a> != <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#check\">check</a>)", 
"            return <a class=\"id\" href=\"#Z_DATA_ERROR\">Z_DATA_ERROR</a>;", 
"    }", 
"", 
"    <span class=\"comment\">/* copy dictionary to window */</span>", 
"    <a class=\"id\" href=\"#zlib_updatewindow\">zlib_updatewindow</a>(<a class=\"id\" href=\"#strm\">strm</a>, <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a>);", 
"", 
"    if (<a class=\"id\" href=\"#dictLength\">dictLength</a> &gt; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>) {", 
"        <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#window\">window</a>, <a class=\"id\" href=\"#dictionary\">dictionary</a> + <a class=\"id\" href=\"#dictLength\">dictLength</a> - <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>,", 
"                <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>);", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#whave\">whave</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a>;", 
"    }", 
"    else {", 
"        <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#window\">window</a> + <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#wsize\">wsize</a> - <a class=\"id\" href=\"#dictLength\">dictLength</a>, <a class=\"id\" href=\"#dictionary\">dictionary</a>,", 
"                <a class=\"id\" href=\"#dictLength\">dictLength</a>);", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#whave\">whave</a> = <a class=\"id\" href=\"#dictLength\">dictLength</a>;", 
"    }", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#havedict\">havedict</a> = 1;", 
"    return <a class=\"id\" href=\"#Z_OK\">Z_OK</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if 0", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   Search buf[0..len-1] for the pattern: 0, 0, 0xff, 0xff.  Return when found</span>", 
"<span class=\"comment\">   or when out of input.  When called, *have is the number of pattern bytes</span>", 
"<span class=\"comment\">   found in order so far, in 0..3.  On return *have is updated to the new</span>", 
"<span class=\"comment\">   state.  If on return *have equals four, then the pattern was found and the</span>", 
"<span class=\"comment\">   return value is how many bytes were read including the last byte of the</span>", 
"<span class=\"comment\">   pattern.  If *have is less than four, then the pattern has not been found</span>", 
"<span class=\"comment\">   yet and the return value is len.  In the latter case, zlib_syncsearch() can be</span>", 
"<span class=\"comment\">   called again with more data and the *have state.  *have is initialized to</span>", 
"<span class=\"comment\">   zero for the first call.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned <a class=\"id\" href=\"#zlib_syncsearch\">zlib_syncsearch</a>(unsigned *<a class=\"id\" href=\"#have\">have</a>, unsigned char *<a class=\"id\" href=\"#buf\">buf</a>,", 
"        unsigned <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"    unsigned <a class=\"id\" href=\"#got\">got</a>;", 
"    unsigned <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"    <a class=\"id\" href=\"#got\">got</a> = *<a class=\"id\" href=\"#have\">have</a>;", 
"    <a class=\"id\" href=\"#next\">next</a> = 0;", 
"    while (<a class=\"id\" href=\"#next\">next</a> &lt; <a class=\"id\" href=\"#len\">len</a> && <a class=\"id\" href=\"#got\">got</a> &lt; 4) {", 
"        if ((int)(<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#next\">next</a>]) == (<a class=\"id\" href=\"#got\">got</a> &lt; 2 ? 0 : 0xff))", 
"            <a class=\"id\" href=\"#got\">got</a>++;", 
"        else if (<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#next\">next</a>])", 
"            <a class=\"id\" href=\"#got\">got</a> = 0;", 
"        else", 
"            <a class=\"id\" href=\"#got\">got</a> = 4 - <a class=\"id\" href=\"#got\">got</a>;", 
"        <a class=\"id\" href=\"#next\">next</a>++;", 
"    }", 
"    *<a class=\"id\" href=\"#have\">have</a> = <a class=\"id\" href=\"#got\">got</a>;", 
"    return <a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if 0", 
"int <a class=\"id\" href=\"#zlib_inflateSync\">zlib_inflateSync</a>(<a class=\"id\" href=\"#z_streamp\">z_streamp</a> <a class=\"id\" href=\"#strm\">strm</a>)", 
"{", 
"    unsigned <a class=\"id\" href=\"#len\">len</a>;               <span class=\"comment\">/* number of bytes to look at or looked at */</span>", 
"    unsigned long <a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#out\">out</a>;      <span class=\"comment\">/* temporary to save total_in and total_out */</span>", 
"    unsigned char <a class=\"id\" href=\"#buf\">buf</a>[4];       <span class=\"comment\">/* to restore bit buffer to byte string */</span>", 
"    struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"    <span class=\"comment\">/* check parameters */</span>", 
"    if (<a class=\"id\" href=\"#strm\">strm</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) return <a class=\"id\" href=\"#Z_STREAM_ERROR\">Z_STREAM_ERROR</a>;", 
"    <a class=\"id\" href=\"#state\">state</a> = (struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *)<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"    if (<a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a> == 0 && <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> &lt; 8) return <a class=\"id\" href=\"#Z_BUF_ERROR\">Z_BUF_ERROR</a>;", 
"", 
"    <span class=\"comment\">/* if first time, start search in bit buffer */</span>", 
"    if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#SYNC\">SYNC</a>) {", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#SYNC\">SYNC</a>;", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#hold\">hold</a> <<= <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> &amp; 7;", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> -= <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> &amp; 7;", 
"        <a class=\"id\" href=\"#len\">len</a> = 0;", 
"        while (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> >= 8) {", 
"            <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#len\">len</a>++] = (unsigned char)(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#hold\">hold</a>);", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#hold\">hold</a> >>= 8;", 
"            <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bits\">bits</a> -= 8;", 
"        }", 
"        <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a> = 0;", 
"        <a class=\"id\" href=\"#zlib_syncsearch\">zlib_syncsearch</a>(&amp;(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a>), <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"    }", 
"", 
"    <span class=\"comment\">/* search available input */</span>", 
"    <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#zlib_syncsearch\">zlib_syncsearch</a>(&amp;(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a>), <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_in\">next_in</a>, <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a>);", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#next_in\">next_in</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#total_in\">total_in</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"    <span class=\"comment\">/* return no joy or set up to restart inflate() on a new block */</span>", 
"    if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#have\">have</a> != 4) return <a class=\"id\" href=\"#Z_DATA_ERROR\">Z_DATA_ERROR</a>;", 
"    <a class=\"id\" href=\"#in\">in</a> = <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#total_in\">total_in</a>;  <a class=\"id\" href=\"#out\">out</a> = <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#total_out\">total_out</a>;", 
"    <a class=\"id\" href=\"#zlib_inflateReset\">zlib_inflateReset</a>(<a class=\"id\" href=\"#strm\">strm</a>);", 
"    <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#total_in\">total_in</a> = <a class=\"id\" href=\"#in\">in</a>;  <a class=\"id\" href=\"#strm\">strm</a>-><a class=\"id\" href=\"#total_out\">total_out</a> = <a class=\"id\" href=\"#out\">out</a>;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#TYPE\">TYPE</a>;", 
"    return <a class=\"id\" href=\"#Z_OK\">Z_OK</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This subroutine adds the data at next_in/avail_in to the output history</span>", 
"<span class=\"comment\"> * without performing any output.  The output buffer must be \"caught up\";</span>", 
"<span class=\"comment\"> * i.e. no pending output but this should always be the case. The state must</span>", 
"<span class=\"comment\"> * be waiting on the start of a block (i.e. mode == TYPE or HEAD).  On exit,</span>", 
"<span class=\"comment\"> * the output will also be caught up, and the checksum will have been updated</span>", 
"<span class=\"comment\"> * if need be.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#zlib_inflateIncomp\">zlib_inflateIncomp</a>(<a class=\"id\" href=\"#z_stream\">z_stream</a> *<a class=\"id\" href=\"#z\">z</a>)", 
"{", 
"    struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *<a class=\"id\" href=\"#state\">state</a> = (struct <a class=\"id\" href=\"#inflate_state\">inflate_state</a> *)<a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"    <a class=\"id\" href=\"#Byte\">Byte</a> *<a class=\"id\" href=\"#saved_no\">saved_no</a> = <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#next_out\">next_out</a>;", 
"    <a class=\"id\" href=\"#uInt\">uInt</a> <a class=\"id\" href=\"#saved_ao\">saved_ao</a> = <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a>;", 
"", 
"    if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#TYPE\">TYPE</a> && <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#HEAD\">HEAD</a>)", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#Z_DATA_ERROR\">Z_DATA_ERROR</a>;", 
"", 
"    <span class=\"comment\">/* Setup some variables to allow misuse of updateWindow */</span>", 
"    <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a> = 0;", 
"    <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#next_out\">next_out</a> = (unsigned char*)<a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#next_in\">next_in</a> + <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a>;", 
"", 
"    <a class=\"id\" href=\"#zlib_updatewindow\">zlib_updatewindow</a>(<a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a>);", 
"", 
"    <span class=\"comment\">/* Restore saved variables */</span>", 
"    <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#avail_out\">avail_out</a> = <a class=\"id\" href=\"#saved_ao\">saved_ao</a>;", 
"    <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#next_out\">next_out</a> = <a class=\"id\" href=\"#saved_no\">saved_no</a>;", 
"", 
"    <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#adler\">adler</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#check\">check</a> =", 
"        <a class=\"id\" href=\"#UPDATE\">UPDATE</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#check\">check</a>, <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#next_in\">next_in</a>, <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a>);", 
"", 
"    <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#total_out\">total_out</a> += <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a>;", 
"    <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#total_in\">total_in</a> += <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a>;", 
"    <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#next_in\">next_in</a> += <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a>;", 
"    <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a>;", 
"    <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#avail_in\">avail_in</a> = 0;", 
"", 
"    return <a class=\"id\" href=\"#Z_OK\">Z_OK</a>;", 
"}", 
];
xr_frag_insert('l/80/3ed47ab0cfe59b6278b301a27e4c81dd1087f8.xr', __xr_tmp);
