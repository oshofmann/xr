var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: psargs - Parse AML opcode arguments</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acparser.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"amlcode.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acdispat.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_PARSER\">ACPI_PARSER</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"psargs\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static <a class=\"id\" href=\"#u32\">u32</a>", 
"<a class=\"id\" href=\"#acpi_ps_get_next_package_length\">acpi_ps_get_next_package_length</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> *<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"", 
"static union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#acpi_ps_get_next_field\">acpi_ps_get_next_field</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       *<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_get_next_package_length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Decoded package length. On completion, the AML pointer points</span>", 
"<span class=\"comment\"> *              past the length byte or bytes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Decode and return a package length field.</span>", 
"<span class=\"comment\"> *              Note: Largest package length is 28 bits, from ACPI specification</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a>", 
"<a class=\"id\" href=\"#acpi_ps_get_next_package_length\">acpi_ps_get_next_package_length</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> *<a class=\"id\" href=\"#parser_state\">parser_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#aml\">aml</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#package_length\">package_length</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#byte_count\">byte_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#byte_zero_mask\">byte_zero_mask</a> = 0x3F;<span class=\"ts\"/><span class=\"comment\">/* Default [0:5] */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ps_get_next_package_length\">ps_get_next_package_length</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Byte 0 bits [6:7] contain the number of additional bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * used to encode the package length, either 0,1,2, or 3</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#byte_count\">byte_count</a> = (<a class=\"id\" href=\"#aml\">aml</a>[0] >> 6);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a> += ((<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#byte_count\">byte_count</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get bytes 3, 2, 1 as needed */</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#byte_count\">byte_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Final bit positions for the package length bytes:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *      Byte3-&gt;[20:27]</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *      Byte2-&gt;[12:19]</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *      Byte1-&gt;[04:11]</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *      Byte0-&gt;[00:03]</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#package_length\">package_length</a> |= (<a class=\"id\" href=\"#aml\">aml</a>[<a class=\"id\" href=\"#byte_count\">byte_count</a>] << ((<a class=\"id\" href=\"#byte_count\">byte_count</a> << 3) - 4));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#byte_zero_mask\">byte_zero_mask</a> = 0x0F;<span class=\"ts\"/><span class=\"comment\">/* Use bits [0:3] of byte 0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#byte_count\">byte_count</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Byte 0 is a special case, either bits [0:3] or [0:5] are used */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#package_length\">package_length</a> |= (<a class=\"id\" href=\"#aml\">aml</a>[0] &amp; <a class=\"id\" href=\"#byte_zero_mask\">byte_zero_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(<a class=\"id\" href=\"#package_length\">package_length</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_get_next_package_end</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Pointer to end-of-package +1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get next package length and return a pointer past the end of</span>", 
"<span class=\"comment\"> *              the package.  Consumes the package length field</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#acpi_ps_get_next_package_end\">acpi_ps_get_next_package_end</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> *<a class=\"id\" href=\"#parser_state\">parser_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#package_length\">package_length</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ps_get_next_package_end\">ps_get_next_package_end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Function below updates parser_state-&gt;Aml */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#package_length\">package_length</a> = <a class=\"id\" href=\"#acpi_ps_get_next_package_length\">acpi_ps_get_next_package_length</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>(<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#package_length\">package_length</a>);<span class=\"ts\"/><span class=\"comment\">/* end of package */</span>", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_get_next_namestring</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Pointer to the start of the name string (pointer points into</span>", 
"<span class=\"comment\"> *              the AML.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get next raw namestring within the AML stream.  Handles all name</span>", 
"<span class=\"comment\"> *              prefix characters.  Set parser state to point past the string.</span>", 
"<span class=\"comment\"> *              (Name is consumed from the AML.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"char *<a class=\"id\" href=\"#acpi_ps_get_next_namestring\">acpi_ps_get_next_namestring</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> *<a class=\"id\" href=\"#parser_state\">parser_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ps_get_next_namestring\">ps_get_next_namestring</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Point past any namestring prefix characters (backslash or carat) */</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#acpi_ps_is_prefix_char\">acpi_ps_is_prefix_char</a>(*<a class=\"id\" href=\"#end\">end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Decode the path prefix character */</span>", 
"", 
"<span class=\"ts\"/>switch (*<a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/>case 0:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* null_name */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_DUAL_NAME_PREFIX\">AML_DUAL_NAME_PREFIX</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Two name segments */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> += 1 + (2 * <a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_MULTI_NAME_PREFIX_OP\">AML_MULTI_NAME_PREFIX_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Multiple name segments, 4 chars each, count in next byte */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> += 2 + (*(<a class=\"id\" href=\"#end\">end</a> + 1) * <a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Single name segment */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> += <a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>((char *)<a class=\"id\" href=\"#start\">start</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_get_next_namepath</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *              Arg                 - Where the namepath will be stored</span>", 
"<span class=\"comment\"> *              arg_count           - If the namepath points to a control method</span>", 
"<span class=\"comment\"> *                                    the method's argument is returned here.</span>", 
"<span class=\"comment\"> *              possible_method_call - Whether the namepath can possibly be the</span>", 
"<span class=\"comment\"> *                                    start of a method call</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get next name (if method call, return # of required args).</span>", 
"<span class=\"comment\"> *              Names are looked up in the internal namespace to determine</span>", 
"<span class=\"comment\"> *              if the name represents a control method.  If a method</span>", 
"<span class=\"comment\"> *              is found, the number of arguments to the method is returned.</span>", 
"<span class=\"comment\"> *              This information is critical for parsing to continue correctly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ps_get_next_namepath\">acpi_ps_get_next_namepath</a>(struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> *<a class=\"id\" href=\"#parser_state\">parser_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#possible_method_call\">possible_method_call</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#name_op\">name_op</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#method_desc\">method_desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ps_get_next_namepath\">ps_get_next_namepath</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#acpi_ps_get_next_namestring\">acpi_ps_get_next_namestring</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_init_op\">acpi_ps_init_op</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#AML_INT_NAMEPATH_OP\">AML_INT_NAMEPATH_OP</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Null path case is allowed, just exit */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#path\">path</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Lookup the name in the internal namespace, starting with the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scope. We don't want to add anything new to the namespace here,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * however, so we use MODE_EXECUTE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allow searching of the parent tree, but don't open a new scope -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we just want to lookup the object (must be mode EXECUTE to perform</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the upsearch)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_lookup\">acpi_ns_lookup</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#scope_info\">scope_info</a>, <a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_TYPE_ANY\">ACPI_TYPE_ANY</a>, <a class=\"id\" href=\"#ACPI_IMODE_EXECUTE\">ACPI_IMODE_EXECUTE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_NS_SEARCH_PARENT\">ACPI_NS_SEARCH_PARENT</a> | <a class=\"id\" href=\"#ACPI_NS_DONT_OPEN_SCOPE\">ACPI_NS_DONT_OPEN_SCOPE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this name is a control method invocation, we must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * setup the method call</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#possible_method_call\">possible_method_call</a> && (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#opcode\">opcode</a> == <a class=\"id\" href=\"#AML_UNLOAD_OP\">AML_UNLOAD_OP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * acpi_ps_get_next_namestring has increased the AML pointer,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so we need to restore the saved AML pointer for method call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#parser_state\">parser_state</a>.<a class=\"id\" href=\"#aml\">aml</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#arg_count\">arg_count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_init_op\">acpi_ps_init_op</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#AML_INT_METHODCALL_OP\">AML_INT_METHODCALL_OP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This name is actually a control method invocation */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#method_desc\">method_desc</a> = <a class=\"id\" href=\"#acpi_ns_get_attached_object\">acpi_ns_get_attached_object</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_PARSE\">ACPI_DB_PARSE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Control Method - %p Desc %p Path=%p\\n\", <a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#method_desc\">method_desc</a>, <a class=\"id\" href=\"#path\">path</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name_op\">name_op</a> = <a class=\"id\" href=\"#acpi_ps_alloc_op\">acpi_ps_alloc_op</a>(<a class=\"id\" href=\"#AML_INT_NAMEPATH_OP\">AML_INT_NAMEPATH_OP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#name_op\">name_op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Change Arg into a METHOD CALL and attach name to it */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_init_op\">acpi_ps_init_op</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#AML_INT_METHODCALL_OP\">AML_INT_METHODCALL_OP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name_op\">name_op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#path\">path</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Point METHODCALL/NAME to the METHOD Node */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name_op\">name_op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_append_arg\">acpi_ps_append_arg</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#name_op\">name_op</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#method_desc\">method_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Control Method %p has no attached object\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#node\">node</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_AML_INTERNAL\">AE_AML_INTERNAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_PARSE\">ACPI_DB_PARSE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Control Method - %p Args %X\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#param_count\">param_count</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the number of arguments to expect */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#arg_count\">arg_count</a> = <a class=\"id\" href=\"#method_desc\">method_desc</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#param_count\">param_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Special handling if the name was not found during the lookup -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * some not_found cases are allowed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 1) not_found is ok during load pass 1/2 (allow forward references) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#parse_flags\">parse_flags</a> &amp; <a class=\"id\" href=\"#ACPI_PARSE_MODE_MASK\">ACPI_PARSE_MODE_MASK</a>) !=", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_PARSE_EXECUTE\">ACPI_PARSE_EXECUTE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 2) not_found during a cond_ref_of(x) is ok by definition */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#AML_COND_REF_OF_OP\">AML_COND_REF_OF_OP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 3) not_found while building a Package is ok at this point, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * may flag as an error later if slack mode is not enabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (Some ASL code depends on allowing this behavior)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else if ((<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> ((<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#AML_PACKAGE_OP\">AML_PACKAGE_OP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  || (<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#AML_VAR_PACKAGE_OP\">AML_VAR_PACKAGE_OP</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Final exception check (may have been changed from code above) */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR_NAMESPACE\">ACPI_ERROR_NAMESPACE</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#status\">status</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#parse_flags\">parse_flags</a> &amp; <a class=\"id\" href=\"#ACPI_PARSE_MODE_MASK\">ACPI_PARSE_MODE_MASK</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_PARSE_EXECUTE\">ACPI_PARSE_EXECUTE</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Report a control method execution error */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ds_method_error\">acpi_ds_method_error</a>(<a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#walk_state\">walk_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Save the namepath */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_get_next_simple_arg</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *              arg_type            - The argument type (AML_*_ARG)</span>", 
"<span class=\"comment\"> *              Arg                 - Where the argument is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get the next simple argument (constant, string, or namestring)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ps_get_next_simple_arg\">acpi_ps_get_next_simple_arg</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> *<a class=\"id\" href=\"#parser_state\">parser_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#arg_type\">arg_type</a>, union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#aml\">aml</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_U32\">ACPI_FUNCTION_TRACE_U32</a>(<a class=\"id\" href=\"#ps_get_next_simple_arg\">ps_get_next_simple_arg</a>, <a class=\"id\" href=\"#arg_type\">arg_type</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#arg_type\">arg_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_BYTEDATA\">ARGP_BYTEDATA</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get 1 byte from the AML stream */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#AML_BYTE_OP\">AML_BYTE_OP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#integer\">integer</a> = (<a class=\"id\" href=\"#u64\">u64</a>) *<a class=\"id\" href=\"#aml\">aml</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_WORDDATA\">ARGP_WORDDATA</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get 2 bytes from the AML stream */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#AML_WORD_OP\">AML_WORD_OP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_16_TO_64\">ACPI_MOVE_16_TO_64</a>(&amp;<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#integer\">integer</a>, <a class=\"id\" href=\"#aml\">aml</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_DWORDDATA\">ARGP_DWORDDATA</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get 4 bytes from the AML stream */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#AML_DWORD_OP\">AML_DWORD_OP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_32_TO_64\">ACPI_MOVE_32_TO_64</a>(&amp;<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#integer\">integer</a>, <a class=\"id\" href=\"#aml\">aml</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_QWORDDATA\">ARGP_QWORDDATA</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get 8 bytes from the AML stream */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#AML_QWORD_OP\">AML_QWORD_OP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_64_TO_64\">ACPI_MOVE_64_TO_64</a>(&amp;<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#integer\">integer</a>, <a class=\"id\" href=\"#aml\">aml</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_CHARLIST\">ARGP_CHARLIST</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get a pointer to the string, point past the string */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#AML_STRING_OP\">AML_STRING_OP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#string\">string</a> = <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, <a class=\"id\" href=\"#aml\">aml</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Find the null terminator */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#aml\">aml</a>[<a class=\"id\" href=\"#length\">length</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_NAME\">ARGP_NAME</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_NAMESTRING\">ARGP_NAMESTRING</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_init_op\">acpi_ps_init_op</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#AML_INT_NAMEPATH_OP\">AML_INT_NAMEPATH_OP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#name\">name</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ps_get_next_namestring\">acpi_ps_get_next_namestring</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Invalid ArgType 0x%X\", <a class=\"id\" href=\"#arg_type\">arg_type</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_init_op\">acpi_ps_init_op</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#opcode\">opcode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_get_next_field</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      A newly allocated FIELD op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get next field (named_field, reserved_field, or access_field)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#acpi_ps_get_next_field\">acpi_ps_get_next_field</a>(struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       *<a class=\"id\" href=\"#parser_state\">parser_state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#aml_offset\">aml_offset</a> = (<a class=\"id\" href=\"#u32\">u32</a>)", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_PTR_DIFF\">ACPI_PTR_DIFF</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml_start\">aml_start</a>);", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ps_get_next_field\">ps_get_next_field</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Determine field type */</span>", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ACPI_GET8\">ACPI_GET8</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>)) {", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#AML_INT_NAMEDFIELD_OP\">AML_INT_NAMEDFIELD_OP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 0x00:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#AML_INT_RESERVEDFIELD_OP\">AML_INT_RESERVEDFIELD_OP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 0x01:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#AML_INT_ACCESSFIELD_OP\">AML_INT_ACCESSFIELD_OP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate a new field op */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#field\">field</a> = <a class=\"id\" href=\"#acpi_ps_alloc_op\">acpi_ps_alloc_op</a>(<a class=\"id\" href=\"#opcode\">opcode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#field\">field</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_offset\">aml_offset</a> = <a class=\"id\" href=\"#aml_offset\">aml_offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Decode the field type */</span>", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#opcode\">opcode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_INT_NAMEDFIELD_OP\">AML_INT_NAMEDFIELD_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the 4-character name */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_32_TO_32\">ACPI_MOVE_32_TO_32</a>(&amp;<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_set_name\">acpi_ps_set_name</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a> += <a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the length which is encoded as a package length */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#size\">size</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ps_get_next_package_length\">acpi_ps_get_next_package_length</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_INT_RESERVEDFIELD_OP\">AML_INT_RESERVEDFIELD_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the length which is encoded as a package length */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#size\">size</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ps_get_next_package_length\">acpi_ps_get_next_package_length</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_INT_ACCESSFIELD_OP\">AML_INT_ACCESSFIELD_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get access_type and access_attrib and merge into the field Op</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * access_type is first operand, access_attribute is second</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#integer\">integer</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    (((<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#ACPI_GET8\">ACPI_GET8</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>) << 8));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#integer\">integer</a> |= <a class=\"id\" href=\"#ACPI_GET8\">ACPI_GET8</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Opcode was set in previous switch */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>(<a class=\"id\" href=\"#field\">field</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ps_get_next_arg</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  walk_state          - Current state</span>", 
"<span class=\"comment\"> *              parser_state        - Current parser state object</span>", 
"<span class=\"comment\"> *              arg_type            - The argument type (AML_*_ARG)</span>", 
"<span class=\"comment\"> *              return_arg          - Where the next arg is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status, and an op object containing the next argument.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get next argument (including complex list arguments that require</span>", 
"<span class=\"comment\"> *              pushing the parser stack)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ps_get_next_arg\">acpi_ps_get_next_arg</a>(struct <a class=\"id\" href=\"#acpi_walk_state\">acpi_walk_state</a> *<a class=\"id\" href=\"#walk_state\">walk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> *<a class=\"id\" href=\"#parser_state\">parser_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#arg_type\">arg_type</a>, union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> **<a class=\"id\" href=\"#return_arg\">return_arg</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_parse_object\">acpi_parse_object</a> *<a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#subop\">subop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ps_get_next_arg\">ps_get_next_arg</a>, <a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#arg_type\">arg_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_BYTEDATA\">ARGP_BYTEDATA</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_WORDDATA\">ARGP_WORDDATA</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_DWORDDATA\">ARGP_DWORDDATA</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_CHARLIST\">ARGP_CHARLIST</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_NAME\">ARGP_NAME</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_NAMESTRING\">ARGP_NAMESTRING</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Constants, strings, and namestrings are all the same size */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#acpi_ps_alloc_op\">acpi_ps_alloc_op</a>(<a class=\"id\" href=\"#AML_BYTE_OP\">AML_BYTE_OP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#arg\">arg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_get_next_simple_arg\">acpi_ps_get_next_simple_arg</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>, <a class=\"id\" href=\"#arg_type\">arg_type</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_PKGLENGTH\">ARGP_PKGLENGTH</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Package length, nothing returned */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#pkg_end\">pkg_end</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ps_get_next_package_end\">acpi_ps_get_next_package_end</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_FIELDLIST\">ARGP_FIELDLIST</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a> &lt; <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#pkg_end\">pkg_end</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Non-empty list */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a> &lt; <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#pkg_end\">pkg_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#field\">field</a> = <a class=\"id\" href=\"#acpi_ps_get_next_field\">acpi_ps_get_next_field</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#field\">field</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip to End of byte data */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#pkg_end\">pkg_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_BYTELIST\">ARGP_BYTELIST</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a> &lt; <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#pkg_end\">pkg_end</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Non-empty list */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#acpi_ps_alloc_op\">acpi_ps_alloc_op</a>(<a class=\"id\" href=\"#AML_INT_BYTELIST_OP\">AML_INT_BYTELIST_OP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#arg\">arg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fill in bytelist data */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#value\">value</a>.<a class=\"id\" href=\"#size\">size</a> = (<a class=\"id\" href=\"#u32\">u32</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_PTR_DIFF\">ACPI_PTR_DIFF</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#pkg_end\">pkg_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#named\">named</a>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip to End of byte data */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#pkg_end\">pkg_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_TARGET\">ARGP_TARGET</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_SUPERNAME\">ARGP_SUPERNAME</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_SIMPLENAME\">ARGP_SIMPLENAME</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#subop\">subop</a> = <a class=\"id\" href=\"#acpi_ps_peek_opcode\">acpi_ps_peek_opcode</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#subop\">subop</a> == 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ps_is_leading_char\">acpi_ps_is_leading_char</a>(<a class=\"id\" href=\"#subop\">subop</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ps_is_prefix_char\">acpi_ps_is_prefix_char</a>(<a class=\"id\" href=\"#subop\">subop</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* null_name or name_string */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#acpi_ps_alloc_op\">acpi_ps_alloc_op</a>(<a class=\"id\" href=\"#AML_INT_NAMEPATH_OP\">AML_INT_NAMEPATH_OP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#arg\">arg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* To support super_name arg of Unload */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#opcode\">opcode</a> == <a class=\"id\" href=\"#AML_UNLOAD_OP\">AML_UNLOAD_OP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ps_get_next_namepath\">acpi_ps_get_next_namepath</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#parser_state\">parser_state</a>, <a class=\"id\" href=\"#arg\">arg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the super_name arg of Unload is a method call,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we have restored the AML pointer, just free this Arg</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#aml_opcode\">aml_opcode</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#AML_INT_METHODCALL_OP\">AML_INT_METHODCALL_OP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ps_free_op\">acpi_ps_free_op</a>(<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ps_get_next_namepath\">acpi_ps_get_next_namepath</a>(<a class=\"id\" href=\"#walk_state\">walk_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#parser_state\">parser_state</a>, <a class=\"id\" href=\"#arg\">arg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Single complex argument, nothing returned */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#arg_count\">arg_count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_DATAOBJ\">ARGP_DATAOBJ</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_TERMARG\">ARGP_TERMARG</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Single complex argument, nothing returned */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#arg_count\">arg_count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_DATAOBJLIST\">ARGP_DATAOBJLIST</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_TERMLIST\">ARGP_TERMLIST</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ARGP_OBJLIST\">ARGP_OBJLIST</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#aml\">aml</a> &lt; <a class=\"id\" href=\"#parser_state\">parser_state</a>-><a class=\"id\" href=\"#pkg_end\">pkg_end</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Non-empty list of variable arguments, nothing returned */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk_state\">walk_state</a>-><a class=\"id\" href=\"#arg_count\">arg_count</a> = <a class=\"id\" href=\"#ACPI_VAR_ARGS\">ACPI_VAR_ARGS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Invalid ArgType: 0x%X\", <a class=\"id\" href=\"#arg_type\">arg_type</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_OPERAND_TYPE\">AE_AML_OPERAND_TYPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#return_arg\">return_arg</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
];
xr_frag_insert('l/80/b611f226096aa8f29c84caa592488dfc672051.xr', __xr_tmp);
