var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#ip_rt_frag_needed\">ip_rt_frag_needed</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#iph\">iph</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#un\">un</a>.<a class=\"id\" href=\"#frag\">frag</a>.<a class=\"id\" href=\"#mtu\">mtu</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ICMP_SR_FAILED\">ICMP_SR_FAILED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"ICMP: %pI4: Source Route Failed.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#code\">code</a> &gt; <a class=\"id\" href=\"#NR_ICMP_UNREACH\">NR_ICMP_UNREACH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ICMP_PARAMETERPROB\">ICMP_PARAMETERPROB</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#un\">un</a>.<a class=\"id\" href=\"#gateway\">gateway</a>) >> 24;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Throw it at our lower layers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>RFC 1122: 3.2.2 MUST extract the protocol ID from the passed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>  header.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>RFC 1122: 3.2.2.1 MUST pass ICMP unreach messages to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>  transport layer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>RFC 1122: 3.2.2.2 MUST pass ICMP time expired messages to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>  transport layer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Check the other end isnt violating RFC 1122. Some routers send</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>bogus responses to broadcast frames. If you see this message</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>first check your netmask matches at both ends, if it does then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>get the other vendor to fix their kit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_icmp_ignore_bogus_error_responses\">sysctl_icmp_ignore_bogus_error_responses</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#inet_addr_type\">inet_addr_type</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>) == <a class=\"id\" href=\"#RTN_BROADCAST\">RTN_BROADCAST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%pI4 sent an invalid ICMP \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"type %u, code %u \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"error to a broadcast: %pI4 on %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#saddr\">saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#code\">code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Checkin full IP header plus 8 bytes of protocol to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * avoid additional coding at protocol handlers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#ihl\">ihl</a> * 4 + 8))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = (struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Deliver ICMP message to raw sockets. Pretty useless feature?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_icmp_error\">raw_icmp_error</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#protocol\">protocol</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#protocol\">protocol</a> &amp; (<a class=\"id\" href=\"#MAX_INET_PROTOS\">MAX_INET_PROTOS</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipprot\">ipprot</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#inet_protos\">inet_protos</a>[<a class=\"id\" href=\"#hash\">hash</a>]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipprot\">ipprot</a> && <a class=\"id\" href=\"#ipprot\">ipprot</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipprot\">ipprot</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ICMP_INC_STATS_BH\">ICMP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ICMP_MIB_INERRORS\">ICMP_MIB_INERRORS</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Handle ICMP_REDIRECT.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#icmp_redirect\">icmp_redirect</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &lt; sizeof(struct <a class=\"id\" href=\"#iphdr\">iphdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Get the copied header of the packet that caused the redirect</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(struct <a class=\"id\" href=\"#iphdr\">iphdr</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = (struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#icmp_hdr\">icmp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#code\">code</a> &amp; 7) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ICMP_REDIR_NET\">ICMP_REDIR_NET</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ICMP_REDIR_NETTOS\">ICMP_REDIR_NETTOS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * As per RFC recommendations now handle it as a host redirect.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ICMP_REDIR_HOST\">ICMP_REDIR_HOST</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ICMP_REDIR_HOSTTOS\">ICMP_REDIR_HOSTTOS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_rt_redirect\">ip_rt_redirect</a>(<a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#icmp_hdr\">icmp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#un\">un</a>.<a class=\"id\" href=\"#gateway\">gateway</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ICMP_INC_STATS_BH\">ICMP_INC_STATS_BH</a>(<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#ICMP_MIB_INERRORS\">ICMP_MIB_INERRORS</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Handle ICMP_ECHO (\"ping\") requests.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RFC 1122: 3.2.2.6 MUST have an echo server that answers ICMP echo</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  requests.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RFC 1122: 3.2.2.6 Data received in the ICMP_ECHO request MUST be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  included in the reply.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RFC 1812: 4.3.3.6 SHOULD have a config option for silently ignoring</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  echo requests, MUST have default=NOT.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>See also WRT handling of options once they are done and working.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#icmp_echo\">icmp_echo</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_icmp_echo_ignore_all\">sysctl_icmp_echo_ignore_all</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#icmp_bxm\">icmp_bxm</a> <a class=\"id\" href=\"#icmp_param\">icmp_param</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#icmph\">icmph</a><span class=\"ts\"/>   = *<a class=\"id\" href=\"#icmp_hdr\">icmp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#icmph\">icmph</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ICMP_ECHOREPLY\">ICMP_ECHOREPLY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#skb\">skb</a><span class=\"ts\"/><span class=\"ts\"/>   = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#offset\">offset</a><span class=\"ts\"/>   = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#data_len\">data_len</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#head_len\">head_len</a><span class=\"ts\"/>   = sizeof(struct <a class=\"id\" href=\"#icmphdr\">icmphdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icmp_reply\">icmp_reply</a>(&amp;<a class=\"id\" href=\"#icmp_param\">icmp_param</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Handle ICMP Timestamp requests.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RFC 1122: 3.2.2.8 MAY implement ICMP timestamp requests.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  SHOULD be in the kernel for minimum random latency.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  MUST be accurate to a few minutes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  MUST be updated at least at 15Hz.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#icmp_timestamp\">icmp_timestamp</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#tv\">tv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#icmp_bxm\">icmp_bxm</a> <a class=\"id\" href=\"#icmp_param\">icmp_param</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Too short.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &lt; 4)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Fill in the current time as ms since midnight UT:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#getnstimeofday\">getnstimeofday</a>(&amp;<a class=\"id\" href=\"#tv\">tv</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#times\">times</a>[1] = <a class=\"id\" href=\"#htonl\">htonl</a>((<a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> % 86400) * <a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tv\">tv</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> / <a class=\"id\" href=\"#NSEC_PER_MSEC\">NSEC_PER_MSEC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#times\">times</a>[2] = <a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#times\">times</a>[1];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_copy_bits\">skb_copy_bits</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, &amp;<a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#times\">times</a>[0], 4))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#icmph\">icmph</a><span class=\"ts\"/>   = *<a class=\"id\" href=\"#icmp_hdr\">icmp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#icmph\">icmph</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ICMP_TIMESTAMPREPLY\">ICMP_TIMESTAMPREPLY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#icmph\">icmph</a>.<a class=\"id\" href=\"#code\">code</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#skb\">skb</a><span class=\"ts\"/><span class=\"ts\"/>   = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#offset\">offset</a><span class=\"ts\"/>   = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#data_len\">data_len</a><span class=\"ts\"/>   = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_param\">icmp_param</a>.<a class=\"id\" href=\"#head_len\">head_len</a><span class=\"ts\"/>   = sizeof(struct <a class=\"id\" href=\"#icmphdr\">icmphdr</a>) + 12;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_reply\">icmp_reply</a>(&amp;<a class=\"id\" href=\"#icmp_param\">icmp_param</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ICMP_INC_STATS_BH\">ICMP_INC_STATS_BH</a>(<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#ICMP_MIB_INERRORS\">ICMP_MIB_INERRORS</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Handle ICMP_ADDRESS_MASK requests.  (RFC950)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RFC1122 (3.2.2.9).  A host MUST only send replies to</span>", 
"<span class=\"comment\"> * ADDRESS_MASK requests if it's been configured as an address mask</span>", 
"<span class=\"comment\"> * agent.  Receiving a request doesn't constitute implicit permission to</span>", 
"<span class=\"comment\"> * act as one. Of course, implementing this correctly requires (SHOULD)</span>", 
"<span class=\"comment\"> * a way to turn the functionality on and off.  Another one for sysctl(),</span>", 
"<span class=\"comment\"> * I guess. -- MS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RFC1812 (4.3.3.9).<span class=\"ts\"/>A router MUST implement it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>A router SHOULD have switch turning it on/off.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>      <span class=\"ts\"/>This switch MUST be ON by default.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Gratuitous replies, zero-source replies are not implemented,</span>", 
"<span class=\"comment\"> * that complies with RFC. DO NOT implement them!!! All the idea</span>", 
"<span class=\"comment\"> * of broadcast addrmask replies as specified in RFC950 is broken.</span>", 
"<span class=\"comment\"> * The problem is that it is not uncommon to have several prefixes</span>", 
"<span class=\"comment\"> * on one physical interface. Moreover, addrmask agent can even be</span>", 
"<span class=\"comment\"> * not aware of existing another prefixes.</span>", 
"<span class=\"comment\"> * If source is zero, addrmask agent cannot choose correct prefix.</span>", 
"<span class=\"comment\"> * Gratuitous mask announcements suffer from the same problem.</span>", 
"<span class=\"comment\"> * RFC1812 explains it, but still allows to use ADDRMASK,</span>", 
"<span class=\"comment\"> * that is pretty silly. --ANK</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All these rules are so bizarre, that I removed kernel addrmask</span>", 
"<span class=\"comment\"> * support at all. It is wrong, it is obsolete, nobody uses it in</span>", 
"<span class=\"comment\"> * any case. --ANK</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Furthermore you can do it with a usermode address agent program</span>", 
"<span class=\"comment\"> * anyway...</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#icmp_address\">icmp_address</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"#if 0", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"a guy asks for address mask. Who is it?\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * RFC1812 (4.3.3.9).<span class=\"ts\"/>A router SHOULD listen all replies, and complain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>loudly if an inconsistency is found.</span>", 
"<span class=\"comment\"> * called with rcu_read_lock()</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#icmp_address_reply\">icmp_address_reply</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rt\">rt</a> = <a class=\"id\" href=\"#skb_rtable\">skb_rtable</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#in_device\">in_device</a> *<a class=\"id\" href=\"#in_dev\">in_dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#in_ifaddr\">in_ifaddr</a> *<a class=\"id\" href=\"#ifa\">ifa</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &lt; 4 || !(<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_flags\">rt_flags</a>&amp;<a class=\"id\" href=\"#RTCF_DIRECTSRC\">RTCF_DIRECTSRC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_dev\">in_dev</a> = <a class=\"id\" href=\"#__in_dev_get_rcu\">__in_dev_get_rcu</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_dev\">in_dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_dev\">in_dev</a>-><a class=\"id\" href=\"#ifa_list\">ifa_list</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#IN_DEV_LOG_MARTIANS\">IN_DEV_LOG_MARTIANS</a>(<a class=\"id\" href=\"#in_dev\">in_dev</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#IN_DEV_FORWARD\">IN_DEV_FORWARD</a>(<a class=\"id\" href=\"#in_dev\">in_dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#_mask\">_mask</a>, *<a class=\"id\" href=\"#mp\">mp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mp\">mp</a> = <a class=\"id\" href=\"#skb_header_pointer\">skb_header_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, sizeof(<a class=\"id\" href=\"#_mask\">_mask</a>), &amp;<a class=\"id\" href=\"#_mask\">_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#mp\">mp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#ifa\">ifa</a> = <a class=\"id\" href=\"#in_dev\">in_dev</a>-><a class=\"id\" href=\"#ifa_list\">ifa_list</a>; <a class=\"id\" href=\"#ifa\">ifa</a>; <a class=\"id\" href=\"#ifa\">ifa</a> = <a class=\"id\" href=\"#ifa\">ifa</a>-><a class=\"id\" href=\"#ifa_next\">ifa_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#mp\">mp</a> == <a class=\"id\" href=\"#ifa\">ifa</a>-><a class=\"id\" href=\"#ifa_mask\">ifa_mask</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#inet_ifa_match\">inet_ifa_match</a>(<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_src\">rt_src</a>, <a class=\"id\" href=\"#ifa\">ifa</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ifa\">ifa</a> && <a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Wrong address mask %pI4 from %s/%pI4\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mp\">mp</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_src\">rt_src</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#icmp_discard\">icmp_discard</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deal with incoming ICMP packets.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#icmp_rcv\">icmp_rcv</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#icmphdr\">icmphdr</a> *<a class=\"id\" href=\"#icmph\">icmph</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rt\">rt</a> = <a class=\"id\" href=\"#skb_rtable\">skb_rtable</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#xfrm4_policy_check\">xfrm4_policy_check</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#XFRM_POLICY_IN\">XFRM_POLICY_IN</a>, <a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sec_path\">sec_path</a> *<a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#skb_sec_path\">skb_sec_path</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nh\">nh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sp\">sp</a> && <a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#xvec\">xvec</a>[<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#len\">len</a> - 1]-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#XFRM_STATE_ICMP\">XFRM_STATE_ICMP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(*<a class=\"id\" href=\"#icmph\">icmph</a>) + sizeof(struct <a class=\"id\" href=\"#iphdr\">iphdr</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nh\">nh</a> = <a class=\"id\" href=\"#skb_network_offset\">skb_network_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_set_network_header\">skb_set_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(*<a class=\"id\" href=\"#icmph\">icmph</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#xfrm4_policy_check_reverse\">xfrm4_policy_check_reverse</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#XFRM_POLICY_IN\">XFRM_POLICY_IN</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_set_network_header\">skb_set_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#nh\">nh</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ICMP_INC_STATS_BH\">ICMP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ICMP_MIB_INMSGS\">ICMP_MIB_INMSGS</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#csum_fold\">csum_fold</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__skb_checksum_complete\">__skb_checksum_complete</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_pull\">pskb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(*<a class=\"id\" href=\"#icmph\">icmph</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmph\">icmph</a> = <a class=\"id\" href=\"#icmp_hdr\">icmp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ICMPMSGIN_INC_STATS_BH\">ICMPMSGIN_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>18 is the highest 'known' ICMP type. Anything else is a mystery</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>RFC 1122: 3.2.2  Unknown ICMP messages types MUST be silently</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>  discarded.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#NR_ICMP_TYPES\">NR_ICMP_TYPES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Parse the ICMP message</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_flags\">rt_flags</a> &amp; (<a class=\"id\" href=\"#RTCF_BROADCAST\">RTCF_BROADCAST</a> | <a class=\"id\" href=\"#RTCF_MULTICAST\">RTCF_MULTICAST</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>RFC 1122: 3.2.2.6 An ICMP_ECHO to broadcast MAY be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>  silently ignored (we let user decide with a sysctl).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>RFC 1122: 3.2.2.8 An ICMP_TIMESTAMP MAY be silently</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>  discarded if to broadcast/multicast.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ICMP_ECHO\">ICMP_ECHO</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ICMP_TIMESTAMP\">ICMP_TIMESTAMP</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_icmp_echo_ignore_broadcasts\">sysctl_icmp_echo_ignore_broadcasts</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ICMP_ECHO\">ICMP_ECHO</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ICMP_TIMESTAMP\">ICMP_TIMESTAMP</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ICMP_ADDRESS\">ICMP_ADDRESS</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ICMP_ADDRESSREPLY\">ICMP_ADDRESSREPLY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icmp_pointers\">icmp_pointers</a>[<a class=\"id\" href=\"#icmph\">icmph</a>-><a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#handler\">handler</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<a class=\"id\" href=\"#drop\">drop</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ICMP_INC_STATS_BH\">ICMP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ICMP_MIB_INERRORS\">ICMP_MIB_INERRORS</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This table is the definition of how we handle ICMP.</span>", 
"<span class=\"comment\"> */</span>", 
"static const struct <a class=\"id\" href=\"#icmp_control\">icmp_control</a> <a class=\"id\" href=\"#icmp_pointers\">icmp_pointers</a>[<a class=\"id\" href=\"#NR_ICMP_TYPES\">NR_ICMP_TYPES</a> + 1] = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_ECHOREPLY\">ICMP_ECHOREPLY</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_discard\">icmp_discard</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[1] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_discard\">icmp_discard</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#error\">error</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[2] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_discard\">icmp_discard</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#error\">error</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_DEST_UNREACH\">ICMP_DEST_UNREACH</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_unreach\">icmp_unreach</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#error\">error</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_SOURCE_QUENCH\">ICMP_SOURCE_QUENCH</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_unreach\">icmp_unreach</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#error\">error</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_REDIRECT\">ICMP_REDIRECT</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_redirect\">icmp_redirect</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#error\">error</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[6] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_discard\">icmp_discard</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#error\">error</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[7] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_discard\">icmp_discard</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#error\">error</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_ECHO\">ICMP_ECHO</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_echo\">icmp_echo</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[9] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_discard\">icmp_discard</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#error\">error</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[10] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_discard\">icmp_discard</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#error\">error</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_TIME_EXCEEDED\">ICMP_TIME_EXCEEDED</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_unreach\">icmp_unreach</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#error\">error</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_PARAMETERPROB\">ICMP_PARAMETERPROB</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_unreach\">icmp_unreach</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#error\">error</a> = 1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_TIMESTAMP\">ICMP_TIMESTAMP</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_timestamp\">icmp_timestamp</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_TIMESTAMPREPLY\">ICMP_TIMESTAMPREPLY</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_discard\">icmp_discard</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_INFO_REQUEST\">ICMP_INFO_REQUEST</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_discard\">icmp_discard</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_INFO_REPLY\">ICMP_INFO_REPLY</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_discard\">icmp_discard</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_ADDRESS\">ICMP_ADDRESS</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_address\">icmp_address</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#ICMP_ADDRESSREPLY\">ICMP_ADDRESSREPLY</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#icmp_address_reply\">icmp_address_reply</a>,", 
"<span class=\"ts\"/>},", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__net_exit\">__net_exit</a> <a class=\"id\" href=\"#icmp_sk_exit\">icmp_sk_exit</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_ctl_sock_destroy\">inet_ctl_sock_destroy</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#icmp_sk\">icmp_sk</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#icmp_sk\">icmp_sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#icmp_sk\">icmp_sk</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__net_init\">__net_init</a> <a class=\"id\" href=\"#icmp_sk_init\">icmp_sk_init</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#icmp_sk\">icmp_sk</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(struct <a class=\"id\" href=\"#sock\">sock</a> *), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#icmp_sk\">icmp_sk</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#inet_ctl_sock_create\">inet_ctl_sock_create</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#PF_INET\">PF_INET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#SOCK_RAW\">SOCK_RAW</a>, <a class=\"id\" href=\"#IPPROTO_ICMP\">IPPROTO_ICMP</a>, <a class=\"id\" href=\"#net\">net</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#icmp_sk\">icmp_sk</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Enough space for 2 64K ICMP packets, including</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sk_buff struct overhead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(2 * ((64 * 1024) + sizeof(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Speedup sock_wfree()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_set_flag\">sock_set_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_USE_WRITE_QUEUE\">SOCK_USE_WRITE_QUEUE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#pmtudisc\">pmtudisc</a> = <a class=\"id\" href=\"#IP_PMTUDISC_DONT\">IP_PMTUDISC_DONT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Control parameters for ECHO replies. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_icmp_echo_ignore_all\">sysctl_icmp_echo_ignore_all</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_icmp_echo_ignore_broadcasts\">sysctl_icmp_echo_ignore_broadcasts</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Control parameter - ignore bogus broadcast responses? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_icmp_ignore_bogus_error_responses\">sysctl_icmp_ignore_bogus_error_responses</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>Configurable global rate limit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>ratelimit defines tokens/packet consumed for dst-&gt;rate_token</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>bucket ratemask defines which icmp types are ratelimited by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>setting<span class=\"ts\"/>it's bit position.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>default:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>dest unreachable (3), source quench (4),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>time exceeded (11), parameter problem (12)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_icmp_ratelimit\">sysctl_icmp_ratelimit</a> = 1 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_icmp_ratemask\">sysctl_icmp_ratemask</a> = 0x1818;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#sysctl_icmp_errors_use_inbound_ifaddr\">sysctl_icmp_errors_use_inbound_ifaddr</a> = 0;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_ctl_sock_destroy\">inet_ctl_sock_destroy</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#icmp_sk\">icmp_sk</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#ipv4\">ipv4</a>.<a class=\"id\" href=\"#icmp_sk\">icmp_sk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> <a class=\"id\" href=\"#__net_initdata\">__net_initdata</a> <a class=\"id\" href=\"#icmp_sk_ops\">icmp_sk_ops</a> = {", 
"       .<a class=\"id\" href=\"#init\">init</a> = <a class=\"id\" href=\"#icmp_sk_init\">icmp_sk_init</a>,", 
"       .<a class=\"id\" href=\"#exit\">exit</a> = <a class=\"id\" href=\"#icmp_sk_exit\">icmp_sk_exit</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#icmp_init\">icmp_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_pernet_subsys\">register_pernet_subsys</a>(&amp;<a class=\"id\" href=\"#icmp_sk_ops\">icmp_sk_ops</a>);", 
"}", 
];
xr_frag_insert('l/80/b694b2d4ec586e0eac323458e2365d7ba64de5.xr', __xr_tmp);
