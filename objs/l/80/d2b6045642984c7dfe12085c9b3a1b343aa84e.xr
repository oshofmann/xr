var __xr_tmp = [
"struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#MAX_ADDR_LEN\">MAX_ADDR_LEN</a>];", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETDEV_HW_ADDR_T_LAN\">NETDEV_HW_ADDR_T_LAN</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETDEV_HW_ADDR_T_SAN\">NETDEV_HW_ADDR_T_SAN</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETDEV_HW_ADDR_T_SLAVE\">NETDEV_HW_ADDR_T_SLAVE</a><span class=\"ts\"/><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETDEV_HW_ADDR_T_UNICAST\">NETDEV_HW_ADDR_T_UNICAST</a><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETDEV_HW_ADDR_T_MULTICAST\">NETDEV_HW_ADDR_T_MULTICAST</a><span class=\"ts\"/>5", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refcount\">refcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synced\">synced</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_use\">global_use</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netdev_hw_addr_list_count\">netdev_hw_addr_list_count</a>(<a class=\"id\" href=\"#l\">l</a>) ((<a class=\"id\" href=\"#l\">l</a>)-><a class=\"id\" href=\"#count\">count</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netdev_hw_addr_list_empty\">netdev_hw_addr_list_empty</a>(<a class=\"id\" href=\"#l\">l</a>) (<a class=\"id\" href=\"#netdev_hw_addr_list_count\">netdev_hw_addr_list_count</a>(<a class=\"id\" href=\"#l\">l</a>) == 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netdev_hw_addr_list_for_each\">netdev_hw_addr_list_for_each</a>(<a class=\"id\" href=\"#ha\">ha</a>, <a class=\"id\" href=\"#l\">l</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ha\">ha</a>, &amp;(<a class=\"id\" href=\"#l\">l</a>)-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netdev_uc_count\">netdev_uc_count</a>(<a class=\"id\" href=\"#dev\">dev</a>) <a class=\"id\" href=\"#netdev_hw_addr_list_count\">netdev_hw_addr_list_count</a>(&amp;(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#uc\">uc</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netdev_uc_empty\">netdev_uc_empty</a>(<a class=\"id\" href=\"#dev\">dev</a>) <a class=\"id\" href=\"#netdev_hw_addr_list_empty\">netdev_hw_addr_list_empty</a>(&amp;(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#uc\">uc</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netdev_for_each_uc_addr\">netdev_for_each_uc_addr</a>(<a class=\"id\" href=\"#ha\">ha</a>, <a class=\"id\" href=\"#dev\">dev</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_hw_addr_list_for_each\">netdev_hw_addr_list_for_each</a>(<a class=\"id\" href=\"#ha\">ha</a>, &amp;(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#uc\">uc</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netdev_mc_count\">netdev_mc_count</a>(<a class=\"id\" href=\"#dev\">dev</a>) <a class=\"id\" href=\"#netdev_hw_addr_list_count\">netdev_hw_addr_list_count</a>(&amp;(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#mc\">mc</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netdev_mc_empty\">netdev_mc_empty</a>(<a class=\"id\" href=\"#dev\">dev</a>) <a class=\"id\" href=\"#netdev_hw_addr_list_empty\">netdev_hw_addr_list_empty</a>(&amp;(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#mc\">mc</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netdev_for_each_mc_addr\">netdev_for_each_mc_addr</a>(<a class=\"id\" href=\"#ha\">ha</a>, <a class=\"id\" href=\"#dev\">dev</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_hw_addr_list_for_each\">netdev_hw_addr_list_for_each</a>(<a class=\"id\" href=\"#ha\">ha</a>, &amp;(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#mc\">mc</a>)", 
"", 
"struct <a class=\"id\" href=\"#hh_cache\">hh_cache</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hh_cache\">hh_cache</a> *<a class=\"id\" href=\"#hh_next\">hh_next</a>;<span class=\"ts\"/><span class=\"comment\">/* Next entry<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#hh_refcnt\">hh_refcnt</a>;<span class=\"ts\"/><span class=\"comment\">/* number of users                   */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We want hh_output, hh_len, hh_lock and hh_data be a in a separate</span>", 
"<span class=\"comment\"> * cache line on SMP.</span>", 
"<span class=\"comment\"> * They are mostly read, but hh_refcnt may be changed quite frequently,</span>", 
"<span class=\"comment\"> * incurring cache line ping pongs.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hh_type\">hh_type</a> <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* protocol identifier, f.e ETH_P_IP</span>", 
"<span class=\"comment\">                                         *  NOTE:  For VLANs, this will be the</span>", 
"<span class=\"comment\">                                         *  encapuslated type. --BLG</span>", 
"<span class=\"comment\">                                         */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hh_len\">hh_len</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* length of header */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#hh_output\">hh_output</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seqlock_t\">seqlock_t</a><span class=\"ts\"/><a class=\"id\" href=\"#hh_lock\">hh_lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cached hardware header; allow for machine alignment needs.        */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HH_DATA_MOD\">HH_DATA_MOD</a><span class=\"ts\"/>16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HH_DATA_OFF\">HH_DATA_OFF</a>(<a class=\"id\" href=\"#__len\">__len</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#HH_DATA_MOD\">HH_DATA_MOD</a> - (((<a class=\"id\" href=\"#__len\">__len</a> - 1) &amp; (<a class=\"id\" href=\"#HH_DATA_MOD\">HH_DATA_MOD</a> - 1)) + 1))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HH_DATA_ALIGN\">HH_DATA_ALIGN</a>(<a class=\"id\" href=\"#__len\">__len</a>) \\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#__len\">__len</a>)+(<a class=\"id\" href=\"#HH_DATA_MOD\">HH_DATA_MOD</a>-1))&amp;~(<a class=\"id\" href=\"#HH_DATA_MOD\">HH_DATA_MOD</a> - 1))", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#hh_data\">hh_data</a>[<a class=\"id\" href=\"#HH_DATA_ALIGN\">HH_DATA_ALIGN</a>(<a class=\"id\" href=\"#LL_MAX_HEADER\">LL_MAX_HEADER</a>) / sizeof(long)];", 
"};", 
"", 
"<span class=\"comment\">/* Reserve HH_DATA_MOD byte aligned hard_header_len, but at least that much.</span>", 
"<span class=\"comment\"> * Alternative is:</span>", 
"<span class=\"comment\"> *   dev-&gt;hard_header_len ? (dev-&gt;hard_header_len +</span>", 
"<span class=\"comment\"> *                           (HH_DATA_MOD - 1)) &amp; ~(HH_DATA_MOD - 1) : 0</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We could use other alignment values, but we must maintain the</span>", 
"<span class=\"comment\"> * relationship HH alignment &lt;= LL alignment.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LL_ALLOCATED_SPACE also takes into account the tailroom the device</span>", 
"<span class=\"comment\"> * may need.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LL_RESERVED_SPACE\">LL_RESERVED_SPACE</a>(<a class=\"id\" href=\"#dev\">dev</a>) \\", 
"<span class=\"ts\"/>((((<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a>+(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#needed_headroom\">needed_headroom</a>)&amp;~(<a class=\"id\" href=\"#HH_DATA_MOD\">HH_DATA_MOD</a> - 1)) + <a class=\"id\" href=\"#HH_DATA_MOD\">HH_DATA_MOD</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LL_RESERVED_SPACE_EXTRA\">LL_RESERVED_SPACE_EXTRA</a>(<a class=\"id\" href=\"#dev\">dev</a>,<a class=\"id\" href=\"#extra\">extra</a>) \\", 
"<span class=\"ts\"/>((((<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a>+(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#needed_headroom\">needed_headroom</a>+(<a class=\"id\" href=\"#extra\">extra</a>))&amp;~(<a class=\"id\" href=\"#HH_DATA_MOD\">HH_DATA_MOD</a> - 1)) + <a class=\"id\" href=\"#HH_DATA_MOD\">HH_DATA_MOD</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LL_ALLOCATED_SPACE\">LL_ALLOCATED_SPACE</a>(<a class=\"id\" href=\"#dev\">dev</a>) \\", 
"<span class=\"ts\"/>((((<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a>+(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#needed_headroom\">needed_headroom</a>+(<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#needed_tailroom\">needed_tailroom</a>)&amp;~(<a class=\"id\" href=\"#HH_DATA_MOD\">HH_DATA_MOD</a> - 1)) + <a class=\"id\" href=\"#HH_DATA_MOD\">HH_DATA_MOD</a>)", 
"", 
"struct <a class=\"id\" href=\"#header_ops\">header_ops</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#create\">create</a>) (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned short <a class=\"id\" href=\"#type\">type</a>, const void *<a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const void *<a class=\"id\" href=\"#saddr\">saddr</a>, unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#parse\">parse</a>)(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned char *<a class=\"id\" href=\"#haddr\">haddr</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#rebuild\">rebuild</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_HEADER_CACHE\">HAVE_HEADER_CACHE</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#cache\">cache</a>)(const struct <a class=\"id\" href=\"#neighbour\">neighbour</a> *<a class=\"id\" href=\"#neigh\">neigh</a>, struct <a class=\"id\" href=\"#hh_cache\">hh_cache</a> *<a class=\"id\" href=\"#hh\">hh</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#cache_update\">cache_update</a>)(struct <a class=\"id\" href=\"#hh_cache\">hh_cache</a> *<a class=\"id\" href=\"#hh\">hh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#haddr\">haddr</a>);", 
"};", 
"", 
"<span class=\"comment\">/* These flag bits are private to the generic network queueing</span>", 
"<span class=\"comment\"> * layer, they may not be explicitly referenced by any other</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum <a class=\"id\" href=\"#netdev_state_t\">netdev_state_t</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__LINK_STATE_START\">__LINK_STATE_START</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__LINK_STATE_PRESENT\">__LINK_STATE_PRESENT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__LINK_STATE_NOCARRIER\">__LINK_STATE_NOCARRIER</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__LINK_STATE_LINKWATCH_PENDING\">__LINK_STATE_LINKWATCH_PENDING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__LINK_STATE_DORMANT\">__LINK_STATE_DORMANT</a>,", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This structure holds at boot time configured netdevice settings. They</span>", 
"<span class=\"comment\"> * are then used in the device probing.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#netdev_boot_setup\">netdev_boot_setup</a> {", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ifmap\">ifmap</a> <a class=\"id\" href=\"#map\">map</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETDEV_BOOT_SETUP_MAX\">NETDEV_BOOT_SETUP_MAX</a> 8", 
"", 
"extern int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#netdev_boot_setup\">netdev_boot_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Structure for NAPI scheduling similar to tasklet but with weighting</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* The poll_list must only be managed by the entity which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * changes the state of the NAPI_STATE_SCHED bit.  This means</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * whoever atomically sets that bit can add this napi_struct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the per-cpu poll_list, and whoever clears that bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can remove from the list right before clearing the bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#poll_list\">poll_list</a>;", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#poll\">poll</a>)(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *, int);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETPOLL\">CONFIG_NETPOLL</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_lock\">poll_lock</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_owner\">poll_owner</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gro_count\">gro_count</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#dev_list\">dev_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#gro_list\">gro_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#skb\">skb</a>;", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NAPI_STATE_SCHED\">NAPI_STATE_SCHED</a>,<span class=\"ts\"/><span class=\"comment\">/* Poll is scheduled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NAPI_STATE_DISABLE\">NAPI_STATE_DISABLE</a>,<span class=\"ts\"/><span class=\"comment\">/* Disable pending */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NAPI_STATE_NPSVC\">NAPI_STATE_NPSVC</a>,<span class=\"ts\"/><span class=\"comment\">/* Netpoll - don't dequeue from poll_list */</span>", 
"};", 
"", 
"enum <a class=\"id\" href=\"#gro_result\">gro_result</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GRO_MERGED\">GRO_MERGED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GRO_MERGED_FREE\">GRO_MERGED_FREE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GRO_HELD\">GRO_HELD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GRO_NORMAL\">GRO_NORMAL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GRO_DROP\">GRO_DROP</a>,", 
"};", 
"typedef enum <a class=\"id\" href=\"#gro_result\">gro_result</a> <a class=\"id\" href=\"#gro_result_t\">gro_result_t</a>;", 
"", 
"typedef struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#rx_handler_func_t\">rx_handler_func_t</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"extern void <a class=\"id\" href=\"#__napi_schedule\">__napi_schedule</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#napi_disable_pending\">napi_disable_pending</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_DISABLE\">NAPI_STATE_DISABLE</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>napi_schedule_prep - check if napi can be scheduled</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: napi context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Test if NAPI routine is already running, and if not mark</span>", 
"<span class=\"comment\"> * it as running.  This is used as a condition variable</span>", 
"<span class=\"comment\"> * insure only one NAPI poll instance runs.  We also make</span>", 
"<span class=\"comment\"> * sure there is no pending NAPI disable.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#napi_schedule_prep\">napi_schedule_prep</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#napi_disable_pending\">napi_disable_pending</a>(<a class=\"id\" href=\"#n\">n</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_SCHED\">NAPI_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>napi_schedule - schedule NAPI poll</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: napi context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Schedule NAPI poll routine to be called if it is not already</span>", 
"<span class=\"comment\"> * running.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#napi_schedule\">napi_schedule</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#napi_schedule_prep\">napi_schedule_prep</a>(<a class=\"id\" href=\"#n\">n</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__napi_schedule\">__napi_schedule</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Try to reschedule poll. Called by dev-&gt;poll() after napi_complete().  */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#napi_reschedule\">napi_reschedule</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#napi_schedule_prep\">napi_schedule_prep</a>(<a class=\"id\" href=\"#napi\">napi</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__napi_schedule\">__napi_schedule</a>(<a class=\"id\" href=\"#napi\">napi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>napi_complete - NAPI processing complete</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: napi context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mark NAPI processing as complete.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#__napi_complete\">__napi_complete</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>);", 
"extern void <a class=\"id\" href=\"#napi_complete\">napi_complete</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>napi_disable - prevent NAPI from scheduling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: napi context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Stop NAPI from being scheduled on this context.</span>", 
"<span class=\"comment\"> * Waits till any outstanding processing completes.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#napi_disable\">napi_disable</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_DISABLE\">NAPI_STATE_DISABLE</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_SCHED\">NAPI_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_DISABLE\">NAPI_STATE_DISABLE</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>napi_enable - enable NAPI scheduling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: napi context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Resume NAPI from being scheduled on this context.</span>", 
"<span class=\"comment\"> * Must be paired with napi_disable.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#napi_enable\">napi_enable</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_SCHED\">NAPI_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__before_clear_bit\">smp_mb__before_clear_bit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_SCHED\">NAPI_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>napi_synchronize - wait until NAPI is not running</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n: napi context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wait until NAPI is done being scheduled on this context.</span>", 
"<span class=\"comment\"> * Waits till any outstanding processing completes but</span>", 
"<span class=\"comment\"> * does not disable future activations.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#napi_synchronize\">napi_synchronize</a>(const struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_SCHED\">NAPI_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(1);", 
"}", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#napi_synchronize\">napi_synchronize</a>(<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"enum <a class=\"id\" href=\"#netdev_queue_state_t\">netdev_queue_state_t</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__QUEUE_STATE_XOFF\">__QUEUE_STATE_XOFF</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__QUEUE_STATE_FROZEN\">__QUEUE_STATE_FROZEN</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> {", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * read mostly part</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#qdisc\">qdisc</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#qdisc_sleeping\">qdisc_sleeping</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * write mostly part</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_xmit_lock\">_xmit_lock</a> <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xmit_lock_owner\">xmit_lock_owner</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * please use this field instead of dev-&gt;trans_start</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trans_start\">trans_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tx_bytes\">tx_bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tx_packets\">tx_packets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tx_dropped\">tx_dropped</a>;", 
"} <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This structure holds an RPS map which can be of variable length.  The</span>", 
"<span class=\"comment\"> * map is an array of CPUs.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rps_map\">rps_map</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cpus\">cpus</a>[0];", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPS_MAP_SIZE\">RPS_MAP_SIZE</a>(<a class=\"id\" href=\"#_num\">_num</a>) (sizeof(struct <a class=\"id\" href=\"#rps_map\">rps_map</a>) + (<a class=\"id\" href=\"#_num\">_num</a> * sizeof(<a class=\"id\" href=\"#u16\">u16</a>)))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The rps_dev_flow structure contains the mapping of a flow to a CPU and the</span>", 
"<span class=\"comment\"> * tail pointer for that CPU's input queue at the time of last enqueue.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rps_dev_flow\">rps_dev_flow</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#fill\">fill</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#last_qtail\">last_qtail</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The rps_dev_flow_table structure contains a table of flow mappings.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rps_dev_flow_table\">rps_dev_flow_table</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#free_work\">free_work</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rps_dev_flow\">rps_dev_flow</a> <a class=\"id\" href=\"#flows\">flows</a>[0];", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPS_DEV_FLOW_TABLE_SIZE\">RPS_DEV_FLOW_TABLE_SIZE</a>(<a class=\"id\" href=\"#_num\">_num</a>) (sizeof(struct <a class=\"id\" href=\"#rps_dev_flow_table\">rps_dev_flow_table</a>) + \\", 
"    (<a class=\"id\" href=\"#_num\">_num</a> * sizeof(struct <a class=\"id\" href=\"#rps_dev_flow\">rps_dev_flow</a>)))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The rps_sock_flow_table contains mappings of flows to the last CPU</span>", 
"<span class=\"comment\"> * on which they were processed by the application (set in recvmsg).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rps_sock_flow_table\">rps_sock_flow_table</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#ents\">ents</a>[0];", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#RPS_SOCK_FLOW_TABLE_SIZE\">RPS_SOCK_FLOW_TABLE_SIZE</a>(<a class=\"id\" href=\"#_num\">_num</a>) (sizeof(struct <a class=\"id\" href=\"#rps_sock_flow_table\">rps_sock_flow_table</a>) + \\", 
"    (<a class=\"id\" href=\"#_num\">_num</a> * sizeof(<a class=\"id\" href=\"#u16\">u16</a>)))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPS_NO_CPU\">RPS_NO_CPU</a> 0xffff", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rps_record_sock_flow\">rps_record_sock_flow</a>(struct <a class=\"id\" href=\"#rps_sock_flow_table\">rps_sock_flow_table</a> *<a class=\"id\" href=\"#table\">table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#table\">table</a> && <a class=\"id\" href=\"#hash\">hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#hash\">hash</a> &amp; <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We only give a hint, preemption can change cpu under us */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#ents\">ents</a>[<a class=\"id\" href=\"#index\">index</a>] != <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#ents\">ents</a>[<a class=\"id\" href=\"#index\">index</a>] = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rps_reset_sock_flow\">rps_reset_sock_flow</a>(struct <a class=\"id\" href=\"#rps_sock_flow_table\">rps_sock_flow_table</a> *<a class=\"id\" href=\"#table\">table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#table\">table</a> && <a class=\"id\" href=\"#hash\">hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#ents\">ents</a>[<a class=\"id\" href=\"#hash\">hash</a> &amp; <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#mask\">mask</a>] = <a class=\"id\" href=\"#RPS_NO_CPU\">RPS_NO_CPU</a>;", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#rps_sock_flow_table\">rps_sock_flow_table</a> *<a class=\"id\" href=\"#rps_sock_flow_table\">rps_sock_flow_table</a>;", 
"", 
"<span class=\"comment\">/* This structure contains an instance of an RX queue. */</span>", 
"struct <a class=\"id\" href=\"#netdev_rx_queue\">netdev_rx_queue</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rps_map\">rps_map</a> *<a class=\"id\" href=\"#rps_map\">rps_map</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rps_dev_flow_table\">rps_dev_flow_table</a> *<a class=\"id\" href=\"#rps_flow_table\">rps_flow_table</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> <a class=\"id\" href=\"#kobj\">kobj</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_rx_queue\">netdev_rx_queue</a> *<a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#count\">count</a>;", 
"} <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_RPS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This structure defines the management hooks for network devices.</span>", 
"<span class=\"comment\"> * The following hooks can be defined; unless noted otherwise, they are</span>", 
"<span class=\"comment\"> * optional and can be filled with a null pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int (*ndo_init)(struct net_device *dev);</span>", 
"<span class=\"comment\"> *     This function is called once when network device is registered.</span>", 
"<span class=\"comment\"> *     The network device can use this to any late stage initializaton</span>", 
"<span class=\"comment\"> *     or semantic validattion. It can fail with an error code which will</span>", 
"<span class=\"comment\"> *     be propogated back to register_netdev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void (*ndo_uninit)(struct net_device *dev);</span>", 
"<span class=\"comment\"> *     This function is called when device is unregistered or when registration</span>", 
"<span class=\"comment\"> *     fails. It is not called if init fails.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int (*ndo_open)(struct net_device *dev);</span>", 
"<span class=\"comment\"> *     This function is called when network device transistions to the up</span>", 
"<span class=\"comment\"> *     state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int (*ndo_stop)(struct net_device *dev);</span>", 
"<span class=\"comment\"> *     This function is called when network device transistions to the down</span>", 
"<span class=\"comment\"> *     state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * netdev_tx_t (*ndo_start_xmit)(struct sk_buff *skb,</span>", 
"<span class=\"comment\"> *                               struct net_device *dev);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called when a packet needs to be transmitted.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must return NETDEV_TX_OK , NETDEV_TX_BUSY.</span>", 
"<span class=\"comment\"> *        (can also return NETDEV_TX_LOCKED iff NETIF_F_LLTX)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Required can not be NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * u16 (*ndo_select_queue)(struct net_device *dev, struct sk_buff *skb);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called to decide which queue to when device supports multiple</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>transmit queues.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void (*ndo_change_rx_flags)(struct net_device *dev, int flags);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is called to allow device receiver to make</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>changes to configuration when multicast or promiscious is enabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void (*ndo_set_rx_mode)(struct net_device *dev);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is called device changes address list filtering.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void (*ndo_set_multicast_list)(struct net_device *dev);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is called when the multicast address list changes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int (*ndo_set_mac_address)(struct net_device *dev, void *addr);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function  is called when the Media Access Control address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>needs to be changed. If this interface is not defined, the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mac address can not be changed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int (*ndo_validate_addr)(struct net_device *dev);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Test if Media Access Control address is valid for the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int (*ndo_do_ioctl)(struct net_device *dev, struct ifreq *ifr, int cmd);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called when a user request an ioctl which can't be handled by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the generic interface code. If not defined ioctl's return</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>not supported error code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int (*ndo_set_config)(struct net_device *dev, struct ifmap *map);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Used to set network devices bus interface parameters. This interface</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is retained for legacy reason, new devices should use the bus</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interface (PCI) for low level management.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int (*ndo_change_mtu)(struct net_device *dev, int new_mtu);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called when a user wants to change the Maximum Transfer Unit</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of a device. If not defined, any request to change MTU will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will return an error.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void (*ndo_tx_timeout)(struct net_device *dev);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Callback uses when the transmitter has not made any progress</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for dev-&gt;watchdog ticks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * struct rtnl_link_stats64* (*ndo_get_stats64)(struct net_device *dev,</span>", 
"<span class=\"comment\"> *                      struct rtnl_link_stats64 *storage);</span>", 
"<span class=\"comment\"> * struct net_device_stats* (*ndo_get_stats)(struct net_device *dev);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called when a user wants to get the network device usage</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>statistics. Drivers must do one of the following:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1. Define @ndo_get_stats64 to fill in a zero-initialised</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   rtnl_link_stats64 structure passed by the caller.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2. Define @ndo_get_stats to update a net_device_stats structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   (which should normally be dev-&gt;stats) and return a pointer to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   it. The structure may be changed asynchronously only if each</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   field is written atomically.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>3. Update dev-&gt;stats asynchronously and atomically, and define</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   neither operation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void (*ndo_vlan_rx_register)(struct net_device *dev, struct vlan_group *grp);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If device support VLAN receive accleration</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(ie. dev-&gt;features &amp; NETIF_F_HW_VLAN_RX), then this function is called</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>when vlan groups for the device changes.  Note: grp is NULL</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if no vlan's groups are being used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void (*ndo_vlan_rx_add_vid)(struct net_device *dev, unsigned short vid);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If device support VLAN filtering (dev-&gt;features &amp; NETIF_F_HW_VLAN_FILTER)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this function is called when a VLAN id is registered.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void (*ndo_vlan_rx_kill_vid)(struct net_device *dev, unsigned short vid);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If device support VLAN filtering (dev-&gt;features &amp; NETIF_F_HW_VLAN_FILTER)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this function is called when a VLAN id is unregistered.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void (*ndo_poll_controller)(struct net_device *dev);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SR-IOV management functions.</span>", 
"<span class=\"comment\"> * int (*ndo_set_vf_mac)(struct net_device *dev, int vf, u8* mac);</span>", 
"<span class=\"comment\"> * int (*ndo_set_vf_vlan)(struct net_device *dev, int vf, u16 vlan, u8 qos);</span>", 
"<span class=\"comment\"> * int (*ndo_set_vf_tx_rate)(struct net_device *dev, int vf, int rate);</span>", 
"<span class=\"comment\"> * int (*ndo_get_vf_config)(struct net_device *dev,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int vf, struct ifla_vf_info *ivf);</span>", 
"<span class=\"comment\"> * int (*ndo_set_vf_port)(struct net_device *dev, int vf,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct nlattr *port[]);</span>", 
"<span class=\"comment\"> * int (*ndo_get_vf_port)(struct net_device *dev, int vf, struct sk_buff *skb);</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_NET_DEVICE_OPS\">HAVE_NET_DEVICE_OPS</a>", 
"struct <a class=\"id\" href=\"#net_device_ops\">net_device_ops</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_init\">ndo_init</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_uninit\">ndo_uninit</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_open\">ndo_open</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_stop\">ndo_stop</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_tx_t\">netdev_tx_t</a><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_start_xmit\">ndo_start_xmit</a>) (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_select_queue\">ndo_select_queue</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_change_rx_flags\">ndo_change_rx_flags</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_set_rx_mode\">ndo_set_rx_mode</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_set_multicast_list\">ndo_set_multicast_list</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_set_mac_address\">ndo_set_mac_address</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_validate_addr\">ndo_validate_addr</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_do_ioctl\">ndo_do_ioctl</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>        struct <a class=\"id\" href=\"#ifreq\">ifreq</a> *<a class=\"id\" href=\"#ifr\">ifr</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_set_config\">ndo_set_config</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>          struct <a class=\"id\" href=\"#ifmap\">ifmap</a> *<a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_change_mtu\">ndo_change_mtu</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#new_mtu\">new_mtu</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_neigh_setup\">ndo_neigh_setup</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#neigh_parms\">neigh_parms</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_tx_timeout\">ndo_tx_timeout</a>) (struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtnl_link_stats64\">rtnl_link_stats64</a>* (*<a class=\"id\" href=\"#ndo_get_stats64\">ndo_get_stats64</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#rtnl_link_stats64\">rtnl_link_stats64</a> *<a class=\"id\" href=\"#storage\">storage</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device_stats\">net_device_stats</a>* (*<a class=\"id\" href=\"#ndo_get_stats\">ndo_get_stats</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_vlan_rx_register\">ndo_vlan_rx_register</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>        struct <a class=\"id\" href=\"#vlan_group\">vlan_group</a> *<a class=\"id\" href=\"#grp\">grp</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_vlan_rx_add_vid\">ndo_vlan_rx_add_vid</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned short <a class=\"id\" href=\"#vid\">vid</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_vlan_rx_kill_vid\">ndo_vlan_rx_kill_vid</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>        unsigned short <a class=\"id\" href=\"#vid\">vid</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_POLL_CONTROLLER\">CONFIG_NET_POLL_CONTROLLER</a>", 
"<span class=\"ts\"/>void                    (*<a class=\"id\" href=\"#ndo_poll_controller\">ndo_poll_controller</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_netpoll_setup\">ndo_netpoll_setup</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#netpoll_info\">netpoll_info</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_netpoll_cleanup\">ndo_netpoll_cleanup</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_set_vf_mac\">ndo_set_vf_mac</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#mac\">mac</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_set_vf_vlan\">ndo_set_vf_vlan</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#vlan\">vlan</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#qos\">qos</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_set_vf_tx_rate\">ndo_set_vf_tx_rate</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#vf\">vf</a>, int <a class=\"id\" href=\"#rate\">rate</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_get_vf_config\">ndo_get_vf_config</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#vf\">vf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#ifla_vf_info\">ifla_vf_info</a> *<a class=\"id\" href=\"#ivf\">ivf</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_set_vf_port\">ndo_set_vf_port</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#vf\">vf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#port\">port</a>[]);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_get_vf_port\">ndo_get_vf_port</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#vf\">vf</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_FCOE\">CONFIG_FCOE</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_FCOE_MODULE\">CONFIG_FCOE_MODULE</a>)", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_fcoe_enable\">ndo_fcoe_enable</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_fcoe_disable\">ndo_fcoe_disable</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_fcoe_ddp_setup\">ndo_fcoe_ddp_setup</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#xid\">xid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#sgc\">sgc</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_fcoe_ddp_done\">ndo_fcoe_ddp_done</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#xid\">xid</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETDEV_FCOE_WWNN\">NETDEV_FCOE_WWNN</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETDEV_FCOE_WWPN\">NETDEV_FCOE_WWPN</a> 1", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ndo_fcoe_get_wwn\">ndo_fcoe_get_wwn</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#wwn\">wwn</a>, int <a class=\"id\" href=\"#type\">type</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The DEVICE structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Actually, this whole structure is a big mistake.  It mixes I/O</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>data with strictly \"high-level\" data, and it has to know about</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>almost every data structure used in the INET module.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>FIXME: cleanup struct net_device such that network protocol info</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>moves out.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> {", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is the first field of the \"visible\" part of this structure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (i.e. as seen by users in the \"Space.c\" file).  It is the name</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the interface.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a>];", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pm_qos_request_list\">pm_qos_request_list</a> <a class=\"id\" href=\"#pm_qos_req\">pm_qos_req</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* device name hash chain */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><a class=\"id\" href=\"#name_hlist\">name_hlist</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* snmp alias */</span>", 
"<span class=\"ts\"/>char <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ifalias\">ifalias</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>I/O specific fields</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>FIXME: Merge these and struct ifmap into one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_end\">mem_end</a>;<span class=\"ts\"/><span class=\"comment\">/* shared mem end<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_start\">mem_start</a>;<span class=\"ts\"/><span class=\"comment\">/* shared mem start<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base_addr\">base_addr</a>;<span class=\"ts\"/><span class=\"comment\">/* device I/O address<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* device IRQ number<span class=\"ts\"/>*/</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Some hardware also needs these fields, but they are not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>part of the usual set specified in Space.c.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#if_port\">if_port</a>;<span class=\"ts\"/><span class=\"comment\">/* Selectable AUI, TP,..*/</span>", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma\">dma</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* DMA channel<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#dev_list\">dev_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#napi_list\">napi_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#unreg_list\">unreg_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Net device features */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_SG\">NETIF_F_SG</a><span class=\"ts\"/><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* Scatter/gather IO. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_IP_CSUM\">NETIF_F_IP_CSUM</a><span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"comment\">/* Can checksum TCP/UDP over IPv4. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_NO_CSUM\">NETIF_F_NO_CSUM</a><span class=\"ts\"/><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"comment\">/* Does not require checksum. F.e. loopack. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_HW_CSUM\">NETIF_F_HW_CSUM</a><span class=\"ts\"/><span class=\"ts\"/>8<span class=\"ts\"/><span class=\"comment\">/* Can checksum all the packets. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_IPV6_CSUM\">NETIF_F_IPV6_CSUM</a><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"comment\">/* Can checksum TCP/UDP over IPV6 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_HIGHDMA\">NETIF_F_HIGHDMA</a><span class=\"ts\"/><span class=\"ts\"/>32<span class=\"ts\"/><span class=\"comment\">/* Can DMA to high memory. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_FRAGLIST\">NETIF_F_FRAGLIST</a><span class=\"ts\"/>64<span class=\"ts\"/><span class=\"comment\">/* Scatter/gather IO. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_HW_VLAN_TX\">NETIF_F_HW_VLAN_TX</a><span class=\"ts\"/>128<span class=\"ts\"/><span class=\"comment\">/* Transmit VLAN hw acceleration */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_HW_VLAN_RX\">NETIF_F_HW_VLAN_RX</a><span class=\"ts\"/>256<span class=\"ts\"/><span class=\"comment\">/* Receive VLAN hw acceleration */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_HW_VLAN_FILTER\">NETIF_F_HW_VLAN_FILTER</a><span class=\"ts\"/>512<span class=\"ts\"/><span class=\"comment\">/* Receive filtering on VLAN */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_VLAN_CHALLENGED\">NETIF_F_VLAN_CHALLENGED</a><span class=\"ts\"/>1024<span class=\"ts\"/><span class=\"comment\">/* Device cannot handle VLAN packets */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_GSO\">NETIF_F_GSO</a><span class=\"ts\"/><span class=\"ts\"/>2048<span class=\"ts\"/><span class=\"comment\">/* Enable software GSO. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_LLTX\">NETIF_F_LLTX</a><span class=\"ts\"/><span class=\"ts\"/>4096<span class=\"ts\"/><span class=\"comment\">/* LockLess TX - deprecated. Please */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do not use LLTX in new drivers */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_NETNS_LOCAL\">NETIF_F_NETNS_LOCAL</a><span class=\"ts\"/>8192<span class=\"ts\"/><span class=\"comment\">/* Does not change network namespaces */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_GRO\">NETIF_F_GRO</a><span class=\"ts\"/><span class=\"ts\"/>16384<span class=\"ts\"/><span class=\"comment\">/* Generic receive offload */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_LRO\">NETIF_F_LRO</a><span class=\"ts\"/><span class=\"ts\"/>32768<span class=\"ts\"/><span class=\"comment\">/* large receive offload */</span>", 
"", 
"<span class=\"comment\">/* the GSO_MASK reserves bits 16 through 23 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_FCOE_CRC\">NETIF_F_FCOE_CRC</a><span class=\"ts\"/>(1 << 24) <span class=\"comment\">/* FCoE CRC32 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_SCTP_CSUM\">NETIF_F_SCTP_CSUM</a><span class=\"ts\"/>(1 << 25) <span class=\"comment\">/* SCTP checksum offload */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_FCOE_MTU\">NETIF_F_FCOE_MTU</a><span class=\"ts\"/>(1 << 26) <span class=\"comment\">/* Supports max FCoE MTU, 2158 bytes*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_NTUPLE\">NETIF_F_NTUPLE</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 27) <span class=\"comment\">/* N-tuple filters supported */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_RXHASH\">NETIF_F_RXHASH</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 28) <span class=\"comment\">/* Receive hashing offload */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Segmentation offload features */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_GSO_SHIFT\">NETIF_F_GSO_SHIFT</a><span class=\"ts\"/>16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_GSO_MASK\">NETIF_F_GSO_MASK</a><span class=\"ts\"/>0x00ff0000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_TSO\">NETIF_F_TSO</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#SKB_GSO_TCPV4\">SKB_GSO_TCPV4</a> << <a class=\"id\" href=\"#NETIF_F_GSO_SHIFT\">NETIF_F_GSO_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_UFO\">NETIF_F_UFO</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#SKB_GSO_UDP\">SKB_GSO_UDP</a> << <a class=\"id\" href=\"#NETIF_F_GSO_SHIFT\">NETIF_F_GSO_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_GSO_ROBUST\">NETIF_F_GSO_ROBUST</a><span class=\"ts\"/>(<a class=\"id\" href=\"#SKB_GSO_DODGY\">SKB_GSO_DODGY</a> << <a class=\"id\" href=\"#NETIF_F_GSO_SHIFT\">NETIF_F_GSO_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_TSO_ECN\">NETIF_F_TSO_ECN</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#SKB_GSO_TCP_ECN\">SKB_GSO_TCP_ECN</a> << <a class=\"id\" href=\"#NETIF_F_GSO_SHIFT\">NETIF_F_GSO_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_TSO6\">NETIF_F_TSO6</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#SKB_GSO_TCPV6\">SKB_GSO_TCPV6</a> << <a class=\"id\" href=\"#NETIF_F_GSO_SHIFT\">NETIF_F_GSO_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_FSO\">NETIF_F_FSO</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#SKB_GSO_FCOE\">SKB_GSO_FCOE</a> << <a class=\"id\" href=\"#NETIF_F_GSO_SHIFT\">NETIF_F_GSO_SHIFT</a>)", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* List of features with software fallbacks. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_GSO_SOFTWARE\">NETIF_F_GSO_SOFTWARE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#NETIF_F_TSO\">NETIF_F_TSO</a> | <a class=\"id\" href=\"#NETIF_F_TSO_ECN\">NETIF_F_TSO_ECN</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#NETIF_F_TSO6\">NETIF_F_TSO6</a> | <a class=\"id\" href=\"#NETIF_F_UFO\">NETIF_F_UFO</a>)", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_GEN_CSUM\">NETIF_F_GEN_CSUM</a><span class=\"ts\"/>(<a class=\"id\" href=\"#NETIF_F_NO_CSUM\">NETIF_F_NO_CSUM</a> | <a class=\"id\" href=\"#NETIF_F_HW_CSUM\">NETIF_F_HW_CSUM</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_V4_CSUM\">NETIF_F_V4_CSUM</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#NETIF_F_GEN_CSUM\">NETIF_F_GEN_CSUM</a> | <a class=\"id\" href=\"#NETIF_F_IP_CSUM\">NETIF_F_IP_CSUM</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_V6_CSUM\">NETIF_F_V6_CSUM</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#NETIF_F_GEN_CSUM\">NETIF_F_GEN_CSUM</a> | <a class=\"id\" href=\"#NETIF_F_IPV6_CSUM\">NETIF_F_IPV6_CSUM</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_ALL_CSUM\">NETIF_F_ALL_CSUM</a><span class=\"ts\"/>(<a class=\"id\" href=\"#NETIF_F_V4_CSUM\">NETIF_F_V4_CSUM</a> | <a class=\"id\" href=\"#NETIF_F_V6_CSUM\">NETIF_F_V6_CSUM</a>)", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If one device supports one of these features, then enable them</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for all in netdev_increment_features.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETIF_F_ONE_FOR_ALL\">NETIF_F_ONE_FOR_ALL</a><span class=\"ts\"/>(<a class=\"id\" href=\"#NETIF_F_GSO_SOFTWARE\">NETIF_F_GSO_SOFTWARE</a> | <a class=\"id\" href=\"#NETIF_F_GSO_ROBUST\">NETIF_F_GSO_ROBUST</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#NETIF_F_SG\">NETIF_F_SG</a> | <a class=\"id\" href=\"#NETIF_F_HIGHDMA\">NETIF_F_HIGHDMA</a> |<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#NETIF_F_FRAGLIST\">NETIF_F_FRAGLIST</a>)", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Interface index. Unique device identifier<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iflink\">iflink</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device_stats\">net_device_stats</a><span class=\"ts\"/><a class=\"id\" href=\"#stats\">stats</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_WIRELESS_EXT\">CONFIG_WIRELESS_EXT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* List of functions to handle Wireless Extensions (instead of ioctl).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See &lt;net/iw_handler.h&gt; for details. Jean II */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#iw_handler_def\">iw_handler_def</a> *<span class=\"ts\"/><a class=\"id\" href=\"#wireless_handlers\">wireless_handlers</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Instance data managed by the core of Wireless Extensions. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iw_public_data\">iw_public_data</a> *<span class=\"ts\"/><a class=\"id\" href=\"#wireless_data\">wireless_data</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Management operations */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#net_device_ops\">net_device_ops</a> *<a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ethtool_ops\">ethtool_ops</a> *<a class=\"id\" href=\"#ethtool_ops\">ethtool_ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hardware header description */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#header_ops\">header_ops</a> *<a class=\"id\" href=\"#header_ops\">header_ops</a>;", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"comment\">/* interface flags (a la BSD)<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gflags\">gflags</a>;", 
"        unsigned short          <a class=\"id\" href=\"#priv_flags\">priv_flags</a>; <span class=\"comment\">/* Like 'flags' but invisible to userspace. */</span>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#padded\">padded</a>;<span class=\"ts\"/><span class=\"comment\">/* How much padding added by alloc_netdev() */</span>", 
"", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#operstate\">operstate</a>; <span class=\"comment\">/* RFC2863 operstate */</span>", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link_mode\">link_mode</a>; <span class=\"comment\">/* mapping policy to operstate */</span>", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtu\">mtu</a>;<span class=\"ts\"/><span class=\"comment\">/* interface MTU value<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;<span class=\"ts\"/><span class=\"comment\">/* interface hardware type<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a>;<span class=\"ts\"/><span class=\"comment\">/* hardware hdr length<span class=\"ts\"/>*/</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* extra head- and tailroom the hardware may need, but not in all cases</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can this be guaranteed, especially tailroom. Some cases also use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * LL_MAX_HEADER instead to allocate the skb.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needed_headroom\">needed_headroom</a>;", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needed_tailroom\">needed_tailroom</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#master\">master</a>; <span class=\"comment\">/* Pointer to master device of a group,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  * which this device is member of.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Interface address info. */</span>", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm_addr\">perm_addr</a>[<a class=\"id\" href=\"#MAX_ADDR_LEN\">MAX_ADDR_LEN</a>]; <span class=\"comment\">/* permanent hw address */</span>", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr_assign_type\">addr_assign_type</a>; <span class=\"comment\">/* hw address assignment type */</span>", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr_len\">addr_len</a>;<span class=\"ts\"/><span class=\"comment\">/* hardware address length<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>unsigned short          <a class=\"id\" href=\"#dev_id\">dev_id</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for shared network cards */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr_list_lock\">addr_list_lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a>;<span class=\"ts\"/><span class=\"comment\">/* Unicast mac addresses */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a><span class=\"ts\"/><a class=\"id\" href=\"#mc\">mc</a>;<span class=\"ts\"/><span class=\"comment\">/* Multicast mac addresses */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc_promisc\">uc_promisc</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#promiscuity\">promiscuity</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allmulti\">allmulti</a>;", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Protocol specific pointers */</span>", 
"<span class=\"ts\"/>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_DSA\">CONFIG_NET_DSA</a>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dsa_ptr\">dsa_ptr</a>;<span class=\"ts\"/><span class=\"comment\">/* dsa specific data */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>void <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#atalk_ptr\">atalk_ptr</a>;<span class=\"ts\"/><span class=\"comment\">/* AppleTalk link <span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ip_ptr\">ip_ptr</a>;<span class=\"ts\"/><span class=\"comment\">/* IPv4 specific data<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>void                    *<a class=\"id\" href=\"#dn_ptr\">dn_ptr</a>;        <span class=\"comment\">/* DECnet specific data */</span>", 
"<span class=\"ts\"/>void                    *<a class=\"id\" href=\"#ip6_ptr\">ip6_ptr</a>;       <span class=\"comment\">/* IPv6 specific data */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ec_ptr\">ec_ptr</a>;<span class=\"ts\"/><span class=\"comment\">/* Econet specific data<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ax25_ptr\">ax25_ptr</a>;<span class=\"ts\"/><span class=\"comment\">/* AX.25 specific data */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wireless_dev\">wireless_dev</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ieee80211_ptr\">ieee80211_ptr</a>;<span class=\"ts\"/><span class=\"comment\">/* IEEE 802.11 specific data,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   assign before registering */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cache line mostly used on receive path (including eth_type_trans())</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_rx\">last_rx</a>;<span class=\"ts\"/><span class=\"comment\">/* Time of last Rx<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Interface address info used in eth_type_trans() */</span>", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dev_addr\">dev_addr</a>;<span class=\"ts\"/><span class=\"comment\">/* hw address, (before bcast</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   because most packets are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unicast) */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a><span class=\"ts\"/><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>; <span class=\"comment\">/* list of device</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      hw addresses */</span>", 
"", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#broadcast\">broadcast</a>[<a class=\"id\" href=\"#MAX_ADDR_LEN\">MAX_ADDR_LEN</a>];<span class=\"ts\"/><span class=\"comment\">/* hw bcast add<span class=\"ts\"/>*/</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kset\">kset</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#queues_kset\">queues_kset</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_rx_queue\">netdev_rx_queue</a><span class=\"ts\"/>*<a class=\"id\" href=\"#_rx\">_rx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of RX queues allocated at alloc_netdev_mq() time  */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_rx_queues\">num_rx_queues</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a><span class=\"ts\"/><a class=\"id\" href=\"#rx_queue\">rx_queue</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rx_handler_func_t\">rx_handler_func_t</a><span class=\"ts\"/>*<a class=\"id\" href=\"#rx_handler\">rx_handler</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rx_handler_data\">rx_handler_data</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a><span class=\"ts\"/>*<a class=\"id\" href=\"#_tx\">_tx</a> <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of TX queues allocated at alloc_netdev_mq() time  */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_tx_queues\">num_tx_queues</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of TX queues currently active in device  */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_num_tx_queues\">real_num_tx_queues</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* root qdisc from userspace point of view */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#qdisc\">qdisc</a>;", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tx_queue_len\">tx_queue_len</a>;<span class=\"ts\"/><span class=\"comment\">/* Max frames per queue allowed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tx_global_lock\">tx_global_lock</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * One part is mostly used on xmit path (device)</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* These may be needed for future network-power-down code. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trans_start here is expensive for high speed devices on SMP,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * please use netdev_queue-&gt;trans_start instead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trans_start\">trans_start</a>;<span class=\"ts\"/><span class=\"comment\">/* Time (in jiffies) of last Tx<span class=\"ts\"/>*/</span>", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#watchdog_timeo\">watchdog_timeo</a>; <span class=\"comment\">/* used by dev_watchdog() */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a><span class=\"ts\"/><a class=\"id\" href=\"#watchdog_timer\">watchdog_timer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of references to this device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refcnt\">refcnt</a> <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* delayed register/unregister */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#todo_list\">todo_list</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* device index hash chain */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><a class=\"id\" href=\"#index_hlist\">index_hlist</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#link_watch_list\">link_watch_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* register/unregister state machine */</span>", 
"<span class=\"ts\"/>enum { <a class=\"id\" href=\"#NETREG_UNINITIALIZED\">NETREG_UNINITIALIZED</a>=0,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#NETREG_REGISTERED\">NETREG_REGISTERED</a>,<span class=\"ts\"/><span class=\"comment\">/* completed register_netdevice */</span>", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#NETREG_UNREGISTERING\">NETREG_UNREGISTERING</a>,<span class=\"ts\"/><span class=\"comment\">/* called unregister_netdevice */</span>", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#NETREG_UNREGISTERED\">NETREG_UNREGISTERED</a>,<span class=\"ts\"/><span class=\"comment\">/* completed unregister todo */</span>", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#NETREG_RELEASED\">NETREG_RELEASED</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* called free_netdev */</span>", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#NETREG_DUMMY\">NETREG_DUMMY</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* dummy device for NAPI poll */</span>", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#reg_state\">reg_state</a>:16;", 
"", 
"<span class=\"ts\"/>enum {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RTNL_LINK_INITIALIZED\">RTNL_LINK_INITIALIZED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RTNL_LINK_INITIALIZING\">RTNL_LINK_INITIALIZING</a>,", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#rtnl_link_state\">rtnl_link_state</a>:16;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Called from unregister, can be used to call free_netdev */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#destructor\">destructor</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETPOLL\">CONFIG_NETPOLL</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netpoll_info\">netpoll_info</a><span class=\"ts\"/>*<a class=\"id\" href=\"#npinfo\">npinfo</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Network namespace this network device is inside */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nd_net\">nd_net</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mid-layer private */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ml_priv\">ml_priv</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* GARP */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#garp_port\">garp_port</a><span class=\"ts\"/>*<a class=\"id\" href=\"#garp_port\">garp_port</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* class/net/name entry */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* space for optional device, statistics, and wireless sysfs groups */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> *<a class=\"id\" href=\"#sysfs_groups\">sysfs_groups</a>[4];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* rtnetlink link ops */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#rtnl_link_ops\">rtnl_link_ops</a> *<a class=\"id\" href=\"#rtnl_link_ops\">rtnl_link_ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* VLAN feature mask */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vlan_features\">vlan_features</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for setting kernel sock attribute on TCP connection setup */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GSO_MAX_SIZE\">GSO_MAX_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>65536", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gso_max_size\">gso_max_size</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DCB\">CONFIG_DCB</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Data Center Bridging netlink ops */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dcbnl_rtnl_ops\">dcbnl_rtnl_ops</a> *<a class=\"id\" href=\"#dcbnl_ops\">dcbnl_ops</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_FCOE\">CONFIG_FCOE</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_FCOE_MODULE\">CONFIG_FCOE_MODULE</a>)", 
"<span class=\"ts\"/><span class=\"comment\">/* max exchange id for FCoE LRO by ddp */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fcoe_ddp_xid\">fcoe_ddp_xid</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* n-tuple filter list attached to this device */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ethtool_rx_ntuple_list\">ethtool_rx_ntuple_list</a> <a class=\"id\" href=\"#ethtool_ntuple_list\">ethtool_ntuple_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* phy device may attach itself for hardware timestamping */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_net_dev\">to_net_dev</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#NETDEV_ALIGN\">NETDEV_ALIGN</a><span class=\"ts\"/><span class=\"ts\"/>32", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#netdev_get_tx_queue\">netdev_get_tx_queue</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_tx\">_tx</a>[<a class=\"id\" href=\"#index\">index</a>];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netdev_for_each_tx_queue\">netdev_for_each_tx_queue</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void (*<a class=\"id\" href=\"#f\">f</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_tx_queues\">num_tx_queues</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_tx\">_tx</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Net namespace inlines</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#dev_net\">dev_net</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#read_pnet\">read_pnet</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#nd_net\">nd_net</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#dev_net_set\">dev_net_set</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_net\">release_net</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#nd_net\">nd_net</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#nd_net\">nd_net</a> = <a class=\"id\" href=\"#hold_net\">hold_net</a>(<a class=\"id\" href=\"#net\">net</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#netdev_uses_dsa_tags\">netdev_uses_dsa_tags</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_DSA_TAG_DSA\">CONFIG_NET_DSA_TAG_DSA</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dsa_ptr\">dsa_ptr</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dsa_uses_dsa_tags\">dsa_uses_dsa_tags</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dsa_ptr\">dsa_ptr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NET_NS\">CONFIG_NET_NS</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_dev\">skb_set_dev</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"#else <span class=\"comment\">/* CONFIG_NET_NS */</span>", 
"void <a class=\"id\" href=\"#skb_set_dev\">skb_set_dev</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#netdev_uses_trailer_tags\">netdev_uses_trailer_tags</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_DSA_TAG_TRAILER\">CONFIG_NET_DSA_TAG_TRAILER</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dsa_ptr\">dsa_ptr</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dsa_uses_trailer_tags\">dsa_uses_trailer_tags</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dsa_ptr\">dsa_ptr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_priv - access network device private data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: network device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get network device private data</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#netdev_priv\">netdev_priv</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#dev\">dev</a> + <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(sizeof(struct <a class=\"id\" href=\"#net_device\">net_device</a>), <a class=\"id\" href=\"#NETDEV_ALIGN\">NETDEV_ALIGN</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Set the sysfs physical device reference for the network logical device</span>", 
"<span class=\"comment\"> * if set prior to registration will cause a symlink during initialization.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SET_NETDEV_DEV\">SET_NETDEV_DEV</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#pdev\">pdev</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#net\">net</a>)-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> = (<a class=\"id\" href=\"#pdev\">pdev</a>))", 
"", 
"<span class=\"comment\">/* Set the sysfs device type for the network logical device to allow</span>", 
"<span class=\"comment\"> * fin grained indentification of different network device types. For</span>", 
"<span class=\"comment\"> * example Ethernet, Wirelss LAN, Bluetooth, WiMAX etc.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SET_NETDEV_DEVTYPE\">SET_NETDEV_DEVTYPE</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#devtype\">devtype</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#net\">net</a>)-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#type\">type</a> = (<a class=\"id\" href=\"#devtype\">devtype</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netif_napi_add - initialize a napi context</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev:  network device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@napi: napi context</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@poll: polling function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@weight: default weight</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * netif_napi_add() must be used to initialize a napi context prior to calling</span>", 
"<span class=\"comment\"> * *any* of the other napi related functions.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netif_napi_add\">netif_napi_add</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int (*<a class=\"id\" href=\"#poll\">poll</a>)(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *, int), int <a class=\"id\" href=\"#weight\">weight</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *  netif_napi_del - remove a napi context</span>", 
"<span class=\"comment\"> *  @napi: napi context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  netif_napi_del() removes a napi context from the network device napi list</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netif_napi_del\">netif_napi_del</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>);", 
"", 
"struct <a class=\"id\" href=\"#napi_gro_cb\">napi_gro_cb</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Virtual address of skb_shinfo(skb)-&gt;frags[0].page + offset. */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#frag0\">frag0</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Length of frag0. */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#frag0_len\">frag0_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This indicates where we are processing relative to skb-&gt;data. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#data_offset\">data_offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is non-zero if the packet may be of the same flow. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#same_flow\">same_flow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is non-zero if the packet cannot be merged with the new skb. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flush\">flush</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of segments aggregated. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the skb? */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#free\">free</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>) ((struct <a class=\"id\" href=\"#napi_gro_cb\">napi_gro_cb</a> *)(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#cb\">cb</a>)", 
"", 
"struct <a class=\"id\" href=\"#packet_type\">packet_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;<span class=\"ts\"/><span class=\"comment\">/* This is really htons(ether_type). */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>;<span class=\"ts\"/><span class=\"comment\">/* NULL is wildcarded here<span class=\"ts\"/>     */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#func\">func</a>) (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/><span class=\"ts\"/>*(*<a class=\"id\" href=\"#gso_segment\">gso_segment</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#features\">features</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#gso_send_check\">gso_send_check</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/><span class=\"ts\"/>**(*<a class=\"id\" href=\"#gro_receive\">gro_receive</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> **<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#gro_complete\">gro_complete</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#af_packet_priv\">af_packet_priv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern <a class=\"id\" href=\"#rwlock_t\">rwlock_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Device list lock */</span>", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_netdev\">for_each_netdev</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#d\">d</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#d\">d</a>, &amp;(<a class=\"id\" href=\"#net\">net</a>)-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a>, <a class=\"id\" href=\"#dev_list\">dev_list</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_netdev_reverse\">for_each_netdev_reverse</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#d\">d</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_reverse\">list_for_each_entry_reverse</a>(<a class=\"id\" href=\"#d\">d</a>, &amp;(<a class=\"id\" href=\"#net\">net</a>)-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a>, <a class=\"id\" href=\"#dev_list\">dev_list</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_netdev_rcu\">for_each_netdev_rcu</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#d\">d</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#d\">d</a>, &amp;(<a class=\"id\" href=\"#net\">net</a>)-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a>, <a class=\"id\" href=\"#dev_list\">dev_list</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_netdev_safe\">for_each_netdev_safe</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;(<a class=\"id\" href=\"#net\">net</a>)-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a>, <a class=\"id\" href=\"#dev_list\">dev_list</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_netdev_continue\">for_each_netdev_continue</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#d\">d</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_continue\">list_for_each_entry_continue</a>(<a class=\"id\" href=\"#d\">d</a>, &amp;(<a class=\"id\" href=\"#net\">net</a>)-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a>, <a class=\"id\" href=\"#dev_list\">dev_list</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_netdev_continue_rcu\">for_each_netdev_continue_rcu</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#d\">d</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_continue_rcu\">list_for_each_entry_continue_rcu</a>(<a class=\"id\" href=\"#d\">d</a>, &amp;(<a class=\"id\" href=\"#net\">net</a>)-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a>, <a class=\"id\" href=\"#dev_list\">dev_list</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#net_device_entry\">net_device_entry</a>(<a class=\"id\" href=\"#lh\">lh</a>)<span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#lh\">lh</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a>, <a class=\"id\" href=\"#dev_list\">dev_list</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#next_net_device\">next_net_device</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lh\">lh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lh\">lh</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_list\">dev_list</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lh\">lh</a> == &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a> ? <a class=\"id\" href=\"#NULL\">NULL</a> : <a class=\"id\" href=\"#net_device_entry\">net_device_entry</a>(<a class=\"id\" href=\"#lh\">lh</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#next_net_device_rcu\">next_net_device_rcu</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lh\">lh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lh\">lh</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_list\">dev_list</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lh\">lh</a> == &amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a> ? <a class=\"id\" href=\"#NULL\">NULL</a> : <a class=\"id\" href=\"#net_device_entry\">net_device_entry</a>(<a class=\"id\" href=\"#lh\">lh</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#first_net_device\">first_net_device</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a>) ? <a class=\"id\" href=\"#NULL\">NULL</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_device_entry\">net_device_entry</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#dev_base_head\">dev_base_head</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"}", 
"", 
"extern int <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netdev_boot_setup_check\">netdev_boot_setup_check</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netdev_boot_base\">netdev_boot_base</a>(const char *<a class=\"id\" href=\"#prefix\">prefix</a>, int <a class=\"id\" href=\"#unit\">unit</a>);", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a>    *<a class=\"id\" href=\"#dev_getbyhwaddr\">dev_getbyhwaddr</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, unsigned short <a class=\"id\" href=\"#type\">type</a>, char *<a class=\"id\" href=\"#hwaddr\">hwaddr</a>);", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev_getfirstbyhwtype\">dev_getfirstbyhwtype</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, unsigned short <a class=\"id\" href=\"#type\">type</a>);", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#__dev_getfirstbyhwtype\">__dev_getfirstbyhwtype</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, unsigned short <a class=\"id\" href=\"#type\">type</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_add_pack\">dev_add_pack</a>(struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#pt\">pt</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_remove_pack\">dev_remove_pack</a>(struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#pt\">pt</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dev_remove_pack\">__dev_remove_pack</a>(struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#pt\">pt</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev_get_by_flags_rcu\">dev_get_by_flags_rcu</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, unsigned short <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned short <a class=\"id\" href=\"#mask\">mask</a>);", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev_get_by_name\">dev_get_by_name</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>);", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev_get_by_name_rcu\">dev_get_by_name_rcu</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>);", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#__dev_get_by_name\">__dev_get_by_name</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_alloc_name\">dev_alloc_name</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#name\">name</a>);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_open\">dev_open</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_close\">dev_close</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_disable_lro\">dev_disable_lro</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_queue_xmit\">dev_queue_xmit</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_netdevice\">register_netdevice</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_netdevice_queue\">unregister_netdevice_queue</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_netdevice_many\">unregister_netdevice_many</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unregister_netdevice\">unregister_netdevice</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_netdevice_queue\">unregister_netdevice_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_netdev\">free_netdev</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_net\">synchronize_net</a>(void);", 
"extern int <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_netdevice_notifier\">register_netdevice_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_netdevice_notifier\">unregister_netdevice_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_dummy_netdev\">init_dummy_netdev</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netdev_resync_ops\">netdev_resync_ops</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"extern int <a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev_get_by_index\">dev_get_by_index</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#__dev_get_by_index\">__dev_get_by_index</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev_get_by_index_rcu\">dev_get_by_index_rcu</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_restart\">dev_restart</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETPOLL_TRAP\">CONFIG_NETPOLL_TRAP</a>", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netpoll_trap\">netpoll_trap</a>(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_gro_receive\">skb_gro_receive</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> **<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern void<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_gro_reset_offset\">skb_gro_reset_offset</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#skb_gro_offset\">skb_gro_offset</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#data_offset\">data_offset</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#skb_gro_len\">skb_gro_len</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#data_offset\">data_offset</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_gro_pull\">skb_gro_pull</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#data_offset\">data_offset</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#skb_gro_header_fast\">skb_gro_header_fast</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag0\">frag0</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_gro_header_hard\">skb_gro_header_hard</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#hlen\">hlen</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag0_len\">frag0_len</a> &lt; <a class=\"id\" href=\"#hlen\">hlen</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#skb_gro_header_slow\">skb_gro_header_slow</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#hlen\">hlen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag0\">frag0</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag0_len\">frag0_len</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#hlen\">hlen</a>) ? <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#offset\">offset</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#skb_gro_mac_header\">skb_gro_mac_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag0\">frag0</a> ?: <a class=\"id\" href=\"#skb_mac_header\">skb_mac_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#skb_gro_network_header\">skb_gro_network_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag0\">frag0</a> ?: <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>) +", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_network_offset\">skb_network_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#dev_hard_header\">dev_hard_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned short <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const void *<a class=\"id\" href=\"#daddr\">daddr</a>, const void *<a class=\"id\" href=\"#saddr\">saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#header_ops\">header_ops</a> || !<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#header_ops\">header_ops</a>-><a class=\"id\" href=\"#create\">create</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#header_ops\">header_ops</a>-><a class=\"id\" href=\"#create\">create</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#dev_parse_header\">dev_parse_header</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned char *<a class=\"id\" href=\"#haddr\">haddr</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#header_ops\">header_ops</a> || !<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#header_ops\">header_ops</a>-><a class=\"id\" href=\"#parse\">parse</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#header_ops\">header_ops</a>-><a class=\"id\" href=\"#parse\">parse</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#haddr\">haddr</a>);", 
"}", 
"", 
"typedef int <a class=\"id\" href=\"#gifconf_func_t\">gifconf_func_t</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> * <a class=\"id\" href=\"#dev\">dev</a>, char <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#bufptr\">bufptr</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_gifconf\">register_gifconf</a>(unsigned int <a class=\"id\" href=\"#family\">family</a>, <a class=\"id\" href=\"#gifconf_func_t\">gifconf_func_t</a> * <a class=\"id\" href=\"#gifconf\">gifconf</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#unregister_gifconf\">unregister_gifconf</a>(unsigned int <a class=\"id\" href=\"#family\">family</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_gifconf\">register_gifconf</a>(<a class=\"id\" href=\"#family\">family</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Incoming packets are placed on per-cpu queues</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#output_queue\">output_queue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a><span class=\"ts\"/><span class=\"ts\"/>**<a class=\"id\" href=\"#output_queue_tailp\">output_queue_tailp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#poll_list\">poll_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#completion_queue\">completion_queue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a><span class=\"ts\"/><a class=\"id\" href=\"#process_queue\">process_queue</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* stats */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#processed\">processed</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_squeeze\">time_squeeze</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_collision\">cpu_collision</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#received_rps\">received_rps</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a><span class=\"ts\"/>*<a class=\"id\" href=\"#rps_ipi_list\">rps_ipi_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Elements below can be accessed between CPUs for RPS */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a><span class=\"ts\"/><a class=\"id\" href=\"#csd\">csd</a> <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a><span class=\"ts\"/>*<a class=\"id\" href=\"#rps_ipi_next\">rps_ipi_next</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_queue_head\">input_queue_head</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_queue_tail\">input_queue_tail</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dropped\">dropped</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a><span class=\"ts\"/><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#backlog\">backlog</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_queue_head_incr\">input_queue_head_incr</a>(struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_queue_head\">input_queue_head</a>++;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#input_queue_tail_incr_save\">input_queue_tail_incr_save</a>(struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int *<a class=\"id\" href=\"#qtail\">qtail</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#qtail\">qtail</a> = ++<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_queue_tail\">input_queue_tail</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU_ALIGNED\">DECLARE_PER_CPU_ALIGNED</a>(struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a>, <a class=\"id\" href=\"#softnet_data\">softnet_data</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_NETIF_QUEUE\">HAVE_NETIF_QUEUE</a>", 
"", 
"extern void <a class=\"id\" href=\"#__netif_schedule\">__netif_schedule</a>(struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a> *<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netif_schedule_queue\">netif_schedule_queue</a>(struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#txq\">txq</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#__QUEUE_STATE_XOFF\">__QUEUE_STATE_XOFF</a>, &amp;<a class=\"id\" href=\"#txq\">txq</a>-><a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__netif_schedule\">__netif_schedule</a>(<a class=\"id\" href=\"#txq\">txq</a>-><a class=\"id\" href=\"#qdisc\">qdisc</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netif_tx_schedule_all\">netif_tx_schedule_all</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_tx_queues\">num_tx_queues</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_schedule_queue\">netif_schedule_queue</a>(<a class=\"id\" href=\"#netdev_get_tx_queue\">netdev_get_tx_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#i\">i</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netif_tx_start_queue\">netif_tx_start_queue</a>(struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#dev_queue\">dev_queue</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#__QUEUE_STATE_XOFF\">__QUEUE_STATE_XOFF</a>, &amp;<a class=\"id\" href=\"#dev_queue\">dev_queue</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netif_start_queue - allow transmit</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: network device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allow upper layers to call the device hard_start_xmit routine.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netif_start_queue\">netif_start_queue</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_tx_start_queue\">netif_tx_start_queue</a>(<a class=\"id\" href=\"#netdev_get_tx_queue\">netdev_get_tx_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netif_tx_start_all_queues\">netif_tx_start_all_queues</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_tx_queues\">num_tx_queues</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#txq\">txq</a> = <a class=\"id\" href=\"#netdev_get_tx_queue\">netdev_get_tx_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_tx_start_queue\">netif_tx_start_queue</a>(<a class=\"id\" href=\"#txq\">txq</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netif_tx_wake_queue\">netif_tx_wake_queue</a>(struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#dev_queue\">dev_queue</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETPOLL_TRAP\">CONFIG_NETPOLL_TRAP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netpoll_trap\">netpoll_trap</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_tx_start_queue\">netif_tx_start_queue</a>(<a class=\"id\" href=\"#dev_queue\">dev_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#__QUEUE_STATE_XOFF\">__QUEUE_STATE_XOFF</a>, &amp;<a class=\"id\" href=\"#dev_queue\">dev_queue</a>-><a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__netif_schedule\">__netif_schedule</a>(<a class=\"id\" href=\"#dev_queue\">dev_queue</a>-><a class=\"id\" href=\"#qdisc\">qdisc</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netif_wake_queue - restart transmit</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: network device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allow upper layers to call the device hard_start_xmit routine.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Used for flow control when transmit resources are available.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netif_wake_queue\">netif_wake_queue</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_tx_wake_queue\">netif_tx_wake_queue</a>(<a class=\"id\" href=\"#netdev_get_tx_queue\">netdev_get_tx_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netif_tx_wake_all_queues\">netif_tx_wake_all_queues</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_tx_queues\">num_tx_queues</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#txq\">txq</a> = <a class=\"id\" href=\"#netdev_get_tx_queue\">netdev_get_tx_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netif_tx_wake_queue\">netif_tx_wake_queue</a>(<a class=\"id\" href=\"#txq\">txq</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netif_tx_stop_queue\">netif_tx_stop_queue</a>(struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#dev_queue\">dev_queue</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#__QUEUE_STATE_XOFF\">__QUEUE_STATE_XOFF</a>, &amp;<a class=\"id\" href=\"#dev_queue\">dev_queue</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netif_stop_queue - stop transmitted packets</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: network device</span>", 
];
xr_frag_insert('l/80/d2b6045642984c7dfe12085c9b3a1b343aa84e.xr', __xr_tmp);
