var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * check TSC synchronization.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2006, Red Hat, Inc., Ingo Molnar</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We check whether all boot CPUs have their TSC's synchronized,</span>", 
"<span class=\"comment\"> * print a warning if not and turn off the TSC clock-source.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The warp-check is point-to-point between two CPUs, the CPU</span>", 
"<span class=\"comment\"> * initiating the bootup is the 'source CPU', the freshly booting</span>", 
"<span class=\"comment\"> * CPU is the 'target CPU'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Only two CPUs may participate - they can enter in any order.</span>", 
"<span class=\"comment\"> * ( The serial nature of the boot logic and the CPU hotplug lock</span>", 
"<span class=\"comment\"> *   protects against more than 2 CPUs entering this code. )</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tsc\">tsc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Entry/exit counters that make sure that both CPUs</span>", 
"<span class=\"comment\"> * run the measurement code at once:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#start_count\">start_count</a>;", 
"static <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#stop_count\">stop_count</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We use a raw spinlock in this exceptional case, because</span>", 
"<span class=\"comment\"> * we want to have the fastest, inlined, non-debug version</span>", 
"<span class=\"comment\"> * of a critical section, to be able to prove TSC time-warps:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> <a class=\"id\" href=\"#sync_lock\">sync_lock</a> = <a class=\"id\" href=\"#__ARCH_SPIN_LOCK_UNLOCKED\">__ARCH_SPIN_LOCK_UNLOCKED</a>;", 
"", 
"static <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#cycles_t\">cycles_t</a> <a class=\"id\" href=\"#last_tsc\">last_tsc</a>;", 
"static <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#cycles_t\">cycles_t</a> <a class=\"id\" href=\"#max_warp\">max_warp</a>;", 
"static <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> int <a class=\"id\" href=\"#nr_warps\">nr_warps</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * TSC-warp measurement loop running on both CPUs:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> void <a class=\"id\" href=\"#check_tsc_warp\">check_tsc_warp</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycles_t\">cycles_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtsc_barrier\">rdtsc_barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtsc_barrier\">rdtsc_barrier</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The measurement runs for 20 msecs:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#tsc_khz\">tsc_khz</a> * 20ULL;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; ; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We take the global lock, measure TSC, save the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * previous TSC that was measured (possibly on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * another CPU) and update the previous TSC timestamp.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#sync_lock\">sync_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#last_tsc\">last_tsc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtsc_barrier\">rdtsc_barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtsc_barrier\">rdtsc_barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_tsc\">last_tsc</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#sync_lock\">sync_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Be nice every now and then (and also check whether</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * measurement is done [we also insert a 10 million</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * loops safety exit, so we dont lock up in case the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TSC readout is totally broken]):</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#i\">i</a> &amp; 7))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#now\">now</a> &gt; <a class=\"id\" href=\"#end\">end</a> || <a class=\"id\" href=\"#i\">i</a> &gt; 10000000)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Outside the critical section we can now see whether</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we saw a time-warp of the TSC going backwards:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#prev\">prev</a> &gt; <a class=\"id\" href=\"#now\">now</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#sync_lock\">sync_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_warp\">max_warp</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#max_warp\">max_warp</a>, <a class=\"id\" href=\"#prev\">prev</a> - <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_warps\">nr_warps</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#sync_lock\">sync_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(!(<a class=\"id\" href=\"#now\">now</a>-<a class=\"id\" href=\"#start\">start</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Warning: zero tsc calibration delta: %Ld [max: %Ld]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a>-<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>-<a class=\"id\" href=\"#start\">start</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Source CPU calls into this - it waits for the freshly booted</span>", 
"<span class=\"comment\"> * target CPU to arrive and then starts the measurement:</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#check_tsc_sync_source\">check_tsc_sync_source</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpus\">cpus</a> = 2;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No need to check if we already know that the TSC is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * synchronized:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unsynchronized_tsc\">unsynchronized_tsc</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_TSC_RELIABLE\">X86_FEATURE_TSC_RELIABLE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == (<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>-1) || <a class=\"id\" href=\"#system_state\">system_state</a> != <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Skipped synchronization checks as TSC is reliable.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reset it - in case this is a second bootup:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#stop_count\">stop_count</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for the target to arrive:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#start_count\">start_count</a>) != <a class=\"id\" href=\"#cpus\">cpus</a>-1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Trigger the target to continue into the measurement too:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#start_count\">start_count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_tsc_warp\">check_tsc_warp</a>();", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#stop_count\">stop_count</a>) != <a class=\"id\" href=\"#cpus\">cpus</a>-1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_warps\">nr_warps</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"TSC synchronization [CPU#%d -> CPU#%d]:\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Measured %Ld cycles TSC warp between CPUs, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"turning off TSC clock.\\n\", <a class=\"id\" href=\"#max_warp\">max_warp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_tsc_unstable\">mark_tsc_unstable</a>(\"check_tsc_sync_source failed\");", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"TSC synchronization [CPU#%d -> CPU#%d]: passed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reset it - just in case we boot another CPU later:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#start_count\">start_count</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_warps\">nr_warps</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_warp\">max_warp</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_tsc\">last_tsc</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Let the target continue with the bootup:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#stop_count\">stop_count</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Freshly booted CPUs call into this:</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#check_tsc_sync_target\">check_tsc_sync_target</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpus\">cpus</a> = 2;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unsynchronized_tsc\">unsynchronized_tsc</a>() || <a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_TSC_RELIABLE\">X86_FEATURE_TSC_RELIABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Register this CPU's participation and wait for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * source CPU to start the measurement:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#start_count\">start_count</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#start_count\">start_count</a>) != <a class=\"id\" href=\"#cpus\">cpus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_tsc_warp\">check_tsc_warp</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ok, we are done:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#stop_count\">stop_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for the source CPU to print stuff:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#stop_count\">stop_count</a>) != <a class=\"id\" href=\"#cpus\">cpus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"}", 
];
xr_frag_insert('l/81/34b33dc4cf08abfd3fe73e1f70808ed9ca7b17.xr', __xr_tmp);
