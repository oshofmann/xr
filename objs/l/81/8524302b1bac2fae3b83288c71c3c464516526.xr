var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_GFP_H\">__LINUX_GFP_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_GFP_H\">__LINUX_GFP_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmzone\">mmzone</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmdebug\">mmdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GFP bitmasks..</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Zone modifiers (see linux/mmzone.h - low three bits)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do not put any conditional on these. If necessary modify the definitions</span>", 
"<span class=\"comment\"> * without the underscores and use them consistently. The definitions here may</span>", 
"<span class=\"comment\"> * be used in bit comparisons.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x01u)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x02u)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x04u)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x08u)  <span class=\"comment\">/* Page is movable */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_ZONEMASK\">GFP_ZONEMASK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a>|<a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>|<a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a>|<a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Action modifiers - doesn't change the zoning</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __GFP_REPEAT: Try hard to allocate the memory, but the allocation attempt</span>", 
"<span class=\"comment\"> * _might_ fail.  This depends upon the particular VM implementation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __GFP_NOFAIL: The VM implementation _must_ retry infinitely: the caller</span>", 
"<span class=\"comment\"> * cannot handle allocation failures.  This modifier is deprecated and no new</span>", 
"<span class=\"comment\"> * users should be added.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __GFP_NORETRY: The VM implementation must not retry indefinitely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __GFP_MOVABLE: Flag that this page will be movable by the page migration</span>", 
"<span class=\"comment\"> * mechanism or reclaimed</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x10u)<span class=\"ts\"/><span class=\"comment\">/* Can wait and reschedule? */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x20u)<span class=\"ts\"/><span class=\"comment\">/* Should access emergency pools? */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x40u)<span class=\"ts\"/><span class=\"comment\">/* Can start physical IO? */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x80u)<span class=\"ts\"/><span class=\"comment\">/* Can call down to low-level FS? */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_COLD\">__GFP_COLD</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x100u)<span class=\"ts\"/><span class=\"comment\">/* Cache-cold page required */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x200u)<span class=\"ts\"/><span class=\"comment\">/* Suppress page allocation failure warning */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_REPEAT\">__GFP_REPEAT</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x400u)<span class=\"ts\"/><span class=\"comment\">/* See above */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x800u)<span class=\"ts\"/><span class=\"comment\">/* See above */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_NORETRY\">__GFP_NORETRY</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x1000u)<span class=\"comment\">/* See above */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_COMP\">__GFP_COMP</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x4000u)<span class=\"comment\">/* Add compound page metadata */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x8000u)<span class=\"comment\">/* Return zeroed page on success */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_NOMEMALLOC\">__GFP_NOMEMALLOC</a> ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x10000u) <span class=\"comment\">/* Don't use emergency reserves */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_HARDWALL\">__GFP_HARDWALL</a>   ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x20000u) <span class=\"comment\">/* Enforce hardwall cpuset memory allocs */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_THISNODE\">__GFP_THISNODE</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x40000u)<span class=\"comment\">/* No fallback, no policies */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_RECLAIMABLE\">__GFP_RECLAIMABLE</a> ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x80000u) <span class=\"comment\">/* Page is reclaimable */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KMEMCHECK\">CONFIG_KMEMCHECK</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_NOTRACK\">__GFP_NOTRACK</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0x200000u)  <span class=\"comment\">/* Don't track with kmemcheck */</span>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_NOTRACK\">__GFP_NOTRACK</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This may seem redundant, but it's a way of annotating false positives vs.</span>", 
"<span class=\"comment\"> * allocations that simply cannot be supported (e.g. page tables).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_NOTRACK_FALSE_POSITIVE\">__GFP_NOTRACK_FALSE_POSITIVE</a> (<a class=\"id\" href=\"#__GFP_NOTRACK\">__GFP_NOTRACK</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_BITS_SHIFT\">__GFP_BITS_SHIFT</a> 22<span class=\"ts\"/><span class=\"comment\">/* Room for 22 __GFP_FOO bits */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__GFP_BITS_MASK\">__GFP_BITS_MASK</a> ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)((1 << <a class=\"id\" href=\"#__GFP_BITS_SHIFT\">__GFP_BITS_SHIFT</a>) - 1))", 
"", 
"<span class=\"comment\">/* This equals 0, but use constants in case they ever change */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a><span class=\"ts\"/>(<a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a> &amp; ~<a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>)", 
"<span class=\"comment\">/* GFP_ATOMIC means both !wait (__GFP_WAIT not set) and use emergency pool */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a> | <a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a> | <a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a> | <a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_TEMPORARY\">GFP_TEMPORARY</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a> | <a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a> | <a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__GFP_RECLAIMABLE\">__GFP_RECLAIMABLE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_USER\">GFP_USER</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a> | <a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a> | <a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a> | <a class=\"id\" href=\"#__GFP_HARDWALL\">__GFP_HARDWALL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_HIGHUSER\">GFP_HIGHUSER</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a> | <a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a> | <a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a> | <a class=\"id\" href=\"#__GFP_HARDWALL\">__GFP_HARDWALL</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a> | <a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a> | <a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__GFP_HARDWALL\">__GFP_HARDWALL</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_IOFS\">GFP_IOFS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a> | <a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_THISNODE\">GFP_THISNODE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__GFP_THISNODE\">__GFP_THISNODE</a> | <a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a> | <a class=\"id\" href=\"#__GFP_NORETRY\">__GFP_NORETRY</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_THISNODE\">GFP_THISNODE</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a>)0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* This mask makes up all the page movable related flags */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_MOVABLE_MASK\">GFP_MOVABLE_MASK</a> (<a class=\"id\" href=\"#__GFP_RECLAIMABLE\">__GFP_RECLAIMABLE</a>|<a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a>)", 
"", 
"<span class=\"comment\">/* Control page allocator reclaim behavior */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a> (<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>|<a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>|<a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a>|<a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>|\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>|<a class=\"id\" href=\"#__GFP_REPEAT\">__GFP_REPEAT</a>|<a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a>|\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__GFP_NORETRY\">__GFP_NORETRY</a>|<a class=\"id\" href=\"#__GFP_NOMEMALLOC\">__GFP_NOMEMALLOC</a>)", 
"", 
"<span class=\"comment\">/* Control slab gfp mask during early boot */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_BOOT_MASK\">GFP_BOOT_MASK</a> (<a class=\"id\" href=\"#__GFP_BITS_MASK\">__GFP_BITS_MASK</a> &amp; ~(<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>|<a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a>|<a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>))", 
"", 
"<span class=\"comment\">/* Control allocation constraints */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_CONSTRAINT_MASK\">GFP_CONSTRAINT_MASK</a> (<a class=\"id\" href=\"#__GFP_HARDWALL\">__GFP_HARDWALL</a>|<a class=\"id\" href=\"#__GFP_THISNODE\">__GFP_THISNODE</a>)", 
"", 
"<span class=\"comment\">/* Do not use these with a slab allocator */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_SLAB_BUG_MASK\">GFP_SLAB_BUG_MASK</a> (<a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a>|<a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>|~<a class=\"id\" href=\"#__GFP_BITS_MASK\">__GFP_BITS_MASK</a>)", 
"", 
"<span class=\"comment\">/* Flag - indicates that the buffer will be suitable for DMA.  Ignored on some</span>", 
"<span class=\"comment\">   platforms, used as appropriate on others */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a>", 
"", 
"<span class=\"comment\">/* 4GB DMA on some platforms */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_DMA32\">GFP_DMA32</a><span class=\"ts\"/><a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a>", 
"", 
"<span class=\"comment\">/* Convert GFP flags to their corresponding migrate type */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#allocflags_to_migratetype\">allocflags_to_migratetype</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>((<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a> &amp; <a class=\"id\" href=\"#GFP_MOVABLE_MASK\">GFP_MOVABLE_MASK</a>) == <a class=\"id\" href=\"#GFP_MOVABLE_MASK\">GFP_MOVABLE_MASK</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page_group_by_mobility_disabled\">page_group_by_mobility_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#MIGRATE_UNMOVABLE\">MIGRATE_UNMOVABLE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Group based on mobility */</span>", 
"<span class=\"ts\"/>return (((<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a> &amp; <a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a>) != 0) << 1) |", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a> &amp; <a class=\"id\" href=\"#__GFP_RECLAIMABLE\">__GFP_RECLAIMABLE</a>) != 0);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OPT_ZONE_HIGHMEM\">OPT_ZONE_HIGHMEM</a> <a class=\"id\" href=\"#ZONE_HIGHMEM\">ZONE_HIGHMEM</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OPT_ZONE_HIGHMEM\">OPT_ZONE_HIGHMEM</a> <a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA\">CONFIG_ZONE_DMA</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OPT_ZONE_DMA\">OPT_ZONE_DMA</a> <a class=\"id\" href=\"#ZONE_DMA\">ZONE_DMA</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OPT_ZONE_DMA\">OPT_ZONE_DMA</a> <a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA32\">CONFIG_ZONE_DMA32</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OPT_ZONE_DMA32\">OPT_ZONE_DMA32</a> <a class=\"id\" href=\"#ZONE_DMA32\">ZONE_DMA32</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OPT_ZONE_DMA32\">OPT_ZONE_DMA32</a> <a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GFP_ZONE_TABLE is a word size bitstring that is used for looking up the</span>", 
"<span class=\"comment\"> * zone to use given the lowest 4 bits of gfp_t. Entries are ZONE_SHIFT long</span>", 
"<span class=\"comment\"> * and there are 16 of them to cover all possible combinations of</span>", 
"<span class=\"comment\"> * __GFP_DMA, __GFP_DMA32, __GFP_MOVABLE and __GFP_HIGHMEM.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The zone fallback order is MOVABLE=&gt;HIGHMEM=&gt;NORMAL=&gt;DMA32=&gt;DMA.</span>", 
"<span class=\"comment\"> * But GFP_MOVABLE is not only a zone specifier but also an allocation</span>", 
"<span class=\"comment\"> * policy. Therefore __GFP_MOVABLE plus another zone selector is valid.</span>", 
"<span class=\"comment\"> * Only 1 bit of the lowest 3 bits (DMA,DMA32,HIGHMEM) can be set to \"1\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *       bit       result</span>", 
"<span class=\"comment\"> *       =================</span>", 
"<span class=\"comment\"> *       0x0    =&gt; NORMAL</span>", 
"<span class=\"comment\"> *       0x1    =&gt; DMA or NORMAL</span>", 
"<span class=\"comment\"> *       0x2    =&gt; HIGHMEM or NORMAL</span>", 
"<span class=\"comment\"> *       0x3    =&gt; BAD (DMA+HIGHMEM)</span>", 
"<span class=\"comment\"> *       0x4    =&gt; DMA32 or DMA or NORMAL</span>", 
"<span class=\"comment\"> *       0x5    =&gt; BAD (DMA+DMA32)</span>", 
"<span class=\"comment\"> *       0x6    =&gt; BAD (HIGHMEM+DMA32)</span>", 
"<span class=\"comment\"> *       0x7    =&gt; BAD (HIGHMEM+DMA32+DMA)</span>", 
"<span class=\"comment\"> *       0x8    =&gt; NORMAL (MOVABLE+0)</span>", 
"<span class=\"comment\"> *       0x9    =&gt; DMA or NORMAL (MOVABLE+DMA)</span>", 
"<span class=\"comment\"> *       0xa    =&gt; MOVABLE (Movable is valid only if HIGHMEM is set too)</span>", 
"<span class=\"comment\"> *       0xb    =&gt; BAD (MOVABLE+HIGHMEM+DMA)</span>", 
"<span class=\"comment\"> *       0xc    =&gt; DMA32 (MOVABLE+HIGHMEM+DMA32)</span>", 
"<span class=\"comment\"> *       0xd    =&gt; BAD (MOVABLE+DMA32+DMA)</span>", 
"<span class=\"comment\"> *       0xe    =&gt; BAD (MOVABLE+DMA32+HIGHMEM)</span>", 
"<span class=\"comment\"> *       0xf    =&gt; BAD (MOVABLE+DMA32+HIGHMEM+DMA)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ZONES_SHIFT must be &lt;= 2 on 32 bit platforms.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#if 16 * <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a> &gt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a> <a class=\"id\" href=\"#too\">too</a> <a class=\"id\" href=\"#large\">large</a> <a class=\"id\" href=\"#to\">to</a> <a class=\"id\" href=\"#create\">create</a> <a class=\"id\" href=\"#GFP_ZONE_TABLE\">GFP_ZONE_TABLE</a> <a class=\"id\" href=\"#integer\">integer</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_ZONE_TABLE\">GFP_ZONE_TABLE</a> ( \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a> << 0 * <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| (<a class=\"id\" href=\"#OPT_ZONE_DMA\">OPT_ZONE_DMA</a> << <a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a> * <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| (<a class=\"id\" href=\"#OPT_ZONE_HIGHMEM\">OPT_ZONE_HIGHMEM</a> << <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a> * <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| (<a class=\"id\" href=\"#OPT_ZONE_DMA32\">OPT_ZONE_DMA32</a> << <a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a> * <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| (<a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a> << <a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a> * <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| (<a class=\"id\" href=\"#OPT_ZONE_DMA\">OPT_ZONE_DMA</a> << (<a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a> | <a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a>) * <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| (<a class=\"id\" href=\"#ZONE_MOVABLE\">ZONE_MOVABLE</a> << (<a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>) * <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>)\\", 
"<span class=\"ts\"/>| (<a class=\"id\" href=\"#OPT_ZONE_DMA32\">OPT_ZONE_DMA32</a> << (<a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a> | <a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a>) * <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>)\\", 
")", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GFP_ZONE_BAD is a bitmap for all combinations of __GFP_DMA, __GFP_DMA32</span>", 
"<span class=\"comment\"> * __GFP_HIGHMEM and __GFP_MOVABLE that are not permitted. One flag per</span>", 
"<span class=\"comment\"> * entry starting with bit 0. Bit is set if the combination is not</span>", 
"<span class=\"comment\"> * allowed.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_ZONE_BAD\">GFP_ZONE_BAD</a> ( \\", 
"<span class=\"ts\"/>1 << (<a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| 1 << (<a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a> | <a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| 1 << (<a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| 1 << (<a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a> | <a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| 1 << (<a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a> | <a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| 1 << (<a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a> | <a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a> | <a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| 1 << (<a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a> | <a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>| 1 << (<a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a> | <a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a> | <a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>)\\", 
")", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GFP_ZONEMASK\">GFP_ZONEMASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#z\">z</a> = (<a class=\"id\" href=\"#GFP_ZONE_TABLE\">GFP_ZONE_TABLE</a> >> (<a class=\"id\" href=\"#bit\">bit</a> * <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>)) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> ((1 << <a class=\"id\" href=\"#ZONES_SHIFT\">ZONES_SHIFT</a>) - 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#bit\">bit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAYBE_BUILD_BUG_ON\">MAYBE_BUILD_BUG_ON</a>((<a class=\"id\" href=\"#GFP_ZONE_BAD\">GFP_ZONE_BAD</a> >> <a class=\"id\" href=\"#bit\">bit</a>) &amp; 1);", 
"<span class=\"ts\"/>else {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_VM\">CONFIG_DEBUG_VM</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#GFP_ZONE_BAD\">GFP_ZONE_BAD</a> >> <a class=\"id\" href=\"#bit\">bit</a>) &amp; 1);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#z\">z</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There is only one page-allocator function, and two main namespaces to</span>", 
"<span class=\"comment\"> * it. The alloc_page*() variants return 'struct page *' and as such</span>", 
"<span class=\"comment\"> * can allocate highmem pages, the *get*page*() variants return</span>", 
"<span class=\"comment\"> * virtual kernel addresses to the allocated page(s).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#gfp_zonelist\">gfp_zonelist</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NUMA_BUILD\">NUMA_BUILD</a> && <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#__GFP_THISNODE\">__GFP_THISNODE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We get the zone list from the current node and the gfp_mask.</span>", 
"<span class=\"comment\"> * This zone list contains a maximum of MAXNODES*MAX_NR_ZONES zones.</span>", 
"<span class=\"comment\"> * There are two zonelists per node, one for all zones with memory and</span>", 
"<span class=\"comment\"> * one containing just zones from the node the zonelist belongs to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For the normal case of non-DISCONTIGMEM systems the NODE_DATA() gets</span>", 
"<span class=\"comment\"> * optimized to &amp;contig_page_data at compile-time.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#node_zonelists\">node_zonelists</a> + <a class=\"id\" href=\"#gfp_zonelist\">gfp_zonelist</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#HAVE_ARCH_FREE_PAGE\">HAVE_ARCH_FREE_PAGE</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#arch_free_page\">arch_free_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#order\">order</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#HAVE_ARCH_ALLOC_PAGE\">HAVE_ARCH_ALLOC_PAGE</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#arch_alloc_page\">arch_alloc_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#order\">order</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__alloc_pages_nodemask\">__alloc_pages_nodemask</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__alloc_pages\">__alloc_pages</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__alloc_pages_nodemask\">__alloc_pages_nodemask</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#alloc_pages_node\">alloc_pages_node</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Unknown node is current node */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nid\">nid</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__alloc_pages\">__alloc_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#alloc_pages_exact_node\">alloc_pages_exact_node</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#nid\">nid</a> &lt; 0 || <a class=\"id\" href=\"#nid\">nid</a> >= <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__alloc_pages\">__alloc_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"extern struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#alloc_pages_current\">alloc_pages_current</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned <a class=\"id\" href=\"#order\">order</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_pages_current\">alloc_pages_current</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"}", 
"extern struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#alloc_page_vma\">alloc_page_vma</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_pages_node\">alloc_pages_node</a>(<a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>(), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alloc_page_vma\">alloc_page_vma</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>) <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, 0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>) <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, 0)", 
"", 
"extern unsigned long <a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>);", 
"extern unsigned long <a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"void *<a class=\"id\" href=\"#alloc_pages_exact\">alloc_pages_exact</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"void <a class=\"id\" href=\"#free_pages_exact\">free_pages_exact</a>(void *<a class=\"id\" href=\"#virt\">virt</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>((<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>), 0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_dma_pages\">__get_dma_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>((<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>) | <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>, (<a class=\"id\" href=\"#order\">order</a>))", 
"", 
"extern void <a class=\"id\" href=\"#__free_pages\">__free_pages</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>);", 
"extern void <a class=\"id\" href=\"#free_pages\">free_pages</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>);", 
"extern void <a class=\"id\" href=\"#free_hot_cold_page\">free_hot_cold_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#cold\">cold</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>) <a class=\"id\" href=\"#__free_pages\">__free_pages</a>((<a class=\"id\" href=\"#page\">page</a>), 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#free_page\">free_page</a>(<a class=\"id\" href=\"#addr\">addr</a>) <a class=\"id\" href=\"#free_pages\">free_pages</a>((<a class=\"id\" href=\"#addr\">addr</a>), 0)", 
"", 
"void <a class=\"id\" href=\"#page_alloc_init\">page_alloc_init</a>(void);", 
"void <a class=\"id\" href=\"#drain_zone_pages\">drain_zone_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#per_cpu_pages\">per_cpu_pages</a> *<a class=\"id\" href=\"#pcp\">pcp</a>);", 
"void <a class=\"id\" href=\"#drain_all_pages\">drain_all_pages</a>(void);", 
"void <a class=\"id\" href=\"#drain_local_pages\">drain_local_pages</a>(void *<a class=\"id\" href=\"#dummy\">dummy</a>);", 
"", 
"extern <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_allowed_mask\">gfp_allowed_mask</a>;", 
"", 
"extern void <a class=\"id\" href=\"#set_gfp_allowed_mask\">set_gfp_allowed_mask</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mask\">mask</a>);", 
"extern <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#clear_gfp_allowed_mask\">clear_gfp_allowed_mask</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_GFP_H */</span>", 
];
xr_frag_insert('l/81/8524302b1bac2fae3b83288c71c3c464516526.xr', __xr_tmp);
