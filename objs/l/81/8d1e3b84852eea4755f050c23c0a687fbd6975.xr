var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_css_set\">get_css_set</a>(<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#cg_list\">cg_list</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_fork_callbacks - run fork callbacks</span>", 
"<span class=\"comment\"> * @child: the new task</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called on a new task very soon before adding it to the</span>", 
"<span class=\"comment\"> * tasklist. No need to take any locks since no-one can</span>", 
"<span class=\"comment\"> * be operating on this task.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cgroup_fork_callbacks\">cgroup_fork_callbacks</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_forkexit_callback\">need_forkexit_callback</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * forkexit callbacks are only supported for builtin</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * subsystems, and the builtin section of the subsys array is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * immutable, so we don't need to lock the subsys array here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#fork\">fork</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#fork\">fork</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_post_fork - called on a new task after adding it to the task list</span>", 
"<span class=\"comment\"> * @child: the task in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Adds the task to the list running through its css_set if necessary.</span>", 
"<span class=\"comment\"> * Has to be after the task is visible on the task list in case we race</span>", 
"<span class=\"comment\"> * with the first call to cgroup_iter_start() - to guarantee that the</span>", 
"<span class=\"comment\"> * new task ends up on its list.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cgroup_post_fork\">cgroup_post_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#use_task_css_set_links\">use_task_css_set_links</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#cg_list\">cg_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#cg_list\">cg_list</a>, &amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a>-><a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_exit - detach cgroup from exiting task</span>", 
"<span class=\"comment\"> * @tsk: pointer to task_struct of exiting process</span>", 
"<span class=\"comment\"> * @run_callback: run exit callbacks?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Detach cgroup from @tsk and release it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that cgroups marked notify_on_release force every task in</span>", 
"<span class=\"comment\"> * them to take the global cgroup_mutex mutex when exiting.</span>", 
"<span class=\"comment\"> * This could impact scaling on very large systems.  Be reluctant to</span>", 
"<span class=\"comment\"> * use notify_on_release cgroups where very high task exit scaling</span>", 
"<span class=\"comment\"> * is required on large systems.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * the_top_cgroup_hack:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    Set the exiting tasks cgroup to the root cgroup (top_cgroup).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    We call cgroup_exit() while the task is still competent to</span>", 
"<span class=\"comment\"> *    handle notify_on_release(), then leave the task attached to the</span>", 
"<span class=\"comment\"> *    root cgroup in each hierarchy for the remainder of its exit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    To do this properly, we would increment the reference count on</span>", 
"<span class=\"comment\"> *    top_cgroup, and near the very end of the kernel/exit.c do_exit()</span>", 
"<span class=\"comment\"> *    code we would add a second cgroup function call, to drop that</span>", 
"<span class=\"comment\"> *    reference.  This would just create an unnecessary hot spot on</span>", 
"<span class=\"comment\"> *    the top_cgroup reference count, to no avail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    Normally, holding a reference to a cgroup without bumping its</span>", 
"<span class=\"comment\"> *    count is unsafe.   The cgroup could go away, or someone could</span>", 
"<span class=\"comment\"> *    attach us to a different cgroup, decrementing the count on</span>", 
"<span class=\"comment\"> *    the first cgroup that we never incremented.  But in this case,</span>", 
"<span class=\"comment\"> *    top_cgroup isn't going away, and either task has PF_EXITING set,</span>", 
"<span class=\"comment\"> *    which wards off any cgroup_attach_task() attempts, or task is a failed</span>", 
"<span class=\"comment\"> *    fork, never visible to cgroup_attach_task.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cgroup_exit\">cgroup_exit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#run_callbacks\">run_callbacks</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#run_callbacks\">run_callbacks</a> && <a class=\"id\" href=\"#need_forkexit_callback\">need_forkexit_callback</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * modular subsystems can't use callbacks, so no need to lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the subsys array</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#exit\">exit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#exit\">exit</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unlink from the css_set task list if necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Optimistically check cg_list before taking</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * css_set_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cg_list\">cg_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cg_list\">cg_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cg_list\">cg_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reassign the task to the init_css_set. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cg\">cg</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a> = &amp;<a class=\"id\" href=\"#init_css_set\">init_css_set</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cg\">cg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_css_set_taskexit\">put_css_set_taskexit</a>(<a class=\"id\" href=\"#cg\">cg</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_clone - clone the cgroup the given subsystem is attached to</span>", 
"<span class=\"comment\"> * @tsk: the task to be moved</span>", 
"<span class=\"comment\"> * @subsys: the given subsystem</span>", 
"<span class=\"comment\"> * @nodename: the name for the new cgroup</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Duplicate the current cgroup in the hierarchy that the given</span>", 
"<span class=\"comment\"> * subsystem is attached to, and move this task into the new</span>", 
"<span class=\"comment\"> * child.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cgroup_clone\">cgroup_clone</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#subsys\">subsys</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#nodename\">nodename</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#parent\">parent</a>, *<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We shouldn't be called by an unregistered subsystem */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#subsys\">subsys</a>-><a class=\"id\" href=\"#active\">active</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First figure out what hierarchy and cgroup we're dealing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with, and pin them so we can drop cgroup_mutex */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#subsys\">subsys</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a> == &amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Pin the hierarchy */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_active\">s_active</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We race with the final deactivate_super() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Keep the cgroup alive */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#task_cgroup\">task_cgroup</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#subsys\">subsys</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cg\">cg</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cgroups\">cgroups</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_css_set\">get_css_set</a>(<a class=\"id\" href=\"#cg\">cg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now do the VFS work to create a cgroup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hold the parent directory mutex across this operation to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stop anyone else deleting the new cgroup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#lookup_one_len\">lookup_one_len</a>(<a class=\"id\" href=\"#nodename\">nodename</a>, <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#nodename\">nodename</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"cgroup: Couldn't allocate dentry for %s: %ld\\n\", <a class=\"id\" href=\"#nodename\">nodename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create the cgroup directory, which also creates the cgroup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vfs_mkdir\">vfs_mkdir</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, 0755);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#__d_cgrp\">__d_cgrp</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Failed to create cgroup %s: %d\\n\", <a class=\"id\" href=\"#nodename\">nodename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The cgroup now exists. Retake cgroup_mutex and check</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that we're still in the same state that we thought we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * were. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
];
xr_frag_insert('l/81/8d1e3b84852eea4755f050c23c0a687fbd6975.xr', __xr_tmp);
