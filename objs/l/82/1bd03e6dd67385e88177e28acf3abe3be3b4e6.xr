var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * proc/fs/generic.c --- generic routines for the proc-fs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains generic proc-fs routines for handling</span>", 
"<span class=\"comment\"> * directories and files.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Copyright (C) 1991, 1992 Linus Torvalds.</span>", 
"<span class=\"comment\"> * Copyright (C) 1997 Theodore Ts'o</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"<a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"", 
"static int <a class=\"id\" href=\"#proc_match\">proc_match</a>(int <a class=\"id\" href=\"#len\">len</a>, const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#de\">de</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#namelen\">namelen</a> != <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/* buffer size is one page but our output routines use some slack for overruns */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PROC_BLOCK_SIZE\">PROC_BLOCK_SIZE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1024)", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#__proc_file_read\">__proc_file_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>char <span class=\"ts\"/>*<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a>=0;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#eof\">eof</a>=0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/>*<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> * <a class=\"id\" href=\"#dp\">dp</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Gaah, please just use \"seq_file\" instead. The legacy /proc</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interfaces cut loff_t down to off_t for reads, and ignore</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the offset entirely for writes..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = *<a class=\"id\" href=\"#ppos\">ppos</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> &gt; <a class=\"id\" href=\"#MAX_NON_LFS\">MAX_NON_LFS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nbytes\">nbytes</a> &gt; <a class=\"id\" href=\"#MAX_NON_LFS\">MAX_NON_LFS</a> - <a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#MAX_NON_LFS\">MAX_NON_LFS</a> - <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a> = <a class=\"id\" href=\"#PDE\">PDE</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#page\">page</a> = (char*) <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_TEMPORARY\">GFP_TEMPORARY</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#nbytes\">nbytes</a> &gt; 0) && !<a class=\"id\" href=\"#eof\">eof</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#PROC_BLOCK_SIZE\">PROC_BLOCK_SIZE</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#read_proc\">read_proc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * How to be a proc read function</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ------------------------------</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Prototype:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    int f(char *buffer, char **start, off_t offset,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *          int count, int *peof, void *dat)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Assume that the buffer is \"count\" bytes in size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If you know you have supplied all the data you</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * have, set *peof.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * You have three ways to return data:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 0) Leave *start = NULL.  (This is the default.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    Put the data of the requested offset at that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    offset within the buffer.  Return the number (n)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    of bytes there are from the beginning of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    buffer up to the last byte of data.  If the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    number of supplied bytes (= n - offset) is </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    greater than zero and you didn't signal eof</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    and the reader is prepared to take more data</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    you will be called again with the requested</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    offset advanced by the number of bytes </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    absorbed.  This interface is useful for files</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    no larger than the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 1) Set *start = an unsigned long value less than</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    the buffer address but greater than zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    Put the data of the requested offset at the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    beginning of the buffer.  Return the number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    bytes of data placed there.  If this number is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    greater than zero and you didn't signal eof</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    and the reader is prepared to take more data</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    you will be called again with the requested</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    offset advanced by *start.  This interface is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    useful when you have a large file consisting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    of a series of blocks which you want to count</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    and return as wholes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    (Hack by Paul.Russell@rustcorp.com.au)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 2) Set *start = an address within the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    Put the data of the requested offset at *start.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    Return the number of bytes of data placed there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    If this number is greater than zero and you</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    didn't signal eof and the reader is prepared to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    take more data you will be called again with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    requested offset advanced by the number of bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    absorbed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#read_proc\">read_proc</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#start\">start</a>, *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#eof\">eof</a>, <a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 0)   <span class=\"comment\">/* end of file */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; 0) {  <span class=\"comment\">/* error */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"proc_file_read: Apparent buffer overflow!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= *<a class=\"id\" href=\"#ppos\">ppos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#page\">page</a> + *<a class=\"id\" href=\"#ppos\">ppos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"proc_file_read: Apparent buffer overflow!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Don't reduce n because doing so might</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cut off part of a data block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"proc_file_read: Read count exceeded\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else <span class=\"comment\">/* start &gt;= page */</span> {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#startoff\">startoff</a> = (unsigned long)(<a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &gt; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#startoff\">startoff</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"proc_file_read: Apparent buffer overflow!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#startoff\">startoff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#page\">page</a> ? <a class=\"id\" href=\"#page\">page</a> : <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#page\">page</a> ? (unsigned long)<a class=\"id\" href=\"#start\">start</a> : <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long) <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#proc_file_read\">proc_file_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#pde\">pde</a> = <a class=\"id\" href=\"#PDE\">PDE</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#rv\">rv</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#proc_fops\">proc_fops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rv\">rv</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#pde_users\">pde_users</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#__proc_file_read\">__proc_file_read</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pde_users_dec\">pde_users_dec</a>(<a class=\"id\" href=\"#pde\">pde</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rv\">rv</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#proc_file_write\">proc_file_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#pde\">pde</a> = <a class=\"id\" href=\"#PDE\">PDE</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#rv\">rv</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#write_proc\">write_proc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#proc_fops\">proc_fops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rv\">rv</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#pde_users\">pde_users</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: does this routine need ppos?  probably... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#write_proc\">write_proc</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pde_users_dec\">pde_users_dec</a>(<a class=\"id\" href=\"#pde\">pde</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rv\">rv</a>;", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#loff_t\">loff_t</a>", 
"<a class=\"id\" href=\"#proc_file_lseek\">proc_file_lseek</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#orig\">orig</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#orig\">orig</a>) {", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* fallthrough */</span>", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; 0 || <a class=\"id\" href=\"#offset\">offset</a> &gt; <a class=\"id\" href=\"#MAX_NON_LFS\">MAX_NON_LFS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a> = <a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_file_operations\">proc_file_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_file_lseek\">proc_file_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_file_read\">proc_file_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_file_write\">proc_file_write</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#proc_notify_change\">proc_notify_change</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#iattr\">iattr</a> *<a class=\"id\" href=\"#iattr\">iattr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#PDE\">PDE</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#inode_change_ok\">inode_change_ok</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iattr\">iattr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#iattr\">iattr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_SIZE\">ATTR_SIZE</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#iattr\">iattr</a>-><a class=\"id\" href=\"#ia_size\">ia_size</a> != <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#vmtruncate\">vmtruncate</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iattr\">iattr</a>-><a class=\"id\" href=\"#ia_size\">ia_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setattr_copy\">setattr_copy</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iattr\">iattr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#gid\">gid</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#proc_getattr\">proc_getattr</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kstat\">kstat</a> *<a class=\"id\" href=\"#stat\">stat</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#PROC_I\">PROC_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#pde\">pde</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#de\">de</a> && <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#nlink\">nlink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#nlink\">nlink</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#generic_fillattr\">generic_fillattr</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#stat\">stat</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#proc_file_inode_operations\">proc_file_inode_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#setattr\">setattr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_notify_change\">proc_notify_change</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function parses a name such as \"tty/driver/serial\", and</span>", 
"<span class=\"comment\"> * returns the struct proc_dir_entry for \"/proc/tty/driver\", and</span>", 
"<span class=\"comment\"> * returns \"serial\" in residual.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__xlate_proc_name\">__xlate_proc_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> **<a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const char **<a class=\"id\" href=\"#residual\">residual</a>)", 
"{", 
"<span class=\"ts\"/>const char     <span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#name\">name</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a><span class=\"ts\"/>*<a class=\"id\" href=\"#de\">de</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#de\">de</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = &amp;<a class=\"id\" href=\"#proc_root\">proc_root</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#cp\">cp</a>, '/');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#next\">next</a> - <a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#subdir\">subdir</a>; <a class=\"id\" href=\"#de\">de</a> ; <a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#proc_match\">proc_match</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#de\">de</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#de\">de</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"name '%s'\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> += <a class=\"id\" href=\"#len\">len</a> + 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#residual\">residual</a> = <a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#de\">de</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#xlate_proc_name\">xlate_proc_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> **<a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char **<a class=\"id\" href=\"#residual\">residual</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rv\">rv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#__xlate_proc_name\">__xlate_proc_name</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#residual\">residual</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rv\">rv</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_IDA\">DEFINE_IDA</a>(<a class=\"id\" href=\"#proc_inum_ida\">proc_inum_ida</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#proc_inum_lock\">proc_inum_lock</a>); <span class=\"comment\">/* protects the above */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PROC_DYNAMIC_FIRST\">PROC_DYNAMIC_FIRST</a> 0xF0000000U", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return an inode number between PROC_DYNAMIC_FIRST and</span>", 
"<span class=\"comment\"> * 0xffffffff, or zero on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#get_inode_number\">get_inode_number</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(&amp;<a class=\"id\" href=\"#proc_inum_ida\">proc_inum_ida</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#proc_inum_lock\">proc_inum_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ida_get_new\">ida_get_new</a>(&amp;<a class=\"id\" href=\"#proc_inum_ida\">proc_inum_ida</a>, &amp;<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_inum_lock\">proc_inum_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a> - <a class=\"id\" href=\"#PROC_DYNAMIC_FIRST\">PROC_DYNAMIC_FIRST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#proc_inum_lock\">proc_inum_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#proc_inum_ida\">proc_inum_ida</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_inum_lock\">proc_inum_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PROC_DYNAMIC_FIRST\">PROC_DYNAMIC_FIRST</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#release_inode_number\">release_inode_number</a>(unsigned int <a class=\"id\" href=\"#inum\">inum</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#proc_inum_lock\">proc_inum_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#proc_inum_ida\">proc_inum_ida</a>, <a class=\"id\" href=\"#inum\">inum</a> - <a class=\"id\" href=\"#PROC_DYNAMIC_FIRST\">PROC_DYNAMIC_FIRST</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_inum_lock\">proc_inum_lock</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#proc_follow_link\">proc_follow_link</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nd_set_link\">nd_set_link</a>(<a class=\"id\" href=\"#nd\">nd</a>, <a class=\"id\" href=\"#PDE\">PDE</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#proc_link_inode_operations\">proc_link_inode_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readlink\">readlink</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_readlink\">generic_readlink</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#follow_link\">follow_link</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_follow_link\">proc_follow_link</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * As some entries in /proc are volatile, we want to </span>", 
"<span class=\"comment\"> * get rid of unused dentries.  This could be made </span>", 
"<span class=\"comment\"> * smarter: we could keep a \"volatile\" flag in the </span>", 
"<span class=\"comment\"> * inode to indicate which ones to keep.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#proc_delete_dentry\">proc_delete_dentry</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#dentry_operations\">dentry_operations</a> <a class=\"id\" href=\"#proc_dentry_operations\">proc_dentry_operations</a> =", 
"{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#d_delete\">d_delete</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_delete_dentry\">proc_delete_dentry</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Don't create negative dentries here, return -ENOENT by hand</span>", 
"<span class=\"comment\"> * instead.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#proc_lookup_de\">proc_lookup_de</a>(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#de\">de</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#subdir\">subdir</a>; <a class=\"id\" href=\"#de\">de</a> ; <a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#namelen\">namelen</a> != <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#namelen\">namelen</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ino\">ino</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ino\">ino</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#low_ino\">low_ino</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pde_get\">pde_get</a>(<a class=\"id\" href=\"#de\">de</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#proc_get_inode\">proc_get_inode</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#ino\">ino</a>, <a class=\"id\" href=\"#de\">de</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a> = &amp;<a class=\"id\" href=\"#proc_dentry_operations\">proc_dentry_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_add\">d_add</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#de\">de</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pde_put\">pde_put</a>(<a class=\"id\" href=\"#de\">de</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#proc_lookup\">proc_lookup</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#proc_lookup_de\">proc_lookup_de</a>(<a class=\"id\" href=\"#PDE\">PDE</a>(<a class=\"id\" href=\"#dir\">dir</a>), <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This returns non-zero if at EOF, so that the /proc</span>", 
"<span class=\"comment\"> * root directory can use this and check if it should</span>", 
"<span class=\"comment\"> * continue with the &lt;pid&gt; entries..</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that the VFS-layer doesn't care about the return</span>", 
"<span class=\"comment\"> * value of the readdir() call, as long as it's non-negative</span>", 
"<span class=\"comment\"> * for success..</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_readdir_de\">proc_readdir_de</a>(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#de\">de</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, void *<a class=\"id\" href=\"#dirent\">dirent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filldir_t\">filldir_t</a> <a class=\"id\" href=\"#filldir\">filldir</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ino\">ino</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ino\">ino</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filldir\">filldir</a>(<a class=\"id\" href=\"#dirent\">dirent</a>, \".\", 1, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ino\">ino</a>, <a class=\"id\" href=\"#DT_DIR\">DT_DIR</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filldir\">filldir</a>(<a class=\"id\" href=\"#dirent\">dirent</a>, \"..\", 2, <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#parent_ino\">parent_ino</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#DT_DIR\">DT_DIR</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#subdir\">subdir</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> -= 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#de\">de</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* filldir passes info to user space */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pde_get\">pde_get</a>(<a class=\"id\" href=\"#de\">de</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filldir\">filldir</a>(<a class=\"id\" href=\"#dirent\">dirent</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#namelen\">namelen</a>, <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#low_ino\">low_ino</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#mode\">mode</a> >> 12) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pde_put\">pde_put</a>(<a class=\"id\" href=\"#de\">de</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pde_put\">pde_put</a>(<a class=\"id\" href=\"#de\">de</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#de\">de</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;<span class=\"ts\"/>", 
"}", 
"", 
"int <a class=\"id\" href=\"#proc_readdir\">proc_readdir</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, void *<a class=\"id\" href=\"#dirent\">dirent</a>, <a class=\"id\" href=\"#filldir_t\">filldir_t</a> <a class=\"id\" href=\"#filldir\">filldir</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#proc_readdir_de\">proc_readdir_de</a>(<a class=\"id\" href=\"#PDE\">PDE</a>(<a class=\"id\" href=\"#inode\">inode</a>), <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#dirent\">dirent</a>, <a class=\"id\" href=\"#filldir\">filldir</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are the generic /proc directory operations. They</span>", 
"<span class=\"comment\"> * use the in-memory \"struct proc_dir_entry\" tree to parse</span>", 
"<span class=\"comment\"> * the /proc directory.</span>", 
"<span class=\"comment\"> */</span>", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_dir_operations\">proc_dir_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_llseek\">generic_file_llseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_read_dir\">generic_read_dir</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readdir\">readdir</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_readdir\">proc_readdir</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * proc directories can do almost nothing..</span>", 
"<span class=\"comment\"> */</span>", 
"static const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#proc_dir_inode_operations\">proc_dir_inode_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lookup\">lookup</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_lookup\">proc_lookup</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#getattr\">getattr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_getattr\">proc_getattr</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#setattr\">setattr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_notify_change\">proc_notify_change</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#proc_register\">proc_register</a>(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> * <a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> * <a class=\"id\" href=\"#dp\">dp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#get_inode_number\">get_inode_number</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#low_ino\">low_ino</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#proc_iops\">proc_iops</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#proc_fops\">proc_fops</a> = &amp;<a class=\"id\" href=\"#proc_dir_operations\">proc_dir_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#proc_iops\">proc_iops</a> = &amp;<a class=\"id\" href=\"#proc_dir_inode_operations\">proc_dir_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#nlink\">nlink</a>++;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#proc_iops\">proc_iops</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#proc_iops\">proc_iops</a> = &amp;<a class=\"id\" href=\"#proc_link_inode_operations\">proc_link_inode_operations</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#proc_fops\">proc_fops</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#proc_fops\">proc_fops</a> = &amp;<a class=\"id\" href=\"#proc_file_operations\">proc_file_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#proc_iops\">proc_iops</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#proc_iops\">proc_iops</a> = &amp;<a class=\"id\" href=\"#proc_file_inode_operations\">proc_file_inode_operations</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#subdir\">subdir</a>; <a class=\"id\" href=\"#tmp\">tmp</a>; <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#name\">name</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"proc_dir_entry '%s/%s' already registered\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#subdir\">subdir</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dir\">dir</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#subdir\">subdir</a> = <a class=\"id\" href=\"#dp\">dp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#__proc_create\">__proc_create</a>(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> **<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#nlink_t\">nlink_t</a> <a class=\"id\" href=\"#nlink\">nlink</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure name is valid */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a> || !<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>)) goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xlate_proc_name\">xlate_proc_name</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#parent\">parent</a>, &amp;<a class=\"id\" href=\"#fn\">fn</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* At this point there must not be any '/' characters beyond *fn */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#fn\">fn</a>, '/'))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#fn\">fn</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a>) + <a class=\"id\" href=\"#len\">len</a> + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ent\">ent</a>) goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ent\">ent</a>, 0, sizeof(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(((char *) <a class=\"id\" href=\"#ent\">ent</a>) + sizeof(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a>), <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#len\">len</a> + 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#name\">name</a> = ((char *) <a class=\"id\" href=\"#ent\">ent</a>) + sizeof(*<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#namelen\">namelen</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#nlink\">nlink</a> = <a class=\"id\" href=\"#nlink\">nlink</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#count\">count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#pde_users\">pde_users</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#pde_unload_completion\">pde_unload_completion</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#pde_openers\">pde_openers</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ent\">ent</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_symlink\">proc_symlink</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>, const char *<a class=\"id\" href=\"#dest\">dest</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#__proc_create\">__proc_create</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#S_IFLNK\">S_IFLNK</a> | <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IWUGO\">S_IWUGO</a> | <a class=\"id\" href=\"#S_IXUGO\">S_IXUGO</a>),1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>((<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#size\">size</a>=<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#dest\">dest</a>))+1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>((char*)<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#data\">data</a>,<a class=\"id\" href=\"#dest\">dest</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#proc_register\">proc_register</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#ent\">ent</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ent\">ent</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_symlink\">proc_symlink</a>);", 
"", 
"struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_mkdir_mode\">proc_mkdir_mode</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#__proc_create\">__proc_create</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a> | <a class=\"id\" href=\"#mode\">mode</a>, 2);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#proc_register\">proc_register</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#ent\">ent</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ent\">ent</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_net_mkdir\">proc_net_mkdir</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#__proc_create\">__proc_create</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a> | <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IXUGO\">S_IXUGO</a>, 2);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#net\">net</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#proc_register\">proc_register</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#ent\">ent</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ent\">ent</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#proc_net_mkdir\">proc_net_mkdir</a>);", 
"", 
"struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_mkdir\">proc_mkdir</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#proc_mkdir_mode\">proc_mkdir_mode</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IXUGO\">S_IXUGO</a>, <a class=\"id\" href=\"#parent\">parent</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_mkdir\">proc_mkdir</a>);", 
"", 
"struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#create_proc_entry\">create_proc_entry</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nlink_t\">nlink_t</a> <a class=\"id\" href=\"#nlink\">nlink</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IXUGO\">S_IXUGO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nlink\">nlink</a> = 2;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IFMT\">S_IFMT</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#S_IFREG\">S_IFREG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nlink\">nlink</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#__proc_create\">__proc_create</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#nlink\">nlink</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#proc_register\">proc_register</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#ent\">ent</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ent\">ent</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#create_proc_entry\">create_proc_entry</a>);", 
"", 
"struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_create_data\">proc_create_data</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#proc_fops\">proc_fops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#pde\">pde</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nlink_t\">nlink_t</a> <a class=\"id\" href=\"#nlink\">nlink</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IXUGO\">S_IXUGO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nlink\">nlink</a> = 2;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IFMT\">S_IFMT</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#S_IFREG\">S_IFREG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nlink\">nlink</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pde\">pde</a> = <a class=\"id\" href=\"#__proc_create\">__proc_create</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#nlink\">nlink</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pde\">pde</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#proc_fops\">proc_fops</a> = <a class=\"id\" href=\"#proc_fops\">proc_fops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#proc_register\">proc_register</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#pde\">pde</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pde\">pde</a>;", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pde\">pde</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_create_data\">proc_create_data</a>);", 
"", 
"static void <a class=\"id\" href=\"#free_proc_entry\">free_proc_entry</a>(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#de\">de</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ino\">ino</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#low_ino\">low_ino</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ino\">ino</a> &lt; <a class=\"id\" href=\"#PROC_DYNAMIC_FIRST\">PROC_DYNAMIC_FIRST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_inode_number\">release_inode_number</a>(<a class=\"id\" href=\"#ino\">ino</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#mode\">mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#de\">de</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#pde_put\">pde_put</a>(struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#pde\">pde</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#pde\">pde</a>-><a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_proc_entry\">free_proc_entry</a>(<a class=\"id\" href=\"#pde\">pde</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a /proc entry and free it if it's not currently in use.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#remove_proc_entry\">remove_proc_entry</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> **<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#de\">de</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__xlate_proc_name\">__xlate_proc_name</a>(<a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>, &amp;<a class=\"id\" href=\"#fn\">fn</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#fn\">fn</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#subdir\">subdir</a>; *<a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a>=&amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#next\">next</a> ) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#proc_match\">proc_match</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#fn\">fn</a>, *<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#proc_subdir_lock\">proc_subdir_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#de\">de</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"name '%s'\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Stop accepting new callers into module. If you're</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dynamically allocating -&gt;proc_fops, save a pointer somewhere.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#proc_fops\">proc_fops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait until all existing callers into module are done. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_users\">pde_users</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_COMPLETION_ONSTACK\">DECLARE_COMPLETION_ONSTACK</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_unload_completion\">pde_unload_completion</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_unload_completion\">pde_unload_completion</a> = &amp;<a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_unload_completion\">pde_unload_completion</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#continue_removing\">continue_removing</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"", 
"<a class=\"id\" href=\"#continue_removing\">continue_removing</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_openers\">pde_openers</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pde_opener\">pde_opener</a> *<a class=\"id\" href=\"#pdeo\">pdeo</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdeo\">pdeo</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_openers\">pde_openers</a>, struct <a class=\"id\" href=\"#pde_opener\">pde_opener</a>, <a class=\"id\" href=\"#lh\">lh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pdeo\">pdeo</a>-><a class=\"id\" href=\"#lh\">lh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdeo\">pdeo</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#pdeo\">pdeo</a>-><a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pdeo\">pdeo</a>-><a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pdeo\">pdeo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#pde_unload_lock\">pde_unload_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#mode\">mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#nlink\">nlink</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#nlink\">nlink</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(<a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#subdir\">subdir</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: removing non-empty directory \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"'%s/%s', leaking at least '%s'\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#de\">de</a>-><a class=\"id\" href=\"#subdir\">subdir</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pde_put\">pde_put</a>(<a class=\"id\" href=\"#de\">de</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#remove_proc_entry\">remove_proc_entry</a>);", 
];
xr_frag_insert('l/82/1bd03e6dd67385e88177e28acf3abe3be3b4e6.xr', __xr_tmp);
