var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * scsicam.c - SCSI CAM support functions, use for HDIO_GETGEO, etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 1993, 1994 Drew Eckhardt</span>", 
"<span class=\"comment\"> *      Visionary Computing </span>", 
"<span class=\"comment\"> *      (Unix and Linux consulting and custom programming)</span>", 
"<span class=\"comment\"> *      drew@Colorado.EDU</span>", 
"<span class=\"comment\"> *      +1 (303) 786-7975</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For more information, please consult the SCSI-CAM draft.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#genhd\">genhd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unaligned\">unaligned</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsicam\">scsicam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"static int <a class=\"id\" href=\"#setsize\">setsize</a>(unsigned long <a class=\"id\" href=\"#capacity\">capacity</a>, unsigned int *<a class=\"id\" href=\"#cyls\">cyls</a>, unsigned int *<a class=\"id\" href=\"#hds\">hds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned int *<a class=\"id\" href=\"#secs\">secs</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_bios_ptable - Read PC partition table out of first sector of device.</span>", 
"<span class=\"comment\"> * @dev: from this device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Reads the first sector from the device and returns %0x42 bytes</span>", 
"<span class=\"comment\"> *              starting at offset %0x1be.</span>", 
"<span class=\"comment\"> * Returns: partition table in kmalloc(GFP_KERNEL) memory, or NULL on error.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned char *<a class=\"id\" href=\"#scsi_bios_ptable\">scsi_bios_ptable</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(66, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bd_contains\">bd_contains</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#read_dev_sector\">read_dev_sector</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, 0, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#data\">data</a> + 0x1be, 66);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_bios_ptable\">scsi_bios_ptable</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsicam_bios_param - Determine geometry of a disk in cylinders/heads/sectors.</span>", 
"<span class=\"comment\"> * @bdev: which device</span>", 
"<span class=\"comment\"> * @capacity: size of the disk in sectors</span>", 
"<span class=\"comment\"> * @ip: return value: ip[0]=heads, ip[1]=sectors, ip[2]=cylinders</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description : determine the BIOS mapping/geometry used for a drive in a</span>", 
"<span class=\"comment\"> *      SCSI-CAM system, storing the results in ip as required</span>", 
"<span class=\"comment\"> *      by the HDIO_GETGEO ioctl().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns : -1 on failure, 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#scsicam_bios_param\">scsicam_bios_param</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#capacity\">capacity</a>, int *<a class=\"id\" href=\"#ip\">ip</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#capacity64\">capacity64</a> = <a class=\"id\" href=\"#capacity\">capacity</a>;<span class=\"ts\"/><span class=\"comment\">/* Suppress gcc warning */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#scsi_bios_ptable\">scsi_bios_ptable</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* try to infer mapping from partition table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#scsi_partsize\">scsi_partsize</a>(<a class=\"id\" href=\"#p\">p</a>, (unsigned long)<a class=\"id\" href=\"#capacity\">capacity</a>, (unsigned int *)<a class=\"id\" href=\"#ip\">ip</a> + 2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int *)<a class=\"id\" href=\"#ip\">ip</a> + 0, (unsigned int *)<a class=\"id\" href=\"#ip\">ip</a> + 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -1 && <a class=\"id\" href=\"#capacity64\">capacity64</a> &lt; (1ULL << 32)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pick some standard mapping with at most 1024 cylinders,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   and at most 62 sectors per track - this works up to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   7905 MB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#setsize\">setsize</a>((unsigned long)<a class=\"id\" href=\"#capacity\">capacity</a>, (unsigned int *)<a class=\"id\" href=\"#ip\">ip</a> + 2,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned int *)<a class=\"id\" href=\"#ip\">ip</a> + 0, (unsigned int *)<a class=\"id\" href=\"#ip\">ip</a> + 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if something went wrong, then apparently we have to return</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   a geometry with more than 1024 cylinders */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> || <a class=\"id\" href=\"#ip\">ip</a>[0] &gt; 255 || <a class=\"id\" href=\"#ip\">ip</a>[1] &gt; 63) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#capacity\">capacity</a> >> 11) &gt; 65534) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>[0] = 255;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>[1] = 63;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>[0] = 64;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>[1] = 32;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#capacity\">capacity</a> &gt; 65535*63*255)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>[2] = 65535;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>[2] = (unsigned long)<a class=\"id\" href=\"#capacity\">capacity</a> / (<a class=\"id\" href=\"#ip\">ip</a>[0] * <a class=\"id\" href=\"#ip\">ip</a>[1]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsicam_bios_param\">scsicam_bios_param</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_partsize - Parse cylinders/heads/sectors from PC partition table</span>", 
"<span class=\"comment\"> * @buf: partition table, see scsi_bios_ptable()</span>", 
"<span class=\"comment\"> * @capacity: size of the disk in sectors</span>", 
"<span class=\"comment\"> * @cyls: put cylinders here</span>", 
"<span class=\"comment\"> * @hds: put heads here</span>", 
"<span class=\"comment\"> * @secs: put sectors here</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: determine the BIOS mapping/geometry used to create the partition</span>", 
"<span class=\"comment\"> *      table, storing the results in *cyls, *hds, and *secs </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: -1 on failure, 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#scsi_partsize\">scsi_partsize</a>(unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long <a class=\"id\" href=\"#capacity\">capacity</a>,", 
"<span class=\"ts\"/>       unsigned int *<a class=\"id\" href=\"#cyls\">cyls</a>, unsigned int *<a class=\"id\" href=\"#hds\">hds</a>, unsigned int *<a class=\"id\" href=\"#secs\">secs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#partition\">partition</a> *<a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#partition\">partition</a> *)<a class=\"id\" href=\"#buf\">buf</a>, *<a class=\"id\" href=\"#largest\">largest</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#largest_cyl\">largest_cyl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cyl\">cyl</a>, <a class=\"id\" href=\"#ext_cyl\">ext_cyl</a>, <a class=\"id\" href=\"#end_head\">end_head</a>, <a class=\"id\" href=\"#end_cyl\">end_cyl</a>, <a class=\"id\" href=\"#end_sector\">end_sector</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#logical_end\">logical_end</a>, <a class=\"id\" href=\"#physical_end\">physical_end</a>, <a class=\"id\" href=\"#ext_physical_end\">ext_physical_end</a>;", 
"", 
"", 
"<span class=\"ts\"/>if (*(unsigned short *) (<a class=\"id\" href=\"#buf\">buf</a> + 64) == 0xAA55) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#largest_cyl\">largest_cyl</a> = -1, <a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; ++<a class=\"id\" href=\"#i\">i</a>, ++<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sys_ind\">sys_ind</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"scsicam_bios_param : partition %d has system \\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#i\">i</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cyl\">cyl</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cyl\">cyl</a> + ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sector\">sector</a> &amp; 0xc0) << 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cyl\">cyl</a> &gt; <a class=\"id\" href=\"#largest_cyl\">largest_cyl</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#largest_cyl\">largest_cyl</a> = <a class=\"id\" href=\"#cyl\">cyl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#largest\">largest</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#largest\">largest</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_cyl\">end_cyl</a> = <a class=\"id\" href=\"#largest\">largest</a>-><a class=\"id\" href=\"#end_cyl\">end_cyl</a> + ((<a class=\"id\" href=\"#largest\">largest</a>-><a class=\"id\" href=\"#end_sector\">end_sector</a> &amp; 0xc0) << 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_head\">end_head</a> = <a class=\"id\" href=\"#largest\">largest</a>-><a class=\"id\" href=\"#end_head\">end_head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_sector\">end_sector</a> = <a class=\"id\" href=\"#largest\">largest</a>-><a class=\"id\" href=\"#end_sector\">end_sector</a> &amp; 0x3f;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end_head\">end_head</a> + 1 == 0 || <a class=\"id\" href=\"#end_sector\">end_sector</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"scsicam_bios_param : end at h = %d, c = %d, s = %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#end_head\">end_head</a>, <a class=\"id\" href=\"#end_cyl\">end_cyl</a>, <a class=\"id\" href=\"#end_sector\">end_sector</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physical_end\">physical_end</a> = <a class=\"id\" href=\"#end_cyl\">end_cyl</a> * (<a class=\"id\" href=\"#end_head\">end_head</a> + 1) * <a class=\"id\" href=\"#end_sector\">end_sector</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#end_head\">end_head</a> * <a class=\"id\" href=\"#end_sector\">end_sector</a> + <a class=\"id\" href=\"#end_sector\">end_sector</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is the actual _sector_ number at the end */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#logical_end\">logical_end</a> = <a class=\"id\" href=\"#get_unaligned\">get_unaligned</a>(&amp;<a class=\"id\" href=\"#largest\">largest</a>-><a class=\"id\" href=\"#start_sect\">start_sect</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    + <a class=\"id\" href=\"#get_unaligned\">get_unaligned</a>(&amp;<a class=\"id\" href=\"#largest\">largest</a>-><a class=\"id\" href=\"#nr_sects\">nr_sects</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is for &gt;1023 cylinders */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext_cyl\">ext_cyl</a> = (<a class=\"id\" href=\"#logical_end\">logical_end</a> - (<a class=\"id\" href=\"#end_head\">end_head</a> * <a class=\"id\" href=\"#end_sector\">end_sector</a> + <a class=\"id\" href=\"#end_sector\">end_sector</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>    / (<a class=\"id\" href=\"#end_head\">end_head</a> + 1) / <a class=\"id\" href=\"#end_sector\">end_sector</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext_physical_end\">ext_physical_end</a> = <a class=\"id\" href=\"#ext_cyl\">ext_cyl</a> * (<a class=\"id\" href=\"#end_head\">end_head</a> + 1) * <a class=\"id\" href=\"#end_sector\">end_sector</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#end_head\">end_head</a> * <a class=\"id\" href=\"#end_sector\">end_sector</a> + <a class=\"id\" href=\"#end_sector\">end_sector</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"scsicam_bios_param : logical_end=%d physical_end=%d ext_physical_end=%d ext_cyl=%d\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>  ,<a class=\"id\" href=\"#logical_end\">logical_end</a>, <a class=\"id\" href=\"#physical_end\">physical_end</a>, <a class=\"id\" href=\"#ext_physical_end\">ext_physical_end</a>, <a class=\"id\" href=\"#ext_cyl\">ext_cyl</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#logical_end\">logical_end</a> == <a class=\"id\" href=\"#physical_end\">physical_end</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#end_cyl\">end_cyl</a> == 1023 && <a class=\"id\" href=\"#ext_physical_end\">ext_physical_end</a> == <a class=\"id\" href=\"#logical_end\">logical_end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#secs\">secs</a> = <a class=\"id\" href=\"#end_sector\">end_sector</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#hds\">hds</a> = <a class=\"id\" href=\"#end_head\">end_head</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cyls\">cyls</a> = <a class=\"id\" href=\"#capacity\">capacity</a> / ((<a class=\"id\" href=\"#end_head\">end_head</a> + 1) * <a class=\"id\" href=\"#end_sector\">end_sector</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"scsicam_bios_param : logical (%u) != physical (%u)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#logical_end\">logical_end</a>, <a class=\"id\" href=\"#physical_end\">physical_end</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_partsize\">scsi_partsize</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function : static int setsize(unsigned long capacity,unsigned int *cyls,</span>", 
"<span class=\"comment\"> *      unsigned int *hds, unsigned int *secs);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose : to determine a near-optimal int 0x13 mapping for a</span>", 
"<span class=\"comment\"> *      SCSI disk in terms of lost space of size capacity, storing</span>", 
"<span class=\"comment\"> *      the results in *cyls, *hds, and *secs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns : -1 on failure, 0 on success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Extracted from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * WORKING                                                    X3T9.2</span>", 
"<span class=\"comment\"> * DRAFT                                                        792D</span>", 
"<span class=\"comment\"> * see http://www.t10.org/ftp/t10/drafts/cam/cam-r12b.pdf</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *                                                        Revision 6</span>", 
"<span class=\"comment\"> *                                                         10-MAR-94</span>", 
"<span class=\"comment\"> * Information technology -</span>", 
"<span class=\"comment\"> * SCSI-2 Common access method</span>", 
"<span class=\"comment\"> * transport and SCSI interface module</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * ANNEX A :</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * setsize() converts a read capacity value to int 13h</span>", 
"<span class=\"comment\"> * head-cylinder-sector requirements. It minimizes the value for</span>", 
"<span class=\"comment\"> * number of heads and maximizes the number of cylinders. This</span>", 
"<span class=\"comment\"> * will support rather large disks before the number of heads</span>", 
"<span class=\"comment\"> * will not fit in 4 bits (or 6 bits). This algorithm also</span>", 
"<span class=\"comment\"> * minimizes the number of sectors that will be unused at the end</span>", 
"<span class=\"comment\"> * of the disk while allowing for very large disks to be</span>", 
"<span class=\"comment\"> * accommodated. This algorithm does not use physical geometry. </span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#setsize\">setsize</a>(unsigned long <a class=\"id\" href=\"#capacity\">capacity</a>, unsigned int *<a class=\"id\" href=\"#cyls\">cyls</a>, unsigned int *<a class=\"id\" href=\"#hds\">hds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned int *<a class=\"id\" href=\"#secs\">secs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#rv\">rv</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#heads\">heads</a>, <a class=\"id\" href=\"#sectors\">sectors</a>, <a class=\"id\" href=\"#cylinders\">cylinders</a>, <a class=\"id\" href=\"#temp\">temp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cylinders\">cylinders</a> = 1024L;<span class=\"ts\"/><span class=\"comment\">/* Set number of cylinders to max */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> = 62L;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Maximize sectors per track */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a> = <a class=\"id\" href=\"#cylinders\">cylinders</a> * <a class=\"id\" href=\"#sectors\">sectors</a>;<span class=\"ts\"/><span class=\"comment\">/* Compute divisor for heads */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#heads\">heads</a> = <a class=\"id\" href=\"#capacity\">capacity</a> / <a class=\"id\" href=\"#temp\">temp</a>;<span class=\"ts\"/><span class=\"comment\">/* Compute value for number of heads */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#capacity\">capacity</a> % <a class=\"id\" href=\"#temp\">temp</a>) {<span class=\"ts\"/><span class=\"comment\">/* If no remainder, done! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#heads\">heads</a>++;<span class=\"ts\"/><span class=\"comment\">/* Else, increment number of heads */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a> = <a class=\"id\" href=\"#cylinders\">cylinders</a> * <a class=\"id\" href=\"#heads\">heads</a>;<span class=\"ts\"/><span class=\"comment\">/* Compute divisor for sectors */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a> = <a class=\"id\" href=\"#capacity\">capacity</a> / <a class=\"id\" href=\"#temp\">temp</a>;<span class=\"ts\"/><span class=\"comment\">/* Compute value for sectors per</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   track */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#capacity\">capacity</a> % <a class=\"id\" href=\"#temp\">temp</a>) {<span class=\"ts\"/><span class=\"comment\">/* If no remainder, done! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sectors\">sectors</a>++;<span class=\"ts\"/><span class=\"comment\">/* Else, increment number of sectors */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a> = <a class=\"id\" href=\"#heads\">heads</a> * <a class=\"id\" href=\"#sectors\">sectors</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Compute divisor for cylinders */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cylinders\">cylinders</a> = <a class=\"id\" href=\"#capacity\">capacity</a> / <a class=\"id\" href=\"#temp\">temp</a>;<span class=\"ts\"/><span class=\"comment\">/* Compute number of cylinders */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cylinders\">cylinders</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = (unsigned) -1;<span class=\"ts\"/><span class=\"comment\">/* Give error if 0 cylinders */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cyls\">cyls</a> = (unsigned int) <a class=\"id\" href=\"#cylinders\">cylinders</a>;<span class=\"ts\"/><span class=\"comment\">/* Stuff return values */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#secs\">secs</a> = (unsigned int) <a class=\"id\" href=\"#sectors\">sectors</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#hds\">hds</a> = (unsigned int) <a class=\"id\" href=\"#heads\">heads</a>;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#rv\">rv</a>);", 
"}", 
];
xr_frag_insert('l/82/46f08b3f1811685168a9ba0c961978fb889675.xr', __xr_tmp);
