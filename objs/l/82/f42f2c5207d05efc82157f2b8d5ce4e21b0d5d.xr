var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/lib/string.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * stupid library routines.. The optimized versions should generally be found</span>", 
"<span class=\"comment\"> * as inline code in &lt;asm-xx/string.h&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These are buggy as well..</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * * Fri Jun 25 1999, Ingo Oeser &lt;ioe@informatik.tu-chemnitz.de&gt;</span>", 
"<span class=\"comment\"> * -  Added strsep() which will replace strtok() soon (because strsep() is</span>", 
"<span class=\"comment\"> *    reentrant and should be faster). Use only strsep() in new code, please.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * * Sat Feb 09 2002, Jason Thomas &lt;jason@topic.com.au&gt;,</span>", 
"<span class=\"comment\"> *                    Matthew Hawkins &lt;matt@mh.dropbear.id.au&gt;</span>", 
"<span class=\"comment\"> * -  Kissed strtok() goodbye</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRNICMP\">__HAVE_ARCH_STRNICMP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strnicmp - Case insensitive, length-limited string comparison</span>", 
"<span class=\"comment\"> * @s1: One string</span>", 
"<span class=\"comment\"> * @s2: The other string</span>", 
"<span class=\"comment\"> * @len: the maximum number of characters to compare</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#strnicmp\">strnicmp</a>(const char *<a class=\"id\" href=\"#s1\">s1</a>, const char *<a class=\"id\" href=\"#s2\">s2</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Yes, Virginia, it had better be unsigned */</span>", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c1\">c1</a>, <a class=\"id\" href=\"#c2\">c2</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c1\">c1</a> = *<a class=\"id\" href=\"#s1\">s1</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c2\">c2</a> = *<a class=\"id\" href=\"#s2\">s2</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#c1\">c1</a> || !<a class=\"id\" href=\"#c2\">c2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c1\">c1</a> == <a class=\"id\" href=\"#c2\">c2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c1\">c1</a> = <a class=\"id\" href=\"#tolower\">tolower</a>(<a class=\"id\" href=\"#c1\">c1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c2\">c2</a> = <a class=\"id\" href=\"#tolower\">tolower</a>(<a class=\"id\" href=\"#c2\">c2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c1\">c1</a> != <a class=\"id\" href=\"#c2\">c2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>} while (--<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return (int)<a class=\"id\" href=\"#c1\">c1</a> - (int)<a class=\"id\" href=\"#c2\">c2</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strnicmp\">strnicmp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRCASECMP\">__HAVE_ARCH_STRCASECMP</a>", 
"int <a class=\"id\" href=\"#strcasecmp\">strcasecmp</a>(const char *<a class=\"id\" href=\"#s1\">s1</a>, const char *<a class=\"id\" href=\"#s2\">s2</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#c1\">c1</a>, <a class=\"id\" href=\"#c2\">c2</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c1\">c1</a> = <a class=\"id\" href=\"#tolower\">tolower</a>(*<a class=\"id\" href=\"#s1\">s1</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c2\">c2</a> = <a class=\"id\" href=\"#tolower\">tolower</a>(*<a class=\"id\" href=\"#s2\">s2</a>++);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#c1\">c1</a> == <a class=\"id\" href=\"#c2\">c2</a> && <a class=\"id\" href=\"#c1\">c1</a> != 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c1\">c1</a> - <a class=\"id\" href=\"#c2\">c2</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strcasecmp\">strcasecmp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRNCASECMP\">__HAVE_ARCH_STRNCASECMP</a>", 
"int <a class=\"id\" href=\"#strncasecmp\">strncasecmp</a>(const char *<a class=\"id\" href=\"#s1\">s1</a>, const char *<a class=\"id\" href=\"#s2\">s2</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#c1\">c1</a>, <a class=\"id\" href=\"#c2\">c2</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c1\">c1</a> = <a class=\"id\" href=\"#tolower\">tolower</a>(*<a class=\"id\" href=\"#s1\">s1</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c2\">c2</a> = <a class=\"id\" href=\"#tolower\">tolower</a>(*<a class=\"id\" href=\"#s2\">s2</a>++);", 
"<span class=\"ts\"/>} while ((--<a class=\"id\" href=\"#n\">n</a> &gt; 0) && <a class=\"id\" href=\"#c1\">c1</a> == <a class=\"id\" href=\"#c2\">c2</a> && <a class=\"id\" href=\"#c1\">c1</a> != 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c1\">c1</a> - <a class=\"id\" href=\"#c2\">c2</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strncasecmp\">strncasecmp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRCPY\">__HAVE_ARCH_STRCPY</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strcpy - Copy a %NUL terminated string</span>", 
"<span class=\"comment\"> * @dest: Where to copy the string to</span>", 
"<span class=\"comment\"> * @src: Where to copy the string from</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#strcpy\">strcpy</a>", 
"char *<a class=\"id\" href=\"#strcpy\">strcpy</a>(char *<a class=\"id\" href=\"#dest\">dest</a>, const char *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#dest\">dest</a>;", 
"", 
"<span class=\"ts\"/>while ((*<a class=\"id\" href=\"#dest\">dest</a>++ = *<a class=\"id\" href=\"#src\">src</a>++) != '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing */</span>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strcpy\">strcpy</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRNCPY\">__HAVE_ARCH_STRNCPY</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strncpy - Copy a length-limited, %NUL-terminated string</span>", 
"<span class=\"comment\"> * @dest: Where to copy the string to</span>", 
"<span class=\"comment\"> * @src: Where to copy the string from</span>", 
"<span class=\"comment\"> * @count: The maximum number of bytes to copy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The result is not %NUL-terminated if the source exceeds</span>", 
"<span class=\"comment\"> * @count bytes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In the case where the length of @src is less than  that  of</span>", 
"<span class=\"comment\"> * count, the remainder of @dest will be padded with %NUL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#strncpy\">strncpy</a>(char *<a class=\"id\" href=\"#dest\">dest</a>, const char *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#dest\">dest</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#src\">src</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dest\">dest</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strncpy\">strncpy</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRLCPY\">__HAVE_ARCH_STRLCPY</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strlcpy - Copy a %NUL terminated string into a sized buffer</span>", 
"<span class=\"comment\"> * @dest: Where to copy the string to</span>", 
"<span class=\"comment\"> * @src: Where to copy the string from</span>", 
"<span class=\"comment\"> * @size: size of destination buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Compatible with *BSD: the result is always a valid</span>", 
"<span class=\"comment\"> * NUL-terminated string that fits in the buffer (unless,</span>", 
"<span class=\"comment\"> * of course, the buffer size is zero). It does not pad</span>", 
"<span class=\"comment\"> * out the result like strncpy() does.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#strlcpy\">strlcpy</a>(char *<a class=\"id\" href=\"#dest\">dest</a>, const char *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a> = (<a class=\"id\" href=\"#ret\">ret</a> >= <a class=\"id\" href=\"#size\">size</a>) ? <a class=\"id\" href=\"#size\">size</a> - 1 : <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>[<a class=\"id\" href=\"#len\">len</a>] = '\\0';", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strlcpy\">strlcpy</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRCAT\">__HAVE_ARCH_STRCAT</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strcat - Append one %NUL-terminated string to another</span>", 
"<span class=\"comment\"> * @dest: The string to be appended to</span>", 
"<span class=\"comment\"> * @src: The string to append to it</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#strcat\">strcat</a>", 
"char *<a class=\"id\" href=\"#strcat\">strcat</a>(char *<a class=\"id\" href=\"#dest\">dest</a>, const char *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#dest\">dest</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#dest\">dest</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>++;", 
"<span class=\"ts\"/>while ((*<a class=\"id\" href=\"#dest\">dest</a>++ = *<a class=\"id\" href=\"#src\">src</a>++) != '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strcat\">strcat</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRNCAT\">__HAVE_ARCH_STRNCAT</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strncat - Append a length-limited, %NUL-terminated string to another</span>", 
"<span class=\"comment\"> * @dest: The string to be appended to</span>", 
"<span class=\"comment\"> * @src: The string to append to it</span>", 
"<span class=\"comment\"> * @count: The maximum numbers of bytes to copy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that in contrast to strncpy(), strncat() ensures the result is</span>", 
"<span class=\"comment\"> * terminated.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#strncat\">strncat</a>(char *<a class=\"id\" href=\"#dest\">dest</a>, const char *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#dest\">dest</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (*<a class=\"id\" href=\"#dest\">dest</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((*<a class=\"id\" href=\"#dest\">dest</a>++ = *<a class=\"id\" href=\"#src\">src</a>++) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#count\">count</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dest\">dest</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strncat\">strncat</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRLCAT\">__HAVE_ARCH_STRLCAT</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strlcat - Append a length-limited, %NUL-terminated string to another</span>", 
"<span class=\"comment\"> * @dest: The string to be appended to</span>", 
"<span class=\"comment\"> * @src: The string to append to it</span>", 
"<span class=\"comment\"> * @count: The size of the destination buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#strlcat\">strlcat</a>(char *<a class=\"id\" href=\"#dest\">dest</a>, const char *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#dsize\">dsize</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#dest\">dest</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#dsize\">dsize</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This would be a bug */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dsize\">dsize</a> >= <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a> += <a class=\"id\" href=\"#dsize\">dsize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#dsize\">dsize</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#count\">count</a>-1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>[<a class=\"id\" href=\"#len\">len</a>] = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strlcat\">strlcat</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRCMP\">__HAVE_ARCH_STRCMP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strcmp - Compare two strings</span>", 
"<span class=\"comment\"> * @cs: One string</span>", 
"<span class=\"comment\"> * @ct: Another string</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#strcmp\">strcmp</a>", 
"int <a class=\"id\" href=\"#strcmp\">strcmp</a>(const char *<a class=\"id\" href=\"#cs\">cs</a>, const char *<a class=\"id\" href=\"#ct\">ct</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c1\">c1</a>, <a class=\"id\" href=\"#c2\">c2</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c1\">c1</a> = *<a class=\"id\" href=\"#cs\">cs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c2\">c2</a> = *<a class=\"id\" href=\"#ct\">ct</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c1\">c1</a> != <a class=\"id\" href=\"#c2\">c2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#c1\">c1</a> &lt; <a class=\"id\" href=\"#c2\">c2</a> ? -1 : 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#c1\">c1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strcmp\">strcmp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRNCMP\">__HAVE_ARCH_STRNCMP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strncmp - Compare two length-limited strings</span>", 
"<span class=\"comment\"> * @cs: One string</span>", 
"<span class=\"comment\"> * @ct: Another string</span>", 
"<span class=\"comment\"> * @count: The maximum number of bytes to compare</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#strncmp\">strncmp</a>(const char *<a class=\"id\" href=\"#cs\">cs</a>, const char *<a class=\"id\" href=\"#ct\">ct</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c1\">c1</a>, <a class=\"id\" href=\"#c2\">c2</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c1\">c1</a> = *<a class=\"id\" href=\"#cs\">cs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c2\">c2</a> = *<a class=\"id\" href=\"#ct\">ct</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c1\">c1</a> != <a class=\"id\" href=\"#c2\">c2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#c1\">c1</a> &lt; <a class=\"id\" href=\"#c2\">c2</a> ? -1 : 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#c1\">c1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strncmp\">strncmp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRCHR\">__HAVE_ARCH_STRCHR</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strchr - Find the first occurrence of a character in a string</span>", 
"<span class=\"comment\"> * @s: The string to be searched</span>", 
"<span class=\"comment\"> * @c: The character to search for</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#strchr\">strchr</a>(const char *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>for (; *<a class=\"id\" href=\"#s\">s</a> != (char)<a class=\"id\" href=\"#c\">c</a>; ++<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#s\">s</a> == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#s\">s</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strchr\">strchr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRRCHR\">__HAVE_ARCH_STRRCHR</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strrchr - Find the last occurrence of a character in a string</span>", 
"<span class=\"comment\"> * @s: The string to be searched</span>", 
"<span class=\"comment\"> * @c: The character to search for</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#strrchr\">strrchr</a>(const char *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"       const char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#s\">s</a> + <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"       do {", 
"           if (*<a class=\"id\" href=\"#p\">p</a> == (char)<a class=\"id\" href=\"#c\">c</a>)", 
"               return (char *)<a class=\"id\" href=\"#p\">p</a>;", 
"       } while (--<a class=\"id\" href=\"#p\">p</a> >= <a class=\"id\" href=\"#s\">s</a>);", 
"       return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strrchr\">strrchr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRNCHR\">__HAVE_ARCH_STRNCHR</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strnchr - Find a character in a length limited string</span>", 
"<span class=\"comment\"> * @s: The string to be searched</span>", 
"<span class=\"comment\"> * @count: The number of characters to be searched</span>", 
"<span class=\"comment\"> * @c: The character to search for</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#strnchr\">strnchr</a>(const char *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, int <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#count\">count</a>-- && *<a class=\"id\" href=\"#s\">s</a> != '\\0'; ++<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#s\">s</a> == (char)<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strnchr\">strnchr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skip_spaces - Removes leading whitespace from @str.</span>", 
"<span class=\"comment\"> * @str: The string to be stripped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the first non-whitespace character in @str.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(const char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#isspace\">isspace</a>(*<a class=\"id\" href=\"#str\">str</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#str\">str</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strim - Removes leading and trailing whitespace from @s.</span>", 
"<span class=\"comment\"> * @s: The string to be stripped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that the first trailing whitespace is replaced with a %NUL-terminator</span>", 
"<span class=\"comment\"> * in the given string @s. Returns a pointer to the first non-whitespace</span>", 
"<span class=\"comment\"> * character in @s.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#strim\">strim</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#s\">s</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#s\">s</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#end\">end</a> >= <a class=\"id\" href=\"#s\">s</a> && <a class=\"id\" href=\"#isspace\">isspace</a>(*<a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a>--;", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#end\">end</a> + 1) = '\\0';", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#s\">s</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strim\">strim</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRLEN\">__HAVE_ARCH_STRLEN</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strlen - Find the length of a string</span>", 
"<span class=\"comment\"> * @s: The string to be sized</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#strlen\">strlen</a>(const char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#sc\">sc</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#sc\">sc</a> = <a class=\"id\" href=\"#s\">s</a>; *<a class=\"id\" href=\"#sc\">sc</a> != '\\0'; ++<a class=\"id\" href=\"#sc\">sc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing */</span>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sc\">sc</a> - <a class=\"id\" href=\"#s\">s</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strlen\">strlen</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRNLEN\">__HAVE_ARCH_STRNLEN</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strnlen - Find the length of a length-limited string</span>", 
"<span class=\"comment\"> * @s: The string to be sized</span>", 
"<span class=\"comment\"> * @count: The maximum number of bytes to search</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#strnlen\">strnlen</a>(const char *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#sc\">sc</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#sc\">sc</a> = <a class=\"id\" href=\"#s\">s</a>; <a class=\"id\" href=\"#count\">count</a>-- && *<a class=\"id\" href=\"#sc\">sc</a> != '\\0'; ++<a class=\"id\" href=\"#sc\">sc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing */</span>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sc\">sc</a> - <a class=\"id\" href=\"#s\">s</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strnlen\">strnlen</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRSPN\">__HAVE_ARCH_STRSPN</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strspn - Calculate the length of the initial substring of @s which only contain letters in @accept</span>", 
"<span class=\"comment\"> * @s: The string to be searched</span>", 
"<span class=\"comment\"> * @accept: The string to search for</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#strspn\">strspn</a>(const char *<a class=\"id\" href=\"#s\">s</a>, const char *<a class=\"id\" href=\"#accept\">accept</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#s\">s</a>; *<a class=\"id\" href=\"#p\">p</a> != '\\0'; ++<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#accept\">accept</a>; *<a class=\"id\" href=\"#a\">a</a> != '\\0'; ++<a class=\"id\" href=\"#a\">a</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == *<a class=\"id\" href=\"#a\">a</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#a\">a</a> == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strspn\">strspn</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRCSPN\">__HAVE_ARCH_STRCSPN</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strcspn - Calculate the length of the initial substring of @s which does not contain letters in @reject</span>", 
"<span class=\"comment\"> * @s: The string to be searched</span>", 
"<span class=\"comment\"> * @reject: The string to avoid</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#strcspn\">strcspn</a>(const char *<a class=\"id\" href=\"#s\">s</a>, const char *<a class=\"id\" href=\"#reject\">reject</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#s\">s</a>; *<a class=\"id\" href=\"#p\">p</a> != '\\0'; ++<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#reject\">reject</a>; *<a class=\"id\" href=\"#r\">r</a> != '\\0'; ++<a class=\"id\" href=\"#r\">r</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == *<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strcspn\">strcspn</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRPBRK\">__HAVE_ARCH_STRPBRK</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strpbrk - Find the first occurrence of a set of characters</span>", 
"<span class=\"comment\"> * @cs: The string to be searched</span>", 
"<span class=\"comment\"> * @ct: The characters to search for</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#strpbrk\">strpbrk</a>(const char *<a class=\"id\" href=\"#cs\">cs</a>, const char *<a class=\"id\" href=\"#ct\">ct</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#sc1\">sc1</a>, *<a class=\"id\" href=\"#sc2\">sc2</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#sc1\">sc1</a> = <a class=\"id\" href=\"#cs\">cs</a>; *<a class=\"id\" href=\"#sc1\">sc1</a> != '\\0'; ++<a class=\"id\" href=\"#sc1\">sc1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#sc2\">sc2</a> = <a class=\"id\" href=\"#ct\">ct</a>; *<a class=\"id\" href=\"#sc2\">sc2</a> != '\\0'; ++<a class=\"id\" href=\"#sc2\">sc2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#sc1\">sc1</a> == *<a class=\"id\" href=\"#sc2\">sc2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#sc1\">sc1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strpbrk\">strpbrk</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_STRSEP\">__HAVE_ARCH_STRSEP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strsep - Split a string into tokens</span>", 
"<span class=\"comment\"> * @s: The string to be searched</span>", 
"<span class=\"comment\"> * @ct: The characters to search for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * strsep() updates @s to point after the token, ready for the next call.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns empty tokens, too, behaving exactly like the libc function</span>", 
"<span class=\"comment\"> * of that name. In fact, it was stolen from glibc2 and de-fancy-fied.</span>", 
"<span class=\"comment\"> * Same semantics, slimmer shape. ;)</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#strsep\">strsep</a>(char **<a class=\"id\" href=\"#s\">s</a>, const char *<a class=\"id\" href=\"#ct\">ct</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sbegin\">sbegin</a> = *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbegin\">sbegin</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#strpbrk\">strpbrk</a>(<a class=\"id\" href=\"#sbegin\">sbegin</a>, <a class=\"id\" href=\"#ct\">ct</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#end\">end</a>++ = '\\0';", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sbegin\">sbegin</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strsep\">strsep</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sysfs_streq - return true if strings are equal, modulo trailing newline</span>", 
"<span class=\"comment\"> * @s1: one string</span>", 
"<span class=\"comment\"> * @s2: another string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine returns true iff two strings are equal, treating both</span>", 
"<span class=\"comment\"> * NUL and newline-then-NUL as equivalent string terminations.  It's</span>", 
"<span class=\"comment\"> * geared for use with sysfs input strings, which generally terminate</span>", 
"<span class=\"comment\"> * with newlines but are compared against values without newlines.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#sysfs_streq\">sysfs_streq</a>(const char *<a class=\"id\" href=\"#s1\">s1</a>, const char *<a class=\"id\" href=\"#s2\">s2</a>)", 
"{", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#s1\">s1</a> && *<a class=\"id\" href=\"#s1\">s1</a> == *<a class=\"id\" href=\"#s2\">s2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s1\">s1</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s2\">s2</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#s1\">s1</a> == *<a class=\"id\" href=\"#s2\">s2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#s1\">s1</a> && *<a class=\"id\" href=\"#s2\">s2</a> == '\\n' && !<a class=\"id\" href=\"#s2\">s2</a>[1])", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#s1\">s1</a> == '\\n' && !<a class=\"id\" href=\"#s1\">s1</a>[1] && !*<a class=\"id\" href=\"#s2\">s2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sysfs_streq\">sysfs_streq</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_MEMSET\">__HAVE_ARCH_MEMSET</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * memset - Fill a region of memory with the given value</span>", 
"<span class=\"comment\"> * @s: Pointer to the start of the area.</span>", 
"<span class=\"comment\"> * @c: The byte to fill the area with</span>", 
"<span class=\"comment\"> * @count: The size of the area.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do not use memset() to access IO space, use memset_io() instead.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#memset\">memset</a>(void *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#xs\">xs</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#xs\">xs</a>++ = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#s\">s</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#memset\">memset</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_MEMCPY\">__HAVE_ARCH_MEMCPY</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * memcpy - Copy one area of memory to another</span>", 
"<span class=\"comment\"> * @dest: Where to copy to</span>", 
"<span class=\"comment\"> * @src: Where to copy from</span>", 
"<span class=\"comment\"> * @count: The size of the area.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should not use this function to access IO space, use memcpy_toio()</span>", 
"<span class=\"comment\"> * or memcpy_fromio() instead.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#memcpy\">memcpy</a>(void *<a class=\"id\" href=\"#dest\">dest</a>, const void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#dest\">dest</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#src\">src</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tmp\">tmp</a>++ = *<a class=\"id\" href=\"#s\">s</a>++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dest\">dest</a>;", 
];
xr_frag_insert('l/82/f42f2c5207d05efc82157f2b8d5ce4e21b0d5d.xr', __xr_tmp);
