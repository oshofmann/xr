var __xr_tmp = [
"<span class=\"comment\"> * - this struct should fit entirely inside of one cache line</span>", 
"<span class=\"comment\"> * - this struct shares the supervisor stack pages</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a>;", 
"struct <a class=\"id\" href=\"#exec_domain\">exec_domain</a>;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#thread_info\">thread_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#task\">task</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* main task structure */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#exec_domain\">exec_domain</a><span class=\"ts\"/>*<a class=\"id\" href=\"#exec_domain\">exec_domain</a>;<span class=\"ts\"/><span class=\"comment\">/* execution domain */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* low level flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* thread synchronous flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* current CPU */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_count\">preempt_count</a>;<span class=\"ts\"/><span class=\"comment\">/* 0 =&gt; preemptable,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &lt;0 =&gt; BUG */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr_limit\">addr_limit</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#restart_block\">restart_block</a>    <a class=\"id\" href=\"#restart_block\">restart_block</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sysenter_return\">sysenter_return</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>unsigned long           <a class=\"id\" href=\"#previous_esp\">previous_esp</a>;   <span class=\"comment\">/* ESP of the previous stack in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   case of nested (IRQ) stacks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#supervisor_stack\">supervisor_stack</a>[0];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uaccess_err\">uaccess_err</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_THREAD_INFO\">INIT_THREAD_INFO</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#task\">task</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#tsk\">tsk</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#exec_domain\">exec_domain</a><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#default_exec_domain\">default_exec_domain</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cpu\">cpu</a><span class=\"ts\"/><span class=\"ts\"/>= 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#preempt_count\">preempt_count</a><span class=\"ts\"/>= <a class=\"id\" href=\"#INIT_PREEMPT_COUNT\">INIT_PREEMPT_COUNT</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#addr_limit\">addr_limit</a><span class=\"ts\"/>= <a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#restart_block\">restart_block</a> = {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#do_no_restart_syscall\">do_no_restart_syscall</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>},<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#init_thread_info\">init_thread_info</a><span class=\"ts\"/>(<a class=\"id\" href=\"#init_thread_union\">init_thread_union</a>.<a class=\"id\" href=\"#thread_info\">thread_info</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#init_stack\">init_stack</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#init_thread_union\">init_thread_union</a>.<a class=\"id\" href=\"#stack\">stack</a>)", 
"", 
"#else <span class=\"comment\">/* !__ASSEMBLY__ */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#offsets\">offsets</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * thread information flags</span>", 
"<span class=\"comment\"> * - these are process state flags that various assembly files</span>", 
"<span class=\"comment\"> *   may need to access</span>", 
"<span class=\"comment\"> * - pending work-to-be-done flags are in LSW</span>", 
"<span class=\"comment\"> * - other flags in MSW</span>", 
"<span class=\"comment\"> * Warning: layout of LSW is hardcoded in entry.S</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_SYSCALL_TRACE\">TIF_SYSCALL_TRACE</a><span class=\"ts\"/>0<span class=\"ts\"/><span class=\"comment\">/* syscall trace active */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_NOTIFY_RESUME\">TIF_NOTIFY_RESUME</a><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* callback before returning to user */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a><span class=\"ts\"/><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"comment\">/* signal pending */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_NEED_RESCHED\">TIF_NEED_RESCHED</a><span class=\"ts\"/>3<span class=\"ts\"/><span class=\"comment\">/* rescheduling necessary */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_SINGLESTEP\">TIF_SINGLESTEP</a><span class=\"ts\"/><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"comment\">/* reenable singlestep on user return*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_IRET\">TIF_IRET</a><span class=\"ts\"/><span class=\"ts\"/>5<span class=\"ts\"/><span class=\"comment\">/* force IRET */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_SYSCALL_EMU\">TIF_SYSCALL_EMU</a><span class=\"ts\"/><span class=\"ts\"/>6<span class=\"ts\"/><span class=\"comment\">/* syscall emulation active */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_SYSCALL_AUDIT\">TIF_SYSCALL_AUDIT</a><span class=\"ts\"/>7<span class=\"ts\"/><span class=\"comment\">/* syscall auditing active */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_SECCOMP\">TIF_SECCOMP</a><span class=\"ts\"/><span class=\"ts\"/>8<span class=\"ts\"/><span class=\"comment\">/* secure computing */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_MCE_NOTIFY\">TIF_MCE_NOTIFY</a><span class=\"ts\"/><span class=\"ts\"/>10<span class=\"ts\"/><span class=\"comment\">/* notify userspace of an MCE */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_USER_RETURN_NOTIFY\">TIF_USER_RETURN_NOTIFY</a><span class=\"ts\"/>11<span class=\"ts\"/><span class=\"comment\">/* notify kernel of userspace return */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_NOTSC\">TIF_NOTSC</a><span class=\"ts\"/><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"comment\">/* TSC is not accessible in userland */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a><span class=\"ts\"/><span class=\"ts\"/>17<span class=\"ts\"/><span class=\"comment\">/* 32bit process */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_FORK\">TIF_FORK</a><span class=\"ts\"/><span class=\"ts\"/>18<span class=\"ts\"/><span class=\"comment\">/* ret_from_fork */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a><span class=\"ts\"/><span class=\"ts\"/>20<span class=\"ts\"/><span class=\"comment\">/* is terminating due to OOM killer */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_DEBUG\">TIF_DEBUG</a><span class=\"ts\"/><span class=\"ts\"/>21<span class=\"ts\"/><span class=\"comment\">/* uses debug registers */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_IO_BITMAP\">TIF_IO_BITMAP</a><span class=\"ts\"/><span class=\"ts\"/>22<span class=\"ts\"/><span class=\"comment\">/* uses I/O bitmap */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_FREEZE\">TIF_FREEZE</a><span class=\"ts\"/><span class=\"ts\"/>23<span class=\"ts\"/><span class=\"comment\">/* is freezing for suspend */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_FORCED_TF\">TIF_FORCED_TF</a><span class=\"ts\"/><span class=\"ts\"/>24<span class=\"ts\"/><span class=\"comment\">/* true if TF in eflags artificially */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a><span class=\"ts\"/><span class=\"ts\"/>25<span class=\"ts\"/><span class=\"comment\">/* set when we want DEBUGCTLMSR_BTF */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_LAZY_MMU_UPDATES\">TIF_LAZY_MMU_UPDATES</a><span class=\"ts\"/>27<span class=\"ts\"/><span class=\"comment\">/* task is updating the mmu lazily */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIF_SYSCALL_TRACEPOINT\">TIF_SYSCALL_TRACEPOINT</a><span class=\"ts\"/>28<span class=\"ts\"/><span class=\"comment\">/* syscall tracepoint instrumentation */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_SYSCALL_TRACE\">_TIF_SYSCALL_TRACE</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_SYSCALL_TRACE\">TIF_SYSCALL_TRACE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_NOTIFY_RESUME\">_TIF_NOTIFY_RESUME</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_NOTIFY_RESUME\">TIF_NOTIFY_RESUME</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_SIGPENDING\">_TIF_SIGPENDING</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_SINGLESTEP\">_TIF_SINGLESTEP</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_SINGLESTEP\">TIF_SINGLESTEP</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_NEED_RESCHED\">_TIF_NEED_RESCHED</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_NEED_RESCHED\">TIF_NEED_RESCHED</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_IRET\">_TIF_IRET</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_IRET\">TIF_IRET</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_SYSCALL_EMU\">_TIF_SYSCALL_EMU</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_SYSCALL_EMU\">TIF_SYSCALL_EMU</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_SYSCALL_AUDIT\">_TIF_SYSCALL_AUDIT</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_SYSCALL_AUDIT\">TIF_SYSCALL_AUDIT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_SECCOMP\">_TIF_SECCOMP</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_SECCOMP\">TIF_SECCOMP</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_MCE_NOTIFY\">_TIF_MCE_NOTIFY</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_MCE_NOTIFY\">TIF_MCE_NOTIFY</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_USER_RETURN_NOTIFY\">_TIF_USER_RETURN_NOTIFY</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_USER_RETURN_NOTIFY\">TIF_USER_RETURN_NOTIFY</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_NOTSC\">_TIF_NOTSC</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_NOTSC\">TIF_NOTSC</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_IA32\">_TIF_IA32</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_FORK\">_TIF_FORK</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_FORK\">TIF_FORK</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_DEBUG\">_TIF_DEBUG</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_DEBUG\">TIF_DEBUG</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_IO_BITMAP\">_TIF_IO_BITMAP</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_IO_BITMAP\">TIF_IO_BITMAP</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_FREEZE\">_TIF_FREEZE</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_FREEZE\">TIF_FREEZE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_FORCED_TF\">_TIF_FORCED_TF</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_FORCED_TF\">TIF_FORCED_TF</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_BLOCKSTEP\">_TIF_BLOCKSTEP</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_LAZY_MMU_UPDATES\">_TIF_LAZY_MMU_UPDATES</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_LAZY_MMU_UPDATES\">TIF_LAZY_MMU_UPDATES</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_SYSCALL_TRACEPOINT\">_TIF_SYSCALL_TRACEPOINT</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#TIF_SYSCALL_TRACEPOINT\">TIF_SYSCALL_TRACEPOINT</a>)", 
"", 
"<span class=\"comment\">/* work to do in syscall_trace_enter() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_WORK_SYSCALL_ENTRY\">_TIF_WORK_SYSCALL_ENTRY</a><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#_TIF_SYSCALL_TRACE\">_TIF_SYSCALL_TRACE</a> | <a class=\"id\" href=\"#_TIF_SYSCALL_EMU\">_TIF_SYSCALL_EMU</a> | <a class=\"id\" href=\"#_TIF_SYSCALL_AUDIT\">_TIF_SYSCALL_AUDIT</a> |<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#_TIF_SECCOMP\">_TIF_SECCOMP</a> | <a class=\"id\" href=\"#_TIF_SINGLESTEP\">_TIF_SINGLESTEP</a> | <a class=\"id\" href=\"#_TIF_SYSCALL_TRACEPOINT\">_TIF_SYSCALL_TRACEPOINT</a>)", 
"", 
"<span class=\"comment\">/* work to do in syscall_trace_leave() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_WORK_SYSCALL_EXIT\">_TIF_WORK_SYSCALL_EXIT</a><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#_TIF_SYSCALL_TRACE\">_TIF_SYSCALL_TRACE</a> | <a class=\"id\" href=\"#_TIF_SYSCALL_AUDIT\">_TIF_SYSCALL_AUDIT</a> | <a class=\"id\" href=\"#_TIF_SINGLESTEP\">_TIF_SINGLESTEP</a> |<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#_TIF_SYSCALL_TRACEPOINT\">_TIF_SYSCALL_TRACEPOINT</a>)", 
"", 
"<span class=\"comment\">/* work to do on interrupt/exception return */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_WORK_MASK\">_TIF_WORK_MASK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(0x0000FFFF &amp;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ~(<a class=\"id\" href=\"#_TIF_SYSCALL_TRACE\">_TIF_SYSCALL_TRACE</a>|<a class=\"id\" href=\"#_TIF_SYSCALL_AUDIT\">_TIF_SYSCALL_AUDIT</a>|<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>   <a class=\"id\" href=\"#_TIF_SINGLESTEP\">_TIF_SINGLESTEP</a>|<a class=\"id\" href=\"#_TIF_SECCOMP\">_TIF_SECCOMP</a>|<a class=\"id\" href=\"#_TIF_SYSCALL_EMU\">_TIF_SYSCALL_EMU</a>))", 
"", 
"<span class=\"comment\">/* work to do on any return to user space */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_ALLWORK_MASK\">_TIF_ALLWORK_MASK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((0x0000FFFF &amp; ~<a class=\"id\" href=\"#_TIF_SECCOMP\">_TIF_SECCOMP</a>) | <a class=\"id\" href=\"#_TIF_SYSCALL_TRACEPOINT\">_TIF_SYSCALL_TRACEPOINT</a>)", 
"", 
"<span class=\"comment\">/* Only used for 64 bit */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_DO_NOTIFY_MASK\">_TIF_DO_NOTIFY_MASK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#_TIF_SIGPENDING\">_TIF_SIGPENDING</a> | <a class=\"id\" href=\"#_TIF_MCE_NOTIFY\">_TIF_MCE_NOTIFY</a> | <a class=\"id\" href=\"#_TIF_NOTIFY_RESUME\">_TIF_NOTIFY_RESUME</a> |<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#_TIF_USER_RETURN_NOTIFY\">_TIF_USER_RETURN_NOTIFY</a>)", 
"", 
"<span class=\"comment\">/* flags to check in __switch_to() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_WORK_CTXSW\">_TIF_WORK_CTXSW</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#_TIF_IO_BITMAP\">_TIF_IO_BITMAP</a>|<a class=\"id\" href=\"#_TIF_NOTSC\">_TIF_NOTSC</a>|<a class=\"id\" href=\"#_TIF_BLOCKSTEP\">_TIF_BLOCKSTEP</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_WORK_CTXSW_PREV\">_TIF_WORK_CTXSW_PREV</a> (<a class=\"id\" href=\"#_TIF_WORK_CTXSW\">_TIF_WORK_CTXSW</a>|<a class=\"id\" href=\"#_TIF_USER_RETURN_NOTIFY\">_TIF_USER_RETURN_NOTIFY</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_TIF_WORK_CTXSW_NEXT\">_TIF_WORK_CTXSW_NEXT</a> (<a class=\"id\" href=\"#_TIF_WORK_CTXSW\">_TIF_WORK_CTXSW</a>|<a class=\"id\" href=\"#_TIF_DEBUG\">_TIF_DEBUG</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a><span class=\"ts\"/><span class=\"ts\"/>0x10000000", 
"", 
"<span class=\"comment\">/* thread information allocation */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_STACK_USAGE\">CONFIG_DEBUG_STACK_USAGE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#THREAD_FLAGS\">THREAD_FLAGS</a> (<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_NOTRACK\">__GFP_NOTRACK</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#THREAD_FLAGS\">THREAD_FLAGS</a> (<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_NOTRACK\">__GFP_NOTRACK</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HAVE_ARCH_THREAD_INFO_ALLOCATOR\">__HAVE_ARCH_THREAD_INFO_ALLOCATOR</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alloc_thread_info\">alloc_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#THREAD_FLAGS\">THREAD_FLAGS</a>, <a class=\"id\" href=\"#THREAD_ORDER\">THREAD_ORDER</a>))", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_WARN\">STACK_WARN</a><span class=\"ts\"/>(<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>/8)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * macros/functions for gaining access to the thread information structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * preempt_count needs to be 1 initially, until the scheduler is functional.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"", 
"", 
"<span class=\"comment\">/* how to get the current stack pointer from C */</span>", 
"register unsigned long <a class=\"id\" href=\"#current_stack_pointer\">current_stack_pointer</a> <a class=\"id\" href=\"#asm\">asm</a>(\"esp\") <a class=\"id\" href=\"#__used\">__used</a>;", 
"", 
"<span class=\"comment\">/* how to get the thread information struct from C */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>(void)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current_stack_pointer\">current_stack_pointer</a> &amp; ~(<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a> - 1));", 
"}", 
"", 
"#else <span class=\"comment\">/* !__ASSEMBLY__ */</span>", 
"", 
"<span class=\"comment\">/* how to get the thread information struct from ASM */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GET_THREAD_INFO\">GET_THREAD_INFO</a>(<a class=\"id\" href=\"#reg\">reg</a>)<span class=\"ts\"/> \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#movl\">movl</a> $-<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>, <a class=\"id\" href=\"#reg\">reg</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#andl\">andl</a> %<a class=\"id\" href=\"#esp\">esp</a>, <a class=\"id\" href=\"#reg\">reg</a>", 
"", 
"<span class=\"comment\">/* use this one if reg already contains %esp */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GET_THREAD_INFO_WITH_ESP\">GET_THREAD_INFO_WITH_ESP</a>(<a class=\"id\" href=\"#reg\">reg</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#andl\">andl</a> $-<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>, <a class=\"id\" href=\"#reg\">reg</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#else <span class=\"comment\">/* X86_32 */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KERNEL_STACK_OFFSET\">KERNEL_STACK_OFFSET</a> (5*8)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * macros/functions for gaining access to the thread information structure</span>", 
"<span class=\"comment\"> * preempt_count needs to be 1 initially, until the scheduler is functional.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU\">DECLARE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#kernel_stack\">kernel_stack</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a> = (void *)(<a class=\"id\" href=\"#percpu_read_stable\">percpu_read_stable</a>(<a class=\"id\" href=\"#kernel_stack\">kernel_stack</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#KERNEL_STACK_OFFSET\">KERNEL_STACK_OFFSET</a> - <a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ti\">ti</a>;", 
"}", 
"", 
"#else <span class=\"comment\">/* !__ASSEMBLY__ */</span>", 
"", 
"<span class=\"comment\">/* how to get the thread information struct from ASM */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GET_THREAD_INFO\">GET_THREAD_INFO</a>(<a class=\"id\" href=\"#reg\">reg</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#movq\">movq</a> <a class=\"id\" href=\"#PER_CPU_VAR\">PER_CPU_VAR</a>(<a class=\"id\" href=\"#kernel_stack\">kernel_stack</a>),<a class=\"id\" href=\"#reg\">reg</a> ; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#subq\">subq</a> $(<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>-<a class=\"id\" href=\"#KERNEL_STACK_OFFSET\">KERNEL_STACK_OFFSET</a>),<a class=\"id\" href=\"#reg\">reg</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !X86_32 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Thread-synchronous status.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is different from the flags in that nobody else</span>", 
"<span class=\"comment\"> * ever touches our thread-synchronous status, so we don't</span>", 
"<span class=\"comment\"> * have to worry about atomic accesses.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TS_USEDFPU\">TS_USEDFPU</a><span class=\"ts\"/><span class=\"ts\"/>0x0001<span class=\"ts\"/><span class=\"comment\">/* FPU was used by this task</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   this quantum (SMP) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TS_COMPAT\">TS_COMPAT</a><span class=\"ts\"/><span class=\"ts\"/>0x0002<span class=\"ts\"/><span class=\"comment\">/* 32bit syscall active (64BIT)*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a><span class=\"ts\"/><span class=\"ts\"/>0x0004<span class=\"ts\"/><span class=\"comment\">/* idle task polling need_resched,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   skip sending interrupt */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TS_RESTORE_SIGMASK\">TS_RESTORE_SIGMASK</a><span class=\"ts\"/>0x0008<span class=\"ts\"/><span class=\"comment\">/* restore signal mask in do_signal() */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tsk_is_polling\">tsk_is_polling</a>(<a class=\"id\" href=\"#t\">t</a>) (<a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#TS_POLLING\">TS_POLLING</a>)", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_SET_RESTORE_SIGMASK\">HAVE_SET_RESTORE_SIGMASK</a><span class=\"ts\"/>1", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_restore_sigmask\">set_restore_sigmask</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#TS_RESTORE_SIGMASK\">TS_RESTORE_SIGMASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>, (unsigned long *)&amp;<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* !__ASSEMBLY__ */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"extern void <a class=\"id\" href=\"#arch_task_cache_init\">arch_task_cache_init</a>(void);", 
"extern void <a class=\"id\" href=\"#free_thread_info\">free_thread_info</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a>);", 
"extern int <a class=\"id\" href=\"#arch_dup_task_struct\">arch_dup_task_struct</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#src\">src</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_task_cache_init\">arch_task_cache_init</a> <a class=\"id\" href=\"#arch_task_cache_init\">arch_task_cache_init</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_THREAD_INFO_H */</span>", 
];
xr_frag_insert('l/83/582e701ff77a447d5a88ba0efaa4d7330f30e7.xr', __xr_tmp);
