var __xr_tmp = [
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine if the huge page at addr within the vma has an associated</span>", 
"<span class=\"comment\"> * reservation.  Where it does not we will need to logically increase</span>", 
"<span class=\"comment\"> * reservation and actually increase quota before an allocation can occur.</span>", 
"<span class=\"comment\"> * Where any new reservation would be required the reservation change is</span>", 
"<span class=\"comment\"> * prepared, but not committed.  Once the page has been quota'd allocated</span>", 
"<span class=\"comment\"> * an instantiated the change should be committed via vma_commit_reservation.</span>", 
"<span class=\"comment\"> * No action is required on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#vma_needs_reservation\">vma_needs_reservation</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#vma_hugecache_offset\">vma_hugecache_offset</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#region_chg\">region_chg</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#private_list\">private_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#idx\">idx</a> + 1);", 
"", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#is_vma_resv_set\">is_vma_resv_set</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#HPAGE_RESV_OWNER\">HPAGE_RESV_OWNER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>} else  {", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#vma_hugecache_offset\">vma_hugecache_offset</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resv_map\">resv_map</a> *<a class=\"id\" href=\"#reservations\">reservations</a> = <a class=\"id\" href=\"#vma_resv_map\">vma_resv_map</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#region_chg\">region_chg</a>(&amp;<a class=\"id\" href=\"#reservations\">reservations</a>-><a class=\"id\" href=\"#regions\">regions</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#idx\">idx</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"static void <a class=\"id\" href=\"#vma_commit_reservation\">vma_commit_reservation</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#vma_hugecache_offset\">vma_hugecache_offset</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region_add\">region_add</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#private_list\">private_list</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#idx\">idx</a> + 1);", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#is_vma_resv_set\">is_vma_resv_set</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#HPAGE_RESV_OWNER\">HPAGE_RESV_OWNER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#vma_hugecache_offset\">vma_hugecache_offset</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resv_map\">resv_map</a> *<a class=\"id\" href=\"#reservations\">reservations</a> = <a class=\"id\" href=\"#vma_resv_map\">vma_resv_map</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mark this page used in the map. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region_add\">region_add</a>(&amp;<a class=\"id\" href=\"#reservations\">reservations</a>-><a class=\"id\" href=\"#regions\">regions</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#idx\">idx</a> + 1);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#alloc_huge_page\">alloc_huge_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#avoid_reserve\">avoid_reserve</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#chg\">chg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Processes that did not create the mapping will have no reserves and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will not have accounted against quota. Check that the quota can be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * made before satisfying the allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MAP_NORESERVE mappings may also need pages and quota allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if no reserve mapping overlaps.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chg\">chg</a> = <a class=\"id\" href=\"#vma_needs_reservation\">vma_needs_reservation</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chg\">chg</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#chg\">chg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chg\">chg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hugetlb_get_quota\">hugetlb_get_quota</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#chg\">chg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#dequeue_huge_page_vma\">dequeue_huge_page_vma</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#avoid_reserve\">avoid_reserve</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_buddy_huge_page\">alloc_buddy_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_put_quota\">hugetlb_put_quota</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#chg\">chg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_refcounted\">set_page_refcounted</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, (unsigned long) <a class=\"id\" href=\"#mapping\">mapping</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_commit_reservation\">vma_commit_reservation</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#alloc_bootmem_huge_page\">alloc_bootmem_huge_page</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#huge_bootmem_page\">huge_bootmem_page</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_nodes\">nr_nodes</a> = <a class=\"id\" href=\"#nodes_weight\">nodes_weight</a>(<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_nodes\">nr_nodes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__alloc_bootmem_node_nopanic\">__alloc_bootmem_node_nopanic</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#hstate_next_node_to_alloc\">hstate_next_node_to_alloc</a>(<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>])),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>), <a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>), 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Use the beginning of the huge page to store the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * huge_bootmem_page struct (until gather_bootmem</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * puts them into the mem_map).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_nodes\">nr_nodes</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned long)<a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#m\">m</a>) &amp; (<a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>) - 1));", 
"<span class=\"ts\"/><span class=\"comment\">/* Put them into a private list first because mem_map is not up yet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#huge_boot_pages\">huge_boot_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#hstate\">hstate</a> = <a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#prep_compound_huge_page\">prep_compound_huge_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#order\">order</a> &gt; (<a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a> - 1)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prep_compound_gigantic_page\">prep_compound_gigantic_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prep_compound_page\">prep_compound_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Put bootmem huge pages into the standard lists after mem_map is up */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#gather_bootmem_prealloc\">gather_bootmem_prealloc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#huge_bootmem_page\">huge_bootmem_page</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#huge_boot_pages\">huge_boot_pages</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#hstate\">hstate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ClearPageReserved\">__ClearPageReserved</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) != 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prep_compound_huge_page\">prep_compound_huge_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prep_new_huge_page\">prep_new_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hugetlb_hstate_alloc_pages\">hugetlb_hstate_alloc_pages</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#max_huge_pages\">max_huge_pages</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_bootmem_huge_page\">alloc_bootmem_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#alloc_fresh_huge_page\">alloc_fresh_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#max_huge_pages\">max_huge_pages</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hugetlb_init_hstates\">hugetlb_init_hstates</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_hstate\">for_each_hstate</a>(<a class=\"id\" href=\"#h\">h</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* oversize hugepages were init'ed in early boot */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_hstate_alloc_pages\">hugetlb_hstate_alloc_pages</a>(<a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static char * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#memfmt\">memfmt</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> >= (1UL << 30))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu GB\", <a class=\"id\" href=\"#n\">n</a> >> 30);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#n\">n</a> >= (1UL << 20))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu MB\", <a class=\"id\" href=\"#n\">n</a> >> 20);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu KB\", <a class=\"id\" href=\"#n\">n</a> >> 10);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#report_hugepages\">report_hugepages</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_hstate\">for_each_hstate</a>(<a class=\"id\" href=\"#h\">h</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[32];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"HugeTLB registered %s page size, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"pre-allocated %ld pages\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memfmt\">memfmt</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"static void <a class=\"id\" href=\"#try_to_free_low\">try_to_free_low</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#i\">i</a>, *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#freel\">freel</a> = &amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#hugepage_freelists\">hugepage_freelists</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#freel\">freel</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> >= <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_and_free_page\">update_and_free_page</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages_node\">free_huge_pages_node</a>[<a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>)]--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#try_to_free_low\">try_to_free_low</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Increment or decrement surplus_huge_pages.  Keep node-specific counters</span>", 
"<span class=\"comment\"> * balanced by operating on them in a round-robin fashion.</span>", 
"<span class=\"comment\"> * Returns 1 if an adjustment was made.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#adjust_pool_surplus\">adjust_pool_surplus</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start_nid\">start_nid</a>, <a class=\"id\" href=\"#next_nid\">next_nid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#delta\">delta</a> != -1 && <a class=\"id\" href=\"#delta\">delta</a> != 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_nid\">start_nid</a> = <a class=\"id\" href=\"#hstate_next_node_to_alloc\">hstate_next_node_to_alloc</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_nid\">start_nid</a> = <a class=\"id\" href=\"#hstate_next_node_to_free\">hstate_next_node_to_free</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_nid\">next_nid</a> = <a class=\"id\" href=\"#start_nid\">start_nid</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#next_nid\">next_nid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; 0)  {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * To shrink on this node, there must be a surplus page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages_node\">surplus_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_nid\">next_nid</a> = <a class=\"id\" href=\"#hstate_next_node_to_alloc\">hstate_next_node_to_alloc</a>(<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Surplus cannot exceed the total number of pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages_node\">surplus_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>] >=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages_node\">nr_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_nid\">next_nid</a> = <a class=\"id\" href=\"#hstate_next_node_to_free\">hstate_next_node_to_free</a>(<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages_node\">surplus_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>] += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#next_nid\">next_nid</a> != <a class=\"id\" href=\"#start_nid\">start_nid</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#persistent_huge_pages\">persistent_huge_pages</a>(<a class=\"id\" href=\"#h\">h</a>) (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a> - <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a>)", 
"static unsigned long <a class=\"id\" href=\"#set_max_huge_pages\">set_max_huge_pages</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#min_count\">min_count</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#max_huge_pages\">max_huge_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Increase the pool size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First take pages out of surplus state.  Then make up the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * remaining difference by allocating fresh huge pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We might race with alloc_buddy_huge_page() here and be unable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to convert a surplus huge page to a normal huge page. That is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not critical, though, it just means the overall size of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pool might be one hugepage larger than it needs to be, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * within all the constraints specified by the sysctls.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a> && <a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#persistent_huge_pages\">persistent_huge_pages</a>(<a class=\"id\" href=\"#h\">h</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#adjust_pool_surplus\">adjust_pool_surplus</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>, -1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#persistent_huge_pages\">persistent_huge_pages</a>(<a class=\"id\" href=\"#h\">h</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this allocation races such that we no longer need the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * page, free_huge_page will handle it by freeing the page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and reducing the surplus.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#alloc_fresh_huge_page\">alloc_fresh_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Bail for signals. Probably ctrl-c from user */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Decrease the pool size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First return free pages to the buddy allocator (being careful</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to keep enough around to satisfy reservations).  Then place</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages into surplus state as needed so the pool will shrink</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the desired size as pages become free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * By placing pages into the surplus state independent of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * overcommit value, we are allowing the surplus pool size to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exceed overcommit. There are few sane options here. Since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * alloc_buddy_huge_page() is checking the global counter,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * though, we'll note that we're not allowed to exceed surplus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and won't grow the pool anywhere else. Not until one of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sysctls are changed, or the surplus pages go out of use.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_count\">min_count</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a> + <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a> - <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_count\">min_count</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#min_count\">min_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#try_to_free_low\">try_to_free_low</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#min_count\">min_count</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#min_count\">min_count</a> &lt; <a class=\"id\" href=\"#persistent_huge_pages\">persistent_huge_pages</a>(<a class=\"id\" href=\"#h\">h</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#free_pool_huge_page\">free_pool_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#persistent_huge_pages\">persistent_huge_pages</a>(<a class=\"id\" href=\"#h\">h</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#adjust_pool_surplus\">adjust_pool_surplus</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#persistent_huge_pages\">persistent_huge_pages</a>(<a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HSTATE_ATTR_RO\">HSTATE_ATTR_RO</a>(<a class=\"id\" href=\"#_name\">_name</a>) \\", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> <a class=\"id\" href=\"#_name\">_name</a>##<a class=\"id\" href=\"#_attr\">_attr</a> = <a class=\"id\" href=\"#__ATTR_RO\">__ATTR_RO</a>(<a class=\"id\" href=\"#_name\">_name</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HSTATE_ATTR\">HSTATE_ATTR</a>(<a class=\"id\" href=\"#_name\">_name</a>) \\", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> <a class=\"id\" href=\"#_name\">_name</a>##<a class=\"id\" href=\"#_attr\">_attr</a> = \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#_name\">_name</a>, 0644, <a class=\"id\" href=\"#_name\">_name</a>##<a class=\"id\" href=\"#_show\">_show</a>, <a class=\"id\" href=\"#_name\">_name</a>##<a class=\"id\" href=\"#_store\">_store</a>)", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a>;", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#HUGE_MAX_HSTATE\">HUGE_MAX_HSTATE</a>];", 
"", 
"static struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#kobj_to_node_hstate\">kobj_to_node_hstate</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, int *<a class=\"id\" href=\"#nidp\">nidp</a>);", 
"", 
"static struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#kobj_to_hstate\">kobj_to_hstate</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, int *<a class=\"id\" href=\"#nidp\">nidp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HUGE_MAX_HSTATE\">HUGE_MAX_HSTATE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#kobj\">kobj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nidp\">nidp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nidp\">nidp</a> = <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#hstates\">hstates</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kobj_to_node_hstate\">kobj_to_node_hstate</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#nidp\">nidp</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#nr_hugepages_show_common\">nr_hugepages_show_common</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#kobj_to_hstate\">kobj_to_hstate</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nid\">nid</a> == <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages_node\">nr_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu\\n\", <a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a>);", 
"}", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#nr_hugepages_store_common\">nr_hugepages_store_common</a>(<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#obey_mempolicy\">obey_mempolicy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_ALLOC\">NODEMASK_ALLOC</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_NORETRY\">__GFP_NORETRY</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, 10, &amp;<a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#kobj_to_hstate\">kobj_to_hstate</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nid\">nid</a> == <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * global hstate attribute</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#obey_mempolicy\">obey_mempolicy</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_nodemask_of_mempolicy\">init_nodemask_of_mempolicy</a>(<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_FREE\">NODEMASK_FREE</a>(<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a> = &amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * per node hstate attribute: adjust count to global,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but restrict alloc/free to the specified node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a> - <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages_node\">nr_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_nodemask_of_node\">init_nodemask_of_node</a>(<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a> = &amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#max_huge_pages\">max_huge_pages</a> = <a class=\"id\" href=\"#set_max_huge_pages\">set_max_huge_pages</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a> != &amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_FREE\">NODEMASK_FREE</a>(<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#nr_hugepages_show\">nr_hugepages_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_hugepages_show_common\">nr_hugepages_show_common</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#nr_hugepages_store\">nr_hugepages_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/>       struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_hugepages_store_common\">nr_hugepages_store_common</a>(<a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"<a class=\"id\" href=\"#HSTATE_ATTR\">HSTATE_ATTR</a>(<a class=\"id\" href=\"#nr_hugepages\">nr_hugepages</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * hstate attribute for optionally mempolicy-based constraint on persistent</span>", 
"<span class=\"comment\"> * huge page alloc/free.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#nr_hugepages_mempolicy_show\">nr_hugepages_mempolicy_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_hugepages_show_common\">nr_hugepages_show_common</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#nr_hugepages_mempolicy_store\">nr_hugepages_mempolicy_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/>       struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_hugepages_store_common\">nr_hugepages_store_common</a>(<a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"<a class=\"id\" href=\"#HSTATE_ATTR\">HSTATE_ATTR</a>(<a class=\"id\" href=\"#nr_hugepages_mempolicy\">nr_hugepages_mempolicy</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#nr_overcommit_hugepages_show\">nr_overcommit_hugepages_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#kobj_to_hstate\">kobj_to_hstate</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu\\n\", <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_overcommit_huge_pages\">nr_overcommit_huge_pages</a>);", 
"}", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#nr_overcommit_hugepages_store\">nr_overcommit_hugepages_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#input\">input</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#kobj_to_hstate\">kobj_to_hstate</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, 10, &amp;<a class=\"id\" href=\"#input\">input</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_overcommit_huge_pages\">nr_overcommit_huge_pages</a> = <a class=\"id\" href=\"#input\">input</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"<a class=\"id\" href=\"#HSTATE_ATTR\">HSTATE_ATTR</a>(<a class=\"id\" href=\"#nr_overcommit_hugepages\">nr_overcommit_hugepages</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#free_hugepages_show\">free_hugepages_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#kobj_to_hstate\">kobj_to_hstate</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nid\">nid</a> == <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages_node\">free_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu\\n\", <a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a>);", 
"}", 
"<a class=\"id\" href=\"#HSTATE_ATTR_RO\">HSTATE_ATTR_RO</a>(<a class=\"id\" href=\"#free_hugepages\">free_hugepages</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#resv_hugepages_show\">resv_hugepages_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#kobj_to_hstate\">kobj_to_hstate</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu\\n\", <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a>);", 
"}", 
"<a class=\"id\" href=\"#HSTATE_ATTR_RO\">HSTATE_ATTR_RO</a>(<a class=\"id\" href=\"#resv_hugepages\">resv_hugepages</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#surplus_hugepages_show\">surplus_hugepages_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#kobj_to_hstate\">kobj_to_hstate</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nid\">nid</a> == <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages_node\">surplus_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu\\n\", <a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a>);", 
"}", 
"<a class=\"id\" href=\"#HSTATE_ATTR_RO\">HSTATE_ATTR_RO</a>(<a class=\"id\" href=\"#surplus_hugepages\">surplus_hugepages</a>);", 
"", 
"static struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#hstate_attrs\">hstate_attrs</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#nr_hugepages_attr\">nr_hugepages_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#nr_overcommit_hugepages_attr\">nr_overcommit_hugepages_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#free_hugepages_attr\">free_hugepages_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#resv_hugepages_attr\">resv_hugepages_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#surplus_hugepages_attr\">surplus_hugepages_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#nr_hugepages_mempolicy_attr\">nr_hugepages_mempolicy_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#hstate_attr_group\">hstate_attr_group</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attrs\">attrs</a> = <a class=\"id\" href=\"#hstate_attrs\">hstate_attrs</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#hugetlb_sysfs_add_hstate\">hugetlb_sysfs_add_hstate</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#kobject\">kobject</a> **<a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> *<a class=\"id\" href=\"#hstate_attr_group\">hstate_attr_group</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hi\">hi</a> = <a class=\"id\" href=\"#h\">h</a> - <a class=\"id\" href=\"#hstates\">hstates</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#hi\">hi</a>] = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#hi\">hi</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#sysfs_create_group\">sysfs_create_group</a>(<a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#hi\">hi</a>], <a class=\"id\" href=\"#hstate_attr_group\">hstate_attr_group</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#hi\">hi</a>]);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hugetlb_sysfs_init\">hugetlb_sysfs_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(\"hugepages\", <a class=\"id\" href=\"#mm_kobj\">mm_kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_hstate\">for_each_hstate</a>(<a class=\"id\" href=\"#h\">h</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#hugetlb_sysfs_add_hstate\">hugetlb_sysfs_add_hstate</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>, &amp;<a class=\"id\" href=\"#hstate_attr_group\">hstate_attr_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Hugetlb: Unable to add hstate %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * node_hstate/s - associate per node hstate attributes, via their kobjects,</span>", 
"<span class=\"comment\"> * with node sysdevs in node_devices[] using a parallel array.  The array</span>", 
"<span class=\"comment\"> * index of a node sysdev or _hstate == node id.</span>", 
"<span class=\"comment\"> * This is here to avoid any static dependency of the node sysdev driver, in</span>", 
"<span class=\"comment\"> * the base kernel, on the hugetlb module.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#node_hstate\">node_hstate</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#HUGE_MAX_HSTATE\">HUGE_MAX_HSTATE</a>];", 
"};", 
"struct <a class=\"id\" href=\"#node_hstate\">node_hstate</a> <a class=\"id\" href=\"#node_hstates\">node_hstates</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A subset of global hstate attributes for node sysdevs</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#per_node_hstate_attrs\">per_node_hstate_attrs</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#nr_hugepages_attr\">nr_hugepages_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#free_hugepages_attr\">free_hugepages_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#surplus_hugepages_attr\">surplus_hugepages_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#per_node_hstate_attr_group\">per_node_hstate_attr_group</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attrs\">attrs</a> = <a class=\"id\" href=\"#per_node_hstate_attrs\">per_node_hstate_attrs</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kobj_to_node_hstate - lookup global hstate for node sysdev hstate attr kobj.</span>", 
"<span class=\"comment\"> * Returns node id via non-NULL nidp.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#kobj_to_node_hstate\">kobj_to_node_hstate</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, int *<a class=\"id\" href=\"#nidp\">nidp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#nid\">nid</a> = 0; <a class=\"id\" href=\"#nid\">nid</a> &lt; <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>; <a class=\"id\" href=\"#nid\">nid</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#node_hstate\">node_hstate</a> *<a class=\"id\" href=\"#nhs\">nhs</a> = &amp;<a class=\"id\" href=\"#node_hstates\">node_hstates</a>[<a class=\"id\" href=\"#nid\">nid</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HUGE_MAX_HSTATE\">HUGE_MAX_HSTATE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#kobj\">kobj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nidp\">nidp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nidp\">nidp</a> = <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#hstates\">hstates</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unregister hstate attributes from a single node sysdev.</span>", 
"<span class=\"comment\"> * No-op if no hstate attributes attached.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#hugetlb_unregister_node\">hugetlb_unregister_node</a>(struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#node_hstate\">node_hstate</a> *<a class=\"id\" href=\"#nhs\">nhs</a> = &amp;<a class=\"id\" href=\"#node_hstates\">node_hstates</a>[<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#id\">id</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no hstate attributes */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_hstate\">for_each_hstate</a>(<a class=\"id\" href=\"#h\">h</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#h\">h</a> - <a class=\"id\" href=\"#hstates\">hstates</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#h\">h</a> - <a class=\"id\" href=\"#hstates\">hstates</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#h\">h</a> - <a class=\"id\" href=\"#hstates\">hstates</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * hugetlb module exit:  unregister hstate attributes from node sysdevs</span>", 
"<span class=\"comment\"> * that have them.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#hugetlb_unregister_all_nodes\">hugetlb_unregister_all_nodes</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disable node sysdev registrations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_hugetlbfs_with_node\">register_hugetlbfs_with_node</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * remove hstate attributes from any nodes that have them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#nid\">nid</a> = 0; <a class=\"id\" href=\"#nid\">nid</a> &lt; <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>; <a class=\"id\" href=\"#nid\">nid</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_unregister_node\">hugetlb_unregister_node</a>(&amp;<a class=\"id\" href=\"#node_devices\">node_devices</a>[<a class=\"id\" href=\"#nid\">nid</a>]);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Register hstate attributes for a single node sysdev.</span>", 
"<span class=\"comment\"> * No-op if attributes already registered.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#hugetlb_register_node\">hugetlb_register_node</a>(struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#node_hstate\">node_hstate</a> *<a class=\"id\" href=\"#nhs\">nhs</a> = &amp;<a class=\"id\" href=\"#node_hstates\">node_hstates</a>[<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#id\">id</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* already allocated */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(\"hugepages\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_hstate\">for_each_hstate</a>(<a class=\"id\" href=\"#h\">h</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#hugetlb_sysfs_add_hstate\">hugetlb_sysfs_add_hstate</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nhs\">nhs</a>-><a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#per_node_hstate_attr_group\">per_node_hstate_attr_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Hugetlb: Unable to add hstate %s\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" for node %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_unregister_node\">hugetlb_unregister_node</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * hugetlb init time:  register hstate attributes for all registered node</span>", 
"<span class=\"comment\"> * sysdevs of nodes that have memory.  All on-line nodes should have</span>", 
"<span class=\"comment\"> * registered their associated sysdev by this time.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#hugetlb_register_all_nodes\">hugetlb_register_all_nodes</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a> = &amp;<a class=\"id\" href=\"#node_devices\">node_devices</a>[<a class=\"id\" href=\"#nid\">nid</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#nid\">nid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_register_node\">hugetlb_register_node</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Let the node sysdev driver know we're here so it can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * [un]register hstate attributes on node hotplug.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_hugetlbfs_with_node\">register_hugetlbfs_with_node</a>(<a class=\"id\" href=\"#hugetlb_register_node\">hugetlb_register_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#hugetlb_unregister_node\">hugetlb_unregister_node</a>);", 
"}", 
"#else<span class=\"ts\"/><span class=\"comment\">/* !CONFIG_NUMA */</span>", 
"", 
"static struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#kobj_to_node_hstate\">kobj_to_node_hstate</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, int *<a class=\"id\" href=\"#nidp\">nidp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nidp\">nidp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nidp\">nidp</a> = -1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#hugetlb_unregister_all_nodes\">hugetlb_unregister_all_nodes</a>(void) { }", 
"", 
"static void <a class=\"id\" href=\"#hugetlb_register_all_nodes\">hugetlb_register_all_nodes</a>(void) { }", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#hugetlb_exit\">hugetlb_exit</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_unregister_all_nodes\">hugetlb_unregister_all_nodes</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_hstate\">for_each_hstate</a>(<a class=\"id\" href=\"#h\">h</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#hstate_kobjs\">hstate_kobjs</a>[<a class=\"id\" href=\"#h\">h</a> - <a class=\"id\" href=\"#hstates\">hstates</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#hugepages_kobj\">hugepages_kobj</a>);", 
"}", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#hugetlb_exit\">hugetlb_exit</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hugetlb_init\">hugetlb_init</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Some platform decide whether they support huge pages at boot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time. On these, such as powerpc, HPAGE_SHIFT is set to 0 when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there is no such support</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HPAGE_SHIFT\">HPAGE_SHIFT</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size_to_hstate\">size_to_hstate</a>(<a class=\"id\" href=\"#default_hstate_size\">default_hstate_size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_hstate_size\">default_hstate_size</a> = <a class=\"id\" href=\"#HPAGE_SIZE\">HPAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#size_to_hstate\">size_to_hstate</a>(<a class=\"id\" href=\"#default_hstate_size\">default_hstate_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_add_hstate\">hugetlb_add_hstate</a>(<a class=\"id\" href=\"#HUGETLB_PAGE_ORDER\">HUGETLB_PAGE_ORDER</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#default_hstate_idx\">default_hstate_idx</a> = <a class=\"id\" href=\"#size_to_hstate\">size_to_hstate</a>(<a class=\"id\" href=\"#default_hstate_size\">default_hstate_size</a>) - <a class=\"id\" href=\"#hstates\">hstates</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#default_hstate_max_huge_pages\">default_hstate_max_huge_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_hstate\">default_hstate</a>.<a class=\"id\" href=\"#max_huge_pages\">max_huge_pages</a> = <a class=\"id\" href=\"#default_hstate_max_huge_pages\">default_hstate_max_huge_pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_init_hstates\">hugetlb_init_hstates</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gather_bootmem_prealloc\">gather_bootmem_prealloc</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#report_hugepages\">report_hugepages</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_sysfs_init\">hugetlb_sysfs_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_register_all_nodes\">hugetlb_register_all_nodes</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#hugetlb_init\">hugetlb_init</a>);", 
"", 
"<span class=\"comment\">/* Should be called on processing a hugepagesz=... option */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hugetlb_add_hstate\">hugetlb_add_hstate</a>(unsigned <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size_to_hstate\">size_to_hstate</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> << <a class=\"id\" href=\"#order\">order</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"hugepagesz= specified twice, ignoring\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#max_hstate\">max_hstate</a> >= <a class=\"id\" href=\"#HUGE_MAX_HSTATE\">HUGE_MAX_HSTATE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#order\">order</a> == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a> = &amp;<a class=\"id\" href=\"#hstates\">hstates</a>[<a class=\"id\" href=\"#max_hstate\">max_hstate</a>++];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#mask\">mask</a> = ~((1ULL << (<a class=\"id\" href=\"#order\">order</a> + <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)) - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#hugepage_freelists\">hugepage_freelists</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#next_nid_to_alloc\">next_nid_to_alloc</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#next_nid_to_free\">next_nid_to_free</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#HSTATE_NAME_LEN\">HSTATE_NAME_LEN</a>, \"hugepages-%lukB\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>)/1024);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parsed_hstate\">parsed_hstate</a> = <a class=\"id\" href=\"#h\">h</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hugetlb_nrpages_setup\">hugetlb_nrpages_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#mhp\">mhp</a>;", 
"<span class=\"ts\"/>static unsigned long *<a class=\"id\" href=\"#last_mhp\">last_mhp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * !max_hstate means we haven't parsed a hugepagesz= parameter yet,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so this hugepages= parameter goes to the \"default hstate\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#max_hstate\">max_hstate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mhp\">mhp</a> = &amp;<a class=\"id\" href=\"#default_hstate_max_huge_pages\">default_hstate_max_huge_pages</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mhp\">mhp</a> = &amp;<a class=\"id\" href=\"#parsed_hstate\">parsed_hstate</a>-><a class=\"id\" href=\"#max_huge_pages\">max_huge_pages</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mhp\">mhp</a> == <a class=\"id\" href=\"#last_mhp\">last_mhp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"hugepages= specified twice without \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"interleaving hugepagesz=, ignoring\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%lu\", <a class=\"id\" href=\"#mhp\">mhp</a>) <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#mhp\">mhp</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Global state is always initialized later in hugetlb_init.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But we need to allocate &gt;= MAX_ORDER hstates here early to still</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use the bootmem allocator.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_hstate\">max_hstate</a> && <a class=\"id\" href=\"#parsed_hstate\">parsed_hstate</a>-><a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_hstate_alloc_pages\">hugetlb_hstate_alloc_pages</a>(<a class=\"id\" href=\"#parsed_hstate\">parsed_hstate</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_mhp\">last_mhp</a> = <a class=\"id\" href=\"#mhp\">mhp</a>;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"hugepages=\", <a class=\"id\" href=\"#hugetlb_nrpages_setup\">hugetlb_nrpages_setup</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#hugetlb_default_setup\">hugetlb_default_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#default_hstate_size\">default_hstate_size</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#s\">s</a>, &amp;<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"default_hugepagesz=\", <a class=\"id\" href=\"#hugetlb_default_setup\">hugetlb_default_setup</a>);", 
"", 
"static unsigned int <a class=\"id\" href=\"#cpuset_mems_nr\">cpuset_mems_nr</a>(unsigned int *<a class=\"id\" href=\"#array\">array</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#cpuset_current_mems_allowed\">cpuset_current_mems_allowed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> += <a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"static int <a class=\"id\" href=\"#hugetlb_sysctl_handler_common\">hugetlb_sysctl_handler_common</a>(<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#obey_mempolicy\">obey_mempolicy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = &amp;<a class=\"id\" href=\"#default_hstate\">default_hstate</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#max_huge_pages\">max_huge_pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a> = sizeof(unsigned long);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_ALLOC\">NODEMASK_ALLOC</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_NORETRY\">__GFP_NORETRY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#obey_mempolicy\">obey_mempolicy</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#init_nodemask_of_mempolicy\">init_nodemask_of_mempolicy</a>(<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_FREE\">NODEMASK_FREE</a>(<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a> = &amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#max_huge_pages\">max_huge_pages</a> = <a class=\"id\" href=\"#set_max_huge_pages\">set_max_huge_pages</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a> != &amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_FREE\">NODEMASK_FREE</a>(<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#hugetlb_sysctl_handler\">hugetlb_sysctl_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hugetlb_sysctl_handler_common\">hugetlb_sysctl_handler_common</a>(<a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"int <a class=\"id\" href=\"#hugetlb_mempolicy_sysctl_handler\">hugetlb_mempolicy_sysctl_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hugetlb_sysctl_handler_common\">hugetlb_sysctl_handler_common</a>(<a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"int <a class=\"id\" href=\"#hugetlb_treat_movable_handler\">hugetlb_treat_movable_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hugepages_treat_as_movable\">hugepages_treat_as_movable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#htlb_alloc_mask\">htlb_alloc_mask</a> = <a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#htlb_alloc_mask\">htlb_alloc_mask</a> = <a class=\"id\" href=\"#GFP_HIGHUSER\">GFP_HIGHUSER</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#hugetlb_overcommit_handler\">hugetlb_overcommit_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = &amp;<a class=\"id\" href=\"#default_hstate\">default_hstate</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_overcommit_huge_pages\">nr_overcommit_huge_pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a> = sizeof(unsigned long);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_overcommit_huge_pages\">nr_overcommit_huge_pages</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SYSCTL */</span>", 
"", 
"void <a class=\"id\" href=\"#hugetlb_report_meminfo\">hugetlb_report_meminfo</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = &amp;<a class=\"id\" href=\"#default_hstate\">default_hstate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"HugePages_Total:   %5lu\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"HugePages_Free:    %5lu\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"HugePages_Rsvd:    %5lu\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"HugePages_Surp:    %5lu\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Hugepagesize:   %8lu kB\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1UL << (<a class=\"id\" href=\"#huge_page_order\">huge_page_order</a>(<a class=\"id\" href=\"#h\">h</a>) + <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 10));", 
"}", 
"", 
"int <a class=\"id\" href=\"#hugetlb_report_node_meminfo\">hugetlb_report_node_meminfo</a>(int <a class=\"id\" href=\"#nid\">nid</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = &amp;<a class=\"id\" href=\"#default_hstate\">default_hstate</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Node %d HugePages_Total: %5u\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Node %d HugePages_Free:  %5u\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Node %d HugePages_Surp:  %5u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages_node\">nr_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages_node\">free_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages_node\">surplus_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>]);", 
"}", 
"", 
"<span class=\"comment\">/* Return the number pages of memory we physically have, in PAGE_SIZE units. */</span>", 
"unsigned long <a class=\"id\" href=\"#hugetlb_total_pages\">hugetlb_total_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = &amp;<a class=\"id\" href=\"#default_hstate\">default_hstate</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a> * <a class=\"id\" href=\"#pages_per_huge_page\">pages_per_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#hugetlb_acct_memory\">hugetlb_acct_memory</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, long <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When cpuset is configured, it breaks the strict hugetlb page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reservation as the accounting is done on a global variable. Such</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reservation is completely rubbish in the presence of cpuset because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the reservation is not checked against page availability for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current cpuset. Application can still potentially OOM'ed by kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with lack of free htlb page in cpuset that the task is in.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Attempt to enforce strict accounting with cpuset is almost</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * impossible (or too ugly) because cpuset is too fluid that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task or memory node can be dynamically moved between cpusets.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The change of semantics for shared hugetlb mapping with cpuset is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * undesirable. However, in order to preserve some of the semantics,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we fall back to check against current free page availability as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a best attempt and hopefully to minimize the impact of changing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * semantics that cpuset has.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gather_surplus_pages\">gather_surplus_pages</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#delta\">delta</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; <a class=\"id\" href=\"#cpuset_mems_nr\">cpuset_mems_nr</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages_node\">free_huge_pages_node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_unused_surplus_pages\">return_unused_surplus_pages</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_unused_surplus_pages\">return_unused_surplus_pages</a>(<a class=\"id\" href=\"#h\">h</a>, (unsigned long) -<a class=\"id\" href=\"#delta\">delta</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#hugetlb_vm_op_open\">hugetlb_vm_op_open</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resv_map\">resv_map</a> *<a class=\"id\" href=\"#reservations\">reservations</a> = <a class=\"id\" href=\"#vma_resv_map\">vma_resv_map</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This new VMA should share its siblings reservation map if present.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The VMA will only ever have a valid reservation map pointer where</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it is being copied for another still existing VMA.  As that VMA</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has a reference to the reservation map it cannot dissappear until</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * after this open call completes.  It is therefore safe to take a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new reference here without additional locking.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reservations\">reservations</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_get\">kref_get</a>(&amp;<a class=\"id\" href=\"#reservations\">reservations</a>-><a class=\"id\" href=\"#refs\">refs</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#hugetlb_vm_op_close\">hugetlb_vm_op_close</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resv_map\">resv_map</a> *<a class=\"id\" href=\"#reservations\">reservations</a> = <a class=\"id\" href=\"#vma_resv_map\">vma_resv_map</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reserve\">reserve</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reservations\">reservations</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#vma_hugecache_offset\">vma_hugecache_offset</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#vma_hugecache_offset\">vma_hugecache_offset</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve\">reserve</a> = (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#region_count\">region_count</a>(&amp;<a class=\"id\" href=\"#reservations\">reservations</a>-><a class=\"id\" href=\"#regions\">regions</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#reservations\">reservations</a>-><a class=\"id\" href=\"#refs\">refs</a>, <a class=\"id\" href=\"#resv_map_release\">resv_map_release</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reserve\">reserve</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_acct_memory\">hugetlb_acct_memory</a>(<a class=\"id\" href=\"#h\">h</a>, -<a class=\"id\" href=\"#reserve\">reserve</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_put_quota\">hugetlb_put_quota</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>, <a class=\"id\" href=\"#reserve\">reserve</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We cannot handle pagefaults against hugetlb pages at all.  They cause</span>", 
"<span class=\"comment\"> * handle_mm_fault() to try to instantiate regular-sized pages in the</span>", 
"<span class=\"comment\"> * hugegpage VMA.  do_page_fault() is supposed to trap this, so BUG is we get</span>", 
"<span class=\"comment\"> * this far.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hugetlb_vm_op_fault\">hugetlb_vm_op_fault</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_fault\">vm_fault</a> *<a class=\"id\" href=\"#vmf\">vmf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#vm_operations_struct\">vm_operations_struct</a> <a class=\"id\" href=\"#hugetlb_vm_ops\">hugetlb_vm_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fault\">fault</a> = <a class=\"id\" href=\"#hugetlb_vm_op_fault\">hugetlb_vm_op_fault</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#hugetlb_vm_op_open\">hugetlb_vm_op_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#close\">close</a> = <a class=\"id\" href=\"#hugetlb_vm_op_close\">hugetlb_vm_op_close</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#make_huge_pte\">make_huge_pte</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#writable\">writable</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#writable\">writable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pte_mkwrite\">pte_mkwrite</a>(<a class=\"id\" href=\"#pte_mkdirty\">pte_mkdirty</a>(<a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>)));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#huge_pte_wrprotect\">huge_pte_wrprotect</a>(<a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkyoung\">pte_mkyoung</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkhuge\">pte_mkhuge</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#entry\">entry</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_huge_ptep_writable\">set_huge_ptep_writable</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkwrite\">pte_mkwrite</a>(<a class=\"id\" href=\"#pte_mkdirty\">pte_mkdirty</a>(<a class=\"id\" href=\"#huge_ptep_get\">huge_ptep_get</a>(<a class=\"id\" href=\"#ptep\">ptep</a>)));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#huge_ptep_set_access_flags\">huge_ptep_set_access_flags</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#entry\">entry</a>, 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_mmu_cache\">update_mmu_cache</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"int <a class=\"id\" href=\"#copy_hugetlb_page_range\">copy_hugetlb_page_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#src_pte\">src_pte</a>, *<a class=\"id\" href=\"#dst_pte\">dst_pte</a>, <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#ptepage\">ptepage</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cow\">cow</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sz\">sz</a> = <a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cow\">cow</a> = (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a> | <a class=\"id\" href=\"#VM_MAYWRITE\">VM_MAYWRITE</a>)) == <a class=\"id\" href=\"#VM_MAYWRITE\">VM_MAYWRITE</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>; <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>; <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#sz\">sz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src_pte\">src_pte</a> = <a class=\"id\" href=\"#huge_pte_offset\">huge_pte_offset</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#src_pte\">src_pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_pte\">dst_pte</a> = <a class=\"id\" href=\"#huge_pte_alloc\">huge_pte_alloc</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#sz\">sz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dst_pte\">dst_pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nomem\">nomem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the pagetables are shared don't copy or take references */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_pte\">dst_pte</a> == <a class=\"id\" href=\"#src_pte\">src_pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_nested\">spin_lock_nested</a>(&amp;<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#huge_pte_none\">huge_pte_none</a>(<a class=\"id\" href=\"#huge_ptep_get\">huge_ptep_get</a>(<a class=\"id\" href=\"#src_pte\">src_pte</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cow\">cow</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#huge_ptep_set_wrprotect\">huge_ptep_set_wrprotect</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#src_pte\">src_pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#huge_ptep_get\">huge_ptep_get</a>(<a class=\"id\" href=\"#src_pte\">src_pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptepage\">ptepage</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#ptepage\">ptepage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_dup_rmap\">page_dup_rmap</a>(<a class=\"id\" href=\"#ptepage\">ptepage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_huge_pte_at\">set_huge_pte_at</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dst_pte\">dst_pte</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#nomem\">nomem</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#is_hugetlb_entry_hwpoisoned\">is_hugetlb_entry_hwpoisoned</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#swp\">swp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#huge_pte_none\">huge_pte_none</a>(<a class=\"id\" href=\"#pte\">pte</a>) || <a class=\"id\" href=\"#pte_present\">pte_present</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp\">swp</a> = <a class=\"id\" href=\"#pte_to_swp_entry\">pte_to_swp_entry</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#non_swap_entry\">non_swap_entry</a>(<a class=\"id\" href=\"#swp\">swp</a>) && <a class=\"id\" href=\"#is_hwpoison_entry\">is_hwpoison_entry</a>(<a class=\"id\" href=\"#swp\">swp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__unmap_hugepage_range\">__unmap_hugepage_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#end\">end</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#ref_page\">ref_page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sz\">sz</a> = <a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A page gathering list, protected by per file i_mmap_lock. The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock is used to avoid list corruption from multiple unmapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the same page since we are using page-&gt;lru.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#page_list\">page_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> &amp; ~<a class=\"id\" href=\"#huge_page_mask\">huge_page_mask</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#end\">end</a> &amp; ~<a class=\"id\" href=\"#huge_page_mask\">huge_page_mask</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_invalidate_range_start\">mmu_notifier_invalidate_range_start</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#address\">address</a> += <a class=\"id\" href=\"#sz\">sz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#huge_pte_offset\">huge_pte_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#huge_pmd_unshare\">huge_pmd_unshare</a>(<a class=\"id\" href=\"#mm\">mm</a>, &amp;<a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If a reference page is supplied, it is because a specific</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * page is being unmapped, not a range. Ensure the page we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are about to unmap is the actual page of interest.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ref_page\">ref_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#huge_ptep_get\">huge_ptep_get</a>(<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#huge_pte_none\">huge_pte_none</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> != <a class=\"id\" href=\"#ref_page\">ref_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Mark the VMA as having unmapped its page so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * future faults in this VMA will fail rather than</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * looking like data was lost</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_vma_resv_flags\">set_vma_resv_flags</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#HPAGE_RESV_UNMAPPED\">HPAGE_RESV_UNMAPPED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#huge_ptep_get_and_clear\">huge_ptep_get_and_clear</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#huge_pte_none\">huge_pte_none</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * HWPoisoned hugepage is already unmapped and dropped reference</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_hugetlb_entry_hwpoisoned\">is_hugetlb_entry_hwpoisoned</a>(<a class=\"id\" href=\"#pte\">pte</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_dirty\">pte_dirty</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#page_list\">page_list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_range\">flush_tlb_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_invalidate_range_end\">mmu_notifier_invalidate_range_end</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#page_list\">page_list</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_remove_rmap\">page_remove_rmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#unmap_hugepage_range\">unmap_hugepage_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#end\">end</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#ref_page\">ref_page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unmap_hugepage_range\">__unmap_hugepage_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#ref_page\">ref_page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is called when the original mapper is failing to COW a MAP_PRIVATE</span>", 
"<span class=\"comment\"> * mappping it owns the reserve page for. The intention is to unmap the page</span>", 
"<span class=\"comment\"> * from other VMAs and let the children be SIGKILLed if they are faulting the</span>", 
"<span class=\"comment\"> * same region.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unmap_ref_private\">unmap_ref_private</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#iter_vma\">iter_vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * vm_pgoff is in PAGE_SIZE units, hence the different calculation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from page cache lookup which is in HPAGE_SIZE units.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#huge_page_mask\">huge_page_mask</a>(<a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = ((<a class=\"id\" href=\"#address\">address</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>+ (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = (struct <a class=\"id\" href=\"#address_space\">address_space</a> *)<a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Take the mapping lock for the duration of the table walk. As</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this mapping should be shared between all the VMAs,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __unmap_hugepage_range() is called as the lock is already held</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_foreach\">vma_prio_tree_foreach</a>(<a class=\"id\" href=\"#iter_vma\">iter_vma</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap\">i_mmap</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Do not unmap the current VMA */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter_vma\">iter_vma</a> == <a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Unmap the page from other VMAs without their own reserves.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * They get marked to be SIGKILLed if they fault in these</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * areas. This is because a future no-page fault on this VMA</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * could insert a zeroed page instead of the data existing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from the time of fork. This would look like data corruption</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_vma_resv_set\">is_vma_resv_set</a>(<a class=\"id\" href=\"#iter_vma\">iter_vma</a>, <a class=\"id\" href=\"#HPAGE_RESV_OWNER\">HPAGE_RESV_OWNER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__unmap_hugepage_range\">__unmap_hugepage_range</a>(<a class=\"id\" href=\"#iter_vma\">iter_vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#address\">address</a> + <a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Hugetlb_cow() should be called with page lock of the original hugepage held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hugetlb_cow\">hugetlb_cow</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pagecache_page\">pagecache_page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#old_page\">old_page</a>, *<a class=\"id\" href=\"#new_page\">new_page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#avoidcopy\">avoidcopy</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#outside_reserve\">outside_reserve</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_page\">old_page</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<a class=\"id\" href=\"#retry_avoidcopy\">retry_avoidcopy</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* If no-one else is actually using this page, avoid the copy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and just make the page writable */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avoidcopy\">avoidcopy</a> = (<a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#old_page\">old_page</a>) == 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#avoidcopy\">avoidcopy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#old_page\">old_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_move_anon_rmap\">page_move_anon_rmap</a>(<a class=\"id\" href=\"#old_page\">old_page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_huge_ptep_writable\">set_huge_ptep_writable</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the process that created a MAP_PRIVATE mapping is about to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * perform a COW due to a shared page count, attempt to satisfy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the allocation without using the existing reserves. The pagecache</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page is used to determine if the reserve at this address was</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * consumed or not. If reserves were used, a partial faulted mapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at the time of fork() could consume its reserves on COW instead</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the full address range.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_vma_resv_set\">is_vma_resv_set</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#HPAGE_RESV_OWNER\">HPAGE_RESV_OWNER</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_page\">old_page</a> != <a class=\"id\" href=\"#pagecache_page\">pagecache_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outside_reserve\">outside_reserve</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_get\">page_cache_get</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Drop page_table_lock as buddy allocator may be called */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_page\">new_page</a> = <a class=\"id\" href=\"#alloc_huge_page\">alloc_huge_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#outside_reserve\">outside_reserve</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new_page\">new_page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If a process owning a MAP_PRIVATE mapping fails to COW,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it is due to references held by a child and an insufficient</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * huge page pool. To guarantee the original mappers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reliability, unmap the page from child processes. The child</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * may get SIGKILLed if it later faults.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#outside_reserve\">outside_reserve</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#huge_pte_none\">huge_pte_none</a>(<a class=\"id\" href=\"#pte\">pte</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unmap_ref_private\">unmap_ref_private</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#old_page\">old_page</a>, <a class=\"id\" href=\"#address\">address</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#old_page\">old_page</a>) != 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#huge_pte_none\">huge_pte_none</a>(<a class=\"id\" href=\"#pte\">pte</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry_avoidcopy\">retry_avoidcopy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Caller expects lock to be held */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When the original hugepage is shared one, it does not have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anon_vma prepared.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#anon_vma_prepare\">anon_vma_prepare</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_huge_page\">copy_huge_page</a>(<a class=\"id\" href=\"#new_page\">new_page</a>, <a class=\"id\" href=\"#old_page\">old_page</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__SetPageUptodate\">__SetPageUptodate</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Retake the page_table_lock to check for racing updates</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before the page tables are altered</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#huge_pte_offset\">huge_pte_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#huge_page_mask\">huge_page_mask</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#pte_same\">pte_same</a>(<a class=\"id\" href=\"#huge_ptep_get\">huge_ptep_get</a>(<a class=\"id\" href=\"#ptep\">ptep</a>), <a class=\"id\" href=\"#pte\">pte</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Break COW */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_invalidate_range_start\">mmu_notifier_invalidate_range_start</a>(<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#huge_page_mask\">huge_page_mask</a>(<a class=\"id\" href=\"#h\">h</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#huge_page_mask\">huge_page_mask</a>(<a class=\"id\" href=\"#h\">h</a>)) + <a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#huge_ptep_clear_flush\">huge_ptep_clear_flush</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_huge_pte_at\">set_huge_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#make_huge_pte\">make_huge_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#new_page\">new_page</a>, 1));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_remove_rmap\">page_remove_rmap</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugepage_add_new_anon_rmap\">hugepage_add_new_anon_rmap</a>(<a class=\"id\" href=\"#new_page\">new_page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make the old page be freed below */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_page\">new_page</a> = <a class=\"id\" href=\"#old_page\">old_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_invalidate_range_end\">mmu_notifier_invalidate_range_end</a>(<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#huge_page_mask\">huge_page_mask</a>(<a class=\"id\" href=\"#h\">h</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#huge_page_mask\">huge_page_mask</a>(<a class=\"id\" href=\"#h\">h</a>)) + <a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Return the pagecache page at a given address within a VMA */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#hugetlbfs_pagecache_page\">hugetlbfs_pagecache_page</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#vma_hugecache_offset\">vma_hugecache_offset</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#find_lock_page\">find_lock_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return whether there is a pagecache page to back given address within VMA.</span>", 
"<span class=\"comment\"> * Caller follow_hugetlb_page() holds page_table_lock so we cannot lock_page.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#hugetlbfs_pagecache_present\">hugetlbfs_pagecache_present</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#vma_hugecache_offset\">vma_hugecache_offset</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#hugetlb_no_page\">hugetlb_no_page</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#new_pte\">new_pte</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Currently, we are forced to kill the process in the event the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * original mapper has unmapped pages from the child due to a failed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * COW. Warn that such a situation has occured as it may not be obvious</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vma_resv_set\">is_vma_resv_set</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#HPAGE_RESV_UNMAPPED\">HPAGE_RESV_UNMAPPED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"PID %d killed due to inadequate hugepage pool\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#vma_hugecache_offset\">vma_hugecache_offset</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use page lock to guard against racing truncation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before we get page_table_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_lock_page\">find_lock_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>) >> <a class=\"id\" href=\"#huge_page_shift\">huge_page_shift</a>(<a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_huge_page\">alloc_huge_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_huge_page\">clear_huge_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__SetPageUptodate\">__SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_to_page_cache\">add_to_page_cache</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> += <a class=\"id\" href=\"#blocks_per_huge_page\">blocks_per_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_dup_rmap\">page_dup_rmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#anon_vma_prepare\">anon_vma_prepare</a>(<a class=\"id\" href=\"#vma\">vma</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#backout_unlocked\">backout_unlocked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugepage_add_new_anon_rmap\">hugepage_add_new_anon_rmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_dup_rmap\">page_dup_rmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since memory error handler replaces pte into hwpoison swap entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at the time of error handling, a process which reserved but not have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the mapping to the error hugepage does not have hwpoison swap entry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So we need to block accesses from such a process by checking</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PG_hwpoison bit here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageHWPoison\">PageHWPoison</a>(<a class=\"id\" href=\"#page\">page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_HWPOISON\">VM_FAULT_HWPOISON</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#backout_unlocked\">backout_unlocked</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are going to COW a private mapping later, we examine the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pending reservations for this page now. This will ensure that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any allocations necessary to record that reservation occur outside</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the spinlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>) && !(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma_needs_reservation\">vma_needs_reservation</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#backout_unlocked\">backout_unlocked</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>) >> <a class=\"id\" href=\"#huge_page_shift\">huge_page_shift</a>(<a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#backout\">backout</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#huge_pte_none\">huge_pte_none</a>(<a class=\"id\" href=\"#huge_ptep_get\">huge_ptep_get</a>(<a class=\"id\" href=\"#ptep\">ptep</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#backout\">backout</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_pte\">new_pte</a> = <a class=\"id\" href=\"#make_huge_pte\">make_huge_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#page\">page</a>, ((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&& (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_huge_pte_at\">set_huge_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#new_pte\">new_pte</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>) && !(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Optimization, do the COW without a second fault */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#hugetlb_cow\">hugetlb_cow</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#new_pte\">new_pte</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#backout\">backout</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<a class=\"id\" href=\"#backout_unlocked\">backout_unlocked</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#hugetlb_fault\">hugetlb_fault</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pagecache_page\">pagecache_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#hugetlb_instantiation_mutex\">hugetlb_instantiation_mutex</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#huge_pte_offset\">huge_pte_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptep\">ptep</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#huge_ptep_get\">huge_ptep_get</a>(<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_hugetlb_entry_hwpoisoned\">is_hugetlb_entry_hwpoisoned</a>(<a class=\"id\" href=\"#entry\">entry</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_HWPOISON\">VM_FAULT_HWPOISON</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#huge_pte_alloc\">huge_pte_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Serialize hugepage allocation and instantiation, so that we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get spurious allocation failures if two CPUs race to instantiate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the same page in the page cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_instantiation_mutex\">hugetlb_instantiation_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#huge_ptep_get\">huge_ptep_get</a>(<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#huge_pte_none\">huge_pte_none</a>(<a class=\"id\" href=\"#entry\">entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#hugetlb_no_page\">hugetlb_no_page</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_mutex\">out_mutex</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are going to COW the mapping later, we examine the pending</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reservations for this page now. This will ensure that any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocations necessary to record that reservation occur outside the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * spinlock. For private mappings, we also lookup the pagecache</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page now as it is used to determine if a reservation has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * consumed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>) && !<a class=\"id\" href=\"#pte_write\">pte_write</a>(<a class=\"id\" href=\"#entry\">entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma_needs_reservation\">vma_needs_reservation</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_mutex\">out_mutex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagecache_page\">pagecache_page</a> = <a class=\"id\" href=\"#hugetlbfs_pagecache_page\">hugetlbfs_pagecache_page</a>(<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hugetlb_cow() requires page locks of pte_page(entry) and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pagecache_page, so here we need take the former one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when page != pagecache_page or !pagecache_page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that locking order is always pagecache_page -&gt; page,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so no worry about deadlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> != <a class=\"id\" href=\"#pagecache_page\">pagecache_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for a racing update before calling hugetlb_cow */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pte_same\">pte_same</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#huge_ptep_get\">huge_ptep_get</a>(<a class=\"id\" href=\"#ptep\">ptep</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_page_table_lock\">out_page_table_lock</a>;", 
"", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_write\">pte_write</a>(<a class=\"id\" href=\"#entry\">entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#hugetlb_cow\">hugetlb_cow</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagecache_page\">pagecache_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_page_table_lock\">out_page_table_lock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkdirty\">pte_mkdirty</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkyoung\">pte_mkyoung</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#huge_ptep_set_access_flags\">huge_ptep_set_access_flags</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_mmu_cache\">update_mmu_cache</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"", 
"<a class=\"id\" href=\"#out_page_table_lock\">out_page_table_lock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pagecache_page\">pagecache_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#pagecache_page\">pagecache_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#pagecache_page\">pagecache_page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<a class=\"id\" href=\"#out_mutex\">out_mutex</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_instantiation_mutex\">hugetlb_instantiation_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Can be overriden by architectures */</span>", 
"<a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#follow_huge_pud\">follow_huge_pud</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>, int <a class=\"id\" href=\"#write\">write</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#follow_hugetlb_page\">follow_hugetlb_page</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> **<a class=\"id\" href=\"#vmas\">vmas</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#position\">position</a>, int *<a class=\"id\" href=\"#length\">length</a>, int <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn_offset\">pfn_offset</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a> = *<a class=\"id\" href=\"#position\">position</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#remainder\">remainder</a> = *<a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#vaddr\">vaddr</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> && <a class=\"id\" href=\"#remainder\">remainder</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#absent\">absent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Some archs (sparc64, sh*) have multiple pte_ts to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * each hugepage.  We have to make sure we get the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first, for the page indexing below to work.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#huge_pte_offset\">huge_pte_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a> &amp; <a class=\"id\" href=\"#huge_page_mask\">huge_page_mask</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#absent\">absent</a> = !<a class=\"id\" href=\"#pte\">pte</a> || <a class=\"id\" href=\"#huge_pte_none\">huge_pte_none</a>(<a class=\"id\" href=\"#huge_ptep_get\">huge_ptep_get</a>(<a class=\"id\" href=\"#pte\">pte</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When coredumping, it suits get_dump_page if we just return</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * an error where there's an empty slot with no huge pagecache</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to back it.  This way, we avoid allocating a hugepage, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the sparse dumpfile avoids allocating disk blocks, but its</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * huge holes still show up with zeroes where they need to be.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#absent\">absent</a> && (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_DUMP\">FOLL_DUMP</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#hugetlbfs_pagecache_present\">hugetlbfs_pagecache_present</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#absent\">absent</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>) && !<a class=\"id\" href=\"#pte_write\">pte_write</a>(<a class=\"id\" href=\"#huge_ptep_get\">huge_ptep_get</a>(<a class=\"id\" href=\"#pte\">pte</a>)))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#hugetlb_fault\">hugetlb_fault</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>) ? <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a> : 0);", 
];
xr_frag_insert('l/83/c9e63eab585cfd300e0b171d472780d09a0515.xr', __xr_tmp);
