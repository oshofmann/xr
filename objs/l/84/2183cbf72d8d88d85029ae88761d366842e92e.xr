var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic helpers for smp ipi calls</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Jens Axboe &lt;jens.axboe@oracle.com&gt; 2008</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static struct {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#queue\">queue</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"} <a class=\"id\" href=\"#call_function\">call_function</a> <a class=\"id\" href=\"#__cacheline_aligned_in_smp\">__cacheline_aligned_in_smp</a> =", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#queue\">queue</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>(<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#queue\">queue</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#__RAW_SPIN_LOCK_UNLOCKED\">__RAW_SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#lock\">lock</a>),", 
"<span class=\"ts\"/>};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CSD_FLAG_LOCK\">CSD_FLAG_LOCK</a><span class=\"ts\"/><span class=\"ts\"/>= 0x01,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#call_function_data\">call_function_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a><span class=\"ts\"/><a class=\"id\" href=\"#csd\">csd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refs\">refs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask\">cpumask</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU_SHARED_ALIGNED\">DEFINE_PER_CPU_SHARED_ALIGNED</a>(struct <a class=\"id\" href=\"#call_function_data\">call_function_data</a>, <a class=\"id\" href=\"#cfd_data\">cfd_data</a>);", 
"", 
"struct <a class=\"id\" href=\"#call_single_queue\">call_single_queue</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU_SHARED_ALIGNED\">DEFINE_PER_CPU_SHARED_ALIGNED</a>(struct <a class=\"id\" href=\"#call_single_queue\">call_single_queue</a>, <a class=\"id\" href=\"#call_single_queue\">call_single_queue</a>);", 
"", 
"static int", 
"<a class=\"id\" href=\"#hotplug_cfd\">hotplug_cfd</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>, unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#cpu\">cpu</a> = (long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#call_function_data\">call_function_data</a> *<a class=\"id\" href=\"#cfd\">cfd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cfd_data\">cfd_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE_FROZEN\">CPU_UP_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#zalloc_cpumask_var_node\">zalloc_cpumask_var_node</a>(&amp;<a class=\"id\" href=\"#cfd\">cfd</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#notifier_from_errno\">notifier_from_errno</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED\">CPU_UP_CANCELED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED_FROZEN\">CPU_UP_CANCELED_FROZEN</a>:", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#cfd\">cfd</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#hotplug_cfd_notifier\">hotplug_cfd_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#hotplug_cfd\">hotplug_cfd</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#init_call_single_data\">init_call_single_data</a>(void)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#cpu\">cpu</a> = (void *)(long)<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#call_single_queue\">call_single_queue</a> *<a class=\"id\" href=\"#q\">q</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#call_single_queue\">call_single_queue</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotplug_cfd\">hotplug_cfd</a>(&amp;<a class=\"id\" href=\"#hotplug_cfd_notifier\">hotplug_cfd_notifier</a>, <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#hotplug_cfd_notifier\">hotplug_cfd_notifier</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_initcall\">early_initcall</a>(<a class=\"id\" href=\"#init_call_single_data\">init_call_single_data</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * csd_lock/csd_unlock used to serialize access to per-cpu csd resources</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For non-synchronous ipi calls the csd can still be in use by the</span>", 
"<span class=\"comment\"> * previous function call. For multi-cpu calls its even more interesting</span>", 
"<span class=\"comment\"> * as we'll have to ensure no other cpu is observing our csd.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#csd_lock_wait\">csd_lock_wait</a>(struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CSD_FLAG_LOCK\">CSD_FLAG_LOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#csd_lock\">csd_lock</a>(struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csd_lock_wait\">csd_lock_wait</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#CSD_FLAG_LOCK\">CSD_FLAG_LOCK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prevent CPU from reordering the above assignment</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to -&gt;flags with any subsequent assignments to other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fields of the specified call_single_data structure:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#csd_unlock\">csd_unlock</a>(struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CSD_FLAG_LOCK\">CSD_FLAG_LOCK</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ensure we're all done before releasing data:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#CSD_FLAG_LOCK\">CSD_FLAG_LOCK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Insert a previously allocated call_single_data element</span>", 
"<span class=\"comment\"> * for execution on the given CPU. data must already have</span>", 
"<span class=\"comment\"> * -&gt;func, -&gt;info, and -&gt;flags set.</span>", 
"<span class=\"comment\"> */</span>", 
"static", 
"void <a class=\"id\" href=\"#generic_exec_single\">generic_exec_single</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#call_single_queue\">call_single_queue</a> *<a class=\"id\" href=\"#dst\">dst</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#call_single_queue\">call_single_queue</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ipi\">ipi</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipi\">ipi</a> = <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The list addition should be visible before sending the IPI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handler locks the list to pull the entry off it because of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * normal cache coherency rules implied by spinlocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If IPIs can go out of order to the cache coherency protocol</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in an architecture, sufficient synchronisation should be added</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to arch code to make it appear to obey cache coherency WRT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * locking and barrier primitives. Generic code isn't really</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * equipped to do the right thing...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipi\">ipi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_send_call_function_single_ipi\">arch_send_call_function_single_ipi</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wait\">wait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csd_lock_wait\">csd_lock_wait</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Invoked by arch to handle an IPI for call function. Must be called with</span>", 
"<span class=\"comment\"> * interrupts disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#generic_smp_call_function_interrupt\">generic_smp_call_function_interrupt</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#call_function_data\">call_function_data</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Shouldn't receive this interrupt on a cpu that is not yet online.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure entry is visible on call_function_queue after we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * entered the IPI. See comment in smp_call_function_many.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we don't have this, then we may miss an entry on the list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and never get another IPI to process it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's ok to use list_for_each_rcu() here even though we may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * delete 'pos', since list_del_rcu() doesn't clear -&gt;next</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#csd\">csd</a>.<a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#refs\">refs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_and_clear_cpu\">cpumask_test_and_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#csd\">csd</a>.<a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#csd\">csd</a>.<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refs\">refs</a> = <a class=\"id\" href=\"#atomic_dec_return\">atomic_dec_return</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#refs\">refs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#refs\">refs</a> &lt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#refs\">refs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#csd\">csd</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#refs\">refs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csd_unlock\">csd_unlock</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#csd\">csd</a>);", 
"<span class=\"ts\"/>}", 
"", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Invoked by arch to handle an IPI for call function single. Must be</span>", 
"<span class=\"comment\"> * called from the arch with interrupts disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#generic_smp_call_function_single_interrupt\">generic_smp_call_function_single_interrupt</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#call_single_queue\">call_single_queue</a> *<a class=\"id\" href=\"#q\">q</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#call_single_queue\">call_single_queue</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#data_flags\">data_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Shouldn't receive this interrupt on a cpu that is not yet online.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 'data' can be invalid after this call if flags == 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (when called through generic_exec_single()),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so save them away before making the call:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data_flags\">data_flags</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Unlocked CSDs are valid through generic_exec_single():</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#data_flags\">data_flags</a> &amp; <a class=\"id\" href=\"#CSD_FLAG_LOCK\">CSD_FLAG_LOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csd_unlock\">csd_unlock</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU_SHARED_ALIGNED\">DEFINE_PER_CPU_SHARED_ALIGNED</a>(struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a>, <a class=\"id\" href=\"#csd_data\">csd_data</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * smp_call_function_single - Run a function on a specific CPU</span>", 
"<span class=\"comment\"> * @func: The function to run. This must be fast and non-blocking.</span>", 
"<span class=\"comment\"> * @info: An arbitrary pointer to pass to the function.</span>", 
"<span class=\"comment\"> * @wait: If true, wait until function has completed on other CPUs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, else a negative status code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, void (*<a class=\"id\" href=\"#func\">func</a>) (void *<a class=\"id\" href=\"#info\">info</a>), void *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> <a class=\"id\" href=\"#d\">d</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = 0,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prevent preemption and reschedule on another processor,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as well as CPU removal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can deadlock when called with interrupts disabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We allow cpu's that are not yet online though, as no one else can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * send smp call function interrupt to this cpu and as such deadlocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can't happen.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>) && <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()", 
"<span class=\"ts\"/><span class=\"ts\"/>     && !<a class=\"id\" href=\"#oops_in_progress\">oops_in_progress</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#this_cpu\">this_cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((unsigned)<a class=\"id\" href=\"#cpu\">cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> && <a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#wait\">wait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#csd_data\">csd_data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csd_lock\">csd_lock</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#generic_exec_single\">generic_exec_single</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;<span class=\"ts\"/><span class=\"comment\">/* CPU not online */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * smp_call_function_any - Run a function on any of the given cpus</span>", 
"<span class=\"comment\"> * @mask: The mask of cpus it can run on.</span>", 
"<span class=\"comment\"> * @func: The function to run. This must be fast and non-blocking.</span>", 
"<span class=\"comment\"> * @info: An arbitrary pointer to pass to the function.</span>", 
"<span class=\"comment\"> * @wait: If true, wait until function has completed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, else a negative status code (if no cpus were online).</span>", 
"<span class=\"comment\"> * Note that @wait will be implicitly turned on in case of allocation failures,</span>", 
"<span class=\"comment\"> * since we fall back to on-stack allocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Selection preference:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1) current cpu if in @mask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2) any cpu of current node if in @mask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>3) any other online cpu in @mask</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#smp_call_function_any\">smp_call_function_any</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void (*<a class=\"id\" href=\"#func\">func</a>)(void *<a class=\"id\" href=\"#info\">info</a>), void *<a class=\"id\" href=\"#info\">info</a>, int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try for same CPU (cheapest) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#call\">call</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try for same node. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask\">nodemask</a> = <a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(<a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpumask_first_and\">cpumask_first_and</a>(<a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#mask\">mask</a>); <a class=\"id\" href=\"#cpu\">cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpumask_next_and\">cpumask_next_and</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#mask\">mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#call\">call</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Any online will do: smp_call_function_single handles nr_cpu_ids. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpumask_any_and\">cpumask_any_and</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<a class=\"id\" href=\"#call\">call</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#smp_call_function_any\">smp_call_function_any</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __smp_call_function_single(): Run a function on a specific CPU</span>", 
"<span class=\"comment\"> * @cpu: The CPU to run on.</span>", 
"<span class=\"comment\"> * @data: Pre-allocated and setup data structure</span>", 
"<span class=\"comment\"> * @wait: If true, wait until function has completed on specified CPU.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Like smp_call_function_single(), but allow caller to pass in a</span>", 
"<span class=\"comment\"> * pre-allocated data structure. Useful for embedding @data inside</span>", 
"<span class=\"comment\"> * other structures, for instance.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__smp_call_function_single\">__smp_call_function_single</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can deadlock when called with interrupts disabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We allow cpu's that are not yet online though, as no one else can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * send smp call function interrupt to this cpu and as such deadlocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can't happen.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()) && <a class=\"id\" href=\"#wait\">wait</a> && <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()", 
"<span class=\"ts\"/><span class=\"ts\"/>     && !<a class=\"id\" href=\"#oops_in_progress\">oops_in_progress</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#this_cpu\">this_cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csd_lock\">csd_lock</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#generic_exec_single\">generic_exec_single</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smp_call_function_many(): Run a function on a set of other CPUs.</span>", 
"<span class=\"comment\"> * @mask: The set of cpus to run on (only runs on online subset).</span>", 
"<span class=\"comment\"> * @func: The function to run. This must be fast and non-blocking.</span>", 
"<span class=\"comment\"> * @info: An arbitrary pointer to pass to the function.</span>", 
"<span class=\"comment\"> * @wait: If true, wait (atomically) until function has completed</span>", 
"<span class=\"comment\"> *        on other CPUs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @wait is true, then returns once @func has returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You must not call this function with disabled interrupts or from a</span>", 
"<span class=\"comment\"> * hardware interrupt handler or from a bottom half handler. Preemption</span>", 
"<span class=\"comment\"> * must be disabled when calling this function.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#smp_call_function_many\">smp_call_function_many</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void (*<a class=\"id\" href=\"#func\">func</a>)(void *), void *<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#call_function_data\">call_function_data</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#next_cpu\">next_cpu</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can deadlock when called with interrupts disabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We allow cpu's that are not yet online though, as no one else can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * send smp call function interrupt to this cpu and as such deadlocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can't happen.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>) && <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()", 
"<span class=\"ts\"/><span class=\"ts\"/>     && !<a class=\"id\" href=\"#oops_in_progress\">oops_in_progress</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* So, what's a CPU they want? Ignoring this one. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpumask_first_and\">cpumask_first_and</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpumask_next_and\">cpumask_next_and</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No online cpus?  We're done. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do we have another CPU which isn't us? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_cpu\">next_cpu</a> = <a class=\"id\" href=\"#cpumask_next_and\">cpumask_next_and</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_cpu\">next_cpu</a> == <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_cpu\">next_cpu</a> = <a class=\"id\" href=\"#cpumask_next_and\">cpumask_next_and</a>(<a class=\"id\" href=\"#next_cpu\">next_cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fastpath: do that cpu by itself. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_cpu\">next_cpu</a> >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cfd_data\">cfd_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csd_lock\">csd_lock</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#csd\">csd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#csd\">csd</a>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#csd\">csd</a>.<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#refs\">refs</a>, <a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>));", 
];
xr_frag_insert('l/84/2183cbf72d8d88d85029ae88761d366842e92e.xr', __xr_tmp);
