var __xr_tmp = [
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hard_irq_disable\">hard_irq_disable</a>()<span class=\"ts\"/>do { } while(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* PLEASE, avoid to allocate new softirqs, if you need not _really_ high</span>", 
"<span class=\"comment\">   frequency threaded job scheduling. For almost all the purposes</span>", 
"<span class=\"comment\">   tasklets are more than enough. F.e. all serial device BHs et</span>", 
"<span class=\"comment\">   al. should be converted to tasklets, not to softirqs.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HI_SOFTIRQ\">HI_SOFTIRQ</a>=0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TIMER_SOFTIRQ\">TIMER_SOFTIRQ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NET_TX_SOFTIRQ\">NET_TX_SOFTIRQ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NET_RX_SOFTIRQ\">NET_RX_SOFTIRQ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BLOCK_SOFTIRQ\">BLOCK_SOFTIRQ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BLOCK_IOPOLL_SOFTIRQ\">BLOCK_IOPOLL_SOFTIRQ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TASKLET_SOFTIRQ\">TASKLET_SOFTIRQ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCHED_SOFTIRQ\">SCHED_SOFTIRQ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HRTIMER_SOFTIRQ\">HRTIMER_SOFTIRQ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RCU_SOFTIRQ\">RCU_SOFTIRQ</a>,<span class=\"ts\"/><span class=\"comment\">/* Preferable RCU should always be the last softirq */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NR_SOFTIRQS\">NR_SOFTIRQS</a>", 
"};", 
"", 
"<span class=\"comment\">/* map softirq index to softirq name. update 'softirq_to_name' in</span>", 
"<span class=\"comment\"> * kernel/softirq.c when adding a new softirq.</span>", 
"<span class=\"comment\"> */</span>", 
"extern char *<a class=\"id\" href=\"#softirq_to_name\">softirq_to_name</a>[<a class=\"id\" href=\"#NR_SOFTIRQS\">NR_SOFTIRQS</a>];", 
"", 
"<span class=\"comment\">/* softirq mask and active fields moved to irq_cpustat_t in</span>", 
"<span class=\"comment\"> * asm/hardirq.h to get better cache usage.  KAO</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#softirq_action\">softirq_action</a>", 
"{", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#action\">action</a>)(struct <a class=\"id\" href=\"#softirq_action\">softirq_action</a> *);", 
"};", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#do_softirq\">do_softirq</a>(void);", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#__do_softirq\">__do_softirq</a>(void);", 
"extern void <a class=\"id\" href=\"#open_softirq\">open_softirq</a>(int <a class=\"id\" href=\"#nr\">nr</a>, void (*<a class=\"id\" href=\"#action\">action</a>)(struct <a class=\"id\" href=\"#softirq_action\">softirq_action</a> *));", 
"extern void <a class=\"id\" href=\"#softirq_init\">softirq_init</a>(void);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__raise_softirq_irqoff\">__raise_softirq_irqoff</a>(<a class=\"id\" href=\"#nr\">nr</a>) do { <a class=\"id\" href=\"#or_softirq_pending\">or_softirq_pending</a>(1UL << (<a class=\"id\" href=\"#nr\">nr</a>)); } while (0)", 
"extern void <a class=\"id\" href=\"#raise_softirq_irqoff\">raise_softirq_irqoff</a>(unsigned int <a class=\"id\" href=\"#nr\">nr</a>);", 
"extern void <a class=\"id\" href=\"#raise_softirq\">raise_softirq</a>(unsigned int <a class=\"id\" href=\"#nr\">nr</a>);", 
"extern void <a class=\"id\" href=\"#wakeup_softirqd\">wakeup_softirqd</a>(void);", 
"", 
"<span class=\"comment\">/* This is the worklist that queues up per-cpu softirq work.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * send_remote_sendirq() adds work to these lists, and</span>", 
"<span class=\"comment\"> * the softirq handler itself dequeues from them.  The queues</span>", 
"<span class=\"comment\"> * are protected by disabling local cpu interrupts and they must</span>", 
"<span class=\"comment\"> * only be accessed by the local cpu that they are for.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU\">DECLARE_PER_CPU</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> [<a class=\"id\" href=\"#NR_SOFTIRQS\">NR_SOFTIRQS</a>], <a class=\"id\" href=\"#softirq_work_list\">softirq_work_list</a>);", 
"", 
"<span class=\"comment\">/* Try to send a softirq to a remote cpu.  If this cannot be done, the</span>", 
"<span class=\"comment\"> * work will be queued to the local cpu.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#send_remote_softirq\">send_remote_softirq</a>(struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#cp\">cp</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#softirq\">softirq</a>);", 
"", 
"<span class=\"comment\">/* Like send_remote_softirq(), but the caller must disable local cpu interrupts</span>", 
"<span class=\"comment\"> * and compute the current cpu, passed in as 'this_cpu'.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#__send_remote_softirq\">__send_remote_softirq</a>(struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#cp\">cp</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, int <a class=\"id\" href=\"#softirq\">softirq</a>);", 
"", 
"<span class=\"comment\">/* Tasklets --- multithreaded analogue of BHs.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Main feature differing them of generic softirqs: tasklet</span>", 
"<span class=\"comment\">   is running only on one CPU simultaneously.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Main feature differing them of BHs: different tasklets</span>", 
"<span class=\"comment\">   may be run simultaneously on different CPUs.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Properties:</span>", 
"<span class=\"comment\">   * If tasklet_schedule() is called, then tasklet is guaranteed</span>", 
"<span class=\"comment\">     to be executed on some cpu at least once after this.</span>", 
"<span class=\"comment\">   * If the tasklet is already scheduled, but its excecution is still not</span>", 
"<span class=\"comment\">     started, it will be executed only once.</span>", 
"<span class=\"comment\">   * If this tasklet is already running on another CPU (or schedule is called</span>", 
"<span class=\"comment\">     from tasklet itself), it is rescheduled for later.</span>", 
"<span class=\"comment\">   * Tasklet is strictly serialized wrt itself, but not</span>", 
"<span class=\"comment\">     wrt another tasklets. If client needs some intertask synchronization,</span>", 
"<span class=\"comment\">     he makes it with spinlocks.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#func\">func</a>)(unsigned long);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#data\">data</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_TASKLET\">DECLARE_TASKLET</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#data\">data</a>) \\", 
"struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> <a class=\"id\" href=\"#name\">name</a> = { <a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0), <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#data\">data</a> }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_TASKLET_DISABLED\">DECLARE_TASKLET_DISABLED</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#data\">data</a>) \\", 
"struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> <a class=\"id\" href=\"#name\">name</a> = { <a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(1), <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#data\">data</a> }", 
"", 
"", 
"enum", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TASKLET_STATE_SCHED\">TASKLET_STATE_SCHED</a>,<span class=\"ts\"/><span class=\"comment\">/* Tasklet is scheduled for execution */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TASKLET_STATE_RUN\">TASKLET_STATE_RUN</a><span class=\"ts\"/><span class=\"comment\">/* Tasklet is running (SMP only) */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tasklet_trylock\">tasklet_trylock</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#TASKLET_STATE_RUN\">TASKLET_STATE_RUN</a>, &amp;(<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tasklet_unlock\">tasklet_unlock</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__before_clear_bit\">smp_mb__before_clear_bit</a>(); ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#TASKLET_STATE_RUN\">TASKLET_STATE_RUN</a>, &amp;(<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tasklet_unlock_wait\">tasklet_unlock_wait</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#TASKLET_STATE_RUN\">TASKLET_STATE_RUN</a>, &amp;(<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#state\">state</a>)) { <a class=\"id\" href=\"#barrier\">barrier</a>(); }", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tasklet_trylock\">tasklet_trylock</a>(<a class=\"id\" href=\"#t\">t</a>) 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tasklet_unlock_wait\">tasklet_unlock_wait</a>(<a class=\"id\" href=\"#t\">t</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tasklet_unlock\">tasklet_unlock</a>(<a class=\"id\" href=\"#t\">t</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#__tasklet_schedule\">__tasklet_schedule</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tasklet_schedule\">tasklet_schedule</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#TASKLET_STATE_SCHED\">TASKLET_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__tasklet_schedule\">__tasklet_schedule</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#__tasklet_hi_schedule\">__tasklet_hi_schedule</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tasklet_hi_schedule\">tasklet_hi_schedule</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#TASKLET_STATE_SCHED\">TASKLET_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__tasklet_hi_schedule\">__tasklet_hi_schedule</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#__tasklet_hi_schedule_first\">__tasklet_hi_schedule_first</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This version avoids touching any other tasklets. Needed for kmemcheck</span>", 
"<span class=\"comment\"> * in order not to take any page faults while enqueueing this tasklet;</span>", 
"<span class=\"comment\"> * consider VERY carefully whether you really need this or</span>", 
"<span class=\"comment\"> * tasklet_hi_schedule()...</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tasklet_hi_schedule_first\">tasklet_hi_schedule_first</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#TASKLET_STATE_SCHED\">TASKLET_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__tasklet_hi_schedule_first\">__tasklet_hi_schedule_first</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tasklet_disable_nosync\">tasklet_disable_nosync</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_atomic_inc\">smp_mb__after_atomic_inc</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tasklet_disable\">tasklet_disable</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tasklet_disable_nosync\">tasklet_disable_nosync</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tasklet_unlock_wait\">tasklet_unlock_wait</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tasklet_enable\">tasklet_enable</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__before_atomic_dec\">smp_mb__before_atomic_dec</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tasklet_hi_enable\">tasklet_hi_enable</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__before_atomic_dec\">smp_mb__before_atomic_dec</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#tasklet_kill\">tasklet_kill</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"extern void <a class=\"id\" href=\"#tasklet_kill_immediate\">tasklet_kill_immediate</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"extern void <a class=\"id\" href=\"#tasklet_init\">tasklet_init</a>(struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a> *<a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void (*<a class=\"id\" href=\"#func\">func</a>)(unsigned long), unsigned long <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"struct <a class=\"id\" href=\"#tasklet_hrtimer\">tasklet_hrtimer</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tasklet_struct\">tasklet_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#tasklet\">tasklet</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#function\">function</a>)(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *);", 
"};", 
"", 
"extern void", 
"<a class=\"id\" href=\"#tasklet_hrtimer_init\">tasklet_hrtimer_init</a>(struct <a class=\"id\" href=\"#tasklet_hrtimer\">tasklet_hrtimer</a> *<a class=\"id\" href=\"#ttimer\">ttimer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a> (*<a class=\"id\" href=\"#function\">function</a>)(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"int <a class=\"id\" href=\"#tasklet_hrtimer_start\">tasklet_hrtimer_start</a>(struct <a class=\"id\" href=\"#tasklet_hrtimer\">tasklet_hrtimer</a> *<a class=\"id\" href=\"#ttimer\">ttimer</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#time\">time</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const enum <a class=\"id\" href=\"#hrtimer_mode\">hrtimer_mode</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hrtimer_start\">hrtimer_start</a>(&amp;<a class=\"id\" href=\"#ttimer\">ttimer</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#time\">time</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#tasklet_hrtimer_cancel\">tasklet_hrtimer_cancel</a>(struct <a class=\"id\" href=\"#tasklet_hrtimer\">tasklet_hrtimer</a> *<a class=\"id\" href=\"#ttimer\">ttimer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(&amp;<a class=\"id\" href=\"#ttimer\">ttimer</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tasklet_kill\">tasklet_kill</a>(&amp;<a class=\"id\" href=\"#ttimer\">ttimer</a>-><a class=\"id\" href=\"#tasklet\">tasklet</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Autoprobing for irqs:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * probe_irq_on() and probe_irq_off() provide robust primitives</span>", 
"<span class=\"comment\"> * for accurate IRQ probing during kernel initialization.  They are</span>", 
"<span class=\"comment\"> * reasonably simple to use, are not \"fooled\" by spurious interrupts,</span>", 
"<span class=\"comment\"> * and, unlike other attempts at IRQ probing, they do not get hung on</span>", 
"<span class=\"comment\"> * stuck interrupts (such as unused PS2 mouse interfaces on ASUS boards).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For reasonably foolproof probing, use them as follows:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1. clear and/or mask the device's internal interrupt.</span>", 
"<span class=\"comment\"> * 2. sti();</span>", 
"<span class=\"comment\"> * 3. irqs = probe_irq_on();      // \"take over\" all unassigned idle IRQs</span>", 
"<span class=\"comment\"> * 4. enable the device and cause it to trigger an interrupt.</span>", 
"<span class=\"comment\"> * 5. wait for the device to interrupt, using non-intrusive polling or a delay.</span>", 
"<span class=\"comment\"> * 6. irq = probe_irq_off(irqs);  // get IRQ number, 0=none, negative=multiple</span>", 
"<span class=\"comment\"> * 7. service the device to clear its pending interrupt.</span>", 
"<span class=\"comment\"> * 8. loop again if paranoia is required.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * probe_irq_on() returns a mask of allocated irq's.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * probe_irq_off() takes the mask as a parameter,</span>", 
"<span class=\"comment\"> * and returns the irq number which occurred,</span>", 
"<span class=\"comment\"> * or zero if none occurred, or a negative irq number</span>", 
"<span class=\"comment\"> * if more than one irq occurred.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_GENERIC_HARDIRQS\">CONFIG_GENERIC_HARDIRQS</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_GENERIC_IRQ_PROBE\">CONFIG_GENERIC_IRQ_PROBE</a>) ", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#probe_irq_on\">probe_irq_on</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#probe_irq_off\">probe_irq_off</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#probe_irq_mask\">probe_irq_mask</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"extern unsigned long <a class=\"id\" href=\"#probe_irq_on\">probe_irq_on</a>(void);<span class=\"ts\"/><span class=\"comment\">/* returns 0 on failure */</span>", 
"extern int <a class=\"id\" href=\"#probe_irq_off\">probe_irq_off</a>(unsigned long);<span class=\"ts\"/><span class=\"comment\">/* returns 0 or negative on failure */</span>", 
"extern unsigned int <a class=\"id\" href=\"#probe_irq_mask\">probe_irq_mask</a>(unsigned long);<span class=\"ts\"/><span class=\"comment\">/* returns mask of ISA interrupts */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"comment\">/* Initialize /proc/irq/ */</span>", 
"extern void <a class=\"id\" href=\"#init_irq_proc\">init_irq_proc</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_irq_proc\">init_irq_proc</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#seq_file\">seq_file</a>;", 
"int <a class=\"id\" href=\"#show_interrupts\">show_interrupts</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#v\">v</a>);", 
"", 
"struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a>;", 
"", 
"extern int <a class=\"id\" href=\"#early_irq_init\">early_irq_init</a>(void);", 
"extern int <a class=\"id\" href=\"#arch_probe_nr_irqs\">arch_probe_nr_irqs</a>(void);", 
"extern int <a class=\"id\" href=\"#arch_early_irq_init\">arch_early_irq_init</a>(void);", 
"extern int <a class=\"id\" href=\"#arch_init_chip_data\">arch_init_chip_data</a>(struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/84/3341c357ea186e1bbe72442d23654f0987d360.xr', __xr_tmp);
