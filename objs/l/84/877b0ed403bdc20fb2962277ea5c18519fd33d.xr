var __xr_tmp = [
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#info\">info</a>, 0, sizeof(struct <a class=\"id\" href=\"#swsusp_info\">swsusp_info</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_physpages\">num_physpages</a> = <a class=\"id\" href=\"#num_physpages\">num_physpages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#image_pages\">image_pages</a> = <a class=\"id\" href=\"#nr_copy_pages\">nr_copy_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#snapshot_get_image_size\">snapshot_get_image_size</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#size\">size</a> <<= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#init_header_complete\">init_header_complete</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pack_pfns - pfns corresponding to the set bits found in the bitmap @bm</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are stored in the array @buf[] (1 page at a time)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#pack_pfns\">pack_pfns</a>(unsigned long *<a class=\"id\" href=\"#buf\">buf</a>, struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / sizeof(long); <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#j\">j</a>] = <a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#j\">j</a>] == <a class=\"id\" href=\"#BM_END_OF_MAP\">BM_END_OF_MAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>snapshot_read_next - used for reading the system memory snapshot.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On the first call to it @handle should point to a zeroed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>snapshot_handle structure.  The structure gets updated and a pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to it should be passed to this function every next time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On success the function returns a positive number.  Then, the caller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is allowed to read up to the returned number of bytes from the memory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>location computed by the data_of() macro.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The function returns 0 to indicate the end of data stream condition,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and a negative number is returned on error.  In such cases the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>structure pointed to by @handle is not updated and should not be used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>any more.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#snapshot_read_next\">snapshot_read_next</a>(struct <a class=\"id\" href=\"#snapshot_handle\">snapshot_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#cur\">cur</a> &gt; <a class=\"id\" href=\"#nr_meta_pages\">nr_meta_pages</a> + <a class=\"id\" href=\"#nr_copy_pages\">nr_copy_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This makes the buffer be freed by swsusp_free() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#get_image_page\">get_image_page</a>(<a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>, <a class=\"id\" href=\"#PG_ANY\">PG_ANY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#cur\">cur</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#init_header\">init_header</a>((struct <a class=\"id\" href=\"#swsusp_info\">swsusp_info</a> *)<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(&amp;<a class=\"id\" href=\"#orig_bm\">orig_bm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(&amp;<a class=\"id\" href=\"#copy_bm\">copy_bm</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#cur\">cur</a> <= <a class=\"id\" href=\"#nr_meta_pages\">nr_meta_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, 0, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pack_pfns\">pack_pfns</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#orig_bm\">orig_bm</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(&amp;<a class=\"id\" href=\"#copy_bm\">copy_bm</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Highmem pages are copied to the buffer,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * because we can't return with a kmapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * highmem page (we may not be called again).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#kaddr\">kaddr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kaddr\">kaddr</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#kaddr\">kaddr</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#kaddr\">kaddr</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#cur\">cur</a>++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mark_unsafe_pages - mark the pages that cannot be used for storing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the image during resume, because they conflict with the pages that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>had been used before suspend</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#mark_unsafe_pages\">mark_unsafe_pages</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear page flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_unset_page_free\">swsusp_unset_page_free</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Mark pages that correspond to the \"original\" pfns as \"unsafe\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#pfn\">pfn</a> != <a class=\"id\" href=\"#BM_END_OF_MAP\">BM_END_OF_MAP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_set_page_free\">swsusp_set_page_free</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pfn\">pfn</a> != <a class=\"id\" href=\"#BM_END_OF_MAP\">BM_END_OF_MAP</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allocated_unsafe_pages\">allocated_unsafe_pages</a> = 0;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#duplicate_memory_bitmap\">duplicate_memory_bitmap</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pfn\">pfn</a> != <a class=\"id\" href=\"#BM_END_OF_MAP\">BM_END_OF_MAP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_set_bit\">memory_bm_set_bit</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#check_header\">check_header</a>(struct <a class=\"id\" href=\"#swsusp_info\">swsusp_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#reason\">reason</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = <a class=\"id\" href=\"#check_image_kernel\">check_image_kernel</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#reason\">reason</a> && <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_physpages\">num_physpages</a> != <a class=\"id\" href=\"#num_physpages\">num_physpages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = \"memory size\";", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reason\">reason</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PM: Image mismatch: %s\\n\", <a class=\"id\" href=\"#reason\">reason</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>load header - check the image header and copy data from it</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int", 
"<a class=\"id\" href=\"#load_header\">load_header</a>(struct <a class=\"id\" href=\"#swsusp_info\">swsusp_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restore_pblist\">restore_pblist</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#check_header\">check_header</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_copy_pages\">nr_copy_pages</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#image_pages\">image_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_meta_pages\">nr_meta_pages</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#pages\">pages</a> - <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#image_pages\">image_pages</a> - 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unpack_orig_pfns - for each element of @buf[] (1 page at a time) set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the corresponding bit in the memory bitmap @bm</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unpack_orig_pfns\">unpack_orig_pfns</a>(unsigned long *<a class=\"id\" href=\"#buf\">buf</a>, struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / sizeof(long); <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#j\">j</a>] == <a class=\"id\" href=\"#BM_END_OF_MAP\">BM_END_OF_MAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memory_bm_pfn_present\">memory_bm_pfn_present</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#j\">j</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_set_bit\">memory_bm_set_bit</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* List of \"safe\" pages that may be used to store data loaded from the suspend</span>", 
"<span class=\"comment\"> * image</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#linked_page\">linked_page</a> *<a class=\"id\" href=\"#safe_pages_list\">safe_pages_list</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"comment\">/* struct highmem_pbe is used for creating the list of highmem pages that</span>", 
"<span class=\"comment\"> * should be restored atomically during the resume from disk, because the page</span>", 
"<span class=\"comment\"> * frames they have occupied before the suspend are in use.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#highmem_pbe\">highmem_pbe</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#copy_page\">copy_page</a>;<span class=\"ts\"/><span class=\"comment\">/* data is here now */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#orig_page\">orig_page</a>;<span class=\"ts\"/><span class=\"comment\">/* data was here before the suspend */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#highmem_pbe\">highmem_pbe</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"};", 
"", 
"<span class=\"comment\">/* List of highmem PBEs needed for restoring the highmem pages that were</span>", 
"<span class=\"comment\"> * allocated before the suspend and included in the suspend image, but have</span>", 
"<span class=\"comment\"> * also been allocated by the \"resume\" kernel, so their contents cannot be</span>", 
"<span class=\"comment\"> * written directly to their \"original\" page frames.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#highmem_pbe\">highmem_pbe</a> *<a class=\"id\" href=\"#highmem_pblist\">highmem_pblist</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>count_highmem_image_pages - compute the number of highmem pages in the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>suspend image.  The bits in the memory bitmap @bm that correspond to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>image pages are assumed to be set.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static unsigned int <a class=\"id\" href=\"#count_highmem_image_pages\">count_highmem_image_pages</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cnt\">cnt</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pfn\">pfn</a> != <a class=\"id\" href=\"#BM_END_OF_MAP\">BM_END_OF_MAP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>prepare_highmem_image - try to allocate as many highmem pages as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>there are highmem image pages (@nr_highmem_p points to the variable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>containing the number of highmem image pages).  The pages that are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>\"safe\" (ie. will not be overwritten when the suspend image is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>restored) have the corresponding bits set in @bm (it must be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unitialized).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NOTE: This function should not be called if there are no highmem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>image pages.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static unsigned int <a class=\"id\" href=\"#safe_highmem_pages\">safe_highmem_pages</a>;", 
"", 
"static struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#safe_highmem_bm\">safe_highmem_bm</a>;", 
"", 
"static int", 
"<a class=\"id\" href=\"#prepare_highmem_image\">prepare_highmem_image</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, unsigned int *<a class=\"id\" href=\"#nr_highmem_p\">nr_highmem_p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#to_alloc\">to_alloc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memory_bm_create\">memory_bm_create</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>, <a class=\"id\" href=\"#PG_SAFE\">PG_SAFE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_highmem_buffer\">get_highmem_buffer</a>(<a class=\"id\" href=\"#PG_SAFE\">PG_SAFE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to_alloc\">to_alloc</a> = <a class=\"id\" href=\"#count_free_highmem_pages\">count_free_highmem_pages</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to_alloc\">to_alloc</a> &gt; *<a class=\"id\" href=\"#nr_highmem_p\">nr_highmem_p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_alloc\">to_alloc</a> = *<a class=\"id\" href=\"#nr_highmem_p\">nr_highmem_p</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nr_highmem_p\">nr_highmem_p</a> = <a class=\"id\" href=\"#to_alloc\">to_alloc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#safe_highmem_pages\">safe_highmem_pages</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#to_alloc\">to_alloc</a>-- &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#swsusp_page_is_free\">swsusp_page_is_free</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The page is \"safe\", set its bit the bitmap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_set_bit\">memory_bm_set_bit</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#safe_highmem_pages\">safe_highmem_pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mark the page as allocated */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_set_page_forbidden\">swsusp_set_page_forbidden</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_set_page_free\">swsusp_set_page_free</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_position_reset\">memory_bm_position_reset</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#safe_highmem_bm\">safe_highmem_bm</a> = <a class=\"id\" href=\"#bm\">bm</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>get_highmem_page_buffer - for given highmem image page find the buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that suspend_write_next() should set for its caller to write to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the page is to be saved to its \"original\" page frame or a copy of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the page is to be made in the highmem, @buffer is returned.  Otherwise,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the copy of the page is to be made in normal memory, so the address of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the copy is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If @buffer is returned, the caller of suspend_write_next() will write</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the page's contents to @buffer, so they will have to be copied to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>right location on the next call to suspend_write_next() and it is done</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with the help of copy_last_highmem_page().  For this purpose, if</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buffer is returned, @last_highmem page is set to the page to which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the data will have to be copied from @buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#last_highmem_page\">last_highmem_page</a>;", 
"", 
"static void *", 
"<a class=\"id\" href=\"#get_highmem_page_buffer\">get_highmem_page_buffer</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#chain_allocator\">chain_allocator</a> *<a class=\"id\" href=\"#ca\">ca</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#highmem_pbe\">highmem_pbe</a> *<a class=\"id\" href=\"#pbe\">pbe</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#kaddr\">kaddr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swsusp_page_is_forbidden\">swsusp_page_is_forbidden</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#swsusp_page_is_free\">swsusp_page_is_free</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have allocated the \"original\" page frame and we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * use it directly to store the loaded page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_highmem_page\">last_highmem_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* The \"original\" page frame has not been allocated and we have to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use a \"safe\" page frame to store the loaded page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pbe\">pbe</a> = <a class=\"id\" href=\"#chain_alloc\">chain_alloc</a>(<a class=\"id\" href=\"#ca\">ca</a>, sizeof(struct <a class=\"id\" href=\"#highmem_pbe\">highmem_pbe</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pbe\">pbe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_free\">swsusp_free</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pbe\">pbe</a>-><a class=\"id\" href=\"#orig_page\">orig_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#safe_highmem_pages\">safe_highmem_pages</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Copy of the page will be stored in high memory */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kaddr\">kaddr</a> = <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(<a class=\"id\" href=\"#safe_highmem_bm\">safe_highmem_bm</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#safe_highmem_pages\">safe_highmem_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_highmem_page\">last_highmem_page</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pbe\">pbe</a>-><a class=\"id\" href=\"#copy_page\">copy_page</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Copy of the page will be stored in normal memory */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kaddr\">kaddr</a> = <a class=\"id\" href=\"#safe_pages_list\">safe_pages_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#safe_pages_list\">safe_pages_list</a> = <a class=\"id\" href=\"#safe_pages_list\">safe_pages_list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pbe\">pbe</a>-><a class=\"id\" href=\"#copy_page\">copy_page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#kaddr\">kaddr</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pbe\">pbe</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#highmem_pblist\">highmem_pblist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#highmem_pblist\">highmem_pblist</a> = <a class=\"id\" href=\"#pbe\">pbe</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kaddr\">kaddr</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>copy_last_highmem_page - copy the contents of a highmem image from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buffer, where the caller of snapshot_write_next() has place them,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to the right location represented by @last_highmem_page .</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#copy_last_highmem_page\">copy_last_highmem_page</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last_highmem_page\">last_highmem_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#dst\">dst</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#last_highmem_page\">last_highmem_page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_highmem_page\">last_highmem_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#last_highmem_page_copied\">last_highmem_page_copied</a>(void)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#last_highmem_page\">last_highmem_page</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_highmem_data\">free_highmem_data</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#safe_highmem_bm\">safe_highmem_bm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_free\">memory_bm_free</a>(<a class=\"id\" href=\"#safe_highmem_bm\">safe_highmem_bm</a>, <a class=\"id\" href=\"#PG_UNSAFE_CLEAR\">PG_UNSAFE_CLEAR</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_image_page\">free_image_page</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#PG_UNSAFE_CLEAR\">PG_UNSAFE_CLEAR</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#get_safe_write_buffer\">get_safe_write_buffer</a>(void) { return 0; }", 
"", 
"static unsigned int", 
"<a class=\"id\" href=\"#count_highmem_image_pages\">count_highmem_image_pages</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>) { return 0; }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#prepare_highmem_image\">prepare_highmem_image</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, unsigned int *<a class=\"id\" href=\"#nr_highmem_p\">nr_highmem_p</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *", 
"<a class=\"id\" href=\"#get_highmem_page_buffer\">get_highmem_page_buffer</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#chain_allocator\">chain_allocator</a> *<a class=\"id\" href=\"#ca\">ca</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#copy_last_highmem_page\">copy_last_highmem_page</a>(void) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#last_highmem_page_copied\">last_highmem_page_copied</a>(void) { return 1; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_highmem_data\">free_highmem_data</a>(void) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIGHMEM */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>prepare_image - use the memory bitmap @bm to mark the pages that will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be overwritten in the process of restoring the system memory state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from the suspend image (\"unsafe\" pages) and allocate memory for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>image.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The idea is to allocate a new memory bitmap first and then allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as many pages as needed for the image data, but not to assign these</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pages to specific tasks initially.  Instead, we just mark them as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocated and create a lists of \"safe\" pages that will be used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>later.  On systems with high memory a list of \"safe\" highmem pages is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>also created.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PBES_PER_LINKED_PAGE\">PBES_PER_LINKED_PAGE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#LINKED_PAGE_DATA_SIZE\">LINKED_PAGE_DATA_SIZE</a> / sizeof(struct <a class=\"id\" href=\"#pbe\">pbe</a>))", 
"", 
"static int", 
"<a class=\"id\" href=\"#prepare_image\">prepare_image</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#new_bm\">new_bm</a>, struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linked_page\">linked_page</a> *<a class=\"id\" href=\"#sp_list\">sp_list</a>, *<a class=\"id\" href=\"#lp\">lp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If there is no highmem, the buffer will not be necessary */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_image_page\">free_image_page</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#PG_UNSAFE_CLEAR\">PG_UNSAFE_CLEAR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_highmem\">nr_highmem</a> = <a class=\"id\" href=\"#count_highmem_image_pages\">count_highmem_image_pages</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mark_unsafe_pages\">mark_unsafe_pages</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Free\">Free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#memory_bm_create\">memory_bm_create</a>(<a class=\"id\" href=\"#new_bm\">new_bm</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>, <a class=\"id\" href=\"#PG_SAFE\">PG_SAFE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Free\">Free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#duplicate_memory_bitmap\">duplicate_memory_bitmap</a>(<a class=\"id\" href=\"#new_bm\">new_bm</a>, <a class=\"id\" href=\"#bm\">bm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memory_bm_free\">memory_bm_free</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#PG_UNSAFE_KEEP\">PG_UNSAFE_KEEP</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_highmem\">nr_highmem</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#prepare_highmem_image\">prepare_highmem_image</a>(<a class=\"id\" href=\"#bm\">bm</a>, &amp;<a class=\"id\" href=\"#nr_highmem\">nr_highmem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Free\">Free</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Reserve some safe pages for potential later use.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: This way we make sure there will be enough safe pages for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * chain_alloc() in get_buffer().  It is a bit wasteful, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nr_copy_pages cannot be greater than 50% of the memory anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp_list\">sp_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* nr_copy_pages cannot be lesser than allocated_unsafe_pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#nr_copy_pages\">nr_copy_pages</a> - <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a> - <a class=\"id\" href=\"#allocated_unsafe_pages\">allocated_unsafe_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#PBES_PER_LINKED_PAGE\">PBES_PER_LINKED_PAGE</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a> = <a class=\"id\" href=\"#get_image_page\">get_image_page</a>(<a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>, <a class=\"id\" href=\"#PG_SAFE\">PG_SAFE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#lp\">lp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Free\">Free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#sp_list\">sp_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp_list\">sp_list</a> = <a class=\"id\" href=\"#lp\">lp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Preallocate memory for the image */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#safe_pages_list\">safe_pages_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#nr_copy_pages\">nr_copy_pages</a> - <a class=\"id\" href=\"#nr_highmem\">nr_highmem</a> - <a class=\"id\" href=\"#allocated_unsafe_pages\">allocated_unsafe_pages</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a> = (struct <a class=\"id\" href=\"#linked_page\">linked_page</a> *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#lp\">lp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Free\">Free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#swsusp_page_is_free\">swsusp_page_is_free</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#lp\">lp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The page is \"safe\", add it to the list */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#safe_pages_list\">safe_pages_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#safe_pages_list\">safe_pages_list</a> = <a class=\"id\" href=\"#lp\">lp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mark the page as allocated */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_set_page_forbidden\">swsusp_set_page_forbidden</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#lp\">lp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_set_page_free\">swsusp_set_page_free</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#lp\">lp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the reserved safe pages so that chain_alloc() can use them */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#sp_list\">sp_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a> = <a class=\"id\" href=\"#sp_list\">sp_list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_image_page\">free_image_page</a>(<a class=\"id\" href=\"#sp_list\">sp_list</a>, <a class=\"id\" href=\"#PG_UNSAFE_CLEAR\">PG_UNSAFE_CLEAR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp_list\">sp_list</a> = <a class=\"id\" href=\"#lp\">lp</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#Free\">Free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swsusp_free\">swsusp_free</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>get_buffer - compute the address that snapshot_write_next() should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>set for its caller to write to.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void *<a class=\"id\" href=\"#get_buffer\">get_buffer</a>(struct <a class=\"id\" href=\"#memory_bitmap\">memory_bitmap</a> *<a class=\"id\" href=\"#bm\">bm</a>, struct <a class=\"id\" href=\"#chain_allocator\">chain_allocator</a> *<a class=\"id\" href=\"#ca\">ca</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pbe\">pbe</a> *<a class=\"id\" href=\"#pbe\">pbe</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#memory_bm_next_pfn\">memory_bm_next_pfn</a>(<a class=\"id\" href=\"#bm\">bm</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn\">pfn</a> == <a class=\"id\" href=\"#BM_END_OF_MAP\">BM_END_OF_MAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EFAULT\">EFAULT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#get_highmem_page_buffer\">get_highmem_page_buffer</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ca\">ca</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swsusp_page_is_forbidden\">swsusp_page_is_forbidden</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#swsusp_page_is_free\">swsusp_page_is_free</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have allocated the \"original\" page frame and we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * use it directly to store the loaded page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The \"original\" page frame has not been allocated and we have to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use a \"safe\" page frame to store the loaded page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pbe\">pbe</a> = <a class=\"id\" href=\"#chain_alloc\">chain_alloc</a>(<a class=\"id\" href=\"#ca\">ca</a>, sizeof(struct <a class=\"id\" href=\"#pbe\">pbe</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pbe\">pbe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_free\">swsusp_free</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pbe\">pbe</a>-><a class=\"id\" href=\"#orig_address\">orig_address</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pbe\">pbe</a>-><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#safe_pages_list\">safe_pages_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#safe_pages_list\">safe_pages_list</a> = <a class=\"id\" href=\"#safe_pages_list\">safe_pages_list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pbe\">pbe</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#restore_pblist\">restore_pblist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restore_pblist\">restore_pblist</a> = <a class=\"id\" href=\"#pbe\">pbe</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pbe\">pbe</a>-><a class=\"id\" href=\"#address\">address</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>snapshot_write_next - used for writing the system memory snapshot.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On the first call to it @handle should point to a zeroed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>snapshot_handle structure.  The structure gets updated and a pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to it should be passed to this function every next time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On success the function returns a positive number.  Then, the caller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is allowed to write up to the returned number of bytes to the memory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>location computed by the data_of() macro.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The function returns 0 to indicate the \"end of file\" condition,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and a negative number is returned on error.  In such cases the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>structure pointed to by @handle is not updated and should not be used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>any more.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#snapshot_write_next\">snapshot_write_next</a>(struct <a class=\"id\" href=\"#snapshot_handle\">snapshot_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#chain_allocator\">chain_allocator</a> <a class=\"id\" href=\"#ca\">ca</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if we have already loaded the entire image */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#cur\">cur</a> &gt; 1 && <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#cur\">cur</a> &gt; <a class=\"id\" href=\"#nr_meta_pages\">nr_meta_pages</a> + <a class=\"id\" href=\"#nr_copy_pages\">nr_copy_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#sync_read\">sync_read</a> = 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#cur\">cur</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This makes the buffer be freed by swsusp_free() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#get_image_page\">get_image_page</a>(<a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>, <a class=\"id\" href=\"#PG_ANY\">PG_ANY</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#cur\">cur</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#load_header\">load_header</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#memory_bm_create\">memory_bm_create</a>(&amp;<a class=\"id\" href=\"#copy_bm\">copy_bm</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>, <a class=\"id\" href=\"#PG_ANY\">PG_ANY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#cur\">cur</a> <= <a class=\"id\" href=\"#nr_meta_pages\">nr_meta_pages</a> + 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#unpack_orig_pfns\">unpack_orig_pfns</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#copy_bm\">copy_bm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
];
xr_frag_insert('l/84/877b0ed403bdc20fb2962277ea5c18519fd33d.xr', __xr_tmp);
