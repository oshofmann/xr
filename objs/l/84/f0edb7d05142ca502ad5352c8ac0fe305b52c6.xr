var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_HASH_H\">_LINUX_HASH_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_HASH_H\">_LINUX_HASH_H</a>", 
"<span class=\"comment\">/* Fast hashing routine for ints,  longs and pointers.</span>", 
"<span class=\"comment\">   (C) 2002 William Lee Irwin III, IBM */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Knuth recommends primes in approximately golden ratio to the maximum</span>", 
"<span class=\"comment\"> * integer representable by a machine word for multiplicative hashing.</span>", 
"<span class=\"comment\"> * Chuck Lever verified the effectiveness of this technique:</span>", 
"<span class=\"comment\"> * http://www.citi.umich.edu/techreports/reports/citi-tr-00-1.pdf</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These primes are chosen to be bit-sparse, that is operations on</span>", 
"<span class=\"comment\"> * them can use shifts and additions instead of multiplications for</span>", 
"<span class=\"comment\"> * machines where multiplications are slow.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* 2^31 + 2^29 - 2^25 + 2^22 - 2^19 - 2^16 + 1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GOLDEN_RATIO_PRIME_32\">GOLDEN_RATIO_PRIME_32</a> 0x9e370001UL", 
"<span class=\"comment\">/*  2^63 + 2^61 - 2^57 + 2^54 - 2^51 - 2^18 + 1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GOLDEN_RATIO_PRIME_64\">GOLDEN_RATIO_PRIME_64</a> 0x9e37fffffffc0001UL", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GOLDEN_RATIO_PRIME\">GOLDEN_RATIO_PRIME</a> <a class=\"id\" href=\"#GOLDEN_RATIO_PRIME_32\">GOLDEN_RATIO_PRIME_32</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#bits\">bits</a>) <a class=\"id\" href=\"#hash_32\">hash_32</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#bits\">bits</a>)", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#bits\">bits</a>) <a class=\"id\" href=\"#hash_64\">hash_64</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#bits\">bits</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GOLDEN_RATIO_PRIME\">GOLDEN_RATIO_PRIME</a> <a class=\"id\" href=\"#GOLDEN_RATIO_PRIME_64\">GOLDEN_RATIO_PRIME_64</a>", 
"#else", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#Wordsize\">Wordsize</a> <a class=\"id\" href=\"#not\">not</a> 32 <a class=\"id\" href=\"#or\">or</a> 64", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hash_64\">hash_64</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>, unsigned int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*  Sigh, gcc can't optimise this alone like it does for 32 bits. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> <<= 18;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> <<= 33;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> <<= 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> <<= 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> -= <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> <<= 4;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> <<= 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> += <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* High bits are more random, so use them. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hash\">hash</a> >> (64 - <a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash_32\">hash_32</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>, unsigned int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* On some cpus multiply is faster, on others gcc will do shifts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#val\">val</a> * <a class=\"id\" href=\"#GOLDEN_RATIO_PRIME_32\">GOLDEN_RATIO_PRIME_32</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* High bits are more random, so use them. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hash\">hash</a> >> (32 - <a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>, unsigned int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hash_long\">hash_long</a>((unsigned long)<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_HASH_H */</span>", 
];
xr_frag_insert('l/84/f0edb7d05142ca502ad5352c8ac0fe305b52c6.xr', __xr_tmp);
