var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_cache_leaves\">num_cache_leaves</a> = 3;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> >= 0xf)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_K8\">X86_FEATURE_K8</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_xmm2\">cpu_has_xmm2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* MFENCE stops RDTSC speculation */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_MFENCE_RDTSC\">X86_FEATURE_MFENCE_RDTSC</a>);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 0x10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do this for boot cpu */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == &amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_enable_amd_mmconf_dmi\">check_enable_amd_mmconf_dmi</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fam10h_check_enable_mmcfg\">fam10h_check_enable_mmcfg</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == &amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a> && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> >= 0xf) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#tseg\">tseg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Split up direct mapping around the TSEG SMM area.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't do it for gbpages because there seems very little</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * benefit in doing so.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rdmsrl_safe\">rdmsrl_safe</a>(<a class=\"id\" href=\"#MSR_K8_TSEG_ADDR\">MSR_K8_TSEG_ADDR</a>, &amp;<a class=\"id\" href=\"#tseg\">tseg</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"tseg: %010llx\\n\", <a class=\"id\" href=\"#tseg\">tseg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#tseg\">tseg</a>>><a class=\"id\" href=\"#PMD_SHIFT\">PMD_SHIFT</a>) &lt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#max_low_pfn_mapped\">max_low_pfn_mapped</a>>>(<a class=\"id\" href=\"#PMD_SHIFT\">PMD_SHIFT</a>-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#tseg\">tseg</a>>><a class=\"id\" href=\"#PMD_SHIFT\">PMD_SHIFT</a>) &lt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#max_pfn_mapped\">max_pfn_mapped</a>>>(<a class=\"id\" href=\"#PMD_SHIFT\">PMD_SHIFT</a>-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#tseg\">tseg</a>>><a class=\"id\" href=\"#PMD_SHIFT\">PMD_SHIFT</a>) >= (1ULL<<(32 - <a class=\"id\" href=\"#PMD_SHIFT\">PMD_SHIFT</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_memory_4k\">set_memory_4k</a>((unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#tseg\">tseg</a>), 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"static unsigned int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#amd_size_cache\">amd_size_cache</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* AMD errata T13 (order #21922) */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Duron Rev A0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 3 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 64;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Tbird rev A1/A2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 4 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 0 || <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 256;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static const struct <a class=\"id\" href=\"#cpu_dev\">cpu_dev</a> <a class=\"id\" href=\"#__cpuinitconst\">__cpuinitconst</a> <a class=\"id\" href=\"#amd_cpu_dev\">amd_cpu_dev</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_vendor\">c_vendor</a><span class=\"ts\"/>= \"AMD\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_ident\">c_ident</a><span class=\"ts\"/>= { \"AuthenticAMD\" },", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_models\">c_models</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>, .<a class=\"id\" href=\"#family\">family</a> = 4, .<a class=\"id\" href=\"#model_names\">model_names</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>  {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [3] = \"486 DX/2\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [7] = \"486 DX/2-WB\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [8] = \"486 DX/4\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [9] = \"486 DX/4-WB\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [14] = \"Am5x86-WT\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [15] = \"Am5x86-WB\"", 
"<span class=\"ts\"/><span class=\"ts\"/>  }", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_size_cache\">c_size_cache</a><span class=\"ts\"/>= <a class=\"id\" href=\"#amd_size_cache\">amd_size_cache</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_early_init\">c_early_init</a>   = <a class=\"id\" href=\"#early_init_amd\">early_init_amd</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_init\">c_init</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#init_amd\">init_amd</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_x86_vendor\">c_x86_vendor</a><span class=\"ts\"/>= <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>,", 
"};", 
"", 
"<a class=\"id\" href=\"#cpu_dev_register\">cpu_dev_register</a>(<a class=\"id\" href=\"#amd_cpu_dev\">amd_cpu_dev</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * AMD errata checking</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Errata are defined as arrays of ints using the AMD_LEGACY_ERRATUM() or</span>", 
"<span class=\"comment\"> * AMD_OSVW_ERRATUM() macros. The latter is intended for newer errata that</span>", 
"<span class=\"comment\"> * have an OSVW id assigned, which it takes as first argument. Both take a</span>", 
"<span class=\"comment\"> * variable number of family-specific model-stepping ranges created by</span>", 
"<span class=\"comment\"> * AMD_MODEL_RANGE(). Each erratum also has to be declared as extern const</span>", 
"<span class=\"comment\"> * int[] in arch/x86/include/asm/processor.h.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Example:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * const int amd_erratum_319[] =</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>AMD_LEGACY_ERRATUM(AMD_MODEL_RANGE(0x10, 0x2, 0x1, 0x4, 0x2),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   AMD_MODEL_RANGE(0x10, 0x8, 0x0, 0x8, 0x0),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   AMD_MODEL_RANGE(0x10, 0x9, 0x0, 0x9, 0x0));</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"const int <a class=\"id\" href=\"#amd_erratum_400\">amd_erratum_400</a>[] =", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AMD_OSVW_ERRATUM\">AMD_OSVW_ERRATUM</a>(1, <a class=\"id\" href=\"#AMD_MODEL_RANGE\">AMD_MODEL_RANGE</a>(0xf, 0x41, 0x2, 0xff, 0xf),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#AMD_MODEL_RANGE\">AMD_MODEL_RANGE</a>(0x10, 0x2, 0x1, 0xff, 0xf));", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#amd_erratum_400\">amd_erratum_400</a>);", 
"", 
"const int <a class=\"id\" href=\"#amd_erratum_383\">amd_erratum_383</a>[] =", 
"<span class=\"ts\"/><a class=\"id\" href=\"#AMD_OSVW_ERRATUM\">AMD_OSVW_ERRATUM</a>(3, <a class=\"id\" href=\"#AMD_MODEL_RANGE\">AMD_MODEL_RANGE</a>(0x10, 0, 0, 0xff, 0xf));", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#amd_erratum_383\">amd_erratum_383</a>);", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cpu_has_amd_erratum\">cpu_has_amd_erratum</a>(const int *<a class=\"id\" href=\"#erratum\">erratum</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#cpu\">cpu</a> = &amp;<a class=\"id\" href=\"#current_cpu_data\">current_cpu_data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#osvw_id\">osvw_id</a> = *<a class=\"id\" href=\"#erratum\">erratum</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#range\">range</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ms\">ms</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If called early enough that current_cpu_data hasn't been initialized</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * yet, fall back to boot_cpu_data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#x86\">x86</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = &amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> != <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#osvw_id\">osvw_id</a> >= 0 && <a class=\"id\" href=\"#osvw_id\">osvw_id</a> &lt; 65536 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#X86_FEATURE_OSVW\">X86_FEATURE_OSVW</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#osvw_len\">osvw_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_AMD64_OSVW_ID_LENGTH\">MSR_AMD64_OSVW_ID_LENGTH</a>, <a class=\"id\" href=\"#osvw_len\">osvw_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#osvw_id\">osvw_id</a> &lt; <a class=\"id\" href=\"#osvw_len\">osvw_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#osvw_bits\">osvw_bits</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_AMD64_OSVW_STATUS\">MSR_AMD64_OSVW_STATUS</a> + (<a class=\"id\" href=\"#osvw_id\">osvw_id</a> >> 6),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#osvw_bits\">osvw_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#osvw_bits\">osvw_bits</a> &amp; (1ULL << (<a class=\"id\" href=\"#osvw_id\">osvw_id</a> &amp; 0x3f));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* OSVW unavailable or ID unknown, match family-model-stepping range */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = (<a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> << 4) | <a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#range\">range</a> = *<a class=\"id\" href=\"#erratum\">erratum</a>++))", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#x86\">x86</a> == <a class=\"id\" href=\"#AMD_MODEL_RANGE_FAMILY\">AMD_MODEL_RANGE_FAMILY</a>(<a class=\"id\" href=\"#range\">range</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#ms\">ms</a> >= <a class=\"id\" href=\"#AMD_MODEL_RANGE_START\">AMD_MODEL_RANGE_START</a>(<a class=\"id\" href=\"#range\">range</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#ms\">ms</a> <= <a class=\"id\" href=\"#AMD_MODEL_RANGE_END\">AMD_MODEL_RANGE_END</a>(<a class=\"id\" href=\"#range\">range</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cpu_has_amd_erratum\">cpu_has_amd_erratum</a>);", 
];
xr_frag_insert('l/85/5bb6648611fb56042667083c8011eae3d27972.xr', __xr_tmp);
