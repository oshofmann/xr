var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/kernel/capability.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1997  Andrew Main &lt;zefram@fysh.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Integrated into 2.1.97+,  Andrew G. Morgan &lt;morgan@kernel.org&gt;</span>", 
"<span class=\"comment\"> * 30 May 2002:<span class=\"ts\"/>Cleanup, Robert M. Love &lt;rml@tech9.net&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Leveraged for setting/resetting capabilities</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> <a class=\"id\" href=\"#__cap_empty_set\">__cap_empty_set</a> = <a class=\"id\" href=\"#CAP_EMPTY_SET\">CAP_EMPTY_SET</a>;", 
"const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> <a class=\"id\" href=\"#__cap_full_set\">__cap_full_set</a> = <a class=\"id\" href=\"#CAP_FULL_SET\">CAP_FULL_SET</a>;", 
"const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> <a class=\"id\" href=\"#__cap_init_eff_set\">__cap_init_eff_set</a> = <a class=\"id\" href=\"#CAP_INIT_EFF_SET\">CAP_INIT_EFF_SET</a>;", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__cap_empty_set\">__cap_empty_set</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__cap_full_set\">__cap_full_set</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__cap_init_eff_set\">__cap_init_eff_set</a>);", 
"", 
"int <a class=\"id\" href=\"#file_caps_enabled\">file_caps_enabled</a> = 1;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#file_caps_disable\">file_caps_disable</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_caps_enabled\">file_caps_enabled</a> = 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"no_file_caps\", <a class=\"id\" href=\"#file_caps_disable\">file_caps_disable</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * More recent versions of libcap are available from:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   http://www.kernel.org/pub/linux/libs/security/linux-privs/</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#warn_legacy_capability_use\">warn_legacy_capability_use</a>(void)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#warned\">warned</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#warned\">warned</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[sizeof(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>)];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"warning: `%s' uses 32-bit capabilities\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \" (legacy support in use)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#get_task_comm\">get_task_comm</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warned\">warned</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Version 2 capabilities worked fine, but the linux/capability.h file</span>", 
"<span class=\"comment\"> * that accompanied their introduction encouraged their use without</span>", 
"<span class=\"comment\"> * the necessary user-space source code changes. As such, we have</span>", 
"<span class=\"comment\"> * created a version 3 with equivalent functionality to version 2, but</span>", 
"<span class=\"comment\"> * with a header change to protect legacy source code from using</span>", 
"<span class=\"comment\"> * version 2 when it wanted to use version 1. If your system has code</span>", 
"<span class=\"comment\"> * that trips the following warning, it is using version 2 specific</span>", 
"<span class=\"comment\"> * capabilities and may be doing so insecurely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The remedy is to either upgrade your version of libcap (to 2.10+,</span>", 
"<span class=\"comment\"> * if the application is linked against it), or recompile your</span>", 
"<span class=\"comment\"> * application with modern kernel headers and this warning will go</span>", 
"<span class=\"comment\"> * away.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#warn_deprecated_v2\">warn_deprecated_v2</a>(void)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#warned\">warned</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#warned\">warned</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[sizeof(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>)];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"warning: `%s' uses deprecated v2\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \" capabilities in a way that may be insecure.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#get_task_comm\">get_task_comm</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warned\">warned</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Version check. Return the number of u32s in each capability flag</span>", 
"<span class=\"comment\"> * array, or a negative value on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cap_validate_magic\">cap_validate_magic</a>(<a class=\"id\" href=\"#cap_user_header_t\">cap_user_header_t</a> <a class=\"id\" href=\"#header\">header</a>, unsigned *<a class=\"id\" href=\"#tocopy\">tocopy</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#version\">version</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#version\">version</a>, &amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#version\">version</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#version\">version</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_LINUX_CAPABILITY_VERSION_1\">_LINUX_CAPABILITY_VERSION_1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_legacy_capability_use\">warn_legacy_capability_use</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tocopy\">tocopy</a> = <a class=\"id\" href=\"#_LINUX_CAPABILITY_U32S_1\">_LINUX_CAPABILITY_U32S_1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_LINUX_CAPABILITY_VERSION_2\">_LINUX_CAPABILITY_VERSION_2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_deprecated_v2\">warn_deprecated_v2</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fall through - v3 is otherwise equivalent to v2.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_LINUX_CAPABILITY_VERSION_3\">_LINUX_CAPABILITY_VERSION_3</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tocopy\">tocopy</a> = <a class=\"id\" href=\"#_LINUX_CAPABILITY_U32S_3\">_LINUX_CAPABILITY_U32S_3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#_KERNEL_CAPABILITY_VERSION\">_KERNEL_CAPABILITY_VERSION</a>, &amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#version\">version</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The only thing that can change the capabilities of the current</span>", 
"<span class=\"comment\"> * process is the current process. As such, we can't be in this code</span>", 
"<span class=\"comment\"> * at the same time as we are in the process of setting capabilities</span>", 
"<span class=\"comment\"> * in this process. The net result is that we can limit our use of</span>", 
"<span class=\"comment\"> * locks to when we are reading the caps of another process.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cap_get_target_pid\">cap_get_target_pid</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#pEp\">pEp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#pIp\">pIp</a>, <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#pPp\">pPp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> && (<a class=\"id\" href=\"#pid\">pid</a> != <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#target\">target</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_capget\">security_capget</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#pEp\">pEp</a>, <a class=\"id\" href=\"#pIp\">pIp</a>, <a class=\"id\" href=\"#pPp\">pPp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_capget\">security_capget</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#pEp\">pEp</a>, <a class=\"id\" href=\"#pIp\">pIp</a>, <a class=\"id\" href=\"#pPp\">pPp</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sys_capget - get the capabilities of a given process.</span>", 
"<span class=\"comment\"> * @header: pointer to struct that contains capability version and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>target pid data</span>", 
"<span class=\"comment\"> * @dataptr: pointer to struct that contains the effective, permitted,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and inheritable capabilities that are returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success and &lt; 0 on error.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#capget\">capget</a>, <a class=\"id\" href=\"#cap_user_header_t\">cap_user_header_t</a>, <a class=\"id\" href=\"#header\">header</a>, <a class=\"id\" href=\"#cap_user_data_t\">cap_user_data_t</a>, <a class=\"id\" href=\"#dataptr\">dataptr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#tocopy\">tocopy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> <a class=\"id\" href=\"#pE\">pE</a>, <a class=\"id\" href=\"#pI\">pI</a>, <a class=\"id\" href=\"#pP\">pP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cap_validate_magic\">cap_validate_magic</a>(<a class=\"id\" href=\"#header\">header</a>, &amp;<a class=\"id\" href=\"#tocopy\">tocopy</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dataptr\">dataptr</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) || (<a class=\"id\" href=\"#ret\">ret</a> != 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return ((<a class=\"id\" href=\"#dataptr\">dataptr</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) && (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>)) ? 0 : <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#pid\">pid</a>, &amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#pid\">pid</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cap_get_target_pid\">cap_get_target_pid</a>(<a class=\"id\" href=\"#pid\">pid</a>, &amp;<a class=\"id\" href=\"#pE\">pE</a>, &amp;<a class=\"id\" href=\"#pI\">pI</a>, &amp;<a class=\"id\" href=\"#pP\">pP</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#__user_cap_data_struct\">__user_cap_data_struct</a> <a class=\"id\" href=\"#kdata\">kdata</a>[<a class=\"id\" href=\"#_KERNEL_CAPABILITY_U32S\">_KERNEL_CAPABILITY_U32S</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tocopy\">tocopy</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdata\">kdata</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#effective\">effective</a> = <a class=\"id\" href=\"#pE\">pE</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdata\">kdata</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#permitted\">permitted</a> = <a class=\"id\" href=\"#pP\">pP</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdata\">kdata</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#inheritable\">inheritable</a> = <a class=\"id\" href=\"#pI\">pI</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note, in the case, tocopy &lt; _KERNEL_CAPABILITY_U32S,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we silently drop the upper capabilities here. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has the effect of making older libcap</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * implementations implicitly drop upper capability</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bits when they perform a: capget/modify/capset</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sequence.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This behavior is considered fail-safe</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * behavior. Upgrading the application to a newer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * version of libcap will enable access to the newer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * capabilities.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * An alternative would be to return an error here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (-ERANGE), but that causes legacy applications to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unexpectidly fail; the capget/modify/capset aborts</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * before modification is attempted and the application</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fails.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#dataptr\">dataptr</a>, <a class=\"id\" href=\"#kdata\">kdata</a>, <a class=\"id\" href=\"#tocopy\">tocopy</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sizeof(struct <a class=\"id\" href=\"#__user_cap_data_struct\">__user_cap_data_struct</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sys_capset - set capabilities for a process or (*) a group of processes</span>", 
"<span class=\"comment\"> * @header: pointer to struct that contains capability version and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>target pid data</span>", 
"<span class=\"comment\"> * @data: pointer to struct that contains the effective, permitted,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and inheritable capabilities</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set capabilities for the current process only.  The ability to any other</span>", 
"<span class=\"comment\"> * process(es) has been deprecated and removed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The restrictions on setting capabilities are specified as:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * I: any raised capabilities must be a subset of the old permitted</span>", 
"<span class=\"comment\"> * P: any raised capabilities must be a subset of the old permitted</span>", 
"<span class=\"comment\"> * E: must be set to a subset of new permitted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success and &lt; 0 on error.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#capset\">capset</a>, <a class=\"id\" href=\"#cap_user_header_t\">cap_user_header_t</a>, <a class=\"id\" href=\"#header\">header</a>, const <a class=\"id\" href=\"#cap_user_data_t\">cap_user_data_t</a>, <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#__user_cap_data_struct\">__user_cap_data_struct</a> <a class=\"id\" href=\"#kdata\">kdata</a>[<a class=\"id\" href=\"#_KERNEL_CAPABILITY_U32S\">_KERNEL_CAPABILITY_U32S</a>];", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#tocopy\">tocopy</a>, <a class=\"id\" href=\"#copybytes\">copybytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> <a class=\"id\" href=\"#inheritable\">inheritable</a>, <a class=\"id\" href=\"#permitted\">permitted</a>, <a class=\"id\" href=\"#effective\">effective</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cap_validate_magic\">cap_validate_magic</a>(<a class=\"id\" href=\"#header\">header</a>, &amp;<a class=\"id\" href=\"#tocopy\">tocopy</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#pid\">pid</a>, &amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#pid\">pid</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* may only affect current now */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> != 0 && <a class=\"id\" href=\"#pid\">pid</a> != <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copybytes\">copybytes</a> = <a class=\"id\" href=\"#tocopy\">tocopy</a> * sizeof(struct <a class=\"id\" href=\"#__user_cap_data_struct\">__user_cap_data_struct</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copybytes\">copybytes</a> &gt; sizeof(<a class=\"id\" href=\"#kdata\">kdata</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#kdata\">kdata</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#copybytes\">copybytes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tocopy\">tocopy</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effective\">effective</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#kdata\">kdata</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#effective\">effective</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#permitted\">permitted</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#kdata\">kdata</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#permitted\">permitted</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inheritable\">inheritable</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#kdata\">kdata</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#inheritable\">inheritable</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#_KERNEL_CAPABILITY_U32S\">_KERNEL_CAPABILITY_U32S</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effective\">effective</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#permitted\">permitted</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inheritable\">inheritable</a>.<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#prepare_creds\">prepare_creds</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_capset\">security_capset</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#current_cred\">current_cred</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#effective\">effective</a>, &amp;<a class=\"id\" href=\"#inheritable\">inheritable</a>, &amp;<a class=\"id\" href=\"#permitted\">permitted</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_capset\">audit_log_capset</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#current_cred\">current_cred</a>());", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#commit_creds\">commit_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#abort_creds\">abort_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * capable - Determine if the current task has a superior capability in effect</span>", 
"<span class=\"comment\"> * @cap: The capability to be tested for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return true if the current task has the given superior capability currently</span>", 
"<span class=\"comment\"> * available for use, false if not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This sets PF_SUPERPRIV on the task if the capability is available on the</span>", 
"<span class=\"comment\"> * assumption that it's about to be used.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#capable\">capable</a>(int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cap_valid\">cap_valid</a>(<a class=\"id\" href=\"#cap\">cap</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"capable() called with invalid cap=%u\\n\", <a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#security_capable\">security_capable</a>(<a class=\"id\" href=\"#cap\">cap</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_SUPERPRIV\">PF_SUPERPRIV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#capable\">capable</a>);", 
];
xr_frag_insert('l/85/c9915823e5796f42035d6105b93d2cd34ef406.xr', __xr_tmp);
