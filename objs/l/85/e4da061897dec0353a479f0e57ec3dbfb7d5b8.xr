var __xr_tmp = [
"<span class=\"comment\">/* rwsem.h: R/W semaphores, public interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written by David Howells (dhowells@redhat.com).</span>", 
"<span class=\"comment\"> * Derived from asm-i386/semaphore.h</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_RWSEM_H\">_LINUX_RWSEM_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_RWSEM_H\">_LINUX_RWSEM_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RWSEM_GENERIC_SPINLOCK\">CONFIG_RWSEM_GENERIC_SPINLOCK</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>-<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* use a generic implementation */</span>", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* use an arch-specific implementation */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lock for reading</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#down_read\">down_read</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trylock for reading -- returns 1 if successful, 0 if contention</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#down_read_trylock\">down_read_trylock</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lock for writing</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#down_write\">down_write</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trylock for writing -- returns 1 if successful, 0 if contention</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#down_write_trylock\">down_write_trylock</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * release a read lock</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#up_read\">up_read</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * release a write lock</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#up_write\">up_write</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * downgrade write lock to read lock</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#downgrade_write\">downgrade_write</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * nested locking. NOTE: rwsems are not allowed to recurse</span>", 
"<span class=\"comment\"> * (which occurs if the same task tries to acquire the same</span>", 
"<span class=\"comment\"> * lock instance multiple times), but multiple locks of the</span>", 
"<span class=\"comment\"> * same lock class might be taken, if the order of the locks</span>", 
"<span class=\"comment\"> * is always the same. This ordering rule can be expressed</span>", 
"<span class=\"comment\"> * to lockdep via the _nested() APIs, but enumerating the</span>", 
"<span class=\"comment\"> * subclasses that are used. (If the nesting relationship is</span>", 
"<span class=\"comment\"> * static then another method for expressing nested locking is</span>", 
"<span class=\"comment\"> * the explicit definition of lock class keys and the use of</span>", 
"<span class=\"comment\"> * lockdep_set_class() at lock initialization time.</span>", 
"<span class=\"comment\"> * See Documentation/lockdep-design.txt for more details.)</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#down_read_nested\">down_read_nested</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>, int <a class=\"id\" href=\"#subclass\">subclass</a>);", 
"extern void <a class=\"id\" href=\"#down_write_nested\">down_write_nested</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>, int <a class=\"id\" href=\"#subclass\">subclass</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Take/release a lock when not the owner will release it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * [ This API should be avoided as much as possible - the</span>", 
"<span class=\"comment\"> *   proper abstraction for this case is completions. ]</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#down_read_non_owner\">down_read_non_owner</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"extern void <a class=\"id\" href=\"#up_read_non_owner\">up_read_non_owner</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#down_read_nested\">down_read_nested</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#subclass\">subclass</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(<a class=\"id\" href=\"#sem\">sem</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#down_write_nested\">down_write_nested</a>(<a class=\"id\" href=\"#sem\">sem</a>, <a class=\"id\" href=\"#subclass\">subclass</a>)<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(<a class=\"id\" href=\"#sem\">sem</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#down_read_non_owner\">down_read_non_owner</a>(<a class=\"id\" href=\"#sem\">sem</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(<a class=\"id\" href=\"#sem\">sem</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#up_read_non_owner\">up_read_non_owner</a>(<a class=\"id\" href=\"#sem\">sem</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(<a class=\"id\" href=\"#sem\">sem</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_RWSEM_H */</span>", 
];
xr_frag_insert('l/85/e4da061897dec0353a479f0e57ec3dbfb7d5b8.xr', __xr_tmp);
